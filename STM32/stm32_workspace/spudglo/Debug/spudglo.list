
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a28c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a66c  0800a66c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a674  0800a674  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a674  0800a674  0001a674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800a67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e08  2000016c  0800a7e8  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f74  0800a7e8  00022f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d21  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005433  00000000  00000000  00045ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f88  00000000  00000000  0004b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  0004d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fcf  00000000  00000000  0004f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ef0  00000000  00000000  00079047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b5d  00000000  00000000  000a1f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019aa94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dac  00000000  00000000  0019aae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001a3890  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001a38b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a404 	.word	0x0800a404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800a404 	.word	0x0800a404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000578:	e009      	b.n	800058e <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <current_monitor_init+0x5c>)
 800057c:	edd3 7a00 	vldr	s15, [r3]
 8000580:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80005d4 <current_monitor_init+0x60>
 8000584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <current_monitor_init+0x5c>)
 800058a:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <current_monitor_init+0x5c>)
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80005d8 <current_monitor_init+0x64>
 8000598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80005dc <current_monitor_init+0x68>
 80005a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a4:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80005a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	dce3      	bgt.n	800057a <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <current_monitor_init+0x5c>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d900      	bls.n	80005c4 <current_monitor_init+0x50>
    //g_max_current_ratio = 1.0f;
}
 80005c2:	e000      	b.n	80005c6 <current_monitor_init+0x52>
    if (g_max_current_ratio <= 0) while(1); // broken..
 80005c4:	e7fe      	b.n	80005c4 <current_monitor_init+0x50>
}
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000
 80005d4:	3d4ccccd 	.word	0x3d4ccccd
 80005d8:	3d23d70a 	.word	0x3d23d70a
 80005dc:	42cc0000 	.word	0x42cc0000

080005e0 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 80005f4:	f000 fabe 	bl	8000b74 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <animate_led_set_all_pixels>:
    //animate_led_show_strip(mask);
}


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4604      	mov	r4, r0
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4623      	mov	r3, r4
 8000610:	80fb      	strh	r3, [r7, #6]
 8000612:	4603      	mov	r3, r0
 8000614:	717b      	strb	r3, [r7, #5]
 8000616:	460b      	mov	r3, r1
 8000618:	713b      	strb	r3, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <animate_led_set_all_pixels+0xd0>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	88fa      	ldrh	r2, [r7, #6]
 8000628:	429a      	cmp	r2, r3
 800062a:	d122      	bne.n	8000672 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800062c:	2301      	movs	r3, #1
 800062e:	75fb      	strb	r3, [r7, #23]
 8000630:	e01b      	b.n	800066a <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f8f5 	bl	8000824 <ws2812_get_strip_size>
 800063a:	4603      	mov	r3, r0
 800063c:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 800063e:	2300      	movs	r3, #0
 8000640:	82bb      	strh	r3, [r7, #20]
 8000642:	e00b      	b.n	800065c <animate_led_set_all_pixels+0x5c>
 8000644:	793c      	ldrb	r4, [r7, #4]
 8000646:	797a      	ldrb	r2, [r7, #5]
 8000648:	8ab9      	ldrh	r1, [r7, #20]
 800064a:	7df8      	ldrb	r0, [r7, #23]
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4623      	mov	r3, r4
 8000652:	f000 f909 	bl	8000868 <ws2812b_set_led>
 8000656:	8abb      	ldrh	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	82bb      	strh	r3, [r7, #20]
 800065c:	8aba      	ldrh	r2, [r7, #20]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3ef      	bcc.n	8000644 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	3301      	adds	r3, #1
 8000668:	75fb      	strb	r3, [r7, #23]
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d9e0      	bls.n	8000632 <animate_led_set_all_pixels+0x32>
 8000670:	e026      	b.n	80006c0 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000672:	2301      	movs	r3, #1
 8000674:	74fb      	strb	r3, [r7, #19]
 8000676:	e020      	b.n	80006ba <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000678:	88fa      	ldrh	r2, [r7, #6]
 800067a:	7cfb      	ldrb	r3, [r7, #19]
 800067c:	4013      	ands	r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d018      	beq.n	80006b4 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f8cd 	bl	8000824 <ws2812_get_strip_size>
 800068a:	4603      	mov	r3, r0
 800068c:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 800068e:	2300      	movs	r3, #0
 8000690:	823b      	strh	r3, [r7, #16]
 8000692:	e00b      	b.n	80006ac <animate_led_set_all_pixels+0xac>
 8000694:	793c      	ldrb	r4, [r7, #4]
 8000696:	797a      	ldrb	r2, [r7, #5]
 8000698:	8a39      	ldrh	r1, [r7, #16]
 800069a:	7cf8      	ldrb	r0, [r7, #19]
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4623      	mov	r3, r4
 80006a2:	f000 f8e1 	bl	8000868 <ws2812b_set_led>
 80006a6:	8a3b      	ldrh	r3, [r7, #16]
 80006a8:	3301      	adds	r3, #1
 80006aa:	823b      	strh	r3, [r7, #16]
 80006ac:	8a3a      	ldrh	r2, [r7, #16]
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3ef      	bcc.n	8000694 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	3301      	adds	r3, #1
 80006b8:	74fb      	strb	r3, [r7, #19]
 80006ba:	7cfb      	ldrb	r3, [r7, #19]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d9db      	bls.n	8000678 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff8c 	bl	80005e0 <animate_led_show_strip>
}
 80006c8:	bf00      	nop
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	200002bc 	.word	0x200002bc

080006d4 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <animate_led_solid_custom_color+0x40>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	81bb      	strh	r3, [r7, #12]
 80006e6:	2300      	movs	r3, #0
 80006e8:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4619      	mov	r1, r3
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f000 f811 	bl	8000718 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 80006f6:	7b39      	ldrb	r1, [r7, #12]
 80006f8:	7b7a      	ldrb	r2, [r7, #13]
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	88f8      	ldrh	r0, [r7, #6]
 80006fe:	f7ff ff7f 	bl	8000600 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff6b 	bl	80005e0 <animate_led_show_strip>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0800a41c 	.word	0x0800a41c

08000718 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	0c1b      	lsrs	r3, r3, #16
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0a1a      	lsrs	r2, r3, #8
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	3302      	adds	r3, #2
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);

    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <reset_ws2812b+0x2c>)
 8000758:	2100      	movs	r1, #0
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <reset_ws2812b+0x30>)
 800075c:	f005 fe20 	bl	80063a0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <reset_ws2812b+0x2c>)
 8000764:	2104      	movs	r1, #4
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <reset_ws2812b+0x30>)
 8000768:	f005 fe1a 	bl	80063a0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	4a03      	ldr	r2, [pc, #12]	; (800077c <reset_ws2812b+0x2c>)
 8000770:	2108      	movs	r1, #8
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <reset_ws2812b+0x30>)
 8000774:	f005 fe14 	bl	80063a0 <HAL_TIM_PWM_Start_DMA>
//    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
//    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200002c8 	.word	0x200002c8
 8000780:	20001eac 	.word	0x20001eac

08000784 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	3301      	adds	r3, #1
 8000792:	b2db      	uxtb	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d104      	bne.n	80007de <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	737b      	strb	r3, [r7, #13]
        break;
 80007dc:	e000      	b.n	80007e0 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 80007de:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 80007e0:	89fa      	ldrh	r2, [r7, #14]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007f2:	7b7b      	ldrb	r3, [r7, #13]
 80007f4:	ee07 3a90 	vmov	s15, r3
 80007f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007fc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000820 <ws2812_get_pwm_strip_offset+0x64>
 8000800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080c:	ee17 3a90 	vmov	r3, s15
 8000810:	b29b      	uxth	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	453b8000 	.word	0x453b8000

08000824 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d103      	bne.n	8000840 <ws2812_get_strip_size+0x1c>
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <ws2812_get_strip_size+0x3c>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	81fb      	strh	r3, [r7, #14]
 800083e:	e009      	b.n	8000854 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff9e 	bl	8000784 <ws2812_convert_strip_num_to_strip_bit>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <ws2812_get_strip_size+0x40>)
 800084e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000852:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8000854:	89fb      	ldrh	r3, [r7, #14]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002be 	.word	0x200002be
 8000864:	20000004 	.word	0x20000004

08000868 <ws2812b_set_led>:
}


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	4604      	mov	r4, r0
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4623      	mov	r3, r4
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	4603      	mov	r3, r0
 800087c:	81bb      	strh	r3, [r7, #12]
 800087e:	460b      	mov	r3, r1
 8000880:	73bb      	strb	r3, [r7, #14]
 8000882:	4613      	mov	r3, r2
 8000884:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff89 	bl	80007a0 <ws2812_convert_strip_bit_to_strip_num>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <ws2812b_set_led+0xd0>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	4a24      	ldr	r2, [pc, #144]	; (800093c <ws2812b_set_led+0xd4>)
 80008aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008ae:	89ba      	ldrh	r2, [r7, #12]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80008c0:	793a      	ldrb	r2, [r7, #4]
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <ws2812b_set_led+0xd0>)
 80008d2:	edd3 7a00 	vldr	s15, [r3]
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <ws2812b_set_led+0xd4>)
 80008de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008e2:	89ba      	ldrh	r2, [r7, #12]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80008f4:	793a      	ldrb	r2, [r7, #4]
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 80008fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <ws2812b_set_led+0xd0>)
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <ws2812b_set_led+0xd4>)
 8000914:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000918:	89ba      	ldrh	r2, [r7, #12]
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	440b      	add	r3, r1
 8000922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000926:	edc7 7a01 	vstr	s15, [r7, #4]
 800092a:	793a      	ldrb	r2, [r7, #4]
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	709a      	strb	r2, [r3, #2]
}
 8000930:	bf00      	nop
 8000932:	371c      	adds	r7, #28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	200002c4 	.word	0x200002c4

08000940 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 800094a:	2366      	movs	r3, #102	; 0x66
 800094c:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff34 	bl	80007bc <ws2812_get_pwm_strip_offset>
 8000954:	4603      	mov	r3, r0
 8000956:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8000958:	e002      	b.n	8000960 <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fcb6 	bl	80012cc <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8000960:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f083 0301 	eor.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f5      	bne.n	800095a <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 800096e:	2300      	movs	r3, #0
 8000970:	82fb      	strh	r3, [r7, #22]
 8000972:	e046      	b.n	8000a02 <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8000974:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	440b      	add	r3, r1
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	8afa      	ldrh	r2, [r7, #22]
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	4403      	add	r3, r0
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8000998:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 800099a:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	8afa      	ldrh	r2, [r7, #22]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	4403      	add	r3, r0
 80009a8:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80009aa:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009ac:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	757b      	strb	r3, [r7, #21]
 80009b2:	e020      	b.n	80009f6 <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80009b4:	7d7b      	ldrb	r3, [r7, #21]
 80009b6:	f1c3 0317 	rsb	r3, r3, #23
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 80009ca:	2028      	movs	r0, #40	; 0x28
 80009cc:	e000      	b.n	80009d0 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 80009ce:	2014      	movs	r0, #20
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	8afa      	ldrh	r2, [r7, #22]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	461a      	mov	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	441a      	add	r2, r3
 80009e4:	7d7b      	ldrb	r3, [r7, #21]
 80009e6:	4413      	add	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	4602      	mov	r2, r0
 80009ee:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	3301      	adds	r3, #1
 80009f4:	757b      	strb	r3, [r7, #21]
 80009f6:	7d7b      	ldrb	r3, [r7, #21]
 80009f8:	2b17      	cmp	r3, #23
 80009fa:	d9db      	bls.n	80009b4 <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	3301      	adds	r3, #1
 8000a00:	82fb      	strh	r3, [r7, #22]
 8000a02:	8afb      	ldrh	r3, [r7, #22]
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d8b4      	bhi.n	8000974 <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	827b      	strh	r3, [r7, #18]
 8000a0e:	e012      	b.n	8000a36 <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	441a      	add	r2, r3
 8000a24:	8a7b      	ldrh	r3, [r7, #18]
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	440b      	add	r3, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a30:	8a7b      	ldrh	r3, [r7, #18]
 8000a32:	3301      	adds	r3, #1
 8000a34:	827b      	strh	r3, [r7, #18]
 8000a36:	8a7b      	ldrh	r3, [r7, #18]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a40:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a80 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8000a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4c:	d4e0      	bmi.n	8000a10 <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	441a      	add	r2, r3
 8000a5e:	f241 5348 	movw	r3, #5448	; 0x1548
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8000a66:	f005 fc9b 	bl	80063a0 <HAL_TIM_PWM_Start_DMA>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000101 	.word	0x20000101
 8000a78:	200002c4 	.word	0x200002c4
 8000a7c:	200002c0 	.word	0x200002c0
 8000a80:	453b8000 	.word	0x453b8000
 8000a84:	20000100 	.word	0x20000100
 8000a88:	20001eac 	.word	0x20001eac

08000a8c <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <ws2812b_init+0xc8>)
 8000a94:	4a30      	ldr	r2, [pc, #192]	; (8000b58 <ws2812b_init+0xcc>)
 8000a96:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	e00f      	b.n	8000ac2 <ws2812b_init+0x36>
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <ws2812b_init+0xd0>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <ws2812b_init+0xd0>)
 8000aba:	801a      	strh	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	ddec      	ble.n	8000aa2 <ws2812b_init+0x16>
	switch (num_strips)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10d      	bne.n	8000aea <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <ws2812b_init+0xd4>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	3366      	adds	r3, #102	; 0x66
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <ws2812b_init+0xd4>)
 8000ad8:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <ws2812b_init+0xd8>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	2b65      	cmp	r3, #101	; 0x65
 8000ae0:	d802      	bhi.n	8000ae8 <ws2812b_init+0x5c>
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <ws2812b_init+0xd8>)
 8000ae4:	2266      	movs	r2, #102	; 0x66
 8000ae6:	801a      	strh	r2, [r3, #0]
		break;
 8000ae8:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <ws2812b_init+0xd4>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	ee07 3a90 	vmov	s15, r3
 8000afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b00:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b68 <ws2812b_init+0xdc>
 8000b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0c:	ee17 0a90 	vmov	r0, s15
 8000b10:	f008 fc06 	bl	8009320 <malloc>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <ws2812b_init+0xe0>)
 8000b1a:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <ws2812b_init+0xd4>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b32:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b68 <ws2812b_init+0xdc>
 8000b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b3e:	ee17 2a90 	vmov	r2, s15
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <ws2812b_init+0xe4>)
 8000b44:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8000b46:	f7ff fd15 	bl	8000574 <current_monitor_init>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200002c4 	.word	0x200002c4
 8000b58:	20000188 	.word	0x20000188
 8000b5c:	200002bc 	.word	0x200002bc
 8000b60:	200002ba 	.word	0x200002ba
 8000b64:	200002be 	.word	0x200002be
 8000b68:	453b8000 	.word	0x453b8000
 8000b6c:	200002c0 	.word	0x200002c0
 8000b70:	2000032c 	.word	0x2000032c

08000b74 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8000b78:	f7ff fee2 	bl	8000940 <ws2812b_fill_pwm_buffer_strip_one>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <semaphore_create>:
SemaphoreHandle_t g_dma_fill_semaphore;
StaticSemaphore_t g_dma_fill_semaphore_buffer;


void semaphore_create(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af02      	add	r7, sp, #8
    g_dma_transfer_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_transfer_semaphore_buffer);
 8000b86:	2303      	movs	r3, #3
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <semaphore_create+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fd07 	bl	80015a4 <xQueueGenericCreateStatic>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <semaphore_create+0x58>)
 8000b9a:	6013      	str	r3, [r2, #0]
    g_dma_fill_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_fill_semaphore_buffer);
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <semaphore_create+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 fcfc 	bl	80015a4 <xQueueGenericCreateStatic>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <semaphore_create+0x60>)
 8000bb0:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(g_dma_transfer_semaphore);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <semaphore_create+0x58>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f000 fd8e 	bl	80016dc <xQueueGenericSend>
    xSemaphoreGive(g_dma_fill_semaphore);
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <semaphore_create+0x60>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f000 fd87 	bl	80016dc <xQueueGenericSend>
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000334 	.word	0x20000334
 8000bd8:	20000330 	.word	0x20000330
 8000bdc:	20000388 	.word	0x20000388
 8000be0:	20000384 	.word	0x20000384

08000be4 <task_led_ctrl_button_to_isr>:
    return g_animate_led_interrupt;
}


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d817      	bhi.n	8000c24 <task_led_ctrl_button_to_isr+0x40>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <task_led_ctrl_button_to_isr+0x18>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c13 	.word	0x08000c13
 8000c04:	08000c19 	.word	0x08000c19
 8000c08:	08000c1f 	.word	0x08000c1f
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8000c10:	e009      	b.n	8000c26 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
        break;
 8000c16:	e006      	b.n	8000c26 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8000c1c:	e003      	b.n	8000c26 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	73fb      	strb	r3, [r7, #15]
        break;
 8000c22:	e000      	b.n	8000c26 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8000c24:	bf00      	nop
    }
    return return_val;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	54d1      	strb	r1, [r2, r3]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	200003fb 	.word	0x200003fb
 8000c5c:	200003fc 	.word	0x200003fc

08000c60 <task_button_press>:
uint32_t b_ok_count = 0;
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;

void task_button_press(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	f107 0208 	add.w	r2, r7, #8
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	2000      	movs	r0, #0
 8000c84:	f001 ffce 	bl	8002c24 <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4883      	ldr	r0, [pc, #524]	; (8000e9c <task_button_press+0x23c>)
 8000c8e:	f003 fec3 	bl	8004a18 <HAL_GPIO_WritePin>
        osDelay(500);
 8000c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c96:	f000 fb19 	bl	80012cc <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	487f      	ldr	r0, [pc, #508]	; (8000e9c <task_button_press+0x23c>)
 8000ca0:	f003 feba 	bl	8004a18 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b7d      	ldr	r3, [pc, #500]	; (8000ea0 <task_button_press+0x240>)
 8000cac:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	497a      	ldr	r1, [pc, #488]	; (8000ea0 <task_button_press+0x240>)
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cc6:	d206      	bcs.n	8000cd6 <task_button_press+0x76>
 8000cc8:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <task_button_press+0x244>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b74      	ldr	r3, [pc, #464]	; (8000ea4 <task_button_press+0x244>)
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e002      	b.n	8000cdc <task_button_press+0x7c>
        else fast_press_count = 0;
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <task_button_press+0x244>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff7f 	bl	8000be4 <task_led_ctrl_button_to_isr>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffa3 	bl	8000c34 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH - 1))
 8000cee:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <task_button_press+0x244>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d966      	bls.n	8000dc4 <task_button_press+0x164>
        {
            task_button_press_major_change = true;
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <task_button_press+0x248>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d83d      	bhi.n	8000d80 <task_button_press+0x120>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <task_button_press+0xac>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	08000d37 	.word	0x08000d37
 8000d14:	08000d55 	.word	0x08000d55
 8000d18:	08000d6d 	.word	0x08000d6d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000d1c:	4b63      	ldr	r3, [pc, #396]	; (8000eac <task_button_press+0x24c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a62      	ldr	r2, [pc, #392]	; (8000eac <task_button_press+0x24c>)
 8000d24:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8000d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d2a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8000d30:	f000 f942 	bl	8000fb8 <task_led_ctrl_speed_reset>

                break;
 8000d34:	e025      	b.n	8000d82 <task_button_press+0x122>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000d36:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <task_button_press+0x250>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <task_button_press+0x250>)
 8000d3e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8000d40:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000d44:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8000d46:	2328      	movs	r3, #40	; 0x28
 8000d48:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8000d4a:	f000 f941 	bl	8000fd0 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8000d4e:	f000 f969 	bl	8001024 <task_led_ctrl_animate_state_demo>
                break;
 8000d52:	e016      	b.n	8000d82 <task_button_press+0x122>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <task_button_press+0x254>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <task_button_press+0x254>)
 8000d5c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8000d5e:	23ff      	movs	r3, #255	; 0xff
 8000d60:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8000d62:	2317      	movs	r3, #23
 8000d64:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8000d66:	f000 f8d3 	bl	8000f10 <task_led_ctrl_color_state_demo>
                break;
 8000d6a:	e00a      	b.n	8000d82 <task_button_press+0x122>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <task_button_press+0x258>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <task_button_press+0x258>)
 8000d74:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLACK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	74fb      	strb	r3, [r7, #19]
                break;
 8000d7e:	e000      	b.n	8000d82 <task_button_press+0x122>
                default:
                break;
 8000d80:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	74bb      	strb	r3, [r7, #18]
 8000d86:	e00a      	b.n	8000d9e <task_button_press+0x13e>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8000d88:	6979      	ldr	r1, [r7, #20]
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fca2 	bl	80006d4 <animate_led_solid_custom_color>
                //osDelay(500);
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8000d90:	2100      	movs	r1, #0
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff fc9e 	bl	80006d4 <animate_led_solid_custom_color>
            for (uint8_t iii = 0; iii < 3; iii++)
 8000d98:	7cbb      	ldrb	r3, [r7, #18]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	74bb      	strb	r3, [r7, #18]
 8000d9e:	7cbb      	ldrb	r3, [r7, #18]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d9f1      	bls.n	8000d88 <task_button_press+0x128>
                //osDelay(500);
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8000da4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000da8:	2200      	movs	r2, #0
 8000daa:	2118      	movs	r1, #24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 f9f4 	bl	800419a <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8000db2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fa0b 	bl	80041d2 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8000dbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <task_button_press+0x248>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e759      	b.n	8000c78 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff0b 	bl	8000be4 <task_led_ctrl_button_to_isr>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff2f 	bl	8000c34 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d85c      	bhi.n	8000e98 <task_button_press+0x238>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <task_button_press+0x184>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e15 	.word	0x08000e15
 8000dec:	08000e49 	.word	0x08000e49
 8000df0:	08000e79 	.word	0x08000e79
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <task_button_press+0x24c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <task_button_press+0x24c>)
 8000dfc:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8000dfe:	f000 f8c3 	bl	8000f88 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2118      	movs	r1, #24
 8000e06:	2008      	movs	r0, #8
 8000e08:	f003 f9c7 	bl	800419a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8000e0c:	2008      	movs	r0, #8
 8000e0e:	f003 f9e0 	bl	80041d2 <HAL_NVIC_EnableIRQ>
                break;
 8000e12:	e042      	b.n	8000e9a <task_button_press+0x23a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <task_button_press+0x250>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <task_button_press+0x250>)
 8000e1c:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8000e1e:	f000 f929 	bl	8001074 <task_led_ctrl_animate_state>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <task_button_press+0x1ce>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8000e28:	f000 f90e 	bl	8001048 <task_led_ctrl_animate_state_fixed>
 8000e2c:	e003      	b.n	8000e36 <task_button_press+0x1d6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8000e2e:	f000 f8cf 	bl	8000fd0 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8000e32:	f000 f8d9 	bl	8000fe8 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2118      	movs	r1, #24
 8000e3a:	2028      	movs	r0, #40	; 0x28
 8000e3c:	f003 f9ad 	bl	800419a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f003 f9c6 	bl	80041d2 <HAL_NVIC_EnableIRQ>
                break;
 8000e46:	e028      	b.n	8000e9a <task_button_press+0x23a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <task_button_press+0x254>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <task_button_press+0x254>)
 8000e50:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8000e52:	f000 f851 	bl	8000ef8 <task_led_ctrl_color_state>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <task_button_press+0x202>
                    {
                        task_led_ctrl_color_state_fixed();
 8000e5c:	f000 f864 	bl	8000f28 <task_led_ctrl_color_state_fixed>
 8000e60:	e001      	b.n	8000e66 <task_button_press+0x206>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8000e62:	f000 f873 	bl	8000f4c <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2118      	movs	r1, #24
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 f995 	bl	800419a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8000e70:	2017      	movs	r0, #23
 8000e72:	f003 f9ae 	bl	80041d2 <HAL_NVIC_EnableIRQ>

                break;
 8000e76:	e010      	b.n	8000e9a <task_button_press+0x23a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <task_button_press+0x258>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <task_button_press+0x258>)
 8000e80:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8000e82:	f000 f81b 	bl	8000ebc <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2118      	movs	r1, #24
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f003 f985 	bl	800419a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8000e90:	2006      	movs	r0, #6
 8000e92:	f003 f99e 	bl	80041d2 <HAL_NVIC_EnableIRQ>
                break;
 8000e96:	e000      	b.n	8000e9a <task_button_press+0x23a>
                default:
                break;
 8000e98:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000e9a:	e6ed      	b.n	8000c78 <task_button_press+0x18>
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	200003d8 	.word	0x200003d8
 8000ea4:	200003f8 	.word	0x200003f8
 8000ea8:	200003f9 	.word	0x200003f9
 8000eac:	20000400 	.word	0x20000400
 8000eb0:	20000404 	.word	0x20000404
 8000eb4:	20000408 	.word	0x20000408
 8000eb8:	2000040c 	.word	0x2000040c

08000ebc <task_led_ctrl_pause>:
    }
}


void task_led_ctrl_pause(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <task_led_ctrl_pause+0x34>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <task_led_ctrl_pause+0x14>
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <task_led_ctrl_pause+0x38>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <task_led_ctrl_pause+0x38>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <task_led_ctrl_pause+0x34>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	f083 0301 	eor.w	r3, r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <task_led_ctrl_pause+0x34>)
 8000ee2:	701a      	strb	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200003fa 	.word	0x200003fa

08000ef8 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <task_led_ctrl_color_state+0x14>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000412 	.word	0x20000412

08000f10 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <task_led_ctrl_color_state_demo+0x14>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000412 	.word	0x20000412

08000f28 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <task_led_ctrl_color_state_fixed+0x1c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <task_led_ctrl_color_state_fixed+0x20>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000412 	.word	0x20000412
 8000f48:	20000007 	.word	0x20000007

08000f4c <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
    bool return_val = false;
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <task_led_ctrl_color_adjust+0x38>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b14      	cmp	r3, #20
 8000f5c:	d105      	bne.n	8000f6a <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <task_led_ctrl_color_adjust+0x38>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8000f64:	2301      	movs	r3, #1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	e005      	b.n	8000f76 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <task_led_ctrl_color_adjust+0x38>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <task_led_ctrl_color_adjust+0x38>)
 8000f74:	701a      	strb	r2, [r3, #0]
    return return_val;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000007 	.word	0x20000007

08000f88 <task_led_ctrl_speed_adjust>:
    return speed_factor;
}


void task_led_ctrl_speed_adjust(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    if (LED_SPEED_LAST == g_led_speed) g_led_speed = LED_SPEED_FIRST;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <task_led_ctrl_speed_adjust+0x2c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d103      	bne.n	8000f9c <task_led_ctrl_speed_adjust+0x14>
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <task_led_ctrl_speed_adjust+0x2c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
}
 8000f9a:	e005      	b.n	8000fa8 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <task_led_ctrl_speed_adjust+0x2c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <task_led_ctrl_speed_adjust+0x2c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000006 	.word	0x20000006

08000fb8 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_0P5X;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <task_led_ctrl_speed_reset+0x14>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20000006 	.word	0x20000006

08000fd0 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <task_led_ctrl_animate_iteration_reset+0x14>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20000413 	.word	0x20000413

08000fe8 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
    bool return_val = false;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <task_led_ctrl_animate_adjust_state+0x38>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	d105      	bne.n	8001006 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <task_led_ctrl_animate_adjust_state+0x38>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001000:	2301      	movs	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	e005      	b.n	8001012 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <task_led_ctrl_animate_adjust_state+0x38>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <task_led_ctrl_animate_adjust_state+0x38>)
 8001010:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001012:	79fb      	ldrb	r3, [r7, #7]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000411 	.word	0x20000411

08001024 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <task_led_ctrl_animate_state_demo+0x1c>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <task_led_ctrl_animate_state_demo+0x20>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000410 	.word	0x20000410
 8001044:	20000413 	.word	0x20000413

08001048 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <task_led_ctrl_animate_state_fixed+0x20>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <task_led_ctrl_animate_state_fixed+0x24>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <task_led_ctrl_animate_state_fixed+0x28>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000410 	.word	0x20000410
 800106c:	20000411 	.word	0x20000411
 8001070:	20000413 	.word	0x20000413

08001074 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <task_led_ctrl_animate_state+0x14>)
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000410 	.word	0x20000410

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Handler+0x1c>)
 80010e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80010e8:	f001 fd10 	bl	8002b0c <xTaskGetSchedulerState>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d001      	beq.n	80010f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80010f2:	f002 fc31 	bl	8003958 <xPortSysTickHandler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001104:	2100      	movs	r1, #0
 8001106:	f06f 0004 	mvn.w	r0, #4
 800110a:	f7ff ffbf 	bl	800108c <__NVIC_SetPriority>
#endif
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800111a:	f3ef 8305 	mrs	r3, IPSR
 800111e:	603b      	str	r3, [r7, #0]
  return(result);
 8001120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001126:	f06f 0305 	mvn.w	r3, #5
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e00c      	b.n	8001148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <osKernelInitialize+0x44>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d105      	bne.n	8001142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <osKernelInitialize+0x44>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e002      	b.n	8001148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000414 	.word	0x20000414

0800115c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001162:	f3ef 8305 	mrs	r3, IPSR
 8001166:	603b      	str	r3, [r7, #0]
  return(result);
 8001168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <osKernelStart+0x1a>
    stat = osErrorISR;
 800116e:	f06f 0305 	mvn.w	r3, #5
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	e010      	b.n	8001198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <osKernelStart+0x48>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d109      	bne.n	8001192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800117e:	f7ff ffbf 	bl	8001100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <osKernelStart+0x48>)
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001188:	f001 f866 	bl	8002258 <vTaskStartScheduler>
      stat = osOK;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e002      	b.n	8001198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001198:	687b      	ldr	r3, [r7, #4]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000414 	.word	0x20000414

080011a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	; 0x38
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80011b8:	f3ef 8305 	mrs	r3, IPSR
 80011bc:	617b      	str	r3, [r7, #20]
  return(result);
 80011be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d17e      	bne.n	80012c2 <osThreadNew+0x11a>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d07b      	beq.n	80012c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80011ce:	2318      	movs	r3, #24
 80011d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d045      	beq.n	800126e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <osThreadNew+0x48>
        name = attr->name;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <osThreadNew+0x6e>
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b38      	cmp	r3, #56	; 0x38
 8001208:	d805      	bhi.n	8001216 <osThreadNew+0x6e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <osThreadNew+0x72>
        return (NULL);
 8001216:	2300      	movs	r3, #0
 8001218:	e054      	b.n	80012c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00e      	beq.n	8001250 <osThreadNew+0xa8>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b5b      	cmp	r3, #91	; 0x5b
 8001238:	d90a      	bls.n	8001250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <osThreadNew+0xa8>
        mem = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e010      	b.n	8001272 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <osThreadNew+0xca>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d108      	bne.n	8001272 <osThreadNew+0xca>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d104      	bne.n	8001272 <osThreadNew+0xca>
          mem = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e001      	b.n	8001272 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d110      	bne.n	800129a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001280:	9202      	str	r2, [sp, #8]
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	6a3a      	ldr	r2, [r7, #32]
 800128c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fe0c 	bl	8001eac <xTaskCreateStatic>
 8001294:	4603      	mov	r3, r0
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	e013      	b.n	80012c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d110      	bne.n	80012c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fe57 	bl	8001f66 <xTaskCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <osThreadNew+0x11a>
            hTask = NULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80012c2:	693b      	ldr	r3, [r7, #16]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012d4:	f3ef 8305 	mrs	r3, IPSR
 80012d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80012da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <osDelay+0x1c>
    stat = osErrorISR;
 80012e0:	f06f 0305 	mvn.w	r3, #5
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e007      	b.n	80012f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 ff7c 	bl	80021f0 <vTaskDelay>
    }
  }

  return (stat);
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <vApplicationGetIdleTaskMemory+0x2c>)
 8001314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <vApplicationGetIdleTaskMemory+0x30>)
 800131a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000418 	.word	0x20000418
 8001334:	20000474 	.word	0x20000474

08001338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <vApplicationGetTimerTaskMemory+0x2c>)
 8001348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <vApplicationGetTimerTaskMemory+0x30>)
 800134e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000674 	.word	0x20000674
 8001368:	200006d0 	.word	0x200006d0

0800136c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f103 0208 	add.w	r2, r3, #8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 0208 	add.w	r2, r3, #8
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f103 0208 	add.w	r2, r3, #8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001424:	d103      	bne.n	800142e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e00c      	b.n	8001448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3308      	adds	r3, #8
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e002      	b.n	800143c <vListInsert+0x2e>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	429a      	cmp	r2, r3
 8001446:	d2f6      	bcs.n	8001436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6892      	ldr	r2, [r2, #8]
 8001496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6852      	ldr	r2, [r2, #4]
 80014a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d103      	bne.n	80014b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10a      	bne.n	80014fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ec:	f383 8811 	msr	BASEPRI, r3
 80014f0:	f3bf 8f6f 	isb	sy
 80014f4:	f3bf 8f4f 	dsb	sy
 80014f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014fa:	bf00      	nop
 80014fc:	e7fe      	b.n	80014fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80014fe:	f002 f999 	bl	8003834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	441a      	add	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	3b01      	subs	r3, #1
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	441a      	add	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	22ff      	movs	r2, #255	; 0xff
 8001542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d114      	bne.n	800157e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01a      	beq.n	8001592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3310      	adds	r3, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f915 	bl	8002790 <xTaskRemoveFromEventList>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <xQueueGenericReset+0xcc>)
 800156e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f3bf 8f4f 	dsb	sy
 8001578:	f3bf 8f6f 	isb	sy
 800157c:	e009      	b.n	8001592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3310      	adds	r3, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fef2 	bl	800136c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3324      	adds	r3, #36	; 0x24
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff feed 	bl	800136c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001592:	f002 f97f 	bl	8003894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	e000ed04 	.word	0xe000ed04

080015a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	; 0x38
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10a      	bne.n	80015ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80015b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80015ca:	bf00      	nop
 80015cc:	e7fe      	b.n	80015cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80015d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d8:	f383 8811 	msr	BASEPRI, r3
 80015dc:	f3bf 8f6f 	isb	sy
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80015e6:	bf00      	nop
 80015e8:	e7fe      	b.n	80015e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <xQueueGenericCreateStatic+0x52>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <xQueueGenericCreateStatic+0x56>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <xQueueGenericCreateStatic+0x58>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10a      	bne.n	8001616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	f383 8811 	msr	BASEPRI, r3
 8001608:	f3bf 8f6f 	isb	sy
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	623b      	str	r3, [r7, #32]
}
 8001612:	bf00      	nop
 8001614:	e7fe      	b.n	8001614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <xQueueGenericCreateStatic+0x7e>
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <xQueueGenericCreateStatic+0x82>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <xQueueGenericCreateStatic+0x84>
 8001626:	2300      	movs	r3, #0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10a      	bne.n	8001642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	61fb      	str	r3, [r7, #28]
}
 800163e:	bf00      	nop
 8001640:	e7fe      	b.n	8001640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001642:	2350      	movs	r3, #80	; 0x50
 8001644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2b50      	cmp	r3, #80	; 0x50
 800164a:	d00a      	beq.n	8001662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001650:	f383 8811 	msr	BASEPRI, r3
 8001654:	f3bf 8f6f 	isb	sy
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	61bb      	str	r3, [r7, #24]
}
 800165e:	bf00      	nop
 8001660:	e7fe      	b.n	8001660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f805 	bl	8001694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800168c:	4618      	mov	r0, r3
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e002      	b.n	80016b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016c2:	2101      	movs	r1, #1
 80016c4:	69b8      	ldr	r0, [r7, #24]
 80016c6:	f7ff ff05 	bl	80014d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	; 0x38
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <xQueueGenericSend+0x32>
	__asm volatile
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800170a:	bf00      	nop
 800170c:	e7fe      	b.n	800170c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <xQueueGenericSend+0x40>
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <xQueueGenericSend+0x44>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <xQueueGenericSend+0x46>
 8001720:	2300      	movs	r3, #0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10a      	bne.n	800173c <xQueueGenericSend+0x60>
	__asm volatile
 8001726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001738:	bf00      	nop
 800173a:	e7fe      	b.n	800173a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d103      	bne.n	800174a <xQueueGenericSend+0x6e>
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <xQueueGenericSend+0x72>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <xQueueGenericSend+0x74>
 800174e:	2300      	movs	r3, #0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10a      	bne.n	800176a <xQueueGenericSend+0x8e>
	__asm volatile
 8001754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001758:	f383 8811 	msr	BASEPRI, r3
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	f3bf 8f4f 	dsb	sy
 8001764:	623b      	str	r3, [r7, #32]
}
 8001766:	bf00      	nop
 8001768:	e7fe      	b.n	8001768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800176a:	f001 f9cf 	bl	8002b0c <xTaskGetSchedulerState>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <xQueueGenericSend+0x9e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <xQueueGenericSend+0xa2>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <xQueueGenericSend+0xa4>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <xQueueGenericSend+0xbe>
	__asm volatile
 8001784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	61fb      	str	r3, [r7, #28]
}
 8001796:	bf00      	nop
 8001798:	e7fe      	b.n	8001798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800179a:	f002 f84b 	bl	8003834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <xQueueGenericSend+0xd4>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d129      	bne.n	8001804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017b6:	f000 fa0b 	bl	8001bd0 <prvCopyDataToQueue>
 80017ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c6:	3324      	adds	r3, #36	; 0x24
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 ffe1 	bl	8002790 <xTaskRemoveFromEventList>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <xQueueGenericSend+0x1f8>)
 80017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	e00a      	b.n	80017fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <xQueueGenericSend+0x1f8>)
 80017ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f3bf 8f4f 	dsb	sy
 80017f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80017fc:	f002 f84a 	bl	8003894 <vPortExitCritical>
				return pdPASS;
 8001800:	2301      	movs	r3, #1
 8001802:	e063      	b.n	80018cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d103      	bne.n	8001812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800180a:	f002 f843 	bl	8003894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800180e:	2300      	movs	r3, #0
 8001810:	e05c      	b.n	80018cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f81b 	bl	8002858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001822:	2301      	movs	r3, #1
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001826:	f002 f835 	bl	8003894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800182a:	f000 fd7b 	bl	8002324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800182e:	f002 f801 	bl	8003834 <vPortEnterCritical>
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001838:	b25b      	sxtb	r3, r3
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183e:	d103      	bne.n	8001848 <xQueueGenericSend+0x16c>
 8001840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184e:	b25b      	sxtb	r3, r3
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001854:	d103      	bne.n	800185e <xQueueGenericSend+0x182>
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800185e:	f002 f819 	bl	8003894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001862:	1d3a      	adds	r2, r7, #4
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f80a 	bl	8002884 <xTaskCheckForTimeOut>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d124      	bne.n	80018c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001878:	f000 faa2 	bl	8001dc0 <prvIsQueueFull>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d018      	beq.n	80018b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	3310      	adds	r3, #16
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 ff30 	bl	80026f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001892:	f000 fa2d 	bl	8001cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001896:	f000 fd53 	bl	8002340 <xTaskResumeAll>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f af7c 	bne.w	800179a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <xQueueGenericSend+0x1f8>)
 80018a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	e772      	b.n	800179a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80018b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018b6:	f000 fa1b 	bl	8001cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018ba:	f000 fd41 	bl	8002340 <xTaskResumeAll>
 80018be:	e76c      	b.n	800179a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80018c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018c2:	f000 fa15 	bl	8001cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018c6:	f000 fd3b 	bl	8002340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80018ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	e000ed04 	.word	0xe000ed04

080018d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b090      	sub	sp, #64	; 0x40
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80018ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80018f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f4:	f383 8811 	msr	BASEPRI, r3
 80018f8:	f3bf 8f6f 	isb	sy
 80018fc:	f3bf 8f4f 	dsb	sy
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001902:	bf00      	nop
 8001904:	e7fe      	b.n	8001904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <xQueueGenericSendFromISR+0x3c>
 800190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <xQueueGenericSendFromISR+0x40>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <xQueueGenericSendFromISR+0x42>
 8001918:	2300      	movs	r3, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001930:	bf00      	nop
 8001932:	e7fe      	b.n	8001932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d103      	bne.n	8001942 <xQueueGenericSendFromISR+0x6a>
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <xQueueGenericSendFromISR+0x6e>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <xQueueGenericSendFromISR+0x70>
 8001946:	2300      	movs	r3, #0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	623b      	str	r3, [r7, #32]
}
 800195e:	bf00      	nop
 8001960:	e7fe      	b.n	8001960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001962:	f002 f849 	bl	80039f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001966:	f3ef 8211 	mrs	r2, BASEPRI
 800196a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196e:	f383 8811 	msr	BASEPRI, r3
 8001972:	f3bf 8f6f 	isb	sy
 8001976:	f3bf 8f4f 	dsb	sy
 800197a:	61fa      	str	r2, [r7, #28]
 800197c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800197e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	429a      	cmp	r2, r3
 800198c:	d302      	bcc.n	8001994 <xQueueGenericSendFromISR+0xbc>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d12f      	bne.n	80019f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800199a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019aa:	f000 f911 	bl	8001bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80019ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b6:	d112      	bne.n	80019de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c2:	3324      	adds	r3, #36	; 0x24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fee3 	bl	8002790 <xTaskRemoveFromEventList>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e007      	b.n	80019ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80019de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	b25a      	sxtb	r2, r3
 80019e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80019ee:	2301      	movs	r3, #1
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80019f2:	e001      	b.n	80019f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3740      	adds	r7, #64	; 0x40
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <xQueueReceive+0x30>
	__asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	623b      	str	r3, [r7, #32]
}
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <xQueueReceive+0x3e>
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <xQueueReceive+0x42>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <xQueueReceive+0x44>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <xQueueReceive+0x5e>
	__asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	61fb      	str	r3, [r7, #28]
}
 8001a6a:	bf00      	nop
 8001a6c:	e7fe      	b.n	8001a6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a6e:	f001 f84d 	bl	8002b0c <xTaskGetSchedulerState>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <xQueueReceive+0x6e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <xQueueReceive+0x72>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <xQueueReceive+0x74>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <xQueueReceive+0x8e>
	__asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	61bb      	str	r3, [r7, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	e7fe      	b.n	8001a9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a9e:	f001 fec9 	bl	8003834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01f      	beq.n	8001aee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ab2:	f000 f8f7 	bl	8001ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00f      	beq.n	8001ae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	3310      	adds	r3, #16
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe60 	bl	8002790 <xTaskRemoveFromEventList>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <xQueueReceive+0x1bc>)
 8001ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ae6:	f001 fed5 	bl	8003894 <vPortExitCritical>
				return pdPASS;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e069      	b.n	8001bc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001af4:	f001 fece 	bl	8003894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e062      	b.n	8001bc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fea6 	bl	8002858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b10:	f001 fec0 	bl	8003894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b14:	f000 fc06 	bl	8002324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b18:	f001 fe8c 	bl	8003834 <vPortEnterCritical>
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b28:	d103      	bne.n	8001b32 <xQueueReceive+0x122>
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b3e:	d103      	bne.n	8001b48 <xQueueReceive+0x138>
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b48:	f001 fea4 	bl	8003894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b4c:	1d3a      	adds	r2, r7, #4
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fe95 	bl	8002884 <xTaskCheckForTimeOut>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d123      	bne.n	8001ba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b62:	f000 f917 	bl	8001d94 <prvIsQueueEmpty>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d017      	beq.n	8001b9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	3324      	adds	r3, #36	; 0x24
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fdbb 	bl	80026f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b7c:	f000 f8b8 	bl	8001cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b80:	f000 fbde 	bl	8002340 <xTaskResumeAll>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d189      	bne.n	8001a9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <xQueueReceive+0x1bc>)
 8001b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f3bf 8f4f 	dsb	sy
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	e780      	b.n	8001a9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b9e:	f000 f8a7 	bl	8001cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ba2:	f000 fbcd 	bl	8002340 <xTaskResumeAll>
 8001ba6:	e77a      	b.n	8001a9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001baa:	f000 f8a1 	bl	8001cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bae:	f000 fbc7 	bl	8002340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bb4:	f000 f8ee 	bl	8001d94 <prvIsQueueEmpty>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f43f af6f 	beq.w	8001a9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3730      	adds	r7, #48	; 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000ed04 	.word	0xe000ed04

08001bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d14d      	bne.n	8001c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 ffa4 	bl	8002b48 <xTaskPriorityDisinherit>
 8001c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	e043      	b.n	8001c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d119      	bne.n	8001c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6858      	ldr	r0, [r3, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	f007 fb88 	bl	8009330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	441a      	add	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d32b      	bcc.n	8001c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e026      	b.n	8001c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	68d8      	ldr	r0, [r3, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	f007 fb6e 	bl	8009330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	441a      	add	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	425b      	negs	r3, r3
 8001c7a:	441a      	add	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d105      	bne.n	8001c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001c9a:	697b      	ldr	r3, [r7, #20]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d018      	beq.n	8001ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	441a      	add	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d303      	bcc.n	8001cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f007 fb24 	bl	8009330 <memcpy>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001cf8:	f001 fd9c 	bl	8003834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d04:	e011      	b.n	8001d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d012      	beq.n	8001d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3324      	adds	r3, #36	; 0x24
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fd3c 	bl	8002790 <xTaskRemoveFromEventList>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001d1e:	f000 fe13 	bl	8002948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	dce9      	bgt.n	8001d06 <prvUnlockQueue+0x16>
 8001d32:	e000      	b.n	8001d36 <prvUnlockQueue+0x46>
					break;
 8001d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001d3e:	f001 fda9 	bl	8003894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001d42:	f001 fd77 	bl	8003834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d4e:	e011      	b.n	8001d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fd17 	bl	8002790 <xTaskRemoveFromEventList>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001d68:	f000 fdee 	bl	8002948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dce9      	bgt.n	8001d50 <prvUnlockQueue+0x60>
 8001d7c:	e000      	b.n	8001d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001d88:	f001 fd84 	bl	8003894 <vPortExitCritical>
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d9c:	f001 fd4a 	bl	8003834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e001      	b.n	8001db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001db2:	f001 fd6f 	bl	8003894 <vPortExitCritical>

	return xReturn;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001dc8:	f001 fd34 	bl	8003834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d102      	bne.n	8001dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e001      	b.n	8001de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001de2:	f001 fd57 	bl	8003894 <vPortExitCritical>

	return xReturn;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e014      	b.n	8001e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <vQueueAddToRegistry+0x50>)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10b      	bne.n	8001e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <vQueueAddToRegistry+0x50>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <vQueueAddToRegistry+0x50>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001e22:	e006      	b.n	8001e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d9e7      	bls.n	8001e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000ad0 	.word	0x20000ad0

08001e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001e54:	f001 fcee 	bl	8003834 <vPortEnterCritical>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e64:	d103      	bne.n	8001e6e <vQueueWaitForMessageRestricted+0x2a>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e7a:	d103      	bne.n	8001e84 <vQueueWaitForMessageRestricted+0x40>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e84:	f001 fd06 	bl	8003894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3324      	adds	r3, #36	; 0x24
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fc4d 	bl	8002738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff26 	bl	8001cf0 <prvUnlockQueue>
	}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	623b      	str	r3, [r7, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	e7fe      	b.n	8001ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <xTaskCreateStatic+0x46>
	__asm volatile
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	61fb      	str	r3, [r7, #28]
}
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ef2:	235c      	movs	r3, #92	; 0x5c
 8001ef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8001efa:	d00a      	beq.n	8001f12 <xTaskCreateStatic+0x66>
	__asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	61bb      	str	r3, [r7, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	e7fe      	b.n	8001f10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01e      	beq.n	8001f58 <xTaskCreateStatic+0xac>
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f32:	2300      	movs	r3, #0
 8001f34:	9303      	str	r3, [sp, #12]
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f850 	bl	8001ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f52:	f000 f8dd 	bl	8002110 <prvAddNewTaskToReadyList>
 8001f56:	e001      	b.n	8001f5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f5c:	697b      	ldr	r3, [r7, #20]
	}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b08c      	sub	sp, #48	; 0x30
 8001f6a:	af04      	add	r7, sp, #16
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f001 fd7c 	bl	8003a78 <pvPortMalloc>
 8001f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00e      	beq.n	8001fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f88:	205c      	movs	r0, #92	; 0x5c
 8001f8a:	f001 fd75 	bl	8003a78 <pvPortMalloc>
 8001f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f9c:	e005      	b.n	8001faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f001 fe36 	bl	8003c10 <vPortFree>
 8001fa4:	e001      	b.n	8001faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9303      	str	r3, [sp, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f80e 	bl	8001ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	f000 f89b 	bl	8002110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e002      	b.n	8001fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	461a      	mov	r2, r3
 8002008:	21a5      	movs	r1, #165	; 0xa5
 800200a:	f007 f99f 	bl	800934c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002018:	3b01      	subs	r3, #1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	617b      	str	r3, [r7, #20]
}
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01f      	beq.n	800208e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e012      	b.n	800207a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	7819      	ldrb	r1, [r3, #0]
 800205c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	3334      	adds	r3, #52	; 0x34
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3301      	adds	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d9e9      	bls.n	8002054 <prvInitialiseNewTask+0x64>
 8002080:	e000      	b.n	8002084 <prvInitialiseNewTask+0x94>
			{
				break;
 8002082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800208c:	e003      	b.n	8002096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	2b37      	cmp	r3, #55	; 0x37
 800209a:	d901      	bls.n	80020a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800209c:	2337      	movs	r3, #55	; 0x37
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	2200      	movs	r2, #0
 80020b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	3304      	adds	r3, #4
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f978 	bl	80013ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	3318      	adds	r3, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f973 	bl	80013ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	f001 fa70 	bl	80035d4 <pxPortInitialiseStack>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002118:	f001 fb8c 	bl	8003834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <prvAddNewTaskToReadyList+0xc4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <prvAddNewTaskToReadyList+0xc4>)
 8002124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <prvAddNewTaskToReadyList+0xc8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800212e:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <prvAddNewTaskToReadyList+0xc8>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <prvAddNewTaskToReadyList+0xc4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d110      	bne.n	800215e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800213c:	f000 fc28 	bl	8002990 <prvInitialiseTaskLists>
 8002140:	e00d      	b.n	800215e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <prvAddNewTaskToReadyList+0xcc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <prvAddNewTaskToReadyList+0xc8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	429a      	cmp	r2, r3
 8002156:	d802      	bhi.n	800215e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002158:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <prvAddNewTaskToReadyList+0xc8>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <prvAddNewTaskToReadyList+0xd0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <prvAddNewTaskToReadyList+0xd0>)
 8002166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <prvAddNewTaskToReadyList+0xd0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <prvAddNewTaskToReadyList+0xd4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d903      	bls.n	8002184 <prvAddNewTaskToReadyList+0x74>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <prvAddNewTaskToReadyList+0xd4>)
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <prvAddNewTaskToReadyList+0xd8>)
 8002192:	441a      	add	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7ff f913 	bl	80013c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80021a0:	f001 fb78 	bl	8003894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <prvAddNewTaskToReadyList+0xcc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <prvAddNewTaskToReadyList+0xc8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d207      	bcs.n	80021ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <prvAddNewTaskToReadyList+0xdc>)
 80021bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000fe4 	.word	0x20000fe4
 80021d8:	20000b10 	.word	0x20000b10
 80021dc:	20000ff0 	.word	0x20000ff0
 80021e0:	20001000 	.word	0x20001000
 80021e4:	20000fec 	.word	0x20000fec
 80021e8:	20000b14 	.word	0x20000b14
 80021ec:	e000ed04 	.word	0xe000ed04

080021f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d017      	beq.n	8002232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <vTaskDelay+0x60>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <vTaskDelay+0x30>
	__asm volatile
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	60bb      	str	r3, [r7, #8]
}
 800221c:	bf00      	nop
 800221e:	e7fe      	b.n	800221e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002220:	f000 f880 	bl	8002324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002224:	2100      	movs	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fe32 	bl	8002e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800222c:	f000 f888 	bl	8002340 <xTaskResumeAll>
 8002230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <vTaskDelay+0x64>)
 800223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000100c 	.word	0x2000100c
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002266:	463a      	mov	r2, r7
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f848 	bl	8001304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	9202      	str	r2, [sp, #8]
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	460a      	mov	r2, r1
 8002286:	4921      	ldr	r1, [pc, #132]	; (800230c <vTaskStartScheduler+0xb4>)
 8002288:	4821      	ldr	r0, [pc, #132]	; (8002310 <vTaskStartScheduler+0xb8>)
 800228a:	f7ff fe0f 	bl	8001eac <xTaskCreateStatic>
 800228e:	4603      	mov	r3, r0
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <vTaskStartScheduler+0xbc>)
 8002292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <vTaskStartScheduler+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e001      	b.n	80022a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d102      	bne.n	80022b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80022ac:	f000 fe44 	bl	8002f38 <xTimerCreateTimerTask>
 80022b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d116      	bne.n	80022e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	613b      	str	r3, [r7, #16]
}
 80022ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <vTaskStartScheduler+0xc0>)
 80022ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <vTaskStartScheduler+0xc4>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <vTaskStartScheduler+0xc8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022e0:	f001 fa06 	bl	80036f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022e4:	e00e      	b.n	8002304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ec:	d10a      	bne.n	8002304 <vTaskStartScheduler+0xac>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	60fb      	str	r3, [r7, #12]
}
 8002300:	bf00      	nop
 8002302:	e7fe      	b.n	8002302 <vTaskStartScheduler+0xaa>
}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	0800a420 	.word	0x0800a420
 8002310:	08002961 	.word	0x08002961
 8002314:	20001008 	.word	0x20001008
 8002318:	20001004 	.word	0x20001004
 800231c:	20000ff0 	.word	0x20000ff0
 8002320:	20000fe8 	.word	0x20000fe8

08002324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <vTaskSuspendAll+0x18>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a03      	ldr	r2, [pc, #12]	; (800233c <vTaskSuspendAll+0x18>)
 8002330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	2000100c 	.word	0x2000100c

08002340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800234e:	4b42      	ldr	r3, [pc, #264]	; (8002458 <xTaskResumeAll+0x118>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <xTaskResumeAll+0x2c>
	__asm volatile
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	603b      	str	r3, [r7, #0]
}
 8002368:	bf00      	nop
 800236a:	e7fe      	b.n	800236a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800236c:	f001 fa62 	bl	8003834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <xTaskResumeAll+0x118>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	4a38      	ldr	r2, [pc, #224]	; (8002458 <xTaskResumeAll+0x118>)
 8002378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <xTaskResumeAll+0x118>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d162      	bne.n	8002448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <xTaskResumeAll+0x11c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d05e      	beq.n	8002448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800238a:	e02f      	b.n	80023ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <xTaskResumeAll+0x120>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3318      	adds	r3, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f871 	bl	8001480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f86c 	bl	8001480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <xTaskResumeAll+0x124>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d903      	bls.n	80023bc <xTaskResumeAll+0x7c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <xTaskResumeAll+0x124>)
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <xTaskResumeAll+0x128>)
 80023ca:	441a      	add	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7fe fff7 	bl	80013c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <xTaskResumeAll+0x12c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <xTaskResumeAll+0x130>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023ec:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <xTaskResumeAll+0x120>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1cb      	bne.n	800238c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023fa:	f000 fb67 	bl	8002acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <xTaskResumeAll+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800240a:	f000 f859 	bl	80024c0 <xTaskIncrementTick>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <xTaskResumeAll+0x130>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3b01      	subs	r3, #1
 800241e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f1      	bne.n	800240a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <xTaskResumeAll+0x134>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <xTaskResumeAll+0x130>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002434:	2301      	movs	r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <xTaskResumeAll+0x138>)
 800243a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002448:	f001 fa24 	bl	8003894 <vPortExitCritical>

	return xAlreadyYielded;
 800244c:	68bb      	ldr	r3, [r7, #8]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000100c 	.word	0x2000100c
 800245c:	20000fe4 	.word	0x20000fe4
 8002460:	20000fa4 	.word	0x20000fa4
 8002464:	20000fec 	.word	0x20000fec
 8002468:	20000b14 	.word	0x20000b14
 800246c:	20000b10 	.word	0x20000b10
 8002470:	20000ff8 	.word	0x20000ff8
 8002474:	20000ff4 	.word	0x20000ff4
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <xTaskGetTickCount+0x1c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000fe8 	.word	0x20000fe8

0800249c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024a2:	f001 faa9 	bl	80039f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <xTaskGetTickCountFromISR+0x20>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024b0:	683b      	ldr	r3, [r7, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000fe8 	.word	0x20000fe8

080024c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ca:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <xTaskIncrementTick+0x148>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 808f 	bne.w	80025f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024d4:	4b4d      	ldr	r3, [pc, #308]	; (800260c <xTaskIncrementTick+0x14c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80024dc:	4a4b      	ldr	r2, [pc, #300]	; (800260c <xTaskIncrementTick+0x14c>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d120      	bne.n	800252a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80024e8:	4b49      	ldr	r3, [pc, #292]	; (8002610 <xTaskIncrementTick+0x150>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <xTaskIncrementTick+0x48>
	__asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	603b      	str	r3, [r7, #0]
}
 8002504:	bf00      	nop
 8002506:	e7fe      	b.n	8002506 <xTaskIncrementTick+0x46>
 8002508:	4b41      	ldr	r3, [pc, #260]	; (8002610 <xTaskIncrementTick+0x150>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <xTaskIncrementTick+0x154>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3f      	ldr	r2, [pc, #252]	; (8002610 <xTaskIncrementTick+0x150>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <xTaskIncrementTick+0x154>)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <xTaskIncrementTick+0x158>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <xTaskIncrementTick+0x158>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	f000 fad1 	bl	8002acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <xTaskIncrementTick+0x15c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d349      	bcc.n	80025c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <xTaskIncrementTick+0x150>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <xTaskIncrementTick+0x15c>)
 8002540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002544:	601a      	str	r2, [r3, #0]
					break;
 8002546:	e03f      	b.n	80025c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <xTaskIncrementTick+0x150>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	d203      	bcs.n	8002568 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002560:	4a2e      	ldr	r2, [pc, #184]	; (800261c <xTaskIncrementTick+0x15c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002566:	e02f      	b.n	80025c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3304      	adds	r3, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe ff87 	bl	8001480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3318      	adds	r3, #24
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ff7e 	bl	8001480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <xTaskIncrementTick+0x160>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d903      	bls.n	8002598 <xTaskIncrementTick+0xd8>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <xTaskIncrementTick+0x160>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <xTaskIncrementTick+0x164>)
 80025a6:	441a      	add	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe ff09 	bl	80013c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <xTaskIncrementTick+0x168>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3b8      	bcc.n	8002534 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025c6:	e7b5      	b.n	8002534 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <xTaskIncrementTick+0x168>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	4915      	ldr	r1, [pc, #84]	; (8002624 <xTaskIncrementTick+0x164>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d901      	bls.n	80025e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <xTaskIncrementTick+0x16c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e004      	b.n	80025fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <xTaskIncrementTick+0x170>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <xTaskIncrementTick+0x170>)
 80025fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80025fc:	697b      	ldr	r3, [r7, #20]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000100c 	.word	0x2000100c
 800260c:	20000fe8 	.word	0x20000fe8
 8002610:	20000f9c 	.word	0x20000f9c
 8002614:	20000fa0 	.word	0x20000fa0
 8002618:	20000ffc 	.word	0x20000ffc
 800261c:	20001004 	.word	0x20001004
 8002620:	20000fec 	.word	0x20000fec
 8002624:	20000b14 	.word	0x20000b14
 8002628:	20000b10 	.word	0x20000b10
 800262c:	20000ff8 	.word	0x20000ff8
 8002630:	20000ff4 	.word	0x20000ff4

08002634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <vTaskSwitchContext+0xa8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <vTaskSwitchContext+0xac>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002648:	e041      	b.n	80026ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <vTaskSwitchContext+0xac>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <vTaskSwitchContext+0xb0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e010      	b.n	800267a <vTaskSwitchContext+0x46>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <vTaskSwitchContext+0x40>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	607b      	str	r3, [r7, #4]
}
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <vTaskSwitchContext+0x3e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b01      	subs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <vTaskSwitchContext+0xb4>)
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0e4      	beq.n	8002658 <vTaskSwitchContext+0x24>
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <vTaskSwitchContext+0xb4>)
 800269a:	4413      	add	r3, r2
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3308      	adds	r3, #8
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d104      	bne.n	80026be <vTaskSwitchContext+0x8a>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a09      	ldr	r2, [pc, #36]	; (80026ec <vTaskSwitchContext+0xb8>)
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <vTaskSwitchContext+0xb0>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000100c 	.word	0x2000100c
 80026e0:	20000ff8 	.word	0x20000ff8
 80026e4:	20000fec 	.word	0x20000fec
 80026e8:	20000b14 	.word	0x20000b14
 80026ec:	20000b10 	.word	0x20000b10

080026f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	60fb      	str	r3, [r7, #12]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <vTaskPlaceOnEventList+0x44>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3318      	adds	r3, #24
 800271c:	4619      	mov	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fe75 	bl	800140e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002724:	2101      	movs	r1, #1
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f000 fbb2 	bl	8002e90 <prvAddCurrentTaskToDelayedList>
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000b10 	.word	0x20000b10

08002738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	617b      	str	r3, [r7, #20]
}
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <vTaskPlaceOnEventListRestricted+0x54>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3318      	adds	r3, #24
 8002766:	4619      	mov	r1, r3
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7fe fe2c 	bl	80013c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002778:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	68b8      	ldr	r0, [r7, #8]
 800277e:	f000 fb87 	bl	8002e90 <prvAddCurrentTaskToDelayedList>
	}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000b10 	.word	0x20000b10

08002790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	60fb      	str	r3, [r7, #12]
}
 80027b8:	bf00      	nop
 80027ba:	e7fe      	b.n	80027ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	3318      	adds	r3, #24
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fe5d 	bl	8001480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <xTaskRemoveFromEventList+0xb0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fe54 	bl	8001480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <xTaskRemoveFromEventList+0xb4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d903      	bls.n	80027ec <xTaskRemoveFromEventList+0x5c>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a16      	ldr	r2, [pc, #88]	; (8002844 <xTaskRemoveFromEventList+0xb4>)
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <xTaskRemoveFromEventList+0xb8>)
 80027fa:	441a      	add	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7fe fddf 	bl	80013c6 <vListInsertEnd>
 8002808:	e005      	b.n	8002816 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	3318      	adds	r3, #24
 800280e:	4619      	mov	r1, r3
 8002810:	480e      	ldr	r0, [pc, #56]	; (800284c <xTaskRemoveFromEventList+0xbc>)
 8002812:	f7fe fdd8 	bl	80013c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <xTaskRemoveFromEventList+0xc0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	429a      	cmp	r2, r3
 8002822:	d905      	bls.n	8002830 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <xTaskRemoveFromEventList+0xc4>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e001      	b.n	8002834 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002834:	697b      	ldr	r3, [r7, #20]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000100c 	.word	0x2000100c
 8002844:	20000fec 	.word	0x20000fec
 8002848:	20000b14 	.word	0x20000b14
 800284c:	20000fa4 	.word	0x20000fa4
 8002850:	20000b10 	.word	0x20000b10
 8002854:	20000ff8 	.word	0x20000ff8

08002858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <vTaskInternalSetTimeOutState+0x24>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <vTaskInternalSetTimeOutState+0x28>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	20000ffc 	.word	0x20000ffc
 8002880:	20000fe8 	.word	0x20000fe8

08002884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	613b      	str	r3, [r7, #16]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60fb      	str	r3, [r7, #12]
}
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80028c6:	f000 ffb5 	bl	8003834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <xTaskCheckForTimeOut+0xbc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e2:	d102      	bne.n	80028ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	e023      	b.n	8002932 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <xTaskCheckForTimeOut+0xc0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d007      	beq.n	8002906 <xTaskCheckForTimeOut+0x82>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	e015      	b.n	8002932 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	d20b      	bcs.n	8002928 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad2      	subs	r2, r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff9b 	bl	8002858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e004      	b.n	8002932 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800292e:	2301      	movs	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002932:	f000 ffaf 	bl	8003894 <vPortExitCritical>

	return xReturn;
 8002936:	69fb      	ldr	r3, [r7, #28]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000fe8 	.word	0x20000fe8
 8002944:	20000ffc 	.word	0x20000ffc

08002948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <vTaskMissedYield+0x14>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000ff8 	.word	0x20000ff8

08002960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002968:	f000 f852 	bl	8002a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <prvIdleTask+0x28>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d9f9      	bls.n	8002968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <prvIdleTask+0x2c>)
 8002976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002984:	e7f0      	b.n	8002968 <prvIdleTask+0x8>
 8002986:	bf00      	nop
 8002988:	20000b14 	.word	0x20000b14
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	e00c      	b.n	80029b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <prvInitialiseTaskLists+0x60>)
 80029a8:	4413      	add	r3, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fcde 	bl	800136c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b37      	cmp	r3, #55	; 0x37
 80029ba:	d9ef      	bls.n	800299c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <prvInitialiseTaskLists+0x64>)
 80029be:	f7fe fcd5 	bl	800136c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <prvInitialiseTaskLists+0x68>)
 80029c4:	f7fe fcd2 	bl	800136c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <prvInitialiseTaskLists+0x6c>)
 80029ca:	f7fe fccf 	bl	800136c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <prvInitialiseTaskLists+0x70>)
 80029d0:	f7fe fccc 	bl	800136c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <prvInitialiseTaskLists+0x74>)
 80029d6:	f7fe fcc9 	bl	800136c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <prvInitialiseTaskLists+0x78>)
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <prvInitialiseTaskLists+0x64>)
 80029de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <prvInitialiseTaskLists+0x7c>)
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <prvInitialiseTaskLists+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000b14 	.word	0x20000b14
 80029f4:	20000f74 	.word	0x20000f74
 80029f8:	20000f88 	.word	0x20000f88
 80029fc:	20000fa4 	.word	0x20000fa4
 8002a00:	20000fb8 	.word	0x20000fb8
 8002a04:	20000fd0 	.word	0x20000fd0
 8002a08:	20000f9c 	.word	0x20000f9c
 8002a0c:	20000fa0 	.word	0x20000fa0

08002a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a16:	e019      	b.n	8002a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a18:	f000 ff0c 	bl	8003834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <prvCheckTasksWaitingTermination+0x50>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fd29 	bl	8001480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <prvCheckTasksWaitingTermination+0x54>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <prvCheckTasksWaitingTermination+0x54>)
 8002a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <prvCheckTasksWaitingTermination+0x58>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <prvCheckTasksWaitingTermination+0x58>)
 8002a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a42:	f000 ff27 	bl	8003894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f810 	bl	8002a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <prvCheckTasksWaitingTermination+0x58>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e1      	bne.n	8002a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000fb8 	.word	0x20000fb8
 8002a64:	20000fe4 	.word	0x20000fe4
 8002a68:	20000fcc 	.word	0x20000fcc

08002a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 f8c4 	bl	8003c10 <vPortFree>
				vPortFree( pxTCB );
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f001 f8c1 	bl	8003c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a8e:	e018      	b.n	8002ac2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d103      	bne.n	8002aa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f001 f8b8 	bl	8003c10 <vPortFree>
	}
 8002aa0:	e00f      	b.n	8002ac2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d00a      	beq.n	8002ac2 <prvDeleteTCB+0x56>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	60fb      	str	r3, [r7, #12]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <prvDeleteTCB+0x54>
	}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <prvResetNextTaskUnblockTime+0x38>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <prvResetNextTaskUnblockTime+0x3c>)
 8002ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ae4:	e008      	b.n	8002af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <prvResetNextTaskUnblockTime+0x38>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <prvResetNextTaskUnblockTime+0x3c>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	20000f9c 	.word	0x20000f9c
 8002b08:	20001004 	.word	0x20001004

08002b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <xTaskGetSchedulerState+0x34>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e008      	b.n	8002b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <xTaskGetSchedulerState+0x38>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	e001      	b.n	8002b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002b32:	687b      	ldr	r3, [r7, #4]
	}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20000ff0 	.word	0x20000ff0
 8002b44:	2000100c 	.word	0x2000100c

08002b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d056      	beq.n	8002c0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <xTaskPriorityDisinherit+0xd0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d00a      	beq.n	8002b7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60fb      	str	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	60bb      	str	r3, [r7, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d02c      	beq.n	8002c0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d128      	bne.n	8002c0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fc5e 	bl	8001480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <xTaskPriorityDisinherit+0xd4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d903      	bls.n	8002bec <xTaskPriorityDisinherit+0xa4>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <xTaskPriorityDisinherit+0xd4>)
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <xTaskPriorityDisinherit+0xd8>)
 8002bfa:	441a      	add	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f7fe fbdf 	bl	80013c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002c0c:	697b      	ldr	r3, [r7, #20]
	}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000b10 	.word	0x20000b10
 8002c1c:	20000fec 	.word	0x20000fec
 8002c20:	20000b14 	.word	0x20000b14

08002c24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002c32:	f000 fdff 	bl	8003834 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d01a      	beq.n	8002c7a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002c44:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	43d2      	mvns	r2, r2
 8002c4e:	400a      	ands	r2, r1
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c62:	2101      	movs	r1, #1
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	f000 f913 	bl	8002e90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <xTaskNotifyWait+0xb0>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002c7a:	f000 fe0b 	bl	8003894 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002c7e:	f000 fdd9 	bl	8003834 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d002      	beq.n	8002ca6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e008      	b.n	8002cb8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	43d2      	mvns	r2, r2
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <xTaskNotifyWait+0xac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002cc2:	f000 fde7 	bl	8003894 <vPortExitCritical>

		return xReturn;
 8002cc6:	697b      	ldr	r3, [r7, #20]
	}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000b10 	.word	0x20000b10
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d08:	f000 fe76 	bl	80039f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002d10:	f3ef 8211 	mrs	r2, BASEPRI
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	623a      	str	r2, [r7, #32]
 8002d26:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002d28:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d828      	bhi.n	8002da4 <xTaskGenericNotifyFromISR+0xcc>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <xTaskGenericNotifyFromISR+0x80>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002dc5 	.word	0x08002dc5
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7b 	.word	0x08002d7b
 8002d64:	08002d87 	.word	0x08002d87
 8002d68:	08002d8f 	.word	0x08002d8f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002d78:	e027      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002d84:	e021      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002d8c:	e01d      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002d9c:	e015      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002da2:	e012      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dac:	d00c      	beq.n	8002dc8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	61bb      	str	r3, [r7, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002dc8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d146      	bne.n	8002e60 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	617b      	str	r3, [r7, #20]
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <xTaskGenericNotifyFromISR+0x1a0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11d      	bne.n	8002e34 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe fb3f 	bl	8001480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskGenericNotifyFromISR+0x1a4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d903      	bls.n	8002e16 <xTaskGenericNotifyFromISR+0x13e>
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <xTaskGenericNotifyFromISR+0x1a4>)
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <xTaskGenericNotifyFromISR+0x1a8>)
 8002e24:	441a      	add	r2, r3
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7fe faca 	bl	80013c6 <vListInsertEnd>
 8002e32:	e005      	b.n	8002e40 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3318      	adds	r3, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4812      	ldr	r0, [pc, #72]	; (8002e84 <xTaskGenericNotifyFromISR+0x1ac>)
 8002e3c:	f7fe fac3 	bl	80013c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <xTaskGenericNotifyFromISR+0x1b0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d908      	bls.n	8002e60 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <xTaskGenericNotifyFromISR+0x1b4>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f383 8811 	msr	BASEPRI, r3
}
 8002e6a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3738      	adds	r7, #56	; 0x38
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000100c 	.word	0x2000100c
 8002e7c:	20000fec 	.word	0x20000fec
 8002e80:	20000b14 	.word	0x20000b14
 8002e84:	20000fa4 	.word	0x20000fa4
 8002e88:	20000b10 	.word	0x20000b10
 8002e8c:	20000ff8 	.word	0x20000ff8

08002e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ea0:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe faea 	bl	8001480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb2:	d10a      	bne.n	8002eca <prvAddCurrentTaskToDelayedList+0x3a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4819      	ldr	r0, [pc, #100]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8002ec4:	f7fe fa7f 	bl	80013c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ec8:	e026      	b.n	8002f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d209      	bcs.n	8002ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f7fe fa8d 	bl	800140e <vListInsert>
}
 8002ef4:	e010      	b.n	8002f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fe fa83 	bl	800140e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d202      	bcs.n	8002f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000fe8 	.word	0x20000fe8
 8002f24:	20000b10 	.word	0x20000b10
 8002f28:	20000fd0 	.word	0x20000fd0
 8002f2c:	20000fa0 	.word	0x20000fa0
 8002f30:	20000f9c 	.word	0x20000f9c
 8002f34:	20001004 	.word	0x20001004

08002f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002f42:	f000 fb07 	bl	8003554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <xTimerCreateTimerTask+0x80>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d021      	beq.n	8002f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002f56:	1d3a      	adds	r2, r7, #4
 8002f58:	f107 0108 	add.w	r1, r7, #8
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe f9e9 	bl	8001338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	9202      	str	r2, [sp, #8]
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2302      	movs	r3, #2
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	460a      	mov	r2, r1
 8002f78:	4910      	ldr	r1, [pc, #64]	; (8002fbc <xTimerCreateTimerTask+0x84>)
 8002f7a:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <xTimerCreateTimerTask+0x88>)
 8002f7c:	f7fe ff96 	bl	8001eac <xTaskCreateStatic>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <xTimerCreateTimerTask+0x8c>)
 8002f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <xTimerCreateTimerTask+0x8c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	613b      	str	r3, [r7, #16]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002fae:	697b      	ldr	r3, [r7, #20]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20001040 	.word	0x20001040
 8002fbc:	0800a428 	.word	0x0800a428
 8002fc0:	080030fd 	.word	0x080030fd
 8002fc4:	20001044 	.word	0x20001044

08002fc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	623b      	str	r3, [r7, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <xTimerGenericCommand+0x98>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02a      	beq.n	8003054 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b05      	cmp	r3, #5
 800300e:	dc18      	bgt.n	8003042 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003010:	f7ff fd7c 	bl	8002b0c <xTaskGetSchedulerState>
 8003014:	4603      	mov	r3, r0
 8003016:	2b02      	cmp	r3, #2
 8003018:	d109      	bne.n	800302e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <xTimerGenericCommand+0x98>)
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	f107 0110 	add.w	r1, r7, #16
 8003022:	2300      	movs	r3, #0
 8003024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003026:	f7fe fb59 	bl	80016dc <xQueueGenericSend>
 800302a:	6278      	str	r0, [r7, #36]	; 0x24
 800302c:	e012      	b.n	8003054 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <xTimerGenericCommand+0x98>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f107 0110 	add.w	r1, r7, #16
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	f7fe fb4f 	bl	80016dc <xQueueGenericSend>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24
 8003040:	e008      	b.n	8003054 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <xTimerGenericCommand+0x98>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f107 0110 	add.w	r1, r7, #16
 800304a:	2300      	movs	r3, #0
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	f7fe fc43 	bl	80018d8 <xQueueGenericSendFromISR>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003056:	4618      	mov	r0, r3
 8003058:	3728      	adds	r7, #40	; 0x28
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20001040 	.word	0x20001040

08003064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <prvProcessExpiredTimer+0x94>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	3304      	adds	r3, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe f9ff 	bl	8001480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d022      	beq.n	80030d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	18d1      	adds	r1, r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f000 f8d1 	bl	8003244 <prvInsertTimerInActiveList>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01f      	beq.n	80030e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030a8:	2300      	movs	r3, #0
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2300      	movs	r3, #0
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	2100      	movs	r1, #0
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff88 	bl	8002fc8 <xTimerGenericCommand>
 80030b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	60fb      	str	r3, [r7, #12]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	4798      	blx	r3
}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20001038 	.word	0x20001038

080030fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f857 	bl	80031bc <prvGetNextExpireTime>
 800310e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4619      	mov	r1, r3
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f803 	bl	8003120 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800311a:	f000 f8d5 	bl	80032c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800311e:	e7f1      	b.n	8003104 <prvTimerTask+0x8>

08003120 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800312a:	f7ff f8fb 	bl	8002324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f866 	bl	8003204 <prvSampleTimeNow>
 8003138:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d130      	bne.n	80031a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <prvProcessTimerOrBlockTask+0x3c>
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d806      	bhi.n	800315c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800314e:	f7ff f8f7 	bl	8002340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff85 	bl	8003064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800315a:	e024      	b.n	80031a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <prvProcessTimerOrBlockTask+0x90>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <prvProcessTimerOrBlockTask+0x50>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <prvProcessTimerOrBlockTask+0x52>
 8003170:	2300      	movs	r3, #0
 8003172:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <prvProcessTimerOrBlockTask+0x94>)
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f7fe fe5f 	bl	8001e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003186:	f7ff f8db 	bl	8002340 <xTaskResumeAll>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <prvProcessTimerOrBlockTask+0x98>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
}
 80031a0:	e001      	b.n	80031a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80031a2:	f7ff f8cd 	bl	8002340 <xTaskResumeAll>
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000103c 	.word	0x2000103c
 80031b4:	20001040 	.word	0x20001040
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <prvGetNextExpireTime+0x44>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <prvGetNextExpireTime+0x16>
 80031ce:	2201      	movs	r2, #1
 80031d0:	e000      	b.n	80031d4 <prvGetNextExpireTime+0x18>
 80031d2:	2200      	movs	r2, #0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <prvGetNextExpireTime+0x44>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e001      	b.n	80031f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20001038 	.word	0x20001038

08003204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800320c:	f7ff f936 	bl	800247c <xTaskGetTickCount>
 8003210:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <prvSampleTimeNow+0x3c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d205      	bcs.n	8003228 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800321c:	f000 f936 	bl	800348c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e002      	b.n	800322e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <prvSampleTimeNow+0x3c>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003234:	68fb      	ldr	r3, [r7, #12]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20001048 	.word	0x20001048

08003244 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d812      	bhi.n	8003290 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003278:	2301      	movs	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e01b      	b.n	80032b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <prvInsertTimerInActiveList+0x7c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f7fe f8c0 	bl	800140e <vListInsert>
 800328e:	e012      	b.n	80032b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d206      	bcs.n	80032a6 <prvInsertTimerInActiveList+0x62>
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e007      	b.n	80032b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <prvInsertTimerInActiveList+0x80>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f7fe f8ac 	bl	800140e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80032b6:	697b      	ldr	r3, [r7, #20]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	2000103c 	.word	0x2000103c
 80032c4:	20001038 	.word	0x20001038

080032c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032ce:	e0ca      	b.n	8003466 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da18      	bge.n	8003308 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	3304      	adds	r3, #4
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	61fb      	str	r3, [r7, #28]
}
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	6850      	ldr	r0, [r2, #4]
 8003300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003302:	6892      	ldr	r2, [r2, #8]
 8003304:	4611      	mov	r1, r2
 8003306:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f2c0 80aa 	blt.w	8003464 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	3304      	adds	r3, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe f8ad 	bl	8001480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003326:	463b      	mov	r3, r7
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff6b 	bl	8003204 <prvSampleTimeNow>
 800332e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b09      	cmp	r3, #9
 8003334:	f200 8097 	bhi.w	8003466 <prvProcessReceivedCommands+0x19e>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <prvProcessReceivedCommands+0x78>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003369 	.word	0x08003369
 8003344:	08003369 	.word	0x08003369
 8003348:	08003369 	.word	0x08003369
 800334c:	080033dd 	.word	0x080033dd
 8003350:	080033f1 	.word	0x080033f1
 8003354:	0800343b 	.word	0x0800343b
 8003358:	08003369 	.word	0x08003369
 800335c:	08003369 	.word	0x08003369
 8003360:	080033dd 	.word	0x080033dd
 8003364:	080033f1 	.word	0x080033f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	b2da      	uxtb	r2, r3
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	18d1      	adds	r1, r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003388:	f7ff ff5c 	bl	8003244 <prvInsertTimerInActiveList>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d069      	beq.n	8003466 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003398:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05e      	beq.n	8003466 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	441a      	add	r2, r3
 80033b0:	2300      	movs	r3, #0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ba:	f7ff fe05 	bl	8002fc8 <xTimerGenericCommand>
 80033be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d14f      	bne.n	8003466 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	61bb      	str	r3, [r7, #24]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80033ee:	e03a      	b.n	8003466 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	617b      	str	r3, [r7, #20]
}
 8003422:	bf00      	nop
 8003424:	e7fe      	b.n	8003424 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	18d1      	adds	r1, r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003434:	f7ff ff06 	bl	8003244 <prvInsertTimerInActiveList>
					break;
 8003438:	e015      	b.n	8003466 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344a:	f000 fbe1 	bl	8003c10 <vPortFree>
 800344e:	e00a      	b.n	8003466 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003462:	e000      	b.n	8003466 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <prvProcessReceivedCommands+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1d39      	adds	r1, r7, #4
 800346c:	2200      	movs	r2, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe face 	bl	8001a10 <xQueueReceive>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f47f af2a 	bne.w	80032d0 <prvProcessReceivedCommands+0x8>
	}
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3730      	adds	r7, #48	; 0x30
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20001040 	.word	0x20001040

0800348c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003492:	e048      	b.n	8003526 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <prvSwitchTimerLists+0xc0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <prvSwitchTimerLists+0xc0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd ffe7 	bl	8001480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02e      	beq.n	8003526 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90e      	bls.n	80034f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <prvSwitchTimerLists+0xc0>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fd ff8c 	bl	800140e <vListInsert>
 80034f6:	e016      	b.n	8003526 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	2100      	movs	r1, #0
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff fd60 	bl	8002fc8 <xTimerGenericCommand>
 8003508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	603b      	str	r3, [r7, #0]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <prvSwitchTimerLists+0xc0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1b1      	bne.n	8003494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <prvSwitchTimerLists+0xc0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <prvSwitchTimerLists+0xc4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <prvSwitchTimerLists+0xc0>)
 800353c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <prvSwitchTimerLists+0xc4>)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20001038 	.word	0x20001038
 8003550:	2000103c 	.word	0x2000103c

08003554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800355a:	f000 f96b 	bl	8003834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <prvCheckForValidListAndQueue+0x60>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d120      	bne.n	80035a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003566:	4814      	ldr	r0, [pc, #80]	; (80035b8 <prvCheckForValidListAndQueue+0x64>)
 8003568:	f7fd ff00 	bl	800136c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800356c:	4813      	ldr	r0, [pc, #76]	; (80035bc <prvCheckForValidListAndQueue+0x68>)
 800356e:	f7fd fefd 	bl	800136c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <prvCheckForValidListAndQueue+0x6c>)
 8003574:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <prvCheckForValidListAndQueue+0x64>)
 8003576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <prvCheckForValidListAndQueue+0x70>)
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <prvCheckForValidListAndQueue+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <prvCheckForValidListAndQueue+0x74>)
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <prvCheckForValidListAndQueue+0x78>)
 8003586:	2110      	movs	r1, #16
 8003588:	200a      	movs	r0, #10
 800358a:	f7fe f80b 	bl	80015a4 <xQueueGenericCreateStatic>
 800358e:	4603      	mov	r3, r0
 8003590:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <prvCheckForValidListAndQueue+0x60>)
 8003592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <prvCheckForValidListAndQueue+0x60>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <prvCheckForValidListAndQueue+0x60>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	490b      	ldr	r1, [pc, #44]	; (80035d0 <prvCheckForValidListAndQueue+0x7c>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fc24 	bl	8001df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035a8:	f000 f974 	bl	8003894 <vPortExitCritical>
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20001040 	.word	0x20001040
 80035b8:	20001010 	.word	0x20001010
 80035bc:	20001024 	.word	0x20001024
 80035c0:	20001038 	.word	0x20001038
 80035c4:	2000103c 	.word	0x2000103c
 80035c8:	200010ec 	.word	0x200010ec
 80035cc:	2000104c 	.word	0x2000104c
 80035d0:	0800a430 	.word	0x0800a430

080035d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3b04      	subs	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3b04      	subs	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b04      	subs	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003604:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <pxPortInitialiseStack+0x64>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3b14      	subs	r3, #20
 800360e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b04      	subs	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f06f 0202 	mvn.w	r2, #2
 8003622:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b20      	subs	r3, #32
 8003628:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	0800363d 	.word	0x0800363d

0800363c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <prvTaskExitError+0x54>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364e:	d00a      	beq.n	8003666 <prvTaskExitError+0x2a>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <prvTaskExitError+0x28>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	60bb      	str	r3, [r7, #8]
}
 8003678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800367a:	bf00      	nop
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0fc      	beq.n	800367c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	2000000c 	.word	0x2000000c
	...

080036a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <pxCurrentTCBConst2>)
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	6808      	ldr	r0, [r1, #0]
 80036a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036aa:	f380 8809 	msr	PSP, r0
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f380 8811 	msr	BASEPRI, r0
 80036ba:	4770      	bx	lr
 80036bc:	f3af 8000 	nop.w

080036c0 <pxCurrentTCBConst2>:
 80036c0:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80036c8:	4808      	ldr	r0, [pc, #32]	; (80036ec <prvPortStartFirstTask+0x24>)
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	6800      	ldr	r0, [r0, #0]
 80036ce:	f380 8808 	msr	MSP, r0
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8814 	msr	CONTROL, r0
 80036da:	b662      	cpsie	i
 80036dc:	b661      	cpsie	f
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	df00      	svc	0
 80036e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036ea:	bf00      	nop
 80036ec:	e000ed08 	.word	0xe000ed08

080036f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036f6:	4b46      	ldr	r3, [pc, #280]	; (8003810 <xPortStartScheduler+0x120>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a46      	ldr	r2, [pc, #280]	; (8003814 <xPortStartScheduler+0x124>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10a      	bne.n	8003716 <xPortStartScheduler+0x26>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	613b      	str	r3, [r7, #16]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003716:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <xPortStartScheduler+0x120>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <xPortStartScheduler+0x128>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10a      	bne.n	8003736 <xPortStartScheduler+0x46>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	60fb      	str	r3, [r7, #12]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <xPortStartScheduler+0x12c>)
 8003738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <xPortStartScheduler+0x130>)
 800375c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <xPortStartScheduler+0x134>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003764:	e009      	b.n	800377a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <xPortStartScheduler+0x134>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	4a2d      	ldr	r2, [pc, #180]	; (8003824 <xPortStartScheduler+0x134>)
 800376e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d0ef      	beq.n	8003766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <xPortStartScheduler+0x134>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1c3 0307 	rsb	r3, r3, #7
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00a      	beq.n	80037a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037a8:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <xPortStartScheduler+0x134>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <xPortStartScheduler+0x134>)
 80037b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <xPortStartScheduler+0x134>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <xPortStartScheduler+0x134>)
 80037bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <xPortStartScheduler+0x138>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <xPortStartScheduler+0x138>)
 80037cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <xPortStartScheduler+0x138>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <xPortStartScheduler+0x138>)
 80037d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037de:	f000 f8dd 	bl	800399c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <xPortStartScheduler+0x13c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80037e8:	f000 f8fc 	bl	80039e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xPortStartScheduler+0x140>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <xPortStartScheduler+0x140>)
 80037f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037f8:	f7ff ff66 	bl	80036c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037fc:	f7fe ff1a 	bl	8002634 <vTaskSwitchContext>
	prvTaskExitError();
 8003800:	f7ff ff1c 	bl	800363c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00
 8003814:	410fc271 	.word	0x410fc271
 8003818:	410fc270 	.word	0x410fc270
 800381c:	e000e400 	.word	0xe000e400
 8003820:	2000113c 	.word	0x2000113c
 8003824:	20001140 	.word	0x20001140
 8003828:	e000ed20 	.word	0xe000ed20
 800382c:	2000000c 	.word	0x2000000c
 8003830:	e000ef34 	.word	0xe000ef34

08003834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
}
 800384c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <vPortEnterCritical+0x58>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <vPortEnterCritical+0x58>)
 8003856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <vPortEnterCritical+0x58>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10f      	bne.n	8003880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <vPortEnterCritical+0x5c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <vPortEnterCritical+0x4c>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	603b      	str	r3, [r7, #0]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vPortEnterCritical+0x4a>
	}
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	2000000c 	.word	0x2000000c
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <vPortExitCritical+0x50>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <vPortExitCritical+0x24>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	607b      	str	r3, [r7, #4]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <vPortExitCritical+0x50>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <vPortExitCritical+0x50>)
 80038c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <vPortExitCritical+0x50>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <vPortExitCritical+0x42>
 80038ca:	2300      	movs	r3, #0
 80038cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f383 8811 	msr	BASEPRI, r3
}
 80038d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c
	...

080038f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038f0:	f3ef 8009 	mrs	r0, PSP
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <pxCurrentTCBConst>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f01e 0f10 	tst.w	lr, #16
 8003900:	bf08      	it	eq
 8003902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390a:	6010      	str	r0, [r2, #0]
 800390c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003914:	f380 8811 	msr	BASEPRI, r0
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f7fe fe88 	bl	8002634 <vTaskSwitchContext>
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f380 8811 	msr	BASEPRI, r0
 800392c:	bc09      	pop	{r0, r3}
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6808      	ldr	r0, [r1, #0]
 8003932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003936:	f01e 0f10 	tst.w	lr, #16
 800393a:	bf08      	it	eq
 800393c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003940:	f380 8809 	msr	PSP, r0
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	f3af 8000 	nop.w

08003950 <pxCurrentTCBConst>:
 8003950:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop

08003958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003972:	f7fe fda5 	bl	80024c0 <xTaskIncrementTick>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <xPortSysTickHandler+0x40>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f383 8811 	msr	BASEPRI, r3
}
 800398e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <vPortSetupTimerInterrupt+0x34>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <vPortSetupTimerInterrupt+0x38>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <vPortSetupTimerInterrupt+0x3c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <vPortSetupTimerInterrupt+0x40>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <vPortSetupTimerInterrupt+0x44>)
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <vPortSetupTimerInterrupt+0x34>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010
 80039d4:	e000e018 	.word	0xe000e018
 80039d8:	20000104 	.word	0x20000104
 80039dc:	10624dd3 	.word	0x10624dd3
 80039e0:	e000e014 	.word	0xe000e014

080039e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80039e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039f4 <vPortEnableVFP+0x10>
 80039e8:	6801      	ldr	r1, [r0, #0]
 80039ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039ee:	6001      	str	r1, [r0, #0]
 80039f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80039f2:	bf00      	nop
 80039f4:	e000ed88 	.word	0xe000ed88

080039f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80039fe:	f3ef 8305 	mrs	r3, IPSR
 8003a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	d914      	bls.n	8003a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <vPortValidateInterruptPriority+0x70>)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <vPortValidateInterruptPriority+0x74>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	7afa      	ldrb	r2, [r7, #11]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20a      	bcs.n	8003a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <vPortValidateInterruptPriority+0x78>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <vPortValidateInterruptPriority+0x7c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d90a      	bls.n	8003a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	603b      	str	r3, [r7, #0]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <vPortValidateInterruptPriority+0x60>
	}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e3f0 	.word	0xe000e3f0
 8003a6c:	2000113c 	.word	0x2000113c
 8003a70:	e000ed0c 	.word	0xe000ed0c
 8003a74:	20001140 	.word	0x20001140

08003a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a84:	f7fe fc4e 	bl	8002324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a88:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <pvPortMalloc+0x180>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a90:	f000 f920 	bl	8003cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <pvPortMalloc+0x184>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 8093 	bne.w	8003bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01d      	beq.n	8003ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	617b      	str	r3, [r7, #20]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d06e      	beq.n	8003bc8 <pvPortMalloc+0x150>
 8003aea:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <pvPortMalloc+0x188>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d869      	bhi.n	8003bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <pvPortMalloc+0x18c>)
 8003af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <pvPortMalloc+0x18c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afe:	e004      	b.n	8003b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d903      	bls.n	8003b1c <pvPortMalloc+0xa4>
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f1      	bne.n	8003b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <pvPortMalloc+0x180>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d050      	beq.n	8003bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	2308      	movs	r3, #8
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d91f      	bls.n	8003b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <pvPortMalloc+0xf8>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	613b      	str	r3, [r7, #16]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f000 f908 	bl	8003d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <pvPortMalloc+0x188>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <pvPortMalloc+0x188>)
 8003b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <pvPortMalloc+0x188>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <pvPortMalloc+0x190>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d203      	bcs.n	8003baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <pvPortMalloc+0x188>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <pvPortMalloc+0x190>)
 8003ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <pvPortMalloc+0x184>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <pvPortMalloc+0x194>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <pvPortMalloc+0x194>)
 8003bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bc8:	f7fe fbba 	bl	8002340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <pvPortMalloc+0x174>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	60fb      	str	r3, [r7, #12]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <pvPortMalloc+0x172>
	return pvReturn;
 8003bec:	69fb      	ldr	r3, [r7, #28]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20001d04 	.word	0x20001d04
 8003bfc:	20001d18 	.word	0x20001d18
 8003c00:	20001d08 	.word	0x20001d08
 8003c04:	20001cfc 	.word	0x20001cfc
 8003c08:	20001d0c 	.word	0x20001d0c
 8003c0c:	20001d10 	.word	0x20001d10

08003c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04d      	beq.n	8003cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c22:	2308      	movs	r3, #8
 8003c24:	425b      	negs	r3, r3
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <vPortFree+0xb8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <vPortFree+0x44>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	60fb      	str	r3, [r7, #12]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <vPortFree+0x62>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60bb      	str	r3, [r7, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <vPortFree+0xb8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01e      	beq.n	8003cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11a      	bne.n	8003cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <vPortFree+0xb8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	401a      	ands	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c98:	f7fe fb44 	bl	8002324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <vPortFree+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <vPortFree+0xbc>)
 8003ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003caa:	6938      	ldr	r0, [r7, #16]
 8003cac:	f000 f874 	bl	8003d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <vPortFree+0xc0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <vPortFree+0xc0>)
 8003cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003cba:	f7fe fb41 	bl	8002340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001d18 	.word	0x20001d18
 8003ccc:	20001d08 	.word	0x20001d08
 8003cd0:	20001d14 	.word	0x20001d14

08003cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <prvHeapInit+0xac>)
 8003ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3307      	adds	r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <prvHeapInit+0xac>)
 8003d04:	4413      	add	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <prvHeapInit+0xb0>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <prvHeapInit+0xb0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d20:	2208      	movs	r2, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0307 	bic.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <prvHeapInit+0xb4>)
 8003d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <prvHeapInit+0xb4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <prvHeapInit+0xb4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <prvHeapInit+0xb4>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <prvHeapInit+0xb8>)
 8003d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <prvHeapInit+0xbc>)
 8003d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <prvHeapInit+0xc0>)
 8003d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20001144 	.word	0x20001144
 8003d84:	20001cfc 	.word	0x20001cfc
 8003d88:	20001d04 	.word	0x20001d04
 8003d8c:	20001d0c 	.word	0x20001d0c
 8003d90:	20001d08 	.word	0x20001d08
 8003d94:	20001d18 	.word	0x20001d18

08003d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003da0:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <prvInsertBlockIntoFreeList+0xac>)
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	e002      	b.n	8003dac <prvInsertBlockIntoFreeList+0x14>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d8f7      	bhi.n	8003da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d108      	bne.n	8003dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d118      	bne.n	8003e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <prvInsertBlockIntoFreeList+0xb0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d00d      	beq.n	8003e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e008      	b.n	8003e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <prvInsertBlockIntoFreeList+0xb0>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e003      	b.n	8003e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d002      	beq.n	8003e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20001cfc 	.word	0x20001cfc
 8003e48:	20001d04 	.word	0x20001d04

08003e4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e56:	2003      	movs	r0, #3
 8003e58:	f000 f994 	bl	8004184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f000 f80d 	bl	8003e7c <HAL_InitTick>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	71fb      	strb	r3, [r7, #7]
 8003e6c:	e001      	b.n	8003e72 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e6e:	f004 fd19 	bl	80088a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e72:	79fb      	ldrb	r3, [r7, #7]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <HAL_InitTick+0x6c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d023      	beq.n	8003ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_InitTick+0x70>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_InitTick+0x6c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f9af 	bl	800420a <HAL_SYSTICK_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b0f      	cmp	r3, #15
 8003eb6:	d809      	bhi.n	8003ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec0:	f000 f96b 	bl	800419a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_InitTick+0x74>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e007      	b.n	8003edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e004      	b.n	8003edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e001      	b.n	8003edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000014 	.word	0x20000014
 8003eec:	20000104 	.word	0x20000104
 8003ef0:	20000010 	.word	0x20000010

08003ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_GetTick+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20001d1c 	.word	0x20001d1c

08003f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f14:	f7ff ffee 	bl	8003ef4 <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f24:	d005      	beq.n	8003f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_Delay+0x44>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f32:	bf00      	nop
 8003f34:	f7ff ffde 	bl	8003ef4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d8f7      	bhi.n	8003f34 <HAL_Delay+0x28>
  {
  }
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000014 	.word	0x20000014

08003f54 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_GetUIDw0+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	1fff7590 	.word	0x1fff7590

08003f6c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <HAL_GetUIDw1+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	1fff7594 	.word	0x1fff7594

08003f84 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_GetUIDw2+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	1fff7598 	.word	0x1fff7598

08003f9c <__NVIC_SetPriorityGrouping>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	60d3      	str	r3, [r2, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <__NVIC_GetPriorityGrouping>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <__NVIC_GetPriorityGrouping+0x18>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0307 	and.w	r3, r3, #7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_EnableIRQ>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db0b      	blt.n	800402a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4907      	ldr	r1, [pc, #28]	; (8004038 <__NVIC_EnableIRQ+0x38>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2001      	movs	r0, #1
 8004022:	fa00 f202 	lsl.w	r2, r0, r2
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_DisableIRQ>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	db12      	blt.n	8004074 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	490a      	ldr	r1, [pc, #40]	; (8004080 <__NVIC_DisableIRQ+0x44>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2001      	movs	r0, #1
 800405e:	fa00 f202 	lsl.w	r2, r0, r2
 8004062:	3320      	adds	r3, #32
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004068:	f3bf 8f4f 	dsb	sy
}
 800406c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800406e:	f3bf 8f6f 	isb	sy
}
 8004072:	bf00      	nop
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000e100 	.word	0xe000e100

08004084 <__NVIC_SetPriority>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db0a      	blt.n	80040ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	490c      	ldr	r1, [pc, #48]	; (80040d0 <__NVIC_SetPriority+0x4c>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040ac:	e00a      	b.n	80040c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <__NVIC_SetPriority+0x50>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3b04      	subs	r3, #4
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	761a      	strb	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000e100 	.word	0xe000e100
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f1c3 0307 	rsb	r3, r3, #7
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf28      	it	cs
 80040f6:	2304      	movcs	r3, #4
 80040f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d902      	bls.n	8004108 <NVIC_EncodePriority+0x30>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3b03      	subs	r3, #3
 8004106:	e000      	b.n	800410a <NVIC_EncodePriority+0x32>
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	43d9      	mvns	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	4313      	orrs	r3, r2
         );
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004150:	d301      	bcc.n	8004156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004152:	2301      	movs	r3, #1
 8004154:	e00f      	b.n	8004176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <SysTick_Config+0x40>)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800415e:	210f      	movs	r1, #15
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004164:	f7ff ff8e 	bl	8004084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <SysTick_Config+0x40>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <SysTick_Config+0x40>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	e000e010 	.word	0xe000e010

08004184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff05 	bl	8003f9c <__NVIC_SetPriorityGrouping>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ac:	f7ff ff1a 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 80041b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff ff8e 	bl	80040d8 <NVIC_EncodePriority>
 80041bc:	4602      	mov	r2, r0
 80041be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff5d 	bl	8004084 <__NVIC_SetPriority>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff0d 	bl	8004000 <__NVIC_EnableIRQ>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff1d 	bl	800403c <__NVIC_DisableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ff94 	bl	8004140 <SysTick_Config>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e098      	b.n	8004368 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <HAL_DMA_Init+0x150>)
 800423e:	429a      	cmp	r2, r3
 8004240:	d80f      	bhi.n	8004262 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_DMA_Init+0x154>)
 800424a:	4413      	add	r3, r2
 800424c:	4a4b      	ldr	r2, [pc, #300]	; (800437c <HAL_DMA_Init+0x158>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a48      	ldr	r2, [pc, #288]	; (8004380 <HAL_DMA_Init+0x15c>)
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
 8004260:	e00e      	b.n	8004280 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_DMA_Init+0x160>)
 800426a:	4413      	add	r3, r2
 800426c:	4a43      	ldr	r2, [pc, #268]	; (800437c <HAL_DMA_Init+0x158>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	009a      	lsls	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_DMA_Init+0x164>)
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042da:	d039      	beq.n	8004350 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_DMA_Init+0x15c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11a      	bne.n	800431c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_DMA_Init+0x168>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f003 031c 	and.w	r3, r3, #28
 80042f2:	210f      	movs	r1, #15
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4924      	ldr	r1, [pc, #144]	; (800438c <HAL_DMA_Init+0x168>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_DMA_Init+0x168>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f003 031c 	and.w	r3, r3, #28
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	491d      	ldr	r1, [pc, #116]	; (800438c <HAL_DMA_Init+0x168>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
 800431a:	e019      	b.n	8004350 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <HAL_DMA_Init+0x16c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004324:	f003 031c 	and.w	r3, r3, #28
 8004328:	210f      	movs	r1, #15
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	4917      	ldr	r1, [pc, #92]	; (8004390 <HAL_DMA_Init+0x16c>)
 8004332:	4013      	ands	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_DMA_Init+0x16c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f003 031c 	and.w	r3, r3, #28
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	4911      	ldr	r1, [pc, #68]	; (8004390 <HAL_DMA_Init+0x16c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40020407 	.word	0x40020407
 8004378:	bffdfff8 	.word	0xbffdfff8
 800437c:	cccccccd 	.word	0xcccccccd
 8004380:	40020000 	.word	0x40020000
 8004384:	bffdfbf8 	.word	0xbffdfbf8
 8004388:	40020400 	.word	0x40020400
 800438c:	400200a8 	.word	0x400200a8
 8004390:	400204a8 	.word	0x400204a8

08004394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_DMA_Start_IT+0x20>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e04b      	b.n	800444c <HAL_DMA_Start_IT+0xb8>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d13a      	bne.n	800443e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f969 	bl	80046c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 020e 	orr.w	r2, r2, #14
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e00f      	b.n	800442c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 020a 	orr.w	r2, r2, #10
 800442a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e005      	b.n	800444a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004446:	2302      	movs	r3, #2
 8004448:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d005      	beq.n	8004478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2204      	movs	r2, #4
 8004470:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e029      	b.n	80044cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020e 	bic.w	r2, r2, #14
 8004486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	f003 021c 	and.w	r2, r3, #28
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f202 	lsl.w	r2, r1, r2
 80044aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
    }
  }
  return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f003 031c 	and.w	r3, r3, #28
 80044f6:	2204      	movs	r2, #4
 80044f8:	409a      	lsls	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d026      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7a>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d021      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0204 	bic.w	r2, r2, #4
 8004528:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f003 021c 	and.w	r2, r3, #28
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2104      	movs	r1, #4
 8004538:	fa01 f202 	lsl.w	r2, r1, r2
 800453c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	2b00      	cmp	r3, #0
 8004544:	d071      	beq.n	800462a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800454e:	e06c      	b.n	800462a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f003 031c 	and.w	r3, r3, #28
 8004558:	2202      	movs	r2, #2
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02e      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xec>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d029      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 020a 	bic.w	r2, r2, #10
 800458a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f003 021c 	and.w	r2, r3, #28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	2102      	movs	r1, #2
 80045a2:	fa01 f202 	lsl.w	r2, r1, r2
 80045a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d038      	beq.n	800462a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c0:	e033      	b.n	800462a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f003 031c 	and.w	r3, r3, #28
 80045ca:	2208      	movs	r2, #8
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02a      	beq.n	800462c <HAL_DMA_IRQHandler+0x156>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d025      	beq.n	800462c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f003 021c 	and.w	r2, r3, #28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800462a:	bf00      	nop
 800462c:	bf00      	nop
}
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	460b      	mov	r3, r1
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_DMA_RegisterCallback+0x20>
 8004650:	2302      	movs	r3, #2
 8004652:	e031      	b.n	80046b8 <HAL_DMA_RegisterCallback+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d120      	bne.n	80046aa <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8004668:	7afb      	ldrb	r3, [r7, #11]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d81a      	bhi.n	80046a4 <HAL_DMA_RegisterCallback+0x70>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <HAL_DMA_RegisterCallback+0x40>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004685 	.word	0x08004685
 8004678:	0800468d 	.word	0x0800468d
 800467c:	08004695 	.word	0x08004695
 8004680:	0800469d 	.word	0x0800469d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800468a:	e010      	b.n	80046ae <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8004692:	e00c      	b.n	80046ae <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800469a:	e008      	b.n	80046ae <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80046a2:	e004      	b.n	80046ae <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
           break;
 80046a8:	e001      	b.n	80046ae <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	f003 021c 	and.w	r2, r3, #28
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d108      	bne.n	8004708 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004706:	e007      	b.n	8004718 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004732:	e154      	b.n	80049de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2101      	movs	r1, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8146 	beq.w	80049d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d005      	beq.n	8004764 <HAL_GPIO_Init+0x40>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d130      	bne.n	80047c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2203      	movs	r2, #3
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800479a:	2201      	movs	r2, #1
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0201 	and.w	r2, r3, #1
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d017      	beq.n	8004802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d123      	bne.n	8004856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	08da      	lsrs	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3208      	adds	r2, #8
 8004850:	6939      	ldr	r1, [r7, #16]
 8004852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0203 	and.w	r2, r3, #3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80a0 	beq.w	80049d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004898:	4b58      	ldr	r3, [pc, #352]	; (80049fc <HAL_GPIO_Init+0x2d8>)
 800489a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489c:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_GPIO_Init+0x2d8>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6613      	str	r3, [r2, #96]	; 0x60
 80048a4:	4b55      	ldr	r3, [pc, #340]	; (80049fc <HAL_GPIO_Init+0x2d8>)
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048b0:	4a53      	ldr	r2, [pc, #332]	; (8004a00 <HAL_GPIO_Init+0x2dc>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048da:	d019      	beq.n	8004910 <HAL_GPIO_Init+0x1ec>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a49      	ldr	r2, [pc, #292]	; (8004a04 <HAL_GPIO_Init+0x2e0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_GPIO_Init+0x1e8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a48      	ldr	r2, [pc, #288]	; (8004a08 <HAL_GPIO_Init+0x2e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00d      	beq.n	8004908 <HAL_GPIO_Init+0x1e4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a47      	ldr	r2, [pc, #284]	; (8004a0c <HAL_GPIO_Init+0x2e8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <HAL_GPIO_Init+0x1e0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a46      	ldr	r2, [pc, #280]	; (8004a10 <HAL_GPIO_Init+0x2ec>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_GPIO_Init+0x1dc>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e008      	b.n	8004912 <HAL_GPIO_Init+0x1ee>
 8004900:	2307      	movs	r3, #7
 8004902:	e006      	b.n	8004912 <HAL_GPIO_Init+0x1ee>
 8004904:	2303      	movs	r3, #3
 8004906:	e004      	b.n	8004912 <HAL_GPIO_Init+0x1ee>
 8004908:	2302      	movs	r3, #2
 800490a:	e002      	b.n	8004912 <HAL_GPIO_Init+0x1ee>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_GPIO_Init+0x1ee>
 8004910:	2300      	movs	r3, #0
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	f002 0203 	and.w	r2, r2, #3
 8004918:	0092      	lsls	r2, r2, #2
 800491a:	4093      	lsls	r3, r2
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004922:	4937      	ldr	r1, [pc, #220]	; (8004a00 <HAL_GPIO_Init+0x2dc>)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	3302      	adds	r3, #2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004930:	4b38      	ldr	r3, [pc, #224]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	43db      	mvns	r3, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004954:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800497e:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004984:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	43db      	mvns	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4013      	ands	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <HAL_GPIO_Init+0x2f0>)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3301      	adds	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f aea3 	bne.w	8004734 <HAL_GPIO_Init+0x10>
  }
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40010000 	.word	0x40010000
 8004a04:	48000400 	.word	0x48000400
 8004a08:	48000800 	.word	0x48000800
 8004a0c:	48000c00 	.word	0x48000c00
 8004a10:	48001000 	.word	0x48001000
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 fa00 	bl	8008e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40010400 	.word	0x40010400

08004a78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40007000 	.word	0x40007000

08004a98 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_PWR_ConfigPVD+0xb8>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 020e 	bic.w	r2, r3, #14
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4928      	ldr	r1, [pc, #160]	; (8004b50 <HAL_PWR_ConfigPVD+0xb8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8004ab2:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004abe:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004aca:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b10:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b28:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4a06      	ldr	r2, [pc, #24]	; (8004b54 <HAL_PWR_ConfigPVD+0xbc>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40007000 	.word	0x40007000
 8004b54:	40010400 	.word	0x40010400

08004b58 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_PWR_EnablePVD+0x1c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_PWR_EnablePVD+0x1c>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6053      	str	r3, [r2, #4]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40007000 	.word	0x40007000

08004b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	d130      	bne.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ba4:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb0:	d038      	beq.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2232      	movs	r2, #50	; 0x32
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0c9b      	lsrs	r3, r3, #18
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd8:	e002      	b.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bec:	d102      	bne.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f2      	bne.n	8004bda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d110      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d007      	beq.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c1c:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40007000 	.word	0x40007000
 8004c38:	20000104 	.word	0x20000104
 8004c3c:	431bde83 	.word	0x431bde83

08004c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f000 bc02 	b.w	8005458 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c54:	4b96      	ldr	r3, [pc, #600]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c5e:	4b94      	ldr	r3, [pc, #592]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80e4 	beq.w	8004e3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4c>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	f040 808b 	bne.w	8004d9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 8087 	bne.w	8004d9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c8c:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x64>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e3d9      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	4b81      	ldr	r3, [pc, #516]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_RCC_OscConfig+0x7e>
 8004cb4:	4b7e      	ldr	r3, [pc, #504]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cbc:	e005      	b.n	8004cca <HAL_RCC_OscConfig+0x8a>
 8004cbe:	4b7c      	ldr	r3, [pc, #496]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d223      	bcs.n	8004d16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fd8c 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e3ba      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce2:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a72      	ldr	r2, [pc, #456]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	f043 0308 	orr.w	r3, r3, #8
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b70      	ldr	r3, [pc, #448]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	496d      	ldr	r1, [pc, #436]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d00:	4b6b      	ldr	r3, [pc, #428]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	4968      	ldr	r1, [pc, #416]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
 8004d14:	e025      	b.n	8004d62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d16:	4b66      	ldr	r3, [pc, #408]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a65      	ldr	r2, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	f043 0308 	orr.w	r3, r3, #8
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4960      	ldr	r1, [pc, #384]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d34:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	495b      	ldr	r1, [pc, #364]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fd4c 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e37a      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d62:	f000 fc81 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4950      	ldr	r1, [pc, #320]	; (8004eb4 <HAL_RCC_OscConfig+0x274>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	; (8004eb8 <HAL_RCC_OscConfig+0x278>)
 8004d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d82:	4b4e      	ldr	r3, [pc, #312]	; (8004ebc <HAL_RCC_OscConfig+0x27c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff f878 	bl	8003e7c <HAL_InitTick>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d052      	beq.n	8004e3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	e35e      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d032      	beq.n	8004e08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004da2:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a42      	ldr	r2, [pc, #264]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dae:	f7ff f8a1 	bl	8003ef4 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004db6:	f7ff f89d 	bl	8003ef4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e347      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd4:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004dda:	f043 0308 	orr.w	r3, r3, #8
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b33      	ldr	r3, [pc, #204]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4930      	ldr	r1, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004df2:	4b2f      	ldr	r3, [pc, #188]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	492b      	ldr	r1, [pc, #172]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]
 8004e06:	e01a      	b.n	8004e3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e14:	f7ff f86e 	bl	8003ef4 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e1c:	f7ff f86a 	bl	8003ef4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e314      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1dc>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d073      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_OscConfig+0x21c>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d10e      	bne.n	8004e74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d10b      	bne.n	8004e74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d063      	beq.n	8004f30 <HAL_RCC_OscConfig+0x2f0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d15f      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e2f1      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCC_OscConfig+0x24c>
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e025      	b.n	8004ed8 <HAL_RCC_OscConfig+0x298>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e94:	d114      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x280>
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a02      	ldr	r2, [pc, #8]	; (8004eb0 <HAL_RCC_OscConfig+0x270>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e013      	b.n	8004ed8 <HAL_RCC_OscConfig+0x298>
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	0800a4b8 	.word	0x0800a4b8
 8004eb8:	20000104 	.word	0x20000104
 8004ebc:	20000010 	.word	0x20000010
 8004ec0:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a9f      	ldr	r2, [pc, #636]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b9d      	ldr	r3, [pc, #628]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a9c      	ldr	r2, [pc, #624]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7ff f808 	bl	8003ef4 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee8:	f7ff f804 	bl	8003ef4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e2ae      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efa:	4b92      	ldr	r3, [pc, #584]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x2a8>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fe fff4 	bl	8003ef4 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fe fff0 	bl	8003ef4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e29a      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f22:	4b88      	ldr	r3, [pc, #544]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x2d0>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d060      	beq.n	8005000 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_OscConfig+0x310>
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d119      	bne.n	8004f7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d116      	bne.n	8004f7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f50:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_OscConfig+0x328>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e277      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b76      	ldr	r3, [pc, #472]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	4973      	ldr	r1, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f7c:	e040      	b.n	8005000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d023      	beq.n	8004fce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f86:	4b6f      	ldr	r3, [pc, #444]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6e      	ldr	r2, [pc, #440]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f92:	f7fe ffaf 	bl	8003ef4 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f9a:	f7fe ffab 	bl	8003ef4 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e255      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fac:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb8:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	495f      	ldr	r1, [pc, #380]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	e018      	b.n	8005000 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fce:	4b5d      	ldr	r3, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fe ff8b 	bl	8003ef4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fe ff87 	bl	8003ef4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e231      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ff4:	4b53      	ldr	r3, [pc, #332]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d03c      	beq.n	8005086 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01c      	beq.n	800504e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005014:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501a:	4a4a      	ldr	r2, [pc, #296]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fe ff66 	bl	8003ef4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502c:	f7fe ff62 	bl	8003ef4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e20c      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ef      	beq.n	800502c <HAL_RCC_OscConfig+0x3ec>
 800504c:	e01b      	b.n	8005086 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504e:	4b3d      	ldr	r3, [pc, #244]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005054:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fe ff49 	bl	8003ef4 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005066:	f7fe ff45 	bl	8003ef4 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1ef      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005078:	4b32      	ldr	r3, [pc, #200]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 800507a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ef      	bne.n	8005066 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80a6 	beq.w	80051e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005094:	2300      	movs	r3, #0
 8005096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005098:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a4:	4b27      	ldr	r3, [pc, #156]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	4a26      	ldr	r2, [pc, #152]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6593      	str	r3, [r2, #88]	; 0x58
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050bc:	2301      	movs	r3, #1
 80050be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c0:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_RCC_OscConfig+0x508>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d118      	bne.n	80050fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <HAL_RCC_OscConfig+0x508>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_RCC_OscConfig+0x508>)
 80050d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d8:	f7fe ff0c 	bl	8003ef4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e0:	f7fe ff08 	bl	8003ef4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1b2      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCC_OscConfig+0x508>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d108      	bne.n	8005118 <HAL_RCC_OscConfig+0x4d8>
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005116:	e029      	b.n	800516c <HAL_RCC_OscConfig+0x52c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b05      	cmp	r3, #5
 800511e:	d115      	bne.n	800514c <HAL_RCC_OscConfig+0x50c>
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	4a07      	ldr	r2, [pc, #28]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	4a03      	ldr	r2, [pc, #12]	; (8005144 <HAL_RCC_OscConfig+0x504>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x52c>
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000
 8005148:	40007000 	.word	0x40007000
 800514c:	4b9a      	ldr	r3, [pc, #616]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	4a99      	ldr	r2, [pc, #612]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800515c:	4b96      	ldr	r3, [pc, #600]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	4a95      	ldr	r2, [pc, #596]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d016      	beq.n	80051a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fe febe 	bl	8003ef4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fe feba 	bl	8003ef4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e162      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005192:	4b89      	ldr	r3, [pc, #548]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ed      	beq.n	800517c <HAL_RCC_OscConfig+0x53c>
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a2:	f7fe fea7 	bl	8003ef4 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fe fea3 	bl	8003ef4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e14b      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051c0:	4b7d      	ldr	r3, [pc, #500]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ed      	bne.n	80051aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ce:	7ffb      	ldrb	r3, [r7, #31]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d4:	4b78      	ldr	r3, [pc, #480]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	4a77      	ldr	r2, [pc, #476]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03c      	beq.n	8005266 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01c      	beq.n	800522e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051f4:	4b70      	ldr	r3, [pc, #448]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80051f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fa:	4a6f      	ldr	r2, [pc, #444]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fe fe76 	bl	8003ef4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800520c:	f7fe fe72 	bl	8003ef4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e11c      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800521e:	4b66      	ldr	r3, [pc, #408]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ef      	beq.n	800520c <HAL_RCC_OscConfig+0x5cc>
 800522c:	e01b      	b.n	8005266 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800522e:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005234:	4a60      	ldr	r2, [pc, #384]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fe fe59 	bl	8003ef4 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005246:	f7fe fe55 	bl	8003ef4 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0ff      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005258:	4b57      	ldr	r3, [pc, #348]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 800525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ef      	bne.n	8005246 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80f3 	beq.w	8005456 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	2b02      	cmp	r3, #2
 8005276:	f040 80c9 	bne.w	800540c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800527a:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	429a      	cmp	r2, r3
 800528c:	d12c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	3b01      	subs	r3, #1
 800529a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d123      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d11b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d113      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d109      	bne.n	80052e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	3b01      	subs	r3, #1
 80052e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d06b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d062      	beq.n	80053b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052ee:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0ac      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052fe:	4b2e      	ldr	r3, [pc, #184]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800530a:	f7fe fdf3 	bl	8003ef4 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005312:	f7fe fdef 	bl	8003ef4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e099      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005330:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_RCC_OscConfig+0x77c>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005340:	3a01      	subs	r2, #1
 8005342:	0112      	lsls	r2, r2, #4
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800534a:	0212      	lsls	r2, r2, #8
 800534c:	4311      	orrs	r1, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005352:	0852      	lsrs	r2, r2, #1
 8005354:	3a01      	subs	r2, #1
 8005356:	0552      	lsls	r2, r2, #21
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800535e:	0852      	lsrs	r2, r2, #1
 8005360:	3a01      	subs	r2, #1
 8005362:	0652      	lsls	r2, r2, #25
 8005364:	4311      	orrs	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800536a:	06d2      	lsls	r2, r2, #27
 800536c:	430a      	orrs	r2, r1
 800536e:	4912      	ldr	r1, [pc, #72]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005370:	4313      	orrs	r3, r2
 8005372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 800537a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800537e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 8005386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800538a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800538c:	f7fe fdb2 	bl	8003ef4 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005394:	f7fe fdae 	bl	8003ef4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e058      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_OscConfig+0x778>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053b2:	e050      	b.n	8005456 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e04f      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
 80053b8:	40021000 	.word	0x40021000
 80053bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d144      	bne.n	8005456 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053cc:	4b24      	ldr	r3, [pc, #144]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a23      	ldr	r2, [pc, #140]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 80053d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4a20      	ldr	r2, [pc, #128]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053e4:	f7fe fd86 	bl	8003ef4 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fe fd82 	bl	8003ef4 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e02c      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x7ac>
 800540a:	e024      	b.n	8005456 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d01f      	beq.n	8005452 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 8005418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fe fd69 	bl	8003ef4 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005426:	f7fe fd65 	bl	8003ef4 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e00f      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	4905      	ldr	r1, [pc, #20]	; (8005460 <HAL_RCC_OscConfig+0x820>)
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RCC_OscConfig+0x824>)
 800544c:	4013      	ands	r3, r2
 800544e:	60cb      	str	r3, [r1, #12]
 8005450:	e001      	b.n	8005456 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	feeefffc 	.word	0xfeeefffc

08005468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0e7      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b75      	ldr	r3, [pc, #468]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d910      	bls.n	80054ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b72      	ldr	r3, [pc, #456]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 0207 	bic.w	r2, r3, #7
 8005492:	4970      	ldr	r1, [pc, #448]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b6e      	ldr	r3, [pc, #440]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0cf      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d010      	beq.n	80054da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	4b66      	ldr	r3, [pc, #408]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d908      	bls.n	80054da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b63      	ldr	r3, [pc, #396]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4960      	ldr	r1, [pc, #384]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04c      	beq.n	8005580 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ee:	4b5a      	ldr	r3, [pc, #360]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d121      	bne.n	800553e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0a6      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	4b54      	ldr	r3, [pc, #336]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e09a      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800551e:	4b4e      	ldr	r3, [pc, #312]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e08e      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552e:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e086      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b46      	ldr	r3, [pc, #280]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4943      	ldr	r1, [pc, #268]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 800554c:	4313      	orrs	r3, r2
 800554e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fe fcd0 	bl	8003ef4 <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fe fccc 	bl	8003ef4 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e06e      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b31      	ldr	r3, [pc, #196]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005598:	429a      	cmp	r2, r3
 800559a:	d208      	bcs.n	80055ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800559c:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	492b      	ldr	r1, [pc, #172]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d210      	bcs.n	80055de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f023 0207 	bic.w	r2, r3, #7
 80055c4:	4923      	ldr	r1, [pc, #140]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_ClockConfig+0x1ec>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d001      	beq.n	80055de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e036      	b.n	800564c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4918      	ldr	r1, [pc, #96]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005608:	4b13      	ldr	r3, [pc, #76]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4910      	ldr	r1, [pc, #64]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800561c:	f000 f824 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <HAL_RCC_ClockConfig+0x1f0>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	091b      	lsrs	r3, r3, #4
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	490b      	ldr	r1, [pc, #44]	; (800565c <HAL_RCC_ClockConfig+0x1f4>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x1f8>)
 800563a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1fc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fc1b 	bl	8003e7c <HAL_InitTick>
 8005646:	4603      	mov	r3, r0
 8005648:	72fb      	strb	r3, [r7, #11]

  return status;
 800564a:	7afb      	ldrb	r3, [r7, #11]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40022000 	.word	0x40022000
 8005658:	40021000 	.word	0x40021000
 800565c:	0800a4b8 	.word	0x0800a4b8
 8005660:	20000104 	.word	0x20000104
 8005664:	20000010 	.word	0x20000010

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005676:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005680:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x34>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d121      	bne.n	80056da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d11e      	bne.n	80056da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800569c:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056a8:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 80056aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e005      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056c4:	4a2b      	ldr	r2, [pc, #172]	; (8005774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_RCC_GetSysClockFreq+0x110>)
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e004      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056ec:	4b23      	ldr	r3, [pc, #140]	; (800577c <HAL_RCC_GetSysClockFreq+0x114>)
 80056ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d134      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056f6:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d003      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0xa6>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d003      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0xac>
 800570c:	e005      	b.n	800571a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_RCC_GetSysClockFreq+0x110>)
 8005710:	617b      	str	r3, [r7, #20]
      break;
 8005712:	e005      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_GetSysClockFreq+0x114>)
 8005716:	617b      	str	r3, [r7, #20]
      break;
 8005718:	e002      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	617b      	str	r3, [r7, #20]
      break;
 800571e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	3301      	adds	r3, #1
 800572c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	fb03 f202 	mul.w	r2, r3, r2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <HAL_RCC_GetSysClockFreq+0x108>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	0e5b      	lsrs	r3, r3, #25
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	3301      	adds	r3, #1
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005760:	69bb      	ldr	r3, [r7, #24]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000
 8005774:	0800a4d0 	.word	0x0800a4d0
 8005778:	00f42400 	.word	0x00f42400
 800577c:	02dc6c00 	.word	0x02dc6c00

08005780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005784:	4b03      	ldr	r3, [pc, #12]	; (8005794 <HAL_RCC_GetHCLKFreq+0x14>)
 8005786:	681b      	ldr	r3, [r3, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000104 	.word	0x20000104

08005798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800579c:	f7ff fff0 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4904      	ldr	r1, [pc, #16]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	0800a4c8 	.word	0x0800a4c8

080057c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057c8:	f7ff ffda 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	0adb      	lsrs	r3, r3, #11
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4904      	ldr	r1, [pc, #16]	; (80057ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000
 80057ec:	0800a4c8 	.word	0x0800a4c8

080057f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005808:	f7ff f9b6 	bl	8004b78 <HAL_PWREx_GetVoltageRange>
 800580c:	6178      	str	r0, [r7, #20]
 800580e:	e014      	b.n	800583a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6593      	str	r3, [r2, #88]	; 0x58
 800581c:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005828:	f7ff f9a6 	bl	8004b78 <HAL_PWREx_GetVoltageRange>
 800582c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d10b      	bne.n	800585a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d919      	bls.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2ba0      	cmp	r3, #160	; 0xa0
 800584c:	d902      	bls.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800584e:	2302      	movs	r3, #2
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	e013      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005854:	2301      	movs	r3, #1
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	e010      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d902      	bls.n	8005866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005860:	2303      	movs	r3, #3
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	e00a      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b80      	cmp	r3, #128	; 0x80
 800586a:	d102      	bne.n	8005872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800586c:	2302      	movs	r3, #2
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e004      	b.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d101      	bne.n	800587c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005878:	2301      	movs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0207 	bic.w	r2, r3, #7
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40022000 	.word	0x40022000

080058b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058b8:	2300      	movs	r3, #0
 80058ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058bc:	2300      	movs	r3, #0
 80058be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d031      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058d4:	d01a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80058d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058da:	d814      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058e4:	d10f      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80058e6:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4a5c      	ldr	r2, [pc, #368]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058f2:	e00c      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f9f0 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	74fb      	strb	r3, [r7, #19]
      break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005914:	4b51      	ldr	r3, [pc, #324]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	494e      	ldr	r1, [pc, #312]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800592a:	e001      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 809e 	beq.w	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005942:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005958:	4b40      	ldr	r3, [pc, #256]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	4a3f      	ldr	r2, [pc, #252]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	6593      	str	r3, [r2, #88]	; 0x58
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005970:	2301      	movs	r3, #1
 8005972:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a39      	ldr	r2, [pc, #228]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800597a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005980:	f7fe fab8 	bl	8003ef4 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005986:	e009      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005988:	f7fe fab4 	bl	8003ef4 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d902      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	74fb      	strb	r3, [r7, #19]
        break;
 800599a:	e005      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800599c:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ef      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d15a      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ae:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d019      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059d6:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ec:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059f6:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d016      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fe fa74 	bl	8003ef4 <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fe fa70 	bl	8003ef4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d902      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	74fb      	strb	r3, [r7, #19]
            break;
 8005a26:	e006      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ec      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	4904      	ldr	r1, [pc, #16]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a52:	e009      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	74bb      	strb	r3, [r7, #18]
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a68:	7c7b      	ldrb	r3, [r7, #17]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6e:	4b9b      	ldr	r3, [pc, #620]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	4a9a      	ldr	r2, [pc, #616]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a86:	4b95      	ldr	r3, [pc, #596]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f023 0203 	bic.w	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4991      	ldr	r1, [pc, #580]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aa8:	4b8c      	ldr	r3, [pc, #560]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f023 020c 	bic.w	r2, r3, #12
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	4989      	ldr	r1, [pc, #548]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aca:	4b84      	ldr	r3, [pc, #528]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	4980      	ldr	r1, [pc, #512]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aec:	4b7b      	ldr	r3, [pc, #492]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	4978      	ldr	r1, [pc, #480]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b0e:	4b73      	ldr	r3, [pc, #460]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	496f      	ldr	r1, [pc, #444]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b30:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4967      	ldr	r1, [pc, #412]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b52:	4b62      	ldr	r3, [pc, #392]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	495e      	ldr	r1, [pc, #376]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b74:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	4956      	ldr	r1, [pc, #344]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b96:	4b51      	ldr	r3, [pc, #324]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	494d      	ldr	r1, [pc, #308]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d028      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bb8:	4b48      	ldr	r3, [pc, #288]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc6:	4945      	ldr	r1, [pc, #276]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd6:	d106      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd8:	4b40      	ldr	r3, [pc, #256]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a3f      	ldr	r2, [pc, #252]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be2:	60d3      	str	r3, [r2, #12]
 8005be4:	e011      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bee:	d10c      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f872 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c00:	7cfb      	ldrb	r3, [r7, #19]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d028      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c24:	492d      	ldr	r1, [pc, #180]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c34:	d106      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c36:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c40:	60d3      	str	r3, [r2, #12]
 8005c42:	e011      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f843 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c5e:	7cfb      	ldrb	r3, [r7, #19]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01c      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	4916      	ldr	r1, [pc, #88]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c92:	d10c      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	2102      	movs	r1, #2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f820 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005caa:	7cfb      	ldrb	r3, [r7, #19]
 8005cac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	4904      	ldr	r1, [pc, #16]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cee:	4b74      	ldr	r3, [pc, #464]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cfa:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0203 	and.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d10d      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d12:	4b6b      	ldr	r3, [pc, #428]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
       ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d047      	beq.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	e044      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d018      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x86>
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d825      	bhi.n	8005d84 <RCCEx_PLLSAI1_Config+0xa4>
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <RCCEx_PLLSAI1_Config+0x62>
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d009      	beq.n	8005d54 <RCCEx_PLLSAI1_Config+0x74>
 8005d40:	e020      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11d      	bne.n	8005d8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d52:	e01a      	b.n	8005d8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d54:	4b5a      	ldr	r3, [pc, #360]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d64:	e013      	b.n	8005d8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d66:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d72:	4b53      	ldr	r3, [pc, #332]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d82:	e006      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e004      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d9a:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	430b      	orrs	r3, r1
 8005db0:	4943      	ldr	r1, [pc, #268]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d17c      	bne.n	8005eb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3f      	ldr	r2, [pc, #252]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fe f894 	bl	8003ef4 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dce:	e009      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dd0:	f7fe f890 	bl	8003ef4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d902      	bls.n	8005de4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	73fb      	strb	r3, [r7, #15]
        break;
 8005de2:	e005      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ef      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d15f      	bne.n	8005eb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d110      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dfc:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005e04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6892      	ldr	r2, [r2, #8]
 8005e0c:	0211      	lsls	r1, r2, #8
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	06d2      	lsls	r2, r2, #27
 8005e14:	430a      	orrs	r2, r1
 8005e16:	492a      	ldr	r1, [pc, #168]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	610b      	str	r3, [r1, #16]
 8005e1c:	e027      	b.n	8005e6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d112      	bne.n	8005e4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e24:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6892      	ldr	r2, [r2, #8]
 8005e34:	0211      	lsls	r1, r2, #8
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6912      	ldr	r2, [r2, #16]
 8005e3a:	0852      	lsrs	r2, r2, #1
 8005e3c:	3a01      	subs	r2, #1
 8005e3e:	0552      	lsls	r2, r2, #21
 8005e40:	430a      	orrs	r2, r1
 8005e42:	491f      	ldr	r1, [pc, #124]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	610b      	str	r3, [r1, #16]
 8005e48:	e011      	b.n	8005e6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	0211      	lsls	r1, r2, #8
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	0852      	lsrs	r2, r2, #1
 8005e62:	3a01      	subs	r2, #1
 8005e64:	0652      	lsls	r2, r2, #25
 8005e66:	430a      	orrs	r2, r1
 8005e68:	4915      	ldr	r1, [pc, #84]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e6e:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7a:	f7fe f83b 	bl	8003ef4 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e80:	e009      	b.n	8005e96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e82:	f7fe f837 	bl	8003ef4 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d902      	bls.n	8005e96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	73fb      	strb	r3, [r7, #15]
          break;
 8005e94:	e005      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ef      	beq.n	8005e82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	4903      	ldr	r1, [pc, #12]	; (8005ec0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000

08005ec4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d06c      	beq.n	8005fb0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f002 fd0c 	bl	8008908 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	22ca      	movs	r2, #202	; 0xca
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2253      	movs	r2, #83	; 0x53
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f87c 	bl	8006006 <RTC_EnterInitMode>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d14b      	bne.n	8005fb0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68d2      	ldr	r2, [r2, #12]
 8005f52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6919      	ldr	r1, [r3, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	041a      	lsls	r2, r3, #16
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f87f 	bl	800606c <RTC_ExitInitMode>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11b      	bne.n	8005fb0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0203 	bic.w	r2, r2, #3
 8005f86:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fd0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005fd2:	f7fd ff8f 	bl	8003ef4 <HAL_GetTick>
 8005fd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fd8:	e009      	b.n	8005fee <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fda:	f7fd ff8b 	bl	8003ef4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe8:	d901      	bls.n	8005fee <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e007      	b.n	8005ffe <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0ee      	beq.n	8005fda <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d120      	bne.n	8006062 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006028:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800602a:	f7fd ff63 	bl	8003ef4 <HAL_GetTick>
 800602e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006030:	e00d      	b.n	800604e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006032:	f7fd ff5f 	bl	8003ef4 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006040:	d905      	bls.n	800604e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2203      	movs	r2, #3
 800604a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <RTC_EnterInitMode+0x5c>
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d1e7      	bne.n	8006032 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006078:	4b1a      	ldr	r3, [pc, #104]	; (80060e4 <RTC_ExitInitMode+0x78>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <RTC_ExitInitMode+0x78>)
 800607e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006082:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006084:	4b17      	ldr	r3, [pc, #92]	; (80060e4 <RTC_ExitInitMode+0x78>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff92 	bl	8005fba <HAL_RTC_WaitForSynchro>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01e      	beq.n	80060da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2203      	movs	r2, #3
 80060a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	e017      	b.n	80060da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <RTC_ExitInitMode+0x78>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <RTC_ExitInitMode+0x78>)
 80060b0:	f023 0320 	bic.w	r3, r3, #32
 80060b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff7f 	bl	8005fba <HAL_RTC_WaitForSynchro>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <RTC_ExitInitMode+0x78>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <RTC_ExitInitMode+0x78>)
 80060d4:	f043 0320 	orr.w	r3, r3, #32
 80060d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40002800 	.word	0x40002800

080060e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e095      	b.n	8006226 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610a:	d009      	beq.n	8006120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	61da      	str	r2, [r3, #28]
 8006112:	e005      	b.n	8006120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f877 	bl	800622e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006156:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006160:	d902      	bls.n	8006168 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e002      	b.n	800616e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006176:	d007      	beq.n	8006188 <HAL_SPI_Init+0xa0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006180:	d002      	beq.n	8006188 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	ea42 0103 	orr.w	r1, r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	f003 0204 	and.w	r2, r3, #4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006204:	ea42 0103 	orr.w	r1, r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e049      	b.n	80062e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 fb69 	bl	8008940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f000 fe2f 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e049      	b.n	8006396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f002 fc0c 	bl	8008b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f000 fdd8 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e03c      	b.n	8006446 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d109      	bne.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e02f      	b.n	8006446 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_PWM_Start_DMA+0x60>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e022      	b.n	8006446 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d109      	bne.n	800641a <HAL_TIM_PWM_Start_DMA+0x7a>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	e015      	b.n	8006446 <HAL_TIM_PWM_Start_DMA+0xa6>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b10      	cmp	r3, #16
 800641e:	d109      	bne.n	8006434 <HAL_TIM_PWM_Start_DMA+0x94>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e008      	b.n	8006446 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
 800644c:	e18d      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e03c      	b.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d109      	bne.n	8006482 <HAL_TIM_PWM_Start_DMA+0xe2>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e02f      	b.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d109      	bne.n	800649c <HAL_TIM_PWM_Start_DMA+0xfc>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e022      	b.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b0c      	cmp	r3, #12
 80064a0:	d109      	bne.n	80064b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	bf0c      	ite	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	2300      	movne	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e015      	b.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e008      	b.n	80064e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d034      	beq.n	8006550 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80064ec:	887b      	ldrh	r3, [r7, #2]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e139      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Start_DMA+0x166>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006504:	e026      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Start_DMA+0x176>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	e01e      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d104      	bne.n	8006526 <HAL_TIM_PWM_Start_DMA+0x186>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006524:	e016      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start_DMA+0x196>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006534:	e00e      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b10      	cmp	r3, #16
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	e006      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654e:	e001      	b.n	8006554 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e10a      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b0c      	cmp	r3, #12
 8006558:	f200 80ae 	bhi.w	80066b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006599 	.word	0x08006599
 8006568:	080066b9 	.word	0x080066b9
 800656c:	080066b9 	.word	0x080066b9
 8006570:	080066b9 	.word	0x080066b9
 8006574:	080065e1 	.word	0x080065e1
 8006578:	080066b9 	.word	0x080066b9
 800657c:	080066b9 	.word	0x080066b9
 8006580:	080066b9 	.word	0x080066b9
 8006584:	08006629 	.word	0x08006629
 8006588:	080066b9 	.word	0x080066b9
 800658c:	080066b9 	.word	0x080066b9
 8006590:	080066b9 	.word	0x080066b9
 8006594:	08006671 	.word	0x08006671
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	4a75      	ldr	r2, [pc, #468]	; (8006774 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	4a73      	ldr	r2, [pc, #460]	; (800677c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3334      	adds	r3, #52	; 0x34
 80065bc:	461a      	mov	r2, r3
 80065be:	887b      	ldrh	r3, [r7, #2]
 80065c0:	f7fd fee8 	bl	8004394 <HAL_DMA_Start_IT>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0cd      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065dc:	60da      	str	r2, [r3, #12]
      break;
 80065de:	e06e      	b.n	80066be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	4a63      	ldr	r2, [pc, #396]	; (8006774 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	4a62      	ldr	r2, [pc, #392]	; (8006778 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	4a61      	ldr	r2, [pc, #388]	; (800677c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80065f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3338      	adds	r3, #56	; 0x38
 8006604:	461a      	mov	r2, r3
 8006606:	887b      	ldrh	r3, [r7, #2]
 8006608:	f7fd fec4 	bl	8004394 <HAL_DMA_Start_IT>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0a9      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006624:	60da      	str	r2, [r3, #12]
      break;
 8006626:	e04a      	b.n	80066be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a50      	ldr	r2, [pc, #320]	; (8006778 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006636:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a4f      	ldr	r2, [pc, #316]	; (800677c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800663e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	333c      	adds	r3, #60	; 0x3c
 800664c:	461a      	mov	r2, r3
 800664e:	887b      	ldrh	r3, [r7, #2]
 8006650:	f7fd fea0 	bl	8004394 <HAL_DMA_Start_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e085      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666c:	60da      	str	r2, [r3, #12]
      break;
 800666e:	e026      	b.n	80066be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	4a3f      	ldr	r2, [pc, #252]	; (8006774 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a3e      	ldr	r2, [pc, #248]	; (8006778 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800667e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3340      	adds	r3, #64	; 0x40
 8006694:	461a      	mov	r2, r3
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	f7fd fe7c 	bl	8004394 <HAL_DMA_Start_IT>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e061      	b.n	800676a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066b4:	60da      	str	r2, [r3, #12]
      break;
 80066b6:	e002      	b.n	80066be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d151      	bne.n	8006768 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2201      	movs	r2, #1
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 ff85 	bl	80075dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d009      	beq.n	80066f0 <HAL_TIM_PWM_Start_DMA+0x350>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d004      	beq.n	80066f0 <HAL_TIM_PWM_Start_DMA+0x350>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <HAL_TIM_PWM_Start_DMA+0x354>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <HAL_TIM_PWM_Start_DMA+0x356>
 80066f4:	2300      	movs	r3, #0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_TIM_PWM_Start_DMA+0x388>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d004      	beq.n	8006728 <HAL_TIM_PWM_Start_DMA+0x388>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d115      	bne.n	8006754 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b06      	cmp	r3, #6
 8006738:	d015      	beq.n	8006766 <HAL_TIM_PWM_Start_DMA+0x3c6>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d011      	beq.n	8006766 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006752:	e008      	b.n	8006766 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e000      	b.n	8006768 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006766:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	08006dd5 	.word	0x08006dd5
 8006778:	08006e7d 	.word	0x08006e7d
 800677c:	08006d43 	.word	0x08006d43
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	00010007 	.word	0x00010007

08006790 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d855      	bhi.n	8006850 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	08006851 	.word	0x08006851
 80067b4:	08006851 	.word	0x08006851
 80067b8:	08006851 	.word	0x08006851
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	08006851 	.word	0x08006851
 80067c4:	08006851 	.word	0x08006851
 80067c8:	08006851 	.word	0x08006851
 80067cc:	08006819 	.word	0x08006819
 80067d0:	08006851 	.word	0x08006851
 80067d4:	08006851 	.word	0x08006851
 80067d8:	08006851 	.word	0x08006851
 80067dc:	08006835 	.word	0x08006835
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fd fe2d 	bl	8004454 <HAL_DMA_Abort_IT>
      break;
 80067fa:	e02c      	b.n	8006856 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	4618      	mov	r0, r3
 8006812:	f7fd fe1f 	bl	8004454 <HAL_DMA_Abort_IT>
      break;
 8006816:	e01e      	b.n	8006856 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006826:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd fe11 	bl	8004454 <HAL_DMA_Abort_IT>
      break;
 8006832:	e010      	b.n	8006856 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006842:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4618      	mov	r0, r3
 800684a:	f7fd fe03 	bl	8004454 <HAL_DMA_Abort_IT>
      break;
 800684e:	e002      	b.n	8006856 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
      break;
 8006854:	bf00      	nop
  }

  if (status == HAL_OK)
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d176      	bne.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 feb9 	bl	80075dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a39      	ldr	r2, [pc, #228]	; (8006954 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a37      	ldr	r2, [pc, #220]	; (8006958 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a36      	ldr	r2, [pc, #216]	; (800695c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d101      	bne.n	800688c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800688c:	2300      	movs	r3, #0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d017      	beq.n	80068c2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	f241 1311 	movw	r3, #4369	; 0x1111
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	f240 4344 	movw	r3, #1092	; 0x444
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0x162>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	f240 4344 	movw	r3, #1092	; 0x444
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0x162>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_PWM_Stop_DMA+0x172>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006900:	e023      	b.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b04      	cmp	r3, #4
 8006906:	d104      	bne.n	8006912 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006910:	e01b      	b.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d104      	bne.n	8006922 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006920:	e013      	b.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b0c      	cmp	r3, #12
 8006926:	d104      	bne.n	8006932 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006930:	e00b      	b.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b10      	cmp	r3, #16
 8006936:	d104      	bne.n	8006942 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006940:	e003      	b.n	800694a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400

08006960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800697a:	2302      	movs	r3, #2
 800697c:	e0ff      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b14      	cmp	r3, #20
 800698a:	f200 80f0 	bhi.w	8006b6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006b6f 	.word	0x08006b6f
 800699c:	08006b6f 	.word	0x08006b6f
 80069a0:	08006b6f 	.word	0x08006b6f
 80069a4:	08006a29 	.word	0x08006a29
 80069a8:	08006b6f 	.word	0x08006b6f
 80069ac:	08006b6f 	.word	0x08006b6f
 80069b0:	08006b6f 	.word	0x08006b6f
 80069b4:	08006a6b 	.word	0x08006a6b
 80069b8:	08006b6f 	.word	0x08006b6f
 80069bc:	08006b6f 	.word	0x08006b6f
 80069c0:	08006b6f 	.word	0x08006b6f
 80069c4:	08006aab 	.word	0x08006aab
 80069c8:	08006b6f 	.word	0x08006b6f
 80069cc:	08006b6f 	.word	0x08006b6f
 80069d0:	08006b6f 	.word	0x08006b6f
 80069d4:	08006aed 	.word	0x08006aed
 80069d8:	08006b6f 	.word	0x08006b6f
 80069dc:	08006b6f 	.word	0x08006b6f
 80069e0:	08006b6f 	.word	0x08006b6f
 80069e4:	08006b2d 	.word	0x08006b2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fadc 	bl	8006fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0204 	bic.w	r2, r2, #4
 8006a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6999      	ldr	r1, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	619a      	str	r2, [r3, #24]
      break;
 8006a26:	e0a5      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb38 	bl	80070a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6999      	ldr	r1, [r3, #24]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	021a      	lsls	r2, r3, #8
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	619a      	str	r2, [r3, #24]
      break;
 8006a68:	e084      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fb91 	bl	8007198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0208 	orr.w	r2, r2, #8
 8006a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0204 	bic.w	r2, r2, #4
 8006a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	61da      	str	r2, [r3, #28]
      break;
 8006aa8:	e064      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fbe9 	bl	8007288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69d9      	ldr	r1, [r3, #28]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	021a      	lsls	r2, r3, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	61da      	str	r2, [r3, #28]
      break;
 8006aea:	e043      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fc26 	bl	8007344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b2a:	e023      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fc5e 	bl	80073f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b6c:	e002      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
      break;
 8006b72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e0b6      	b.n	8006d12 <HAL_TIM_ConfigClockSource+0x18a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be0:	d03e      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0xd8>
 8006be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be6:	f200 8087 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	f000 8086 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x176>
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf6:	d87f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006bf8:	2b70      	cmp	r3, #112	; 0x70
 8006bfa:	d01a      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0xaa>
 8006bfc:	2b70      	cmp	r3, #112	; 0x70
 8006bfe:	d87b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c00:	2b60      	cmp	r3, #96	; 0x60
 8006c02:	d050      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x11e>
 8006c04:	2b60      	cmp	r3, #96	; 0x60
 8006c06:	d877      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c08:	2b50      	cmp	r3, #80	; 0x50
 8006c0a:	d03c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0xfe>
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d873      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d058      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x13e>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d86f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d064      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15e>
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d86b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d060      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15e>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d867      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d05c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15e>
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d05a      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15e>
 8006c30:	e062      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6899      	ldr	r1, [r3, #8]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f000 fcab 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	609a      	str	r2, [r3, #8]
      break;
 8006c5e:	e04f      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6899      	ldr	r1, [r3, #8]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f000 fc94 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c82:	609a      	str	r2, [r3, #8]
      break;
 8006c84:	e03c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fc08 	bl	80074a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2150      	movs	r1, #80	; 0x50
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc61 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e02c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 fc27 	bl	8007506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2160      	movs	r1, #96	; 0x60
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fc51 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006cc4:	e01c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 fbe8 	bl	80074a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fc41 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006ce4:	e00c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 fc38 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006cf6:	e003      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e000      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d107      	bne.n	8006d6a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d68:	e02a      	b.n	8006dc0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d107      	bne.n	8006d84 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d82:	e01d      	b.n	8006dc0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d107      	bne.n	8006d9e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2204      	movs	r2, #4
 8006d92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d9c:	e010      	b.n	8006dc0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d107      	bne.n	8006db8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2208      	movs	r2, #8
 8006dac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db6:	e003      	b.n	8006dc0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff ffb4 	bl	8006d2e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d10b      	bne.n	8006e04 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d136      	bne.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e02:	e031      	b.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d10b      	bne.n	8006e26 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2202      	movs	r2, #2
 8006e12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d125      	bne.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e24:	e020      	b.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d10b      	bne.n	8006e48 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2204      	movs	r2, #4
 8006e34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d114      	bne.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e46:	e00f      	b.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d10a      	bne.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2208      	movs	r2, #8
 8006e56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f002 f80f 	bl	8008e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d103      	bne.n	8006e9c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	771a      	strb	r2, [r3, #28]
 8006e9a:	e019      	b.n	8006ed0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d103      	bne.n	8006eae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	771a      	strb	r2, [r3, #28]
 8006eac:	e010      	b.n	8006ed0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d103      	bne.n	8006ec0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	771a      	strb	r2, [r3, #28]
 8006ebe:	e007      	b.n	8006ed0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d102      	bne.n	8006ed0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff ff22 	bl	8006d1a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <TIM_Base_SetConfig+0xbc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_Base_SetConfig+0x20>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f02:	d108      	bne.n	8006f16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <TIM_Base_SetConfig+0xbc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d007      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <TIM_Base_SetConfig+0xc0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_Base_SetConfig+0x52>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <TIM_Base_SetConfig+0xc4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a0c      	ldr	r2, [pc, #48]	; (8006fa0 <TIM_Base_SetConfig+0xbc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_Base_SetConfig+0xa0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <TIM_Base_SetConfig+0xc0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0xa0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <TIM_Base_SetConfig+0xc4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d103      	bne.n	8006f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	615a      	str	r2, [r3, #20]
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40014400 	.word	0x40014400

08006fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f023 0302 	bic.w	r3, r3, #2
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a24      	ldr	r2, [pc, #144]	; (8007098 <TIM_OC1_SetConfig+0xec>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_OC1_SetConfig+0x70>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a23      	ldr	r2, [pc, #140]	; (800709c <TIM_OC1_SetConfig+0xf0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC1_SetConfig+0x70>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a22      	ldr	r2, [pc, #136]	; (80070a0 <TIM_OC1_SetConfig+0xf4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d10c      	bne.n	8007036 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0308 	bic.w	r3, r3, #8
 8007022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a17      	ldr	r2, [pc, #92]	; (8007098 <TIM_OC1_SetConfig+0xec>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d007      	beq.n	800704e <TIM_OC1_SetConfig+0xa2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <TIM_OC1_SetConfig+0xf0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d003      	beq.n	800704e <TIM_OC1_SetConfig+0xa2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <TIM_OC1_SetConfig+0xf4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d111      	bne.n	8007072 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800705c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	621a      	str	r2, [r3, #32]
}
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400

080070a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0210 	bic.w	r2, r3, #16
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0320 	bic.w	r3, r3, #32
 80070f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a22      	ldr	r2, [pc, #136]	; (800718c <TIM_OC2_SetConfig+0xe8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10d      	bne.n	8007124 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a19      	ldr	r2, [pc, #100]	; (800718c <TIM_OC2_SetConfig+0xe8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC2_SetConfig+0x98>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_OC2_SetConfig+0xec>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC2_SetConfig+0x98>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <TIM_OC2_SetConfig+0xf0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d113      	bne.n	8007164 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400

08007198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0303 	bic.w	r3, r3, #3
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <TIM_OC3_SetConfig+0xe4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d10d      	bne.n	8007216 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <TIM_OC3_SetConfig+0xe4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_OC3_SetConfig+0x96>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a17      	ldr	r2, [pc, #92]	; (8007280 <TIM_OC3_SetConfig+0xe8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC3_SetConfig+0x96>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <TIM_OC3_SetConfig+0xec>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d113      	bne.n	8007256 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800723c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40014000 	.word	0x40014000
 8007284:	40014400 	.word	0x40014400

08007288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <TIM_OC4_SetConfig+0xb0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d007      	beq.n	80072fc <TIM_OC4_SetConfig+0x74>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a13      	ldr	r2, [pc, #76]	; (800733c <TIM_OC4_SetConfig+0xb4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d003      	beq.n	80072fc <TIM_OC4_SetConfig+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a12      	ldr	r2, [pc, #72]	; (8007340 <TIM_OC4_SetConfig+0xb8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d109      	bne.n	8007310 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	019b      	lsls	r3, r3, #6
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400

08007344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <TIM_OC5_SetConfig+0xa4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <TIM_OC5_SetConfig+0x6a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a12      	ldr	r2, [pc, #72]	; (80073ec <TIM_OC5_SetConfig+0xa8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_OC5_SetConfig+0x6a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <TIM_OC5_SetConfig+0xac>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d109      	bne.n	80073c2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	621a      	str	r2, [r3, #32]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40012c00 	.word	0x40012c00
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40014400 	.word	0x40014400

080073f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800743a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	051b      	lsls	r3, r3, #20
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a14      	ldr	r2, [pc, #80]	; (800749c <TIM_OC6_SetConfig+0xa8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_OC6_SetConfig+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <TIM_OC6_SetConfig+0xac>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_OC6_SetConfig+0x6c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a12      	ldr	r2, [pc, #72]	; (80074a4 <TIM_OC6_SetConfig+0xb0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d109      	bne.n	8007474 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400

080074a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f023 030a 	bic.w	r3, r3, #10
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0210 	bic.w	r2, r3, #16
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	f043 0307 	orr.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	021a      	lsls	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2201      	movs	r2, #1
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800763c:	2302      	movs	r3, #2
 800763e:	e04f      	b.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a21      	ldr	r2, [pc, #132]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d108      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007670:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a14      	ldr	r2, [pc, #80]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d009      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a8:	d004      	beq.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d10c      	bne.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40014000 	.word	0x40014000

080076f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800770c:	2302      	movs	r3, #2
 800770e:	e060      	b.n	80077d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a14      	ldr	r2, [pc, #80]	; (80077e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d115      	bne.n	80077c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	051b      	lsls	r3, r3, #20
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40012c00 	.word	0x40012c00

080077e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e040      	b.n	8007878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f873 	bl	80078f2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2224      	movs	r2, #36	; 0x24
 8007810:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f87a 	bl	800791c <UART_SetConfig>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e022      	b.n	8007878 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fac8 	bl	8007dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800784e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800785e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb4f 	bl	8007f14 <UART_CheckIdleState>
 8007876:	4603      	mov	r3, r0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e02b      	b.n	80078ea <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2224      	movs	r2, #36	; 0x24
 8007896:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2200      	movs	r2, #0
 80078be:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f820 	bl	8007906 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800791c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007920:	b08a      	sub	sp, #40	; 0x28
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	431a      	orrs	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	431a      	orrs	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4313      	orrs	r3, r2
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b9e      	ldr	r3, [pc, #632]	; (8007bc4 <UART_SetConfig+0x2a8>)
 800794c:	4013      	ands	r3, r2
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007954:	430b      	orrs	r3, r1
 8007956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a93      	ldr	r2, [pc, #588]	; (8007bc8 <UART_SetConfig+0x2ac>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007984:	4313      	orrs	r3, r2
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007998:	430a      	orrs	r2, r1
 800799a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a8a      	ldr	r2, [pc, #552]	; (8007bcc <UART_SetConfig+0x2b0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d126      	bne.n	80079f4 <UART_SetConfig+0xd8>
 80079a6:	4b8a      	ldr	r3, [pc, #552]	; (8007bd0 <UART_SetConfig+0x2b4>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d81b      	bhi.n	80079ec <UART_SetConfig+0xd0>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0xa0>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079dd 	.word	0x080079dd
 80079c4:	080079d5 	.word	0x080079d5
 80079c8:	080079e5 	.word	0x080079e5
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079d2:	e0ab      	b.n	8007b2c <UART_SetConfig+0x210>
 80079d4:	2302      	movs	r3, #2
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079da:	e0a7      	b.n	8007b2c <UART_SetConfig+0x210>
 80079dc:	2304      	movs	r3, #4
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e2:	e0a3      	b.n	8007b2c <UART_SetConfig+0x210>
 80079e4:	2308      	movs	r3, #8
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ea:	e09f      	b.n	8007b2c <UART_SetConfig+0x210>
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f2:	e09b      	b.n	8007b2c <UART_SetConfig+0x210>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a76      	ldr	r2, [pc, #472]	; (8007bd4 <UART_SetConfig+0x2b8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d138      	bne.n	8007a70 <UART_SetConfig+0x154>
 80079fe:	4b74      	ldr	r3, [pc, #464]	; (8007bd0 <UART_SetConfig+0x2b4>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b0c      	cmp	r3, #12
 8007a0a:	d82d      	bhi.n	8007a68 <UART_SetConfig+0x14c>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0xf8>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a49 	.word	0x08007a49
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a69 	.word	0x08007a69
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007a69 	.word	0x08007a69
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a69 	.word	0x08007a69
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a69 	.word	0x08007a69
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	08007a69 	.word	0x08007a69
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4e:	e06d      	b.n	8007b2c <UART_SetConfig+0x210>
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a56:	e069      	b.n	8007b2c <UART_SetConfig+0x210>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5e:	e065      	b.n	8007b2c <UART_SetConfig+0x210>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a66:	e061      	b.n	8007b2c <UART_SetConfig+0x210>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	e05d      	b.n	8007b2c <UART_SetConfig+0x210>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a58      	ldr	r2, [pc, #352]	; (8007bd8 <UART_SetConfig+0x2bc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d125      	bne.n	8007ac6 <UART_SetConfig+0x1aa>
 8007a7a:	4b55      	ldr	r3, [pc, #340]	; (8007bd0 <UART_SetConfig+0x2b4>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a84:	2b30      	cmp	r3, #48	; 0x30
 8007a86:	d016      	beq.n	8007ab6 <UART_SetConfig+0x19a>
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d818      	bhi.n	8007abe <UART_SetConfig+0x1a2>
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d00a      	beq.n	8007aa6 <UART_SetConfig+0x18a>
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d814      	bhi.n	8007abe <UART_SetConfig+0x1a2>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <UART_SetConfig+0x182>
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d008      	beq.n	8007aae <UART_SetConfig+0x192>
 8007a9c:	e00f      	b.n	8007abe <UART_SetConfig+0x1a2>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa4:	e042      	b.n	8007b2c <UART_SetConfig+0x210>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aac:	e03e      	b.n	8007b2c <UART_SetConfig+0x210>
 8007aae:	2304      	movs	r3, #4
 8007ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab4:	e03a      	b.n	8007b2c <UART_SetConfig+0x210>
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abc:	e036      	b.n	8007b2c <UART_SetConfig+0x210>
 8007abe:	2310      	movs	r3, #16
 8007ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac4:	e032      	b.n	8007b2c <UART_SetConfig+0x210>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3f      	ldr	r2, [pc, #252]	; (8007bc8 <UART_SetConfig+0x2ac>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d12a      	bne.n	8007b26 <UART_SetConfig+0x20a>
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <UART_SetConfig+0x2b4>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ade:	d01a      	beq.n	8007b16 <UART_SetConfig+0x1fa>
 8007ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae4:	d81b      	bhi.n	8007b1e <UART_SetConfig+0x202>
 8007ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aea:	d00c      	beq.n	8007b06 <UART_SetConfig+0x1ea>
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d815      	bhi.n	8007b1e <UART_SetConfig+0x202>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <UART_SetConfig+0x1e2>
 8007af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007afa:	d008      	beq.n	8007b0e <UART_SetConfig+0x1f2>
 8007afc:	e00f      	b.n	8007b1e <UART_SetConfig+0x202>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b04:	e012      	b.n	8007b2c <UART_SetConfig+0x210>
 8007b06:	2302      	movs	r3, #2
 8007b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0c:	e00e      	b.n	8007b2c <UART_SetConfig+0x210>
 8007b0e:	2304      	movs	r3, #4
 8007b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b14:	e00a      	b.n	8007b2c <UART_SetConfig+0x210>
 8007b16:	2308      	movs	r3, #8
 8007b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1c:	e006      	b.n	8007b2c <UART_SetConfig+0x210>
 8007b1e:	2310      	movs	r3, #16
 8007b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b24:	e002      	b.n	8007b2c <UART_SetConfig+0x210>
 8007b26:	2310      	movs	r3, #16
 8007b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <UART_SetConfig+0x2ac>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f040 808a 	bne.w	8007c4c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d824      	bhi.n	8007b8a <UART_SetConfig+0x26e>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x22c>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b8b 	.word	0x08007b8b
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b8b 	.word	0x08007b8b
 8007b58:	08007b7b 	.word	0x08007b7b
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b8b 	.word	0x08007b8b
 8007b64:	08007b8b 	.word	0x08007b8b
 8007b68:	08007b83 	.word	0x08007b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fd fe14 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8007b70:	61f8      	str	r0, [r7, #28]
        break;
 8007b72:	e010      	b.n	8007b96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b74:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <UART_SetConfig+0x2c0>)
 8007b76:	61fb      	str	r3, [r7, #28]
        break;
 8007b78:	e00d      	b.n	8007b96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7a:	f7fd fd75 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007b7e:	61f8      	str	r0, [r7, #28]
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	61fb      	str	r3, [r7, #28]
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8109 	beq.w	8007db0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d305      	bcc.n	8007bba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d912      	bls.n	8007be0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bc0:	e0f6      	b.n	8007db0 <UART_SetConfig+0x494>
 8007bc2:	bf00      	nop
 8007bc4:	efff69f3 	.word	0xefff69f3
 8007bc8:	40008000 	.word	0x40008000
 8007bcc:	40013800 	.word	0x40013800
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	40004400 	.word	0x40004400
 8007bd8:	40004800 	.word	0x40004800
 8007bdc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2200      	movs	r2, #0
 8007be4:	461c      	mov	r4, r3
 8007be6:	4615      	mov	r5, r2
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	022b      	lsls	r3, r5, #8
 8007bf2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007bf6:	0222      	lsls	r2, r4, #8
 8007bf8:	68f9      	ldr	r1, [r7, #12]
 8007bfa:	6849      	ldr	r1, [r1, #4]
 8007bfc:	0849      	lsrs	r1, r1, #1
 8007bfe:	2000      	movs	r0, #0
 8007c00:	4688      	mov	r8, r1
 8007c02:	4681      	mov	r9, r0
 8007c04:	eb12 0a08 	adds.w	sl, r2, r8
 8007c08:	eb43 0b09 	adc.w	fp, r3, r9
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fb27 	bl	8000270 <__aeabi_uldivmod>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4613      	mov	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c30:	d308      	bcc.n	8007c44 <UART_SetConfig+0x328>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c38:	d204      	bcs.n	8007c44 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	e0b5      	b.n	8007db0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c4a:	e0b1      	b.n	8007db0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c54:	d15d      	bne.n	8007d12 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d827      	bhi.n	8007cae <UART_SetConfig+0x392>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <UART_SetConfig+0x348>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007c91 	.word	0x08007c91
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	08007caf 	.word	0x08007caf
 8007c74:	08007c9f 	.word	0x08007c9f
 8007c78:	08007caf 	.word	0x08007caf
 8007c7c:	08007caf 	.word	0x08007caf
 8007c80:	08007caf 	.word	0x08007caf
 8007c84:	08007ca7 	.word	0x08007ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c88:	f7fd fd86 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8007c8c:	61f8      	str	r0, [r7, #28]
        break;
 8007c8e:	e014      	b.n	8007cba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c90:	f7fd fd98 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 8007c94:	61f8      	str	r0, [r7, #28]
        break;
 8007c96:	e010      	b.n	8007cba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c98:	4b4c      	ldr	r3, [pc, #304]	; (8007dcc <UART_SetConfig+0x4b0>)
 8007c9a:	61fb      	str	r3, [r7, #28]
        break;
 8007c9c:	e00d      	b.n	8007cba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9e:	f7fd fce3 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007ca2:	61f8      	str	r0, [r7, #28]
        break;
 8007ca4:	e009      	b.n	8007cba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007caa:	61fb      	str	r3, [r7, #28]
        break;
 8007cac:	e005      	b.n	8007cba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d077      	beq.n	8007db0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	005a      	lsls	r2, r3, #1
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b0f      	cmp	r3, #15
 8007cda:	d916      	bls.n	8007d0a <UART_SetConfig+0x3ee>
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d212      	bcs.n	8007d0a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f023 030f 	bic.w	r3, r3, #15
 8007cec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	8afb      	ldrh	r3, [r7, #22]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	8afa      	ldrh	r2, [r7, #22]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e052      	b.n	8007db0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d10:	e04e      	b.n	8007db0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d827      	bhi.n	8007d6a <UART_SetConfig+0x44e>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x404>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fd28 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61f8      	str	r0, [r7, #28]
        break;
 8007d4a:	e014      	b.n	8007d76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fd fd3a 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 8007d50:	61f8      	str	r0, [r7, #28]
        break;
 8007d52:	e010      	b.n	8007d76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b1d      	ldr	r3, [pc, #116]	; (8007dcc <UART_SetConfig+0x4b0>)
 8007d56:	61fb      	str	r3, [r7, #28]
        break;
 8007d58:	e00d      	b.n	8007d76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fd fc85 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007d5e:	61f8      	str	r0, [r7, #28]
        break;
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	61fb      	str	r3, [r7, #28]
        break;
 8007d68:	e005      	b.n	8007d76 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d74:	bf00      	nop
    }

    if (pclk != 0U)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d019      	beq.n	8007db0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	085a      	lsrs	r2, r3, #1
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	d909      	bls.n	8007daa <UART_SetConfig+0x48e>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d205      	bcs.n	8007daa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	e002      	b.n	8007db0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007dbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3728      	adds	r7, #40	; 0x28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dca:	bf00      	nop
 8007dcc:	00f42400 	.word	0x00f42400

08007dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01a      	beq.n	8007ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ece:	d10a      	bne.n	8007ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
  }
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f24:	f7fb ffe6 	bl	8003ef4 <HAL_GetTick>
 8007f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d10e      	bne.n	8007f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f82d 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e023      	b.n	8007f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d10e      	bne.n	8007f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f817 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e00d      	b.n	8007f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b09c      	sub	sp, #112	; 0x70
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb6:	e0a5      	b.n	8008104 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fbe:	f000 80a1 	beq.w	8008104 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc2:	f7fb ff97 	bl	8003ef4 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d302      	bcc.n	8007fd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d13e      	bne.n	8008056 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fec:	667b      	str	r3, [r7, #100]	; 0x64
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ff8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3308      	adds	r3, #8
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	663b      	str	r3, [r7, #96]	; 0x60
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800802a:	64ba      	str	r2, [r7, #72]	; 0x48
 800802c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e067      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d04f      	beq.n	8008104 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008072:	d147      	bne.n	8008104 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800807c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
 800809e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3308      	adds	r3, #8
 80080b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	613b      	str	r3, [r7, #16]
   return(result);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080d0:	623a      	str	r2, [r7, #32]
 80080d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	69f9      	ldr	r1, [r7, #28]
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e010      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69da      	ldr	r2, [r3, #28]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4013      	ands	r3, r2
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	429a      	cmp	r2, r3
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	429a      	cmp	r2, r3
 8008120:	f43f af4a 	beq.w	8007fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3770      	adds	r7, #112	; 0x70
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8008134:	4b10      	ldr	r3, [pc, #64]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008136:	4a11      	ldr	r2, [pc, #68]	; (800817c <board_init_common_rtc_init+0x4c>)
 8008138:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800813a:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <board_init_common_rtc_init+0x48>)
 800813c:	2200      	movs	r2, #0
 800813e:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008140:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008142:	227f      	movs	r2, #127	; 0x7f
 8008144:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008148:	22ff      	movs	r2, #255	; 0xff
 800814a:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <board_init_common_rtc_init+0x48>)
 800814e:	2200      	movs	r2, #0
 8008150:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008154:	2200      	movs	r2, #0
 8008156:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <board_init_common_rtc_init+0x48>)
 800815a:	2200      	movs	r2, #0
 800815c:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008160:	2200      	movs	r2, #0
 8008162:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8008164:	4804      	ldr	r0, [pc, #16]	; (8008178 <board_init_common_rtc_init+0x48>)
 8008166:	f7fd fead 	bl	8005ec4 <HAL_RTC_Init>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <board_init_common_rtc_init+0x44>
 8008170:	f000 fa4b 	bl	800860a <Error_Handler>
}
 8008174:	bf00      	nop
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20001e88 	.word	0x20001e88
 800817c:	40002800 	.word	0x40002800

08008180 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b0ae      	sub	sp, #184	; 0xb8
 8008184:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008186:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800818a:	2244      	movs	r2, #68	; 0x44
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f8dc 	bl	800934c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008194:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	609a      	str	r2, [r3, #8]
 80081a0:	60da      	str	r2, [r3, #12]
 80081a2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081a4:	1d3b      	adds	r3, r7, #4
 80081a6:	225c      	movs	r2, #92	; 0x5c
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 f8ce 	bl	800934c <memset>

    HAL_PWR_EnableBkUpAccess();
 80081b0:	f7fc fc62 	bl	8004a78 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80081b4:	4b25      	ldr	r3, [pc, #148]	; (800824c <SystemClock_Config+0xcc>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	4a24      	ldr	r2, [pc, #144]	; (800824c <SystemClock_Config+0xcc>)
 80081bc:	f023 0318 	bic.w	r3, r3, #24
 80081c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80081c4:	2305      	movs	r3, #5
 80081c6:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081cc:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80081ce:	2301      	movs	r3, #1
 80081d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 80081d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc fd2f 	bl	8004c40 <HAL_RCC_OscConfig>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d000      	beq.n	80081ea <SystemClock_Config+0x6a>
 80081e8:	e7fe      	b.n	80081e8 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081ea:	230f      	movs	r3, #15
 80081ec:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80081ee:	2302      	movs	r3, #2
 80081f0:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081f2:	2300      	movs	r3, #0
 80081f4:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80081f6:	2300      	movs	r3, #0
 80081f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081fa:	2300      	movs	r3, #0
 80081fc:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 80081fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f7fd f92f 	bl	8005468 <HAL_RCC_ClockConfig>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d000      	beq.n	8008212 <SystemClock_Config+0x92>
 8008210:	e7fe      	b.n	8008210 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008216:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800821c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd fb45 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <SystemClock_Config+0xb0>
 800822c:	f000 f9ed 	bl	800860a <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008230:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008234:	f7fc fcae 	bl	8004b94 <HAL_PWREx_ControlVoltageScaling>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <SystemClock_Config+0xc2>
 800823e:	f000 f9e4 	bl	800860a <Error_Handler>
}
 8008242:	bf00      	nop
 8008244:	37b8      	adds	r7, #184	; 0xb8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40021000 	.word	0x40021000

08008250 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b09e      	sub	sp, #120	; 0x78
 8008254:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008256:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	609a      	str	r2, [r3, #8]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	605a      	str	r2, [r3, #4]
 8008270:	609a      	str	r2, [r3, #8]
 8008272:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	60da      	str	r2, [r3, #12]
 800828e:	611a      	str	r2, [r3, #16]
 8008290:	615a      	str	r2, [r3, #20]
 8008292:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008294:	463b      	mov	r3, r7
 8008296:	222c      	movs	r2, #44	; 0x2c
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f001 f856 	bl	800934c <memset>
    g_tim1_handle.Instance = TIM1;
 80082a0:	4b5c      	ldr	r3, [pc, #368]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082a2:	4a5d      	ldr	r2, [pc, #372]	; (8008418 <board_init_common_timer_init+0x1c8>)
 80082a4:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 80082a6:	4b5b      	ldr	r3, [pc, #364]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082ac:	4b59      	ldr	r3, [pc, #356]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 80082b2:	4b58      	ldr	r3, [pc, #352]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082b4:	223b      	movs	r2, #59	; 0x3b
 80082b6:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082b8:	4b56      	ldr	r3, [pc, #344]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 80082be:	4b55      	ldr	r3, [pc, #340]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082c4:	4b53      	ldr	r3, [pc, #332]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80082ca:	4852      	ldr	r0, [pc, #328]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082cc:	f7fd ffb9 	bl	8006242 <HAL_TIM_Base_Init>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <board_init_common_timer_init+0x8a>
 80082d6:	f000 f998 	bl	800860a <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 80082e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80082e4:	4619      	mov	r1, r3
 80082e6:	484b      	ldr	r0, [pc, #300]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082e8:	f7fe fc4e 	bl	8006b88 <HAL_TIM_ConfigClockSource>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <board_init_common_timer_init+0xa6>
 80082f2:	f000 f98a 	bl	800860a <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80082f6:	4847      	ldr	r0, [pc, #284]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80082f8:	f7fd fffa 	bl	80062f0 <HAL_TIM_PWM_Init>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <board_init_common_timer_init+0xb6>
 8008302:	f000 f982 	bl	800860a <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008306:	2300      	movs	r3, #0
 8008308:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800830a:	2300      	movs	r3, #0
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800830e:	2300      	movs	r3, #0
 8008310:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008316:	4619      	mov	r1, r3
 8008318:	483e      	ldr	r0, [pc, #248]	; (8008414 <board_init_common_timer_init+0x1c4>)
 800831a:	f7ff f985 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <board_init_common_timer_init+0xd8>
 8008324:	f000 f971 	bl	800860a <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008328:	2360      	movs	r3, #96	; 0x60
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008330:	2300      	movs	r3, #0
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008334:	2300      	movs	r3, #0
 8008336:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008338:	2300      	movs	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800833c:	2300      	movs	r3, #0
 800833e:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008340:	2300      	movs	r3, #0
 8008342:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008348:	2200      	movs	r2, #0
 800834a:	4619      	mov	r1, r3
 800834c:	4831      	ldr	r0, [pc, #196]	; (8008414 <board_init_common_timer_init+0x1c4>)
 800834e:	f7fe fb07 	bl	8006960 <HAL_TIM_PWM_ConfigChannel>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <board_init_common_timer_init+0x10c>
 8008358:	f000 f957 	bl	800860a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800835c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008360:	2204      	movs	r2, #4
 8008362:	4619      	mov	r1, r3
 8008364:	482b      	ldr	r0, [pc, #172]	; (8008414 <board_init_common_timer_init+0x1c4>)
 8008366:	f7fe fafb 	bl	8006960 <HAL_TIM_PWM_ConfigChannel>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <board_init_common_timer_init+0x124>
 8008370:	f000 f94b 	bl	800860a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8008374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008378:	2208      	movs	r2, #8
 800837a:	4619      	mov	r1, r3
 800837c:	4825      	ldr	r0, [pc, #148]	; (8008414 <board_init_common_timer_init+0x1c4>)
 800837e:	f7fe faef 	bl	8006960 <HAL_TIM_PWM_ConfigChannel>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <board_init_common_timer_init+0x13c>
 8008388:	f000 f93f 	bl	800860a <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800838c:	2300      	movs	r3, #0
 800838e:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008390:	2300      	movs	r3, #0
 8008392:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008394:	2300      	movs	r3, #0
 8008396:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80083a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083a4:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80083ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083b2:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 80083bc:	463b      	mov	r3, r7
 80083be:	4619      	mov	r1, r3
 80083c0:	4814      	ldr	r0, [pc, #80]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80083c2:	f7ff f997 	bl	80076f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <board_init_common_timer_init+0x180>
 80083cc:	f000 f91d 	bl	800860a <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 80083d0:	2100      	movs	r1, #0
 80083d2:	4810      	ldr	r0, [pc, #64]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80083d4:	f7fe f9dc 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 80083d8:	2104      	movs	r1, #4
 80083da:	480e      	ldr	r0, [pc, #56]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80083dc:	f7fe f9d8 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 80083e0:	2108      	movs	r1, #8
 80083e2:	480c      	ldr	r0, [pc, #48]	; (8008414 <board_init_common_timer_init+0x1c4>)
 80083e4:	f7fe f9d4 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 80083e8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80083ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ee:	2302      	movs	r3, #2
 80083f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f6:	2300      	movs	r3, #0
 80083f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008402:	4619      	mov	r1, r3
 8008404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008408:	f7fc f98c 	bl	8004724 <HAL_GPIO_Init>
}
 800840c:	bf00      	nop
 800840e:	3778      	adds	r7, #120	; 0x78
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20001eac 	.word	0x20001eac
 8008418:	40012c00 	.word	0x40012c00

0800841c <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008420:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8008422:	2206      	movs	r2, #6
 8008424:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008426:	4b2f      	ldr	r3, [pc, #188]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8008428:	2208      	movs	r2, #8
 800842a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 800842e:	2217      	movs	r2, #23
 8008430:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008432:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8008434:	2228      	movs	r2, #40	; 0x28
 8008436:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	2118      	movs	r1, #24
 800843c:	2006      	movs	r0, #6
 800843e:	f7fb feac 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008442:	2006      	movs	r0, #6
 8008444:	f7fb fec5 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8008448:	2200      	movs	r2, #0
 800844a:	2118      	movs	r1, #24
 800844c:	2008      	movs	r0, #8
 800844e:	f7fb fea4 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008452:	2008      	movs	r0, #8
 8008454:	f7fb febd 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8008458:	2200      	movs	r2, #0
 800845a:	2118      	movs	r1, #24
 800845c:	2017      	movs	r0, #23
 800845e:	f7fb fe9c 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008462:	2017      	movs	r0, #23
 8008464:	f7fb feb5 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8008468:	2200      	movs	r2, #0
 800846a:	2118      	movs	r1, #24
 800846c:	2028      	movs	r0, #40	; 0x28
 800846e:	f7fb fe94 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008472:	2028      	movs	r0, #40	; 0x28
 8008474:	f7fb fead 	bl	80041d2 <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008478:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 800847a:	2206      	movs	r2, #6
 800847c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800847e:	4b19      	ldr	r3, [pc, #100]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8008480:	2208      	movs	r2, #8
 8008482:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008484:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8008486:	2217      	movs	r2, #23
 8008488:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <board_init_common_nvic_setup_interrupts+0xc8>)
 800848c:	2228      	movs	r2, #40	; 0x28
 800848e:	615a      	str	r2, [r3, #20]

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	200c      	movs	r0, #12
 8008496:	f7fb fe80 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800849a:	200c      	movs	r0, #12
 800849c:	f7fb fe99 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	200d      	movs	r0, #13
 80084a6:	f7fb fe78 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80084aa:	200d      	movs	r0, #13
 80084ac:	f7fb fe91 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	200f      	movs	r0, #15
 80084b6:	f7fb fe70 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80084ba:	200f      	movs	r0, #15
 80084bc:	f7fb fe89 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	2010      	movs	r0, #16
 80084c6:	f7fb fe68 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80084ca:	2010      	movs	r0, #16
 80084cc:	f7fb fe81 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	2011      	movs	r0, #17
 80084d6:	f7fb fe60 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80084da:	2011      	movs	r0, #17
 80084dc:	f7fb fe79 	bl	80041d2 <HAL_NVIC_EnableIRQ>
}
 80084e0:	bf00      	nop
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40010400 	.word	0x40010400

080084e8 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ee:	1d3b      	adds	r3, r7, #4
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	60da      	str	r2, [r3, #12]
 80084fa:	611a      	str	r2, [r3, #16]

    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 80084fc:	2305      	movs	r3, #5
 80084fe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008500:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008504:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008506:	2301      	movs	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008512:	f7fc f907 	bl	8004724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8008516:	f242 0320 	movw	r3, #8224	; 0x2020
 800851a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800851c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008520:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008522:	2301      	movs	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8008526:	1d3b      	adds	r3, r7, #4
 8008528:	4619      	mov	r1, r3
 800852a:	4804      	ldr	r0, [pc, #16]	; (800853c <board_init_common_setup_wakeups+0x54>)
 800852c:	f7fc f8fa 	bl	8004724 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8008530:	f7ff ff74 	bl	800841c <board_init_common_nvic_setup_interrupts>

}
 8008534:	bf00      	nop
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	48000800 	.word	0x48000800

08008540 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008546:	4b21      	ldr	r3, [pc, #132]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	4a20      	ldr	r2, [pc, #128]	; (80085cc <board_init_port_wakeup+0x8c>)
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008552:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008562:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800856a:	4b18      	ldr	r3, [pc, #96]	; (80085cc <board_init_port_wakeup+0x8c>)
 800856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	4a14      	ldr	r2, [pc, #80]	; (80085cc <board_init_port_wakeup+0x8c>)
 800857c:	f043 0304 	orr.w	r3, r3, #4
 8008580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008582:	4b12      	ldr	r3, [pc, #72]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008592:	4a0e      	ldr	r2, [pc, #56]	; (80085cc <board_init_port_wakeup+0x8c>)
 8008594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800859a:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <board_init_port_wakeup+0x8c>)
 800859c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a2:	60bb      	str	r3, [r7, #8]
 80085a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80085a6:	4b09      	ldr	r3, [pc, #36]	; (80085cc <board_init_port_wakeup+0x8c>)
 80085a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <board_init_port_wakeup+0x8c>)
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	6493      	str	r3, [r2, #72]	; 0x48
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <board_init_port_wakeup+0x8c>)
 80085b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	607b      	str	r3, [r7, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]

}
 80085be:	bf00      	nop
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	40021000 	.word	0x40021000

080085d0 <board_init_common_board_init>:

uint8_t new_buf[10] = {32,33,34,35};
void board_init_common_board_init(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
    srand(time(0));
 80085d4:	2000      	movs	r0, #0
 80085d6:	f000 ffdf 	bl	8009598 <time>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4613      	mov	r3, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 ff9b 	bl	800951c <srand>
    HAL_Init();
 80085e6:	f7fb fc31 	bl	8003e4c <HAL_Init>
    SystemClock_Config();
 80085ea:	f7ff fdc9 	bl	8008180 <SystemClock_Config>

    board_init_port_wakeup();
 80085ee:	f7ff ffa7 	bl	8008540 <board_init_port_wakeup>

    board_init_common_setup_wakeups();
 80085f2:	f7ff ff79 	bl	80084e8 <board_init_common_setup_wakeups>
    board_init_specific();
 80085f6:	f000 f8a5 	bl	8008744 <board_init_specific>

    board_init_common_timer_init();
 80085fa:	f7ff fe29 	bl	8008250 <board_init_common_timer_init>

    ws2812b_init();
 80085fe:	f7f8 fa45 	bl	8000a8c <ws2812b_init>

    //animate_led_init(); // not yet defined..

    board_init_common_rtc_init();
 8008602:	f7ff fd95 	bl	8008130 <board_init_common_rtc_init>
}
 8008606:	bf00      	nop
 8008608:	bd80      	pop	{r7, pc}

0800860a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800860a:	b480      	push	{r7}
 800860c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800860e:	b672      	cpsid	i
}
 8008610:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008612:	e7fe      	b.n	8008612 <Error_Handler+0x8>

08008614 <spi_access_setup>:
    .Init.Mode              = SPI_MODE_MASTER
};


void spi_access_setup(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b09e      	sub	sp, #120	; 0x78
 8008618:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800861a:	f107 031c 	add.w	r3, r7, #28
 800861e:	225c      	movs	r2, #92	; 0x5c
 8008620:	2100      	movs	r1, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fe92 	bl	800934c <memset>
//        while(1);
//      //Error_Handler();
//    }
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin         = PIN_SPI1_SCK | PIN_SPI1_CIPO | PIN_SPI1_COPI;
 8008628:	f641 0302 	movw	r3, #6146	; 0x1802
 800862c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800862e:	2302      	movs	r3, #2
 8008630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 8008632:	2302      	movs	r3, #2
 8008634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 8008636:	2303      	movs	r3, #3
 8008638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate   = GPIO_AF5_SPI1;
 800863a:	2305      	movs	r3, #5
 800863c:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	4619      	mov	r1, r3
 8008644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008648:	f7fc f86c 	bl	8004724 <HAL_GPIO_Init>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <spi_access_setup+0x60>)
 800864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <spi_access_setup+0x60>)
 8008652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008656:	6613      	str	r3, [r2, #96]	; 0x60
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <spi_access_setup+0x60>)
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
    if(HAL_SPI_Init(&gh_disp_spi) != HAL_OK)
 8008664:	4804      	ldr	r0, [pc, #16]	; (8008678 <spi_access_setup+0x64>)
 8008666:	f7fd fd3f 	bl	80060e8 <HAL_SPI_Init>
    {
        /* Initialization Error */
        //Error_Handler();
    }
}
 800866a:	bf00      	nop
 800866c:	3778      	adds	r7, #120	; 0x78
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40021000 	.word	0x40021000
 8008678:	20000018 	.word	0x20000018

0800867c <uart_access_setup>:
    .AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR
};


void uart_access_setup(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b09e      	sub	sp, #120	; 0x78
 8008680:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	225c      	movs	r2, #92	; 0x5c
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fe5e 	bl	800934c <memset>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008690:	2320      	movs	r3, #32
 8008692:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8008694:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008698:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd f906 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d000      	beq.n	80086ac <uart_access_setup+0x30>
    {
        while(1);
 80086aa:	e7fe      	b.n	80086aa <uart_access_setup+0x2e>
      //Error_Handler();
    }
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80086ac:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <uart_access_setup+0xac>)
 80086ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b0:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <uart_access_setup+0xac>)
 80086b2:	f043 0301 	orr.w	r3, r3, #1
 80086b6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80086b8:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <uart_access_setup+0xac>)
 80086ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <uart_access_setup+0xac>)
 80086c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c8:	4a17      	ldr	r2, [pc, #92]	; (8008728 <uart_access_setup+0xac>)
 80086ca:	f043 0304 	orr.w	r3, r3, #4
 80086ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <uart_access_setup+0xac>)
 80086d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	603b      	str	r3, [r7, #0]
 80086da:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin       = PIN_XR_RX | PIN_XR_TX; //
 80086dc:	2303      	movs	r3, #3
 80086de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80086e0:	2302      	movs	r3, #2
 80086e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80086e8:	2300      	movs	r3, #0
 80086ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80086ec:	2308      	movs	r3, #8
 80086ee:	677b      	str	r3, [r7, #116]	; 0x74

    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80086f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80086f4:	4619      	mov	r1, r3
 80086f6:	480d      	ldr	r0, [pc, #52]	; (800872c <uart_access_setup+0xb0>)
 80086f8:	f7fc f814 	bl	8004724 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 1);
 80086fc:	2201      	movs	r2, #1
 80086fe:	2100      	movs	r1, #0
 8008700:	2046      	movs	r0, #70	; 0x46
 8008702:	f7fb fd4a 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8008706:	2046      	movs	r0, #70	; 0x46
 8008708:	f7fb fd63 	bl	80041d2 <HAL_NVIC_EnableIRQ>

    if(HAL_UART_DeInit(&gh_host_usart) != HAL_OK)
 800870c:	4808      	ldr	r0, [pc, #32]	; (8008730 <uart_access_setup+0xb4>)
 800870e:	f7ff f8b7 	bl	8007880 <HAL_UART_DeInit>
    {
        //Error_Handler();
    }
    if(HAL_UART_Init(&gh_host_usart) != HAL_OK)
 8008712:	4807      	ldr	r0, [pc, #28]	; (8008730 <uart_access_setup+0xb4>)
 8008714:	f7ff f866 	bl	80077e4 <HAL_UART_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d000      	beq.n	8008720 <uart_access_setup+0xa4>
    {
        while(1);
 800871e:	e7fe      	b.n	800871e <uart_access_setup+0xa2>
        //Error_Handler();
    }
}
 8008720:	bf00      	nop
 8008722:	3778      	adds	r7, #120	; 0x78
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40021000 	.word	0x40021000
 800872c:	48000800 	.word	0x48000800
 8008730:	2000007c 	.word	0x2000007c

08008734 <board_init_peripheral_setup>:
#if defined(BOARD_SPUD_GLO_V4)


#if defined(BOARD_SPUD_GLO_V4P2)
static void board_init_peripheral_setup(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
    uart_access_setup();
 8008738:	f7ff ffa0 	bl	800867c <uart_access_setup>
    spi_access_setup();
 800873c:	f7ff ff6a 	bl	8008614 <spi_access_setup>
}
 8008740:	bf00      	nop
 8008742:	bd80      	pop	{r7, pc}

08008744 <board_init_specific>:
#endif


void board_init_specific(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	609a      	str	r2, [r3, #8]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8008758:	2301      	movs	r3, #1
 800875a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800875c:	2301      	movs	r3, #1
 800875e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4837      	ldr	r0, [pc, #220]	; (8008848 <board_init_specific+0x104>)
 800876a:	f7fb ffdb 	bl	8004724 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 800876e:	2201      	movs	r2, #1
 8008770:	2101      	movs	r1, #1
 8008772:	4835      	ldr	r0, [pc, #212]	; (8008848 <board_init_specific+0x104>)
 8008774:	f7fc f950 	bl	8004a18 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8008778:	2380      	movs	r3, #128	; 0x80
 800877a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800877c:	2301      	movs	r3, #1
 800877e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8008784:	1d3b      	adds	r3, r7, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4830      	ldr	r0, [pc, #192]	; (800884c <board_init_specific+0x108>)
 800878a:	f7fb ffcb 	bl	8004724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800878e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008792:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008794:	2301      	movs	r3, #1
 8008796:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800879c:	1d3b      	adds	r3, r7, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	482a      	ldr	r0, [pc, #168]	; (800884c <board_init_specific+0x108>)
 80087a2:	f7fb ffbf 	bl	8004724 <HAL_GPIO_Init>

#if defined(BOARD_SPUD_GLO_V4P2)

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 80087a6:	23e0      	movs	r3, #224	; 0xe0
 80087a8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087aa:	2301      	movs	r3, #1
 80087ac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80087b2:	1d3b      	adds	r3, r7, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087ba:	f7fb ffb3 	bl	8004724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 80087be:	2301      	movs	r3, #1
 80087c0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087c2:	2301      	movs	r3, #1
 80087c4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	4619      	mov	r1, r3
 80087ce:	481e      	ldr	r0, [pc, #120]	; (8008848 <board_init_specific+0x104>)
 80087d0:	f7fb ffa8 	bl	8004724 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 80087d4:	2201      	movs	r2, #1
 80087d6:	2101      	movs	r1, #1
 80087d8:	481b      	ldr	r0, [pc, #108]	; (8008848 <board_init_specific+0x104>)
 80087da:	f7fc f91d 	bl	8004a18 <HAL_GPIO_WritePin>
    // setup XR_RX and XR_TX

    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 80087de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80087e2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80087ec:	1d3b      	adds	r3, r7, #4
 80087ee:	4619      	mov	r1, r3
 80087f0:	4815      	ldr	r0, [pc, #84]	; (8008848 <board_init_specific+0x104>)
 80087f2:	f7fb ff97 	bl	8004724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087fa:	2301      	movs	r3, #1
 80087fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	4619      	mov	r1, r3
 8008806:	4811      	ldr	r0, [pc, #68]	; (800884c <board_init_specific+0x108>)
 8008808:	f7fb ff8c 	bl	8004724 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800880c:	2200      	movs	r2, #0
 800880e:	2180      	movs	r1, #128	; 0x80
 8008810:	480e      	ldr	r0, [pc, #56]	; (800884c <board_init_specific+0x108>)
 8008812:	f7fc f901 	bl	8004a18 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8008816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800881c:	2301      	movs	r3, #1
 800881e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	4619      	mov	r1, r3
 8008828:	4808      	ldr	r0, [pc, #32]	; (800884c <board_init_specific+0x108>)
 800882a:	f7fb ff7b 	bl	8004724 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800882e:	2201      	movs	r2, #1
 8008830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008834:	4805      	ldr	r0, [pc, #20]	; (800884c <board_init_specific+0x108>)
 8008836:	f7fc f8ef 	bl	8004a18 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800883a:	f7ff ff7b 	bl	8008734 <board_init_peripheral_setup>
#else

#endif
}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	48000400 	.word	0x48000400
 800884c:	48000800 	.word	0x48000800

08008850 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008854:	4a0d      	ldr	r2, [pc, #52]	; (800888c <HAL_Set_DMA_Callbacks+0x3c>)
 8008856:	2100      	movs	r1, #0
 8008858:	480d      	ldr	r0, [pc, #52]	; (8008890 <HAL_Set_DMA_Callbacks+0x40>)
 800885a:	f7fb feeb 	bl	8004634 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800885e:	4a0b      	ldr	r2, [pc, #44]	; (800888c <HAL_Set_DMA_Callbacks+0x3c>)
 8008860:	2100      	movs	r1, #0
 8008862:	480c      	ldr	r0, [pc, #48]	; (8008894 <HAL_Set_DMA_Callbacks+0x44>)
 8008864:	f7fb fee6 	bl	8004634 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <HAL_Set_DMA_Callbacks+0x3c>)
 800886a:	2100      	movs	r1, #0
 800886c:	480a      	ldr	r0, [pc, #40]	; (8008898 <HAL_Set_DMA_Callbacks+0x48>)
 800886e:	f7fb fee1 	bl	8004634 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008872:	4a06      	ldr	r2, [pc, #24]	; (800888c <HAL_Set_DMA_Callbacks+0x3c>)
 8008874:	2100      	movs	r1, #0
 8008876:	4809      	ldr	r0, [pc, #36]	; (800889c <HAL_Set_DMA_Callbacks+0x4c>)
 8008878:	f7fb fedc 	bl	8004634 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800887c:	4a03      	ldr	r2, [pc, #12]	; (800888c <HAL_Set_DMA_Callbacks+0x3c>)
 800887e:	2100      	movs	r1, #0
 8008880:	4807      	ldr	r0, [pc, #28]	; (80088a0 <HAL_Set_DMA_Callbacks+0x50>)
 8008882:	f7fb fed7 	bl	8004634 <HAL_DMA_RegisterCallback>
}
 8008886:	bf00      	nop
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	08008e83 	.word	0x08008e83
 8008890:	20001d20 	.word	0x20001d20
 8008894:	20001d68 	.word	0x20001d68
 8008898:	20001db0 	.word	0x20001db0
 800889c:	20001df8 	.word	0x20001df8
 80088a0:	20001e40 	.word	0x20001e40

080088a4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088b4:	4b13      	ldr	r3, [pc, #76]	; (8008904 <HAL_MspInit+0x60>)
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	4a12      	ldr	r2, [pc, #72]	; (8008904 <HAL_MspInit+0x60>)
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	6613      	str	r3, [r2, #96]	; 0x60
 80088c0:	4b10      	ldr	r3, [pc, #64]	; (8008904 <HAL_MspInit+0x60>)
 80088c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	607b      	str	r3, [r7, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <HAL_MspInit+0x60>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <HAL_MspInit+0x60>)
 80088d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d6:	6593      	str	r3, [r2, #88]	; 0x58
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <HAL_MspInit+0x60>)
 80088da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e0:	603b      	str	r3, [r7, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fc f8d1 	bl	8004a98 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80088f6:	f7fc f92f 	bl	8004b58 <HAL_PWR_EnablePVD>
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40021000 	.word	0x40021000

08008908 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a08      	ldr	r2, [pc, #32]	; (8008938 <HAL_RTC_MspInit+0x30>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d107      	bne.n	800892a <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <HAL_RTC_MspInit+0x34>)
 800891c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <HAL_RTC_MspInit+0x34>)
 8008922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40002800 	.word	0x40002800
 800893c:	40021000 	.word	0x40021000

08008940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6e      	ldr	r2, [pc, #440]	; (8008b08 <HAL_TIM_Base_MspInit+0x1c8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	f040 8091 	bne.w	8008a76 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008954:	4b6d      	ldr	r3, [pc, #436]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 8008956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008958:	4a6c      	ldr	r2, [pc, #432]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 800895a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800895e:	6613      	str	r3, [r2, #96]	; 0x60
 8008960:	4b6a      	ldr	r3, [pc, #424]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 8008962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800896c:	4b68      	ldr	r3, [pc, #416]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 800896e:	4a69      	ldr	r2, [pc, #420]	; (8008b14 <HAL_TIM_Base_MspInit+0x1d4>)
 8008970:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8008972:	4b67      	ldr	r3, [pc, #412]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 8008974:	2207      	movs	r2, #7
 8008976:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008978:	4b65      	ldr	r3, [pc, #404]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 800897a:	2210      	movs	r2, #16
 800897c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800897e:	4b64      	ldr	r3, [pc, #400]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 8008980:	2200      	movs	r2, #0
 8008982:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008984:	4b62      	ldr	r3, [pc, #392]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 8008986:	2280      	movs	r2, #128	; 0x80
 8008988:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800898a:	4b61      	ldr	r3, [pc, #388]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 800898c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008990:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008992:	4b5f      	ldr	r3, [pc, #380]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 8008994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008998:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800899a:	4b5d      	ldr	r3, [pc, #372]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 800899c:	2200      	movs	r2, #0
 800899e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089a0:	4b5b      	ldr	r3, [pc, #364]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 80089a2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80089a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80089a8:	4859      	ldr	r0, [pc, #356]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 80089aa:	f7fb fc3b 	bl	8004224 <HAL_DMA_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 80089b4:	f7ff fe29 	bl	800860a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24
 80089be:	4a54      	ldr	r2, [pc, #336]	; (8008b10 <HAL_TIM_Base_MspInit+0x1d0>)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80089c4:	4b54      	ldr	r3, [pc, #336]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089c6:	4a55      	ldr	r2, [pc, #340]	; (8008b1c <HAL_TIM_Base_MspInit+0x1dc>)
 80089c8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 80089ca:	4b53      	ldr	r3, [pc, #332]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089cc:	2207      	movs	r2, #7
 80089ce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089d0:	4b51      	ldr	r3, [pc, #324]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089d2:	2210      	movs	r2, #16
 80089d4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80089d6:	4b50      	ldr	r3, [pc, #320]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089d8:	2200      	movs	r2, #0
 80089da:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80089dc:	4b4e      	ldr	r3, [pc, #312]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089de:	2280      	movs	r2, #128	; 0x80
 80089e0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80089e2:	4b4d      	ldr	r3, [pc, #308]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089e8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80089ea:	4b4b      	ldr	r3, [pc, #300]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089f0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80089f2:	4b49      	ldr	r3, [pc, #292]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089f8:	4b47      	ldr	r3, [pc, #284]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 80089fa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80089fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8008a00:	4845      	ldr	r0, [pc, #276]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 8008a02:	f7fb fc0f 	bl	8004224 <HAL_DMA_Init>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8008a0c:	f7ff fdfd 	bl	800860a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a41      	ldr	r2, [pc, #260]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 8008a14:	629a      	str	r2, [r3, #40]	; 0x28
 8008a16:	4a40      	ldr	r2, [pc, #256]	; (8008b18 <HAL_TIM_Base_MspInit+0x1d8>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8008a1c:	4b40      	ldr	r3, [pc, #256]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a1e:	4a41      	ldr	r2, [pc, #260]	; (8008b24 <HAL_TIM_Base_MspInit+0x1e4>)
 8008a20:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8008a22:	4b3f      	ldr	r3, [pc, #252]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a24:	2207      	movs	r2, #7
 8008a26:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a28:	4b3d      	ldr	r3, [pc, #244]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a2a:	2210      	movs	r2, #16
 8008a2c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a2e:	4b3c      	ldr	r3, [pc, #240]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8008a34:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a36:	2280      	movs	r2, #128	; 0x80
 8008a38:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a3a:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a40:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a42:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a48:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8008a4a:	4b35      	ldr	r3, [pc, #212]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a50:	4b33      	ldr	r3, [pc, #204]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008a56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8008a58:	4831      	ldr	r0, [pc, #196]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a5a:	f7fb fbe3 	bl	8004224 <HAL_DMA_Init>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8008a64:	f7ff fdd1 	bl	800860a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a2d      	ldr	r2, [pc, #180]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a6e:	4a2c      	ldr	r2, [pc, #176]	; (8008b20 <HAL_TIM_Base_MspInit+0x1e0>)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6293      	str	r3, [r2, #40]	; 0x28
 8008a74:	e041      	b.n	8008afa <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a2b      	ldr	r2, [pc, #172]	; (8008b28 <HAL_TIM_Base_MspInit+0x1e8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d13c      	bne.n	8008afa <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008a80:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 8008a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8008a8c:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <HAL_TIM_Base_MspInit+0x1cc>)
 8008a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8008a98:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008a9a:	4a25      	ldr	r2, [pc, #148]	; (8008b30 <HAL_TIM_Base_MspInit+0x1f0>)
 8008a9c:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008aa4:	4b21      	ldr	r3, [pc, #132]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aaa:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8008ab0:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ab2:	2280      	movs	r2, #128	; 0x80
 8008ab4:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008abc:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ac4:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8008acc:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8008ad2:	4816      	ldr	r0, [pc, #88]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ad4:	f7fb fba6 	bl	8004224 <HAL_DMA_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8008ade:	f7ff fd94 	bl	800860a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8008ae8:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a0e      	ldr	r2, [pc, #56]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008af2:	621a      	str	r2, [r3, #32]
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <HAL_TIM_Base_MspInit+0x1ec>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8008afa:	f7ff fea9 	bl	8008850 <HAL_Set_DMA_Callbacks>
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40021000 	.word	0x40021000
 8008b10:	20001d20 	.word	0x20001d20
 8008b14:	4002001c 	.word	0x4002001c
 8008b18:	20001d68 	.word	0x20001d68
 8008b1c:	40020030 	.word	0x40020030
 8008b20:	20001db0 	.word	0x20001db0
 8008b24:	40020080 	.word	0x40020080
 8008b28:	40014400 	.word	0x40014400
 8008b2c:	20001e40 	.word	0x20001e40
 8008b30:	4002006c 	.word	0x4002006c

08008b34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a28      	ldr	r2, [pc, #160]	; (8008be4 <HAL_TIM_PWM_MspInit+0xb0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d149      	bne.n	8008bda <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008b46:	4b28      	ldr	r3, [pc, #160]	; (8008be8 <HAL_TIM_PWM_MspInit+0xb4>)
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	4a27      	ldr	r2, [pc, #156]	; (8008be8 <HAL_TIM_PWM_MspInit+0xb4>)
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b50:	6613      	str	r3, [r2, #96]	; 0x60
 8008b52:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <HAL_TIM_PWM_MspInit+0xb4>)
 8008b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8008b5e:	4b23      	ldr	r3, [pc, #140]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b60:	4a23      	ldr	r2, [pc, #140]	; (8008bf0 <HAL_TIM_PWM_MspInit+0xbc>)
 8008b62:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8008b64:	4b21      	ldr	r3, [pc, #132]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b66:	2207      	movs	r2, #7
 8008b68:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b6a:	4b20      	ldr	r3, [pc, #128]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b6c:	2210      	movs	r2, #16
 8008b6e:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b70:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8008b76:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b78:	2280      	movs	r2, #128	; 0x80
 8008b7a:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b82:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b8a:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8008b8c:	4b17      	ldr	r3, [pc, #92]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008b92:	4b16      	ldr	r3, [pc, #88]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008b98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8008b9a:	4814      	ldr	r0, [pc, #80]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008b9c:	f7fb fb42 	bl	8004224 <HAL_DMA_Init>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8008ba6:	f7ff fd30 	bl	800860a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a0f      	ldr	r2, [pc, #60]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bae:	625a      	str	r2, [r3, #36]	; 0x24
 8008bb0:	4a0e      	ldr	r2, [pc, #56]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a0c      	ldr	r2, [pc, #48]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bba:	621a      	str	r2, [r3, #32]
 8008bbc:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a09      	ldr	r2, [pc, #36]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8008bc8:	4a08      	ldr	r2, [pc, #32]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a06      	ldr	r2, [pc, #24]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8008bd4:	4a05      	ldr	r2, [pc, #20]	; (8008bec <HAL_TIM_PWM_MspInit+0xb8>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40014000 	.word	0x40014000
 8008be8:	40021000 	.word	0x40021000
 8008bec:	20001df8 	.word	0x20001df8
 8008bf0:	40020058 	.word	0x40020058

08008bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	71fb      	strb	r3, [r7, #7]
 8008bfe:	e005      	b.n	8008c0c <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8008c00:	2064      	movs	r0, #100	; 0x64
 8008c02:	f7fb f983 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0f6      	beq.n	8008c00 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8008c12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008c16:	f7fb f979 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8008c1a:	e7ee      	b.n	8008bfa <NMI_Handler+0x6>

08008c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 8008c22:	2300      	movs	r3, #0
 8008c24:	71fb      	strb	r3, [r7, #7]
 8008c26:	e005      	b.n	8008c34 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8008c28:	2064      	movs	r0, #100	; 0x64
 8008c2a:	f7fb f96f 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	3301      	adds	r3, #1
 8008c32:	71fb      	strb	r3, [r7, #7]
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d9f6      	bls.n	8008c28 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8008c3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008c3e:	f7fb f965 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8008c42:	e7ee      	b.n	8008c22 <HardFault_Handler+0x6>

08008c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	71fb      	strb	r3, [r7, #7]
 8008c4e:	e005      	b.n	8008c5c <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8008c50:	2064      	movs	r0, #100	; 0x64
 8008c52:	f7fb f95b 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	71fb      	strb	r3, [r7, #7]
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d9f6      	bls.n	8008c50 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8008c62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008c66:	f7fb f951 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8008c6a:	e7ee      	b.n	8008c4a <MemManage_Handler+0x6>

08008c6c <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	71fb      	strb	r3, [r7, #7]
 8008c76:	e005      	b.n	8008c84 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8008c78:	2064      	movs	r0, #100	; 0x64
 8008c7a:	f7fb f947 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	3301      	adds	r3, #1
 8008c82:	71fb      	strb	r3, [r7, #7]
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d9f6      	bls.n	8008c78 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8008c8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008c8e:	f7fb f93d 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8008c92:	e7ee      	b.n	8008c72 <BusFault_Handler+0x6>

08008c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	71fb      	strb	r3, [r7, #7]
 8008c9e:	e005      	b.n	8008cac <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8008ca0:	2064      	movs	r0, #100	; 0x64
 8008ca2:	f7fb f933 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	71fb      	strb	r3, [r7, #7]
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d9f6      	bls.n	8008ca0 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8008cb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008cb6:	f7fb f929 	bl	8003f0c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8008cba:	e7ee      	b.n	8008c9a <UsageFault_Handler+0x6>

08008cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
}
 8008cc0:	bf00      	nop
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 8008cda:	2306      	movs	r3, #6
 8008cdc:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fb feb1 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8008ce6:	797a      	ldrb	r2, [r7, #5]
 8008ce8:	797b      	ldrb	r3, [r7, #5]
 8008cea:	4910      	ldr	r1, [pc, #64]	; (8008d2c <EXTI0_IRQHandler+0x60>)
 8008cec:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8008cf0:	490e      	ldr	r1, [pc, #56]	; (8008d2c <EXTI0_IRQHandler+0x60>)
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	440b      	add	r3, r1
 8008cf6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8008cf8:	797c      	ldrb	r4, [r7, #5]
 8008cfa:	f7f9 fbcf 	bl	800249c <xTaskGetTickCountFromISR>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4a0a      	ldr	r2, [pc, #40]	; (8008d2c <EXTI0_IRQHandler+0x60>)
 8008d02:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8008d06:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fb fa6f 	bl	80041ee <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008d10:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <EXTI0_IRQHandler+0x64>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	7979      	ldrb	r1, [r7, #5]
 8008d16:	463b      	mov	r3, r7
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	f7f9 ffdb 	bl	8002cd8 <xTaskGenericNotifyFromISR>
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd90      	pop	{r4, r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200003d8 	.word	0x200003d8
 8008d30:	20002700 	.word	0x20002700

08008d34 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 8008d42:	2308      	movs	r3, #8
 8008d44:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fb fe7d 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8008d4e:	797a      	ldrb	r2, [r7, #5]
 8008d50:	797b      	ldrb	r3, [r7, #5]
 8008d52:	4910      	ldr	r1, [pc, #64]	; (8008d94 <EXTI2_IRQHandler+0x60>)
 8008d54:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8008d58:	490e      	ldr	r1, [pc, #56]	; (8008d94 <EXTI2_IRQHandler+0x60>)
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	440b      	add	r3, r1
 8008d5e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8008d60:	797c      	ldrb	r4, [r7, #5]
 8008d62:	f7f9 fb9b 	bl	800249c <xTaskGetTickCountFromISR>
 8008d66:	4603      	mov	r3, r0
 8008d68:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <EXTI2_IRQHandler+0x60>)
 8008d6a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8008d6e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fb fa3b 	bl	80041ee <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008d78:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <EXTI2_IRQHandler+0x64>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	7979      	ldrb	r1, [r7, #5]
 8008d7e:	463b      	mov	r3, r7
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	2203      	movs	r2, #3
 8008d86:	f7f9 ffa7 	bl	8002cd8 <xTaskGenericNotifyFromISR>
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd90      	pop	{r4, r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200003d8 	.word	0x200003d8
 8008d98:	20002700 	.word	0x20002700

08008d9c <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 8008da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008da6:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 8008da8:	2301      	movs	r3, #1
 8008daa:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 8008dac:	2328      	movs	r3, #40	; 0x28
 8008dae:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fb fe48 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8008db8:	797a      	ldrb	r2, [r7, #5]
 8008dba:	797b      	ldrb	r3, [r7, #5]
 8008dbc:	490f      	ldr	r1, [pc, #60]	; (8008dfc <EXTI15_10_IRQHandler+0x60>)
 8008dbe:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8008dc2:	490e      	ldr	r1, [pc, #56]	; (8008dfc <EXTI15_10_IRQHandler+0x60>)
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	440b      	add	r3, r1
 8008dc8:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8008dca:	797c      	ldrb	r4, [r7, #5]
 8008dcc:	f7f9 fb66 	bl	800249c <xTaskGetTickCountFromISR>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <EXTI15_10_IRQHandler+0x60>)
 8008dd4:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8008dd8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fb fa06 	bl	80041ee <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <EXTI15_10_IRQHandler+0x64>)
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	7979      	ldrb	r1, [r7, #5]
 8008de8:	463b      	mov	r3, r7
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	2300      	movs	r3, #0
 8008dee:	2203      	movs	r2, #3
 8008df0:	f7f9 ff72 	bl	8002cd8 <xTaskGenericNotifyFromISR>
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd90      	pop	{r4, r7, pc}
 8008dfc:	200003d8 	.word	0x200003d8
 8008e00:	20002700 	.word	0x20002700

08008e04 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 8008e0a:	2320      	movs	r3, #32
 8008e0c:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 8008e12:	2317      	movs	r3, #23
 8008e14:	713b      	strb	r3, [r7, #4]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fb fe15 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8008e1e:	797a      	ldrb	r2, [r7, #5]
 8008e20:	797b      	ldrb	r3, [r7, #5]
 8008e22:	4910      	ldr	r1, [pc, #64]	; (8008e64 <EXTI9_5_IRQHandler+0x60>)
 8008e24:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8008e28:	490e      	ldr	r1, [pc, #56]	; (8008e64 <EXTI9_5_IRQHandler+0x60>)
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	440b      	add	r3, r1
 8008e2e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8008e30:	797c      	ldrb	r4, [r7, #5]
 8008e32:	f7f9 fb33 	bl	800249c <xTaskGetTickCountFromISR>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <EXTI9_5_IRQHandler+0x60>)
 8008e3a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8008e3e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fb f9d3 	bl	80041ee <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <EXTI9_5_IRQHandler+0x64>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	7979      	ldrb	r1, [r7, #5]
 8008e4e:	463b      	mov	r3, r7
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	2203      	movs	r2, #3
 8008e56:	f7f9 ff3f 	bl	8002cd8 <xTaskGenericNotifyFromISR>
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd90      	pop	{r4, r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200003d8 	.word	0x200003d8
 8008e68:	20002700 	.word	0x20002700

08008e6c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	80fb      	strh	r3, [r7, #6]

}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
    while(1);
 8008e8a:	e7fe      	b.n	8008e8a <HAL_DMA_CMPLT_CALLBACK+0x8>

08008e8c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7f1b      	ldrb	r3, [r3, #28]
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d016      	beq.n	8008eca <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	dc1c      	bgt.n	8008eda <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d002      	beq.n	8008eaa <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d008      	beq.n	8008eba <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 8008ea8:	e017      	b.n	8008eda <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fd fc6f 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
        break;
 8008eb8:	e010      	b.n	8008edc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8008eba:	2104      	movs	r1, #4
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fd fc67 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
        break;
 8008ec8:	e008      	b.n	8008edc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8008eca:	2108      	movs	r1, #8
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fd fc5f 	bl	8006790 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
        break;
 8008ed8:	e000      	b.n	8008edc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8008eda:	bf00      	nop
    }
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000100 	.word	0x20000100
 8008ee8:	20000101 	.word	0x20000101
 8008eec:	20000102 	.word	0x20000102

08008ef0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8008ef4:	4802      	ldr	r0, [pc, #8]	; (8008f00 <DMA1_Channel2_IRQHandler+0x10>)
 8008ef6:	f7fb faee 	bl	80044d6 <HAL_DMA_IRQHandler>
}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20001d20 	.word	0x20001d20

08008f04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8008f08:	4802      	ldr	r0, [pc, #8]	; (8008f14 <DMA1_Channel3_IRQHandler+0x10>)
 8008f0a:	f7fb fae4 	bl	80044d6 <HAL_DMA_IRQHandler>
}
 8008f0e:	bf00      	nop
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20001d68 	.word	0x20001d68

08008f18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8008f1c:	4802      	ldr	r0, [pc, #8]	; (8008f28 <DMA1_Channel5_IRQHandler+0x10>)
 8008f1e:	f7fb fada 	bl	80044d6 <HAL_DMA_IRQHandler>
}
 8008f22:	bf00      	nop
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001df8 	.word	0x20001df8

08008f2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8008f30:	4802      	ldr	r0, [pc, #8]	; (8008f3c <DMA1_Channel6_IRQHandler+0x10>)
 8008f32:	f7fb fad0 	bl	80044d6 <HAL_DMA_IRQHandler>
}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20001e40 	.word	0x20001e40

08008f40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8008f44:	4802      	ldr	r0, [pc, #8]	; (8008f50 <DMA1_Channel7_IRQHandler+0x10>)
 8008f46:	f7fb fac6 	bl	80044d6 <HAL_DMA_IRQHandler>
}
 8008f4a:	bf00      	nop
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20001db0 	.word	0x20001db0

08008f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	return 1;
 8008f58:	2301      	movs	r3, #1
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <_kill>:

int _kill(int pid, int sig)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008f6e:	f000 f9ad 	bl	80092cc <__errno>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2216      	movs	r2, #22
 8008f76:	601a      	str	r2, [r3, #0]
	return -1;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <_exit>:

void _exit (int status)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ffe7 	bl	8008f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008f96:	e7fe      	b.n	8008f96 <_exit+0x12>

08008f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e00a      	b.n	8008fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008faa:	f3af 8000 	nop.w
 8008fae:	4601      	mov	r1, r0
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	60ba      	str	r2, [r7, #8]
 8008fb6:	b2ca      	uxtb	r2, r1
 8008fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	dbf0      	blt.n	8008faa <_read+0x12>
	}

return len;
 8008fc8:	687b      	ldr	r3, [r7, #4]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	e009      	b.n	8008ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	60ba      	str	r2, [r7, #8]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	dbf1      	blt.n	8008fe4 <_write+0x12>
	}
	return len;
 8009000:	687b      	ldr	r3, [r7, #4]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_close>:

int _close(int file)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
	return -1;
 8009012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009032:	605a      	str	r2, [r3, #4]
	return 0;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <_isatty>:

int _isatty(int file)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
	return 1;
 800904a:	2301      	movs	r3, #1
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
	return 0;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800907c:	4a14      	ldr	r2, [pc, #80]	; (80090d0 <_sbrk+0x5c>)
 800907e:	4b15      	ldr	r3, [pc, #84]	; (80090d4 <_sbrk+0x60>)
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009088:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <_sbrk+0x64>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009090:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <_sbrk+0x64>)
 8009092:	4a12      	ldr	r2, [pc, #72]	; (80090dc <_sbrk+0x68>)
 8009094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009096:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <_sbrk+0x64>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d207      	bcs.n	80090b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80090a4:	f000 f912 	bl	80092cc <__errno>
 80090a8:	4603      	mov	r3, r0
 80090aa:	220c      	movs	r2, #12
 80090ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090b2:	e009      	b.n	80090c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <_sbrk+0x64>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80090ba:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <_sbrk+0x64>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	4a05      	ldr	r2, [pc, #20]	; (80090d8 <_sbrk+0x64>)
 80090c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20010000 	.word	0x20010000
 80090d4:	00000400 	.word	0x00000400
 80090d8:	20001ef8 	.word	0x20001ef8
 80090dc:	20002f78 	.word	0x20002f78

080090e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <SystemInit+0x20>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ea:	4a05      	ldr	r2, [pc, #20]	; (8009100 <SystemInit+0x20>)
 80090ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000ed00 	.word	0xe000ed00

08009104 <flash_info_block_init>:
    return return_val;
}


void flash_info_block_init(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 8009108:	f7fa ff24 	bl	8003f54 <HAL_GetUIDw0>
 800910c:	4603      	mov	r3, r0
 800910e:	4a32      	ldr	r2, [pc, #200]	; (80091d8 <flash_info_block_init+0xd4>)
 8009110:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 8009114:	f7fa ff2a 	bl	8003f6c <HAL_GetUIDw1>
 8009118:	4603      	mov	r3, r0
 800911a:	4a2f      	ldr	r2, [pc, #188]	; (80091d8 <flash_info_block_init+0xd4>)
 800911c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 8009120:	f7fa ff30 	bl	8003f84 <HAL_GetUIDw2>
 8009124:	4603      	mov	r3, r0
 8009126:	4a2c      	ldr	r2, [pc, #176]	; (80091d8 <flash_info_block_init+0xd4>)
 8009128:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800912c:	4b2a      	ldr	r3, [pc, #168]	; (80091d8 <flash_info_block_init+0xd4>)
 800912e:	2201      	movs	r2, #1
 8009130:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <flash_info_block_init+0xd4>)
 8009134:	2201      	movs	r2, #1
 8009136:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 8009138:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <flash_info_block_init+0xd4>)
 800913a:	2201      	movs	r2, #1
 800913c:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 800913e:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <flash_info_block_init+0xd4>)
 8009140:	2201      	movs	r2, #1
 8009142:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 8009144:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <flash_info_block_init+0xd4>)
 8009146:	2201      	movs	r2, #1
 8009148:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800914a:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <flash_info_block_init+0xd4>)
 800914c:	2201      	movs	r2, #1
 800914e:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009150:	4b21      	ldr	r3, [pc, #132]	; (80091d8 <flash_info_block_init+0xd4>)
 8009152:	2201      	movs	r2, #1
 8009154:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009156:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <flash_info_block_init+0xd4>)
 8009158:	2201      	movs	r2, #1
 800915a:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800915c:	4b1e      	ldr	r3, [pc, #120]	; (80091d8 <flash_info_block_init+0xd4>)
 800915e:	2201      	movs	r2, #1
 8009160:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009162:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <flash_info_block_init+0xd4>)
 8009164:	2201      	movs	r2, #1
 8009166:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <flash_info_block_init+0xd4>)
 800916a:	2201      	movs	r2, #1
 800916c:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 800916e:	4a1a      	ldr	r2, [pc, #104]	; (80091d8 <flash_info_block_init+0xd4>)
 8009170:	7ad3      	ldrb	r3, [r2, #11]
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <flash_info_block_init+0xd4>)
 800917a:	7ad3      	ldrb	r3, [r2, #11]
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <flash_info_block_init+0xd4>)
 8009184:	7ad3      	ldrb	r3, [r2, #11]
 8009186:	f043 0304 	orr.w	r3, r3, #4
 800918a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 800918c:	4a12      	ldr	r2, [pc, #72]	; (80091d8 <flash_info_block_init+0xd4>)
 800918e:	7ad3      	ldrb	r3, [r2, #11]
 8009190:	f043 0308 	orr.w	r3, r3, #8
 8009194:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 8009196:	4a10      	ldr	r2, [pc, #64]	; (80091d8 <flash_info_block_init+0xd4>)
 8009198:	7ad3      	ldrb	r3, [r2, #11]
 800919a:	f043 0310 	orr.w	r3, r3, #16
 800919e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 80091a0:	4a0d      	ldr	r2, [pc, #52]	; (80091d8 <flash_info_block_init+0xd4>)
 80091a2:	7ad3      	ldrb	r3, [r2, #11]
 80091a4:	f043 0320 	orr.w	r3, r3, #32
 80091a8:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 80091aa:	4a0b      	ldr	r2, [pc, #44]	; (80091d8 <flash_info_block_init+0xd4>)
 80091ac:	7ad3      	ldrb	r3, [r2, #11]
 80091ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b2:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <flash_info_block_init+0xd4>)
 80091b6:	7ad3      	ldrb	r3, [r2, #11]
 80091b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091bc:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 80091be:	4a06      	ldr	r2, [pc, #24]	; (80091d8 <flash_info_block_init+0xd4>)
 80091c0:	7b13      	ldrb	r3, [r2, #12]
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 80091c8:	4a03      	ldr	r2, [pc, #12]	; (80091d8 <flash_info_block_init+0xd4>)
 80091ca:	7b13      	ldrb	r3, [r2, #12]
 80091cc:	f043 0302 	orr.w	r3, r3, #2
 80091d0:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 80091d2:	bf00      	nop
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20001efc 	.word	0x20001efc

080091dc <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 80091e0:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <flash_info_init+0x3c>)
 80091e2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80091e6:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 80091e8:	f7ff ff8c 	bl	8009104 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 80091ec:	4b0b      	ldr	r3, [pc, #44]	; (800921c <flash_info_init+0x40>)
 80091ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f6:	d10d      	bne.n	8009214 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <flash_info_init+0x40>)
 80091fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009202:	d107      	bne.n	8009214 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8009204:	4b05      	ldr	r3, [pc, #20]	; (800921c <flash_info_init+0x40>)
 8009206:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920e:	d101      	bne.n	8009214 <flash_info_init+0x38>
    {
        flash_info_block_init();
 8009210:	f7ff ff78 	bl	8009104 <flash_info_block_init>
    }
}
 8009214:	bf00      	nop
 8009216:	bd80      	pop	{r7, pc}
 8009218:	200026fc 	.word	0x200026fc
 800921c:	20001efc 	.word	0x20001efc

08009220 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8009224:	f7ff f9d4 	bl	80085d0 <board_init_common_board_init>
    flash_info_init();
 8009228:	f7ff ffd8 	bl	80091dc <flash_info_init>
    //serial_com_init_usart();

    task_create();
 800922c:	f000 f80a 	bl	8009244 <task_create>
	semaphore_create();
 8009230:	f7f7 fca6 	bl	8000b80 <semaphore_create>
    reset_ws2812b();
 8009234:	f7f7 fa8c 	bl	8000750 <reset_ws2812b>
	osKernelStart();
 8009238:	f7f7 ff90 	bl	800115c <osKernelStart>
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8009248:	f7f7 ff64 	bl	8001114 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800924c:	4a06      	ldr	r2, [pc, #24]	; (8009268 <task_create+0x24>)
 800924e:	2100      	movs	r1, #0
 8009250:	4806      	ldr	r0, [pc, #24]	; (800926c <task_create+0x28>)
 8009252:	f7f7 ffa9 	bl	80011a8 <osThreadNew>
 8009256:	4603      	mov	r3, r0
 8009258:	4a05      	ldr	r2, [pc, #20]	; (8009270 <task_create+0x2c>)
 800925a:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    //g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
    g_tasks_running = true; // technically will be running after task scheduler started
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <task_create+0x30>)
 800925e:	2201      	movs	r2, #1
 8009260:	701a      	strb	r2, [r3, #0]
}
 8009262:	bf00      	nop
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	0800a500 	.word	0x0800a500
 800926c:	08000c61 	.word	0x08000c61
 8009270:	20002700 	.word	0x20002700
 8009274:	20002f60 	.word	0x20002f60

08009278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800927c:	f7ff ff30 	bl	80090e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009280:	480c      	ldr	r0, [pc, #48]	; (80092b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009282:	490d      	ldr	r1, [pc, #52]	; (80092b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009284:	4a0d      	ldr	r2, [pc, #52]	; (80092bc <LoopForever+0xe>)
  movs r3, #0
 8009286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009288:	e002      	b.n	8009290 <LoopCopyDataInit>

0800928a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800928a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800928c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800928e:	3304      	adds	r3, #4

08009290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009294:	d3f9      	bcc.n	800928a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009296:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009298:	4c0a      	ldr	r4, [pc, #40]	; (80092c4 <LoopForever+0x16>)
  movs r3, #0
 800929a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800929c:	e001      	b.n	80092a2 <LoopFillZerobss>

0800929e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800929e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092a0:	3204      	adds	r2, #4

080092a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092a4:	d3fb      	bcc.n	800929e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80092a6:	f000 f817 	bl	80092d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80092aa:	f7ff ffb9 	bl	8009220 <main>

080092ae <LoopForever>:

LoopForever:
    b LoopForever
 80092ae:	e7fe      	b.n	80092ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80092b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80092b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092b8:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80092bc:	0800a67c 	.word	0x0800a67c
  ldr r2, =_sbss
 80092c0:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80092c4:	20002f74 	.word	0x20002f74

080092c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80092c8:	e7fe      	b.n	80092c8 <ADC1_IRQHandler>
	...

080092cc <__errno>:
 80092cc:	4b01      	ldr	r3, [pc, #4]	; (80092d4 <__errno+0x8>)
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000108 	.word	0x20000108

080092d8 <__libc_init_array>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	4d0d      	ldr	r5, [pc, #52]	; (8009310 <__libc_init_array+0x38>)
 80092dc:	4c0d      	ldr	r4, [pc, #52]	; (8009314 <__libc_init_array+0x3c>)
 80092de:	1b64      	subs	r4, r4, r5
 80092e0:	10a4      	asrs	r4, r4, #2
 80092e2:	2600      	movs	r6, #0
 80092e4:	42a6      	cmp	r6, r4
 80092e6:	d109      	bne.n	80092fc <__libc_init_array+0x24>
 80092e8:	4d0b      	ldr	r5, [pc, #44]	; (8009318 <__libc_init_array+0x40>)
 80092ea:	4c0c      	ldr	r4, [pc, #48]	; (800931c <__libc_init_array+0x44>)
 80092ec:	f001 f88a 	bl	800a404 <_init>
 80092f0:	1b64      	subs	r4, r4, r5
 80092f2:	10a4      	asrs	r4, r4, #2
 80092f4:	2600      	movs	r6, #0
 80092f6:	42a6      	cmp	r6, r4
 80092f8:	d105      	bne.n	8009306 <__libc_init_array+0x2e>
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009300:	4798      	blx	r3
 8009302:	3601      	adds	r6, #1
 8009304:	e7ee      	b.n	80092e4 <__libc_init_array+0xc>
 8009306:	f855 3b04 	ldr.w	r3, [r5], #4
 800930a:	4798      	blx	r3
 800930c:	3601      	adds	r6, #1
 800930e:	e7f2      	b.n	80092f6 <__libc_init_array+0x1e>
 8009310:	0800a674 	.word	0x0800a674
 8009314:	0800a674 	.word	0x0800a674
 8009318:	0800a674 	.word	0x0800a674
 800931c:	0800a678 	.word	0x0800a678

08009320 <malloc>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <malloc+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f000 b885 	b.w	8009434 <_malloc_r>
 800932a:	bf00      	nop
 800932c:	20000108 	.word	0x20000108

08009330 <memcpy>:
 8009330:	440a      	add	r2, r1
 8009332:	4291      	cmp	r1, r2
 8009334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009338:	d100      	bne.n	800933c <memcpy+0xc>
 800933a:	4770      	bx	lr
 800933c:	b510      	push	{r4, lr}
 800933e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009346:	4291      	cmp	r1, r2
 8009348:	d1f9      	bne.n	800933e <memcpy+0xe>
 800934a:	bd10      	pop	{r4, pc}

0800934c <memset>:
 800934c:	4402      	add	r2, r0
 800934e:	4603      	mov	r3, r0
 8009350:	4293      	cmp	r3, r2
 8009352:	d100      	bne.n	8009356 <memset+0xa>
 8009354:	4770      	bx	lr
 8009356:	f803 1b01 	strb.w	r1, [r3], #1
 800935a:	e7f9      	b.n	8009350 <memset+0x4>

0800935c <_free_r>:
 800935c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935e:	2900      	cmp	r1, #0
 8009360:	d044      	beq.n	80093ec <_free_r+0x90>
 8009362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009366:	9001      	str	r0, [sp, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f1a1 0404 	sub.w	r4, r1, #4
 800936e:	bfb8      	it	lt
 8009370:	18e4      	addlt	r4, r4, r3
 8009372:	f000 f96d 	bl	8009650 <__malloc_lock>
 8009376:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <_free_r+0x94>)
 8009378:	9801      	ldr	r0, [sp, #4]
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	b933      	cbnz	r3, 800938c <_free_r+0x30>
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6014      	str	r4, [r2, #0]
 8009382:	b003      	add	sp, #12
 8009384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009388:	f000 b968 	b.w	800965c <__malloc_unlock>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x46>
 8009390:	6825      	ldr	r5, [r4, #0]
 8009392:	1961      	adds	r1, r4, r5
 8009394:	428b      	cmp	r3, r1
 8009396:	bf01      	itttt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	1949      	addeq	r1, r1, r5
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	e7ed      	b.n	800937e <_free_r+0x22>
 80093a2:	461a      	mov	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b10b      	cbz	r3, 80093ac <_free_r+0x50>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x46>
 80093ac:	6811      	ldr	r1, [r2, #0]
 80093ae:	1855      	adds	r5, r2, r1
 80093b0:	42a5      	cmp	r5, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x70>
 80093b4:	6824      	ldr	r4, [r4, #0]
 80093b6:	4421      	add	r1, r4
 80093b8:	1854      	adds	r4, r2, r1
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	d1e0      	bne.n	8009382 <_free_r+0x26>
 80093c0:	681c      	ldr	r4, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	4421      	add	r1, r4
 80093c8:	6011      	str	r1, [r2, #0]
 80093ca:	e7da      	b.n	8009382 <_free_r+0x26>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x78>
 80093ce:	230c      	movs	r3, #12
 80093d0:	6003      	str	r3, [r0, #0]
 80093d2:	e7d6      	b.n	8009382 <_free_r+0x26>
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	1961      	adds	r1, r4, r5
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf04      	itt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1949      	addeq	r1, r1, r5
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	6054      	str	r4, [r2, #4]
 80093ea:	e7ca      	b.n	8009382 <_free_r+0x26>
 80093ec:	b003      	add	sp, #12
 80093ee:	bd30      	pop	{r4, r5, pc}
 80093f0:	20002f64 	.word	0x20002f64

080093f4 <sbrk_aligned>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0e      	ldr	r6, [pc, #56]	; (8009430 <sbrk_aligned+0x3c>)
 80093f8:	460c      	mov	r4, r1
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	4605      	mov	r5, r0
 80093fe:	b911      	cbnz	r1, 8009406 <sbrk_aligned+0x12>
 8009400:	f000 f8ba 	bl	8009578 <_sbrk_r>
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f000 f8b5 	bl	8009578 <_sbrk_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d00a      	beq.n	8009428 <sbrk_aligned+0x34>
 8009412:	1cc4      	adds	r4, r0, #3
 8009414:	f024 0403 	bic.w	r4, r4, #3
 8009418:	42a0      	cmp	r0, r4
 800941a:	d007      	beq.n	800942c <sbrk_aligned+0x38>
 800941c:	1a21      	subs	r1, r4, r0
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f8aa 	bl	8009578 <_sbrk_r>
 8009424:	3001      	adds	r0, #1
 8009426:	d101      	bne.n	800942c <sbrk_aligned+0x38>
 8009428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800942c:	4620      	mov	r0, r4
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	20002f68 	.word	0x20002f68

08009434 <_malloc_r>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	1ccd      	adds	r5, r1, #3
 800943a:	f025 0503 	bic.w	r5, r5, #3
 800943e:	3508      	adds	r5, #8
 8009440:	2d0c      	cmp	r5, #12
 8009442:	bf38      	it	cc
 8009444:	250c      	movcc	r5, #12
 8009446:	2d00      	cmp	r5, #0
 8009448:	4607      	mov	r7, r0
 800944a:	db01      	blt.n	8009450 <_malloc_r+0x1c>
 800944c:	42a9      	cmp	r1, r5
 800944e:	d905      	bls.n	800945c <_malloc_r+0x28>
 8009450:	230c      	movs	r3, #12
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	2600      	movs	r6, #0
 8009456:	4630      	mov	r0, r6
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	4e2e      	ldr	r6, [pc, #184]	; (8009518 <_malloc_r+0xe4>)
 800945e:	f000 f8f7 	bl	8009650 <__malloc_lock>
 8009462:	6833      	ldr	r3, [r6, #0]
 8009464:	461c      	mov	r4, r3
 8009466:	bb34      	cbnz	r4, 80094b6 <_malloc_r+0x82>
 8009468:	4629      	mov	r1, r5
 800946a:	4638      	mov	r0, r7
 800946c:	f7ff ffc2 	bl	80093f4 <sbrk_aligned>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	4604      	mov	r4, r0
 8009474:	d14d      	bne.n	8009512 <_malloc_r+0xde>
 8009476:	6834      	ldr	r4, [r6, #0]
 8009478:	4626      	mov	r6, r4
 800947a:	2e00      	cmp	r6, #0
 800947c:	d140      	bne.n	8009500 <_malloc_r+0xcc>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	4631      	mov	r1, r6
 8009482:	4638      	mov	r0, r7
 8009484:	eb04 0803 	add.w	r8, r4, r3
 8009488:	f000 f876 	bl	8009578 <_sbrk_r>
 800948c:	4580      	cmp	r8, r0
 800948e:	d13a      	bne.n	8009506 <_malloc_r+0xd2>
 8009490:	6821      	ldr	r1, [r4, #0]
 8009492:	3503      	adds	r5, #3
 8009494:	1a6d      	subs	r5, r5, r1
 8009496:	f025 0503 	bic.w	r5, r5, #3
 800949a:	3508      	adds	r5, #8
 800949c:	2d0c      	cmp	r5, #12
 800949e:	bf38      	it	cc
 80094a0:	250c      	movcc	r5, #12
 80094a2:	4629      	mov	r1, r5
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ffa5 	bl	80093f4 <sbrk_aligned>
 80094aa:	3001      	adds	r0, #1
 80094ac:	d02b      	beq.n	8009506 <_malloc_r+0xd2>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	442b      	add	r3, r5
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	e00e      	b.n	80094d4 <_malloc_r+0xa0>
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	1b52      	subs	r2, r2, r5
 80094ba:	d41e      	bmi.n	80094fa <_malloc_r+0xc6>
 80094bc:	2a0b      	cmp	r2, #11
 80094be:	d916      	bls.n	80094ee <_malloc_r+0xba>
 80094c0:	1961      	adds	r1, r4, r5
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6025      	str	r5, [r4, #0]
 80094c6:	bf18      	it	ne
 80094c8:	6059      	strne	r1, [r3, #4]
 80094ca:	6863      	ldr	r3, [r4, #4]
 80094cc:	bf08      	it	eq
 80094ce:	6031      	streq	r1, [r6, #0]
 80094d0:	5162      	str	r2, [r4, r5]
 80094d2:	604b      	str	r3, [r1, #4]
 80094d4:	4638      	mov	r0, r7
 80094d6:	f104 060b 	add.w	r6, r4, #11
 80094da:	f000 f8bf 	bl	800965c <__malloc_unlock>
 80094de:	f026 0607 	bic.w	r6, r6, #7
 80094e2:	1d23      	adds	r3, r4, #4
 80094e4:	1af2      	subs	r2, r6, r3
 80094e6:	d0b6      	beq.n	8009456 <_malloc_r+0x22>
 80094e8:	1b9b      	subs	r3, r3, r6
 80094ea:	50a3      	str	r3, [r4, r2]
 80094ec:	e7b3      	b.n	8009456 <_malloc_r+0x22>
 80094ee:	6862      	ldr	r2, [r4, #4]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	bf0c      	ite	eq
 80094f4:	6032      	streq	r2, [r6, #0]
 80094f6:	605a      	strne	r2, [r3, #4]
 80094f8:	e7ec      	b.n	80094d4 <_malloc_r+0xa0>
 80094fa:	4623      	mov	r3, r4
 80094fc:	6864      	ldr	r4, [r4, #4]
 80094fe:	e7b2      	b.n	8009466 <_malloc_r+0x32>
 8009500:	4634      	mov	r4, r6
 8009502:	6876      	ldr	r6, [r6, #4]
 8009504:	e7b9      	b.n	800947a <_malloc_r+0x46>
 8009506:	230c      	movs	r3, #12
 8009508:	603b      	str	r3, [r7, #0]
 800950a:	4638      	mov	r0, r7
 800950c:	f000 f8a6 	bl	800965c <__malloc_unlock>
 8009510:	e7a1      	b.n	8009456 <_malloc_r+0x22>
 8009512:	6025      	str	r5, [r4, #0]
 8009514:	e7de      	b.n	80094d4 <_malloc_r+0xa0>
 8009516:	bf00      	nop
 8009518:	20002f64 	.word	0x20002f64

0800951c <srand>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4b10      	ldr	r3, [pc, #64]	; (8009560 <srand+0x44>)
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009524:	4604      	mov	r4, r0
 8009526:	b9b3      	cbnz	r3, 8009556 <srand+0x3a>
 8009528:	2018      	movs	r0, #24
 800952a:	f7ff fef9 	bl	8009320 <malloc>
 800952e:	4602      	mov	r2, r0
 8009530:	63a8      	str	r0, [r5, #56]	; 0x38
 8009532:	b920      	cbnz	r0, 800953e <srand+0x22>
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <srand+0x48>)
 8009536:	480c      	ldr	r0, [pc, #48]	; (8009568 <srand+0x4c>)
 8009538:	2142      	movs	r1, #66	; 0x42
 800953a:	f000 f847 	bl	80095cc <__assert_func>
 800953e:	490b      	ldr	r1, [pc, #44]	; (800956c <srand+0x50>)
 8009540:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <srand+0x54>)
 8009542:	e9c0 1300 	strd	r1, r3, [r0]
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <srand+0x58>)
 8009548:	6083      	str	r3, [r0, #8]
 800954a:	230b      	movs	r3, #11
 800954c:	8183      	strh	r3, [r0, #12]
 800954e:	2100      	movs	r1, #0
 8009550:	2001      	movs	r0, #1
 8009552:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009556:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009558:	2200      	movs	r2, #0
 800955a:	611c      	str	r4, [r3, #16]
 800955c:	615a      	str	r2, [r3, #20]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20000108 	.word	0x20000108
 8009564:	0800a528 	.word	0x0800a528
 8009568:	0800a53f 	.word	0x0800a53f
 800956c:	abcd330e 	.word	0xabcd330e
 8009570:	e66d1234 	.word	0xe66d1234
 8009574:	0005deec 	.word	0x0005deec

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7ff fd76 	bl	8009074 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20002f6c 	.word	0x20002f6c

08009598 <time>:
 8009598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <time+0x30>)
 800959c:	2200      	movs	r2, #0
 800959e:	4669      	mov	r1, sp
 80095a0:	4604      	mov	r4, r0
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	f000 f842 	bl	800962c <_gettimeofday_r>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	bfbe      	ittt	lt
 80095ac:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80095b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095b4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80095b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095bc:	b10c      	cbz	r4, 80095c2 <time+0x2a>
 80095be:	e9c4 0100 	strd	r0, r1, [r4]
 80095c2:	b004      	add	sp, #16
 80095c4:	bd10      	pop	{r4, pc}
 80095c6:	bf00      	nop
 80095c8:	20000108 	.word	0x20000108

080095cc <__assert_func>:
 80095cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ce:	4614      	mov	r4, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <__assert_func+0x2c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4605      	mov	r5, r0
 80095d8:	68d8      	ldr	r0, [r3, #12]
 80095da:	b14c      	cbz	r4, 80095f0 <__assert_func+0x24>
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <__assert_func+0x30>)
 80095de:	9100      	str	r1, [sp, #0]
 80095e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <__assert_func+0x34>)
 80095e6:	462b      	mov	r3, r5
 80095e8:	f000 f80e 	bl	8009608 <fiprintf>
 80095ec:	f000 fbea 	bl	8009dc4 <abort>
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <__assert_func+0x38>)
 80095f2:	461c      	mov	r4, r3
 80095f4:	e7f3      	b.n	80095de <__assert_func+0x12>
 80095f6:	bf00      	nop
 80095f8:	20000108 	.word	0x20000108
 80095fc:	0800a59a 	.word	0x0800a59a
 8009600:	0800a5a7 	.word	0x0800a5a7
 8009604:	0800a5d5 	.word	0x0800a5d5

08009608 <fiprintf>:
 8009608:	b40e      	push	{r1, r2, r3}
 800960a:	b503      	push	{r0, r1, lr}
 800960c:	4601      	mov	r1, r0
 800960e:	ab03      	add	r3, sp, #12
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <fiprintf+0x20>)
 8009612:	f853 2b04 	ldr.w	r2, [r3], #4
 8009616:	6800      	ldr	r0, [r0, #0]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f000 f84f 	bl	80096bc <_vfiprintf_r>
 800961e:	b002      	add	sp, #8
 8009620:	f85d eb04 	ldr.w	lr, [sp], #4
 8009624:	b003      	add	sp, #12
 8009626:	4770      	bx	lr
 8009628:	20000108 	.word	0x20000108

0800962c <_gettimeofday_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	; (800964c <_gettimeofday_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f000 fedb 	bl	800a3f4 <_gettimeofday>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_gettimeofday_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_gettimeofday_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20002f6c 	.word	0x20002f6c

08009650 <__malloc_lock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_lock+0x8>)
 8009652:	f000 bd77 	b.w	800a144 <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	20002f70 	.word	0x20002f70

0800965c <__malloc_unlock>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__malloc_unlock+0x8>)
 800965e:	f000 bd72 	b.w	800a146 <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	20002f70 	.word	0x20002f70

08009668 <__sfputc_r>:
 8009668:	6893      	ldr	r3, [r2, #8]
 800966a:	3b01      	subs	r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	b410      	push	{r4}
 8009670:	6093      	str	r3, [r2, #8]
 8009672:	da08      	bge.n	8009686 <__sfputc_r+0x1e>
 8009674:	6994      	ldr	r4, [r2, #24]
 8009676:	42a3      	cmp	r3, r4
 8009678:	db01      	blt.n	800967e <__sfputc_r+0x16>
 800967a:	290a      	cmp	r1, #10
 800967c:	d103      	bne.n	8009686 <__sfputc_r+0x1e>
 800967e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009682:	f000 badf 	b.w	8009c44 <__swbuf_r>
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	1c58      	adds	r0, r3, #1
 800968a:	6010      	str	r0, [r2, #0]
 800968c:	7019      	strb	r1, [r3, #0]
 800968e:	4608      	mov	r0, r1
 8009690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009694:	4770      	bx	lr

08009696 <__sfputs_r>:
 8009696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	4614      	mov	r4, r2
 800969e:	18d5      	adds	r5, r2, r3
 80096a0:	42ac      	cmp	r4, r5
 80096a2:	d101      	bne.n	80096a8 <__sfputs_r+0x12>
 80096a4:	2000      	movs	r0, #0
 80096a6:	e007      	b.n	80096b8 <__sfputs_r+0x22>
 80096a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ac:	463a      	mov	r2, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ffda 	bl	8009668 <__sfputc_r>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d1f3      	bne.n	80096a0 <__sfputs_r+0xa>
 80096b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096bc <_vfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	460d      	mov	r5, r1
 80096c2:	b09d      	sub	sp, #116	; 0x74
 80096c4:	4614      	mov	r4, r2
 80096c6:	4698      	mov	r8, r3
 80096c8:	4606      	mov	r6, r0
 80096ca:	b118      	cbz	r0, 80096d4 <_vfiprintf_r+0x18>
 80096cc:	6983      	ldr	r3, [r0, #24]
 80096ce:	b90b      	cbnz	r3, 80096d4 <_vfiprintf_r+0x18>
 80096d0:	f000 fc9a 	bl	800a008 <__sinit>
 80096d4:	4b89      	ldr	r3, [pc, #548]	; (80098fc <_vfiprintf_r+0x240>)
 80096d6:	429d      	cmp	r5, r3
 80096d8:	d11b      	bne.n	8009712 <_vfiprintf_r+0x56>
 80096da:	6875      	ldr	r5, [r6, #4]
 80096dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096de:	07d9      	lsls	r1, r3, #31
 80096e0:	d405      	bmi.n	80096ee <_vfiprintf_r+0x32>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	059a      	lsls	r2, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_vfiprintf_r+0x32>
 80096e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ea:	f000 fd2b 	bl	800a144 <__retarget_lock_acquire_recursive>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	071b      	lsls	r3, r3, #28
 80096f2:	d501      	bpl.n	80096f8 <_vfiprintf_r+0x3c>
 80096f4:	692b      	ldr	r3, [r5, #16]
 80096f6:	b9eb      	cbnz	r3, 8009734 <_vfiprintf_r+0x78>
 80096f8:	4629      	mov	r1, r5
 80096fa:	4630      	mov	r0, r6
 80096fc:	f000 faf4 	bl	8009ce8 <__swsetup_r>
 8009700:	b1c0      	cbz	r0, 8009734 <_vfiprintf_r+0x78>
 8009702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009704:	07dc      	lsls	r4, r3, #31
 8009706:	d50e      	bpl.n	8009726 <_vfiprintf_r+0x6a>
 8009708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800970c:	b01d      	add	sp, #116	; 0x74
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009712:	4b7b      	ldr	r3, [pc, #492]	; (8009900 <_vfiprintf_r+0x244>)
 8009714:	429d      	cmp	r5, r3
 8009716:	d101      	bne.n	800971c <_vfiprintf_r+0x60>
 8009718:	68b5      	ldr	r5, [r6, #8]
 800971a:	e7df      	b.n	80096dc <_vfiprintf_r+0x20>
 800971c:	4b79      	ldr	r3, [pc, #484]	; (8009904 <_vfiprintf_r+0x248>)
 800971e:	429d      	cmp	r5, r3
 8009720:	bf08      	it	eq
 8009722:	68f5      	ldreq	r5, [r6, #12]
 8009724:	e7da      	b.n	80096dc <_vfiprintf_r+0x20>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	0598      	lsls	r0, r3, #22
 800972a:	d4ed      	bmi.n	8009708 <_vfiprintf_r+0x4c>
 800972c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800972e:	f000 fd0a 	bl	800a146 <__retarget_lock_release_recursive>
 8009732:	e7e9      	b.n	8009708 <_vfiprintf_r+0x4c>
 8009734:	2300      	movs	r3, #0
 8009736:	9309      	str	r3, [sp, #36]	; 0x24
 8009738:	2320      	movs	r3, #32
 800973a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800973e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009742:	2330      	movs	r3, #48	; 0x30
 8009744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009908 <_vfiprintf_r+0x24c>
 8009748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800974c:	f04f 0901 	mov.w	r9, #1
 8009750:	4623      	mov	r3, r4
 8009752:	469a      	mov	sl, r3
 8009754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009758:	b10a      	cbz	r2, 800975e <_vfiprintf_r+0xa2>
 800975a:	2a25      	cmp	r2, #37	; 0x25
 800975c:	d1f9      	bne.n	8009752 <_vfiprintf_r+0x96>
 800975e:	ebba 0b04 	subs.w	fp, sl, r4
 8009762:	d00b      	beq.n	800977c <_vfiprintf_r+0xc0>
 8009764:	465b      	mov	r3, fp
 8009766:	4622      	mov	r2, r4
 8009768:	4629      	mov	r1, r5
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ff93 	bl	8009696 <__sfputs_r>
 8009770:	3001      	adds	r0, #1
 8009772:	f000 80aa 	beq.w	80098ca <_vfiprintf_r+0x20e>
 8009776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009778:	445a      	add	r2, fp
 800977a:	9209      	str	r2, [sp, #36]	; 0x24
 800977c:	f89a 3000 	ldrb.w	r3, [sl]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 80a2 	beq.w	80098ca <_vfiprintf_r+0x20e>
 8009786:	2300      	movs	r3, #0
 8009788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800978c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009790:	f10a 0a01 	add.w	sl, sl, #1
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	9307      	str	r3, [sp, #28]
 8009798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800979c:	931a      	str	r3, [sp, #104]	; 0x68
 800979e:	4654      	mov	r4, sl
 80097a0:	2205      	movs	r2, #5
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	4858      	ldr	r0, [pc, #352]	; (8009908 <_vfiprintf_r+0x24c>)
 80097a8:	f7f6 fd12 	bl	80001d0 <memchr>
 80097ac:	9a04      	ldr	r2, [sp, #16]
 80097ae:	b9d8      	cbnz	r0, 80097e8 <_vfiprintf_r+0x12c>
 80097b0:	06d1      	lsls	r1, r2, #27
 80097b2:	bf44      	itt	mi
 80097b4:	2320      	movmi	r3, #32
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ba:	0713      	lsls	r3, r2, #28
 80097bc:	bf44      	itt	mi
 80097be:	232b      	movmi	r3, #43	; 0x2b
 80097c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c4:	f89a 3000 	ldrb.w	r3, [sl]
 80097c8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ca:	d015      	beq.n	80097f8 <_vfiprintf_r+0x13c>
 80097cc:	9a07      	ldr	r2, [sp, #28]
 80097ce:	4654      	mov	r4, sl
 80097d0:	2000      	movs	r0, #0
 80097d2:	f04f 0c0a 	mov.w	ip, #10
 80097d6:	4621      	mov	r1, r4
 80097d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097dc:	3b30      	subs	r3, #48	; 0x30
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d94e      	bls.n	8009880 <_vfiprintf_r+0x1c4>
 80097e2:	b1b0      	cbz	r0, 8009812 <_vfiprintf_r+0x156>
 80097e4:	9207      	str	r2, [sp, #28]
 80097e6:	e014      	b.n	8009812 <_vfiprintf_r+0x156>
 80097e8:	eba0 0308 	sub.w	r3, r0, r8
 80097ec:	fa09 f303 	lsl.w	r3, r9, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	46a2      	mov	sl, r4
 80097f6:	e7d2      	b.n	800979e <_vfiprintf_r+0xe2>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	1d19      	adds	r1, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	9103      	str	r1, [sp, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfbb      	ittet	lt
 8009804:	425b      	neglt	r3, r3
 8009806:	f042 0202 	orrlt.w	r2, r2, #2
 800980a:	9307      	strge	r3, [sp, #28]
 800980c:	9307      	strlt	r3, [sp, #28]
 800980e:	bfb8      	it	lt
 8009810:	9204      	strlt	r2, [sp, #16]
 8009812:	7823      	ldrb	r3, [r4, #0]
 8009814:	2b2e      	cmp	r3, #46	; 0x2e
 8009816:	d10c      	bne.n	8009832 <_vfiprintf_r+0x176>
 8009818:	7863      	ldrb	r3, [r4, #1]
 800981a:	2b2a      	cmp	r3, #42	; 0x2a
 800981c:	d135      	bne.n	800988a <_vfiprintf_r+0x1ce>
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	1d1a      	adds	r2, r3, #4
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	9203      	str	r2, [sp, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfb8      	it	lt
 800982a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800982e:	3402      	adds	r4, #2
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009918 <_vfiprintf_r+0x25c>
 8009836:	7821      	ldrb	r1, [r4, #0]
 8009838:	2203      	movs	r2, #3
 800983a:	4650      	mov	r0, sl
 800983c:	f7f6 fcc8 	bl	80001d0 <memchr>
 8009840:	b140      	cbz	r0, 8009854 <_vfiprintf_r+0x198>
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	eba0 000a 	sub.w	r0, r0, sl
 8009848:	fa03 f000 	lsl.w	r0, r3, r0
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	4303      	orrs	r3, r0
 8009850:	3401      	adds	r4, #1
 8009852:	9304      	str	r3, [sp, #16]
 8009854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009858:	482c      	ldr	r0, [pc, #176]	; (800990c <_vfiprintf_r+0x250>)
 800985a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800985e:	2206      	movs	r2, #6
 8009860:	f7f6 fcb6 	bl	80001d0 <memchr>
 8009864:	2800      	cmp	r0, #0
 8009866:	d03f      	beq.n	80098e8 <_vfiprintf_r+0x22c>
 8009868:	4b29      	ldr	r3, [pc, #164]	; (8009910 <_vfiprintf_r+0x254>)
 800986a:	bb1b      	cbnz	r3, 80098b4 <_vfiprintf_r+0x1f8>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	3307      	adds	r3, #7
 8009870:	f023 0307 	bic.w	r3, r3, #7
 8009874:	3308      	adds	r3, #8
 8009876:	9303      	str	r3, [sp, #12]
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	443b      	add	r3, r7
 800987c:	9309      	str	r3, [sp, #36]	; 0x24
 800987e:	e767      	b.n	8009750 <_vfiprintf_r+0x94>
 8009880:	fb0c 3202 	mla	r2, ip, r2, r3
 8009884:	460c      	mov	r4, r1
 8009886:	2001      	movs	r0, #1
 8009888:	e7a5      	b.n	80097d6 <_vfiprintf_r+0x11a>
 800988a:	2300      	movs	r3, #0
 800988c:	3401      	adds	r4, #1
 800988e:	9305      	str	r3, [sp, #20]
 8009890:	4619      	mov	r1, r3
 8009892:	f04f 0c0a 	mov.w	ip, #10
 8009896:	4620      	mov	r0, r4
 8009898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800989c:	3a30      	subs	r2, #48	; 0x30
 800989e:	2a09      	cmp	r2, #9
 80098a0:	d903      	bls.n	80098aa <_vfiprintf_r+0x1ee>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0c5      	beq.n	8009832 <_vfiprintf_r+0x176>
 80098a6:	9105      	str	r1, [sp, #20]
 80098a8:	e7c3      	b.n	8009832 <_vfiprintf_r+0x176>
 80098aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ae:	4604      	mov	r4, r0
 80098b0:	2301      	movs	r3, #1
 80098b2:	e7f0      	b.n	8009896 <_vfiprintf_r+0x1da>
 80098b4:	ab03      	add	r3, sp, #12
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	462a      	mov	r2, r5
 80098ba:	4b16      	ldr	r3, [pc, #88]	; (8009914 <_vfiprintf_r+0x258>)
 80098bc:	a904      	add	r1, sp, #16
 80098be:	4630      	mov	r0, r6
 80098c0:	f3af 8000 	nop.w
 80098c4:	4607      	mov	r7, r0
 80098c6:	1c78      	adds	r0, r7, #1
 80098c8:	d1d6      	bne.n	8009878 <_vfiprintf_r+0x1bc>
 80098ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098cc:	07d9      	lsls	r1, r3, #31
 80098ce:	d405      	bmi.n	80098dc <_vfiprintf_r+0x220>
 80098d0:	89ab      	ldrh	r3, [r5, #12]
 80098d2:	059a      	lsls	r2, r3, #22
 80098d4:	d402      	bmi.n	80098dc <_vfiprintf_r+0x220>
 80098d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d8:	f000 fc35 	bl	800a146 <__retarget_lock_release_recursive>
 80098dc:	89ab      	ldrh	r3, [r5, #12]
 80098de:	065b      	lsls	r3, r3, #25
 80098e0:	f53f af12 	bmi.w	8009708 <_vfiprintf_r+0x4c>
 80098e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098e6:	e711      	b.n	800970c <_vfiprintf_r+0x50>
 80098e8:	ab03      	add	r3, sp, #12
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	462a      	mov	r2, r5
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <_vfiprintf_r+0x258>)
 80098f0:	a904      	add	r1, sp, #16
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f880 	bl	80099f8 <_printf_i>
 80098f8:	e7e4      	b.n	80098c4 <_vfiprintf_r+0x208>
 80098fa:	bf00      	nop
 80098fc:	0800a62c 	.word	0x0800a62c
 8009900:	0800a64c 	.word	0x0800a64c
 8009904:	0800a60c 	.word	0x0800a60c
 8009908:	0800a5d6 	.word	0x0800a5d6
 800990c:	0800a5e0 	.word	0x0800a5e0
 8009910:	00000000 	.word	0x00000000
 8009914:	08009697 	.word	0x08009697
 8009918:	0800a5dc 	.word	0x0800a5dc

0800991c <_printf_common>:
 800991c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009920:	4616      	mov	r6, r2
 8009922:	4699      	mov	r9, r3
 8009924:	688a      	ldr	r2, [r1, #8]
 8009926:	690b      	ldr	r3, [r1, #16]
 8009928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800992c:	4293      	cmp	r3, r2
 800992e:	bfb8      	it	lt
 8009930:	4613      	movlt	r3, r2
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009938:	4607      	mov	r7, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b10a      	cbz	r2, 8009942 <_printf_common+0x26>
 800993e:	3301      	adds	r3, #1
 8009940:	6033      	str	r3, [r6, #0]
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	0699      	lsls	r1, r3, #26
 8009946:	bf42      	ittt	mi
 8009948:	6833      	ldrmi	r3, [r6, #0]
 800994a:	3302      	addmi	r3, #2
 800994c:	6033      	strmi	r3, [r6, #0]
 800994e:	6825      	ldr	r5, [r4, #0]
 8009950:	f015 0506 	ands.w	r5, r5, #6
 8009954:	d106      	bne.n	8009964 <_printf_common+0x48>
 8009956:	f104 0a19 	add.w	sl, r4, #25
 800995a:	68e3      	ldr	r3, [r4, #12]
 800995c:	6832      	ldr	r2, [r6, #0]
 800995e:	1a9b      	subs	r3, r3, r2
 8009960:	42ab      	cmp	r3, r5
 8009962:	dc26      	bgt.n	80099b2 <_printf_common+0x96>
 8009964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009968:	1e13      	subs	r3, r2, #0
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	bf18      	it	ne
 800996e:	2301      	movne	r3, #1
 8009970:	0692      	lsls	r2, r2, #26
 8009972:	d42b      	bmi.n	80099cc <_printf_common+0xb0>
 8009974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009978:	4649      	mov	r1, r9
 800997a:	4638      	mov	r0, r7
 800997c:	47c0      	blx	r8
 800997e:	3001      	adds	r0, #1
 8009980:	d01e      	beq.n	80099c0 <_printf_common+0xa4>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	68e5      	ldr	r5, [r4, #12]
 8009986:	6832      	ldr	r2, [r6, #0]
 8009988:	f003 0306 	and.w	r3, r3, #6
 800998c:	2b04      	cmp	r3, #4
 800998e:	bf08      	it	eq
 8009990:	1aad      	subeq	r5, r5, r2
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	6922      	ldr	r2, [r4, #16]
 8009996:	bf0c      	ite	eq
 8009998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800999c:	2500      	movne	r5, #0
 800999e:	4293      	cmp	r3, r2
 80099a0:	bfc4      	itt	gt
 80099a2:	1a9b      	subgt	r3, r3, r2
 80099a4:	18ed      	addgt	r5, r5, r3
 80099a6:	2600      	movs	r6, #0
 80099a8:	341a      	adds	r4, #26
 80099aa:	42b5      	cmp	r5, r6
 80099ac:	d11a      	bne.n	80099e4 <_printf_common+0xc8>
 80099ae:	2000      	movs	r0, #0
 80099b0:	e008      	b.n	80099c4 <_printf_common+0xa8>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4652      	mov	r2, sl
 80099b6:	4649      	mov	r1, r9
 80099b8:	4638      	mov	r0, r7
 80099ba:	47c0      	blx	r8
 80099bc:	3001      	adds	r0, #1
 80099be:	d103      	bne.n	80099c8 <_printf_common+0xac>
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c8:	3501      	adds	r5, #1
 80099ca:	e7c6      	b.n	800995a <_printf_common+0x3e>
 80099cc:	18e1      	adds	r1, r4, r3
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	2030      	movs	r0, #48	; 0x30
 80099d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099d6:	4422      	add	r2, r4
 80099d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099e0:	3302      	adds	r3, #2
 80099e2:	e7c7      	b.n	8009974 <_printf_common+0x58>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4622      	mov	r2, r4
 80099e8:	4649      	mov	r1, r9
 80099ea:	4638      	mov	r0, r7
 80099ec:	47c0      	blx	r8
 80099ee:	3001      	adds	r0, #1
 80099f0:	d0e6      	beq.n	80099c0 <_printf_common+0xa4>
 80099f2:	3601      	adds	r6, #1
 80099f4:	e7d9      	b.n	80099aa <_printf_common+0x8e>
	...

080099f8 <_printf_i>:
 80099f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099fc:	7e0f      	ldrb	r7, [r1, #24]
 80099fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a00:	2f78      	cmp	r7, #120	; 0x78
 8009a02:	4691      	mov	r9, r2
 8009a04:	4680      	mov	r8, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	469a      	mov	sl, r3
 8009a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a0e:	d807      	bhi.n	8009a20 <_printf_i+0x28>
 8009a10:	2f62      	cmp	r7, #98	; 0x62
 8009a12:	d80a      	bhi.n	8009a2a <_printf_i+0x32>
 8009a14:	2f00      	cmp	r7, #0
 8009a16:	f000 80d8 	beq.w	8009bca <_printf_i+0x1d2>
 8009a1a:	2f58      	cmp	r7, #88	; 0x58
 8009a1c:	f000 80a3 	beq.w	8009b66 <_printf_i+0x16e>
 8009a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a28:	e03a      	b.n	8009aa0 <_printf_i+0xa8>
 8009a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a2e:	2b15      	cmp	r3, #21
 8009a30:	d8f6      	bhi.n	8009a20 <_printf_i+0x28>
 8009a32:	a101      	add	r1, pc, #4	; (adr r1, 8009a38 <_printf_i+0x40>)
 8009a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a38:	08009a91 	.word	0x08009a91
 8009a3c:	08009aa5 	.word	0x08009aa5
 8009a40:	08009a21 	.word	0x08009a21
 8009a44:	08009a21 	.word	0x08009a21
 8009a48:	08009a21 	.word	0x08009a21
 8009a4c:	08009a21 	.word	0x08009a21
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	08009a21 	.word	0x08009a21
 8009a58:	08009a21 	.word	0x08009a21
 8009a5c:	08009a21 	.word	0x08009a21
 8009a60:	08009a21 	.word	0x08009a21
 8009a64:	08009bb1 	.word	0x08009bb1
 8009a68:	08009ad5 	.word	0x08009ad5
 8009a6c:	08009b93 	.word	0x08009b93
 8009a70:	08009a21 	.word	0x08009a21
 8009a74:	08009a21 	.word	0x08009a21
 8009a78:	08009bd3 	.word	0x08009bd3
 8009a7c:	08009a21 	.word	0x08009a21
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009a21 	.word	0x08009a21
 8009a88:	08009a21 	.word	0x08009a21
 8009a8c:	08009b9b 	.word	0x08009b9b
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	602a      	str	r2, [r5, #0]
 8009a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e0a3      	b.n	8009bec <_printf_i+0x1f4>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	6829      	ldr	r1, [r5, #0]
 8009aa8:	0606      	lsls	r6, r0, #24
 8009aaa:	f101 0304 	add.w	r3, r1, #4
 8009aae:	d50a      	bpl.n	8009ac6 <_printf_i+0xce>
 8009ab0:	680e      	ldr	r6, [r1, #0]
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	2e00      	cmp	r6, #0
 8009ab6:	da03      	bge.n	8009ac0 <_printf_i+0xc8>
 8009ab8:	232d      	movs	r3, #45	; 0x2d
 8009aba:	4276      	negs	r6, r6
 8009abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ac0:	485e      	ldr	r0, [pc, #376]	; (8009c3c <_printf_i+0x244>)
 8009ac2:	230a      	movs	r3, #10
 8009ac4:	e019      	b.n	8009afa <_printf_i+0x102>
 8009ac6:	680e      	ldr	r6, [r1, #0]
 8009ac8:	602b      	str	r3, [r5, #0]
 8009aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ace:	bf18      	it	ne
 8009ad0:	b236      	sxthne	r6, r6
 8009ad2:	e7ef      	b.n	8009ab4 <_printf_i+0xbc>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	6820      	ldr	r0, [r4, #0]
 8009ad8:	1d19      	adds	r1, r3, #4
 8009ada:	6029      	str	r1, [r5, #0]
 8009adc:	0601      	lsls	r1, r0, #24
 8009ade:	d501      	bpl.n	8009ae4 <_printf_i+0xec>
 8009ae0:	681e      	ldr	r6, [r3, #0]
 8009ae2:	e002      	b.n	8009aea <_printf_i+0xf2>
 8009ae4:	0646      	lsls	r6, r0, #25
 8009ae6:	d5fb      	bpl.n	8009ae0 <_printf_i+0xe8>
 8009ae8:	881e      	ldrh	r6, [r3, #0]
 8009aea:	4854      	ldr	r0, [pc, #336]	; (8009c3c <_printf_i+0x244>)
 8009aec:	2f6f      	cmp	r7, #111	; 0x6f
 8009aee:	bf0c      	ite	eq
 8009af0:	2308      	moveq	r3, #8
 8009af2:	230a      	movne	r3, #10
 8009af4:	2100      	movs	r1, #0
 8009af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009afa:	6865      	ldr	r5, [r4, #4]
 8009afc:	60a5      	str	r5, [r4, #8]
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	bfa2      	ittt	ge
 8009b02:	6821      	ldrge	r1, [r4, #0]
 8009b04:	f021 0104 	bicge.w	r1, r1, #4
 8009b08:	6021      	strge	r1, [r4, #0]
 8009b0a:	b90e      	cbnz	r6, 8009b10 <_printf_i+0x118>
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	d04d      	beq.n	8009bac <_printf_i+0x1b4>
 8009b10:	4615      	mov	r5, r2
 8009b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b16:	fb03 6711 	mls	r7, r3, r1, r6
 8009b1a:	5dc7      	ldrb	r7, [r0, r7]
 8009b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b20:	4637      	mov	r7, r6
 8009b22:	42bb      	cmp	r3, r7
 8009b24:	460e      	mov	r6, r1
 8009b26:	d9f4      	bls.n	8009b12 <_printf_i+0x11a>
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d10b      	bne.n	8009b44 <_printf_i+0x14c>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	07de      	lsls	r6, r3, #31
 8009b30:	d508      	bpl.n	8009b44 <_printf_i+0x14c>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	6861      	ldr	r1, [r4, #4]
 8009b36:	4299      	cmp	r1, r3
 8009b38:	bfde      	ittt	le
 8009b3a:	2330      	movle	r3, #48	; 0x30
 8009b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b44:	1b52      	subs	r2, r2, r5
 8009b46:	6122      	str	r2, [r4, #16]
 8009b48:	f8cd a000 	str.w	sl, [sp]
 8009b4c:	464b      	mov	r3, r9
 8009b4e:	aa03      	add	r2, sp, #12
 8009b50:	4621      	mov	r1, r4
 8009b52:	4640      	mov	r0, r8
 8009b54:	f7ff fee2 	bl	800991c <_printf_common>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d14c      	bne.n	8009bf6 <_printf_i+0x1fe>
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b60:	b004      	add	sp, #16
 8009b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b66:	4835      	ldr	r0, [pc, #212]	; (8009c3c <_printf_i+0x244>)
 8009b68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b6c:	6829      	ldr	r1, [r5, #0]
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b74:	6029      	str	r1, [r5, #0]
 8009b76:	061d      	lsls	r5, r3, #24
 8009b78:	d514      	bpl.n	8009ba4 <_printf_i+0x1ac>
 8009b7a:	07df      	lsls	r7, r3, #31
 8009b7c:	bf44      	itt	mi
 8009b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b82:	6023      	strmi	r3, [r4, #0]
 8009b84:	b91e      	cbnz	r6, 8009b8e <_printf_i+0x196>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f023 0320 	bic.w	r3, r3, #32
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	2310      	movs	r3, #16
 8009b90:	e7b0      	b.n	8009af4 <_printf_i+0xfc>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	f043 0320 	orr.w	r3, r3, #32
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	2378      	movs	r3, #120	; 0x78
 8009b9c:	4828      	ldr	r0, [pc, #160]	; (8009c40 <_printf_i+0x248>)
 8009b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ba2:	e7e3      	b.n	8009b6c <_printf_i+0x174>
 8009ba4:	0659      	lsls	r1, r3, #25
 8009ba6:	bf48      	it	mi
 8009ba8:	b2b6      	uxthmi	r6, r6
 8009baa:	e7e6      	b.n	8009b7a <_printf_i+0x182>
 8009bac:	4615      	mov	r5, r2
 8009bae:	e7bb      	b.n	8009b28 <_printf_i+0x130>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	6826      	ldr	r6, [r4, #0]
 8009bb4:	6961      	ldr	r1, [r4, #20]
 8009bb6:	1d18      	adds	r0, r3, #4
 8009bb8:	6028      	str	r0, [r5, #0]
 8009bba:	0635      	lsls	r5, r6, #24
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	d501      	bpl.n	8009bc4 <_printf_i+0x1cc>
 8009bc0:	6019      	str	r1, [r3, #0]
 8009bc2:	e002      	b.n	8009bca <_printf_i+0x1d2>
 8009bc4:	0670      	lsls	r0, r6, #25
 8009bc6:	d5fb      	bpl.n	8009bc0 <_printf_i+0x1c8>
 8009bc8:	8019      	strh	r1, [r3, #0]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6123      	str	r3, [r4, #16]
 8009bce:	4615      	mov	r5, r2
 8009bd0:	e7ba      	b.n	8009b48 <_printf_i+0x150>
 8009bd2:	682b      	ldr	r3, [r5, #0]
 8009bd4:	1d1a      	adds	r2, r3, #4
 8009bd6:	602a      	str	r2, [r5, #0]
 8009bd8:	681d      	ldr	r5, [r3, #0]
 8009bda:	6862      	ldr	r2, [r4, #4]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4628      	mov	r0, r5
 8009be0:	f7f6 faf6 	bl	80001d0 <memchr>
 8009be4:	b108      	cbz	r0, 8009bea <_printf_i+0x1f2>
 8009be6:	1b40      	subs	r0, r0, r5
 8009be8:	6060      	str	r0, [r4, #4]
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	6123      	str	r3, [r4, #16]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf4:	e7a8      	b.n	8009b48 <_printf_i+0x150>
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	4640      	mov	r0, r8
 8009bfe:	47d0      	blx	sl
 8009c00:	3001      	adds	r0, #1
 8009c02:	d0ab      	beq.n	8009b5c <_printf_i+0x164>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	079b      	lsls	r3, r3, #30
 8009c08:	d413      	bmi.n	8009c32 <_printf_i+0x23a>
 8009c0a:	68e0      	ldr	r0, [r4, #12]
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	4298      	cmp	r0, r3
 8009c10:	bfb8      	it	lt
 8009c12:	4618      	movlt	r0, r3
 8009c14:	e7a4      	b.n	8009b60 <_printf_i+0x168>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4632      	mov	r2, r6
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	4640      	mov	r0, r8
 8009c1e:	47d0      	blx	sl
 8009c20:	3001      	adds	r0, #1
 8009c22:	d09b      	beq.n	8009b5c <_printf_i+0x164>
 8009c24:	3501      	adds	r5, #1
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	9903      	ldr	r1, [sp, #12]
 8009c2a:	1a5b      	subs	r3, r3, r1
 8009c2c:	42ab      	cmp	r3, r5
 8009c2e:	dcf2      	bgt.n	8009c16 <_printf_i+0x21e>
 8009c30:	e7eb      	b.n	8009c0a <_printf_i+0x212>
 8009c32:	2500      	movs	r5, #0
 8009c34:	f104 0619 	add.w	r6, r4, #25
 8009c38:	e7f5      	b.n	8009c26 <_printf_i+0x22e>
 8009c3a:	bf00      	nop
 8009c3c:	0800a5e7 	.word	0x0800a5e7
 8009c40:	0800a5f8 	.word	0x0800a5f8

08009c44 <__swbuf_r>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	460e      	mov	r6, r1
 8009c48:	4614      	mov	r4, r2
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	b118      	cbz	r0, 8009c56 <__swbuf_r+0x12>
 8009c4e:	6983      	ldr	r3, [r0, #24]
 8009c50:	b90b      	cbnz	r3, 8009c56 <__swbuf_r+0x12>
 8009c52:	f000 f9d9 	bl	800a008 <__sinit>
 8009c56:	4b21      	ldr	r3, [pc, #132]	; (8009cdc <__swbuf_r+0x98>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d12b      	bne.n	8009cb4 <__swbuf_r+0x70>
 8009c5c:	686c      	ldr	r4, [r5, #4]
 8009c5e:	69a3      	ldr	r3, [r4, #24]
 8009c60:	60a3      	str	r3, [r4, #8]
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	071a      	lsls	r2, r3, #28
 8009c66:	d52f      	bpl.n	8009cc8 <__swbuf_r+0x84>
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	b36b      	cbz	r3, 8009cc8 <__swbuf_r+0x84>
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	1ac0      	subs	r0, r0, r3
 8009c72:	6963      	ldr	r3, [r4, #20]
 8009c74:	b2f6      	uxtb	r6, r6
 8009c76:	4283      	cmp	r3, r0
 8009c78:	4637      	mov	r7, r6
 8009c7a:	dc04      	bgt.n	8009c86 <__swbuf_r+0x42>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f000 f92e 	bl	8009ee0 <_fflush_r>
 8009c84:	bb30      	cbnz	r0, 8009cd4 <__swbuf_r+0x90>
 8009c86:	68a3      	ldr	r3, [r4, #8]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	60a3      	str	r3, [r4, #8]
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	6022      	str	r2, [r4, #0]
 8009c92:	701e      	strb	r6, [r3, #0]
 8009c94:	6963      	ldr	r3, [r4, #20]
 8009c96:	3001      	adds	r0, #1
 8009c98:	4283      	cmp	r3, r0
 8009c9a:	d004      	beq.n	8009ca6 <__swbuf_r+0x62>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	07db      	lsls	r3, r3, #31
 8009ca0:	d506      	bpl.n	8009cb0 <__swbuf_r+0x6c>
 8009ca2:	2e0a      	cmp	r6, #10
 8009ca4:	d104      	bne.n	8009cb0 <__swbuf_r+0x6c>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 f919 	bl	8009ee0 <_fflush_r>
 8009cae:	b988      	cbnz	r0, 8009cd4 <__swbuf_r+0x90>
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <__swbuf_r+0x9c>)
 8009cb6:	429c      	cmp	r4, r3
 8009cb8:	d101      	bne.n	8009cbe <__swbuf_r+0x7a>
 8009cba:	68ac      	ldr	r4, [r5, #8]
 8009cbc:	e7cf      	b.n	8009c5e <__swbuf_r+0x1a>
 8009cbe:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <__swbuf_r+0xa0>)
 8009cc0:	429c      	cmp	r4, r3
 8009cc2:	bf08      	it	eq
 8009cc4:	68ec      	ldreq	r4, [r5, #12]
 8009cc6:	e7ca      	b.n	8009c5e <__swbuf_r+0x1a>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f80c 	bl	8009ce8 <__swsetup_r>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d0cb      	beq.n	8009c6c <__swbuf_r+0x28>
 8009cd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009cd8:	e7ea      	b.n	8009cb0 <__swbuf_r+0x6c>
 8009cda:	bf00      	nop
 8009cdc:	0800a62c 	.word	0x0800a62c
 8009ce0:	0800a64c 	.word	0x0800a64c
 8009ce4:	0800a60c 	.word	0x0800a60c

08009ce8 <__swsetup_r>:
 8009ce8:	4b32      	ldr	r3, [pc, #200]	; (8009db4 <__swsetup_r+0xcc>)
 8009cea:	b570      	push	{r4, r5, r6, lr}
 8009cec:	681d      	ldr	r5, [r3, #0]
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	b125      	cbz	r5, 8009cfe <__swsetup_r+0x16>
 8009cf4:	69ab      	ldr	r3, [r5, #24]
 8009cf6:	b913      	cbnz	r3, 8009cfe <__swsetup_r+0x16>
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f000 f985 	bl	800a008 <__sinit>
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <__swsetup_r+0xd0>)
 8009d00:	429c      	cmp	r4, r3
 8009d02:	d10f      	bne.n	8009d24 <__swsetup_r+0x3c>
 8009d04:	686c      	ldr	r4, [r5, #4]
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d0c:	0719      	lsls	r1, r3, #28
 8009d0e:	d42c      	bmi.n	8009d6a <__swsetup_r+0x82>
 8009d10:	06dd      	lsls	r5, r3, #27
 8009d12:	d411      	bmi.n	8009d38 <__swsetup_r+0x50>
 8009d14:	2309      	movs	r3, #9
 8009d16:	6033      	str	r3, [r6, #0]
 8009d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d22:	e03e      	b.n	8009da2 <__swsetup_r+0xba>
 8009d24:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <__swsetup_r+0xd4>)
 8009d26:	429c      	cmp	r4, r3
 8009d28:	d101      	bne.n	8009d2e <__swsetup_r+0x46>
 8009d2a:	68ac      	ldr	r4, [r5, #8]
 8009d2c:	e7eb      	b.n	8009d06 <__swsetup_r+0x1e>
 8009d2e:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <__swsetup_r+0xd8>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	bf08      	it	eq
 8009d34:	68ec      	ldreq	r4, [r5, #12]
 8009d36:	e7e6      	b.n	8009d06 <__swsetup_r+0x1e>
 8009d38:	0758      	lsls	r0, r3, #29
 8009d3a:	d512      	bpl.n	8009d62 <__swsetup_r+0x7a>
 8009d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d3e:	b141      	cbz	r1, 8009d52 <__swsetup_r+0x6a>
 8009d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d44:	4299      	cmp	r1, r3
 8009d46:	d002      	beq.n	8009d4e <__swsetup_r+0x66>
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff fb07 	bl	800935c <_free_r>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6363      	str	r3, [r4, #52]	; 0x34
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6063      	str	r3, [r4, #4]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f043 0308 	orr.w	r3, r3, #8
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <__swsetup_r+0x9a>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d78:	d003      	beq.n	8009d82 <__swsetup_r+0x9a>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f000 fa09 	bl	800a194 <__smakebuf_r>
 8009d82:	89a0      	ldrh	r0, [r4, #12]
 8009d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d88:	f010 0301 	ands.w	r3, r0, #1
 8009d8c:	d00a      	beq.n	8009da4 <__swsetup_r+0xbc>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	6963      	ldr	r3, [r4, #20]
 8009d94:	425b      	negs	r3, r3
 8009d96:	61a3      	str	r3, [r4, #24]
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	b943      	cbnz	r3, 8009dae <__swsetup_r+0xc6>
 8009d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009da0:	d1ba      	bne.n	8009d18 <__swsetup_r+0x30>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	0781      	lsls	r1, r0, #30
 8009da6:	bf58      	it	pl
 8009da8:	6963      	ldrpl	r3, [r4, #20]
 8009daa:	60a3      	str	r3, [r4, #8]
 8009dac:	e7f4      	b.n	8009d98 <__swsetup_r+0xb0>
 8009dae:	2000      	movs	r0, #0
 8009db0:	e7f7      	b.n	8009da2 <__swsetup_r+0xba>
 8009db2:	bf00      	nop
 8009db4:	20000108 	.word	0x20000108
 8009db8:	0800a62c 	.word	0x0800a62c
 8009dbc:	0800a64c 	.word	0x0800a64c
 8009dc0:	0800a60c 	.word	0x0800a60c

08009dc4 <abort>:
 8009dc4:	b508      	push	{r3, lr}
 8009dc6:	2006      	movs	r0, #6
 8009dc8:	f000 fa4c 	bl	800a264 <raise>
 8009dcc:	2001      	movs	r0, #1
 8009dce:	f7ff f8d9 	bl	8008f84 <_exit>
	...

08009dd4 <__sflush_r>:
 8009dd4:	898a      	ldrh	r2, [r1, #12]
 8009dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	4605      	mov	r5, r0
 8009ddc:	0710      	lsls	r0, r2, #28
 8009dde:	460c      	mov	r4, r1
 8009de0:	d458      	bmi.n	8009e94 <__sflush_r+0xc0>
 8009de2:	684b      	ldr	r3, [r1, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dc05      	bgt.n	8009df4 <__sflush_r+0x20>
 8009de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dc02      	bgt.n	8009df4 <__sflush_r+0x20>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	d0f9      	beq.n	8009dee <__sflush_r+0x1a>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e00:	682f      	ldr	r7, [r5, #0]
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	d032      	beq.n	8009e6c <__sflush_r+0x98>
 8009e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	075a      	lsls	r2, r3, #29
 8009e0c:	d505      	bpl.n	8009e1a <__sflush_r+0x46>
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	1ac0      	subs	r0, r0, r3
 8009e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e14:	b10b      	cbz	r3, 8009e1a <__sflush_r+0x46>
 8009e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e18:	1ac0      	subs	r0, r0, r3
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e20:	6a21      	ldr	r1, [r4, #32]
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b0      	blx	r6
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	d106      	bne.n	8009e3a <__sflush_r+0x66>
 8009e2c:	6829      	ldr	r1, [r5, #0]
 8009e2e:	291d      	cmp	r1, #29
 8009e30:	d82c      	bhi.n	8009e8c <__sflush_r+0xb8>
 8009e32:	4a2a      	ldr	r2, [pc, #168]	; (8009edc <__sflush_r+0x108>)
 8009e34:	40ca      	lsrs	r2, r1
 8009e36:	07d6      	lsls	r6, r2, #31
 8009e38:	d528      	bpl.n	8009e8c <__sflush_r+0xb8>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	6062      	str	r2, [r4, #4]
 8009e3e:	04d9      	lsls	r1, r3, #19
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	6022      	str	r2, [r4, #0]
 8009e44:	d504      	bpl.n	8009e50 <__sflush_r+0x7c>
 8009e46:	1c42      	adds	r2, r0, #1
 8009e48:	d101      	bne.n	8009e4e <__sflush_r+0x7a>
 8009e4a:	682b      	ldr	r3, [r5, #0]
 8009e4c:	b903      	cbnz	r3, 8009e50 <__sflush_r+0x7c>
 8009e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e52:	602f      	str	r7, [r5, #0]
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d0ca      	beq.n	8009dee <__sflush_r+0x1a>
 8009e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e5c:	4299      	cmp	r1, r3
 8009e5e:	d002      	beq.n	8009e66 <__sflush_r+0x92>
 8009e60:	4628      	mov	r0, r5
 8009e62:	f7ff fa7b 	bl	800935c <_free_r>
 8009e66:	2000      	movs	r0, #0
 8009e68:	6360      	str	r0, [r4, #52]	; 0x34
 8009e6a:	e7c1      	b.n	8009df0 <__sflush_r+0x1c>
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b0      	blx	r6
 8009e74:	1c41      	adds	r1, r0, #1
 8009e76:	d1c7      	bne.n	8009e08 <__sflush_r+0x34>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c4      	beq.n	8009e08 <__sflush_r+0x34>
 8009e7e:	2b1d      	cmp	r3, #29
 8009e80:	d001      	beq.n	8009e86 <__sflush_r+0xb2>
 8009e82:	2b16      	cmp	r3, #22
 8009e84:	d101      	bne.n	8009e8a <__sflush_r+0xb6>
 8009e86:	602f      	str	r7, [r5, #0]
 8009e88:	e7b1      	b.n	8009dee <__sflush_r+0x1a>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	e7ad      	b.n	8009df0 <__sflush_r+0x1c>
 8009e94:	690f      	ldr	r7, [r1, #16]
 8009e96:	2f00      	cmp	r7, #0
 8009e98:	d0a9      	beq.n	8009dee <__sflush_r+0x1a>
 8009e9a:	0793      	lsls	r3, r2, #30
 8009e9c:	680e      	ldr	r6, [r1, #0]
 8009e9e:	bf08      	it	eq
 8009ea0:	694b      	ldreq	r3, [r1, #20]
 8009ea2:	600f      	str	r7, [r1, #0]
 8009ea4:	bf18      	it	ne
 8009ea6:	2300      	movne	r3, #0
 8009ea8:	eba6 0807 	sub.w	r8, r6, r7
 8009eac:	608b      	str	r3, [r1, #8]
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	dd9c      	ble.n	8009dee <__sflush_r+0x1a>
 8009eb4:	6a21      	ldr	r1, [r4, #32]
 8009eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eb8:	4643      	mov	r3, r8
 8009eba:	463a      	mov	r2, r7
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b0      	blx	r6
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	dc06      	bgt.n	8009ed2 <__sflush_r+0xfe>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed0:	e78e      	b.n	8009df0 <__sflush_r+0x1c>
 8009ed2:	4407      	add	r7, r0
 8009ed4:	eba8 0800 	sub.w	r8, r8, r0
 8009ed8:	e7e9      	b.n	8009eae <__sflush_r+0xda>
 8009eda:	bf00      	nop
 8009edc:	20400001 	.word	0x20400001

08009ee0 <_fflush_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	690b      	ldr	r3, [r1, #16]
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	b913      	cbnz	r3, 8009ef0 <_fflush_r+0x10>
 8009eea:	2500      	movs	r5, #0
 8009eec:	4628      	mov	r0, r5
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	b118      	cbz	r0, 8009efa <_fflush_r+0x1a>
 8009ef2:	6983      	ldr	r3, [r0, #24]
 8009ef4:	b90b      	cbnz	r3, 8009efa <_fflush_r+0x1a>
 8009ef6:	f000 f887 	bl	800a008 <__sinit>
 8009efa:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <_fflush_r+0x6c>)
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d11b      	bne.n	8009f38 <_fflush_r+0x58>
 8009f00:	686c      	ldr	r4, [r5, #4]
 8009f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0ef      	beq.n	8009eea <_fflush_r+0xa>
 8009f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f0c:	07d0      	lsls	r0, r2, #31
 8009f0e:	d404      	bmi.n	8009f1a <_fflush_r+0x3a>
 8009f10:	0599      	lsls	r1, r3, #22
 8009f12:	d402      	bmi.n	8009f1a <_fflush_r+0x3a>
 8009f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f16:	f000 f915 	bl	800a144 <__retarget_lock_acquire_recursive>
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	f7ff ff59 	bl	8009dd4 <__sflush_r>
 8009f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f24:	07da      	lsls	r2, r3, #31
 8009f26:	4605      	mov	r5, r0
 8009f28:	d4e0      	bmi.n	8009eec <_fflush_r+0xc>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	059b      	lsls	r3, r3, #22
 8009f2e:	d4dd      	bmi.n	8009eec <_fflush_r+0xc>
 8009f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f32:	f000 f908 	bl	800a146 <__retarget_lock_release_recursive>
 8009f36:	e7d9      	b.n	8009eec <_fflush_r+0xc>
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <_fflush_r+0x70>)
 8009f3a:	429c      	cmp	r4, r3
 8009f3c:	d101      	bne.n	8009f42 <_fflush_r+0x62>
 8009f3e:	68ac      	ldr	r4, [r5, #8]
 8009f40:	e7df      	b.n	8009f02 <_fflush_r+0x22>
 8009f42:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <_fflush_r+0x74>)
 8009f44:	429c      	cmp	r4, r3
 8009f46:	bf08      	it	eq
 8009f48:	68ec      	ldreq	r4, [r5, #12]
 8009f4a:	e7da      	b.n	8009f02 <_fflush_r+0x22>
 8009f4c:	0800a62c 	.word	0x0800a62c
 8009f50:	0800a64c 	.word	0x0800a64c
 8009f54:	0800a60c 	.word	0x0800a60c

08009f58 <std>:
 8009f58:	2300      	movs	r3, #0
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f66:	6083      	str	r3, [r0, #8]
 8009f68:	8181      	strh	r1, [r0, #12]
 8009f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f6c:	81c2      	strh	r2, [r0, #14]
 8009f6e:	6183      	str	r3, [r0, #24]
 8009f70:	4619      	mov	r1, r3
 8009f72:	2208      	movs	r2, #8
 8009f74:	305c      	adds	r0, #92	; 0x5c
 8009f76:	f7ff f9e9 	bl	800934c <memset>
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <std+0x38>)
 8009f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f7e:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <std+0x3c>)
 8009f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <std+0x40>)
 8009f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f86:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <std+0x44>)
 8009f88:	6224      	str	r4, [r4, #32]
 8009f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f8c:	bd10      	pop	{r4, pc}
 8009f8e:	bf00      	nop
 8009f90:	0800a29d 	.word	0x0800a29d
 8009f94:	0800a2bf 	.word	0x0800a2bf
 8009f98:	0800a2f7 	.word	0x0800a2f7
 8009f9c:	0800a31b 	.word	0x0800a31b

08009fa0 <_cleanup_r>:
 8009fa0:	4901      	ldr	r1, [pc, #4]	; (8009fa8 <_cleanup_r+0x8>)
 8009fa2:	f000 b8af 	b.w	800a104 <_fwalk_reent>
 8009fa6:	bf00      	nop
 8009fa8:	08009ee1 	.word	0x08009ee1

08009fac <__sfmoreglue>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	2268      	movs	r2, #104	; 0x68
 8009fb0:	1e4d      	subs	r5, r1, #1
 8009fb2:	4355      	muls	r5, r2
 8009fb4:	460e      	mov	r6, r1
 8009fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fba:	f7ff fa3b 	bl	8009434 <_malloc_r>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	b140      	cbz	r0, 8009fd4 <__sfmoreglue+0x28>
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8009fc8:	300c      	adds	r0, #12
 8009fca:	60a0      	str	r0, [r4, #8]
 8009fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fd0:	f7ff f9bc 	bl	800934c <memset>
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}

08009fd8 <__sfp_lock_acquire>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	; (8009fe0 <__sfp_lock_acquire+0x8>)
 8009fda:	f000 b8b3 	b.w	800a144 <__retarget_lock_acquire_recursive>
 8009fde:	bf00      	nop
 8009fe0:	20002f71 	.word	0x20002f71

08009fe4 <__sfp_lock_release>:
 8009fe4:	4801      	ldr	r0, [pc, #4]	; (8009fec <__sfp_lock_release+0x8>)
 8009fe6:	f000 b8ae 	b.w	800a146 <__retarget_lock_release_recursive>
 8009fea:	bf00      	nop
 8009fec:	20002f71 	.word	0x20002f71

08009ff0 <__sinit_lock_acquire>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	; (8009ff8 <__sinit_lock_acquire+0x8>)
 8009ff2:	f000 b8a7 	b.w	800a144 <__retarget_lock_acquire_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	20002f72 	.word	0x20002f72

08009ffc <__sinit_lock_release>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__sinit_lock_release+0x8>)
 8009ffe:	f000 b8a2 	b.w	800a146 <__retarget_lock_release_recursive>
 800a002:	bf00      	nop
 800a004:	20002f72 	.word	0x20002f72

0800a008 <__sinit>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	4604      	mov	r4, r0
 800a00c:	f7ff fff0 	bl	8009ff0 <__sinit_lock_acquire>
 800a010:	69a3      	ldr	r3, [r4, #24]
 800a012:	b11b      	cbz	r3, 800a01c <__sinit+0x14>
 800a014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a018:	f7ff bff0 	b.w	8009ffc <__sinit_lock_release>
 800a01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a020:	6523      	str	r3, [r4, #80]	; 0x50
 800a022:	4b13      	ldr	r3, [pc, #76]	; (800a070 <__sinit+0x68>)
 800a024:	4a13      	ldr	r2, [pc, #76]	; (800a074 <__sinit+0x6c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	62a2      	str	r2, [r4, #40]	; 0x28
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	bf04      	itt	eq
 800a02e:	2301      	moveq	r3, #1
 800a030:	61a3      	streq	r3, [r4, #24]
 800a032:	4620      	mov	r0, r4
 800a034:	f000 f820 	bl	800a078 <__sfp>
 800a038:	6060      	str	r0, [r4, #4]
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 f81c 	bl	800a078 <__sfp>
 800a040:	60a0      	str	r0, [r4, #8]
 800a042:	4620      	mov	r0, r4
 800a044:	f000 f818 	bl	800a078 <__sfp>
 800a048:	2200      	movs	r2, #0
 800a04a:	60e0      	str	r0, [r4, #12]
 800a04c:	2104      	movs	r1, #4
 800a04e:	6860      	ldr	r0, [r4, #4]
 800a050:	f7ff ff82 	bl	8009f58 <std>
 800a054:	68a0      	ldr	r0, [r4, #8]
 800a056:	2201      	movs	r2, #1
 800a058:	2109      	movs	r1, #9
 800a05a:	f7ff ff7d 	bl	8009f58 <std>
 800a05e:	68e0      	ldr	r0, [r4, #12]
 800a060:	2202      	movs	r2, #2
 800a062:	2112      	movs	r1, #18
 800a064:	f7ff ff78 	bl	8009f58 <std>
 800a068:	2301      	movs	r3, #1
 800a06a:	61a3      	str	r3, [r4, #24]
 800a06c:	e7d2      	b.n	800a014 <__sinit+0xc>
 800a06e:	bf00      	nop
 800a070:	0800a524 	.word	0x0800a524
 800a074:	08009fa1 	.word	0x08009fa1

0800a078 <__sfp>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	4607      	mov	r7, r0
 800a07c:	f7ff ffac 	bl	8009fd8 <__sfp_lock_acquire>
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <__sfp+0x84>)
 800a082:	681e      	ldr	r6, [r3, #0]
 800a084:	69b3      	ldr	r3, [r6, #24]
 800a086:	b913      	cbnz	r3, 800a08e <__sfp+0x16>
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ffbd 	bl	800a008 <__sinit>
 800a08e:	3648      	adds	r6, #72	; 0x48
 800a090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a094:	3b01      	subs	r3, #1
 800a096:	d503      	bpl.n	800a0a0 <__sfp+0x28>
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	b30b      	cbz	r3, 800a0e0 <__sfp+0x68>
 800a09c:	6836      	ldr	r6, [r6, #0]
 800a09e:	e7f7      	b.n	800a090 <__sfp+0x18>
 800a0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0a4:	b9d5      	cbnz	r5, 800a0dc <__sfp+0x64>
 800a0a6:	4b16      	ldr	r3, [pc, #88]	; (800a100 <__sfp+0x88>)
 800a0a8:	60e3      	str	r3, [r4, #12]
 800a0aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a0b0:	f000 f847 	bl	800a142 <__retarget_lock_init_recursive>
 800a0b4:	f7ff ff96 	bl	8009fe4 <__sfp_lock_release>
 800a0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0c0:	6025      	str	r5, [r4, #0]
 800a0c2:	61a5      	str	r5, [r4, #24]
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0cc:	f7ff f93e 	bl	800934c <memset>
 800a0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0d8:	4620      	mov	r0, r4
 800a0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0dc:	3468      	adds	r4, #104	; 0x68
 800a0de:	e7d9      	b.n	800a094 <__sfp+0x1c>
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f7ff ff62 	bl	8009fac <__sfmoreglue>
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	6030      	str	r0, [r6, #0]
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1d5      	bne.n	800a09c <__sfp+0x24>
 800a0f0:	f7ff ff78 	bl	8009fe4 <__sfp_lock_release>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	e7ee      	b.n	800a0d8 <__sfp+0x60>
 800a0fa:	bf00      	nop
 800a0fc:	0800a524 	.word	0x0800a524
 800a100:	ffff0001 	.word	0xffff0001

0800a104 <_fwalk_reent>:
 800a104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a108:	4606      	mov	r6, r0
 800a10a:	4688      	mov	r8, r1
 800a10c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a110:	2700      	movs	r7, #0
 800a112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a116:	f1b9 0901 	subs.w	r9, r9, #1
 800a11a:	d505      	bpl.n	800a128 <_fwalk_reent+0x24>
 800a11c:	6824      	ldr	r4, [r4, #0]
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d1f7      	bne.n	800a112 <_fwalk_reent+0xe>
 800a122:	4638      	mov	r0, r7
 800a124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a128:	89ab      	ldrh	r3, [r5, #12]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d907      	bls.n	800a13e <_fwalk_reent+0x3a>
 800a12e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a132:	3301      	adds	r3, #1
 800a134:	d003      	beq.n	800a13e <_fwalk_reent+0x3a>
 800a136:	4629      	mov	r1, r5
 800a138:	4630      	mov	r0, r6
 800a13a:	47c0      	blx	r8
 800a13c:	4307      	orrs	r7, r0
 800a13e:	3568      	adds	r5, #104	; 0x68
 800a140:	e7e9      	b.n	800a116 <_fwalk_reent+0x12>

0800a142 <__retarget_lock_init_recursive>:
 800a142:	4770      	bx	lr

0800a144 <__retarget_lock_acquire_recursive>:
 800a144:	4770      	bx	lr

0800a146 <__retarget_lock_release_recursive>:
 800a146:	4770      	bx	lr

0800a148 <__swhatbuf_r>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	460e      	mov	r6, r1
 800a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a150:	2900      	cmp	r1, #0
 800a152:	b096      	sub	sp, #88	; 0x58
 800a154:	4614      	mov	r4, r2
 800a156:	461d      	mov	r5, r3
 800a158:	da08      	bge.n	800a16c <__swhatbuf_r+0x24>
 800a15a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	602a      	str	r2, [r5, #0]
 800a162:	061a      	lsls	r2, r3, #24
 800a164:	d410      	bmi.n	800a188 <__swhatbuf_r+0x40>
 800a166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a16a:	e00e      	b.n	800a18a <__swhatbuf_r+0x42>
 800a16c:	466a      	mov	r2, sp
 800a16e:	f000 f8fb 	bl	800a368 <_fstat_r>
 800a172:	2800      	cmp	r0, #0
 800a174:	dbf1      	blt.n	800a15a <__swhatbuf_r+0x12>
 800a176:	9a01      	ldr	r2, [sp, #4]
 800a178:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a17c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a180:	425a      	negs	r2, r3
 800a182:	415a      	adcs	r2, r3
 800a184:	602a      	str	r2, [r5, #0]
 800a186:	e7ee      	b.n	800a166 <__swhatbuf_r+0x1e>
 800a188:	2340      	movs	r3, #64	; 0x40
 800a18a:	2000      	movs	r0, #0
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	b016      	add	sp, #88	; 0x58
 800a190:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a194 <__smakebuf_r>:
 800a194:	898b      	ldrh	r3, [r1, #12]
 800a196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a198:	079d      	lsls	r5, r3, #30
 800a19a:	4606      	mov	r6, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	d507      	bpl.n	800a1b0 <__smakebuf_r+0x1c>
 800a1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	6163      	str	r3, [r4, #20]
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	ab01      	add	r3, sp, #4
 800a1b2:	466a      	mov	r2, sp
 800a1b4:	f7ff ffc8 	bl	800a148 <__swhatbuf_r>
 800a1b8:	9900      	ldr	r1, [sp, #0]
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff f939 	bl	8009434 <_malloc_r>
 800a1c2:	b948      	cbnz	r0, 800a1d8 <__smakebuf_r+0x44>
 800a1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d4ef      	bmi.n	800a1ac <__smakebuf_r+0x18>
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	f043 0302 	orr.w	r3, r3, #2
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7e3      	b.n	800a1a0 <__smakebuf_r+0xc>
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <__smakebuf_r+0x7c>)
 800a1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	6020      	str	r0, [r4, #0]
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	9b00      	ldr	r3, [sp, #0]
 800a1e8:	6163      	str	r3, [r4, #20]
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	6120      	str	r0, [r4, #16]
 800a1ee:	b15b      	cbz	r3, 800a208 <__smakebuf_r+0x74>
 800a1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 f8c9 	bl	800a38c <_isatty_r>
 800a1fa:	b128      	cbz	r0, 800a208 <__smakebuf_r+0x74>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f023 0303 	bic.w	r3, r3, #3
 800a202:	f043 0301 	orr.w	r3, r3, #1
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	89a0      	ldrh	r0, [r4, #12]
 800a20a:	4305      	orrs	r5, r0
 800a20c:	81a5      	strh	r5, [r4, #12]
 800a20e:	e7cd      	b.n	800a1ac <__smakebuf_r+0x18>
 800a210:	08009fa1 	.word	0x08009fa1

0800a214 <_raise_r>:
 800a214:	291f      	cmp	r1, #31
 800a216:	b538      	push	{r3, r4, r5, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	460d      	mov	r5, r1
 800a21c:	d904      	bls.n	800a228 <_raise_r+0x14>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a22a:	b112      	cbz	r2, 800a232 <_raise_r+0x1e>
 800a22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a230:	b94b      	cbnz	r3, 800a246 <_raise_r+0x32>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f830 	bl	800a298 <_getpid_r>
 800a238:	462a      	mov	r2, r5
 800a23a:	4601      	mov	r1, r0
 800a23c:	4620      	mov	r0, r4
 800a23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a242:	f000 b817 	b.w	800a274 <_kill_r>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d00a      	beq.n	800a260 <_raise_r+0x4c>
 800a24a:	1c59      	adds	r1, r3, #1
 800a24c:	d103      	bne.n	800a256 <_raise_r+0x42>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	e7e7      	b.n	800a226 <_raise_r+0x12>
 800a256:	2400      	movs	r4, #0
 800a258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25c:	4628      	mov	r0, r5
 800a25e:	4798      	blx	r3
 800a260:	2000      	movs	r0, #0
 800a262:	e7e0      	b.n	800a226 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <raise+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f7ff bfd3 	b.w	800a214 <_raise_r>
 800a26e:	bf00      	nop
 800a270:	20000108 	.word	0x20000108

0800a274 <_kill_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_kill_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7fe fe6f 	bl	8008f64 <_kill>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_kill_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_kill_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	20002f6c 	.word	0x20002f6c

0800a298 <_getpid_r>:
 800a298:	f7fe be5c 	b.w	8008f54 <_getpid>

0800a29c <__sread>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	f000 f894 	bl	800a3d0 <_read_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	bfab      	itete	ge
 800a2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a2b0:	181b      	addge	r3, r3, r0
 800a2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b6:	bfac      	ite	ge
 800a2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ba:	81a3      	strhlt	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__swrite>:
 800a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	461f      	mov	r7, r3
 800a2c4:	898b      	ldrh	r3, [r1, #12]
 800a2c6:	05db      	lsls	r3, r3, #23
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	d505      	bpl.n	800a2dc <__swrite+0x1e>
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f000 f868 	bl	800a3ac <_lseek_r>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	f000 b817 	b.w	800a324 <_write_r>

0800a2f6 <__sseek>:
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fe:	f000 f855 	bl	800a3ac <_lseek_r>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	bf15      	itete	ne
 800a308:	6560      	strne	r0, [r4, #84]	; 0x54
 800a30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a312:	81a3      	strheq	r3, [r4, #12]
 800a314:	bf18      	it	ne
 800a316:	81a3      	strhne	r3, [r4, #12]
 800a318:	bd10      	pop	{r4, pc}

0800a31a <__sclose>:
 800a31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31e:	f000 b813 	b.w	800a348 <_close_r>
	...

0800a324 <_write_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d07      	ldr	r5, [pc, #28]	; (800a344 <_write_r+0x20>)
 800a328:	4604      	mov	r4, r0
 800a32a:	4608      	mov	r0, r1
 800a32c:	4611      	mov	r1, r2
 800a32e:	2200      	movs	r2, #0
 800a330:	602a      	str	r2, [r5, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	f7fe fe4d 	bl	8008fd2 <_write>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_write_r+0x1e>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_write_r+0x1e>
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	20002f6c 	.word	0x20002f6c

0800a348 <_close_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_close_r+0x1c>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f7fe fe59 	bl	800900a <_close>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_close_r+0x1a>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_close_r+0x1a>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20002f6c 	.word	0x20002f6c

0800a368 <_fstat_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_fstat_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7fe fe54 	bl	8009022 <_fstat>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_fstat_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_fstat_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	20002f6c 	.word	0x20002f6c

0800a38c <_isatty_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_isatty_r+0x1c>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7fe fe53 	bl	8009042 <_isatty>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_isatty_r+0x1a>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_isatty_r+0x1a>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20002f6c 	.word	0x20002f6c

0800a3ac <_lseek_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_lseek_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7fe fe4c 	bl	8009058 <_lseek>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_lseek_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_lseek_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20002f6c 	.word	0x20002f6c

0800a3d0 <_read_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_read_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7fe fdda 	bl	8008f98 <_read>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_read_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_read_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20002f6c 	.word	0x20002f6c

0800a3f4 <_gettimeofday>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <_gettimeofday+0xc>)
 800a3f6:	2258      	movs	r2, #88	; 0x58
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3fe:	4770      	bx	lr
 800a400:	20002f6c 	.word	0x20002f6c

0800a404 <_init>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr

0800a410 <_fini>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	bf00      	nop
 800a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a416:	bc08      	pop	{r3}
 800a418:	469e      	mov	lr, r3
 800a41a:	4770      	bx	lr
