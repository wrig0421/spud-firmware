
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c84c  0800c84c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800c84c  0800c84c  0001c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c854  0800c854  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800c85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003778  20000228  0800ca84  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039a0  0800ca84  000239a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027980  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b52  00000000  00000000  00047bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  0004d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fc0  00000000  00000000  0004f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8d6  00000000  00000000  00051868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb23  00000000  00000000  0007c13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9a1e  00000000  00000000  000a7c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a167f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000967c  00000000  00000000  001a16d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001aad4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001aad70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5c0 	.word	0x0800c5c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800c5c0 	.word	0x0800c5c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <current_monitor_set+0x3c>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d503      	bpl.n	8000e16 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <current_monitor_set+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000e14:	e003      	b.n	8000e1e <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <current_monitor_set+0x3c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <current_monitor_set+0x40>)
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000244 	.word	0x20000244
 8000e30:	20000000 	.word	0x20000000

08000e34 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <current_monitor_ratio+0x18>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	ee07 3a90 	vmov	s15, r3
}
 8000e40:	eeb0 0a67 	vmov.f32	s0, s15
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000000 	.word	0x20000000

08000e50 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e54:	e009      	b.n	8000e6a <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <current_monitor_init+0x64>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000eb8 <current_monitor_init+0x68>
 8000e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <current_monitor_init+0x64>)
 8000e66:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <current_monitor_init+0x64>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000ebc <current_monitor_init+0x6c>
 8000e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e78:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000ec0 <current_monitor_init+0x70>
 8000e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e80:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	dce3      	bgt.n	8000e56 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <current_monitor_init+0x64>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	d800      	bhi.n	8000ea0 <current_monitor_init+0x50>
 8000e9e:	e7fe      	b.n	8000e9e <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <current_monitor_init+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <current_monitor_init+0x74>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	3d4ccccd 	.word	0x3d4ccccd
 8000ebc:	3d23d70a 	.word	0x3d23d70a
 8000ec0:	43700000 	.word	0x43700000
 8000ec4:	20000244 	.word	0x20000244

08000ec8 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000edc:	f001 f854 	bl	8001f88 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	80fb      	strh	r3, [r7, #6]
 8000efa:	4603      	mov	r3, r0
 8000efc:	80bb      	strh	r3, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
 8000f02:	4613      	mov	r3, r2
 8000f04:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d11c      	bne.n	8000f46 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e015      	b.n	8000f3e <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fe95 	bl	8001c48 <ws2812_pixel_is_in_strip_range>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <animate_led_set_pixel+0x50>
 8000f24:	78bc      	ldrb	r4, [r7, #2]
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	88b9      	ldrh	r1, [r7, #4]
 8000f2a:	7bf8      	ldrb	r0, [r7, #15]
 8000f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4623      	mov	r3, r4
 8000f34:	f000 fea2 	bl	8001c7c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d9e6      	bls.n	8000f12 <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000f44:	e020      	b.n	8000f88 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f46:	2301      	movs	r3, #1
 8000f48:	73bb      	strb	r3, [r7, #14]
 8000f4a:	e01a      	b.n	8000f82 <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d012      	beq.n	8000f7c <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000f56:	88ba      	ldrh	r2, [r7, #4]
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fe73 	bl	8001c48 <ws2812_pixel_is_in_strip_range>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <animate_led_set_pixel+0x94>
 8000f68:	78bc      	ldrb	r4, [r7, #2]
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	88b9      	ldrh	r1, [r7, #4]
 8000f6e:	7bb8      	ldrb	r0, [r7, #14]
 8000f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4623      	mov	r3, r4
 8000f78:	f000 fe80 	bl	8001c7c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d9e1      	bls.n	8000f4c <animate_led_set_pixel+0x64>
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}

08000f90 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	80fb      	strh	r3, [r7, #6]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	717b      	strb	r3, [r7, #5]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	713b      	strb	r3, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <animate_led_set_all_pixels+0xd0>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d122      	bne.n	8001002 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	75fb      	strb	r3, [r7, #23]
 8000fc0:	e01b      	b.n	8000ffa <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fddb 	bl	8001b80 <ws2812_get_strip_size>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	82bb      	strh	r3, [r7, #20]
 8000fd2:	e00b      	b.n	8000fec <animate_led_set_all_pixels+0x5c>
 8000fd4:	793c      	ldrb	r4, [r7, #4]
 8000fd6:	797a      	ldrb	r2, [r7, #5]
 8000fd8:	8ab9      	ldrh	r1, [r7, #20]
 8000fda:	7df8      	ldrb	r0, [r7, #23]
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	f000 fe4b 	bl	8001c7c <ws2812b_set_led>
 8000fe6:	8abb      	ldrh	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	82bb      	strh	r3, [r7, #20]
 8000fec:	8aba      	ldrh	r2, [r7, #20]
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3ef      	bcc.n	8000fd4 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	75fb      	strb	r3, [r7, #23]
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d9e0      	bls.n	8000fc2 <animate_led_set_all_pixels+0x32>
 8001000:	e026      	b.n	8001050 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001002:	2301      	movs	r3, #1
 8001004:	74fb      	strb	r3, [r7, #19]
 8001006:	e020      	b.n	800104a <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	7cfb      	ldrb	r3, [r7, #19]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d018      	beq.n	8001044 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fdb3 	bl	8001b80 <ws2812_get_strip_size>
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 800101e:	2300      	movs	r3, #0
 8001020:	823b      	strh	r3, [r7, #16]
 8001022:	e00b      	b.n	800103c <animate_led_set_all_pixels+0xac>
 8001024:	793c      	ldrb	r4, [r7, #4]
 8001026:	797a      	ldrb	r2, [r7, #5]
 8001028:	8a39      	ldrh	r1, [r7, #16]
 800102a:	7cf8      	ldrb	r0, [r7, #19]
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4623      	mov	r3, r4
 8001032:	f000 fe23 	bl	8001c7c <ws2812b_set_led>
 8001036:	8a3b      	ldrh	r3, [r7, #16]
 8001038:	3301      	adds	r3, #1
 800103a:	823b      	strh	r3, [r7, #16]
 800103c:	8a3a      	ldrh	r2, [r7, #16]
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	429a      	cmp	r2, r3
 8001042:	d3ef      	bcc.n	8001024 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	3301      	adds	r3, #1
 8001048:	74fb      	strb	r3, [r7, #19]
 800104a:	7cfb      	ldrb	r3, [r7, #19]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d9db      	bls.n	8001008 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff38 	bl	8000ec8 <animate_led_show_strip>
}
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	2000051e 	.word	0x2000051e

08001064 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <animate_led_solid_custom_color+0x40>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	81bb      	strh	r3, [r7, #12]
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f000 fcf7 	bl	8001a74 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8001086:	7b39      	ldrb	r1, [r7, #12]
 8001088:	7b7a      	ldrb	r2, [r7, #13]
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	88f8      	ldrh	r0, [r7, #6]
 800108e:	f7ff ff7f 	bl	8000f90 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff17 	bl	8000ec8 <animate_led_show_strip>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800c5d8 	.word	0x0800c5d8

080010a8 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff6c 	bl	8000f90 <animate_led_set_all_pixels>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	ed2d 8b02 	vpush	{d8}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd96 	bl	8001c04 <ws2812_led_get_max_strip_size>
 80010d8:	4603      	mov	r3, r0
 80010da:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <animate_led_only_spell_word+0xbc>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	81bb      	strh	r3, [r7, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f000 fcc1 	bl	8001a74 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e034      	b.n	8001162 <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 80010f8:	f000 ff4c 	bl	8001f94 <task_button_press_interrupt_occurred>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	1c9a      	adds	r2, r3, #2
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	1c59      	adds	r1, r3, #1
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ffa2 	bl	800205c <task_button_press_check_interrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d126      	bne.n	800116c <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	b299      	uxth	r1, r3
 8001122:	7b3a      	ldrb	r2, [r7, #12]
 8001124:	7b7c      	ldrb	r4, [r7, #13]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	88f8      	ldrh	r0, [r7, #6]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4623      	mov	r3, r4
 800112e:	f7ff fedb 	bl	8000ee8 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fec7 	bl	8000ec8 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001144:	f001 fbaa 	bl	800289c <task_led_ctrl_speed>
 8001148:	eeb0 7a40 	vmov.f32	s14, s0
 800114c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f001 fa3a 	bl	80025d0 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	8a7b      	ldrh	r3, [r7, #18]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbc6      	blt.n	80010f8 <animate_led_only_spell_word+0x3c>
 800116a:	e000      	b.n	800116e <animate_led_only_spell_word+0xb2>
                return;
 800116c:	bf00      	nop
	}
}
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	ecbd 8b02 	vpop	{d8}
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	0800c5d8 	.word	0x0800c5d8

0800117c <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 8001188:	4b9b      	ldr	r3, [pc, #620]	; (80013f8 <animate_led_fade_in_fade_out+0x27c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	823b      	strh	r3, [r7, #16]
 800118e:	2300      	movs	r3, #0
 8001190:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f000 fc6b 	bl	8001a74 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	e08b      	b.n	80012bc <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 80011a4:	f000 fef6 	bl	8001f94 <task_button_press_interrupt_occurred>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	1c9a      	adds	r2, r3, #2
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 ff4c 	bl	800205c <task_button_press_check_interrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 810f 	bne.w	80013ea <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80011cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ce:	f7ff f9a1 	bl	8000514 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 80011d8:	f7ff fb30 	bl	800083c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	7c3b      	ldrb	r3, [r7, #16]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f994 	bl	8000514 <__aeabi_i2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7ff f9f8 	bl	80005e8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc24 	bl	8000a4c <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800120a:	f7ff f983 	bl	8000514 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001214:	f7ff fb12 	bl	800083c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	7c7b      	ldrb	r3, [r7, #17]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_i2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f9da 	bl	80005e8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fc06 	bl	8000a4c <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001246:	f7ff f965 	bl	8000514 <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001250:	f7ff faf4 	bl	800083c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	7cbb      	ldrb	r3, [r7, #18]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f958 	bl	8000514 <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f9bc 	bl	80005e8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fbe8 	bl	8000a4c <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001280:	edd7 7a07 	vldr	s15, [r7, #28]
 8001284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
 800128c:	793b      	ldrb	r3, [r7, #4]
 800128e:	b2d9      	uxtb	r1, r3
 8001290:	edd7 7a06 	vldr	s15, [r7, #24]
 8001294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001298:	edc7 7a01 	vstr	s15, [r7, #4]
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	89f8      	ldrh	r0, [r7, #14]
 80012b2:	f7ff fe6d 	bl	8000f90 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	3301      	adds	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	f77f af70 	ble.w	80011a4 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 80012c4:	23ff      	movs	r3, #255	; 0xff
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	e08a      	b.n	80013e0 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 80012ca:	f000 fe63 	bl	8001f94 <task_button_press_interrupt_occurred>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00d      	beq.n	80012f0 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	1c9a      	adds	r2, r3, #2
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	1c59      	adds	r1, r3, #1
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 feb9 	bl	800205c <task_button_press_check_interrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d17e      	bne.n	80013ee <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80012f0:	6a38      	ldr	r0, [r7, #32]
 80012f2:	f7ff f90f 	bl	8000514 <__aeabi_i2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 80012fc:	f7ff fa9e 	bl	800083c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	7c3b      	ldrb	r3, [r7, #16]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f902 	bl	8000514 <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff f966 	bl	80005e8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb92 	bl	8000a4c <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 800132c:	6a38      	ldr	r0, [r7, #32]
 800132e:	f7ff f8f1 	bl	8000514 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001338:	f7ff fa80 	bl	800083c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	7c7b      	ldrb	r3, [r7, #17]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8e4 	bl	8000514 <__aeabi_i2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff f948 	bl	80005e8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fb74 	bl	8000a4c <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f7ff f8d3 	bl	8000514 <__aeabi_i2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001374:	f7ff fa62 	bl	800083c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	7cbb      	ldrb	r3, [r7, #18]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8c6 	bl	8000514 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f92a 	bl	80005e8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb56 	bl	8000a4c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80013a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c0:	793b      	ldrb	r3, [r7, #4]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013d0:	793b      	ldrb	r3, [r7, #4]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	89f8      	ldrh	r0, [r7, #14]
 80013d6:	f7ff fddb 	bl	8000f90 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	3b02      	subs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f6bf af71 	bge.w	80012ca <animate_led_fade_in_fade_out+0x14e>
 80013e8:	e002      	b.n	80013f0 <animate_led_fade_in_fade_out+0x274>
                return;
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <animate_led_fade_in_fade_out+0x274>
                return;
 80013ee:	bf00      	nop
    }
}
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800c5d8 	.word	0x0800c5d8
 80013fc:	40700000 	.word	0x40700000

08001400 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	ed2d 8b02 	vpush	{d8}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af02      	add	r7, sp, #8
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4603      	mov	r3, r0
 8001412:	81fb      	strh	r3, [r7, #14]
 8001414:	460b      	mov	r3, r1
 8001416:	81bb      	strh	r3, [r7, #12]
 8001418:	4613      	mov	r3, r2
 800141a:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fbf0 	bl	8001c04 <ws2812_led_get_max_strip_size>
 8001424:	4603      	mov	r3, r0
 8001426:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <animate_led_twinkle+0xe4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	82bb      	strh	r3, [r7, #20]
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f000 fb1b 	bl	8001a74 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e043      	b.n	80014cc <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001444:	f000 fda6 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	1c9a      	adds	r2, r3, #2
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fdfc 	bl	800205c <task_button_press_check_interrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d135      	bne.n	80014d6 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	4619      	mov	r1, r3
 800146e:	2000      	movs	r0, #0
 8001470:	f009 ff8a 	bl	800b388 <random_num>
 8001474:	4603      	mov	r3, r0
 8001476:	b299      	uxth	r1, r3
 8001478:	7d3a      	ldrb	r2, [r7, #20]
 800147a:	7d7c      	ldrb	r4, [r7, #21]
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	89f8      	ldrh	r0, [r7, #14]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4623      	mov	r3, r4
 8001484:	f7ff fd30 	bl	8000ee8 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd1c 	bl	8000ec8 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800149a:	f001 f9ff 	bl	800289c <task_led_ctrl_speed>
 800149e:	eeb0 7a40 	vmov.f32	s14, s0
 80014a2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80014a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014aa:	ee17 0a90 	vmov	r0, s15
 80014ae:	f001 f88f 	bl	80025d0 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 80014b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <animate_led_twinkle+0xc6>
 80014ba:	89f8      	ldrh	r0, [r7, #14]
 80014bc:	2300      	movs	r3, #0
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	f7ff fd65 	bl	8000f90 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbb7      	blt.n	8001444 <animate_led_twinkle+0x44>
 80014d4:	e000      	b.n	80014d8 <animate_led_twinkle+0xd8>
                return;
 80014d6:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	ecbd 8b02 	vpop	{d8}
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800c5d8 	.word	0x0800c5d8

080014e8 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	ed2d 8b02 	vpush	{d8}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <animate_led_sparkle_only_random_color+0x120>)
 8001500:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fb7d 	bl	8001c04 <ws2812_led_get_max_strip_size>
 800150a:	4603      	mov	r3, r0
 800150c:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fb57 	bl	8001bc4 <ws2812_get_num_active_animation_leds>
 8001516:	4603      	mov	r3, r0
 8001518:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800151a:	2300      	movs	r3, #0
 800151c:	83fb      	strh	r3, [r7, #30]
 800151e:	e059      	b.n	80015d4 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001520:	f000 fd38 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <animate_led_sparkle_only_random_color+0x5a>
 800152a:	f107 020d 	add.w	r2, r7, #13
 800152e:	f107 010e 	add.w	r1, r7, #14
 8001532:	f107 030f 	add.w	r3, r7, #15
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fd90 	bl	800205c <task_button_press_check_interrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d15c      	bne.n	80015fc <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	4619      	mov	r1, r3
 8001546:	2000      	movs	r0, #0
 8001548:	f009 ff1e 	bl	800b388 <random_num>
 800154c:	4603      	mov	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	b29c      	uxth	r4, r3
 8001554:	21ff      	movs	r1, #255	; 0xff
 8001556:	2000      	movs	r0, #0
 8001558:	f009 ff16 	bl	800b388 <random_num>
 800155c:	4603      	mov	r3, r0
 800155e:	b2dd      	uxtb	r5, r3
 8001560:	21ff      	movs	r1, #255	; 0xff
 8001562:	2000      	movs	r0, #0
 8001564:	f009 ff10 	bl	800b388 <random_num>
 8001568:	4603      	mov	r3, r0
 800156a:	b2de      	uxtb	r6, r3
 800156c:	21ff      	movs	r1, #255	; 0xff
 800156e:	2000      	movs	r0, #0
 8001570:	f009 ff0a 	bl	800b388 <random_num>
 8001574:	4603      	mov	r3, r0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	88f8      	ldrh	r0, [r7, #6]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4633      	mov	r3, r6
 800157e:	462a      	mov	r2, r5
 8001580:	4621      	mov	r1, r4
 8001582:	f7ff fcb1 	bl	8000ee8 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc9d 	bl	8000ec8 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001598:	f001 f980 	bl	800289c <task_led_ctrl_speed>
 800159c:	eeb0 7a40 	vmov.f32	s14, s0
 80015a0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80015a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a8:	ee17 0a90 	vmov	r0, s15
 80015ac:	f001 f810 	bl	80025d0 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <animate_led_sparkle_only_random_color+0xe6>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	b299      	uxth	r1, r3
 80015c0:	88f8      	ldrh	r0, [r7, #6]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	f7ff fc8d 	bl	8000ee8 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80015ce:	8bfb      	ldrh	r3, [r7, #30]
 80015d0:	3301      	adds	r3, #1
 80015d2:	83fb      	strh	r3, [r7, #30]
 80015d4:	8bfb      	ldrh	r3, [r7, #30]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	d492      	bmi.n	8001520 <animate_led_sparkle_only_random_color+0x38>
 80015fa:	e000      	b.n	80015fe <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015fc:	bf00      	nop
	}
}
 80015fe:	3724      	adds	r7, #36	; 0x24
 8001600:	46bd      	mov	sp, r7
 8001602:	ecbd 8b02 	vpop	{d8}
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001608:	3f333333 	.word	0x3f333333

0800160c <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	ed2d 8b02 	vpush	{d8}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 faee 	bl	8001c04 <ws2812_led_get_max_strip_size>
 8001628:	4603      	mov	r3, r0
 800162a:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 800162c:	2300      	movs	r3, #0
 800162e:	82bb      	strh	r3, [r7, #20]
 8001630:	e06c      	b.n	800170c <animate_led_rainbow_cycle+0x100>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001632:	f000 fcaf 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <animate_led_rainbow_cycle+0x48>
 800163c:	f107 0209 	add.w	r2, r7, #9
 8001640:	f107 010a 	add.w	r1, r7, #10
 8001644:	f107 030b 	add.w	r3, r7, #11
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd07 	bl	800205c <task_button_press_check_interrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d160      	bne.n	8001716 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 8001654:	2300      	movs	r3, #0
 8001656:	82fb      	strh	r3, [r7, #22]
 8001658:	e02f      	b.n	80016ba <animate_led_rainbow_cycle+0xae>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800165a:	f000 fc9b 	bl	8001f94 <task_button_press_interrupt_occurred>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <animate_led_rainbow_cycle+0x70>
 8001664:	f107 0209 	add.w	r2, r7, #9
 8001668:	f107 010a 	add.w	r1, r7, #10
 800166c:	f107 030b 	add.w	r3, r7, #11
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fcf3 	bl	800205c <task_button_press_check_interrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d14e      	bne.n	800171a <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 800167c:	8afb      	ldrh	r3, [r7, #22]
 800167e:	021a      	lsls	r2, r3, #8
 8001680:	8a7b      	ldrh	r3, [r7, #18]
 8001682:	fb92 f3f3 	sdiv	r3, r2, r3
 8001686:	b2da      	uxtb	r2, r3
 8001688:	8abb      	ldrh	r3, [r7, #20]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f849 	bl	8001728 <animate_led_wheel>
 8001696:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	781c      	ldrb	r4, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3302      	adds	r3, #2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	8af9      	ldrh	r1, [r7, #22]
 80016aa:	88f8      	ldrh	r0, [r7, #6]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4623      	mov	r3, r4
 80016b0:	f7ff fc1a 	bl	8000ee8 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 80016b4:	8afb      	ldrh	r3, [r7, #22]
 80016b6:	3301      	adds	r3, #1
 80016b8:	82fb      	strh	r3, [r7, #22]
 80016ba:	8afa      	ldrh	r2, [r7, #22]
 80016bc:	8a7b      	ldrh	r3, [r7, #18]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3cb      	bcc.n	800165a <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbff 	bl	8000ec8 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 80016ca:	f001 f8e7 	bl	800289c <task_led_ctrl_speed>
 80016ce:	eef0 7a40 	vmov.f32	s15, s0
 80016d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d103      	bne.n	80016e4 <animate_led_rainbow_cycle+0xd8>
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 ff77 	bl	80025d0 <task_led_ctrl_delay>
 80016e2:	e010      	b.n	8001706 <animate_led_rainbow_cycle+0xfa>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016ee:	f001 f8d5 	bl	800289c <task_led_ctrl_speed>
 80016f2:	eeb0 7a40 	vmov.f32	s14, s0
 80016f6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f000 ff65 	bl	80025d0 <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001706:	8abb      	ldrh	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	82bb      	strh	r3, [r7, #20]
 800170c:	8abb      	ldrh	r3, [r7, #20]
 800170e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001712:	d38e      	bcc.n	8001632 <animate_led_rainbow_cycle+0x26>
 8001714:	e002      	b.n	800171c <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171a:	bf00      	nop
    }
}
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	ecbd 8b02 	vpop	{d8}
 8001724:	bd90      	pop	{r4, r7, pc}
	...

08001728 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b54      	cmp	r3, #84	; 0x54
 8001736:	d813      	bhi.n	8001760 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	461a      	mov	r2, r3
 800173c:	0052      	lsls	r2, r2, #1
 800173e:	4413      	add	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <animate_led_wheel+0xa8>)
 8001744:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	461a      	mov	r2, r3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <animate_led_wheel+0xa8>)
 8001756:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <animate_led_wheel+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	709a      	strb	r2, [r3, #2]
 800175e:	e02f      	b.n	80017c0 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2ba9      	cmp	r3, #169	; 0xa9
 8001764:	d816      	bhi.n	8001794 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	3b55      	subs	r3, #85	; 0x55
 800176a:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	461a      	mov	r2, r3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <animate_led_wheel+0xa8>)
 800177c:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <animate_led_wheel+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	461a      	mov	r2, r3
 8001788:	0052      	lsls	r2, r2, #1
 800178a:	4413      	add	r3, r2
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <animate_led_wheel+0xa8>)
 8001790:	709a      	strb	r2, [r3, #2]
 8001792:	e015      	b.n	80017c0 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3356      	adds	r3, #86	; 0x56
 8001798:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <animate_led_wheel+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	461a      	mov	r2, r3
 80017a4:	0052      	lsls	r2, r2, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <animate_led_wheel+0xa8>)
 80017ac:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	461a      	mov	r2, r3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <animate_led_wheel+0xa8>)
 80017be:	709a      	strb	r2, [r3, #2]
    }
    return c;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <animate_led_wheel+0xa8>)
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000248 	.word	0x20000248

080017d4 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	ed2d 8b02 	vpush	{d8}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fa0a 	bl	8001c04 <ws2812_led_get_max_strip_size>
 80017f0:	4603      	mov	r3, r0
 80017f2:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <animate_led_theater_chase+0x140>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	813b      	strh	r3, [r7, #8]
 80017fa:	2300      	movs	r3, #0
 80017fc:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4619      	mov	r1, r3
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f000 f935 	bl	8001a74 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e075      	b.n	80018fc <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	e06c      	b.n	80018f0 <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001816:	f000 fbbd 	bl	8001f94 <task_button_press_interrupt_occurred>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	1c9a      	adds	r2, r3, #2
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	1c59      	adds	r1, r3, #1
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fc13 	bl	800205c <task_button_press_check_interrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d163      	bne.n	8001904 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e010      	b.n	8001864 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	b29a      	uxth	r2, r3
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b299      	uxth	r1, r3
 800184e:	7a3a      	ldrb	r2, [r7, #8]
 8001850:	7a7c      	ldrb	r4, [r7, #9]
 8001852:	7abb      	ldrb	r3, [r7, #10]
 8001854:	88f8      	ldrh	r0, [r7, #6]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4623      	mov	r3, r4
 800185a:	f7ff fb45 	bl	8000ee8 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3303      	adds	r3, #3
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbea      	blt.n	8001842 <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb2a 	bl	8000ec8 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001874:	f000 fb8e 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	1c9a      	adds	r2, r3, #2
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fbe4 	bl	800205c <task_button_press_check_interrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d136      	bne.n	8001908 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80018a4:	f000 fffa 	bl	800289c <task_led_ctrl_speed>
 80018a8:	eeb0 7a40 	vmov.f32	s14, s0
 80018ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b4:	ee17 0a90 	vmov	r0, s15
 80018b8:	f000 fe8a 	bl	80025d0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e00f      	b.n	80018e2 <animate_led_theater_chase+0x10e>
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b299      	uxth	r1, r3
 80018ce:	88f8      	ldrh	r0, [r7, #6]
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	f7ff fb06 	bl	8000ee8 <animate_led_set_pixel>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	3303      	adds	r3, #3
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	89fb      	ldrh	r3, [r7, #14]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbeb      	blt.n	80018c2 <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	dd8f      	ble.n	8001816 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b09      	cmp	r3, #9
 8001900:	dd86      	ble.n	8001810 <animate_led_theater_chase+0x3c>
 8001902:	e002      	b.n	800190a <animate_led_theater_chase+0x136>
                    return;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <animate_led_theater_chase+0x136>
                    return;
 8001908:	bf00      	nop
        }
    }
}
 800190a:	3724      	adds	r7, #36	; 0x24
 800190c:	46bd      	mov	sp, r7
 800190e:	ecbd 8b02 	vpop	{d8}
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	0800c5d8 	.word	0x0800c5d8

08001918 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	ed2d 8b02 	vpush	{d8}
 800191e:	b08d      	sub	sp, #52	; 0x34
 8001920:	af02      	add	r7, sp, #8
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f968 	bl	8001c04 <ws2812_led_get_max_strip_size>
 8001934:	4603      	mov	r3, r0
 8001936:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e08a      	b.n	8001a54 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	e080      	b.n	8001a46 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001944:	f000 fb26 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <animate_led_theater_chase_rainbow+0x4e>
 800194e:	f107 020d 	add.w	r2, r7, #13
 8001952:	f107 010e 	add.w	r1, r7, #14
 8001956:	f107 030f 	add.w	r3, r7, #15
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fb7e 	bl	800205c <task_button_press_check_interrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d17b      	bne.n	8001a5e <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e039      	b.n	80019e0 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800196c:	f000 fb12 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <animate_led_theater_chase_rainbow+0x76>
 8001976:	f107 020d 	add.w	r2, r7, #13
 800197a:	f107 010e 	add.w	r1, r7, #14
 800197e:	f107 030f 	add.w	r3, r7, #15
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fb6a 	bl	800205c <task_button_press_check_interrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d169      	bne.n	8001a62 <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	441a      	add	r2, r3
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <animate_led_theater_chase_rainbow+0x158>)
 8001996:	fb83 1302 	smull	r1, r3, r3, r2
 800199a:	4413      	add	r3, r2
 800199c:	11d9      	asrs	r1, r3, #7
 800199e:	17d3      	asrs	r3, r2, #31
 80019a0:	1ac9      	subs	r1, r1, r3
 80019a2:	460b      	mov	r3, r1
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	1ad1      	subs	r1, r2, r3
 80019aa:	b2cb      	uxtb	r3, r1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff febb 	bl	8001728 <animate_led_wheel>
 80019b2:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b299      	uxth	r1, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3301      	adds	r3, #1
 80019c8:	781c      	ldrb	r4, [r3, #0]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	3302      	adds	r3, #2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f7ff fa87 	bl	8000ee8 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3303      	adds	r3, #3
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbc1      	blt.n	800196c <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fa6c 	bl	8000ec8 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019fa:	f000 ff4f 	bl	800289c <task_led_ctrl_speed>
 80019fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001a02:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f000 fddf 	bl	80025d0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e00f      	b.n	8001a38 <animate_led_theater_chase_rainbow+0x120>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b299      	uxth	r1, r3
 8001a24:	88f8      	ldrh	r0, [r7, #6]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f7ff fa5b 	bl	8000ee8 <animate_led_set_pixel>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	3303      	adds	r3, #3
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	8afb      	ldrh	r3, [r7, #22]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbeb      	blt.n	8001a18 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	3301      	adds	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f77f af7b 	ble.w	8001944 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	f77f af71 	ble.w	800193e <animate_led_theater_chase_rainbow+0x26>
 8001a5c:	e002      	b.n	8001a64 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a62:	bf00      	nop
        }
    }
}
 8001a64:	372c      	adds	r7, #44	; 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	ecbd 8b02 	vpop	{d8}
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80808081 	.word	0x80808081

08001a74 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0a1a      	lsrs	r2, r3, #8
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3302      	adds	r3, #2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001ab0:	2364      	movs	r3, #100	; 0x64
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <reset_ws2812b+0x2c>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <reset_ws2812b+0x30>)
 8001ab8:	f006 fbaa 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <reset_ws2812b+0x2c>)
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <reset_ws2812b+0x30>)
 8001ac4:	f006 fba4 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <reset_ws2812b+0x2c>)
 8001acc:	2108      	movs	r1, #8
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <reset_ws2812b+0x30>)
 8001ad0:	f006 fb9e 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000052c 	.word	0x2000052c
 8001adc:	2000206c 	.word	0x2000206c

08001ae0 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2db      	uxtb	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d104      	bne.n	8001b3a <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	737b      	strb	r3, [r7, #13]
        break;
 8001b38:	e000      	b.n	8001b3c <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8001b3a:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8001b3c:	89fa      	ldrh	r2, [r7, #14]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b58:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b7c <ws2812_get_pwm_strip_offset+0x64>
 8001b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b68:	ee17 3a90 	vmov	r3, s15
 8001b6c:	b29b      	uxth	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	453b8000 	.word	0x453b8000

08001b80 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d103      	bne.n	8001b9c <ws2812_get_strip_size+0x1c>
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <ws2812_get_strip_size+0x3c>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	81fb      	strh	r3, [r7, #14]
 8001b9a:	e009      	b.n	8001bb0 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff9e 	bl	8001ae0 <ws2812_convert_strip_num_to_strip_bit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <ws2812_get_strip_size+0x40>)
 8001baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bae:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000520 	.word	0x20000520
 8001bc0:	200000a0 	.word	0x200000a0

08001bc4 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d103      	bne.n	8001be0 <ws2812_get_num_active_animation_leds+0x1c>
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <ws2812_get_num_active_animation_leds+0x3c>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	81fb      	strh	r3, [r7, #14]
 8001bde:	e008      	b.n	8001bf2 <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <ws2812_get_num_active_animation_leds+0x2e>
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	33f0      	adds	r3, #240	; 0xf0
 8001bf0:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	2000051c 	.word	0x2000051c

08001c04 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d103      	bne.n	8001c20 <ws2812_led_get_max_strip_size+0x1c>
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <ws2812_led_get_max_strip_size+0x40>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	81fb      	strh	r3, [r7, #14]
 8001c1e:	e00a      	b.n	8001c36 <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <ws2812_led_get_max_strip_size+0x32>
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	2bef      	cmp	r3, #239	; 0xef
 8001c30:	d801      	bhi.n	8001c36 <ws2812_led_get_max_strip_size+0x32>
 8001c32:	23f0      	movs	r3, #240	; 0xf0
 8001c34:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001c36:	89fb      	ldrh	r3, [r7, #14]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	20000520 	.word	0x20000520

08001c48 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d104      	bne.n	8001c6c <ws2812_pixel_is_in_strip_range+0x24>
 8001c62:	88bb      	ldrh	r3, [r7, #4]
 8001c64:	2bef      	cmp	r3, #239	; 0xef
 8001c66:	d801      	bhi.n	8001c6c <ws2812_pixel_is_in_strip_range+0x24>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	81bb      	strh	r3, [r7, #12]
 8001c92:	460b      	mov	r3, r1
 8001c94:	73bb      	strb	r3, [r7, #14]
 8001c96:	4613      	mov	r3, r2
 8001c98:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff2d 	bl	8001afc <ws2812_convert_strip_bit_to_strip_num>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8001ca6:	7bbb      	ldrb	r3, [r7, #14]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001cbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cc2:	89ba      	ldrh	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cd4:	793a      	ldrb	r2, [r7, #4]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001cf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf6:	89ba      	ldrh	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d04:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d08:	793a      	ldrb	r2, [r7, #4]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8001d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001d28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d2c:	89ba      	ldrh	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d3e:	793a      	ldrb	r2, [r7, #4]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	709a      	strb	r2, [r3, #2]
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000528 	.word	0x20000528

08001d54 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001d5e:	23f0      	movs	r3, #240	; 0xf0
 8001d60:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff fed8 	bl	8001b18 <ws2812_get_pwm_strip_offset>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001d6c:	e002      	b.n	8001d74 <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 ff72 	bl	8002c58 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001d74:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f5      	bne.n	8001d6e <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	82fb      	strh	r3, [r7, #22]
 8001d86:	e046      	b.n	8001e16 <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	8afa      	ldrh	r2, [r7, #22]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	8afa      	ldrh	r2, [r7, #22]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	4403      	add	r3, r0
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001dac:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	8afa      	ldrh	r2, [r7, #22]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	4403      	add	r3, r0
 8001dbc:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001dbe:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001dc0:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	757b      	strb	r3, [r7, #21]
 8001dc6:	e020      	b.n	8001e0a <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001dc8:	7d7b      	ldrb	r3, [r7, #21]
 8001dca:	f1c3 0317 	rsb	r3, r3, #23
 8001dce:	2201      	movs	r2, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 8001dde:	2028      	movs	r0, #40	; 0x28
 8001de0:	e000      	b.n	8001de4 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001de2:	2014      	movs	r0, #20
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	8afa      	ldrh	r2, [r7, #22]
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	441a      	add	r2, r3
 8001df8:	7d7b      	ldrb	r3, [r7, #21]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	4602      	mov	r2, r0
 8001e02:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001e04:	7d7b      	ldrb	r3, [r7, #21]
 8001e06:	3301      	adds	r3, #1
 8001e08:	757b      	strb	r3, [r7, #21]
 8001e0a:	7d7b      	ldrb	r3, [r7, #21]
 8001e0c:	2b17      	cmp	r3, #23
 8001e0e:	d9db      	bls.n	8001dc8 <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001e10:	8afb      	ldrh	r3, [r7, #22]
 8001e12:	3301      	adds	r3, #1
 8001e14:	82fb      	strh	r3, [r7, #22]
 8001e16:	8afb      	ldrh	r3, [r7, #22]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d8b4      	bhi.n	8001d88 <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	827b      	strh	r3, [r7, #18]
 8001e22:	e012      	b.n	8001e4a <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	441a      	add	r2, r3
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	3301      	adds	r3, #1
 8001e48:	827b      	strh	r3, [r7, #18]
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e94 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d4e0      	bmi.n	8001e24 <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	441a      	add	r2, r3
 8001e72:	f242 2338 	movw	r3, #8760	; 0x2238
 8001e76:	2100      	movs	r1, #0
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001e7a:	f006 f9c9 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001bd 	.word	0x200001bd
 8001e8c:	20000528 	.word	0x20000528
 8001e90:	20000524 	.word	0x20000524
 8001e94:	453b8000 	.word	0x453b8000
 8001e98:	200001bc 	.word	0x200001bc
 8001e9c:	2000206c 	.word	0x2000206c

08001ea0 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <ws2812b_init+0xc8>)
 8001ea8:	4a30      	ldr	r2, [pc, #192]	; (8001f6c <ws2812b_init+0xcc>)
 8001eaa:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001eac:	2301      	movs	r3, #1
 8001eae:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	e00f      	b.n	8001ed6 <ws2812b_init+0x36>
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <ws2812b_init+0xd0>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <ws2812b_init+0xd0>)
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	ddec      	ble.n	8001eb6 <ws2812b_init+0x16>
	switch (num_strips)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10d      	bne.n	8001efe <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <ws2812b_init+0xd4>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	33f0      	adds	r3, #240	; 0xf0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <ws2812b_init+0xd4>)
 8001eec:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <ws2812b_init+0xd8>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2bef      	cmp	r3, #239	; 0xef
 8001ef4:	d802      	bhi.n	8001efc <ws2812b_init+0x5c>
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <ws2812b_init+0xd8>)
 8001ef8:	22f0      	movs	r2, #240	; 0xf0
 8001efa:	801a      	strh	r2, [r3, #0]
		break;
 8001efc:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <ws2812b_init+0xd4>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f7c <ws2812b_init+0xdc>
 8001f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f20:	ee17 0a90 	vmov	r0, s15
 8001f24:	f009 fa9c 	bl	800b460 <malloc>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <ws2812b_init+0xe0>)
 8001f2e:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <ws2812b_init+0xd4>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001f7c <ws2812b_init+0xdc>
 8001f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f52:	ee17 2a90 	vmov	r2, s15
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <ws2812b_init+0xe4>)
 8001f58:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001f5a:	f7fe ff79 	bl	8000e50 <current_monitor_init>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000528 	.word	0x20000528
 8001f6c:	2000024c 	.word	0x2000024c
 8001f70:	2000051e 	.word	0x2000051e
 8001f74:	2000051c 	.word	0x2000051c
 8001f78:	20000520 	.word	0x20000520
 8001f7c:	453b8000 	.word	0x453b8000
 8001f80:	20000524 	.word	0x20000524
 8001f84:	20000590 	.word	0x20000590

08001f88 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001f8c:	f7ff fee2 	bl	8001d54 <ws2812b_fill_pwm_buffer_strip_one>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <task_button_press_interrupt_occurred+0x14>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200005b7 	.word	0x200005b7

08001fac <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d817      	bhi.n	8001fec <task_led_ctrl_button_to_isr+0x40>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <task_led_ctrl_button_to_isr+0x18>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdb 	.word	0x08001fdb
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	08001fe7 	.word	0x08001fe7
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8001fd8:	e009      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8001fde:	e006      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	73fb      	strb	r3, [r7, #15]
        break;
 8001fe4:	e003      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8001fea:	e000      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001fec:	bf00      	nop
    }
    return return_val;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8002010:	2101      	movs	r1, #1
 8002012:	54d1      	strb	r1, [r2, r3]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	200005b7 	.word	0x200005b7
 8002024:	200005b8 	.word	0x200005b8

08002028 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <task_button_press_ctrl_interrupt_flag+0x20>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002044:	2100      	movs	r1, #0
 8002046:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200005b8 	.word	0x200005b8

0800205c <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8002068:	2300      	movs	r3, #0
 800206a:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 800206c:	f000 f85a 	bl	8002124 <task_button_press_major_state_change>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8002076:	f000 f849 	bl	800210c <task_button_press_interrupt_flag_clear>
        return_val = true;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800207e:	2100      	movs	r1, #0
 8002080:	2001      	movs	r0, #1
 8002082:	f7fe ffef 	bl	8001064 <animate_led_solid_custom_color>
 8002086:	e039      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff ffcd 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8002094:	f000 f83a 	bl	800210c <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800209c:	2100      	movs	r1, #0
 800209e:	2001      	movs	r0, #1
 80020a0:	f7fe ffe0 	bl	8001064 <animate_led_solid_custom_color>
 80020a4:	e02a      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 80020a6:	2003      	movs	r0, #3
 80020a8:	f7ff ffbe 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 80020b2:	f000 f82b 	bl	800210c <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 80020b6:	e002      	b.n	80020be <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f000 fdcd 	bl	8002c58 <osDelay>
        while (g_animate_led_pause_flag)
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <task_button_press_check_interrupts+0xac>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f8      	bne.n	80020b8 <task_button_press_check_interrupts+0x5c>
 80020c6:	e019      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff ffad 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 80020d4:	f000 f81a 	bl	800210c <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80020d8:	f000 fb44 	bl	8002764 <task_led_ctrl_color_red_hex>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80020e4:	f000 fb66 	bl	80027b4 <task_led_ctrl_color_green_hex>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020f0:	f000 fb88 	bl	8002804 <task_led_ctrl_color_blue_hex>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200005b6 	.word	0x200005b6

0800210c <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <task_button_press_interrupt_flag_clear+0x14>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	200005b7 	.word	0x200005b7

08002124 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <task_button_press_major_state_change+0x14>)
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200005b5 	.word	0x200005b5

0800213c <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	f107 0208 	add.w	r2, r7, #8
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	2000      	movs	r0, #0
 8002160:	f002 fa26 	bl	80045b0 <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	2101      	movs	r1, #1
 8002168:	488b      	ldr	r0, [pc, #556]	; (8002398 <task_button_press+0x25c>)
 800216a:	f004 fb8d 	bl	8006888 <HAL_GPIO_WritePin>
        osDelay(700);
 800216e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002172:	f000 fd71 	bl	8002c58 <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	2101      	movs	r1, #1
 800217a:	4887      	ldr	r0, [pc, #540]	; (8002398 <task_button_press+0x25c>)
 800217c:	f004 fb84 	bl	8006888 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <task_button_press+0x260>)
 8002188:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4982      	ldr	r1, [pc, #520]	; (800239c <task_button_press+0x260>)
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a2:	d206      	bcs.n	80021b2 <task_button_press+0x76>
 80021a4:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <task_button_press+0x264>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <task_button_press+0x264>)
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e002      	b.n	80021b8 <task_button_press+0x7c>
        else fast_press_count = 0;
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <task_button_press+0x264>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fef5 	bl	8001fac <task_led_ctrl_button_to_isr>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff19 	bl	8001ffc <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 80021ca:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <task_button_press+0x264>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d975      	bls.n	80022be <task_button_press+0x182>
        {
            task_button_press_major_change = true;
 80021d2:	4b74      	ldr	r3, [pc, #464]	; (80023a4 <task_button_press+0x268>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <task_button_press+0x264>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d841      	bhi.n	800226a <task_button_press+0x12e>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <task_button_press+0xb0>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002217 	.word	0x08002217
 80021f4:	08002233 	.word	0x08002233
 80021f8:	0800224d 	.word	0x0800224d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <task_button_press+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a69      	ldr	r2, [pc, #420]	; (80023a8 <task_button_press+0x26c>)
 8002204:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 800220c:	2308      	movs	r3, #8
 800220e:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8002210:	f000 fb98 	bl	8002944 <task_led_ctrl_speed_reset>

                break;
 8002214:	e02a      	b.n	800226c <task_button_press+0x130>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <task_button_press+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a63      	ldr	r2, [pc, #396]	; (80023ac <task_button_press+0x270>)
 800221e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002220:	23ff      	movs	r3, #255	; 0xff
 8002222:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002224:	2328      	movs	r3, #40	; 0x28
 8002226:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8002228:	f000 fb98 	bl	800295c <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 800222c:	f000 fbc0 	bl	80029b0 <task_led_ctrl_animate_state_demo>
                break;
 8002230:	e01c      	b.n	800226c <task_button_press+0x130>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <task_button_press+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a5d      	ldr	r2, [pc, #372]	; (80023b0 <task_button_press+0x274>)
 800223a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 800223c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002240:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002242:	2317      	movs	r3, #23
 8002244:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8002246:	f000 fa3f 	bl	80026c8 <task_led_ctrl_color_state_demo>
                break;
 800224a:	e00f      	b.n	800226c <task_button_press+0x130>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 800224c:	f000 f9d6 	bl	80025fc <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002250:	f000 fa04 	bl	800265c <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <task_button_press+0x278>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <task_button_press+0x278>)
 800225c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 800225e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002262:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002264:	2306      	movs	r3, #6
 8002266:	74fb      	strb	r3, [r7, #19]
                break;
 8002268:	e000      	b.n	800226c <task_button_press+0x130>
                default:
                break;
 800226a:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 800226c:	2300      	movs	r3, #0
 800226e:	74bb      	strb	r3, [r7, #18]
 8002270:	e012      	b.n	8002298 <task_button_press+0x15c>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe fef5 	bl	8001064 <animate_led_solid_custom_color>
                osDelay(500);
 800227a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800227e:	f000 fceb 	bl	8002c58 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002282:	2100      	movs	r1, #0
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe feed 	bl	8001064 <animate_led_solid_custom_color>
                osDelay(500);
 800228a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800228e:	f000 fce3 	bl	8002c58 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8002292:	7cbb      	ldrb	r3, [r7, #18]
 8002294:	3301      	adds	r3, #1
 8002296:	74bb      	strb	r3, [r7, #18]
 8002298:	7cbb      	ldrb	r3, [r7, #18]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d9e9      	bls.n	8002272 <task_button_press+0x136>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 800229e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2118      	movs	r1, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fc37 	bl	8005b1a <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 80022ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fc4e 	bl	8005b52 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <task_button_press+0x268>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e74a      	b.n	8002154 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe72 	bl	8001fac <task_led_ctrl_button_to_isr>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe96 	bl	8001ffc <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d85d      	bhi.n	8002394 <task_button_press+0x258>
 80022d8:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <task_button_press+0x1a4>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	08002311 	.word	0x08002311
 80022e8:	08002345 	.word	0x08002345
 80022ec:	08002375 	.word	0x08002375
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <task_button_press+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <task_button_press+0x26c>)
 80022f8:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 80022fa:	f000 fb0b 	bl	8002914 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2118      	movs	r1, #24
 8002302:	2008      	movs	r0, #8
 8002304:	f003 fc09 	bl	8005b1a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8002308:	2008      	movs	r0, #8
 800230a:	f003 fc22 	bl	8005b52 <HAL_NVIC_EnableIRQ>
                break;
 800230e:	e042      	b.n	8002396 <task_button_press+0x25a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <task_button_press+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <task_button_press+0x270>)
 8002318:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 800231a:	f000 fb71 	bl	8002a00 <task_led_ctrl_animate_state>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <task_button_press+0x1ee>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002324:	f000 fb56 	bl	80029d4 <task_led_ctrl_animate_state_fixed>
 8002328:	e003      	b.n	8002332 <task_button_press+0x1f6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 800232a:	f000 fb17 	bl	800295c <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 800232e:	f000 fb21 	bl	8002974 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2118      	movs	r1, #24
 8002336:	2028      	movs	r0, #40	; 0x28
 8002338:	f003 fbef 	bl	8005b1a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 800233c:	2028      	movs	r0, #40	; 0x28
 800233e:	f003 fc08 	bl	8005b52 <HAL_NVIC_EnableIRQ>
                break;
 8002342:	e028      	b.n	8002396 <task_button_press+0x25a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <task_button_press+0x274>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <task_button_press+0x274>)
 800234c:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 800234e:	f000 f9af 	bl	80026b0 <task_led_ctrl_color_state>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <task_button_press+0x222>
                    {
                        task_led_ctrl_color_state_fixed();
 8002358:	f000 f9c2 	bl	80026e0 <task_led_ctrl_color_state_fixed>
 800235c:	e001      	b.n	8002362 <task_button_press+0x226>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 800235e:	f000 f9d1 	bl	8002704 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2118      	movs	r1, #24
 8002366:	2017      	movs	r0, #23
 8002368:	f003 fbd7 	bl	8005b1a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 800236c:	2017      	movs	r0, #23
 800236e:	f003 fbf0 	bl	8005b52 <HAL_NVIC_EnableIRQ>

                break;
 8002372:	e010      	b.n	8002396 <task_button_press+0x25a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <task_button_press+0x278>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <task_button_press+0x278>)
 800237c:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 800237e:	f000 f979 	bl	8002674 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2118      	movs	r1, #24
 8002386:	2006      	movs	r0, #6
 8002388:	f003 fbc7 	bl	8005b1a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 800238c:	2006      	movs	r0, #6
 800238e:	f003 fbe0 	bl	8005b52 <HAL_NVIC_EnableIRQ>
                break;
 8002392:	e000      	b.n	8002396 <task_button_press+0x25a>
                default:
                break;
 8002394:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002396:	e6dd      	b.n	8002154 <task_button_press+0x18>
 8002398:	48000400 	.word	0x48000400
 800239c:	20000594 	.word	0x20000594
 80023a0:	200005b4 	.word	0x200005b4
 80023a4:	200005b5 	.word	0x200005b5
 80023a8:	200005bc 	.word	0x200005bc
 80023ac:	200005c0 	.word	0x200005c0
 80023b0:	200005c4 	.word	0x200005c4
 80023b4:	200005c8 	.word	0x200005c8

080023b8 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	460a      	mov	r2, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <task_led_ctrl_adjust_parameters+0x74>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <task_led_ctrl_adjust_parameters+0x74>)
 80023d2:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <task_led_ctrl_adjust_parameters+0x78>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <task_led_ctrl_adjust_parameters+0x32>
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f8f3 	bl	80025d0 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <task_led_ctrl_adjust_parameters+0x74>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d10f      	bne.n	8002414 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <task_led_ctrl_adjust_parameters+0x7c>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <task_led_ctrl_adjust_parameters+0x7c>)
 80023fe:	801a      	strh	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <task_led_ctrl_adjust_parameters+0x7c>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b0a      	cmp	r3, #10
 8002406:	d102      	bne.n	800240e <task_led_ctrl_adjust_parameters+0x56>
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <task_led_ctrl_adjust_parameters+0x7c>)
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
            g_animation_iterations = 0;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <task_led_ctrl_adjust_parameters+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002414:	f000 f94c 	bl	80026b0 <task_led_ctrl_color_state>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <task_led_ctrl_adjust_parameters+0x6a>
 800241e:	f000 fa17 	bl	8002850 <task_led_ctrl_color_random>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200005d2 	.word	0x200005d2
 8002430:	200005cc 	.word	0x200005cc
 8002434:	200005ce 	.word	0x200005ce

08002438 <task_led_init>:


void task_led_init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    g_led_state = flash_info_read_led_start_animation();
 800243c:	f008 ff5e 	bl	800b2fc <flash_info_read_led_start_animation>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <task_led_init+0x20>)
 8002446:	801a      	strh	r2, [r3, #0]
    g_led_color = flash_info_read_led_start_color();
 8002448:	f008 ff4a 	bl	800b2e0 <flash_info_read_led_start_color>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <task_led_init+0x24>)
 8002452:	801a      	strh	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200005ce 	.word	0x200005ce
 800245c:	200000a4 	.word	0x200000a4

08002460 <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 8002466:	6078      	str	r0, [r7, #4]
    task_led_init();
 8002468:	f7ff ffe6 	bl	8002438 <task_led_init>
//        osDelay(5000);
//    }

    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 800246c:	e002      	b.n	8002474 <task_led_ctrl_strip_one+0x14>
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f000 fbf2 	bl	8002c58 <osDelay>
 8002474:	f7ff fe56 	bl	8002124 <task_button_press_major_state_change>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f7      	bne.n	800246e <task_led_ctrl_strip_one+0xe>

        //if (flash_info_animation_enabled(g_led_state))
        //{
            switch(g_led_state)
 800247e:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <task_led_ctrl_strip_one+0x168>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b09      	cmp	r3, #9
 8002484:	f200 809d 	bhi.w	80025c2 <task_led_ctrl_strip_one+0x162>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <task_led_ctrl_strip_one+0x30>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080025a9 	.word	0x080025a9
 8002494:	080024b9 	.word	0x080024b9
 8002498:	080024cf 	.word	0x080024cf
 800249c:	08002505 	.word	0x08002505
 80024a0:	0800251d 	.word	0x0800251d
 80024a4:	08002531 	.word	0x08002531
 80024a8:	08002543 	.word	0x08002543
 80024ac:	0800255d 	.word	0x0800255d
 80024b0:	0800256f 	.word	0x0800256f
 80024b4:	08002587 	.word	0x08002587
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 80024b8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fdd1 	bl	8001064 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 80024c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff ff76 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 80024cc:	e07a      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 80024ce:	f000 f937 	bl	8002740 <task_led_ctrl_color_hex>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4619      	mov	r1, r3
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe fdc4 	bl	8001064 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <task_led_ctrl_strip_one+0x16c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d109      	bne.n	80024f8 <task_led_ctrl_strip_one+0x98>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 80024e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024e8:	2005      	movs	r0, #5
 80024ea:	f7ff ff65 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 80024ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f2:	f000 f86d 	bl	80025d0 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 80024f6:	e065      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80024f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80024fc:	2005      	movs	r0, #5
 80024fe:	f7ff ff5b 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 8002502:	e05f      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 8002504:	f7fe fdd0 	bl	80010a8 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 8002508:	2264      	movs	r2, #100	; 0x64
 800250a:	2100      	movs	r1, #0
 800250c:	2001      	movs	r0, #1
 800250e:	f7fe ffeb 	bl	80014e8 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002512:	2100      	movs	r1, #0
 8002514:	2005      	movs	r0, #5
 8002516:	f7ff ff4f 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 800251a:	e053      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 800251c:	2264      	movs	r2, #100	; 0x64
 800251e:	2101      	movs	r1, #1
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe ffe1 	bl	80014e8 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002526:	2100      	movs	r1, #0
 8002528:	200a      	movs	r0, #10
 800252a:	f7ff ff45 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 800252e:	e049      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 8002530:	210a      	movs	r1, #10
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f86a 	bl	800160c <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002538:	2100      	movs	r1, #0
 800253a:	2005      	movs	r0, #5
 800253c:	f7ff ff3c 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 8002540:	e040      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002542:	f000 f8fd 	bl	8002740 <task_led_ctrl_color_hex>
 8002546:	4603      	mov	r3, r0
 8002548:	2214      	movs	r2, #20
 800254a:	4619      	mov	r1, r3
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff f941 	bl	80017d4 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002552:	2100      	movs	r1, #0
 8002554:	200a      	movs	r0, #10
 8002556:	f7ff ff2f 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 800255a:	e033      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 800255c:	2114      	movs	r1, #20
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff f9da 	bl	8001918 <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002564:	2100      	movs	r1, #0
 8002566:	2002      	movs	r0, #2
 8002568:	f7ff ff26 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 800256c:	e02a      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 800256e:	f000 f8e7 	bl	8002740 <task_led_ctrl_color_hex>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fe00 	bl	800117c <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800257c:	2100      	movs	r1, #0
 800257e:	200a      	movs	r0, #10
 8002580:	f7ff ff1a 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 8002584:	e01e      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 8002586:	f7fe fd8f 	bl	80010a8 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800258a:	f000 f8d9 	bl	8002740 <task_led_ctrl_color_hex>
 800258e:	4601      	mov	r1, r0
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2314      	movs	r3, #20
 8002596:	22d8      	movs	r2, #216	; 0xd8
 8002598:	2001      	movs	r0, #1
 800259a:	f7fe ff31 	bl	8001400 <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800259e:	2100      	movs	r1, #0
 80025a0:	2005      	movs	r0, #5
 80025a2:	f7ff ff09 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 80025a6:	e00d      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80025a8:	f000 f8ca 	bl	8002740 <task_led_ctrl_color_hex>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2214      	movs	r2, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe fd82 	bl	80010bc <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80025b8:	2100      	movs	r1, #0
 80025ba:	200a      	movs	r0, #10
 80025bc:	f7ff fefc 	bl	80023b8 <task_led_ctrl_adjust_parameters>
                break;
 80025c0:	e000      	b.n	80025c4 <task_led_ctrl_strip_one+0x164>
                default:
                break;
 80025c2:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 80025c4:	e756      	b.n	8002474 <task_led_ctrl_strip_one+0x14>
 80025c6:	bf00      	nop
 80025c8:	200005ce 	.word	0x200005ce
 80025cc:	200005cc 	.word	0x200005cc

080025d0 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 80025dc:	e002      	b.n	80025e4 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fb3a 	bl	8002c58 <osDelay>
    while (ms_count++ < time_ms)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60fa      	str	r2, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f6      	bhi.n	80025de <task_led_ctrl_delay+0xe>
    }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <task_led_ctrl_brightness_adjust+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <task_led_ctrl_brightness_adjust+0x14>
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <task_led_ctrl_brightness_adjust+0x58>)
 800260a:	2204      	movs	r2, #4
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e005      	b.n	800261c <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <task_led_ctrl_brightness_adjust+0x58>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <task_led_ctrl_brightness_adjust+0x58>)
 800261a:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <task_led_ctrl_brightness_adjust+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d010      	beq.n	8002646 <task_led_ctrl_brightness_adjust+0x4a>
 8002624:	2b04      	cmp	r3, #4
 8002626:	dc13      	bgt.n	8002650 <task_led_ctrl_brightness_adjust+0x54>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <task_led_ctrl_brightness_adjust+0x36>
 800262c:	2b03      	cmp	r3, #3
 800262e:	d005      	beq.n	800263c <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8002630:	e00e      	b.n	8002650 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 8002632:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002636:	f7fe fbdb 	bl	8000df0 <current_monitor_set>
        break;
 800263a:	e009      	b.n	8002650 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 800263c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002640:	f7fe fbd6 	bl	8000df0 <current_monitor_set>
        break;
 8002644:	e004      	b.n	8002650 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8002646:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002658 <task_led_ctrl_brightness_adjust+0x5c>
 800264a:	f7fe fbd1 	bl	8000df0 <current_monitor_set>
        break;
 800264e:	bf00      	nop
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200005d0 	.word	0x200005d0
 8002658:	3c23d70a 	.word	0x3c23d70a

0800265c <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <task_led_ctrl_clear_pause+0x14>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	200005b6 	.word	0x200005b6

08002674 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <task_led_ctrl_pause+0x34>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <task_led_ctrl_pause+0x14>
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <task_led_ctrl_pause+0x38>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e002      	b.n	800268e <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <task_led_ctrl_pause+0x38>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <task_led_ctrl_pause+0x34>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2da      	uxtb	r2, r3
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <task_led_ctrl_pause+0x34>)
 800269a:	701a      	strb	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200000a6 	.word	0x200000a6
 80026ac:	200005b6 	.word	0x200005b6

080026b0 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
    return g_master_color_state;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <task_led_ctrl_color_state+0x14>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200005d1 	.word	0x200005d1

080026c8 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <task_led_ctrl_color_state_demo+0x14>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	200005d1 	.word	0x200005d1

080026e0 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <task_led_ctrl_color_state_fixed+0x1c>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <task_led_ctrl_color_state_fixed+0x20>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	801a      	strh	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200005d1 	.word	0x200005d1
 8002700:	200000a4 	.word	0x200000a4

08002704 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
    bool return_val = false;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <task_led_ctrl_color_adjust+0x38>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	2b26      	cmp	r3, #38	; 0x26
 8002714:	d105      	bne.n	8002722 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <task_led_ctrl_color_adjust+0x38>)
 8002718:	2200      	movs	r2, #0
 800271a:	801a      	strh	r2, [r3, #0]
        return_val = true;
 800271c:	2301      	movs	r3, #1
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	e005      	b.n	800272e <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <task_led_ctrl_color_adjust+0x38>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <task_led_ctrl_color_adjust+0x38>)
 800272c:	801a      	strh	r2, [r3, #0]
    return return_val;
 800272e:	79fb      	ldrb	r3, [r7, #7]
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	200000a4 	.word	0x200000a4

08002740 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <task_led_ctrl_color_hex+0x1c>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <task_led_ctrl_color_hex+0x20>)
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200000a4 	.word	0x200000a4
 8002760:	20000004 	.word	0x20000004

08002764 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	ed2d 8b02 	vpush	{d8}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <task_led_ctrl_color_red_hex+0x48>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <task_led_ctrl_color_red_hex+0x4c>)
 8002776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277a:	0c1b      	lsrs	r3, r3, #16
 800277c:	b2db      	uxtb	r3, r3
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002786:	f7fe fb55 	bl	8000e34 <current_monitor_ratio>
 800278a:	eeb0 7a40 	vmov.f32	s14, s0
 800278e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002796:	edc7 7a01 	vstr	s15, [r7, #4]
 800279a:	793b      	ldrb	r3, [r7, #4]
 800279c:	b2db      	uxtb	r3, r3
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	ecbd 8b02 	vpop	{d8}
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200000a4 	.word	0x200000a4
 80027b0:	20000004 	.word	0x20000004

080027b4 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	ed2d 8b02 	vpush	{d8}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <task_led_ctrl_color_green_hex+0x48>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <task_led_ctrl_color_green_hex+0x4c>)
 80027c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80027d6:	f7fe fb2d 	bl	8000e34 <current_monitor_ratio>
 80027da:	eeb0 7a40 	vmov.f32	s14, s0
 80027de:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80027e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80027ea:	793b      	ldrb	r3, [r7, #4]
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	ecbd 8b02 	vpop	{d8}
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200000a4 	.word	0x200000a4
 8002800:	20000004 	.word	0x20000004

08002804 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	ed2d 8b02 	vpush	{d8}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <task_led_ctrl_color_blue_hex+0x44>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <task_led_ctrl_color_blue_hex+0x48>)
 8002816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002824:	f7fe fb06 	bl	8000e34 <current_monitor_ratio>
 8002828:	eeb0 7a40 	vmov.f32	s14, s0
 800282c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002834:	edc7 7a01 	vstr	s15, [r7, #4]
 8002838:	793b      	ldrb	r3, [r7, #4]
 800283a:	b2db      	uxtb	r3, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	ecbd 8b02 	vpop	{d8}
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200000a4 	.word	0x200000a4
 800284c:	20000004 	.word	0x20000004

08002850 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 8002856:	2127      	movs	r1, #39	; 0x27
 8002858:	2000      	movs	r0, #0
 800285a:	f008 fd95 	bl	800b388 <random_num>
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
    if (g_led_color == color)
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <task_led_ctrl_color_random+0x48>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	429a      	cmp	r2, r3
 800286a:	d10e      	bne.n	800288a <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	2b26      	cmp	r3, #38	; 0x26
 8002870:	d105      	bne.n	800287e <task_led_ctrl_color_random+0x2e>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <task_led_ctrl_color_random+0x48>)
 800287a:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 800287c:	e008      	b.n	8002890 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	3301      	adds	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <task_led_ctrl_color_random+0x48>)
 8002886:	801a      	strh	r2, [r3, #0]
}
 8002888:	e002      	b.n	8002890 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800288a:	4a03      	ldr	r2, [pc, #12]	; (8002898 <task_led_ctrl_color_random+0x48>)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	8013      	strh	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200000a4 	.word	0x200000a4

0800289c <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <task_led_ctrl_speed+0x6c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d81f      	bhi.n	80028f0 <task_led_ctrl_speed+0x54>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <task_led_ctrl_speed+0x1c>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028d3 	.word	0x080028d3
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028e1 	.word	0x080028e1
 80028c8:	080028e9 	.word	0x080028e9
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <task_led_ctrl_speed+0x70>)
 80028ce:	607b      	str	r3, [r7, #4]
        break;
 80028d0:	e00f      	b.n	80028f2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <task_led_ctrl_speed+0x74>)
 80028d4:	607b      	str	r3, [r7, #4]
        break;
 80028d6:	e00c      	b.n	80028f2 <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 80028d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028dc:	607b      	str	r3, [r7, #4]
        break;
 80028de:	e008      	b.n	80028f2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 80028e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80028e4:	607b      	str	r3, [r7, #4]
        break;
 80028e6:	e004      	b.n	80028f2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 80028e8:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80028ec:	607b      	str	r3, [r7, #4]
        break;
 80028ee:	e000      	b.n	80028f2 <task_led_ctrl_speed+0x56>
        default:
        break;
 80028f0:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
}
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	200000a2 	.word	0x200000a2
 800290c:	41200000 	.word	0x41200000
 8002910:	40a00000 	.word	0x40a00000

08002914 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <task_led_ctrl_speed_adjust+0x2c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <task_led_ctrl_speed_adjust+0x14>
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <task_led_ctrl_speed_adjust+0x2c>)
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 8002926:	e005      	b.n	8002934 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <task_led_ctrl_speed_adjust+0x2c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <task_led_ctrl_speed_adjust+0x2c>)
 8002932:	701a      	strb	r2, [r3, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	200000a2 	.word	0x200000a2

08002944 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <task_led_ctrl_speed_reset+0x14>)
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200000a2 	.word	0x200000a2

0800295c <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <task_led_ctrl_animate_iteration_reset+0x14>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	200005d2 	.word	0x200005d2

08002974 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
    bool return_val = false;
 800297a:	2300      	movs	r3, #0
 800297c:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <task_led_ctrl_animate_adjust_state+0x38>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	2b09      	cmp	r3, #9
 8002984:	d105      	bne.n	8002992 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <task_led_ctrl_animate_adjust_state+0x38>)
 8002988:	2200      	movs	r2, #0
 800298a:	801a      	strh	r2, [r3, #0]
        return_val = true;
 800298c:	2301      	movs	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	e005      	b.n	800299e <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <task_led_ctrl_animate_adjust_state+0x38>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <task_led_ctrl_animate_adjust_state+0x38>)
 800299c:	801a      	strh	r2, [r3, #0]
    return return_val;
 800299e:	79fb      	ldrb	r3, [r7, #7]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	200005ce 	.word	0x200005ce

080029b0 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <task_led_ctrl_animate_state_demo+0x1c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <task_led_ctrl_animate_state_demo+0x20>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200005cc 	.word	0x200005cc
 80029d0:	200005d2 	.word	0x200005d2

080029d4 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <task_led_ctrl_animate_state_fixed+0x20>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <task_led_ctrl_animate_state_fixed+0x24>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	801a      	strh	r2, [r3, #0]
    g_animation_iterations = 0;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <task_led_ctrl_animate_state_fixed+0x28>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	200005cc 	.word	0x200005cc
 80029f8:	200005ce 	.word	0x200005ce
 80029fc:	200005d2 	.word	0x200005d2

08002a00 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <task_led_ctrl_animate_state+0x14>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200005cc 	.word	0x200005cc

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SysTick_Handler+0x1c>)
 8002a72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a74:	f001 fd10 	bl	8004498 <xTaskGetSchedulerState>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a7e:	f002 fc2b 	bl	80052d8 <xPortSysTickHandler>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a90:	2100      	movs	r1, #0
 8002a92:	f06f 0004 	mvn.w	r0, #4
 8002a96:	f7ff ffbf 	bl	8002a18 <__NVIC_SetPriority>
#endif
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa6:	f3ef 8305 	mrs	r3, IPSR
 8002aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8002aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ab2:	f06f 0305 	mvn.w	r3, #5
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	e00c      	b.n	8002ad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <osKernelInitialize+0x44>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <osKernelInitialize+0x44>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	e002      	b.n	8002ad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ad4:	687b      	ldr	r3, [r7, #4]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200005d4 	.word	0x200005d4

08002ae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aee:	f3ef 8305 	mrs	r3, IPSR
 8002af2:	603b      	str	r3, [r7, #0]
  return(result);
 8002af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002afa:	f06f 0305 	mvn.w	r3, #5
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e010      	b.n	8002b24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <osKernelStart+0x48>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d109      	bne.n	8002b1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b0a:	f7ff ffbf 	bl	8002a8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <osKernelStart+0x48>)
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b14:	f001 f866 	bl	8003be4 <vTaskStartScheduler>
      stat = osOK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e002      	b.n	8002b24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b24:	687b      	ldr	r3, [r7, #4]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200005d4 	.word	0x200005d4

08002b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b44:	f3ef 8305 	mrs	r3, IPSR
 8002b48:	617b      	str	r3, [r7, #20]
  return(result);
 8002b4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d17e      	bne.n	8002c4e <osThreadNew+0x11a>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07b      	beq.n	8002c4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b5a:	2318      	movs	r3, #24
 8002b5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d045      	beq.n	8002bfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <osThreadNew+0x48>
        name = attr->name;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <osThreadNew+0x6e>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b38      	cmp	r3, #56	; 0x38
 8002b94:	d805      	bhi.n	8002ba2 <osThreadNew+0x6e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <osThreadNew+0x72>
        return (NULL);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e054      	b.n	8002c50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00e      	beq.n	8002bdc <osThreadNew+0xa8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b5b      	cmp	r3, #91	; 0x5b
 8002bc4:	d90a      	bls.n	8002bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <osThreadNew+0xa8>
        mem = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e010      	b.n	8002bfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10c      	bne.n	8002bfe <osThreadNew+0xca>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d108      	bne.n	8002bfe <osThreadNew+0xca>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <osThreadNew+0xca>
          mem = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e001      	b.n	8002bfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d110      	bne.n	8002c26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c0c:	9202      	str	r2, [sp, #8]
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fe0c 	bl	8003838 <xTaskCreateStatic>
 8002c20:	4603      	mov	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e013      	b.n	8002c4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fe57 	bl	80038f2 <xTaskCreate>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d001      	beq.n	8002c4e <osThreadNew+0x11a>
            hTask = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c60:	f3ef 8305 	mrs	r3, IPSR
 8002c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <osDelay+0x1c>
    stat = osErrorISR;
 8002c6c:	f06f 0305 	mvn.w	r3, #5
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e007      	b.n	8002c84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 ff7c 	bl	8003b7c <vTaskDelay>
    }
  }

  return (stat);
 8002c84:	68fb      	ldr	r3, [r7, #12]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	601a      	str	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200005d8 	.word	0x200005d8
 8002cc0:	20000634 	.word	0x20000634

08002cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a06      	ldr	r2, [pc, #24]	; (8002cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8002cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	20000834 	.word	0x20000834
 8002cf4:	20000890 	.word	0x20000890

08002cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f103 0208 	add.w	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f103 0208 	add.w	r2, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f103 0208 	add.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d103      	bne.n	8002dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e00c      	b.n	8002dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e002      	b.n	8002dc8 <vListInsert+0x2e>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d2f6      	bcs.n	8002dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6852      	ldr	r2, [r2, #4]
 8002e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d103      	bne.n	8002e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1e5a      	subs	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e8a:	f002 f993 	bl	80051b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	441a      	add	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	441a      	add	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d114      	bne.n	8002f0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01a      	beq.n	8002f1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3310      	adds	r3, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f915 	bl	800411c <xTaskRemoveFromEventList>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <xQueueGenericReset+0xcc>)
 8002efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	e009      	b.n	8002f1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fef2 	bl	8002cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff feed 	bl	8002cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f1e:	f002 f979 	bl	8005214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	; 0x38
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <xQueueGenericCreateStatic+0x52>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <xQueueGenericCreateStatic+0x56>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericCreateStatic+0x58>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <xQueueGenericCreateStatic+0x7e>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueGenericCreateStatic+0x82>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueGenericCreateStatic+0x84>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61fb      	str	r3, [r7, #28]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fce:	2350      	movs	r3, #80	; 0x50
 8002fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b50      	cmp	r3, #80	; 0x50
 8002fd6:	d00a      	beq.n	8002fee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	61bb      	str	r3, [r7, #24]
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f805 	bl	8003020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003018:	4618      	mov	r0, r3
 800301a:	3730      	adds	r7, #48	; 0x30
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d103      	bne.n	800303c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e002      	b.n	8003042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800304e:	2101      	movs	r1, #1
 8003050:	69b8      	ldr	r0, [r7, #24]
 8003052:	f7ff ff05 	bl	8002e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003076:	2300      	movs	r3, #0
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericSend+0x32>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <xQueueGenericSend+0x40>
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <xQueueGenericSend+0x44>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <xQueueGenericSend+0x46>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <xQueueGenericSend+0x60>
	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d103      	bne.n	80030d6 <xQueueGenericSend+0x6e>
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <xQueueGenericSend+0x72>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <xQueueGenericSend+0x74>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	623b      	str	r3, [r7, #32]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030f6:	f001 f9cf 	bl	8004498 <xTaskGetSchedulerState>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <xQueueGenericSend+0x9e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <xQueueGenericSend+0xa2>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueGenericSend+0xa4>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericSend+0xbe>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61fb      	str	r3, [r7, #28]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003126:	f002 f845 	bl	80051b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <xQueueGenericSend+0xd4>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d129      	bne.n	8003190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003142:	f000 fa0b 	bl	800355c <prvCopyDataToQueue>
 8003146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	4618      	mov	r0, r3
 8003156:	f000 ffe1 	bl	800411c <xTaskRemoveFromEventList>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003160:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <xQueueGenericSend+0x1f8>)
 8003162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	e00a      	b.n	8003188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <xQueueGenericSend+0x1f8>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003188:	f002 f844 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 800318c:	2301      	movs	r3, #1
 800318e:	e063      	b.n	8003258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003196:	f002 f83d 	bl	8005214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800319a:	2300      	movs	r3, #0
 800319c:	e05c      	b.n	8003258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 f81b 	bl	80041e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031b2:	f002 f82f 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031b6:	f000 fd7b 	bl	8003cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ba:	f001 fffb 	bl	80051b4 <vPortEnterCritical>
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ca:	d103      	bne.n	80031d4 <xQueueGenericSend+0x16c>
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e0:	d103      	bne.n	80031ea <xQueueGenericSend+0x182>
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ea:	f002 f813 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ee:	1d3a      	adds	r2, r7, #4
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f80a 	bl	8004210 <xTaskCheckForTimeOut>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d124      	bne.n	800324c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003204:	f000 faa2 	bl	800374c <prvIsQueueFull>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d018      	beq.n	8003240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	3310      	adds	r3, #16
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff30 	bl	800407c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800321c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800321e:	f000 fa2d 	bl	800367c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003222:	f000 fd53 	bl	8003ccc <xTaskResumeAll>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f af7c 	bne.w	8003126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <xQueueGenericSend+0x1f8>)
 8003230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	e772      	b.n	8003126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003242:	f000 fa1b 	bl	800367c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003246:	f000 fd41 	bl	8003ccc <xTaskResumeAll>
 800324a:	e76c      	b.n	8003126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800324c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324e:	f000 fa15 	bl	800367c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003252:	f000 fd3b 	bl	8003ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003258:	4618      	mov	r0, r3
 800325a:	3738      	adds	r7, #56	; 0x38
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b090      	sub	sp, #64	; 0x40
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d103      	bne.n	80032a0 <xQueueGenericSendFromISR+0x3c>
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <xQueueGenericSendFromISR+0x40>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <xQueueGenericSendFromISR+0x42>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d103      	bne.n	80032ce <xQueueGenericSendFromISR+0x6a>
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <xQueueGenericSendFromISR+0x6e>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueGenericSendFromISR+0x70>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ee:	f002 f843 	bl	8005378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032f2:	f3ef 8211 	mrs	r2, BASEPRI
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	61fa      	str	r2, [r7, #28]
 8003308:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800330a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <xQueueGenericSendFromISR+0xbc>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d12f      	bne.n	8003380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003336:	f000 f911 	bl	800355c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800333a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d112      	bne.n	800336a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fee3 	bl	800411c <xTaskRemoveFromEventList>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e007      	b.n	800337a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800336a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800336e:	3301      	adds	r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	b25a      	sxtb	r2, r3
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800337a:	2301      	movs	r3, #1
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800337e:	e001      	b.n	8003384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003380:	2300      	movs	r3, #0
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800338e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003392:	4618      	mov	r0, r3
 8003394:	3740      	adds	r7, #64	; 0x40
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <xQueueReceive+0x30>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	623b      	str	r3, [r7, #32]
}
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <xQueueReceive+0x3e>
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <xQueueReceive+0x42>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueReceive+0x44>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueReceive+0x5e>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61fb      	str	r3, [r7, #28]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033fa:	f001 f84d 	bl	8004498 <xTaskGetSchedulerState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <xQueueReceive+0x6e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <xQueueReceive+0x72>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xQueueReceive+0x74>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xQueueReceive+0x8e>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61bb      	str	r3, [r7, #24]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800342a:	f001 fec3 	bl	80051b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01f      	beq.n	800347a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343e:	f000 f8f7 	bl	8003630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	1e5a      	subs	r2, r3, #1
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	3310      	adds	r3, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fe60 	bl	800411c <xTaskRemoveFromEventList>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <xQueueReceive+0x1bc>)
 8003464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003472:	f001 fecf 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 8003476:	2301      	movs	r3, #1
 8003478:	e069      	b.n	800354e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d103      	bne.n	8003488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003480:	f001 fec8 	bl	8005214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003484:	2300      	movs	r3, #0
 8003486:	e062      	b.n	800354e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348e:	f107 0310 	add.w	r3, r7, #16
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fea6 	bl	80041e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349c:	f001 feba 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034a0:	f000 fc06 	bl	8003cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a4:	f001 fe86 	bl	80051b4 <vPortEnterCritical>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b4:	d103      	bne.n	80034be <xQueueReceive+0x122>
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ca:	d103      	bne.n	80034d4 <xQueueReceive+0x138>
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d4:	f001 fe9e 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d8:	1d3a      	adds	r2, r7, #4
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fe95 	bl	8004210 <xTaskCheckForTimeOut>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d123      	bne.n	8003534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ee:	f000 f917 	bl	8003720 <prvIsQueueEmpty>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	3324      	adds	r3, #36	; 0x24
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fdbb 	bl	800407c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003508:	f000 f8b8 	bl	800367c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800350c:	f000 fbde 	bl	8003ccc <xTaskResumeAll>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d189      	bne.n	800342a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <xQueueReceive+0x1bc>)
 8003518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	e780      	b.n	800342a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352a:	f000 f8a7 	bl	800367c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352e:	f000 fbcd 	bl	8003ccc <xTaskResumeAll>
 8003532:	e77a      	b.n	800342a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003536:	f000 f8a1 	bl	800367c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800353a:	f000 fbc7 	bl	8003ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800353e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003540:	f000 f8ee 	bl	8003720 <prvIsQueueEmpty>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f43f af6f 	beq.w	800342a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800354c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800354e:	4618      	mov	r0, r3
 8003550:	3730      	adds	r7, #48	; 0x30
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d14d      	bne.n	800361e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 ffa4 	bl	80044d4 <xTaskPriorityDisinherit>
 800358c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e043      	b.n	800361e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d119      	bne.n	80035d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6858      	ldr	r0, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	461a      	mov	r2, r3
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	f007 ff62 	bl	800b470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	441a      	add	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d32b      	bcc.n	800361e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e026      	b.n	800361e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68d8      	ldr	r0, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	461a      	mov	r2, r3
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	f007 ff48 	bl	800b470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	425b      	negs	r3, r3
 80035ea:	441a      	add	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	425b      	negs	r3, r3
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d105      	bne.n	800361e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3b01      	subs	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d018      	beq.n	8003674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d303      	bcc.n	8003664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68d9      	ldr	r1, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	461a      	mov	r2, r3
 800366e:	6838      	ldr	r0, [r7, #0]
 8003670:	f007 fefe 	bl	800b470 <memcpy>
	}
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003684:	f001 fd96 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800368e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003690:	e011      	b.n	80036b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3324      	adds	r3, #36	; 0x24
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fd3c 	bl	800411c <xTaskRemoveFromEventList>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036aa:	f000 fe13 	bl	80042d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	dce9      	bgt.n	8003692 <prvUnlockQueue+0x16>
 80036be:	e000      	b.n	80036c2 <prvUnlockQueue+0x46>
					break;
 80036c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fda3 	bl	8005214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036ce:	f001 fd71 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036da:	e011      	b.n	8003700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3310      	adds	r3, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fd17 	bl	800411c <xTaskRemoveFromEventList>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036f4:	f000 fdee 	bl	80042d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003704:	2b00      	cmp	r3, #0
 8003706:	dce9      	bgt.n	80036dc <prvUnlockQueue+0x60>
 8003708:	e000      	b.n	800370c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800370a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003714:	f001 fd7e 	bl	8005214 <vPortExitCritical>
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003728:	f001 fd44 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e001      	b.n	800373e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800373e:	f001 fd69 	bl	8005214 <vPortExitCritical>

	return xReturn;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003754:	f001 fd2e 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	429a      	cmp	r2, r3
 8003762:	d102      	bne.n	800376a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e001      	b.n	800376e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800376e:	f001 fd51 	bl	8005214 <vPortExitCritical>

	return xReturn;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e014      	b.n	80037b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800378c:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <vQueueAddToRegistry+0x50>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <vQueueAddToRegistry+0x50>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <vQueueAddToRegistry+0x50>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037ae:	e006      	b.n	80037be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b07      	cmp	r3, #7
 80037ba:	d9e7      	bls.n	800378c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000c90 	.word	0x20000c90

080037d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037e0:	f001 fce8 	bl	80051b4 <vPortEnterCritical>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d103      	bne.n	80037fa <vQueueWaitForMessageRestricted+0x2a>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003806:	d103      	bne.n	8003810 <vQueueWaitForMessageRestricted+0x40>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003810:	f001 fd00 	bl	8005214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fc4d 	bl	80040c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff26 	bl	800367c <prvUnlockQueue>
	}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af04      	add	r7, sp, #16
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	623b      	str	r3, [r7, #32]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xTaskCreateStatic+0x46>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61fb      	str	r3, [r7, #28]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800387e:	235c      	movs	r3, #92	; 0x5c
 8003880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b5c      	cmp	r3, #92	; 0x5c
 8003886:	d00a      	beq.n	800389e <xTaskCreateStatic+0x66>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	61bb      	str	r3, [r7, #24]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800389e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01e      	beq.n	80038e4 <xTaskCreateStatic+0xac>
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038be:	2300      	movs	r3, #0
 80038c0:	9303      	str	r3, [sp, #12]
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	9302      	str	r3, [sp, #8]
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f850 	bl	800397c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038de:	f000 f8dd 	bl	8003a9c <prvAddNewTaskToReadyList>
 80038e2:	e001      	b.n	80038e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038e8:	697b      	ldr	r3, [r7, #20]
	}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08c      	sub	sp, #48	; 0x30
 80038f6:	af04      	add	r7, sp, #16
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fd76 	bl	80053f8 <pvPortMalloc>
 800390c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003914:	205c      	movs	r0, #92	; 0x5c
 8003916:	f001 fd6f 	bl	80053f8 <pvPortMalloc>
 800391a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	e005      	b.n	8003936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f001 fe30 	bl	8005590 <vPortFree>
 8003930:	e001      	b.n	8003936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d017      	beq.n	800396c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	2300      	movs	r3, #0
 8003948:	9303      	str	r3, [sp, #12]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	9302      	str	r3, [sp, #8]
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f80e 	bl	800397c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003960:	69f8      	ldr	r0, [r7, #28]
 8003962:	f000 f89b 	bl	8003a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003966:	2301      	movs	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e002      	b.n	8003972 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003970:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003972:	69bb      	ldr	r3, [r7, #24]
	}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	21a5      	movs	r1, #165	; 0xa5
 8003996:	f007 fd79 	bl	800b48c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039a4:	3b01      	subs	r3, #1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	617b      	str	r3, [r7, #20]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01f      	beq.n	8003a1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e012      	b.n	8003a06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	3334      	adds	r3, #52	; 0x34
 80039f0:	460a      	mov	r2, r1
 80039f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d9e9      	bls.n	80039e0 <prvInitialiseNewTask+0x64>
 8003a0c:	e000      	b.n	8003a10 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	e003      	b.n	8003a22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	2b37      	cmp	r3, #55	; 0x37
 8003a26:	d901      	bls.n	8003a2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a28:	2337      	movs	r3, #55	; 0x37
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f978 	bl	8002d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f973 	bl	8002d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	69b8      	ldr	r0, [r7, #24]
 8003a7c:	f001 fa70 	bl	8004f60 <pxPortInitialiseStack>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a92:	bf00      	nop
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003aa4:	f001 fb86 	bl	80051b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <prvAddNewTaskToReadyList+0xc4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <prvAddNewTaskToReadyList+0xc4>)
 8003ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <prvAddNewTaskToReadyList+0xc8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aba:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <prvAddNewTaskToReadyList+0xc4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d110      	bne.n	8003aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ac8:	f000 fc28 	bl	800431c <prvInitialiseTaskLists>
 8003acc:	e00d      	b.n	8003aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <prvAddNewTaskToReadyList+0xcc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ad6:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <prvAddNewTaskToReadyList+0xc8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d802      	bhi.n	8003aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <prvAddNewTaskToReadyList+0xc8>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <prvAddNewTaskToReadyList+0xd0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <prvAddNewTaskToReadyList+0xd0>)
 8003af2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <prvAddNewTaskToReadyList+0xd0>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <prvAddNewTaskToReadyList+0xd4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d903      	bls.n	8003b10 <prvAddNewTaskToReadyList+0x74>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <prvAddNewTaskToReadyList+0xd4>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <prvAddNewTaskToReadyList+0xd8>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7ff f913 	bl	8002d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b2c:	f001 fb72 	bl	8005214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <prvAddNewTaskToReadyList+0xcc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <prvAddNewTaskToReadyList+0xc8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d207      	bcs.n	8003b56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <prvAddNewTaskToReadyList+0xdc>)
 8003b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200011a4 	.word	0x200011a4
 8003b64:	20000cd0 	.word	0x20000cd0
 8003b68:	200011b0 	.word	0x200011b0
 8003b6c:	200011c0 	.word	0x200011c0
 8003b70:	200011ac 	.word	0x200011ac
 8003b74:	20000cd4 	.word	0x20000cd4
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <vTaskDelay+0x60>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <vTaskDelay+0x30>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60bb      	str	r3, [r7, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bac:	f000 f880 	bl	8003cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fe32 	bl	800481c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bb8:	f000 f888 	bl	8003ccc <xTaskResumeAll>
 8003bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <vTaskDelay+0x64>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	200011cc 	.word	0x200011cc
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bf2:	463a      	mov	r2, r7
 8003bf4:	1d39      	adds	r1, r7, #4
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f848 	bl	8002c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	9202      	str	r2, [sp, #8]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	460a      	mov	r2, r1
 8003c12:	4921      	ldr	r1, [pc, #132]	; (8003c98 <vTaskStartScheduler+0xb4>)
 8003c14:	4821      	ldr	r0, [pc, #132]	; (8003c9c <vTaskStartScheduler+0xb8>)
 8003c16:	f7ff fe0f 	bl	8003838 <xTaskCreateStatic>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <vTaskStartScheduler+0xbc>)
 8003c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <vTaskStartScheduler+0xbc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e001      	b.n	8003c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c38:	f000 fe44 	bl	80048c4 <xTimerCreateTimerTask>
 8003c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d116      	bne.n	8003c72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	613b      	str	r3, [r7, #16]
}
 8003c56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <vTaskStartScheduler+0xc0>)
 8003c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <vTaskStartScheduler+0xc4>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <vTaskStartScheduler+0xc8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c6c:	f001 fa00 	bl	8005070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c70:	e00e      	b.n	8003c90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c78:	d10a      	bne.n	8003c90 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60fb      	str	r3, [r7, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <vTaskStartScheduler+0xaa>
}
 8003c90:	bf00      	nop
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800c5dc 	.word	0x0800c5dc
 8003c9c:	080042ed 	.word	0x080042ed
 8003ca0:	200011c8 	.word	0x200011c8
 8003ca4:	200011c4 	.word	0x200011c4
 8003ca8:	200011b0 	.word	0x200011b0
 8003cac:	200011a8 	.word	0x200011a8

08003cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <vTaskSuspendAll+0x18>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	4a03      	ldr	r2, [pc, #12]	; (8003cc8 <vTaskSuspendAll+0x18>)
 8003cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	200011cc 	.word	0x200011cc

08003ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cda:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <xTaskResumeAll+0x118>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	603b      	str	r3, [r7, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	e7fe      	b.n	8003cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cf8:	f001 fa5c 	bl	80051b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <xTaskResumeAll+0x118>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <xTaskResumeAll+0x118>)
 8003d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <xTaskResumeAll+0x118>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d162      	bne.n	8003dd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <xTaskResumeAll+0x11c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d05e      	beq.n	8003dd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d16:	e02f      	b.n	8003d78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	4b34      	ldr	r3, [pc, #208]	; (8003dec <xTaskResumeAll+0x120>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff f871 	bl	8002e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f86c 	bl	8002e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <xTaskResumeAll+0x124>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d903      	bls.n	8003d48 <xTaskResumeAll+0x7c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <xTaskResumeAll+0x124>)
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <xTaskResumeAll+0x128>)
 8003d56:	441a      	add	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7fe fff7 	bl	8002d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <xTaskResumeAll+0x12c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <xTaskResumeAll+0x130>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d78:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <xTaskResumeAll+0x120>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1cb      	bne.n	8003d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d86:	f000 fb67 	bl	8004458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <xTaskResumeAll+0x134>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d96:	f000 f859 	bl	8003e4c <xTaskIncrementTick>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <xTaskResumeAll+0x130>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f1      	bne.n	8003d96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <xTaskResumeAll+0x134>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <xTaskResumeAll+0x130>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <xTaskResumeAll+0x138>)
 8003dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dd4:	f001 fa1e 	bl	8005214 <vPortExitCritical>

	return xAlreadyYielded;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200011cc 	.word	0x200011cc
 8003de8:	200011a4 	.word	0x200011a4
 8003dec:	20001164 	.word	0x20001164
 8003df0:	200011ac 	.word	0x200011ac
 8003df4:	20000cd4 	.word	0x20000cd4
 8003df8:	20000cd0 	.word	0x20000cd0
 8003dfc:	200011b8 	.word	0x200011b8
 8003e00:	200011b4 	.word	0x200011b4
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <xTaskGetTickCount+0x1c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200011a8 	.word	0x200011a8

08003e28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e2e:	f001 faa3 	bl	8005378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <xTaskGetTickCountFromISR+0x20>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e3c:	683b      	ldr	r3, [r7, #0]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200011a8 	.word	0x200011a8

08003e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <xTaskIncrementTick+0x148>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 808f 	bne.w	8003f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <xTaskIncrementTick+0x14c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e68:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <xTaskIncrementTick+0x14c>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d120      	bne.n	8003eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e74:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xTaskIncrementTick+0x46>
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	f000 fad1 	bl	8004458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d349      	bcc.n	8003f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed0:	601a      	str	r2, [r3, #0]
					break;
 8003ed2:	e03f      	b.n	8003f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed4:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d203      	bcs.n	8003ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eec:	4a2e      	ldr	r2, [pc, #184]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ef2:	e02f      	b.n	8003f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe ff87 	bl	8002e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe ff7e 	bl	8002e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <xTaskIncrementTick+0x160>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d903      	bls.n	8003f24 <xTaskIncrementTick+0xd8>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <xTaskIncrementTick+0x160>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f32:	441a      	add	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe ff09 	bl	8002d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3b8      	bcc.n	8003ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f52:	e7b5      	b.n	8003ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4915      	ldr	r1, [pc, #84]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d901      	bls.n	8003f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <xTaskIncrementTick+0x16c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e004      	b.n	8003f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f88:	697b      	ldr	r3, [r7, #20]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200011cc 	.word	0x200011cc
 8003f98:	200011a8 	.word	0x200011a8
 8003f9c:	2000115c 	.word	0x2000115c
 8003fa0:	20001160 	.word	0x20001160
 8003fa4:	200011bc 	.word	0x200011bc
 8003fa8:	200011c4 	.word	0x200011c4
 8003fac:	200011ac 	.word	0x200011ac
 8003fb0:	20000cd4 	.word	0x20000cd4
 8003fb4:	20000cd0 	.word	0x20000cd0
 8003fb8:	200011b8 	.word	0x200011b8
 8003fbc:	200011b4 	.word	0x200011b4

08003fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fc6:	4b28      	ldr	r3, [pc, #160]	; (8004068 <vTaskSwitchContext+0xa8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <vTaskSwitchContext+0xac>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fd4:	e041      	b.n	800405a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fd6:	4b25      	ldr	r3, [pc, #148]	; (800406c <vTaskSwitchContext+0xac>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <vTaskSwitchContext+0xb0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e010      	b.n	8004006 <vTaskSwitchContext+0x46>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vTaskSwitchContext+0x3e>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	491b      	ldr	r1, [pc, #108]	; (8004074 <vTaskSwitchContext+0xb4>)
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0e4      	beq.n	8003fe4 <vTaskSwitchContext+0x24>
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <vTaskSwitchContext+0xb4>)
 8004026:	4413      	add	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3308      	adds	r3, #8
 800403c:	429a      	cmp	r2, r3
 800403e:	d104      	bne.n	800404a <vTaskSwitchContext+0x8a>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a09      	ldr	r2, [pc, #36]	; (8004078 <vTaskSwitchContext+0xb8>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4a06      	ldr	r2, [pc, #24]	; (8004070 <vTaskSwitchContext+0xb0>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	200011cc 	.word	0x200011cc
 800406c:	200011b8 	.word	0x200011b8
 8004070:	200011ac 	.word	0x200011ac
 8004074:	20000cd4 	.word	0x20000cd4
 8004078:	20000cd0 	.word	0x20000cd0

0800407c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60fb      	str	r3, [r7, #12]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <vTaskPlaceOnEventList+0x44>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3318      	adds	r3, #24
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fe75 	bl	8002d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040b0:	2101      	movs	r1, #1
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	f000 fbb2 	bl	800481c <prvAddCurrentTaskToDelayedList>
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000cd0 	.word	0x20000cd0

080040c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	617b      	str	r3, [r7, #20]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <vTaskPlaceOnEventListRestricted+0x54>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3318      	adds	r3, #24
 80040f2:	4619      	mov	r1, r3
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7fe fe2c 	bl	8002d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004104:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f000 fb87 	bl	800481c <prvAddCurrentTaskToDelayedList>
	}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000cd0 	.word	0x20000cd0

0800411c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60fb      	str	r3, [r7, #12]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3318      	adds	r3, #24
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fe5d 	bl	8002e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <xTaskRemoveFromEventList+0xb0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fe54 	bl	8002e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <xTaskRemoveFromEventList+0xb4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d903      	bls.n	8004178 <xTaskRemoveFromEventList+0x5c>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <xTaskRemoveFromEventList+0xb4>)
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <xTaskRemoveFromEventList+0xb8>)
 8004186:	441a      	add	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7fe fddf 	bl	8002d52 <vListInsertEnd>
 8004194:	e005      	b.n	80041a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3318      	adds	r3, #24
 800419a:	4619      	mov	r1, r3
 800419c:	480e      	ldr	r0, [pc, #56]	; (80041d8 <xTaskRemoveFromEventList+0xbc>)
 800419e:	f7fe fdd8 	bl	8002d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <xTaskRemoveFromEventList+0xc0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d905      	bls.n	80041bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <xTaskRemoveFromEventList+0xc4>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e001      	b.n	80041c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041c0:	697b      	ldr	r3, [r7, #20]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200011cc 	.word	0x200011cc
 80041d0:	200011ac 	.word	0x200011ac
 80041d4:	20000cd4 	.word	0x20000cd4
 80041d8:	20001164 	.word	0x20001164
 80041dc:	20000cd0 	.word	0x20000cd0
 80041e0:	200011b8 	.word	0x200011b8

080041e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <vTaskInternalSetTimeOutState+0x24>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <vTaskInternalSetTimeOutState+0x28>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	605a      	str	r2, [r3, #4]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	200011bc 	.word	0x200011bc
 800420c:	200011a8 	.word	0x200011a8

08004210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	613b      	str	r3, [r7, #16]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004252:	f000 ffaf 	bl	80051b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <xTaskCheckForTimeOut+0xbc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426e:	d102      	bne.n	8004276 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e023      	b.n	80042be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <xTaskCheckForTimeOut+0xc0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d007      	beq.n	8004292 <xTaskCheckForTimeOut+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e015      	b.n	80042be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	d20b      	bcs.n	80042b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff9b 	bl	80041e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e004      	b.n	80042be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042be:	f000 ffa9 	bl	8005214 <vPortExitCritical>

	return xReturn;
 80042c2:	69fb      	ldr	r3, [r7, #28]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200011a8 	.word	0x200011a8
 80042d0:	200011bc 	.word	0x200011bc

080042d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <vTaskMissedYield+0x14>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	200011b8 	.word	0x200011b8

080042ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042f4:	f000 f852 	bl	800439c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <prvIdleTask+0x28>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d9f9      	bls.n	80042f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <prvIdleTask+0x2c>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004310:	e7f0      	b.n	80042f4 <prvIdleTask+0x8>
 8004312:	bf00      	nop
 8004314:	20000cd4 	.word	0x20000cd4
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	e00c      	b.n	8004342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <prvInitialiseTaskLists+0x60>)
 8004334:	4413      	add	r3, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fcde 	bl	8002cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3301      	adds	r3, #1
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b37      	cmp	r3, #55	; 0x37
 8004346:	d9ef      	bls.n	8004328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004348:	480d      	ldr	r0, [pc, #52]	; (8004380 <prvInitialiseTaskLists+0x64>)
 800434a:	f7fe fcd5 	bl	8002cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800434e:	480d      	ldr	r0, [pc, #52]	; (8004384 <prvInitialiseTaskLists+0x68>)
 8004350:	f7fe fcd2 	bl	8002cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004354:	480c      	ldr	r0, [pc, #48]	; (8004388 <prvInitialiseTaskLists+0x6c>)
 8004356:	f7fe fccf 	bl	8002cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800435a:	480c      	ldr	r0, [pc, #48]	; (800438c <prvInitialiseTaskLists+0x70>)
 800435c:	f7fe fccc 	bl	8002cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004360:	480b      	ldr	r0, [pc, #44]	; (8004390 <prvInitialiseTaskLists+0x74>)
 8004362:	f7fe fcc9 	bl	8002cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <prvInitialiseTaskLists+0x78>)
 8004368:	4a05      	ldr	r2, [pc, #20]	; (8004380 <prvInitialiseTaskLists+0x64>)
 800436a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <prvInitialiseTaskLists+0x7c>)
 800436e:	4a05      	ldr	r2, [pc, #20]	; (8004384 <prvInitialiseTaskLists+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000cd4 	.word	0x20000cd4
 8004380:	20001134 	.word	0x20001134
 8004384:	20001148 	.word	0x20001148
 8004388:	20001164 	.word	0x20001164
 800438c:	20001178 	.word	0x20001178
 8004390:	20001190 	.word	0x20001190
 8004394:	2000115c 	.word	0x2000115c
 8004398:	20001160 	.word	0x20001160

0800439c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a2:	e019      	b.n	80043d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043a4:	f000 ff06 	bl	80051b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <prvCheckTasksWaitingTermination+0x50>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fd29 	bl	8002e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <prvCheckTasksWaitingTermination+0x54>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <prvCheckTasksWaitingTermination+0x54>)
 80043c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <prvCheckTasksWaitingTermination+0x58>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <prvCheckTasksWaitingTermination+0x58>)
 80043cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ce:	f000 ff21 	bl	8005214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f810 	bl	80043f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <prvCheckTasksWaitingTermination+0x58>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e1      	bne.n	80043a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20001178 	.word	0x20001178
 80043f0:	200011a4 	.word	0x200011a4
 80043f4:	2000118c 	.word	0x2000118c

080043f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4618      	mov	r0, r3
 8004410:	f001 f8be 	bl	8005590 <vPortFree>
				vPortFree( pxTCB );
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 f8bb 	bl	8005590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800441a:	e018      	b.n	800444e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004422:	2b01      	cmp	r3, #1
 8004424:	d103      	bne.n	800442e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 f8b2 	bl	8005590 <vPortFree>
	}
 800442c:	e00f      	b.n	800444e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004434:	2b02      	cmp	r3, #2
 8004436:	d00a      	beq.n	800444e <prvDeleteTCB+0x56>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <prvDeleteTCB+0x54>
	}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 800446a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800446e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004470:	e008      	b.n	8004484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	2000115c 	.word	0x2000115c
 8004494:	200011c4 	.word	0x200011c4

08004498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <xTaskGetSchedulerState+0x34>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044a6:	2301      	movs	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	e008      	b.n	80044be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <xTaskGetSchedulerState+0x38>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044b4:	2302      	movs	r3, #2
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e001      	b.n	80044be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044be:	687b      	ldr	r3, [r7, #4]
	}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	200011b0 	.word	0x200011b0
 80044d0:	200011cc 	.word	0x200011cc

080044d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d056      	beq.n	8004598 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <xTaskPriorityDisinherit+0xd0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d00a      	beq.n	800450a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60fb      	str	r3, [r7, #12]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60bb      	str	r3, [r7, #8]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	429a      	cmp	r2, r3
 800453c:	d02c      	beq.n	8004598 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d128      	bne.n	8004598 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3304      	adds	r3, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fc5e 	bl	8002e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <xTaskPriorityDisinherit+0xd4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d903      	bls.n	8004578 <xTaskPriorityDisinherit+0xa4>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <xTaskPriorityDisinherit+0xd4>)
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <xTaskPriorityDisinherit+0xd8>)
 8004586:	441a      	add	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7fe fbdf 	bl	8002d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004598:	697b      	ldr	r3, [r7, #20]
	}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000cd0 	.word	0x20000cd0
 80045a8:	200011ac 	.word	0x200011ac
 80045ac:	20000cd4 	.word	0x20000cd4

080045b0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80045be:	f000 fdf9 	bl	80051b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <xTaskNotifyWait+0xac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d01a      	beq.n	8004606 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <xTaskNotifyWait+0xac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	43d2      	mvns	r2, r2
 80045da:	400a      	ands	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <xTaskNotifyWait+0xac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045ee:	2101      	movs	r1, #1
 80045f0:	6838      	ldr	r0, [r7, #0]
 80045f2:	f000 f913 	bl	800481c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <xTaskNotifyWait+0xb0>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004606:	f000 fe05 	bl	8005214 <vPortExitCritical>

		taskENTER_CRITICAL();
 800460a:	f000 fdd3 	bl	80051b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <xTaskNotifyWait+0xac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskNotifyWait+0xac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d002      	beq.n	8004632 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e008      	b.n	8004644 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <xTaskNotifyWait+0xac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	43d2      	mvns	r2, r2
 800463c:	400a      	ands	r2, r1
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <xTaskNotifyWait+0xac>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800464e:	f000 fde1 	bl	8005214 <vPortExitCritical>

		return xReturn;
 8004652:	697b      	ldr	r3, [r7, #20]
	}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000cd0 	.word	0x20000cd0
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	; 0x38
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004694:	f000 fe70 	bl	8005378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800469c:	f3ef 8211 	mrs	r2, BASEPRI
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623a      	str	r2, [r7, #32]
 80046b2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80046b4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d828      	bhi.n	8004730 <xTaskGenericNotifyFromISR+0xcc>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <xTaskGenericNotifyFromISR+0x80>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004751 	.word	0x08004751
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	08004707 	.word	0x08004707
 80046f0:	08004713 	.word	0x08004713
 80046f4:	0800471b 	.word	0x0800471b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	431a      	orrs	r2, r3
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004704:	e027      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004710:	e021      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004718:	e01d      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800471a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004728:	e015      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800472e:	e012      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004738:	d00c      	beq.n	8004754 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	61bb      	str	r3, [r7, #24]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xTaskGenericNotifyFromISR+0xea>
					break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004754:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800475a:	2b01      	cmp	r3, #1
 800475c:	d146      	bne.n	80047ec <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	617b      	str	r3, [r7, #20]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477c:	4b21      	ldr	r3, [pc, #132]	; (8004804 <xTaskGenericNotifyFromISR+0x1a0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d11d      	bne.n	80047c0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fb3f 	bl	8002e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <xTaskGenericNotifyFromISR+0x1a4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d903      	bls.n	80047a2 <xTaskGenericNotifyFromISR+0x13e>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a1a      	ldr	r2, [pc, #104]	; (8004808 <xTaskGenericNotifyFromISR+0x1a4>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <xTaskGenericNotifyFromISR+0x1a8>)
 80047b0:	441a      	add	r2, r3
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe faca 	bl	8002d52 <vListInsertEnd>
 80047be:	e005      	b.n	80047cc <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3318      	adds	r3, #24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4812      	ldr	r0, [pc, #72]	; (8004810 <xTaskGenericNotifyFromISR+0x1ac>)
 80047c8:	f7fe fac3 	bl	8002d52 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <xTaskGenericNotifyFromISR+0x1b0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d908      	bls.n	80047ec <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80047da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <xTaskGenericNotifyFromISR+0x1b4>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f383 8811 	msr	BASEPRI, r3
}
 80047f6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3738      	adds	r7, #56	; 0x38
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200011cc 	.word	0x200011cc
 8004808:	200011ac 	.word	0x200011ac
 800480c:	20000cd4 	.word	0x20000cd4
 8004810:	20001164 	.word	0x20001164
 8004814:	20000cd0 	.word	0x20000cd0
 8004818:	200011b8 	.word	0x200011b8

0800481c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <prvAddCurrentTaskToDelayedList+0x90>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe faea 	bl	8002e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483e:	d10a      	bne.n	8004856 <prvAddCurrentTaskToDelayedList+0x3a>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4819      	ldr	r0, [pc, #100]	; (80048b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004850:	f7fe fa7f 	bl	8002d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004854:	e026      	b.n	80048a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	429a      	cmp	r2, r3
 800486c:	d209      	bcs.n	8004882 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f7fe fa8d 	bl	8002d9a <vListInsert>
}
 8004880:	e010      	b.n	80048a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f7fe fa83 	bl	8002d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d202      	bcs.n	80048a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800489e:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200011a8 	.word	0x200011a8
 80048b0:	20000cd0 	.word	0x20000cd0
 80048b4:	20001190 	.word	0x20001190
 80048b8:	20001160 	.word	0x20001160
 80048bc:	2000115c 	.word	0x2000115c
 80048c0:	200011c4 	.word	0x200011c4

080048c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ce:	f000 fb07 	bl	8004ee0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <xTimerCreateTimerTask+0x80>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d021      	beq.n	800491e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048e2:	1d3a      	adds	r2, r7, #4
 80048e4:	f107 0108 	add.w	r1, r7, #8
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe f9e9 	bl	8002cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	9202      	str	r2, [sp, #8]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	2302      	movs	r3, #2
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	460a      	mov	r2, r1
 8004904:	4910      	ldr	r1, [pc, #64]	; (8004948 <xTimerCreateTimerTask+0x84>)
 8004906:	4811      	ldr	r0, [pc, #68]	; (800494c <xTimerCreateTimerTask+0x88>)
 8004908:	f7fe ff96 	bl	8003838 <xTaskCreateStatic>
 800490c:	4603      	mov	r3, r0
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <xTimerCreateTimerTask+0x8c>)
 8004910:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTimerCreateTimerTask+0x8c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800493a:	697b      	ldr	r3, [r7, #20]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20001200 	.word	0x20001200
 8004948:	0800c5e4 	.word	0x0800c5e4
 800494c:	08004a89 	.word	0x08004a89
 8004950:	20001204 	.word	0x20001204

08004954 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xTimerGenericCommand+0x2e>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <xTimerGenericCommand+0x98>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02a      	beq.n	80049e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b05      	cmp	r3, #5
 800499a:	dc18      	bgt.n	80049ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800499c:	f7ff fd7c 	bl	8004498 <xTaskGetSchedulerState>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d109      	bne.n	80049ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <xTimerGenericCommand+0x98>)
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	f107 0110 	add.w	r1, r7, #16
 80049ae:	2300      	movs	r3, #0
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	f7fe fb59 	bl	8003068 <xQueueGenericSend>
 80049b6:	6278      	str	r0, [r7, #36]	; 0x24
 80049b8:	e012      	b.n	80049e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <xTimerGenericCommand+0x98>)
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f107 0110 	add.w	r1, r7, #16
 80049c2:	2300      	movs	r3, #0
 80049c4:	2200      	movs	r2, #0
 80049c6:	f7fe fb4f 	bl	8003068 <xQueueGenericSend>
 80049ca:	6278      	str	r0, [r7, #36]	; 0x24
 80049cc:	e008      	b.n	80049e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <xTimerGenericCommand+0x98>)
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f107 0110 	add.w	r1, r7, #16
 80049d6:	2300      	movs	r3, #0
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	f7fe fc43 	bl	8003264 <xQueueGenericSendFromISR>
 80049de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3728      	adds	r7, #40	; 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20001200 	.word	0x20001200

080049f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <prvProcessExpiredTimer+0x94>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe f9ff 	bl	8002e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d022      	beq.n	8004a62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	18d1      	adds	r1, r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f000 f8d1 	bl	8004bd0 <prvInsertTimerInActiveList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01f      	beq.n	8004a74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a34:	2300      	movs	r3, #0
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7ff ff88 	bl	8004954 <xTimerGenericCommand>
 8004a44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d113      	bne.n	8004a74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	6978      	ldr	r0, [r7, #20]
 8004a7a:	4798      	blx	r3
}
 8004a7c:	bf00      	nop
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	200011f8 	.word	0x200011f8

08004a88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f857 	bl	8004b48 <prvGetNextExpireTime>
 8004a9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f803 	bl	8004aac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aa6:	f000 f8d5 	bl	8004c54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aaa:	e7f1      	b.n	8004a90 <prvTimerTask+0x8>

08004aac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ab6:	f7ff f8fb 	bl	8003cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aba:	f107 0308 	add.w	r3, r7, #8
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f866 	bl	8004b90 <prvSampleTimeNow>
 8004ac4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d130      	bne.n	8004b2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <prvProcessTimerOrBlockTask+0x3c>
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d806      	bhi.n	8004ae8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ada:	f7ff f8f7 	bl	8003ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff85 	bl	80049f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ae6:	e024      	b.n	8004b32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <prvProcessTimerOrBlockTask+0x90>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <prvProcessTimerOrBlockTask+0x50>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <prvProcessTimerOrBlockTask+0x52>
 8004afc:	2300      	movs	r3, #0
 8004afe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <prvProcessTimerOrBlockTask+0x94>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7fe fe5f 	bl	80037d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b12:	f7ff f8db 	bl	8003ccc <xTaskResumeAll>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvProcessTimerOrBlockTask+0x98>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
}
 8004b2c:	e001      	b.n	8004b32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b2e:	f7ff f8cd 	bl	8003ccc <xTaskResumeAll>
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200011fc 	.word	0x200011fc
 8004b40:	20001200 	.word	0x20001200
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <prvGetNextExpireTime+0x44>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <prvGetNextExpireTime+0x16>
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	e000      	b.n	8004b60 <prvGetNextExpireTime+0x18>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <prvGetNextExpireTime+0x44>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e001      	b.n	8004b7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	200011f8 	.word	0x200011f8

08004b90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b98:	f7ff f936 	bl	8003e08 <xTaskGetTickCount>
 8004b9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <prvSampleTimeNow+0x3c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d205      	bcs.n	8004bb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ba8:	f000 f936 	bl	8004e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <prvSampleTimeNow+0x3c>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20001208 	.word	0x20001208

08004bd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d812      	bhi.n	8004c1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e01b      	b.n	8004c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <prvInsertTimerInActiveList+0x7c>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f7fe f8c0 	bl	8002d9a <vListInsert>
 8004c1a:	e012      	b.n	8004c42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d206      	bcs.n	8004c32 <prvInsertTimerInActiveList+0x62>
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e007      	b.n	8004c42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <prvInsertTimerInActiveList+0x80>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fe f8ac 	bl	8002d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c42:	697b      	ldr	r3, [r7, #20]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	200011fc 	.word	0x200011fc
 8004c50:	200011f8 	.word	0x200011f8

08004c54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	; 0x38
 8004c58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c5a:	e0ca      	b.n	8004df2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da18      	bge.n	8004c94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	3304      	adds	r3, #4
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	61fb      	str	r3, [r7, #28]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8a:	6850      	ldr	r0, [r2, #4]
 8004c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8e:	6892      	ldr	r2, [r2, #8]
 8004c90:	4611      	mov	r1, r2
 8004c92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f2c0 80aa 	blt.w	8004df0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe f8ad 	bl	8002e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff6b 	bl	8004b90 <prvSampleTimeNow>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	f200 8097 	bhi.w	8004df2 <prvProcessReceivedCommands+0x19e>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <prvProcessReceivedCommands+0x78>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004cf5 	.word	0x08004cf5
 8004cd8:	08004d69 	.word	0x08004d69
 8004cdc:	08004d7d 	.word	0x08004d7d
 8004ce0:	08004dc7 	.word	0x08004dc7
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004cf5 	.word	0x08004cf5
 8004cec:	08004d69 	.word	0x08004d69
 8004cf0:	08004d7d 	.word	0x08004d7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	18d1      	adds	r1, r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d14:	f7ff ff5c 	bl	8004bd0 <prvInsertTimerInActiveList>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d069      	beq.n	8004df2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d05e      	beq.n	8004df2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	2100      	movs	r1, #0
 8004d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d46:	f7ff fe05 	bl	8004954 <xTimerGenericCommand>
 8004d4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d14f      	bne.n	8004df2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	61bb      	str	r3, [r7, #24]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d7a:	e03a      	b.n	8004df2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	617b      	str	r3, [r7, #20]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	18d1      	adds	r1, r2, r3
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	f7ff ff06 	bl	8004bd0 <prvInsertTimerInActiveList>
					break;
 8004dc4:	e015      	b.n	8004df2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f000 fbdb 	bl	8005590 <vPortFree>
 8004dda:	e00a      	b.n	8004df2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dee:	e000      	b.n	8004df2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004df0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <prvProcessReceivedCommands+0x1c0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	1d39      	adds	r1, r7, #4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe face 	bl	800339c <xQueueReceive>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f af2a 	bne.w	8004c5c <prvProcessReceivedCommands+0x8>
	}
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3730      	adds	r7, #48	; 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20001200 	.word	0x20001200

08004e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e1e:	e048      	b.n	8004eb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e20:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fd ffe7 	bl	8002e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02e      	beq.n	8004eb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d90e      	bls.n	8004e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fd ff8c 	bl	8002d9a <vListInsert>
 8004e82:	e016      	b.n	8004eb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e84:	2300      	movs	r3, #0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff fd60 	bl	8004954 <xTimerGenericCommand>
 8004e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	603b      	str	r3, [r7, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1b1      	bne.n	8004e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <prvSwitchTimerLists+0xc4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <prvSwitchTimerLists+0xc0>)
 8004ec8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004eca:	4a04      	ldr	r2, [pc, #16]	; (8004edc <prvSwitchTimerLists+0xc4>)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	6013      	str	r3, [r2, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200011f8 	.word	0x200011f8
 8004edc:	200011fc 	.word	0x200011fc

08004ee0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ee6:	f000 f965 	bl	80051b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <prvCheckForValidListAndQueue+0x60>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d120      	bne.n	8004f34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ef2:	4814      	ldr	r0, [pc, #80]	; (8004f44 <prvCheckForValidListAndQueue+0x64>)
 8004ef4:	f7fd ff00 	bl	8002cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ef8:	4813      	ldr	r0, [pc, #76]	; (8004f48 <prvCheckForValidListAndQueue+0x68>)
 8004efa:	f7fd fefd 	bl	8002cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <prvCheckForValidListAndQueue+0x6c>)
 8004f00:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <prvCheckForValidListAndQueue+0x64>)
 8004f02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <prvCheckForValidListAndQueue+0x70>)
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <prvCheckForValidListAndQueue+0x68>)
 8004f08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <prvCheckForValidListAndQueue+0x74>)
 8004f10:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <prvCheckForValidListAndQueue+0x78>)
 8004f12:	2110      	movs	r1, #16
 8004f14:	200a      	movs	r0, #10
 8004f16:	f7fe f80b 	bl	8002f30 <xQueueGenericCreateStatic>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <prvCheckForValidListAndQueue+0x60>)
 8004f1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <prvCheckForValidListAndQueue+0x60>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <prvCheckForValidListAndQueue+0x60>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	490b      	ldr	r1, [pc, #44]	; (8004f5c <prvCheckForValidListAndQueue+0x7c>)
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fc24 	bl	800377c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f34:	f000 f96e 	bl	8005214 <vPortExitCritical>
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20001200 	.word	0x20001200
 8004f44:	200011d0 	.word	0x200011d0
 8004f48:	200011e4 	.word	0x200011e4
 8004f4c:	200011f8 	.word	0x200011f8
 8004f50:	200011fc 	.word	0x200011fc
 8004f54:	200012ac 	.word	0x200012ac
 8004f58:	2000120c 	.word	0x2000120c
 8004f5c:	0800c5ec 	.word	0x0800c5ec

08004f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b04      	subs	r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b04      	subs	r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f90:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <pxPortInitialiseStack+0x64>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b14      	subs	r3, #20
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3b04      	subs	r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f06f 0202 	mvn.w	r2, #2
 8004fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3b20      	subs	r3, #32
 8004fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	08004fc9 	.word	0x08004fc9

08004fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <prvTaskExitError+0x54>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fda:	d00a      	beq.n	8004ff2 <prvTaskExitError+0x2a>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60fb      	str	r3, [r7, #12]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <prvTaskExitError+0x28>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005006:	bf00      	nop
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0fc      	beq.n	8005008 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	200000a8 	.word	0x200000a8

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800506a:	bf00      	nop
 800506c:	e000ed08 	.word	0xe000ed08

08005070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005076:	4b46      	ldr	r3, [pc, #280]	; (8005190 <xPortStartScheduler+0x120>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a46      	ldr	r2, [pc, #280]	; (8005194 <xPortStartScheduler+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10a      	bne.n	8005096 <xPortStartScheduler+0x26>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	613b      	str	r3, [r7, #16]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <xPortStartScheduler+0x120>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <xPortStartScheduler+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10a      	bne.n	80050b6 <xPortStartScheduler+0x46>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <xPortStartScheduler+0x12c>)
 80050b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <xPortStartScheduler+0x130>)
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <xPortStartScheduler+0x134>)
 80050ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <xPortStartScheduler+0x134>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00a      	beq.n	8005128 <xPortStartScheduler+0xb8>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <xPortStartScheduler+0x134>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <xPortStartScheduler+0x134>)
 8005130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <xPortStartScheduler+0x134>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800513a:	4a1a      	ldr	r2, [pc, #104]	; (80051a4 <xPortStartScheduler+0x134>)
 800513c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <xPortStartScheduler+0x138>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <xPortStartScheduler+0x138>)
 800514c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <xPortStartScheduler+0x138>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <xPortStartScheduler+0x138>)
 8005158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800515c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800515e:	f000 f8dd 	bl	800531c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <xPortStartScheduler+0x13c>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005168:	f000 f8fc 	bl	8005364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <xPortStartScheduler+0x140>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <xPortStartScheduler+0x140>)
 8005172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005178:	f7ff ff66 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800517c:	f7fe ff20 	bl	8003fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8005180:	f7ff ff22 	bl	8004fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	e000ed00 	.word	0xe000ed00
 8005194:	410fc271 	.word	0x410fc271
 8005198:	410fc270 	.word	0x410fc270
 800519c:	e000e400 	.word	0xe000e400
 80051a0:	200012fc 	.word	0x200012fc
 80051a4:	20001300 	.word	0x20001300
 80051a8:	e000ed20 	.word	0xe000ed20
 80051ac:	200000a8 	.word	0x200000a8
 80051b0:	e000ef34 	.word	0xe000ef34

080051b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	607b      	str	r3, [r7, #4]
}
 80051cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <vPortEnterCritical+0x58>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <vPortEnterCritical+0x58>)
 80051d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <vPortEnterCritical+0x58>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10f      	bne.n	8005200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortEnterCritical+0x5c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vPortEnterCritical+0x4c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	603b      	str	r3, [r7, #0]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vPortEnterCritical+0x4a>
	}
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	200000a8 	.word	0x200000a8
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <vPortExitCritical+0x50>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <vPortExitCritical+0x24>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	607b      	str	r3, [r7, #4]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <vPortExitCritical+0x50>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <vPortExitCritical+0x50>)
 8005240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <vPortExitCritical+0x42>
 800524a:	2300      	movs	r3, #0
 800524c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f383 8811 	msr	BASEPRI, r3
}
 8005254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	200000a8 	.word	0x200000a8
	...

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7fe fe8e 	bl	8003fc0 <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7fe fdab 	bl	8003e4c <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <xPortSysTickHandler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	200001c0 	.word	0x200001c0
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005372:	bf00      	nop
 8005374:	e000ed88 	.word	0xe000ed88

08005378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d914      	bls.n	80053b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <vPortValidateInterruptPriority+0x70>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005394:	4b15      	ldr	r3, [pc, #84]	; (80053ec <vPortValidateInterruptPriority+0x74>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	7afa      	ldrb	r2, [r7, #11]
 800539a:	429a      	cmp	r2, r3
 800539c:	d20a      	bcs.n	80053b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <vPortValidateInterruptPriority+0x78>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <vPortValidateInterruptPriority+0x7c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d90a      	bls.n	80053da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	603b      	str	r3, [r7, #0]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vPortValidateInterruptPriority+0x60>
	}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000e3f0 	.word	0xe000e3f0
 80053ec:	200012fc 	.word	0x200012fc
 80053f0:	e000ed0c 	.word	0xe000ed0c
 80053f4:	20001300 	.word	0x20001300

080053f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005404:	f7fe fc54 	bl	8003cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005408:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <pvPortMalloc+0x180>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005410:	f000 f920 	bl	8005654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <pvPortMalloc+0x184>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8093 	bne.w	8005548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01d      	beq.n	8005464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d014      	beq.n	8005464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <pvPortMalloc+0x6c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d06e      	beq.n	8005548 <pvPortMalloc+0x150>
 800546a:	4b45      	ldr	r3, [pc, #276]	; (8005580 <pvPortMalloc+0x188>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d869      	bhi.n	8005548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005474:	4b43      	ldr	r3, [pc, #268]	; (8005584 <pvPortMalloc+0x18c>)
 8005476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005478:	4b42      	ldr	r3, [pc, #264]	; (8005584 <pvPortMalloc+0x18c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547e:	e004      	b.n	800548a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <pvPortMalloc+0xa4>
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f1      	bne.n	8005480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <pvPortMalloc+0x180>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d050      	beq.n	8005548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2208      	movs	r2, #8
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	2308      	movs	r3, #8
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d91f      	bls.n	8005508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <pvPortMalloc+0xf8>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	613b      	str	r3, [r7, #16]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 f908 	bl	8005718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <pvPortMalloc+0x188>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <pvPortMalloc+0x188>)
 8005514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <pvPortMalloc+0x188>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <pvPortMalloc+0x190>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <pvPortMalloc+0x188>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <pvPortMalloc+0x190>)
 8005528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x184>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	431a      	orrs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <pvPortMalloc+0x194>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <pvPortMalloc+0x194>)
 8005546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005548:	f7fe fbc0 	bl	8003ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <pvPortMalloc+0x174>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <pvPortMalloc+0x172>
	return pvReturn;
 800556c:	69fb      	ldr	r3, [r7, #28]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20001ec4 	.word	0x20001ec4
 800557c:	20001ed8 	.word	0x20001ed8
 8005580:	20001ec8 	.word	0x20001ec8
 8005584:	20001ebc 	.word	0x20001ebc
 8005588:	20001ecc 	.word	0x20001ecc
 800558c:	20001ed0 	.word	0x20001ed0

08005590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04d      	beq.n	800563e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a2:	2308      	movs	r3, #8
 80055a4:	425b      	negs	r3, r3
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <vPortFree+0xb8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <vPortFree+0x44>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <vPortFree+0x62>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60bb      	str	r3, [r7, #8]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <vPortFree+0xb8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01e      	beq.n	800563e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11a      	bne.n	800563e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <vPortFree+0xb8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005618:	f7fe fb4a 	bl	8003cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <vPortFree+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4413      	add	r3, r2
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <vPortFree+0xbc>)
 8005628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562a:	6938      	ldr	r0, [r7, #16]
 800562c:	f000 f874 	bl	8005718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <vPortFree+0xc0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a06      	ldr	r2, [pc, #24]	; (8005650 <vPortFree+0xc0>)
 8005638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800563a:	f7fe fb47 	bl	8003ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001ed8 	.word	0x20001ed8
 800564c:	20001ec8 	.word	0x20001ec8
 8005650:	20001ed4 	.word	0x20001ed4

08005654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800565a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800565e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <prvHeapInit+0xac>)
 8005662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3307      	adds	r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <prvHeapInit+0xac>)
 8005684:	4413      	add	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <prvHeapInit+0xb0>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <prvHeapInit+0xb0>)
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056a0:	2208      	movs	r2, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <prvHeapInit+0xb4>)
 80056b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <prvHeapInit+0xb4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <prvHeapInit+0xb4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvHeapInit+0xb4>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <prvHeapInit+0xb8>)
 80056e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <prvHeapInit+0xbc>)
 80056ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <prvHeapInit+0xc0>)
 80056ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20001304 	.word	0x20001304
 8005704:	20001ebc 	.word	0x20001ebc
 8005708:	20001ec4 	.word	0x20001ec4
 800570c:	20001ecc 	.word	0x20001ecc
 8005710:	20001ec8 	.word	0x20001ec8
 8005714:	20001ed8 	.word	0x20001ed8

08005718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <prvInsertBlockIntoFreeList+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e002      	b.n	800572c <prvInsertBlockIntoFreeList+0x14>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d8f7      	bhi.n	8005726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d108      	bne.n	800575a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	441a      	add	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d118      	bne.n	80057a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d00d      	beq.n	8005796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e008      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e003      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d002      	beq.n	80057b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20001ebc 	.word	0x20001ebc
 80057c8:	20001ec4 	.word	0x20001ec4

080057cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d6:	2003      	movs	r0, #3
 80057d8:	f000 f994 	bl	8005b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057dc:	2000      	movs	r0, #0
 80057de:	f000 f80d 	bl	80057fc <HAL_InitTick>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	71fb      	strb	r3, [r7, #7]
 80057ec:	e001      	b.n	80057f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057ee:	f004 ff7d 	bl	800a6ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005808:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_InitTick+0x6c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d023      	beq.n	8005858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_InitTick+0x70>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_InitTick+0x6c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f9af 	bl	8005b8a <HAL_SYSTICK_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d809      	bhi.n	800584c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005838:	2200      	movs	r2, #0
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005840:	f000 f96b 	bl	8005b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <HAL_InitTick+0x74>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e007      	b.n	800585c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e004      	b.n	800585c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	e001      	b.n	800585c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	200000b0 	.word	0x200000b0
 800586c:	200001c0 	.word	0x200001c0
 8005870:	200000ac 	.word	0x200000ac

08005874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_GetTick+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20001edc 	.word	0x20001edc

0800588c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005894:	f7ff ffee 	bl	8005874 <HAL_GetTick>
 8005898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a4:	d005      	beq.n	80058b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_Delay+0x44>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058b2:	bf00      	nop
 80058b4:	f7ff ffde 	bl	8005874 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d8f7      	bhi.n	80058b4 <HAL_Delay+0x28>
  {
  }
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200000b0 	.word	0x200000b0

080058d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <HAL_GetUIDw0+0x14>)
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	1fff7590 	.word	0x1fff7590

080058ec <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_GetUIDw1+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	1fff7594 	.word	0x1fff7594

08005904 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <HAL_GetUIDw2+0x14>)
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	1fff7598 	.word	0x1fff7598

0800591c <__NVIC_SetPriorityGrouping>:
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <__NVIC_SetPriorityGrouping+0x44>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005938:	4013      	ands	r3, r2
 800593a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800594e:	4a04      	ldr	r2, [pc, #16]	; (8005960 <__NVIC_SetPriorityGrouping+0x44>)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	60d3      	str	r3, [r2, #12]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_GetPriorityGrouping>:
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <__NVIC_GetPriorityGrouping+0x18>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0307 	and.w	r3, r3, #7
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <__NVIC_EnableIRQ>:
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598e:	2b00      	cmp	r3, #0
 8005990:	db0b      	blt.n	80059aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	f003 021f 	and.w	r2, r3, #31
 8005998:	4907      	ldr	r1, [pc, #28]	; (80059b8 <__NVIC_EnableIRQ+0x38>)
 800599a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2001      	movs	r0, #1
 80059a2:	fa00 f202 	lsl.w	r2, r0, r2
 80059a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000e100 	.word	0xe000e100

080059bc <__NVIC_DisableIRQ>:
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	db12      	blt.n	80059f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	f003 021f 	and.w	r2, r3, #31
 80059d4:	490a      	ldr	r1, [pc, #40]	; (8005a00 <__NVIC_DisableIRQ+0x44>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2001      	movs	r0, #1
 80059de:	fa00 f202 	lsl.w	r2, r0, r2
 80059e2:	3320      	adds	r3, #32
 80059e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80059e8:	f3bf 8f4f 	dsb	sy
}
 80059ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059ee:	f3bf 8f6f 	isb	sy
}
 80059f2:	bf00      	nop
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000e100 	.word	0xe000e100

08005a04 <__NVIC_SetPriority>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db0a      	blt.n	8005a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	490c      	ldr	r1, [pc, #48]	; (8005a50 <__NVIC_SetPriority+0x4c>)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	0112      	lsls	r2, r2, #4
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	440b      	add	r3, r1
 8005a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a2c:	e00a      	b.n	8005a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4908      	ldr	r1, [pc, #32]	; (8005a54 <__NVIC_SetPriority+0x50>)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	440b      	add	r3, r1
 8005a42:	761a      	strb	r2, [r3, #24]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000e100 	.word	0xe000e100
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	; 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf28      	it	cs
 8005a76:	2304      	movcs	r3, #4
 8005a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d902      	bls.n	8005a88 <NVIC_EncodePriority+0x30>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3b03      	subs	r3, #3
 8005a86:	e000      	b.n	8005a8a <NVIC_EncodePriority+0x32>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43da      	mvns	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	43d9      	mvns	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	4313      	orrs	r3, r2
         );
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3724      	adds	r7, #36	; 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad0:	d301      	bcc.n	8005ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00f      	b.n	8005af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <SysTick_Config+0x40>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ade:	210f      	movs	r1, #15
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae4:	f7ff ff8e 	bl	8005a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <SysTick_Config+0x40>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <SysTick_Config+0x40>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010

08005b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff05 	bl	800591c <__NVIC_SetPriorityGrouping>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b2c:	f7ff ff1a 	bl	8005964 <__NVIC_GetPriorityGrouping>
 8005b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff ff8e 	bl	8005a58 <NVIC_EncodePriority>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff5d 	bl	8005a04 <__NVIC_SetPriority>
}
 8005b4a:	bf00      	nop
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	4603      	mov	r3, r0
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff0d 	bl	8005980 <__NVIC_EnableIRQ>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	4603      	mov	r3, r0
 8005b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff1d 	bl	80059bc <__NVIC_DisableIRQ>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ff94 	bl	8005ac0 <SysTick_Config>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e098      	b.n	8005ce8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <HAL_DMA_Init+0x150>)
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d80f      	bhi.n	8005be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	; (8005cf8 <HAL_DMA_Init+0x154>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a4b      	ldr	r2, [pc, #300]	; (8005cfc <HAL_DMA_Init+0x158>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a48      	ldr	r2, [pc, #288]	; (8005d00 <HAL_DMA_Init+0x15c>)
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40
 8005be0:	e00e      	b.n	8005c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b46      	ldr	r3, [pc, #280]	; (8005d04 <HAL_DMA_Init+0x160>)
 8005bea:	4413      	add	r3, r2
 8005bec:	4a43      	ldr	r2, [pc, #268]	; (8005cfc <HAL_DMA_Init+0x158>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	009a      	lsls	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a42      	ldr	r2, [pc, #264]	; (8005d08 <HAL_DMA_Init+0x164>)
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5a:	d039      	beq.n	8005cd0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <HAL_DMA_Init+0x15c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d11a      	bne.n	8005c9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <HAL_DMA_Init+0x168>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f003 031c 	and.w	r3, r3, #28
 8005c72:	210f      	movs	r1, #15
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	4924      	ldr	r1, [pc, #144]	; (8005d0c <HAL_DMA_Init+0x168>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_DMA_Init+0x168>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f003 031c 	and.w	r3, r3, #28
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	491d      	ldr	r1, [pc, #116]	; (8005d0c <HAL_DMA_Init+0x168>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
 8005c9a:	e019      	b.n	8005cd0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_DMA_Init+0x16c>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca4:	f003 031c 	and.w	r3, r3, #28
 8005ca8:	210f      	movs	r1, #15
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	4917      	ldr	r1, [pc, #92]	; (8005d10 <HAL_DMA_Init+0x16c>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <HAL_DMA_Init+0x16c>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6859      	ldr	r1, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	f003 031c 	and.w	r3, r3, #28
 8005cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cca:	4911      	ldr	r1, [pc, #68]	; (8005d10 <HAL_DMA_Init+0x16c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40020407 	.word	0x40020407
 8005cf8:	bffdfff8 	.word	0xbffdfff8
 8005cfc:	cccccccd 	.word	0xcccccccd
 8005d00:	40020000 	.word	0x40020000
 8005d04:	bffdfbf8 	.word	0xbffdfbf8
 8005d08:	40020400 	.word	0x40020400
 8005d0c:	400200a8 	.word	0x400200a8
 8005d10:	400204a8 	.word	0x400204a8

08005d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_DMA_Start_IT+0x20>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e04b      	b.n	8005dcc <HAL_DMA_Start_IT+0xb8>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d13a      	bne.n	8005dbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f969 	bl	8006044 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 020e 	orr.w	r2, r2, #14
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00f      	b.n	8005dac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 020a 	orr.w	r2, r2, #10
 8005daa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e005      	b.n	8005dca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d005      	beq.n	8005df8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e029      	b.n	8005e4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 020e 	bic.w	r2, r2, #14
 8005e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	f003 021c 	and.w	r2, r3, #28
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
    }
  }
  return status;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f003 031c 	and.w	r3, r3, #28
 8005e76:	2204      	movs	r2, #4
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d026      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x7a>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d021      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f003 021c 	and.w	r2, r3, #28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2104      	movs	r1, #4
 8005eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ebc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d071      	beq.n	8005faa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005ece:	e06c      	b.n	8005faa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	f003 031c 	and.w	r3, r3, #28
 8005ed8:	2202      	movs	r2, #2
 8005eda:	409a      	lsls	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02e      	beq.n	8005f42 <HAL_DMA_IRQHandler+0xec>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d029      	beq.n	8005f42 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 020a 	bic.w	r2, r2, #10
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	f003 021c 	and.w	r2, r3, #28
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2102      	movs	r1, #2
 8005f22:	fa01 f202 	lsl.w	r2, r1, r2
 8005f26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d038      	beq.n	8005faa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f40:	e033      	b.n	8005faa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f003 031c 	and.w	r3, r3, #28
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02a      	beq.n	8005fac <HAL_DMA_IRQHandler+0x156>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d025      	beq.n	8005fac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 020e 	bic.w	r2, r2, #14
 8005f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	f003 021c 	and.w	r2, r3, #28
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
}
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_DMA_RegisterCallback+0x20>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e031      	b.n	8006038 <HAL_DMA_RegisterCallback+0x84>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d120      	bne.n	800602a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d81a      	bhi.n	8006024 <HAL_DMA_RegisterCallback+0x70>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <HAL_DMA_RegisterCallback+0x40>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	0800600d 	.word	0x0800600d
 8005ffc:	08006015 	.word	0x08006015
 8006000:	0800601d 	.word	0x0800601d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800600a:	e010      	b.n	800602e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8006012:	e00c      	b.n	800602e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800601a:	e008      	b.n	800602e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8006022:	e004      	b.n	800602e <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
           break;
 8006028:	e001      	b.n	800602e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f003 021c 	and.w	r2, r3, #28
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2101      	movs	r1, #1
 8006060:	fa01 f202 	lsl.w	r2, r1, r2
 8006064:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b10      	cmp	r3, #16
 8006074:	d108      	bne.n	8006088 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006086:	e007      	b.n	8006098 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80060b6:	4b2f      	ldr	r3, [pc, #188]	; (8006174 <HAL_FLASH_Program+0xd0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_FLASH_Program+0x1e>
 80060be:	2302      	movs	r3, #2
 80060c0:	e053      	b.n	800616a <HAL_FLASH_Program+0xc6>
 80060c2:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <HAL_FLASH_Program+0xd0>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060cc:	f000 f888 	bl	80061e0 <FLASH_WaitForLastOperation>
 80060d0:	4603      	mov	r3, r0
 80060d2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d143      	bne.n	8006162 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060da:	4b26      	ldr	r3, [pc, #152]	; (8006174 <HAL_FLASH_Program+0xd0>)
 80060dc:	2200      	movs	r2, #0
 80060de:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80060e0:	4b25      	ldr	r3, [pc, #148]	; (8006178 <HAL_FLASH_Program+0xd4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80060ec:	4b22      	ldr	r3, [pc, #136]	; (8006178 <HAL_FLASH_Program+0xd4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a21      	ldr	r2, [pc, #132]	; (8006178 <HAL_FLASH_Program+0xd4>)
 80060f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_FLASH_Program+0xd0>)
 80060fa:	2202      	movs	r2, #2
 80060fc:	771a      	strb	r2, [r3, #28]
 80060fe:	e002      	b.n	8006106 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006100:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <HAL_FLASH_Program+0xd0>)
 8006102:	2200      	movs	r2, #0
 8006104:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800610c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006110:	68b8      	ldr	r0, [r7, #8]
 8006112:	f000 f8bd 	bl	8006290 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006116:	2301      	movs	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	e010      	b.n	800613e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d002      	beq.n	8006128 <HAL_FLASH_Program+0x84>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d10a      	bne.n	800613e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	68b8      	ldr	r0, [r7, #8]
 800612e:	f000 f8d5 	bl	80062dc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d102      	bne.n	800613e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006138:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800613c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800613e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006142:	f000 f84d 	bl	80061e0 <FLASH_WaitForLastOperation>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <HAL_FLASH_Program+0xd4>)
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	43db      	mvns	r3, r3
 8006158:	4907      	ldr	r1, [pc, #28]	; (8006178 <HAL_FLASH_Program+0xd4>)
 800615a:	4013      	ands	r3, r2
 800615c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800615e:	f000 f9cf 	bl	8006500 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006162:	4b04      	ldr	r3, [pc, #16]	; (8006174 <HAL_FLASH_Program+0xd0>)
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]

  return status;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200000b4 	.word	0x200000b4
 8006178:	40022000 	.word	0x40022000

0800617c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_FLASH_Unlock+0x38>)
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	da0b      	bge.n	80061a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_FLASH_Unlock+0x38>)
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <HAL_FLASH_Unlock+0x3c>)
 8006192:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_FLASH_Unlock+0x38>)
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <HAL_FLASH_Unlock+0x40>)
 8006198:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_FLASH_Unlock+0x38>)
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da01      	bge.n	80061a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80061a6:	79fb      	ldrb	r3, [r7, #7]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40022000 	.word	0x40022000
 80061b8:	45670123 	.word	0x45670123
 80061bc:	cdef89ab 	.word	0xcdef89ab

080061c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_FLASH_Lock+0x1c>)
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <HAL_FLASH_Lock+0x1c>)
 80061ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40022000 	.word	0x40022000

080061e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80061e8:	f7ff fb44 	bl	8005874 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061ee:	e00d      	b.n	800620c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f6:	d009      	beq.n	800620c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80061f8:	f7ff fb3c 	bl	8005874 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d801      	bhi.n	800620c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e036      	b.n	800627a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1eb      	bne.n	80061f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <FLASH_WaitForLastOperation+0xa8>)
 800621e:	4013      	ands	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006228:	4b18      	ldr	r3, [pc, #96]	; (800628c <FLASH_WaitForLastOperation+0xac>)
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <FLASH_WaitForLastOperation+0xac>)
 8006232:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <FLASH_WaitForLastOperation+0x6e>
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	618b      	str	r3, [r1, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <FLASH_WaitForLastOperation+0x82>
 8006258:	4a0a      	ldr	r2, [pc, #40]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006260:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e009      	b.n	800627a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <FLASH_WaitForLastOperation+0xa4>)
 8006274:	2201      	movs	r2, #1
 8006276:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40022000 	.word	0x40022000
 8006288:	0002c3fa 	.word	0x0002c3fa
 800628c:	200000b4 	.word	0x200000b4

08006290 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800629c:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <FLASH_Program_DoubleWord+0x48>)
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <FLASH_Program_DoubleWord+0x48>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80062ae:	f3bf 8f6f 	isb	sy
}
 80062b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80062b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	000a      	movs	r2, r1
 80062c2:	2300      	movs	r3, #0
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	3104      	adds	r1, #4
 80062c8:	4613      	mov	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40022000 	.word	0x40022000

080062dc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <FLASH_Program_Fast+0x68>)
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	4a13      	ldr	r2, [pc, #76]	; (8006344 <FLASH_Program_Fast+0x68>)
 80062f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006302:	60fb      	str	r3, [r7, #12]
  return(result);
 8006304:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006308:	b672      	cpsid	i
}
 800630a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	3304      	adds	r3, #4
 8006318:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3304      	adds	r3, #4
 800631e:	617b      	str	r3, [r7, #20]
    row_index--;
 8006320:	7ffb      	ldrb	r3, [r7, #31]
 8006322:	3b01      	subs	r3, #1
 8006324:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1ef      	bne.n	800630c <FLASH_Program_Fast+0x30>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f383 8810 	msr	PRIMASK, r3
}
 8006336:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006338:	bf00      	nop
 800633a:	3724      	adds	r7, #36	; 0x24
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40022000 	.word	0x40022000

08006348 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006352:	4b48      	ldr	r3, [pc, #288]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_FLASHEx_Erase+0x16>
 800635a:	2302      	movs	r3, #2
 800635c:	e085      	b.n	800646a <HAL_FLASHEx_Erase+0x122>
 800635e:	4b45      	ldr	r3, [pc, #276]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006368:	f7ff ff3a 	bl	80061e0 <FLASH_WaitForLastOperation>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d175      	bne.n	8006462 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006376:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800637c:	4b3e      	ldr	r3, [pc, #248]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006384:	2b00      	cmp	r3, #0
 8006386:	d013      	beq.n	80063b0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006388:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006394:	4b38      	ldr	r3, [pc, #224]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a37      	ldr	r2, [pc, #220]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 800639a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800639e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 80063a2:	2203      	movs	r2, #3
 80063a4:	771a      	strb	r2, [r3, #28]
 80063a6:	e016      	b.n	80063d6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80063a8:	4b32      	ldr	r3, [pc, #200]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	771a      	strb	r2, [r3, #28]
 80063ae:	e012      	b.n	80063d6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80063b0:	4b31      	ldr	r3, [pc, #196]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80063bc:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2d      	ldr	r2, [pc, #180]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 80063c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063c6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 80063ca:	2202      	movs	r2, #2
 80063cc:	771a      	strb	r2, [r3, #28]
 80063ce:	e002      	b.n	80063d6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d111      	bne.n	8006402 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f84a 	bl	800647c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063ec:	f7ff fef8 	bl	80061e0 <FLASH_WaitForLastOperation>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80063f4:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 80063fa:	f023 0304 	bic.w	r3, r3, #4
 80063fe:	6153      	str	r3, [r2, #20]
 8006400:	e02d      	b.n	800645e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006408:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	e01d      	b.n	800644e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4619      	mov	r1, r3
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f000 f84d 	bl	80064b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800641e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006422:	f7ff fedd 	bl	80061e0 <FLASH_WaitForLastOperation>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_FLASHEx_Erase+0x130>)
 8006430:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006434:	f023 0302 	bic.w	r3, r3, #2
 8006438:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	601a      	str	r2, [r3, #0]
          break;
 8006446:	e00a      	b.n	800645e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3301      	adds	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	4413      	add	r3, r2
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3d9      	bcc.n	8006412 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800645e:	f000 f84f 	bl	8006500 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <HAL_FLASHEx_Erase+0x12c>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]

  return status;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200000b4 	.word	0x200000b4
 8006478:	40022000 	.word	0x40022000

0800647c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <FLASH_MassErase+0x38>)
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <FLASH_MassErase+0x38>)
 8006494:	f043 0304 	orr.w	r3, r3, #4
 8006498:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <FLASH_MassErase+0x38>)
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <FLASH_MassErase+0x38>)
 80064a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a4:	6153      	str	r3, [r2, #20]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40022000 	.word	0x40022000

080064b8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <FLASH_PageErase+0x44>)
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80064d2:	490a      	ldr	r1, [pc, #40]	; (80064fc <FLASH_PageErase+0x44>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80064d8:	4b08      	ldr	r3, [pc, #32]	; (80064fc <FLASH_PageErase+0x44>)
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	4a07      	ldr	r2, [pc, #28]	; (80064fc <FLASH_PageErase+0x44>)
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <FLASH_PageErase+0x44>)
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	4a04      	ldr	r2, [pc, #16]	; (80064fc <FLASH_PageErase+0x44>)
 80064ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ee:	6153      	str	r3, [r2, #20]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40022000 	.word	0x40022000

08006500 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <FLASH_FlushCaches+0x8c>)
 8006508:	7f1b      	ldrb	r3, [r3, #28]
 800650a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <FLASH_FlushCaches+0x18>
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d117      	bne.n	8006548 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <FLASH_FlushCaches+0x90>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <FLASH_FlushCaches+0x90>)
 800651e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006522:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a19      	ldr	r2, [pc, #100]	; (8006590 <FLASH_FlushCaches+0x90>)
 800652a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800653c:	4b14      	ldr	r3, [pc, #80]	; (8006590 <FLASH_FlushCaches+0x90>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a13      	ldr	r2, [pc, #76]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006546:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d002      	beq.n	8006554 <FLASH_FlushCaches+0x54>
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d111      	bne.n	8006578 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <FLASH_FlushCaches+0x90>)
 800655a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800656c:	4b08      	ldr	r3, [pc, #32]	; (8006590 <FLASH_FlushCaches+0x90>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a07      	ldr	r2, [pc, #28]	; (8006590 <FLASH_FlushCaches+0x90>)
 8006572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006576:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <FLASH_FlushCaches+0x8c>)
 800657a:	2200      	movs	r2, #0
 800657c:	771a      	strb	r2, [r3, #28]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	200000b4 	.word	0x200000b4
 8006590:	40022000 	.word	0x40022000

08006594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065a2:	e154      	b.n	800684e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2101      	movs	r1, #1
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8146 	beq.w	8006848 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d005      	beq.n	80065d4 <HAL_GPIO_Init+0x40>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d130      	bne.n	8006636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	2203      	movs	r2, #3
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800660a:	2201      	movs	r2, #1
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43db      	mvns	r3, r3
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 0201 	and.w	r2, r3, #1
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d017      	beq.n	8006672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	2203      	movs	r2, #3
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4013      	ands	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d123      	bne.n	80066c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	08da      	lsrs	r2, r3, #3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3208      	adds	r2, #8
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	220f      	movs	r2, #15
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	43db      	mvns	r3, r3
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4013      	ands	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	08da      	lsrs	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3208      	adds	r2, #8
 80066c0:	6939      	ldr	r1, [r7, #16]
 80066c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	2203      	movs	r2, #3
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	43db      	mvns	r3, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4013      	ands	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0203 	and.w	r2, r3, #3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a0 	beq.w	8006848 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006708:	4b58      	ldr	r3, [pc, #352]	; (800686c <HAL_GPIO_Init+0x2d8>)
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	4a57      	ldr	r2, [pc, #348]	; (800686c <HAL_GPIO_Init+0x2d8>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6613      	str	r3, [r2, #96]	; 0x60
 8006714:	4b55      	ldr	r3, [pc, #340]	; (800686c <HAL_GPIO_Init+0x2d8>)
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006720:	4a53      	ldr	r2, [pc, #332]	; (8006870 <HAL_GPIO_Init+0x2dc>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	089b      	lsrs	r3, r3, #2
 8006726:	3302      	adds	r3, #2
 8006728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	220f      	movs	r2, #15
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4013      	ands	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800674a:	d019      	beq.n	8006780 <HAL_GPIO_Init+0x1ec>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a49      	ldr	r2, [pc, #292]	; (8006874 <HAL_GPIO_Init+0x2e0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_GPIO_Init+0x1e8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a48      	ldr	r2, [pc, #288]	; (8006878 <HAL_GPIO_Init+0x2e4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00d      	beq.n	8006778 <HAL_GPIO_Init+0x1e4>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a47      	ldr	r2, [pc, #284]	; (800687c <HAL_GPIO_Init+0x2e8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <HAL_GPIO_Init+0x1e0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a46      	ldr	r2, [pc, #280]	; (8006880 <HAL_GPIO_Init+0x2ec>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d101      	bne.n	8006770 <HAL_GPIO_Init+0x1dc>
 800676c:	2304      	movs	r3, #4
 800676e:	e008      	b.n	8006782 <HAL_GPIO_Init+0x1ee>
 8006770:	2307      	movs	r3, #7
 8006772:	e006      	b.n	8006782 <HAL_GPIO_Init+0x1ee>
 8006774:	2303      	movs	r3, #3
 8006776:	e004      	b.n	8006782 <HAL_GPIO_Init+0x1ee>
 8006778:	2302      	movs	r3, #2
 800677a:	e002      	b.n	8006782 <HAL_GPIO_Init+0x1ee>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_GPIO_Init+0x1ee>
 8006780:	2300      	movs	r3, #0
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	f002 0203 	and.w	r2, r2, #3
 8006788:	0092      	lsls	r2, r2, #2
 800678a:	4093      	lsls	r3, r2
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006792:	4937      	ldr	r1, [pc, #220]	; (8006870 <HAL_GPIO_Init+0x2dc>)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	3302      	adds	r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067a0:	4b38      	ldr	r3, [pc, #224]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80067c4:	4a2f      	ldr	r2, [pc, #188]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80067ca:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4013      	ands	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067ee:	4a25      	ldr	r2, [pc, #148]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80067f4:	4b23      	ldr	r3, [pc, #140]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	43db      	mvns	r3, r3
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4013      	ands	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006818:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800681e:	4b19      	ldr	r3, [pc, #100]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	43db      	mvns	r3, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4013      	ands	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006842:	4a10      	ldr	r2, [pc, #64]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3301      	adds	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f aea3 	bne.w	80065a4 <HAL_GPIO_Init+0x10>
  }
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40021000 	.word	0x40021000
 8006870:	40010000 	.word	0x40010000
 8006874:	48000400 	.word	0x48000400
 8006878:	48000800 	.word	0x48000800
 800687c:	48000c00 	.word	0x48000c00
 8006880:	48001000 	.word	0x48001000
 8006884:	40010400 	.word	0x40010400

08006888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
 8006894:	4613      	mov	r3, r2
 8006896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006898:	787b      	ldrb	r3, [r7, #1]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068a4:	e002      	b.n	80068ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d006      	beq.n	80068dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068ce:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f004 f9ec 	bl	800acb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40010400 	.word	0x40010400

080068e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f6:	6013      	str	r3, [r2, #0]
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40007000 	.word	0x40007000

08006908 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006910:	4b2b      	ldr	r3, [pc, #172]	; (80069c0 <HAL_PWR_ConfigPVD+0xb8>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f023 020e 	bic.w	r2, r3, #14
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4928      	ldr	r1, [pc, #160]	; (80069c0 <HAL_PWR_ConfigPVD+0xb8>)
 800691e:	4313      	orrs	r3, r2
 8006920:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006922:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800692e:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006938:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006944:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006946:	4b1f      	ldr	r3, [pc, #124]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	4a1e      	ldr	r2, [pc, #120]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800695e:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 800697c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006980:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 8006994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006998:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4a06      	ldr	r2, [pc, #24]	; (80069c4 <HAL_PWR_ConfigPVD+0xbc>)
 80069ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b0:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40007000 	.word	0x40007000
 80069c4:	40010400 	.word	0x40010400

080069c8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_PWR_EnablePVD+0x1c>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_PWR_EnablePVD+0x1c>)
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	6053      	str	r3, [r2, #4]
}
 80069d8:	bf00      	nop
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40007000 	.word	0x40007000

080069e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40007000 	.word	0x40007000

08006a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a12:	d130      	bne.n	8006a76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a14:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a20:	d038      	beq.n	8006a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a22:	4b20      	ldr	r3, [pc, #128]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2232      	movs	r2, #50	; 0x32
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	0c9b      	lsrs	r3, r3, #18
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a48:	e002      	b.n	8006a50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a50:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5c:	d102      	bne.n	8006a64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f2      	bne.n	8006a4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d110      	bne.n	8006a94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e00f      	b.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d007      	beq.n	8006a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a8c:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	200001c0 	.word	0x200001c0
 8006aac:	431bde83 	.word	0x431bde83

08006ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f000 bc02 	b.w	80072c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ac4:	4b96      	ldr	r3, [pc, #600]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ace:	4b94      	ldr	r3, [pc, #592]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80e4 	beq.w	8006cae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_RCC_OscConfig+0x4c>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b0c      	cmp	r3, #12
 8006af0:	f040 808b 	bne.w	8006c0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	f040 8087 	bne.w	8006c0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006afc:	4b88      	ldr	r3, [pc, #544]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x64>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e3d9      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	4b81      	ldr	r3, [pc, #516]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <HAL_RCC_OscConfig+0x7e>
 8006b24:	4b7e      	ldr	r3, [pc, #504]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b2c:	e005      	b.n	8006b3a <HAL_RCC_OscConfig+0x8a>
 8006b2e:	4b7c      	ldr	r3, [pc, #496]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d223      	bcs.n	8006b86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd8c 	bl	8007660 <RCC_SetFlashLatencyFromMSIRange>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e3ba      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b52:	4b73      	ldr	r3, [pc, #460]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a72      	ldr	r2, [pc, #456]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b70      	ldr	r3, [pc, #448]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	496d      	ldr	r1, [pc, #436]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b70:	4b6b      	ldr	r3, [pc, #428]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	4968      	ldr	r1, [pc, #416]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	604b      	str	r3, [r1, #4]
 8006b84:	e025      	b.n	8006bd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b86:	4b66      	ldr	r3, [pc, #408]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a65      	ldr	r2, [pc, #404]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b8c:	f043 0308 	orr.w	r3, r3, #8
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	4960      	ldr	r1, [pc, #384]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ba4:	4b5e      	ldr	r3, [pc, #376]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	495b      	ldr	r1, [pc, #364]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd4c 	bl	8007660 <RCC_SetFlashLatencyFromMSIRange>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e37a      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bd2:	f000 fc81 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	4b51      	ldr	r3, [pc, #324]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	4950      	ldr	r1, [pc, #320]	; (8006d24 <HAL_RCC_OscConfig+0x274>)
 8006be4:	5ccb      	ldrb	r3, [r1, r3]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	fa22 f303 	lsr.w	r3, r2, r3
 8006bee:	4a4e      	ldr	r2, [pc, #312]	; (8006d28 <HAL_RCC_OscConfig+0x278>)
 8006bf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006bf2:	4b4e      	ldr	r3, [pc, #312]	; (8006d2c <HAL_RCC_OscConfig+0x27c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fe00 	bl	80057fc <HAL_InitTick>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d052      	beq.n	8006cac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	e35e      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d032      	beq.n	8006c78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c12:	4b43      	ldr	r3, [pc, #268]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a42      	ldr	r2, [pc, #264]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c1e:	f7fe fe29 	bl	8005874 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c26:	f7fe fe25 	bl	8005874 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e347      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c38:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c44:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a35      	ldr	r2, [pc, #212]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c4a:	f043 0308 	orr.w	r3, r3, #8
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	4930      	ldr	r1, [pc, #192]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c62:	4b2f      	ldr	r3, [pc, #188]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	492b      	ldr	r1, [pc, #172]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	604b      	str	r3, [r1, #4]
 8006c76:	e01a      	b.n	8006cae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c78:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a28      	ldr	r2, [pc, #160]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c84:	f7fe fdf6 	bl	8005874 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c8c:	f7fe fdf2 	bl	8005874 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e314      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x1dc>
 8006caa:	e000      	b.n	8006cae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d073      	beq.n	8006da2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_OscConfig+0x21c>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b0c      	cmp	r3, #12
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d10b      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ccc:	4b14      	ldr	r3, [pc, #80]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d063      	beq.n	8006da0 <HAL_RCC_OscConfig+0x2f0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d15f      	bne.n	8006da0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e2f1      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cec:	d106      	bne.n	8006cfc <HAL_RCC_OscConfig+0x24c>
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a0b      	ldr	r2, [pc, #44]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e025      	b.n	8006d48 <HAL_RCC_OscConfig+0x298>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d04:	d114      	bne.n	8006d30 <HAL_RCC_OscConfig+0x280>
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a02      	ldr	r2, [pc, #8]	; (8006d20 <HAL_RCC_OscConfig+0x270>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e013      	b.n	8006d48 <HAL_RCC_OscConfig+0x298>
 8006d20:	40021000 	.word	0x40021000
 8006d24:	0800c674 	.word	0x0800c674
 8006d28:	200001c0 	.word	0x200001c0
 8006d2c:	200000ac 	.word	0x200000ac
 8006d30:	4ba0      	ldr	r3, [pc, #640]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a9f      	ldr	r2, [pc, #636]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	4b9d      	ldr	r3, [pc, #628]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a9c      	ldr	r2, [pc, #624]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d013      	beq.n	8006d78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fe fd90 	bl	8005874 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d58:	f7fe fd8c 	bl	8005874 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b64      	cmp	r3, #100	; 0x64
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e2ae      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d6a:	4b92      	ldr	r3, [pc, #584]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x2a8>
 8006d76:	e014      	b.n	8006da2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fe fd7c 	bl	8005874 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d80:	f7fe fd78 	bl	8005874 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	; 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e29a      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d92:	4b88      	ldr	r3, [pc, #544]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x2d0>
 8006d9e:	e000      	b.n	8006da2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d060      	beq.n	8006e70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x310>
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b0c      	cmp	r3, #12
 8006db8:	d119      	bne.n	8006dee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d116      	bne.n	8006dee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dc0:	4b7c      	ldr	r3, [pc, #496]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x328>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e277      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd8:	4b76      	ldr	r3, [pc, #472]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	4973      	ldr	r1, [pc, #460]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dec:	e040      	b.n	8006e70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d023      	beq.n	8006e3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df6:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e02:	f7fe fd37 	bl	8005874 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e0a:	f7fe fd33 	bl	8005874 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e255      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e1c:	4b65      	ldr	r3, [pc, #404]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e28:	4b62      	ldr	r3, [pc, #392]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	061b      	lsls	r3, r3, #24
 8006e36:	495f      	ldr	r1, [pc, #380]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	604b      	str	r3, [r1, #4]
 8006e3c:	e018      	b.n	8006e70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e3e:	4b5d      	ldr	r3, [pc, #372]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5c      	ldr	r2, [pc, #368]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4a:	f7fe fd13 	bl	8005874 <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e50:	e008      	b.n	8006e64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e52:	f7fe fd0f 	bl	8005874 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e231      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e64:	4b53      	ldr	r3, [pc, #332]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f0      	bne.n	8006e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03c      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01c      	beq.n	8006ebe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e84:	4b4b      	ldr	r3, [pc, #300]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e8a:	4a4a      	ldr	r2, [pc, #296]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e94:	f7fe fcee 	bl	8005874 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e9c:	f7fe fcea 	bl	8005874 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e20c      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eae:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0ef      	beq.n	8006e9c <HAL_RCC_OscConfig+0x3ec>
 8006ebc:	e01b      	b.n	8006ef6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ebe:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec4:	4a3b      	ldr	r2, [pc, #236]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ece:	f7fe fcd1 	bl	8005874 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed6:	f7fe fccd 	bl	8005874 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e1ef      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ee8:	4b32      	ldr	r3, [pc, #200]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ef      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80a6 	beq.w	8007050 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f04:	2300      	movs	r3, #0
 8006f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f08:	4b2a      	ldr	r3, [pc, #168]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f20:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f30:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <HAL_RCC_OscConfig+0x508>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d118      	bne.n	8006f6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <HAL_RCC_OscConfig+0x508>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <HAL_RCC_OscConfig+0x508>)
 8006f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f48:	f7fe fc94 	bl	8005874 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f50:	f7fe fc90 	bl	8005874 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1b2      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <HAL_RCC_OscConfig+0x508>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d108      	bne.n	8006f88 <HAL_RCC_OscConfig+0x4d8>
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	4a0d      	ldr	r2, [pc, #52]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f86:	e029      	b.n	8006fdc <HAL_RCC_OscConfig+0x52c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d115      	bne.n	8006fbc <HAL_RCC_OscConfig+0x50c>
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f96:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006f98:	f043 0304 	orr.w	r3, r3, #4
 8006f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <HAL_RCC_OscConfig+0x504>)
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fb0:	e014      	b.n	8006fdc <HAL_RCC_OscConfig+0x52c>
 8006fb2:	bf00      	nop
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40007000 	.word	0x40007000
 8006fbc:	4b9a      	ldr	r3, [pc, #616]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	4a99      	ldr	r2, [pc, #612]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fcc:	4b96      	ldr	r3, [pc, #600]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	4a95      	ldr	r2, [pc, #596]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8006fd4:	f023 0304 	bic.w	r3, r3, #4
 8006fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d016      	beq.n	8007012 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe4:	f7fe fc46 	bl	8005874 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fea:	e00a      	b.n	8007002 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fec:	f7fe fc42 	bl	8005874 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e162      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007002:	4b89      	ldr	r3, [pc, #548]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0ed      	beq.n	8006fec <HAL_RCC_OscConfig+0x53c>
 8007010:	e015      	b.n	800703e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007012:	f7fe fc2f 	bl	8005874 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fe fc2b 	bl	8005874 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	; 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e14b      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007030:	4b7d      	ldr	r3, [pc, #500]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ed      	bne.n	800701a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800703e:	7ffb      	ldrb	r3, [r7, #31]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d105      	bne.n	8007050 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007044:	4b78      	ldr	r3, [pc, #480]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	4a77      	ldr	r2, [pc, #476]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 800704a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800704e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d03c      	beq.n	80070d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01c      	beq.n	800709e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007064:	4b70      	ldr	r3, [pc, #448]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800706a:	4a6f      	ldr	r2, [pc, #444]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007074:	f7fe fbfe 	bl	8005874 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800707c:	f7fe fbfa 	bl	8005874 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e11c      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800708e:	4b66      	ldr	r3, [pc, #408]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0ef      	beq.n	800707c <HAL_RCC_OscConfig+0x5cc>
 800709c:	e01b      	b.n	80070d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800709e:	4b62      	ldr	r3, [pc, #392]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80070a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070a4:	4a60      	ldr	r2, [pc, #384]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ae:	f7fe fbe1 	bl	8005874 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070b6:	f7fe fbdd 	bl	8005874 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e0ff      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070c8:	4b57      	ldr	r3, [pc, #348]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80070ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1ef      	bne.n	80070b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80f3 	beq.w	80072c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	f040 80c9 	bne.w	800727c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80070ea:	4b4f      	ldr	r3, [pc, #316]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f003 0203 	and.w	r2, r3, #3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d12c      	bne.n	8007158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	3b01      	subs	r3, #1
 800710a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800710c:	429a      	cmp	r2, r3
 800710e:	d123      	bne.n	8007158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800711c:	429a      	cmp	r2, r3
 800711e:	d11b      	bne.n	8007158 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d113      	bne.n	8007158 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	3b01      	subs	r3, #1
 800713e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007140:	429a      	cmp	r2, r3
 8007142:	d109      	bne.n	8007158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	3b01      	subs	r3, #1
 8007152:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d06b      	beq.n	8007230 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b0c      	cmp	r3, #12
 800715c:	d062      	beq.n	8007224 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800715e:	4b32      	ldr	r3, [pc, #200]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0ac      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800716e:	4b2e      	ldr	r3, [pc, #184]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2d      	ldr	r2, [pc, #180]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007178:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800717a:	f7fe fb7b 	bl	8005874 <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007182:	f7fe fb77 	bl	8005874 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e099      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007194:	4b24      	ldr	r3, [pc, #144]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a0:	4b21      	ldr	r3, [pc, #132]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	4b21      	ldr	r3, [pc, #132]	; (800722c <HAL_RCC_OscConfig+0x77c>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071b0:	3a01      	subs	r2, #1
 80071b2:	0112      	lsls	r2, r2, #4
 80071b4:	4311      	orrs	r1, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071ba:	0212      	lsls	r2, r2, #8
 80071bc:	4311      	orrs	r1, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071c2:	0852      	lsrs	r2, r2, #1
 80071c4:	3a01      	subs	r2, #1
 80071c6:	0552      	lsls	r2, r2, #21
 80071c8:	4311      	orrs	r1, r2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071ce:	0852      	lsrs	r2, r2, #1
 80071d0:	3a01      	subs	r2, #1
 80071d2:	0652      	lsls	r2, r2, #25
 80071d4:	4311      	orrs	r1, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071da:	06d2      	lsls	r2, r2, #27
 80071dc:	430a      	orrs	r2, r1
 80071de:	4912      	ldr	r1, [pc, #72]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80071e4:	4b10      	ldr	r3, [pc, #64]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0f      	ldr	r2, [pc, #60]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 80071f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071fc:	f7fe fb3a 	bl	8005874 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007204:	f7fe fb36 	bl	8005874 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e058      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007216:	4b04      	ldr	r3, [pc, #16]	; (8007228 <HAL_RCC_OscConfig+0x778>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007222:	e050      	b.n	80072c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e04f      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
 8007228:	40021000 	.word	0x40021000
 800722c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d144      	bne.n	80072c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a23      	ldr	r2, [pc, #140]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 8007242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007248:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 800724e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007254:	f7fe fb0e 	bl	8005874 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fe fb0a 	bl	8005874 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e02c      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800726e:	4b18      	ldr	r3, [pc, #96]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCC_OscConfig+0x7ac>
 800727a:	e024      	b.n	80072c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b0c      	cmp	r3, #12
 8007280:	d01f      	beq.n	80072c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 8007288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800728c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728e:	f7fe faf1 	bl	8005874 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007296:	f7fe faed 	bl	8005874 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e00f      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f0      	bne.n	8007296 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	4905      	ldr	r1, [pc, #20]	; (80072d0 <HAL_RCC_OscConfig+0x820>)
 80072ba:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <HAL_RCC_OscConfig+0x824>)
 80072bc:	4013      	ands	r3, r2
 80072be:	60cb      	str	r3, [r1, #12]
 80072c0:	e001      	b.n	80072c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40021000 	.word	0x40021000
 80072d4:	feeefffc 	.word	0xfeeefffc

080072d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0e7      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072ec:	4b75      	ldr	r3, [pc, #468]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d910      	bls.n	800731c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fa:	4b72      	ldr	r3, [pc, #456]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 0207 	bic.w	r2, r3, #7
 8007302:	4970      	ldr	r1, [pc, #448]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800730a:	4b6e      	ldr	r3, [pc, #440]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0cf      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007334:	429a      	cmp	r2, r3
 8007336:	d908      	bls.n	800734a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007338:	4b63      	ldr	r3, [pc, #396]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4960      	ldr	r1, [pc, #384]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007346:	4313      	orrs	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d04c      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d107      	bne.n	800736e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800735e:	4b5a      	ldr	r3, [pc, #360]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d121      	bne.n	80073ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e0a6      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d107      	bne.n	8007386 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007376:	4b54      	ldr	r3, [pc, #336]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d115      	bne.n	80073ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e09a      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e08e      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800739e:	4b4a      	ldr	r3, [pc, #296]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e086      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073ae:	4b46      	ldr	r3, [pc, #280]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 0203 	bic.w	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	4943      	ldr	r1, [pc, #268]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c0:	f7fe fa58 	bl	8005874 <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c6:	e00a      	b.n	80073de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c8:	f7fe fa54 	bl	8005874 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e06e      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073de:	4b3a      	ldr	r3, [pc, #232]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 020c 	and.w	r2, r3, #12
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d1eb      	bne.n	80073c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	4b31      	ldr	r3, [pc, #196]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007408:	429a      	cmp	r2, r3
 800740a:	d208      	bcs.n	800741e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800740c:	4b2e      	ldr	r3, [pc, #184]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	492b      	ldr	r1, [pc, #172]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800741a:	4313      	orrs	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800741e:	4b29      	ldr	r3, [pc, #164]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d210      	bcs.n	800744e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f023 0207 	bic.w	r2, r3, #7
 8007434:	4923      	ldr	r1, [pc, #140]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	4313      	orrs	r3, r2
 800743a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <HAL_RCC_ClockConfig+0x1ec>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d001      	beq.n	800744e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e036      	b.n	80074bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4918      	ldr	r1, [pc, #96]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007468:	4313      	orrs	r3, r2
 800746a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007478:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4910      	ldr	r1, [pc, #64]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007488:	4313      	orrs	r3, r2
 800748a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800748c:	f000 f824 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8007490:	4602      	mov	r2, r0
 8007492:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	490b      	ldr	r1, [pc, #44]	; (80074cc <HAL_RCC_ClockConfig+0x1f4>)
 800749e:	5ccb      	ldrb	r3, [r1, r3]
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <HAL_RCC_ClockConfig+0x1f8>)
 80074aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074ac:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <HAL_RCC_ClockConfig+0x1fc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe f9a3 	bl	80057fc <HAL_InitTick>
 80074b6:	4603      	mov	r3, r0
 80074b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40022000 	.word	0x40022000
 80074c8:	40021000 	.word	0x40021000
 80074cc:	0800c674 	.word	0x0800c674
 80074d0:	200001c0 	.word	0x200001c0
 80074d4:	200000ac 	.word	0x200000ac

080074d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 030c 	and.w	r3, r3, #12
 80074ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074f0:	4b3b      	ldr	r3, [pc, #236]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0x34>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d121      	bne.n	800754a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d11e      	bne.n	800754a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800750c:	4b34      	ldr	r3, [pc, #208]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007518:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800751a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e005      	b.n	8007534 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007528:	4b2d      	ldr	r3, [pc, #180]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007534:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800753c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10d      	bne.n	8007560 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007548:	e00a      	b.n	8007560 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b04      	cmp	r3, #4
 800754e:	d102      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e004      	b.n	8007560 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d101      	bne.n	8007560 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800755c:	4b23      	ldr	r3, [pc, #140]	; (80075ec <HAL_RCC_GetSysClockFreq+0x114>)
 800755e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b0c      	cmp	r3, #12
 8007564:	d134      	bne.n	80075d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007566:	4b1e      	ldr	r3, [pc, #120]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d003      	beq.n	800757e <HAL_RCC_GetSysClockFreq+0xa6>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d003      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0xac>
 800757c:	e005      	b.n	800758a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800757e:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007580:	617b      	str	r3, [r7, #20]
      break;
 8007582:	e005      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <HAL_RCC_GetSysClockFreq+0x114>)
 8007586:	617b      	str	r3, [r7, #20]
      break;
 8007588:	e002      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	617b      	str	r3, [r7, #20]
      break;
 800758e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007590:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	091b      	lsrs	r3, r3, #4
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	3301      	adds	r3, #1
 800759c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	fb03 f202 	mul.w	r2, r3, r2
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	0e5b      	lsrs	r3, r3, #25
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	3301      	adds	r3, #1
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075d0:	69bb      	ldr	r3, [r7, #24]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3724      	adds	r7, #36	; 0x24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	40021000 	.word	0x40021000
 80075e4:	0800c68c 	.word	0x0800c68c
 80075e8:	00f42400 	.word	0x00f42400
 80075ec:	02dc6c00 	.word	0x02dc6c00

080075f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f4:	4b03      	ldr	r3, [pc, #12]	; (8007604 <HAL_RCC_GetHCLKFreq+0x14>)
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	200001c0 	.word	0x200001c0

08007608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800760c:	f7ff fff0 	bl	80075f0 <HAL_RCC_GetHCLKFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b06      	ldr	r3, [pc, #24]	; (800762c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	4904      	ldr	r1, [pc, #16]	; (8007630 <HAL_RCC_GetPCLK1Freq+0x28>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000
 8007630:	0800c684 	.word	0x0800c684

08007634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007638:	f7ff ffda 	bl	80075f0 <HAL_RCC_GetHCLKFreq>
 800763c:	4602      	mov	r2, r0
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	0adb      	lsrs	r3, r3, #11
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <HAL_RCC_GetPCLK2Freq+0x28>)
 800764a:	5ccb      	ldrb	r3, [r1, r3]
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40021000 	.word	0x40021000
 800765c:	0800c684 	.word	0x0800c684

08007660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800766c:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007678:	f7ff f9b6 	bl	80069e8 <HAL_PWREx_GetVoltageRange>
 800767c:	6178      	str	r0, [r7, #20]
 800767e:	e014      	b.n	80076aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007684:	4a24      	ldr	r2, [pc, #144]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800768a:	6593      	str	r3, [r2, #88]	; 0x58
 800768c:	4b22      	ldr	r3, [pc, #136]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007698:	f7ff f9a6 	bl	80069e8 <HAL_PWREx_GetVoltageRange>
 800769c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800769e:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a2:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b0:	d10b      	bne.n	80076ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b80      	cmp	r3, #128	; 0x80
 80076b6:	d919      	bls.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2ba0      	cmp	r3, #160	; 0xa0
 80076bc:	d902      	bls.n	80076c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076be:	2302      	movs	r3, #2
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e013      	b.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076c4:	2301      	movs	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	e010      	b.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b80      	cmp	r3, #128	; 0x80
 80076ce:	d902      	bls.n	80076d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80076d0:	2303      	movs	r3, #3
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	e00a      	b.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d102      	bne.n	80076e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076dc:	2302      	movs	r3, #2
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	e004      	b.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b70      	cmp	r3, #112	; 0x70
 80076e6:	d101      	bne.n	80076ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076e8:	2301      	movs	r3, #1
 80076ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 0207 	bic.w	r2, r3, #7
 80076f4:	4909      	ldr	r1, [pc, #36]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	429a      	cmp	r2, r3
 8007708:	d001      	beq.n	800770e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40021000 	.word	0x40021000
 800771c:	40022000 	.word	0x40022000

08007720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007728:	2300      	movs	r3, #0
 800772a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800772c:	2300      	movs	r3, #0
 800772e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007738:	2b00      	cmp	r3, #0
 800773a:	d031      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007744:	d01a      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007746:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800774a:	d814      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007754:	d10f      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007756:	4b5d      	ldr	r3, [pc, #372]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	4a5c      	ldr	r2, [pc, #368]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800775c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007760:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007762:	e00c      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f9f0 	bl	8007b50 <RCCEx_PLLSAI1_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007774:	e003      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	74fb      	strb	r3, [r7, #19]
      break;
 800777a:	e000      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800777c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777e:	7cfb      	ldrb	r3, [r7, #19]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10b      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007784:	4b51      	ldr	r3, [pc, #324]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	494e      	ldr	r1, [pc, #312]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7cfb      	ldrb	r3, [r7, #19]
 800779e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 809e 	beq.w	80078ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ae:	2300      	movs	r3, #0
 80077b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077b2:	4b46      	ldr	r3, [pc, #280]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c8:	4b40      	ldr	r3, [pc, #256]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	4a3f      	ldr	r2, [pc, #252]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d2:	6593      	str	r3, [r2, #88]	; 0x58
 80077d4:	4b3d      	ldr	r3, [pc, #244]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077e0:	2301      	movs	r3, #1
 80077e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e4:	4b3a      	ldr	r3, [pc, #232]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80077ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077f0:	f7fe f840 	bl	8005874 <HAL_GetTick>
 80077f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077f6:	e009      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f8:	f7fe f83c 	bl	8005874 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d902      	bls.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	74fb      	strb	r3, [r7, #19]
        break;
 800780a:	e005      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800780c:	4b30      	ldr	r3, [pc, #192]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0ef      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d15a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800781e:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01e      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	429a      	cmp	r2, r3
 8007838:	d019      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007844:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800784e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007856:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800785e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007866:	4a19      	ldr	r2, [pc, #100]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d016      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fd fffc 	bl	8005874 <HAL_GetTick>
 800787c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800787e:	e00b      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007880:	f7fd fff8 	bl	8005874 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	f241 3288 	movw	r2, #5000	; 0x1388
 800788e:	4293      	cmp	r3, r2
 8007890:	d902      	bls.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	74fb      	strb	r3, [r7, #19]
            break;
 8007896:	e006      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0ec      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80078a6:	7cfb      	ldrb	r3, [r7, #19]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	4904      	ldr	r1, [pc, #16]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80078c2:	e009      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	74bb      	strb	r3, [r7, #18]
 80078c8:	e006      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000
 80078d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7cfb      	ldrb	r3, [r7, #19]
 80078d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078d8:	7c7b      	ldrb	r3, [r7, #17]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d105      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078de:	4b9b      	ldr	r3, [pc, #620]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	4a9a      	ldr	r2, [pc, #616]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078f6:	4b95      	ldr	r3, [pc, #596]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fc:	f023 0203 	bic.w	r2, r3, #3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	4991      	ldr	r1, [pc, #580]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007918:	4b8c      	ldr	r3, [pc, #560]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	f023 020c 	bic.w	r2, r3, #12
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	4989      	ldr	r1, [pc, #548]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007928:	4313      	orrs	r3, r2
 800792a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800793a:	4b84      	ldr	r3, [pc, #528]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	4980      	ldr	r1, [pc, #512]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800795c:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	4978      	ldr	r1, [pc, #480]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800797e:	4b73      	ldr	r3, [pc, #460]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	496f      	ldr	r1, [pc, #444]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079a0:	4b6a      	ldr	r3, [pc, #424]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	4967      	ldr	r1, [pc, #412]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079c2:	4b62      	ldr	r3, [pc, #392]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	495e      	ldr	r1, [pc, #376]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079e4:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	4956      	ldr	r1, [pc, #344]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a06:	4b51      	ldr	r3, [pc, #324]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	494d      	ldr	r1, [pc, #308]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d028      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a28:	4b48      	ldr	r3, [pc, #288]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	4945      	ldr	r1, [pc, #276]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a46:	d106      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a48:	4b40      	ldr	r3, [pc, #256]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4a3f      	ldr	r2, [pc, #252]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a52:	60d3      	str	r3, [r2, #12]
 8007a54:	e011      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a5e:	d10c      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	2101      	movs	r1, #1
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f872 	bl	8007b50 <RCCEx_PLLSAI1_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a70:	7cfb      	ldrb	r3, [r7, #19]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007a76:	7cfb      	ldrb	r3, [r7, #19]
 8007a78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d028      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a86:	4b31      	ldr	r3, [pc, #196]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a94:	492d      	ldr	r1, [pc, #180]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa4:	d106      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab0:	60d3      	str	r3, [r2, #12]
 8007ab2:	e011      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007abc:	d10c      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f843 	bl	8007b50 <RCCEx_PLLSAI1_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ace:	7cfb      	ldrb	r3, [r7, #19]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007ad4:	7cfb      	ldrb	r3, [r7, #19]
 8007ad6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01c      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ae4:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af2:	4916      	ldr	r1, [pc, #88]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	2102      	movs	r1, #2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f820 	bl	8007b50 <RCCEx_PLLSAI1_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	4904      	ldr	r1, [pc, #16]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b40:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000

08007b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b5e:	4b74      	ldr	r3, [pc, #464]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b6a:	4b71      	ldr	r3, [pc, #452]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0203 	and.w	r2, r3, #3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d10d      	bne.n	8007b96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007b82:	4b6b      	ldr	r3, [pc, #428]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	091b      	lsrs	r3, r3, #4
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
       ||
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d047      	beq.n	8007c26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	e044      	b.n	8007c26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d018      	beq.n	8007bd6 <RCCEx_PLLSAI1_Config+0x86>
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d825      	bhi.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa4>
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d002      	beq.n	8007bb2 <RCCEx_PLLSAI1_Config+0x62>
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d009      	beq.n	8007bc4 <RCCEx_PLLSAI1_Config+0x74>
 8007bb0:	e020      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bb2:	4b5f      	ldr	r3, [pc, #380]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d11d      	bne.n	8007bfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc2:	e01a      	b.n	8007bfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bc4:	4b5a      	ldr	r3, [pc, #360]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bd4:	e013      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bd6:	4b56      	ldr	r3, [pc, #344]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10f      	bne.n	8007c02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007be2:	4b53      	ldr	r3, [pc, #332]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bf2:	e006      	b.n	8007c02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf8:	e004      	b.n	8007c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c0a:	4b49      	ldr	r3, [pc, #292]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	4943      	ldr	r1, [pc, #268]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d17c      	bne.n	8007d26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c2c:	4b40      	ldr	r3, [pc, #256]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a3f      	ldr	r2, [pc, #252]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c38:	f7fd fe1c 	bl	8005874 <HAL_GetTick>
 8007c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c3e:	e009      	b.n	8007c54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c40:	f7fd fe18 	bl	8005874 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d902      	bls.n	8007c54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	73fb      	strb	r3, [r7, #15]
        break;
 8007c52:	e005      	b.n	8007c60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c54:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1ef      	bne.n	8007c40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d15f      	bne.n	8007d26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d110      	bne.n	8007c8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c6c:	4b30      	ldr	r3, [pc, #192]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6892      	ldr	r2, [r2, #8]
 8007c7c:	0211      	lsls	r1, r2, #8
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	68d2      	ldr	r2, [r2, #12]
 8007c82:	06d2      	lsls	r2, r2, #27
 8007c84:	430a      	orrs	r2, r1
 8007c86:	492a      	ldr	r1, [pc, #168]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	610b      	str	r3, [r1, #16]
 8007c8c:	e027      	b.n	8007cde <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d112      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c94:	4b26      	ldr	r3, [pc, #152]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6892      	ldr	r2, [r2, #8]
 8007ca4:	0211      	lsls	r1, r2, #8
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6912      	ldr	r2, [r2, #16]
 8007caa:	0852      	lsrs	r2, r2, #1
 8007cac:	3a01      	subs	r2, #1
 8007cae:	0552      	lsls	r2, r2, #21
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	491f      	ldr	r1, [pc, #124]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	610b      	str	r3, [r1, #16]
 8007cb8:	e011      	b.n	8007cde <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cba:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007cc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6892      	ldr	r2, [r2, #8]
 8007cca:	0211      	lsls	r1, r2, #8
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6952      	ldr	r2, [r2, #20]
 8007cd0:	0852      	lsrs	r2, r2, #1
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	0652      	lsls	r2, r2, #25
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	4915      	ldr	r1, [pc, #84]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ce8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cea:	f7fd fdc3 	bl	8005874 <HAL_GetTick>
 8007cee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cf0:	e009      	b.n	8007d06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cf2:	f7fd fdbf 	bl	8005874 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d902      	bls.n	8007d06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	73fb      	strb	r3, [r7, #15]
          break;
 8007d04:	e005      	b.n	8007d12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0ef      	beq.n	8007cf2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	4903      	ldr	r1, [pc, #12]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	40021000 	.word	0x40021000

08007d34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d06c      	beq.n	8007e20 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f002 fcf8 	bl	800a750 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	22ca      	movs	r2, #202	; 0xca
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2253      	movs	r2, #83	; 0x53
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f87c 	bl	8007e76 <RTC_EnterInitMode>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d14b      	bne.n	8007e20 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d9a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6899      	ldr	r1, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68d2      	ldr	r2, [r2, #12]
 8007dc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6919      	ldr	r1, [r3, #16]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	041a      	lsls	r2, r3, #16
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f87f 	bl	8007edc <RTC_ExitInitMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11b      	bne.n	8007e20 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0203 	bic.w	r2, r2, #3
 8007df6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69da      	ldr	r2, [r3, #28]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	22ff      	movs	r2, #255	; 0xff
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e40:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007e42:	f7fd fd17 	bl	8005874 <HAL_GetTick>
 8007e46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e48:	e009      	b.n	8007e5e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e4a:	f7fd fd13 	bl	8005874 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e58:	d901      	bls.n	8007e5e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e007      	b.n	8007e6e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0ee      	beq.n	8007e4a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d120      	bne.n	8007ed2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e9a:	f7fd fceb 	bl	8005874 <HAL_GetTick>
 8007e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ea0:	e00d      	b.n	8007ebe <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007ea2:	f7fd fce7 	bl	8005874 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb0:	d905      	bls.n	8007ebe <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <RTC_EnterInitMode+0x5c>
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d1e7      	bne.n	8007ea2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ef4:	4b17      	ldr	r3, [pc, #92]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ff92 	bl	8007e2a <HAL_RTC_WaitForSynchro>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01e      	beq.n	8007f4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2203      	movs	r2, #3
 8007f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	73fb      	strb	r3, [r7, #15]
 8007f18:	e017      	b.n	8007f4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	4a0d      	ldr	r2, [pc, #52]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007f20:	f023 0320 	bic.w	r3, r3, #32
 8007f24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff ff7f 	bl	8007e2a <HAL_RTC_WaitForSynchro>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2203      	movs	r2, #3
 8007f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	4a04      	ldr	r2, [pc, #16]	; (8007f54 <RTC_ExitInitMode+0x78>)
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40002800 	.word	0x40002800

08007f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e095      	b.n	8008096 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d108      	bne.n	8007f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f7a:	d009      	beq.n	8007f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	61da      	str	r2, [r3, #28]
 8007f82:	e005      	b.n	8007f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f877 	bl	800809e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fd0:	d902      	bls.n	8007fd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e002      	b.n	8007fde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fe6:	d007      	beq.n	8007ff8 <HAL_SPI_Init+0xa0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ff0:	d002      	beq.n	8007ff8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	ea42 0103 	orr.w	r1, r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	f003 0204 	and.w	r2, r3, #4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008074:	ea42 0103 	orr.w	r1, r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e049      	b.n	8008158 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f002 fb55 	bl	800a788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f000 fe2f 	bl	8008d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e049      	b.n	8008206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f002 fbf8 	bl	800a97c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 fdd8 	bl	8008d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	bf0c      	ite	eq
 8008234:	2301      	moveq	r3, #1
 8008236:	2300      	movne	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	e03c      	b.n	80082b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d109      	bne.n	8008256 <HAL_TIM_PWM_Start_DMA+0x46>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	bf0c      	ite	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	2300      	movne	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e02f      	b.n	80082b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d109      	bne.n	8008270 <HAL_TIM_PWM_Start_DMA+0x60>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	e022      	b.n	80082b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b0c      	cmp	r3, #12
 8008274:	d109      	bne.n	800828a <HAL_TIM_PWM_Start_DMA+0x7a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	e015      	b.n	80082b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b10      	cmp	r3, #16
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e008      	b.n	80082b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
 80082bc:	e18d      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e03c      	b.n	8008352 <HAL_TIM_PWM_Start_DMA+0x142>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf0c      	ite	eq
 80082ea:	2301      	moveq	r3, #1
 80082ec:	2300      	movne	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e02f      	b.n	8008352 <HAL_TIM_PWM_Start_DMA+0x142>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start_DMA+0xfc>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e022      	b.n	8008352 <HAL_TIM_PWM_Start_DMA+0x142>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d109      	bne.n	8008326 <HAL_TIM_PWM_Start_DMA+0x116>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b01      	cmp	r3, #1
 800831c:	bf0c      	ite	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	2300      	movne	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e015      	b.n	8008352 <HAL_TIM_PWM_Start_DMA+0x142>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b10      	cmp	r3, #16
 800832a:	d109      	bne.n	8008340 <HAL_TIM_PWM_Start_DMA+0x130>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	e008      	b.n	8008352 <HAL_TIM_PWM_Start_DMA+0x142>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b01      	cmp	r3, #1
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d034      	beq.n	80083c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_TIM_PWM_Start_DMA+0x152>
 800835c:	887b      	ldrh	r3, [r7, #2]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e139      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <HAL_TIM_PWM_Start_DMA+0x166>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008374:	e026      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d104      	bne.n	8008386 <HAL_TIM_PWM_Start_DMA+0x176>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008384:	e01e      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d104      	bne.n	8008396 <HAL_TIM_PWM_Start_DMA+0x186>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008394:	e016      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083a4:	e00e      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b4:	e006      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083be:	e001      	b.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e10a      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	f200 80ae 	bhi.w	8008528 <HAL_TIM_PWM_Start_DMA+0x318>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008409 	.word	0x08008409
 80083d8:	08008529 	.word	0x08008529
 80083dc:	08008529 	.word	0x08008529
 80083e0:	08008529 	.word	0x08008529
 80083e4:	08008451 	.word	0x08008451
 80083e8:	08008529 	.word	0x08008529
 80083ec:	08008529 	.word	0x08008529
 80083f0:	08008529 	.word	0x08008529
 80083f4:	08008499 	.word	0x08008499
 80083f8:	08008529 	.word	0x08008529
 80083fc:	08008529 	.word	0x08008529
 8008400:	08008529 	.word	0x08008529
 8008404:	080084e1 	.word	0x080084e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	4a75      	ldr	r2, [pc, #468]	; (80085e4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	4a74      	ldr	r2, [pc, #464]	; (80085e8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008416:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	4a73      	ldr	r2, [pc, #460]	; (80085ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800841e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3334      	adds	r3, #52	; 0x34
 800842c:	461a      	mov	r2, r3
 800842e:	887b      	ldrh	r3, [r7, #2]
 8008430:	f7fd fc70 	bl	8005d14 <HAL_DMA_Start_IT>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e0cd      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844c:	60da      	str	r2, [r3, #12]
      break;
 800844e:	e06e      	b.n	800852e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	4a63      	ldr	r2, [pc, #396]	; (80085e4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	4a62      	ldr	r2, [pc, #392]	; (80085e8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800845e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	4a61      	ldr	r2, [pc, #388]	; (80085ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3338      	adds	r3, #56	; 0x38
 8008474:	461a      	mov	r2, r3
 8008476:	887b      	ldrh	r3, [r7, #2]
 8008478:	f7fd fc4c 	bl	8005d14 <HAL_DMA_Start_IT>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e0a9      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008494:	60da      	str	r2, [r3, #12]
      break;
 8008496:	e04a      	b.n	800852e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	4a51      	ldr	r2, [pc, #324]	; (80085e4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800849e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a50      	ldr	r2, [pc, #320]	; (80085e8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a4f      	ldr	r2, [pc, #316]	; (80085ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80084ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	333c      	adds	r3, #60	; 0x3c
 80084bc:	461a      	mov	r2, r3
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	f7fd fc28 	bl	8005d14 <HAL_DMA_Start_IT>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e085      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084dc:	60da      	str	r2, [r3, #12]
      break;
 80084de:	e026      	b.n	800852e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	4a3f      	ldr	r2, [pc, #252]	; (80085e4 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	4a3e      	ldr	r2, [pc, #248]	; (80085e8 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	4a3d      	ldr	r2, [pc, #244]	; (80085ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80084f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3340      	adds	r3, #64	; 0x40
 8008504:	461a      	mov	r2, r3
 8008506:	887b      	ldrh	r3, [r7, #2]
 8008508:	f7fd fc04 	bl	8005d14 <HAL_DMA_Start_IT>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e061      	b.n	80085da <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008524:	60da      	str	r2, [r3, #12]
      break;
 8008526:	e002      	b.n	800852e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	bf00      	nop
  }

  if (status == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d151      	bne.n	80085d8 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2201      	movs	r2, #1
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 ff85 	bl	800944c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a2a      	ldr	r2, [pc, #168]	; (80085f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <HAL_TIM_PWM_Start_DMA+0x350>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a28      	ldr	r2, [pc, #160]	; (80085f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <HAL_TIM_PWM_Start_DMA+0x350>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a27      	ldr	r2, [pc, #156]	; (80085f8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d101      	bne.n	8008564 <HAL_TIM_PWM_Start_DMA+0x354>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <HAL_TIM_PWM_Start_DMA+0x356>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1c      	ldr	r2, [pc, #112]	; (80085f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_TIM_PWM_Start_DMA+0x388>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858c:	d004      	beq.n	8008598 <HAL_TIM_PWM_Start_DMA+0x388>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d115      	bne.n	80085c4 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	4b17      	ldr	r3, [pc, #92]	; (80085fc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	d015      	beq.n	80085d6 <HAL_TIM_PWM_Start_DMA+0x3c6>
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b0:	d011      	beq.n	80085d6 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0201 	orr.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c2:	e008      	b.n	80085d6 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	08008c45 	.word	0x08008c45
 80085e8:	08008ced 	.word	0x08008ced
 80085ec:	08008bb3 	.word	0x08008bb3
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400
 80085fc:	00010007 	.word	0x00010007

08008600 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b0c      	cmp	r3, #12
 8008612:	d855      	bhi.n	80086c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	08008651 	.word	0x08008651
 8008620:	080086c1 	.word	0x080086c1
 8008624:	080086c1 	.word	0x080086c1
 8008628:	080086c1 	.word	0x080086c1
 800862c:	0800866d 	.word	0x0800866d
 8008630:	080086c1 	.word	0x080086c1
 8008634:	080086c1 	.word	0x080086c1
 8008638:	080086c1 	.word	0x080086c1
 800863c:	08008689 	.word	0x08008689
 8008640:	080086c1 	.word	0x080086c1
 8008644:	080086c1 	.word	0x080086c1
 8008648:	080086c1 	.word	0x080086c1
 800864c:	080086a5 	.word	0x080086a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800865e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd fbb5 	bl	8005dd4 <HAL_DMA_Abort_IT>
      break;
 800866a:	e02c      	b.n	80086c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800867a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	4618      	mov	r0, r3
 8008682:	f7fd fba7 	bl	8005dd4 <HAL_DMA_Abort_IT>
      break;
 8008686:	e01e      	b.n	80086c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008696:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd fb99 	bl	8005dd4 <HAL_DMA_Abort_IT>
      break;
 80086a2:	e010      	b.n	80086c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fd fb8b 	bl	8005dd4 <HAL_DMA_Abort_IT>
      break;
 80086be:	e002      	b.n	80086c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
      break;
 80086c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d176      	bne.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2200      	movs	r2, #0
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 feb9 	bl	800944c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a39      	ldr	r2, [pc, #228]	; (80087c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a37      	ldr	r2, [pc, #220]	; (80087c8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a36      	ldr	r2, [pc, #216]	; (80087cc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d101      	bne.n	80086fc <HAL_TIM_PWM_Stop_DMA+0xfc>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <HAL_TIM_PWM_Stop_DMA+0xfe>
 80086fc:	2300      	movs	r3, #0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d017      	beq.n	8008732 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	f241 1311 	movw	r3, #4369	; 0x1111
 800870c:	4013      	ands	r3, r2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10f      	bne.n	8008732 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	f240 4344 	movw	r3, #1092	; 0x444
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d107      	bne.n	8008732 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a1a      	ldr	r2, [r3, #32]
 8008738:	f241 1311 	movw	r3, #4369	; 0x1111
 800873c:	4013      	ands	r3, r2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10f      	bne.n	8008762 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a1a      	ldr	r2, [r3, #32]
 8008748:	f240 4344 	movw	r3, #1092	; 0x444
 800874c:	4013      	ands	r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0201 	bic.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <HAL_TIM_PWM_Stop_DMA+0x172>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008770:	e023      	b.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d104      	bne.n	8008782 <HAL_TIM_PWM_Stop_DMA+0x182>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008780:	e01b      	b.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b08      	cmp	r3, #8
 8008786:	d104      	bne.n	8008792 <HAL_TIM_PWM_Stop_DMA+0x192>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008790:	e013      	b.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	d104      	bne.n	80087a2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087a0:	e00b      	b.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d104      	bne.n	80087b2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b0:	e003      	b.n	80087ba <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400

080087d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e0ff      	b.n	80089ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b14      	cmp	r3, #20
 80087fa:	f200 80f0 	bhi.w	80089de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008859 	.word	0x08008859
 8008808:	080089df 	.word	0x080089df
 800880c:	080089df 	.word	0x080089df
 8008810:	080089df 	.word	0x080089df
 8008814:	08008899 	.word	0x08008899
 8008818:	080089df 	.word	0x080089df
 800881c:	080089df 	.word	0x080089df
 8008820:	080089df 	.word	0x080089df
 8008824:	080088db 	.word	0x080088db
 8008828:	080089df 	.word	0x080089df
 800882c:	080089df 	.word	0x080089df
 8008830:	080089df 	.word	0x080089df
 8008834:	0800891b 	.word	0x0800891b
 8008838:	080089df 	.word	0x080089df
 800883c:	080089df 	.word	0x080089df
 8008840:	080089df 	.word	0x080089df
 8008844:	0800895d 	.word	0x0800895d
 8008848:	080089df 	.word	0x080089df
 800884c:	080089df 	.word	0x080089df
 8008850:	080089df 	.word	0x080089df
 8008854:	0800899d 	.word	0x0800899d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fadc 	bl	8008e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0208 	orr.w	r2, r2, #8
 8008872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0204 	bic.w	r2, r2, #4
 8008882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6999      	ldr	r1, [r3, #24]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	619a      	str	r2, [r3, #24]
      break;
 8008896:	e0a5      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fb38 	bl	8008f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6999      	ldr	r1, [r3, #24]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	021a      	lsls	r2, r3, #8
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	619a      	str	r2, [r3, #24]
      break;
 80088d8:	e084      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fb91 	bl	8009008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0208 	orr.w	r2, r2, #8
 80088f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0204 	bic.w	r2, r2, #4
 8008904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69d9      	ldr	r1, [r3, #28]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	61da      	str	r2, [r3, #28]
      break;
 8008918:	e064      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fbe9 	bl	80090f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69da      	ldr	r2, [r3, #28]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69d9      	ldr	r1, [r3, #28]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	021a      	lsls	r2, r3, #8
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	61da      	str	r2, [r3, #28]
      break;
 800895a:	e043      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fc26 	bl	80091b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0204 	bic.w	r2, r2, #4
 8008986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800899a:	e023      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fc5e 	bl	8009264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	021a      	lsls	r2, r3, #8
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089dc:	e002      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
      break;
 80089e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop

080089f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIM_ConfigClockSource+0x1c>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e0b6      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x18a>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a50:	d03e      	beq.n	8008ad0 <HAL_TIM_ConfigClockSource+0xd8>
 8008a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a56:	f200 8087 	bhi.w	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5e:	f000 8086 	beq.w	8008b6e <HAL_TIM_ConfigClockSource+0x176>
 8008a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a66:	d87f      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a68:	2b70      	cmp	r3, #112	; 0x70
 8008a6a:	d01a      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0xaa>
 8008a6c:	2b70      	cmp	r3, #112	; 0x70
 8008a6e:	d87b      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a70:	2b60      	cmp	r3, #96	; 0x60
 8008a72:	d050      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x11e>
 8008a74:	2b60      	cmp	r3, #96	; 0x60
 8008a76:	d877      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a78:	2b50      	cmp	r3, #80	; 0x50
 8008a7a:	d03c      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0xfe>
 8008a7c:	2b50      	cmp	r3, #80	; 0x50
 8008a7e:	d873      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a80:	2b40      	cmp	r3, #64	; 0x40
 8008a82:	d058      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x13e>
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d86f      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a88:	2b30      	cmp	r3, #48	; 0x30
 8008a8a:	d064      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15e>
 8008a8c:	2b30      	cmp	r3, #48	; 0x30
 8008a8e:	d86b      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d060      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15e>
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d867      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d05c      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15e>
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d05a      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15e>
 8008aa0:	e062      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6899      	ldr	r1, [r3, #8]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f000 fcab 	bl	800940c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	609a      	str	r2, [r3, #8]
      break;
 8008ace:	e04f      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6899      	ldr	r1, [r3, #8]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f000 fc94 	bl	800940c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008af2:	609a      	str	r2, [r3, #8]
      break;
 8008af4:	e03c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 fc08 	bl	8009318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2150      	movs	r1, #80	; 0x50
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fc61 	bl	80093d6 <TIM_ITRx_SetConfig>
      break;
 8008b14:	e02c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fc27 	bl	8009376 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2160      	movs	r1, #96	; 0x60
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fc51 	bl	80093d6 <TIM_ITRx_SetConfig>
      break;
 8008b34:	e01c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 fbe8 	bl	8009318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2140      	movs	r1, #64	; 0x40
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fc41 	bl	80093d6 <TIM_ITRx_SetConfig>
      break;
 8008b54:	e00c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f000 fc38 	bl	80093d6 <TIM_ITRx_SetConfig>
      break;
 8008b66:	e003      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6c:	e000      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d107      	bne.n	8008bda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bd8:	e02a      	b.n	8008c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d107      	bne.n	8008bf4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2202      	movs	r2, #2
 8008be8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bf2:	e01d      	b.n	8008c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d107      	bne.n	8008c0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2204      	movs	r2, #4
 8008c02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c0c:	e010      	b.n	8008c30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d107      	bne.n	8008c28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c26:	e003      	b.n	8008c30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff ffb4 	bl	8008b9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	771a      	strb	r2, [r3, #28]
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d10b      	bne.n	8008c74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d136      	bne.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c72:	e031      	b.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d10b      	bne.n	8008c96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2202      	movs	r2, #2
 8008c82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d125      	bne.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c94:	e020      	b.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d10b      	bne.n	8008cb8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d114      	bne.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb6:	e00f      	b.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d10a      	bne.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 fffb 	bl	800acd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d103      	bne.n	8008d0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	771a      	strb	r2, [r3, #28]
 8008d0a:	e019      	b.n	8008d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d103      	bne.n	8008d1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	771a      	strb	r2, [r3, #28]
 8008d1c:	e010      	b.n	8008d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d103      	bne.n	8008d30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	771a      	strb	r2, [r3, #28]
 8008d2e:	e007      	b.n	8008d40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d102      	bne.n	8008d40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff ff22 	bl	8008b8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a2a      	ldr	r2, [pc, #168]	; (8008e10 <TIM_Base_SetConfig+0xbc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d003      	beq.n	8008d74 <TIM_Base_SetConfig+0x20>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d72:	d108      	bne.n	8008d86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a21      	ldr	r2, [pc, #132]	; (8008e10 <TIM_Base_SetConfig+0xbc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00b      	beq.n	8008da6 <TIM_Base_SetConfig+0x52>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d94:	d007      	beq.n	8008da6 <TIM_Base_SetConfig+0x52>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <TIM_Base_SetConfig+0xc0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d003      	beq.n	8008da6 <TIM_Base_SetConfig+0x52>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a1d      	ldr	r2, [pc, #116]	; (8008e18 <TIM_Base_SetConfig+0xc4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d108      	bne.n	8008db8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a0c      	ldr	r2, [pc, #48]	; (8008e10 <TIM_Base_SetConfig+0xbc>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d007      	beq.n	8008df4 <TIM_Base_SetConfig+0xa0>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a0b      	ldr	r2, [pc, #44]	; (8008e14 <TIM_Base_SetConfig+0xc0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_Base_SetConfig+0xa0>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <TIM_Base_SetConfig+0xc4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d103      	bne.n	8008dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	615a      	str	r2, [r3, #20]
}
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40014000 	.word	0x40014000
 8008e18:	40014400 	.word	0x40014400

08008e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f023 0201 	bic.w	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 0302 	bic.w	r3, r3, #2
 8008e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a24      	ldr	r2, [pc, #144]	; (8008f08 <TIM_OC1_SetConfig+0xec>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d007      	beq.n	8008e8c <TIM_OC1_SetConfig+0x70>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a23      	ldr	r2, [pc, #140]	; (8008f0c <TIM_OC1_SetConfig+0xf0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_OC1_SetConfig+0x70>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a22      	ldr	r2, [pc, #136]	; (8008f10 <TIM_OC1_SetConfig+0xf4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d10c      	bne.n	8008ea6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f023 0308 	bic.w	r3, r3, #8
 8008e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f023 0304 	bic.w	r3, r3, #4
 8008ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a17      	ldr	r2, [pc, #92]	; (8008f08 <TIM_OC1_SetConfig+0xec>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d007      	beq.n	8008ebe <TIM_OC1_SetConfig+0xa2>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a16      	ldr	r2, [pc, #88]	; (8008f0c <TIM_OC1_SetConfig+0xf0>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d003      	beq.n	8008ebe <TIM_OC1_SetConfig+0xa2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <TIM_OC1_SetConfig+0xf4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d111      	bne.n	8008ee2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	621a      	str	r2, [r3, #32]
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	40012c00 	.word	0x40012c00
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400

08008f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f023 0210 	bic.w	r2, r3, #16
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f023 0320 	bic.w	r3, r3, #32
 8008f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a22      	ldr	r2, [pc, #136]	; (8008ffc <TIM_OC2_SetConfig+0xe8>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10d      	bne.n	8008f94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a19      	ldr	r2, [pc, #100]	; (8008ffc <TIM_OC2_SetConfig+0xe8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <TIM_OC2_SetConfig+0x98>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a18      	ldr	r2, [pc, #96]	; (8009000 <TIM_OC2_SetConfig+0xec>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_OC2_SetConfig+0x98>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a17      	ldr	r2, [pc, #92]	; (8009004 <TIM_OC2_SetConfig+0xf0>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d113      	bne.n	8008fd4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40012c00 	.word	0x40012c00
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400

08009008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a21      	ldr	r2, [pc, #132]	; (80090ec <TIM_OC3_SetConfig+0xe4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d10d      	bne.n	8009086 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a18      	ldr	r2, [pc, #96]	; (80090ec <TIM_OC3_SetConfig+0xe4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d007      	beq.n	800909e <TIM_OC3_SetConfig+0x96>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a17      	ldr	r2, [pc, #92]	; (80090f0 <TIM_OC3_SetConfig+0xe8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d003      	beq.n	800909e <TIM_OC3_SetConfig+0x96>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a16      	ldr	r2, [pc, #88]	; (80090f4 <TIM_OC3_SetConfig+0xec>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d113      	bne.n	80090c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	011b      	lsls	r3, r3, #4
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	621a      	str	r2, [r3, #32]
}
 80090e0:	bf00      	nop
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40014000 	.word	0x40014000
 80090f4:	40014400 	.word	0x40014400

080090f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	031b      	lsls	r3, r3, #12
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4313      	orrs	r3, r2
 8009152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a14      	ldr	r2, [pc, #80]	; (80091a8 <TIM_OC4_SetConfig+0xb0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_OC4_SetConfig+0x74>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a13      	ldr	r2, [pc, #76]	; (80091ac <TIM_OC4_SetConfig+0xb4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_OC4_SetConfig+0x74>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <TIM_OC4_SetConfig+0xb8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d109      	bne.n	8009180 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	019b      	lsls	r3, r3, #6
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40014000 	.word	0x40014000
 80091b0:	40014400 	.word	0x40014400

080091b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	041b      	lsls	r3, r3, #16
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <TIM_OC5_SetConfig+0xa4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d007      	beq.n	800921e <TIM_OC5_SetConfig+0x6a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a12      	ldr	r2, [pc, #72]	; (800925c <TIM_OC5_SetConfig+0xa8>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_OC5_SetConfig+0x6a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a11      	ldr	r2, [pc, #68]	; (8009260 <TIM_OC5_SetConfig+0xac>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d109      	bne.n	8009232 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	621a      	str	r2, [r3, #32]
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	40012c00 	.word	0x40012c00
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400

08009264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a14      	ldr	r2, [pc, #80]	; (800930c <TIM_OC6_SetConfig+0xa8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d007      	beq.n	80092d0 <TIM_OC6_SetConfig+0x6c>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a13      	ldr	r2, [pc, #76]	; (8009310 <TIM_OC6_SetConfig+0xac>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d003      	beq.n	80092d0 <TIM_OC6_SetConfig+0x6c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a12      	ldr	r2, [pc, #72]	; (8009314 <TIM_OC6_SetConfig+0xb0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d109      	bne.n	80092e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	029b      	lsls	r3, r3, #10
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	621a      	str	r2, [r3, #32]
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40012c00 	.word	0x40012c00
 8009310:	40014000 	.word	0x40014000
 8009314:	40014400 	.word	0x40014400

08009318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f023 0201 	bic.w	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f023 030a 	bic.w	r3, r3, #10
 8009354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	621a      	str	r2, [r3, #32]
}
 800936a:	bf00      	nop
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009376:	b480      	push	{r7}
 8009378:	b087      	sub	sp, #28
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f023 0210 	bic.w	r2, r3, #16
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	031b      	lsls	r3, r3, #12
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	011b      	lsls	r3, r3, #4
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	621a      	str	r2, [r3, #32]
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f043 0307 	orr.w	r3, r3, #7
 80093f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	609a      	str	r2, [r3, #8]
}
 8009400:	bf00      	nop
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	431a      	orrs	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4313      	orrs	r3, r2
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	609a      	str	r2, [r3, #8]
}
 8009440:	bf00      	nop
 8009442:	371c      	adds	r7, #28
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	2201      	movs	r2, #1
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1a      	ldr	r2, [r3, #32]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	43db      	mvns	r3, r3
 800946e:	401a      	ands	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a1a      	ldr	r2, [r3, #32]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f003 031f 	and.w	r3, r3, #31
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	fa01 f303 	lsl.w	r3, r1, r3
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	621a      	str	r2, [r3, #32]
}
 800948a:	bf00      	nop
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
	...

08009498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e04f      	b.n	8009550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a21      	ldr	r2, [pc, #132]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d108      	bne.n	80094ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a14      	ldr	r2, [pc, #80]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d009      	beq.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009518:	d004      	beq.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a10      	ldr	r2, [pc, #64]	; (8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d10c      	bne.n	800953e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800952a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	4313      	orrs	r3, r2
 8009534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40014000 	.word	0x40014000

08009564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800957c:	2302      	movs	r3, #2
 800957e:	e060      	b.n	8009642 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a14      	ldr	r2, [pc, #80]	; (8009650 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d115      	bne.n	8009630 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	051b      	lsls	r3, r3, #20
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	40012c00 	.word	0x40012c00

08009654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e040      	b.n	80096e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f873 	bl	8009762 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2224      	movs	r2, #36	; 0x24
 8009680:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0201 	bic.w	r2, r2, #1
 8009690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f87a 	bl	800978c <UART_SetConfig>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e022      	b.n	80096e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fac8 	bl	8009c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0201 	orr.w	r2, r2, #1
 80096de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb4f 	bl	8009d84 <UART_CheckIdleState>
 80096e6:	4603      	mov	r3, r0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e02b      	b.n	800975a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2224      	movs	r2, #36	; 0x24
 8009706:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0201 	bic.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2200      	movs	r2, #0
 8009726:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2200      	movs	r2, #0
 800972e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f820 	bl	8009776 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009790:	b08a      	sub	sp, #40	; 0x28
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b9e      	ldr	r3, [pc, #632]	; (8009a34 <UART_SetConfig+0x2a8>)
 80097bc:	4013      	ands	r3, r2
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097c4:	430b      	orrs	r3, r1
 80097c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a93      	ldr	r2, [pc, #588]	; (8009a38 <UART_SetConfig+0x2ac>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f4:	4313      	orrs	r3, r2
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	430a      	orrs	r2, r1
 800980a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a8a      	ldr	r2, [pc, #552]	; (8009a3c <UART_SetConfig+0x2b0>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d126      	bne.n	8009864 <UART_SetConfig+0xd8>
 8009816:	4b8a      	ldr	r3, [pc, #552]	; (8009a40 <UART_SetConfig+0x2b4>)
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	2b03      	cmp	r3, #3
 8009822:	d81b      	bhi.n	800985c <UART_SetConfig+0xd0>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <UART_SetConfig+0xa0>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	0800983d 	.word	0x0800983d
 8009830:	0800984d 	.word	0x0800984d
 8009834:	08009845 	.word	0x08009845
 8009838:	08009855 	.word	0x08009855
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009842:	e0ab      	b.n	800999c <UART_SetConfig+0x210>
 8009844:	2302      	movs	r3, #2
 8009846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800984a:	e0a7      	b.n	800999c <UART_SetConfig+0x210>
 800984c:	2304      	movs	r3, #4
 800984e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009852:	e0a3      	b.n	800999c <UART_SetConfig+0x210>
 8009854:	2308      	movs	r3, #8
 8009856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800985a:	e09f      	b.n	800999c <UART_SetConfig+0x210>
 800985c:	2310      	movs	r3, #16
 800985e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009862:	e09b      	b.n	800999c <UART_SetConfig+0x210>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a76      	ldr	r2, [pc, #472]	; (8009a44 <UART_SetConfig+0x2b8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d138      	bne.n	80098e0 <UART_SetConfig+0x154>
 800986e:	4b74      	ldr	r3, [pc, #464]	; (8009a40 <UART_SetConfig+0x2b4>)
 8009870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009874:	f003 030c 	and.w	r3, r3, #12
 8009878:	2b0c      	cmp	r3, #12
 800987a:	d82d      	bhi.n	80098d8 <UART_SetConfig+0x14c>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <UART_SetConfig+0xf8>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098b9 	.word	0x080098b9
 8009888:	080098d9 	.word	0x080098d9
 800988c:	080098d9 	.word	0x080098d9
 8009890:	080098d9 	.word	0x080098d9
 8009894:	080098c9 	.word	0x080098c9
 8009898:	080098d9 	.word	0x080098d9
 800989c:	080098d9 	.word	0x080098d9
 80098a0:	080098d9 	.word	0x080098d9
 80098a4:	080098c1 	.word	0x080098c1
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	080098d9 	.word	0x080098d9
 80098b0:	080098d9 	.word	0x080098d9
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	2300      	movs	r3, #0
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098be:	e06d      	b.n	800999c <UART_SetConfig+0x210>
 80098c0:	2302      	movs	r3, #2
 80098c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098c6:	e069      	b.n	800999c <UART_SetConfig+0x210>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ce:	e065      	b.n	800999c <UART_SetConfig+0x210>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098d6:	e061      	b.n	800999c <UART_SetConfig+0x210>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098de:	e05d      	b.n	800999c <UART_SetConfig+0x210>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a58      	ldr	r2, [pc, #352]	; (8009a48 <UART_SetConfig+0x2bc>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d125      	bne.n	8009936 <UART_SetConfig+0x1aa>
 80098ea:	4b55      	ldr	r3, [pc, #340]	; (8009a40 <UART_SetConfig+0x2b4>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098f4:	2b30      	cmp	r3, #48	; 0x30
 80098f6:	d016      	beq.n	8009926 <UART_SetConfig+0x19a>
 80098f8:	2b30      	cmp	r3, #48	; 0x30
 80098fa:	d818      	bhi.n	800992e <UART_SetConfig+0x1a2>
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d00a      	beq.n	8009916 <UART_SetConfig+0x18a>
 8009900:	2b20      	cmp	r3, #32
 8009902:	d814      	bhi.n	800992e <UART_SetConfig+0x1a2>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <UART_SetConfig+0x182>
 8009908:	2b10      	cmp	r3, #16
 800990a:	d008      	beq.n	800991e <UART_SetConfig+0x192>
 800990c:	e00f      	b.n	800992e <UART_SetConfig+0x1a2>
 800990e:	2300      	movs	r3, #0
 8009910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009914:	e042      	b.n	800999c <UART_SetConfig+0x210>
 8009916:	2302      	movs	r3, #2
 8009918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991c:	e03e      	b.n	800999c <UART_SetConfig+0x210>
 800991e:	2304      	movs	r3, #4
 8009920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009924:	e03a      	b.n	800999c <UART_SetConfig+0x210>
 8009926:	2308      	movs	r3, #8
 8009928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992c:	e036      	b.n	800999c <UART_SetConfig+0x210>
 800992e:	2310      	movs	r3, #16
 8009930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009934:	e032      	b.n	800999c <UART_SetConfig+0x210>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3f      	ldr	r2, [pc, #252]	; (8009a38 <UART_SetConfig+0x2ac>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d12a      	bne.n	8009996 <UART_SetConfig+0x20a>
 8009940:	4b3f      	ldr	r3, [pc, #252]	; (8009a40 <UART_SetConfig+0x2b4>)
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800994a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800994e:	d01a      	beq.n	8009986 <UART_SetConfig+0x1fa>
 8009950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009954:	d81b      	bhi.n	800998e <UART_SetConfig+0x202>
 8009956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800995a:	d00c      	beq.n	8009976 <UART_SetConfig+0x1ea>
 800995c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009960:	d815      	bhi.n	800998e <UART_SetConfig+0x202>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <UART_SetConfig+0x1e2>
 8009966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996a:	d008      	beq.n	800997e <UART_SetConfig+0x1f2>
 800996c:	e00f      	b.n	800998e <UART_SetConfig+0x202>
 800996e:	2300      	movs	r3, #0
 8009970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009974:	e012      	b.n	800999c <UART_SetConfig+0x210>
 8009976:	2302      	movs	r3, #2
 8009978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800997c:	e00e      	b.n	800999c <UART_SetConfig+0x210>
 800997e:	2304      	movs	r3, #4
 8009980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009984:	e00a      	b.n	800999c <UART_SetConfig+0x210>
 8009986:	2308      	movs	r3, #8
 8009988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998c:	e006      	b.n	800999c <UART_SetConfig+0x210>
 800998e:	2310      	movs	r3, #16
 8009990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009994:	e002      	b.n	800999c <UART_SetConfig+0x210>
 8009996:	2310      	movs	r3, #16
 8009998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a25      	ldr	r2, [pc, #148]	; (8009a38 <UART_SetConfig+0x2ac>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	f040 808a 	bne.w	8009abc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d824      	bhi.n	80099fa <UART_SetConfig+0x26e>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <UART_SetConfig+0x22c>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	080099fb 	.word	0x080099fb
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099fb 	.word	0x080099fb
 80099c8:	080099eb 	.word	0x080099eb
 80099cc:	080099fb 	.word	0x080099fb
 80099d0:	080099fb 	.word	0x080099fb
 80099d4:	080099fb 	.word	0x080099fb
 80099d8:	080099f3 	.word	0x080099f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099dc:	f7fd fe14 	bl	8007608 <HAL_RCC_GetPCLK1Freq>
 80099e0:	61f8      	str	r0, [r7, #28]
        break;
 80099e2:	e010      	b.n	8009a06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e4:	4b19      	ldr	r3, [pc, #100]	; (8009a4c <UART_SetConfig+0x2c0>)
 80099e6:	61fb      	str	r3, [r7, #28]
        break;
 80099e8:	e00d      	b.n	8009a06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ea:	f7fd fd75 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 80099ee:	61f8      	str	r0, [r7, #28]
        break;
 80099f0:	e009      	b.n	8009a06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f6:	61fb      	str	r3, [r7, #28]
        break;
 80099f8:	e005      	b.n	8009a06 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8109 	beq.w	8009c20 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4413      	add	r3, r2
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d305      	bcc.n	8009a2a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d912      	bls.n	8009a50 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a30:	e0f6      	b.n	8009c20 <UART_SetConfig+0x494>
 8009a32:	bf00      	nop
 8009a34:	efff69f3 	.word	0xefff69f3
 8009a38:	40008000 	.word	0x40008000
 8009a3c:	40013800 	.word	0x40013800
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40004400 	.word	0x40004400
 8009a48:	40004800 	.word	0x40004800
 8009a4c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	2200      	movs	r2, #0
 8009a54:	461c      	mov	r4, r3
 8009a56:	4615      	mov	r5, r2
 8009a58:	f04f 0200 	mov.w	r2, #0
 8009a5c:	f04f 0300 	mov.w	r3, #0
 8009a60:	022b      	lsls	r3, r5, #8
 8009a62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009a66:	0222      	lsls	r2, r4, #8
 8009a68:	68f9      	ldr	r1, [r7, #12]
 8009a6a:	6849      	ldr	r1, [r1, #4]
 8009a6c:	0849      	lsrs	r1, r1, #1
 8009a6e:	2000      	movs	r0, #0
 8009a70:	4688      	mov	r8, r1
 8009a72:	4681      	mov	r9, r0
 8009a74:	eb12 0a08 	adds.w	sl, r2, r8
 8009a78:	eb43 0b09 	adc.w	fp, r3, r9
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	607a      	str	r2, [r7, #4]
 8009a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	f7f7 f82d 	bl	8000aec <__aeabi_uldivmod>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4613      	mov	r3, r2
 8009a98:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa0:	d308      	bcc.n	8009ab4 <UART_SetConfig+0x328>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa8:	d204      	bcs.n	8009ab4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	e0b5      	b.n	8009c20 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009aba:	e0b1      	b.n	8009c20 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac4:	d15d      	bne.n	8009b82 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009aca:	2b08      	cmp	r3, #8
 8009acc:	d827      	bhi.n	8009b1e <UART_SetConfig+0x392>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0x348>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b0f 	.word	0x08009b0f
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b1f 	.word	0x08009b1f
 8009af0:	08009b1f 	.word	0x08009b1f
 8009af4:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af8:	f7fd fd86 	bl	8007608 <HAL_RCC_GetPCLK1Freq>
 8009afc:	61f8      	str	r0, [r7, #28]
        break;
 8009afe:	e014      	b.n	8009b2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fd fd98 	bl	8007634 <HAL_RCC_GetPCLK2Freq>
 8009b04:	61f8      	str	r0, [r7, #28]
        break;
 8009b06:	e010      	b.n	8009b2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b4c      	ldr	r3, [pc, #304]	; (8009c3c <UART_SetConfig+0x4b0>)
 8009b0a:	61fb      	str	r3, [r7, #28]
        break;
 8009b0c:	e00d      	b.n	8009b2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fd fce3 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8009b12:	61f8      	str	r0, [r7, #28]
        break;
 8009b14:	e009      	b.n	8009b2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b1a:	61fb      	str	r3, [r7, #28]
        break;
 8009b1c:	e005      	b.n	8009b2a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d077      	beq.n	8009c20 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	005a      	lsls	r2, r3, #1
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2b0f      	cmp	r3, #15
 8009b4a:	d916      	bls.n	8009b7a <UART_SetConfig+0x3ee>
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b52:	d212      	bcs.n	8009b7a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f023 030f 	bic.w	r3, r3, #15
 8009b5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f003 0307 	and.w	r3, r3, #7
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	8afb      	ldrh	r3, [r7, #22]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	8afa      	ldrh	r2, [r7, #22]
 8009b76:	60da      	str	r2, [r3, #12]
 8009b78:	e052      	b.n	8009c20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b80:	e04e      	b.n	8009c20 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d827      	bhi.n	8009bda <UART_SetConfig+0x44e>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x404>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bc5 	.word	0x08009bc5
 8009b9c:	08009bdb 	.word	0x08009bdb
 8009ba0:	08009bcb 	.word	0x08009bcb
 8009ba4:	08009bdb 	.word	0x08009bdb
 8009ba8:	08009bdb 	.word	0x08009bdb
 8009bac:	08009bdb 	.word	0x08009bdb
 8009bb0:	08009bd3 	.word	0x08009bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fd fd28 	bl	8007608 <HAL_RCC_GetPCLK1Freq>
 8009bb8:	61f8      	str	r0, [r7, #28]
        break;
 8009bba:	e014      	b.n	8009be6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bbc:	f7fd fd3a 	bl	8007634 <HAL_RCC_GetPCLK2Freq>
 8009bc0:	61f8      	str	r0, [r7, #28]
        break;
 8009bc2:	e010      	b.n	8009be6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc4:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <UART_SetConfig+0x4b0>)
 8009bc6:	61fb      	str	r3, [r7, #28]
        break;
 8009bc8:	e00d      	b.n	8009be6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bca:	f7fd fc85 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8009bce:	61f8      	str	r0, [r7, #28]
        break;
 8009bd0:	e009      	b.n	8009be6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd6:	61fb      	str	r3, [r7, #28]
        break;
 8009bd8:	e005      	b.n	8009be6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009be4:	bf00      	nop
    }

    if (pclk != 0U)
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d019      	beq.n	8009c20 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	085a      	lsrs	r2, r3, #1
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b0f      	cmp	r3, #15
 8009c04:	d909      	bls.n	8009c1a <UART_SetConfig+0x48e>
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0c:	d205      	bcs.n	8009c1a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60da      	str	r2, [r3, #12]
 8009c18:	e002      	b.n	8009c20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	; 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c3a:	bf00      	nop
 8009c3c:	00f42400 	.word	0x00f42400

08009c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	f003 0308 	and.w	r3, r3, #8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01a      	beq.n	8009d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d3e:	d10a      	bne.n	8009d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d94:	f7fb fd6e 	bl	8005874 <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d10e      	bne.n	8009dc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f82d 	bl	8009e16 <UART_WaitOnFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e023      	b.n	8009e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d10e      	bne.n	8009df2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f817 	bl	8009e16 <UART_WaitOnFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e00d      	b.n	8009e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b09c      	sub	sp, #112	; 0x70
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	603b      	str	r3, [r7, #0]
 8009e22:	4613      	mov	r3, r2
 8009e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e26:	e0a5      	b.n	8009f74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2e:	f000 80a1 	beq.w	8009f74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e32:	f7fb fd1f 	bl	8005874 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d302      	bcc.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d13e      	bne.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e6      	bne.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3308      	adds	r3, #8
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	f023 0301 	bic.w	r3, r3, #1
 8009e90:	663b      	str	r3, [r7, #96]	; 0x60
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e5      	bne.n	8009e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e067      	b.n	8009f96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d04f      	beq.n	8009f74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ee2:	d147      	bne.n	8009f74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e6      	bne.n	8009eee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3308      	adds	r3, #8
 8009f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f40:	623a      	str	r2, [r7, #32]
 8009f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	69f9      	ldr	r1, [r7, #28]
 8009f46:	6a3a      	ldr	r2, [r7, #32]
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e010      	b.n	8009f96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69da      	ldr	r2, [r3, #28]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	bf0c      	ite	eq
 8009f84:	2301      	moveq	r3, #1
 8009f86:	2300      	movne	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	f43f af4a 	beq.w	8009e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3770      	adds	r7, #112	; 0x70
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8009fa4:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fa6:	4a11      	ldr	r2, [pc, #68]	; (8009fec <board_init_common_rtc_init+0x4c>)
 8009fa8:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fb2:	227f      	movs	r2, #127	; 0x7f
 8009fb4:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fb8:	22ff      	movs	r2, #255	; 0xff
 8009fba:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009fc2:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8009fd4:	4804      	ldr	r0, [pc, #16]	; (8009fe8 <board_init_common_rtc_init+0x48>)
 8009fd6:	f7fd fead 	bl	8007d34 <HAL_RTC_Init>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <board_init_common_rtc_init+0x44>
 8009fe0:	f000 fa4b 	bl	800a47a <Error_Handler>
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20002048 	.word	0x20002048
 8009fec:	40002800 	.word	0x40002800

08009ff0 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b0ae      	sub	sp, #184	; 0xb8
 8009ff4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009ffa:	2244      	movs	r2, #68	; 0x44
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 fa44 	bl	800b48c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a004:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	609a      	str	r2, [r3, #8]
 800a010:	60da      	str	r2, [r3, #12]
 800a012:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a014:	1d3b      	adds	r3, r7, #4
 800a016:	225c      	movs	r2, #92	; 0x5c
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fa36 	bl	800b48c <memset>

    HAL_PWR_EnableBkUpAccess();
 800a020:	f7fc fc62 	bl	80068e8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <SystemClock_Config+0xcc>)
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a02a:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <SystemClock_Config+0xcc>)
 800a02c:	f023 0318 	bic.w	r3, r3, #24
 800a030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a034:	2305      	movs	r3, #5
 800a036:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a03c:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a03e:	2301      	movs	r3, #1
 800a040:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a042:	2300      	movs	r3, #0
 800a044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800a048:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fc fd2f 	bl	8006ab0 <HAL_RCC_OscConfig>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d000      	beq.n	800a05a <SystemClock_Config+0x6a>
 800a058:	e7fe      	b.n	800a058 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a05a:	230f      	movs	r3, #15
 800a05c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800a05e:	2302      	movs	r3, #2
 800a060:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a062:	2300      	movs	r3, #0
 800a064:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a066:	2300      	movs	r3, #0
 800a068:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a06a:	2300      	movs	r3, #0
 800a06c:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800a06e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a072:	2102      	movs	r1, #2
 800a074:	4618      	mov	r0, r3
 800a076:	f7fd f92f 	bl	80072d8 <HAL_RCC_ClockConfig>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d000      	beq.n	800a082 <SystemClock_Config+0x92>
 800a080:	e7fe      	b.n	800a080 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a086:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a08c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800a08e:	1d3b      	adds	r3, r7, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fb45 	bl	8007720 <HAL_RCCEx_PeriphCLKConfig>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <SystemClock_Config+0xb0>
 800a09c:	f000 f9ed 	bl	800a47a <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 800a0a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a0a4:	f7fc fcae 	bl	8006a04 <HAL_PWREx_ControlVoltageScaling>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <SystemClock_Config+0xc2>
 800a0ae:	f000 f9e4 	bl	800a47a <Error_Handler>
}
 800a0b2:	bf00      	nop
 800a0b4:	37b8      	adds	r7, #184	; 0xb8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	40021000 	.word	0x40021000

0800a0c0 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b09e      	sub	sp, #120	; 0x78
 800a0c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	605a      	str	r2, [r3, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
 800a0d2:	60da      	str	r2, [r3, #12]
 800a0d4:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	605a      	str	r2, [r3, #4]
 800a0e0:	609a      	str	r2, [r3, #8]
 800a0e2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	605a      	str	r2, [r3, #4]
 800a0ee:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800a0f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	605a      	str	r2, [r3, #4]
 800a0fa:	609a      	str	r2, [r3, #8]
 800a0fc:	60da      	str	r2, [r3, #12]
 800a0fe:	611a      	str	r2, [r3, #16]
 800a100:	615a      	str	r2, [r3, #20]
 800a102:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a104:	463b      	mov	r3, r7
 800a106:	222c      	movs	r2, #44	; 0x2c
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 f9be 	bl	800b48c <memset>
    g_tim1_handle.Instance = TIM1;
 800a110:	4b5c      	ldr	r3, [pc, #368]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a112:	4a5d      	ldr	r2, [pc, #372]	; (800a288 <board_init_common_timer_init+0x1c8>)
 800a114:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800a116:	4b5b      	ldr	r3, [pc, #364]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a118:	2200      	movs	r2, #0
 800a11a:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a11c:	4b59      	ldr	r3, [pc, #356]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a11e:	2200      	movs	r2, #0
 800a120:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800a122:	4b58      	ldr	r3, [pc, #352]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a124:	223b      	movs	r2, #59	; 0x3b
 800a126:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a128:	4b56      	ldr	r3, [pc, #344]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800a12e:	4b55      	ldr	r3, [pc, #340]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a130:	2200      	movs	r2, #0
 800a132:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a134:	4b53      	ldr	r3, [pc, #332]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a136:	2200      	movs	r2, #0
 800a138:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a13a:	4852      	ldr	r0, [pc, #328]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a13c:	f7fd ffb9 	bl	80080b2 <HAL_TIM_Base_Init>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <board_init_common_timer_init+0x8a>
 800a146:	f000 f998 	bl	800a47a <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a14a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a14e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800a150:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a154:	4619      	mov	r1, r3
 800a156:	484b      	ldr	r0, [pc, #300]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a158:	f7fe fc4e 	bl	80089f8 <HAL_TIM_ConfigClockSource>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <board_init_common_timer_init+0xa6>
 800a162:	f000 f98a 	bl	800a47a <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a166:	4847      	ldr	r0, [pc, #284]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a168:	f7fd fffa 	bl	8008160 <HAL_TIM_PWM_Init>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <board_init_common_timer_init+0xb6>
 800a172:	f000 f982 	bl	800a47a <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a176:	2300      	movs	r3, #0
 800a178:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a17a:	2300      	movs	r3, #0
 800a17c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a17e:	2300      	movs	r3, #0
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a182:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a186:	4619      	mov	r1, r3
 800a188:	483e      	ldr	r0, [pc, #248]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a18a:	f7ff f985 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <board_init_common_timer_init+0xd8>
 800a194:	f000 f971 	bl	800a47a <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a198:	2360      	movs	r3, #96	; 0x60
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a1b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4831      	ldr	r0, [pc, #196]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a1be:	f7fe fb07 	bl	80087d0 <HAL_TIM_PWM_ConfigChannel>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <board_init_common_timer_init+0x10c>
 800a1c8:	f000 f957 	bl	800a47a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a1cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	482b      	ldr	r0, [pc, #172]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a1d6:	f7fe fafb 	bl	80087d0 <HAL_TIM_PWM_ConfigChannel>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <board_init_common_timer_init+0x124>
 800a1e0:	f000 f94b 	bl	800a47a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a1e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4825      	ldr	r0, [pc, #148]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a1ee:	f7fe faef 	bl	80087d0 <HAL_TIM_PWM_ConfigChannel>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <board_init_common_timer_init+0x13c>
 800a1f8:	f000 f93f 	bl	800a47a <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a200:	2300      	movs	r3, #0
 800a202:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a214:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a216:	2300      	movs	r3, #0
 800a218:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a21e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a222:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a228:	2300      	movs	r3, #0
 800a22a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a22c:	463b      	mov	r3, r7
 800a22e:	4619      	mov	r1, r3
 800a230:	4814      	ldr	r0, [pc, #80]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a232:	f7ff f997 	bl	8009564 <HAL_TIMEx_ConfigBreakDeadTime>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <board_init_common_timer_init+0x180>
 800a23c:	f000 f91d 	bl	800a47a <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a240:	2100      	movs	r1, #0
 800a242:	4810      	ldr	r0, [pc, #64]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a244:	f7fe f9dc 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a248:	2104      	movs	r1, #4
 800a24a:	480e      	ldr	r0, [pc, #56]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a24c:	f7fe f9d8 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a250:	2108      	movs	r1, #8
 800a252:	480c      	ldr	r0, [pc, #48]	; (800a284 <board_init_common_timer_init+0x1c4>)
 800a254:	f7fe f9d4 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 800a258:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a25c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a25e:	2302      	movs	r3, #2
 800a260:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a262:	2300      	movs	r3, #0
 800a264:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a266:	2300      	movs	r3, #0
 800a268:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a26a:	2301      	movs	r3, #1
 800a26c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a26e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a272:	4619      	mov	r1, r3
 800a274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a278:	f7fc f98c 	bl	8006594 <HAL_GPIO_Init>
}
 800a27c:	bf00      	nop
 800a27e:	3778      	adds	r7, #120	; 0x78
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	2000206c 	.word	0x2000206c
 800a288:	40012c00 	.word	0x40012c00

0800a28c <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a290:	4b30      	ldr	r3, [pc, #192]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a292:	2206      	movs	r2, #6
 800a294:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a298:	2208      	movs	r2, #8
 800a29a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a29c:	4b2d      	ldr	r3, [pc, #180]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a29e:	2217      	movs	r2, #23
 800a2a0:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a2a2:	4b2c      	ldr	r3, [pc, #176]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a2a4:	2228      	movs	r2, #40	; 0x28
 800a2a6:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2118      	movs	r1, #24
 800a2ac:	2006      	movs	r0, #6
 800a2ae:	f7fb fc34 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a2b2:	2006      	movs	r0, #6
 800a2b4:	f7fb fc4d 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2118      	movs	r1, #24
 800a2bc:	2008      	movs	r0, #8
 800a2be:	f7fb fc2c 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800a2c2:	2008      	movs	r0, #8
 800a2c4:	f7fb fc45 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2118      	movs	r1, #24
 800a2cc:	2017      	movs	r0, #23
 800a2ce:	f7fb fc24 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a2d2:	2017      	movs	r0, #23
 800a2d4:	f7fb fc3d 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2118      	movs	r1, #24
 800a2dc:	2028      	movs	r0, #40	; 0x28
 800a2de:	f7fb fc1c 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a2e2:	2028      	movs	r0, #40	; 0x28
 800a2e4:	f7fb fc35 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a2ea:	2206      	movs	r2, #6
 800a2ec:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a2ee:	4b19      	ldr	r3, [pc, #100]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a2f4:	4b17      	ldr	r3, [pc, #92]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a2f6:	2217      	movs	r2, #23
 800a2f8:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a2fa:	4b16      	ldr	r3, [pc, #88]	; (800a354 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a2fc:	2228      	movs	r2, #40	; 0x28
 800a2fe:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a300:	2200      	movs	r2, #0
 800a302:	2100      	movs	r1, #0
 800a304:	200c      	movs	r0, #12
 800a306:	f7fb fc08 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a30a:	200c      	movs	r0, #12
 800a30c:	f7fb fc21 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a310:	2200      	movs	r2, #0
 800a312:	2100      	movs	r1, #0
 800a314:	200d      	movs	r0, #13
 800a316:	f7fb fc00 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a31a:	200d      	movs	r0, #13
 800a31c:	f7fb fc19 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a320:	2200      	movs	r2, #0
 800a322:	2100      	movs	r1, #0
 800a324:	200f      	movs	r0, #15
 800a326:	f7fb fbf8 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a32a:	200f      	movs	r0, #15
 800a32c:	f7fb fc11 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a330:	2200      	movs	r2, #0
 800a332:	2100      	movs	r1, #0
 800a334:	2010      	movs	r0, #16
 800a336:	f7fb fbf0 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a33a:	2010      	movs	r0, #16
 800a33c:	f7fb fc09 	bl	8005b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a340:	2200      	movs	r2, #0
 800a342:	2100      	movs	r1, #0
 800a344:	2011      	movs	r0, #17
 800a346:	f7fb fbe8 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a34a:	2011      	movs	r0, #17
 800a34c:	f7fb fc01 	bl	8005b52 <HAL_NVIC_EnableIRQ>
}
 800a350:	bf00      	nop
 800a352:	bd80      	pop	{r7, pc}
 800a354:	40010400 	.word	0x40010400

0800a358 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35e:	1d3b      	adds	r3, r7, #4
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 800a36c:	2305      	movs	r3, #5
 800a36e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a370:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a374:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a376:	2301      	movs	r3, #1
 800a378:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a37a:	1d3b      	adds	r3, r7, #4
 800a37c:	4619      	mov	r1, r3
 800a37e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a382:	f7fc f907 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800a386:	f242 0320 	movw	r3, #8224	; 0x2020
 800a38a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a38c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a390:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a392:	2301      	movs	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a396:	1d3b      	adds	r3, r7, #4
 800a398:	4619      	mov	r1, r3
 800a39a:	4804      	ldr	r0, [pc, #16]	; (800a3ac <board_init_common_setup_wakeups+0x54>)
 800a39c:	f7fc f8fa 	bl	8006594 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 800a3a0:	f7ff ff74 	bl	800a28c <board_init_common_nvic_setup_interrupts>
}
 800a3a4:	bf00      	nop
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	48000800 	.word	0x48000800

0800a3b0 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b6:	4b21      	ldr	r3, [pc, #132]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ba:	4a20      	ldr	r2, [pc, #128]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3ce:	4b1b      	ldr	r3, [pc, #108]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d2:	4a1a      	ldr	r2, [pc, #104]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3da:	4b18      	ldr	r3, [pc, #96]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	613b      	str	r3, [r7, #16]
 800a3e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3e6:	4b15      	ldr	r3, [pc, #84]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ea:	4a14      	ldr	r2, [pc, #80]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3ec:	f043 0304 	orr.w	r3, r3, #4
 800a3f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3f2:	4b12      	ldr	r3, [pc, #72]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f6:	f003 0304 	and.w	r3, r3, #4
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a402:	4a0e      	ldr	r2, [pc, #56]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a41a:	4a08      	ldr	r2, [pc, #32]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	6493      	str	r3, [r2, #72]	; 0x48
 800a422:	4b06      	ldr	r3, [pc, #24]	; (800a43c <board_init_port_wakeup+0x8c>)
 800a424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	607b      	str	r3, [r7, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40021000 	.word	0x40021000

0800a440 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
    srand(time(0));
 800a444:	2000      	movs	r0, #0
 800a446:	f001 f985 	bl	800b754 <time>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4613      	mov	r3, r2
 800a450:	4618      	mov	r0, r3
 800a452:	f001 f903 	bl	800b65c <srand>
    HAL_Init();
 800a456:	f7fb f9b9 	bl	80057cc <HAL_Init>
    SystemClock_Config();
 800a45a:	f7ff fdc9 	bl	8009ff0 <SystemClock_Config>

    board_init_port_wakeup();
 800a45e:	f7ff ffa7 	bl	800a3b0 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800a462:	f7ff ff79 	bl	800a358 <board_init_common_setup_wakeups>
    board_init_specific();
 800a466:	f000 f8a1 	bl	800a5ac <board_init_specific>

    board_init_common_timer_init();
 800a46a:	f7ff fe29 	bl	800a0c0 <board_init_common_timer_init>

    ws2812b_init();
 800a46e:	f7f7 fd17 	bl	8001ea0 <ws2812b_init>

    board_init_common_rtc_init();
 800a472:	f7ff fd95 	bl	8009fa0 <board_init_common_rtc_init>
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}

0800a47a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a47a:	b480      	push	{r7}
 800a47c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a47e:	b672      	cpsid	i
}
 800a480:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a482:	e7fe      	b.n	800a482 <Error_Handler+0x8>

0800a484 <spi_access_setup>:
    .Init.Mode              = SPI_MODE_MASTER
};


void spi_access_setup(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b09e      	sub	sp, #120	; 0x78
 800a488:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a48a:	f107 031c 	add.w	r3, r7, #28
 800a48e:	225c      	movs	r2, #92	; 0x5c
 800a490:	2100      	movs	r1, #0
 800a492:	4618      	mov	r0, r3
 800a494:	f000 fffa 	bl	800b48c <memset>
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin         = PIN_SPI1_SCK | PIN_SPI1_CIPO | PIN_SPI1_COPI;
 800a498:	f641 0302 	movw	r3, #6146	; 0x1802
 800a49c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate   = GPIO_AF5_SPI1;
 800a4aa:	2305      	movs	r3, #5
 800a4ac:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4b8:	f7fc f86c 	bl	8006594 <HAL_GPIO_Init>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a4bc:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <spi_access_setup+0x60>)
 800a4be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c0:	4a08      	ldr	r2, [pc, #32]	; (800a4e4 <spi_access_setup+0x60>)
 800a4c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4c6:	6613      	str	r3, [r2, #96]	; 0x60
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <spi_access_setup+0x60>)
 800a4ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4d0:	607b      	str	r3, [r7, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
    if(HAL_SPI_Init(&gh_disp_spi) != HAL_OK)
 800a4d4:	4804      	ldr	r0, [pc, #16]	; (800a4e8 <spi_access_setup+0x64>)
 800a4d6:	f7fd fd3f 	bl	8007f58 <HAL_SPI_Init>
    {
        /* Initialization Error */
        //Error_Handler();
    }
}
 800a4da:	bf00      	nop
 800a4dc:	3778      	adds	r7, #120	; 0x78
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40021000 	.word	0x40021000
 800a4e8:	200000d4 	.word	0x200000d4

0800a4ec <uart_access_setup>:
    .AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR
};


void uart_access_setup(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b09e      	sub	sp, #120	; 0x78
 800a4f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	225c      	movs	r2, #92	; 0x5c
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 ffc6 	bl	800b48c <memset>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a500:	2320      	movs	r3, #32
 800a502:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800a504:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a508:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd f906 	bl	8007720 <HAL_RCCEx_PeriphCLKConfig>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d000      	beq.n	800a51c <uart_access_setup+0x30>
    {
        while(1);
 800a51a:	e7fe      	b.n	800a51a <uart_access_setup+0x2e>
      //Error_Handler();
    }
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a51c:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <uart_access_setup+0xa4>)
 800a51e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a520:	4a1b      	ldr	r2, [pc, #108]	; (800a590 <uart_access_setup+0xa4>)
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a528:	4b19      	ldr	r3, [pc, #100]	; (800a590 <uart_access_setup+0xa4>)
 800a52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	607b      	str	r3, [r7, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a534:	4b16      	ldr	r3, [pc, #88]	; (800a590 <uart_access_setup+0xa4>)
 800a536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <uart_access_setup+0xa4>)
 800a53a:	f043 0304 	orr.w	r3, r3, #4
 800a53e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a540:	4b13      	ldr	r3, [pc, #76]	; (800a590 <uart_access_setup+0xa4>)
 800a542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin       = PIN_XR_RX | PIN_XR_TX; //
 800a54c:	2303      	movs	r3, #3
 800a54e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a550:	2302      	movs	r3, #2
 800a552:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a554:	2300      	movs	r3, #0
 800a556:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a558:	2300      	movs	r3, #0
 800a55a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a55c:	2308      	movs	r3, #8
 800a55e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a560:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a564:	4619      	mov	r1, r3
 800a566:	480b      	ldr	r0, [pc, #44]	; (800a594 <uart_access_setup+0xa8>)
 800a568:	f7fc f814 	bl	8006594 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 1);
 800a56c:	2201      	movs	r2, #1
 800a56e:	2100      	movs	r1, #0
 800a570:	2046      	movs	r0, #70	; 0x46
 800a572:	f7fb fad2 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a576:	2046      	movs	r0, #70	; 0x46
 800a578:	f7fb faeb 	bl	8005b52 <HAL_NVIC_EnableIRQ>

    if(HAL_UART_DeInit(&gh_host_usart) != HAL_OK)
 800a57c:	4806      	ldr	r0, [pc, #24]	; (800a598 <uart_access_setup+0xac>)
 800a57e:	f7ff f8b7 	bl	80096f0 <HAL_UART_DeInit>
    {
        //Error_Handler();
    }
    if(HAL_UART_Init(&gh_host_usart) != HAL_OK)
 800a582:	4805      	ldr	r0, [pc, #20]	; (800a598 <uart_access_setup+0xac>)
 800a584:	f7ff f866 	bl	8009654 <HAL_UART_Init>
    {
        //Error_Handler();
    }
}
 800a588:	bf00      	nop
 800a58a:	3778      	adds	r7, #120	; 0x78
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	40021000 	.word	0x40021000
 800a594:	48000800 	.word	0x48000800
 800a598:	20000138 	.word	0x20000138

0800a59c <board_init_peripheral_setup>:
#if defined(BOARD_SPUD_GLO_V4)


#if defined(BOARD_SPUD_GLO_V4P2)
static void board_init_peripheral_setup(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
    uart_access_setup();
 800a5a0:	f7ff ffa4 	bl	800a4ec <uart_access_setup>
    spi_access_setup();
 800a5a4:	f7ff ff6e 	bl	800a484 <spi_access_setup>
}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <board_init_specific>:
#endif


void board_init_specific(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b2:	1d3b      	adds	r3, r7, #4
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	609a      	str	r2, [r3, #8]
 800a5bc:	60da      	str	r2, [r3, #12]
 800a5be:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a5cc:	1d3b      	adds	r3, r7, #4
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	482f      	ldr	r0, [pc, #188]	; (800a690 <board_init_specific+0xe4>)
 800a5d2:	f7fb ffdf 	bl	8006594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	2101      	movs	r1, #1
 800a5da:	482d      	ldr	r0, [pc, #180]	; (800a690 <board_init_specific+0xe4>)
 800a5dc:	f7fc f954 	bl	8006888 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800a5e0:	2380      	movs	r3, #128	; 0x80
 800a5e2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a5ec:	1d3b      	adds	r3, r7, #4
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4828      	ldr	r0, [pc, #160]	; (800a694 <board_init_specific+0xe8>)
 800a5f2:	f7fb ffcf 	bl	8006594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	4826      	ldr	r0, [pc, #152]	; (800a694 <board_init_specific+0xe8>)
 800a5fc:	f7fc f944 	bl	8006888 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800a600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a604:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a606:	2301      	movs	r3, #1
 800a608:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a60e:	1d3b      	adds	r3, r7, #4
 800a610:	4619      	mov	r1, r3
 800a612:	4820      	ldr	r0, [pc, #128]	; (800a694 <board_init_specific+0xe8>)
 800a614:	f7fb ffbe 	bl	8006594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800a618:	2201      	movs	r2, #1
 800a61a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a61e:	481d      	ldr	r0, [pc, #116]	; (800a694 <board_init_specific+0xe8>)
 800a620:	f7fc f932 	bl	8006888 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 800a624:	23e0      	movs	r3, #224	; 0xe0
 800a626:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a628:	2301      	movs	r3, #1
 800a62a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a630:	1d3b      	adds	r3, r7, #4
 800a632:	4619      	mov	r1, r3
 800a634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a638:	f7fb ffac 	bl	8006594 <HAL_GPIO_Init>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 800a63c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a640:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a642:	2300      	movs	r3, #0
 800a644:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	4619      	mov	r1, r3
 800a64e:	4810      	ldr	r0, [pc, #64]	; (800a690 <board_init_specific+0xe4>)
 800a650:	f7fb ffa0 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_BLUE_LED | PIN_ORANGE_LED;
 800a654:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a658:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a65a:	2301      	movs	r3, #1
 800a65c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a662:	1d3b      	adds	r3, r7, #4
 800a664:	4619      	mov	r1, r3
 800a666:	480a      	ldr	r0, [pc, #40]	; (800a690 <board_init_specific+0xe4>)
 800a668:	f7fb ff94 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED | PIN_RED_LED;
 800a66c:	230c      	movs	r3, #12
 800a66e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a670:	2301      	movs	r3, #1
 800a672:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a678:	1d3b      	adds	r3, r7, #4
 800a67a:	4619      	mov	r1, r3
 800a67c:	4805      	ldr	r0, [pc, #20]	; (800a694 <board_init_specific+0xe8>)
 800a67e:	f7fb ff89 	bl	8006594 <HAL_GPIO_Init>

    board_init_peripheral_setup();
 800a682:	f7ff ff8b 	bl	800a59c <board_init_peripheral_setup>
}
 800a686:	bf00      	nop
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	48000400 	.word	0x48000400
 800a694:	48000800 	.word	0x48000800

0800a698 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a69c:	4a0d      	ldr	r2, [pc, #52]	; (800a6d4 <HAL_Set_DMA_Callbacks+0x3c>)
 800a69e:	2100      	movs	r1, #0
 800a6a0:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <HAL_Set_DMA_Callbacks+0x40>)
 800a6a2:	f7fb fc87 	bl	8005fb4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a6a6:	4a0b      	ldr	r2, [pc, #44]	; (800a6d4 <HAL_Set_DMA_Callbacks+0x3c>)
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	480c      	ldr	r0, [pc, #48]	; (800a6dc <HAL_Set_DMA_Callbacks+0x44>)
 800a6ac:	f7fb fc82 	bl	8005fb4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a6b0:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <HAL_Set_DMA_Callbacks+0x3c>)
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	480a      	ldr	r0, [pc, #40]	; (800a6e0 <HAL_Set_DMA_Callbacks+0x48>)
 800a6b6:	f7fb fc7d 	bl	8005fb4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a6ba:	4a06      	ldr	r2, [pc, #24]	; (800a6d4 <HAL_Set_DMA_Callbacks+0x3c>)
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <HAL_Set_DMA_Callbacks+0x4c>)
 800a6c0:	f7fb fc78 	bl	8005fb4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a6c4:	4a03      	ldr	r2, [pc, #12]	; (800a6d4 <HAL_Set_DMA_Callbacks+0x3c>)
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4807      	ldr	r0, [pc, #28]	; (800a6e8 <HAL_Set_DMA_Callbacks+0x50>)
 800a6ca:	f7fb fc73 	bl	8005fb4 <HAL_DMA_RegisterCallback>
}
 800a6ce:	bf00      	nop
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800accb 	.word	0x0800accb
 800a6d8:	20001ee0 	.word	0x20001ee0
 800a6dc:	20001f28 	.word	0x20001f28
 800a6e0:	20001f70 	.word	0x20001f70
 800a6e4:	20001fb8 	.word	0x20001fb8
 800a6e8:	20002000 	.word	0x20002000

0800a6ec <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <HAL_MspInit+0x60>)
 800a6fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a700:	4a12      	ldr	r2, [pc, #72]	; (800a74c <HAL_MspInit+0x60>)
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	6613      	str	r3, [r2, #96]	; 0x60
 800a708:	4b10      	ldr	r3, [pc, #64]	; (800a74c <HAL_MspInit+0x60>)
 800a70a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	607b      	str	r3, [r7, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a714:	4b0d      	ldr	r3, [pc, #52]	; (800a74c <HAL_MspInit+0x60>)
 800a716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a718:	4a0c      	ldr	r2, [pc, #48]	; (800a74c <HAL_MspInit+0x60>)
 800a71a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a71e:	6593      	str	r3, [r2, #88]	; 0x58
 800a720:	4b0a      	ldr	r3, [pc, #40]	; (800a74c <HAL_MspInit+0x60>)
 800a722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a728:	603b      	str	r3, [r7, #0]
 800a72a:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800a730:	2300      	movs	r3, #0
 800a732:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800a734:	f107 0308 	add.w	r3, r7, #8
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fc f8e5 	bl	8006908 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800a73e:	f7fc f943 	bl	80069c8 <HAL_PWR_EnablePVD>
}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	40021000 	.word	0x40021000

0800a750 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a08      	ldr	r2, [pc, #32]	; (800a780 <HAL_RTC_MspInit+0x30>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d107      	bne.n	800a772 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <HAL_RTC_MspInit+0x34>)
 800a764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a768:	4a06      	ldr	r2, [pc, #24]	; (800a784 <HAL_RTC_MspInit+0x34>)
 800a76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a76e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	40002800 	.word	0x40002800
 800a784:	40021000 	.word	0x40021000

0800a788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a6e      	ldr	r2, [pc, #440]	; (800a950 <HAL_TIM_Base_MspInit+0x1c8>)
 800a796:	4293      	cmp	r3, r2
 800a798:	f040 8091 	bne.w	800a8be <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a79c:	4b6d      	ldr	r3, [pc, #436]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a0:	4a6c      	ldr	r2, [pc, #432]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a7a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7a6:	6613      	str	r3, [r2, #96]	; 0x60
 800a7a8:	4b6a      	ldr	r3, [pc, #424]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800a7b4:	4b68      	ldr	r3, [pc, #416]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7b6:	4a69      	ldr	r2, [pc, #420]	; (800a95c <HAL_TIM_Base_MspInit+0x1d4>)
 800a7b8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800a7ba:	4b67      	ldr	r3, [pc, #412]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7bc:	2207      	movs	r2, #7
 800a7be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7c0:	4b65      	ldr	r3, [pc, #404]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7c2:	2210      	movs	r2, #16
 800a7c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7c6:	4b64      	ldr	r3, [pc, #400]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a7cc:	4b62      	ldr	r3, [pc, #392]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7ce:	2280      	movs	r2, #128	; 0x80
 800a7d0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a7d2:	4b61      	ldr	r3, [pc, #388]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7d8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a7da:	4b5f      	ldr	r3, [pc, #380]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7e0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800a7e2:	4b5d      	ldr	r3, [pc, #372]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a7e8:	4b5b      	ldr	r3, [pc, #364]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a7ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a7f0:	4859      	ldr	r0, [pc, #356]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a7f2:	f7fb f9d7 	bl	8005ba4 <HAL_DMA_Init>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800a7fc:	f7ff fe3d 	bl	800a47a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a55      	ldr	r2, [pc, #340]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a804:	625a      	str	r2, [r3, #36]	; 0x24
 800a806:	4a54      	ldr	r2, [pc, #336]	; (800a958 <HAL_TIM_Base_MspInit+0x1d0>)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800a80c:	4b54      	ldr	r3, [pc, #336]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a80e:	4a55      	ldr	r2, [pc, #340]	; (800a964 <HAL_TIM_Base_MspInit+0x1dc>)
 800a810:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800a812:	4b53      	ldr	r3, [pc, #332]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a814:	2207      	movs	r2, #7
 800a816:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a818:	4b51      	ldr	r3, [pc, #324]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a81a:	2210      	movs	r2, #16
 800a81c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a81e:	4b50      	ldr	r3, [pc, #320]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a820:	2200      	movs	r2, #0
 800a822:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800a824:	4b4e      	ldr	r3, [pc, #312]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a826:	2280      	movs	r2, #128	; 0x80
 800a828:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a82a:	4b4d      	ldr	r3, [pc, #308]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a82c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a830:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a832:	4b4b      	ldr	r3, [pc, #300]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a838:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800a83a:	4b49      	ldr	r3, [pc, #292]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a840:	4b47      	ldr	r3, [pc, #284]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a842:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800a848:	4845      	ldr	r0, [pc, #276]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a84a:	f7fb f9ab 	bl	8005ba4 <HAL_DMA_Init>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800a854:	f7ff fe11 	bl	800a47a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a41      	ldr	r2, [pc, #260]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a85c:	629a      	str	r2, [r3, #40]	; 0x28
 800a85e:	4a40      	ldr	r2, [pc, #256]	; (800a960 <HAL_TIM_Base_MspInit+0x1d8>)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800a864:	4b40      	ldr	r3, [pc, #256]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a866:	4a41      	ldr	r2, [pc, #260]	; (800a96c <HAL_TIM_Base_MspInit+0x1e4>)
 800a868:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800a86a:	4b3f      	ldr	r3, [pc, #252]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a86c:	2207      	movs	r2, #7
 800a86e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a870:	4b3d      	ldr	r3, [pc, #244]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a872:	2210      	movs	r2, #16
 800a874:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a876:	4b3c      	ldr	r3, [pc, #240]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a878:	2200      	movs	r2, #0
 800a87a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800a87c:	4b3a      	ldr	r3, [pc, #232]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a87e:	2280      	movs	r2, #128	; 0x80
 800a880:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a882:	4b39      	ldr	r3, [pc, #228]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a884:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a888:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a88a:	4b37      	ldr	r3, [pc, #220]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a88c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a890:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800a892:	4b35      	ldr	r3, [pc, #212]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a894:	2200      	movs	r2, #0
 800a896:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a898:	4b33      	ldr	r3, [pc, #204]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a89a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a89e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800a8a0:	4831      	ldr	r0, [pc, #196]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a8a2:	f7fb f97f 	bl	8005ba4 <HAL_DMA_Init>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800a8ac:	f7ff fde5 	bl	800a47a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a2d      	ldr	r2, [pc, #180]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a8b4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8b6:	4a2c      	ldr	r2, [pc, #176]	; (800a968 <HAL_TIM_Base_MspInit+0x1e0>)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6293      	str	r3, [r2, #40]	; 0x28
 800a8bc:	e041      	b.n	800a942 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a2b      	ldr	r2, [pc, #172]	; (800a970 <HAL_TIM_Base_MspInit+0x1e8>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d13c      	bne.n	800a942 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a8c8:	4b22      	ldr	r3, [pc, #136]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a8ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8cc:	4a21      	ldr	r2, [pc, #132]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a8ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d2:	6613      	str	r3, [r2, #96]	; 0x60
 800a8d4:	4b1f      	ldr	r3, [pc, #124]	; (800a954 <HAL_TIM_Base_MspInit+0x1cc>)
 800a8d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8dc:	60bb      	str	r3, [r7, #8]
 800a8de:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800a8e0:	4b24      	ldr	r3, [pc, #144]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a8e2:	4a25      	ldr	r2, [pc, #148]	; (800a978 <HAL_TIM_Base_MspInit+0x1f0>)
 800a8e4:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800a8e6:	4b23      	ldr	r3, [pc, #140]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8ec:	4b21      	ldr	r3, [pc, #132]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a8ee:	2210      	movs	r2, #16
 800a8f0:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8f2:	4b20      	ldr	r3, [pc, #128]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a8fa:	2280      	movs	r2, #128	; 0x80
 800a8fc:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a8fe:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a900:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a904:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a906:	4b1b      	ldr	r3, [pc, #108]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a90c:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800a90e:	4b19      	ldr	r3, [pc, #100]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a910:	2200      	movs	r2, #0
 800a912:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800a914:	4b17      	ldr	r3, [pc, #92]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a916:	2200      	movs	r2, #0
 800a918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800a91a:	4816      	ldr	r0, [pc, #88]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a91c:	f7fb f942 	bl	8005ba4 <HAL_DMA_Init>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800a926:	f7ff fda8 	bl	800a47a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a11      	ldr	r2, [pc, #68]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24
 800a930:	4a10      	ldr	r2, [pc, #64]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a0e      	ldr	r2, [pc, #56]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a93a:	621a      	str	r2, [r3, #32]
 800a93c:	4a0d      	ldr	r2, [pc, #52]	; (800a974 <HAL_TIM_Base_MspInit+0x1ec>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800a942:	f7ff fea9 	bl	800a698 <HAL_Set_DMA_Callbacks>
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	40012c00 	.word	0x40012c00
 800a954:	40021000 	.word	0x40021000
 800a958:	20001ee0 	.word	0x20001ee0
 800a95c:	4002001c 	.word	0x4002001c
 800a960:	20001f28 	.word	0x20001f28
 800a964:	40020030 	.word	0x40020030
 800a968:	20001f70 	.word	0x20001f70
 800a96c:	40020080 	.word	0x40020080
 800a970:	40014400 	.word	0x40014400
 800a974:	20002000 	.word	0x20002000
 800a978:	4002006c 	.word	0x4002006c

0800a97c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a28      	ldr	r2, [pc, #160]	; (800aa2c <HAL_TIM_PWM_MspInit+0xb0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d149      	bne.n	800aa22 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a98e:	4b28      	ldr	r3, [pc, #160]	; (800aa30 <HAL_TIM_PWM_MspInit+0xb4>)
 800a990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a992:	4a27      	ldr	r2, [pc, #156]	; (800aa30 <HAL_TIM_PWM_MspInit+0xb4>)
 800a994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a998:	6613      	str	r3, [r2, #96]	; 0x60
 800a99a:	4b25      	ldr	r3, [pc, #148]	; (800aa30 <HAL_TIM_PWM_MspInit+0xb4>)
 800a99c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9a8:	4a23      	ldr	r2, [pc, #140]	; (800aa38 <HAL_TIM_PWM_MspInit+0xbc>)
 800a9aa:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a9ac:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9ae:	2207      	movs	r2, #7
 800a9b0:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9b2:	4b20      	ldr	r3, [pc, #128]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9b8:	4b1e      	ldr	r3, [pc, #120]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9c0:	2280      	movs	r2, #128	; 0x80
 800a9c2:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a9c4:	4b1b      	ldr	r3, [pc, #108]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9ca:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a9cc:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9d2:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a9d4:	4b17      	ldr	r3, [pc, #92]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a9da:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a9e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a9e2:	4814      	ldr	r0, [pc, #80]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9e4:	f7fb f8de 	bl	8005ba4 <HAL_DMA_Init>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a9ee:	f7ff fd44 	bl	800a47a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a0f      	ldr	r2, [pc, #60]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24
 800a9f8:	4a0e      	ldr	r2, [pc, #56]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa02:	621a      	str	r2, [r3, #32]
 800aa04:	4a0b      	ldr	r2, [pc, #44]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a09      	ldr	r2, [pc, #36]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa0e:	639a      	str	r2, [r3, #56]	; 0x38
 800aa10:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a06      	ldr	r2, [pc, #24]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa1a:	635a      	str	r2, [r3, #52]	; 0x34
 800aa1c:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <HAL_TIM_PWM_MspInit+0xb8>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	40014000 	.word	0x40014000
 800aa30:	40021000 	.word	0x40021000
 800aa34:	20001fb8 	.word	0x20001fb8
 800aa38:	40020058 	.word	0x40020058

0800aa3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800aa42:	2300      	movs	r3, #0
 800aa44:	71fb      	strb	r3, [r7, #7]
 800aa46:	e005      	b.n	800aa54 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aa48:	2064      	movs	r0, #100	; 0x64
 800aa4a:	f7fa ff1f 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	3301      	adds	r3, #1
 800aa52:	71fb      	strb	r3, [r7, #7]
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f6      	beq.n	800aa48 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aa5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa5e:	f7fa ff15 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aa62:	e7ee      	b.n	800aa42 <NMI_Handler+0x6>

0800aa64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	71fb      	strb	r3, [r7, #7]
 800aa6e:	e005      	b.n	800aa7c <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aa70:	2064      	movs	r0, #100	; 0x64
 800aa72:	f7fa ff0b 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	71fb      	strb	r3, [r7, #7]
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d9f6      	bls.n	800aa70 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aa82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa86:	f7fa ff01 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aa8a:	e7ee      	b.n	800aa6a <HardFault_Handler+0x6>

0800aa8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800aa92:	2300      	movs	r3, #0
 800aa94:	71fb      	strb	r3, [r7, #7]
 800aa96:	e005      	b.n	800aaa4 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aa98:	2064      	movs	r0, #100	; 0x64
 800aa9a:	f7fa fef7 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	71fb      	strb	r3, [r7, #7]
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d9f6      	bls.n	800aa98 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aaaa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aaae:	f7fa feed 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800aab2:	e7ee      	b.n	800aa92 <MemManage_Handler+0x6>

0800aab4 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800aaba:	2300      	movs	r3, #0
 800aabc:	71fb      	strb	r3, [r7, #7]
 800aabe:	e005      	b.n	800aacc <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aac0:	2064      	movs	r0, #100	; 0x64
 800aac2:	f7fa fee3 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	3301      	adds	r3, #1
 800aaca:	71fb      	strb	r3, [r7, #7]
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d9f6      	bls.n	800aac0 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aad2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aad6:	f7fa fed9 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aada:	e7ee      	b.n	800aaba <BusFault_Handler+0x6>

0800aadc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800aae2:	2300      	movs	r3, #0
 800aae4:	71fb      	strb	r3, [r7, #7]
 800aae6:	e005      	b.n	800aaf4 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aae8:	2064      	movs	r0, #100	; 0x64
 800aaea:	f7fa fecf 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	71fb      	strb	r3, [r7, #7]
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b04      	cmp	r3, #4
 800aaf8:	d9f6      	bls.n	800aae8 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aafa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aafe:	f7fa fec5 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800ab02:	e7ee      	b.n	800aae2 <UsageFault_Handler+0x6>

0800ab04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	af00      	add	r7, sp, #0
}
 800ab08:	bf00      	nop
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800ab22:	2306      	movs	r3, #6
 800ab24:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800ab26:	88fb      	ldrh	r3, [r7, #6]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fb fec5 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800ab2e:	797a      	ldrb	r2, [r7, #5]
 800ab30:	797b      	ldrb	r3, [r7, #5]
 800ab32:	4910      	ldr	r1, [pc, #64]	; (800ab74 <EXTI0_IRQHandler+0x60>)
 800ab34:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800ab38:	490e      	ldr	r1, [pc, #56]	; (800ab74 <EXTI0_IRQHandler+0x60>)
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800ab40:	797c      	ldrb	r4, [r7, #5]
 800ab42:	f7f9 f971 	bl	8003e28 <xTaskGetTickCountFromISR>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <EXTI0_IRQHandler+0x60>)
 800ab4a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800ab4e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fb f80b 	bl	8005b6e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ab58:	4b07      	ldr	r3, [pc, #28]	; (800ab78 <EXTI0_IRQHandler+0x64>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	7979      	ldrb	r1, [r7, #5]
 800ab5e:	463b      	mov	r3, r7
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	2300      	movs	r3, #0
 800ab64:	2203      	movs	r2, #3
 800ab66:	f7f9 fd7d 	bl	8004664 <xTaskGenericNotifyFromISR>
}
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd90      	pop	{r4, r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20000594 	.word	0x20000594
 800ab78:	200028d0 	.word	0x200028d0

0800ab7c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800ab82:	2304      	movs	r3, #4
 800ab84:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800ab86:	2300      	movs	r3, #0
 800ab88:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800ab8a:	2308      	movs	r3, #8
 800ab8c:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800ab8e:	88fb      	ldrh	r3, [r7, #6]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fb fe91 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800ab96:	797a      	ldrb	r2, [r7, #5]
 800ab98:	797b      	ldrb	r3, [r7, #5]
 800ab9a:	4910      	ldr	r1, [pc, #64]	; (800abdc <EXTI2_IRQHandler+0x60>)
 800ab9c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800aba0:	490e      	ldr	r1, [pc, #56]	; (800abdc <EXTI2_IRQHandler+0x60>)
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	440b      	add	r3, r1
 800aba6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800aba8:	797c      	ldrb	r4, [r7, #5]
 800abaa:	f7f9 f93d 	bl	8003e28 <xTaskGetTickCountFromISR>
 800abae:	4603      	mov	r3, r0
 800abb0:	4a0a      	ldr	r2, [pc, #40]	; (800abdc <EXTI2_IRQHandler+0x60>)
 800abb2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800abb6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fa ffd7 	bl	8005b6e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <EXTI2_IRQHandler+0x64>)
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	7979      	ldrb	r1, [r7, #5]
 800abc6:	463b      	mov	r3, r7
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	2203      	movs	r2, #3
 800abce:	f7f9 fd49 	bl	8004664 <xTaskGenericNotifyFromISR>
}
 800abd2:	bf00      	nop
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd90      	pop	{r4, r7, pc}
 800abda:	bf00      	nop
 800abdc:	20000594 	.word	0x20000594
 800abe0:	200028d0 	.word	0x200028d0

0800abe4 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800abea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abee:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800abf0:	2301      	movs	r3, #1
 800abf2:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800abf4:	2328      	movs	r3, #40	; 0x28
 800abf6:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fb fe5c 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800ac00:	797a      	ldrb	r2, [r7, #5]
 800ac02:	797b      	ldrb	r3, [r7, #5]
 800ac04:	490f      	ldr	r1, [pc, #60]	; (800ac44 <EXTI15_10_IRQHandler+0x60>)
 800ac06:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800ac0a:	490e      	ldr	r1, [pc, #56]	; (800ac44 <EXTI15_10_IRQHandler+0x60>)
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800ac12:	797c      	ldrb	r4, [r7, #5]
 800ac14:	f7f9 f908 	bl	8003e28 <xTaskGetTickCountFromISR>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <EXTI15_10_IRQHandler+0x60>)
 800ac1c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800ac20:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fa ffa2 	bl	8005b6e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ac2a:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <EXTI15_10_IRQHandler+0x64>)
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	7979      	ldrb	r1, [r7, #5]
 800ac30:	463b      	mov	r3, r7
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	2300      	movs	r3, #0
 800ac36:	2203      	movs	r2, #3
 800ac38:	f7f9 fd14 	bl	8004664 <xTaskGenericNotifyFromISR>
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd90      	pop	{r4, r7, pc}
 800ac44:	20000594 	.word	0x20000594
 800ac48:	200028d0 	.word	0x200028d0

0800ac4c <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ac4c:	b590      	push	{r4, r7, lr}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800ac52:	2320      	movs	r3, #32
 800ac54:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800ac56:	2302      	movs	r3, #2
 800ac58:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800ac5a:	2317      	movs	r3, #23
 800ac5c:	713b      	strb	r3, [r7, #4]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fb fe29 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800ac66:	797a      	ldrb	r2, [r7, #5]
 800ac68:	797b      	ldrb	r3, [r7, #5]
 800ac6a:	4910      	ldr	r1, [pc, #64]	; (800acac <EXTI9_5_IRQHandler+0x60>)
 800ac6c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800ac70:	490e      	ldr	r1, [pc, #56]	; (800acac <EXTI9_5_IRQHandler+0x60>)
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800ac78:	797c      	ldrb	r4, [r7, #5]
 800ac7a:	f7f9 f8d5 	bl	8003e28 <xTaskGetTickCountFromISR>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <EXTI9_5_IRQHandler+0x60>)
 800ac82:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800ac86:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fa ff6f 	bl	8005b6e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <EXTI9_5_IRQHandler+0x64>)
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	7979      	ldrb	r1, [r7, #5]
 800ac96:	463b      	mov	r3, r7
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	f7f9 fce1 	bl	8004664 <xTaskGenericNotifyFromISR>
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd90      	pop	{r4, r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000594 	.word	0x20000594
 800acb0:	200028d0 	.word	0x200028d0

0800acb4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	4603      	mov	r3, r0
 800acbc:	80fb      	strh	r3, [r7, #6]

}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
    while(1);
 800acd2:	e7fe      	b.n	800acd2 <HAL_DMA_CMPLT_CALLBACK+0x8>

0800acd4 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	7f1b      	ldrb	r3, [r3, #28]
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d016      	beq.n	800ad12 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	dc1c      	bgt.n	800ad22 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d002      	beq.n	800acf2 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800acec:	2b02      	cmp	r3, #2
 800acee:	d008      	beq.n	800ad02 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800acf0:	e017      	b.n	800ad22 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800acf2:	2100      	movs	r1, #0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7fd fc83 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800acfa:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]
        break;
 800ad00:	e010      	b.n	800ad24 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800ad02:	2104      	movs	r1, #4
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7fd fc7b 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800ad0a:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	701a      	strb	r2, [r3, #0]
        break;
 800ad10:	e008      	b.n	800ad24 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800ad12:	2108      	movs	r1, #8
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fd fc73 	bl	8008600 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800ad1a:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	701a      	strb	r2, [r3, #0]
        break;
 800ad20:	e000      	b.n	800ad24 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800ad22:	bf00      	nop
    }
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	200001bc 	.word	0x200001bc
 800ad30:	200001bd 	.word	0x200001bd
 800ad34:	200001be 	.word	0x200001be

0800ad38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800ad3c:	4802      	ldr	r0, [pc, #8]	; (800ad48 <DMA1_Channel2_IRQHandler+0x10>)
 800ad3e:	f7fb f88a 	bl	8005e56 <HAL_DMA_IRQHandler>
}
 800ad42:	bf00      	nop
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20001ee0 	.word	0x20001ee0

0800ad4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800ad50:	4802      	ldr	r0, [pc, #8]	; (800ad5c <DMA1_Channel3_IRQHandler+0x10>)
 800ad52:	f7fb f880 	bl	8005e56 <HAL_DMA_IRQHandler>
}
 800ad56:	bf00      	nop
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20001f28 	.word	0x20001f28

0800ad60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800ad64:	4802      	ldr	r0, [pc, #8]	; (800ad70 <DMA1_Channel5_IRQHandler+0x10>)
 800ad66:	f7fb f876 	bl	8005e56 <HAL_DMA_IRQHandler>
}
 800ad6a:	bf00      	nop
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20001fb8 	.word	0x20001fb8

0800ad74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800ad78:	4802      	ldr	r0, [pc, #8]	; (800ad84 <DMA1_Channel6_IRQHandler+0x10>)
 800ad7a:	f7fb f86c 	bl	8005e56 <HAL_DMA_IRQHandler>
}
 800ad7e:	bf00      	nop
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20002000 	.word	0x20002000

0800ad88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800ad8c:	4802      	ldr	r0, [pc, #8]	; (800ad98 <DMA1_Channel7_IRQHandler+0x10>)
 800ad8e:	f7fb f862 	bl	8005e56 <HAL_DMA_IRQHandler>
}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20001f70 	.word	0x20001f70

0800ad9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
	return 1;
 800ada0:	2301      	movs	r3, #1
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <_kill>:

int _kill(int pid, int sig)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800adb6:	f000 fb29 	bl	800b40c <__errno>
 800adba:	4603      	mov	r3, r0
 800adbc:	2216      	movs	r2, #22
 800adbe:	601a      	str	r2, [r3, #0]
	return -1;
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_exit>:

void _exit (int status)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800add4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff ffe7 	bl	800adac <_kill>
	while (1) {}		/* Make sure we hang here */
 800adde:	e7fe      	b.n	800adde <_exit+0x12>

0800ade0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	e00a      	b.n	800ae08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800adf2:	f3af 8000 	nop.w
 800adf6:	4601      	mov	r1, r0
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	60ba      	str	r2, [r7, #8]
 800adfe:	b2ca      	uxtb	r2, r1
 800ae00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	3301      	adds	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	dbf0      	blt.n	800adf2 <_read+0x12>
	}

return len;
 800ae10:	687b      	ldr	r3, [r7, #4]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e009      	b.n	800ae40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	60ba      	str	r2, [r7, #8]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	dbf1      	blt.n	800ae2c <_write+0x12>
	}
	return len;
 800ae48:	687b      	ldr	r3, [r7, #4]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <_close>:

int _close(int file)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
	return -1;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae7a:	605a      	str	r2, [r3, #4]
	return 0;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <_isatty>:

int _isatty(int file)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
	return 1;
 800ae92:	2301      	movs	r3, #1
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
	return 0;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
	...

0800aebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aec4:	4a14      	ldr	r2, [pc, #80]	; (800af18 <_sbrk+0x5c>)
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <_sbrk+0x60>)
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aed0:	4b13      	ldr	r3, [pc, #76]	; (800af20 <_sbrk+0x64>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <_sbrk+0x64>)
 800aeda:	4a12      	ldr	r2, [pc, #72]	; (800af24 <_sbrk+0x68>)
 800aedc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aede:	4b10      	ldr	r3, [pc, #64]	; (800af20 <_sbrk+0x64>)
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4413      	add	r3, r2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d207      	bcs.n	800aefc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aeec:	f000 fa8e 	bl	800b40c <__errno>
 800aef0:	4603      	mov	r3, r0
 800aef2:	220c      	movs	r2, #12
 800aef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aefa:	e009      	b.n	800af10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aefc:	4b08      	ldr	r3, [pc, #32]	; (800af20 <_sbrk+0x64>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <_sbrk+0x64>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	4a05      	ldr	r2, [pc, #20]	; (800af20 <_sbrk+0x64>)
 800af0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af0e:	68fb      	ldr	r3, [r7, #12]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20010000 	.word	0x20010000
 800af1c:	00000400 	.word	0x00000400
 800af20:	200020b8 	.word	0x200020b8
 800af24:	200039a0 	.word	0x200039a0

0800af28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <SystemInit+0x20>)
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af32:	4a05      	ldr	r2, [pc, #20]	; (800af48 <SystemInit+0x20>)
 800af34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800af3c:	bf00      	nop
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <flash_access_read_sector>:
    }
}


void flash_access_read_sector(void *p_data, flash_info_sub_block_t sub_block)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
    uint32_t num_words = FLASH_INFO_SUB_BLOCK_SECTOR_SIZE_BYTES / sizeof(uint32_t);
 800af58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af5c:	60fb      	str	r3, [r7, #12]
    uint32_t flash_sub_block_address = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]

    switch (sub_block)
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <flash_access_read_sector+0x22>
    {
        case FLASH_INFO_SUB_BLOCK_CONFIG:
            flash_sub_block_address = FLASH_START_ADDRESS + FLASH_SUB_BLOCK_CONFIG_ADDRESS_OFFSET;
 800af68:	4b07      	ldr	r3, [pc, #28]	; (800af88 <flash_access_read_sector+0x3c>)
 800af6a:	60bb      	str	r3, [r7, #8]
        break;
 800af6c:	e000      	b.n	800af70 <flash_access_read_sector+0x24>
        default:
            while(1);
 800af6e:	e7fe      	b.n	800af6e <flash_access_read_sector+0x22>
        break;
    }
    memcpy(p_data, (void *)flash_sub_block_address, 2048);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fa79 	bl	800b470 <memcpy>
}
 800af7e:	bf00      	nop
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	0803e000 	.word	0x0803e000

0800af8c <flash_access_write_sector>:


void flash_access_write_sector(uint64_t *p_data, flash_info_sub_block_t sub_block)
{
 800af8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af90:	b08a      	sub	sp, #40	; 0x28
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	70f9      	strb	r1, [r7, #3]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t flash_sub_block_address = 0;
 800af98:	2100      	movs	r1, #0
 800af9a:	6239      	str	r1, [r7, #32]
    uint16_t num_double_words = FLASH_INFO_SUB_BLOCK_SECTOR_SIZE_BYTES / sizeof(uint64_t);
 800af9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afa0:	83f9      	strh	r1, [r7, #30]
    uint32_t page_error = 0;
 800afa2:	2100      	movs	r1, #0
 800afa4:	60f9      	str	r1, [r7, #12]
    switch (sub_block)
 800afa6:	78f9      	ldrb	r1, [r7, #3]
 800afa8:	2900      	cmp	r1, #0
 800afaa:	d145      	bne.n	800b038 <flash_access_write_sector+0xac>
    {
        case FLASH_INFO_SUB_BLOCK_CONFIG:
            flash_sub_block_address = FLASH_START_ADDRESS + FLASH_SUB_BLOCK_CONFIG_ADDRESS_OFFSET;
 800afac:	4932      	ldr	r1, [pc, #200]	; (800b078 <flash_access_write_sector+0xec>)
 800afae:	6239      	str	r1, [r7, #32]
        break;
 800afb0:	bf00      	nop
        default:
            while(1);
        break;
    }

    uint32_t start_page_num = (flash_sub_block_address - FLASH_START_ADDRESS)/ FLASH_PAGE_SIZE;
 800afb2:	6a39      	ldr	r1, [r7, #32]
 800afb4:	2000      	movs	r0, #0
 800afb6:	468a      	mov	sl, r1
 800afb8:	4683      	mov	fp, r0
 800afba:	f11a 4478 	adds.w	r4, sl, #4160749568	; 0xf8000000
 800afbe:	f14b 35ff 	adc.w	r5, fp, #4294967295	; 0xffffffff
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f04f 0100 	mov.w	r1, #0
 800afca:	0ae0      	lsrs	r0, r4, #11
 800afcc:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 800afd0:	0ae9      	lsrs	r1, r5, #11
 800afd2:	4601      	mov	r1, r0
 800afd4:	61b9      	str	r1, [r7, #24]
    uint32_t end_page_address = flash_sub_block_address + num_double_words;
 800afd6:	8bf9      	ldrh	r1, [r7, #30]
 800afd8:	6a38      	ldr	r0, [r7, #32]
 800afda:	4401      	add	r1, r0
 800afdc:	6179      	str	r1, [r7, #20]
    uint32_t end_page_num = (end_page_address - FLASH_START_ADDRESS) / FLASH_PAGE_SIZE;
 800afde:	6979      	ldr	r1, [r7, #20]
 800afe0:	2000      	movs	r0, #0
 800afe2:	4688      	mov	r8, r1
 800afe4:	4681      	mov	r9, r0
 800afe6:	f118 4278 	adds.w	r2, r8, #4160749568	; 0xf8000000
 800afea:	f149 33ff 	adc.w	r3, r9, #4294967295	; 0xffffffff
 800afee:	f04f 0000 	mov.w	r0, #0
 800aff2:	f04f 0100 	mov.w	r1, #0
 800aff6:	0ad0      	lsrs	r0, r2, #11
 800aff8:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 800affc:	0ad9      	lsrs	r1, r3, #11
 800affe:	4603      	mov	r3, r0
 800b000:	613b      	str	r3, [r7, #16]

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800b002:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <flash_access_write_sector+0xf0>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page        = start_page_num;
 800b008:	4a1c      	ldr	r2, [pc, #112]	; (800b07c <flash_access_write_sector+0xf0>)
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6093      	str	r3, [r2, #8]
    EraseInitStruct.Banks       = FLASH_BANK_1;
 800b00e:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <flash_access_write_sector+0xf0>)
 800b010:	2201      	movs	r2, #1
 800b012:	605a      	str	r2, [r3, #4]
    EraseInitStruct.NbPages     = ((end_page_num - start_page_num)) +1;
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	3301      	adds	r3, #1
 800b01c:	4a17      	ldr	r2, [pc, #92]	; (800b07c <flash_access_write_sector+0xf0>)
 800b01e:	60d3      	str	r3, [r2, #12]

    HAL_FLASH_Unlock();
 800b020:	f7fb f8ac 	bl	800617c <HAL_FLASH_Unlock>

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK) while (1);
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	4619      	mov	r1, r3
 800b02a:	4814      	ldr	r0, [pc, #80]	; (800b07c <flash_access_write_sector+0xf0>)
 800b02c:	f7fb f98c 	bl	8006348 <HAL_FLASHEx_Erase>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <flash_access_write_sector+0xb0>
 800b036:	e000      	b.n	800b03a <flash_access_write_sector+0xae>
            while(1);
 800b038:	e7fe      	b.n	800b038 <flash_access_write_sector+0xac>
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK) while (1);
 800b03a:	e7fe      	b.n	800b03a <flash_access_write_sector+0xae>

    for (uint16_t iii = 0; iii < num_double_words; iii++)
 800b03c:	2300      	movs	r3, #0
 800b03e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b040:	e00f      	b.n	800b062 <flash_access_write_sector+0xd6>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
                        flash_sub_block_address + (iii * sizeof(uint64_t)), \
 800b042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b044:	00da      	lsls	r2, r3, #3
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	18d1      	adds	r1, r2, r3
                        *(p_data + (iii)));
 800b04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	4413      	add	r3, r2
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	2000      	movs	r0, #0
 800b058:	f7fb f824 	bl	80060a4 <HAL_FLASH_Program>
    for (uint16_t iii = 0; iii < num_double_words; iii++)
 800b05c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b05e:	3301      	adds	r3, #1
 800b060:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b062:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b064:	8bfb      	ldrh	r3, [r7, #30]
 800b066:	429a      	cmp	r2, r3
 800b068:	d3eb      	bcc.n	800b042 <flash_access_write_sector+0xb6>
    }

    HAL_FLASH_Lock();
 800b06a:	f7fb f8a9 	bl	80061c0 <HAL_FLASH_Lock>
}
 800b06e:	bf00      	nop
 800b070:	3728      	adds	r7, #40	; 0x28
 800b072:	46bd      	mov	sp, r7
 800b074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b078:	0803e000 	.word	0x0803e000
 800b07c:	200020bc 	.word	0x200020bc

0800b080 <flash_info_block_init>:
    return strip_speed;
}


void flash_info_block_init(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid0 = HAL_GetUIDw0();
 800b084:	f7fa fc26 	bl	80058d4 <HAL_GetUIDw0>
 800b088:	4603      	mov	r3, r0
 800b08a:	4a3a      	ldr	r2, [pc, #232]	; (800b174 <flash_info_block_init+0xf4>)
 800b08c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid1 = HAL_GetUIDw1();
 800b090:	f7fa fc2c 	bl	80058ec <HAL_GetUIDw1>
 800b094:	4603      	mov	r3, r0
 800b096:	4a37      	ldr	r2, [pc, #220]	; (800b174 <flash_info_block_init+0xf4>)
 800b098:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid2 = HAL_GetUIDw2();
 800b09c:	f7fa fc32 	bl	8005904 <HAL_GetUIDw2>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4a34      	ldr	r2, [pc, #208]	; (800b174 <flash_info_block_init+0xf4>)
 800b0a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    // strip_config setup.  Strip 1 enabled with length of 10.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_config, 0xA5, sizeof(flash_info_strip_config_t));
 800b0a8:	220c      	movs	r2, #12
 800b0aa:	21a5      	movs	r1, #165	; 0xa5
 800b0ac:	4831      	ldr	r0, [pc, #196]	; (800b174 <flash_info_block_init+0xf4>)
 800b0ae:	f000 f9ed 	bl	800b48c <memset>
    //g_flash_info_block.flash_info_data.strip_info.strip_config.num_strips = 1;
    //g_flash_info_block.flash_info_data.strip_info.strip_config.strip_1_length = 10; // want to notice on sign if default is set

    // strip 1 animation setup.  ALl animations enabled by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_1_animation, UINT8_MAX, sizeof(flash_info_animation_select_t));
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	21ff      	movs	r1, #255	; 0xff
 800b0b6:	4830      	ldr	r0, [pc, #192]	; (800b178 <flash_info_block_init+0xf8>)
 800b0b8:	f000 f9e8 	bl	800b48c <memset>
    g_flash_info_block.flash_info_data.strip_info.strip_1_animation.rsvd0 = 0;
 800b0bc:	4a2d      	ldr	r2, [pc, #180]	; (800b174 <flash_info_block_init+0xf4>)
 800b0be:	7f13      	ldrb	r3, [r2, #28]
 800b0c0:	f36f 0387 	bfc	r3, #2, #6
 800b0c4:	7713      	strb	r3, [r2, #28]

    // strip 1 brightness setup.  100 percent brightness enabled by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_1_brightness, 0, sizeof(flash_info_brightness_select_t));
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	482c      	ldr	r0, [pc, #176]	; (800b17c <flash_info_block_init+0xfc>)
 800b0cc:	f000 f9de 	bl	800b48c <memset>
    g_flash_info_block.flash_info_data.strip_info.strip_1_brightness.brightness_100p = 1;
 800b0d0:	4a28      	ldr	r2, [pc, #160]	; (800b174 <flash_info_block_init+0xf4>)
 800b0d2:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800b0d6:	f043 0301 	orr.w	r3, r3, #1
 800b0da:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    // strip 1 color setup.  All colors enabled by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_1_color, UINT8_MAX, sizeof(flash_info_color_select_t));
 800b0de:	2205      	movs	r2, #5
 800b0e0:	21ff      	movs	r1, #255	; 0xff
 800b0e2:	4827      	ldr	r0, [pc, #156]	; (800b180 <flash_info_block_init+0x100>)
 800b0e4:	f000 f9d2 	bl	800b48c <memset>
    g_flash_info_block.flash_info_data.strip_info.strip_1_color.rsvd = 0;
 800b0e8:	4a22      	ldr	r2, [pc, #136]	; (800b174 <flash_info_block_init+0xf4>)
 800b0ea:	7c13      	ldrb	r3, [r2, #16]
 800b0ec:	f36f 13c7 	bfc	r3, #7, #1
 800b0f0:	7413      	strb	r3, [r2, #16]

    // strip 1 speed setup.  100 percent speed enabled by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_1_brightness, 0, sizeof(flash_info_speed_select_t));
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4821      	ldr	r0, [pc, #132]	; (800b17c <flash_info_block_init+0xfc>)
 800b0f8:	f000 f9c8 	bl	800b48c <memset>
    g_flash_info_block.flash_info_data.strip_info.strip_1_speed.speed_100p = 1;
 800b0fc:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <flash_info_block_init+0xf4>)
 800b0fe:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800b102:	f043 0304 	orr.w	r3, r3, #4
 800b106:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

    // strip 2 animation setup.  ALl animations DISABLED by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_2_animation, 0, sizeof(flash_info_animation_select_t));
 800b10a:	2202      	movs	r2, #2
 800b10c:	2100      	movs	r1, #0
 800b10e:	481d      	ldr	r0, [pc, #116]	; (800b184 <flash_info_block_init+0x104>)
 800b110:	f000 f9bc 	bl	800b48c <memset>

    // strip 2 brightness setup.  No brightness enabled.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_2_brightness, 0, sizeof(flash_info_brightness_select_t));
 800b114:	2201      	movs	r2, #1
 800b116:	2100      	movs	r1, #0
 800b118:	481b      	ldr	r0, [pc, #108]	; (800b188 <flash_info_block_init+0x108>)
 800b11a:	f000 f9b7 	bl	800b48c <memset>

    // strip 2 color setup.  All colors DISABLED by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_2_color, 0, sizeof(flash_info_color_select_t));
 800b11e:	2205      	movs	r2, #5
 800b120:	2100      	movs	r1, #0
 800b122:	481a      	ldr	r0, [pc, #104]	; (800b18c <flash_info_block_init+0x10c>)
 800b124:	f000 f9b2 	bl	800b48c <memset>

    // strip 2 speed setup.  No speed enabled.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_2_brightness, 0, sizeof(flash_info_speed_select_t));
 800b128:	2201      	movs	r2, #1
 800b12a:	2100      	movs	r1, #0
 800b12c:	4816      	ldr	r0, [pc, #88]	; (800b188 <flash_info_block_init+0x108>)
 800b12e:	f000 f9ad 	bl	800b48c <memset>

    // strip 3 animation setup.  ALl animations DISABLED by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_3_animation, 0, sizeof(flash_info_animation_select_t));
 800b132:	2202      	movs	r2, #2
 800b134:	2100      	movs	r1, #0
 800b136:	4816      	ldr	r0, [pc, #88]	; (800b190 <flash_info_block_init+0x110>)
 800b138:	f000 f9a8 	bl	800b48c <memset>

    // strip 3 brightness setup.  No brightness enabled.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_3_brightness, 0, sizeof(flash_info_brightness_select_t));
 800b13c:	2201      	movs	r2, #1
 800b13e:	2100      	movs	r1, #0
 800b140:	4814      	ldr	r0, [pc, #80]	; (800b194 <flash_info_block_init+0x114>)
 800b142:	f000 f9a3 	bl	800b48c <memset>

    // strip 3 color setup.  All colors DISABLED by default.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_3_color, 0, sizeof(flash_info_color_select_t));
 800b146:	2205      	movs	r2, #5
 800b148:	2100      	movs	r1, #0
 800b14a:	4813      	ldr	r0, [pc, #76]	; (800b198 <flash_info_block_init+0x118>)
 800b14c:	f000 f99e 	bl	800b48c <memset>

    // strip 3 speed setup.  No speed enabled.
    memset(&g_flash_info_block.flash_info_data.strip_info.strip_3_brightness, 0, sizeof(flash_info_speed_select_t));
 800b150:	2201      	movs	r2, #1
 800b152:	2100      	movs	r1, #0
 800b154:	480f      	ldr	r0, [pc, #60]	; (800b194 <flash_info_block_init+0x114>)
 800b156:	f000 f999 	bl	800b48c <memset>

    g_flash_info_block.flash_info_data.strip_info.rand_seed = 0;
 800b15a:	4b06      	ldr	r3, [pc, #24]	; (800b174 <flash_info_block_init+0xf4>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    flash_access_write_sector(g_flash_info_block.flat_data_uint64, FLASH_INFO_SUB_BLOCK_CONFIG);
 800b168:	2100      	movs	r1, #0
 800b16a:	4802      	ldr	r0, [pc, #8]	; (800b174 <flash_info_block_init+0xf4>)
 800b16c:	f7ff ff0e 	bl	800af8c <flash_access_write_sector>
}
 800b170:	bf00      	nop
 800b172:	bd80      	pop	{r7, pc}
 800b174:	200020cc 	.word	0x200020cc
 800b178:	200020e7 	.word	0x200020e7
 800b17c:	200020ed 	.word	0x200020ed
 800b180:	200020d8 	.word	0x200020d8
 800b184:	200020e9 	.word	0x200020e9
 800b188:	200020ee 	.word	0x200020ee
 800b18c:	200020dd 	.word	0x200020dd
 800b190:	200020eb 	.word	0x200020eb
 800b194:	200020ef 	.word	0x200020ef
 800b198:	200020e2 	.word	0x200020e2

0800b19c <flash_info_rand_seed_increment>:
    }
}


static void flash_info_rand_seed_increment(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.strip_info.rand_seed += 1;
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <flash_info_rand_seed_increment+0x24>)
 800b1a2:	f8b3 3027 	ldrh.w	r3, [r3, #39]	; 0x27
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <flash_info_rand_seed_increment+0x24>)
 800b1ae:	f8a3 2027 	strh.w	r2, [r3, #39]	; 0x27
    flash_access_write_sector(g_flash_info_block.flat_data_uint64, FLASH_INFO_SUB_BLOCK_CONFIG);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4802      	ldr	r0, [pc, #8]	; (800b1c0 <flash_info_rand_seed_increment+0x24>)
 800b1b6:	f7ff fee9 	bl	800af8c <flash_access_write_sector>
}
 800b1ba:	bf00      	nop
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200020cc 	.word	0x200020cc

0800b1c4 <flash_info_init>:


void flash_info_init(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
    uint32_t rand_color = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]
    uint32_t rand_animation = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	613b      	str	r3, [r7, #16]
    uint32_t uid_0 = HAL_GetUIDw0();
 800b1d2:	f7fa fb7f 	bl	80058d4 <HAL_GetUIDw0>
 800b1d6:	60f8      	str	r0, [r7, #12]
    uint32_t uid_1 = HAL_GetUIDw1();
 800b1d8:	f7fa fb88 	bl	80058ec <HAL_GetUIDw1>
 800b1dc:	60b8      	str	r0, [r7, #8]
    uint32_t uid_2 = HAL_GetUIDw2();
 800b1de:	f7fa fb91 	bl	8005904 <HAL_GetUIDw2>
 800b1e2:	6078      	str	r0, [r7, #4]
    flash_access_read_sector(&g_flash_info_block.flat_data_uint8, FLASH_INFO_SUB_BLOCK_CONFIG);
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	483a      	ldr	r0, [pc, #232]	; (800b2d0 <flash_info_init+0x10c>)
 800b1e8:	f7ff feb0 	bl	800af4c <flash_access_read_sector>
    // check if UUID is set in flash block.  If not then init RAM struct and store to FLASH.
    if ((uid_0 != g_flash_info_block.flash_info_data.uuid0) && \
 800b1ec:	4b38      	ldr	r3, [pc, #224]	; (800b2d0 <flash_info_init+0x10c>)
 800b1ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d00d      	beq.n	800b214 <flash_info_init+0x50>
                    (uid_1 != g_flash_info_block.flash_info_data.uuid1) && \
 800b1f8:	4b35      	ldr	r3, [pc, #212]	; (800b2d0 <flash_info_init+0x10c>)
 800b1fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((uid_0 != g_flash_info_block.flash_info_data.uuid0) && \
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	429a      	cmp	r2, r3
 800b202:	d007      	beq.n	800b214 <flash_info_init+0x50>
                    (uid_2 != g_flash_info_block.flash_info_data.uuid2))
 800b204:	4b32      	ldr	r3, [pc, #200]	; (800b2d0 <flash_info_init+0x10c>)
 800b206:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (uid_1 != g_flash_info_block.flash_info_data.uuid1) && \
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d001      	beq.n	800b214 <flash_info_init+0x50>
    {
        flash_info_block_init();
 800b210:	f7ff ff36 	bl	800b080 <flash_info_block_init>
    }
    flash_info_rand_seed_increment();
 800b214:	f7ff ffc2 	bl	800b19c <flash_info_rand_seed_increment>
    srand(g_flash_info_block.flash_info_data.strip_info.rand_seed);
 800b218:	4b2d      	ldr	r3, [pc, #180]	; (800b2d0 <flash_info_init+0x10c>)
 800b21a:	f8b3 3027 	ldrh.w	r3, [r3, #39]	; 0x27
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fa1b 	bl	800b65c <srand>
    rand_color = (uint32_t)((double)rand() / ((double)RAND_MAX + 1) * (NUM_COLORS - 1));
 800b226:	f000 fa47 	bl	800b6b8 <rand>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7f5 f971 	bl	8000514 <__aeabi_i2d>
 800b232:	f04f 0200 	mov.w	r2, #0
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <flash_info_init+0x110>)
 800b238:	f7f5 fb00 	bl	800083c <__aeabi_ddiv>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4610      	mov	r0, r2
 800b242:	4619      	mov	r1, r3
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	4b23      	ldr	r3, [pc, #140]	; (800b2d8 <flash_info_init+0x114>)
 800b24a:	f7f5 f9cd 	bl	80005e8 <__aeabi_dmul>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	4610      	mov	r0, r2
 800b254:	4619      	mov	r1, r3
 800b256:	f7f5 fbd9 	bl	8000a0c <__aeabi_d2uiz>
 800b25a:	4603      	mov	r3, r0
 800b25c:	617b      	str	r3, [r7, #20]
    g_flash_info_block.flash_info_data.strip_info.strip_start_color = (all_colors_e)rand_color;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	b29a      	uxth	r2, r3
 800b262:	4b1b      	ldr	r3, [pc, #108]	; (800b2d0 <flash_info_init+0x10c>)
 800b264:	f8a3 2029 	strh.w	r2, [r3, #41]	; 0x29
    if (COLORS_BLACK == g_flash_info_block.flash_info_data.strip_info.strip_start_color) g_flash_info_block.flash_info_data.strip_info.strip_start_color = COLORS_LIME;
 800b268:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <flash_info_init+0x10c>)
 800b26a:	f8b3 3029 	ldrh.w	r3, [r3, #41]	; 0x29
 800b26e:	b29b      	uxth	r3, r3
 800b270:	2b1d      	cmp	r3, #29
 800b272:	d108      	bne.n	800b286 <flash_info_init+0xc2>
 800b274:	4b16      	ldr	r3, [pc, #88]	; (800b2d0 <flash_info_init+0x10c>)
 800b276:	2200      	movs	r2, #0
 800b278:	f042 021e 	orr.w	r2, r2, #30
 800b27c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b280:	2200      	movs	r2, #0
 800b282:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    rand_animation = (uint32_t)((double)rand() / ((double)RAND_MAX + 1) * (NUM_LED_STATES - 1));
 800b286:	f000 fa17 	bl	800b6b8 <rand>
 800b28a:	4603      	mov	r3, r0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f5 f941 	bl	8000514 <__aeabi_i2d>
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <flash_info_init+0x110>)
 800b298:	f7f5 fad0 	bl	800083c <__aeabi_ddiv>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <flash_info_init+0x118>)
 800b2aa:	f7f5 f99d 	bl	80005e8 <__aeabi_dmul>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	f7f5 fba9 	bl	8000a0c <__aeabi_d2uiz>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	613b      	str	r3, [r7, #16]
    g_flash_info_block.flash_info_data.strip_info.strip_start_animation = rand_animation;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <flash_info_init+0x10c>)
 800b2c4:	f8a3 202b 	strh.w	r2, [r3, #43]	; 0x2b
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	200020cc 	.word	0x200020cc
 800b2d4:	41e00000 	.word	0x41e00000
 800b2d8:	40430000 	.word	0x40430000
 800b2dc:	40220000 	.word	0x40220000

0800b2e0 <flash_info_read_led_start_color>:


all_colors_e flash_info_read_led_start_color(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
    return g_flash_info_block.flash_info_data.strip_info.strip_start_color;
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <flash_info_read_led_start_color+0x18>)
 800b2e6:	f8b3 3029 	ldrh.w	r3, [r3, #41]	; 0x29
 800b2ea:	b29b      	uxth	r3, r3
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	200020cc 	.word	0x200020cc

0800b2fc <flash_info_read_led_start_animation>:


led_state_e flash_info_read_led_start_animation(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
    return g_flash_info_block.flash_info_data.strip_info.strip_start_animation;
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <flash_info_read_led_start_animation+0x18>)
 800b302:	f8b3 302b 	ldrh.w	r3, [r3, #43]	; 0x2b
 800b306:	b29b      	uxth	r3, r3
}
 800b308:	4618      	mov	r0, r3
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	200020cc 	.word	0x200020cc

0800b318 <main>:
#include "animate_led.h"
#include "flash_info.h"


int main(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800b31c:	f7ff f890 	bl	800a440 <board_init_common_board_init>
    flash_info_init();
 800b320:	f7ff ff50 	bl	800b1c4 <flash_info_init>
    task_create();
 800b324:	f000 f808 	bl	800b338 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b328:	f7f6 fbc0 	bl	8001aac <reset_ws2812b>
	osKernelStart();
 800b32c:	f7f7 fbdc 	bl	8002ae8 <osKernelStart>
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b33c:	f7f7 fbb0 	bl	8002aa0 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b340:	4a0a      	ldr	r2, [pc, #40]	; (800b36c <task_create+0x34>)
 800b342:	2100      	movs	r1, #0
 800b344:	480a      	ldr	r0, [pc, #40]	; (800b370 <task_create+0x38>)
 800b346:	f7f7 fbf5 	bl	8002b34 <osThreadNew>
 800b34a:	4603      	mov	r3, r0
 800b34c:	4a09      	ldr	r2, [pc, #36]	; (800b374 <task_create+0x3c>)
 800b34e:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800b350:	4a09      	ldr	r2, [pc, #36]	; (800b378 <task_create+0x40>)
 800b352:	2100      	movs	r1, #0
 800b354:	4809      	ldr	r0, [pc, #36]	; (800b37c <task_create+0x44>)
 800b356:	f7f7 fbed 	bl	8002b34 <osThreadNew>
 800b35a:	4603      	mov	r3, r0
 800b35c:	4a08      	ldr	r2, [pc, #32]	; (800b380 <task_create+0x48>)
 800b35e:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b360:	4b08      	ldr	r3, [pc, #32]	; (800b384 <task_create+0x4c>)
 800b362:	2201      	movs	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
}
 800b366:	bf00      	nop
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	0800c6bc 	.word	0x0800c6bc
 800b370:	0800213d 	.word	0x0800213d
 800b374:	200028d0 	.word	0x200028d0
 800b378:	0800c6e0 	.word	0x0800c6e0
 800b37c:	08002461 	.word	0x08002461
 800b380:	200028cc 	.word	0x200028cc
 800b384:	2000398c 	.word	0x2000398c

0800b388 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800b392:	f000 f991 	bl	800b6b8 <rand>
 800b396:	4603      	mov	r3, r0
 800b398:	461a      	mov	r2, r3
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	1acb      	subs	r3, r1, r3
 800b3a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3a4:	fb01 f303 	mul.w	r3, r1, r3
 800b3a8:	1ad2      	subs	r2, r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4413      	add	r3, r2
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b3b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b3bc:	f7ff fdb4 	bl	800af28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b3c0:	480c      	ldr	r0, [pc, #48]	; (800b3f4 <LoopForever+0x6>)
  ldr r1, =_edata
 800b3c2:	490d      	ldr	r1, [pc, #52]	; (800b3f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b3c4:	4a0d      	ldr	r2, [pc, #52]	; (800b3fc <LoopForever+0xe>)
  movs r3, #0
 800b3c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b3c8:	e002      	b.n	800b3d0 <LoopCopyDataInit>

0800b3ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b3ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b3cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b3ce:	3304      	adds	r3, #4

0800b3d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b3d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b3d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b3d4:	d3f9      	bcc.n	800b3ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b3d6:	4a0a      	ldr	r2, [pc, #40]	; (800b400 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b3d8:	4c0a      	ldr	r4, [pc, #40]	; (800b404 <LoopForever+0x16>)
  movs r3, #0
 800b3da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b3dc:	e001      	b.n	800b3e2 <LoopFillZerobss>

0800b3de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b3de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b3e0:	3204      	adds	r2, #4

0800b3e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b3e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b3e4:	d3fb      	bcc.n	800b3de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b3e6:	f000 f817 	bl	800b418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b3ea:	f7ff ff95 	bl	800b318 <main>

0800b3ee <LoopForever>:

LoopForever:
    b LoopForever
 800b3ee:	e7fe      	b.n	800b3ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b3f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b3f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b3f8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 800b3fc:	0800c85c 	.word	0x0800c85c
  ldr r2, =_sbss
 800b400:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800b404:	200039a0 	.word	0x200039a0

0800b408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b408:	e7fe      	b.n	800b408 <ADC1_IRQHandler>
	...

0800b40c <__errno>:
 800b40c:	4b01      	ldr	r3, [pc, #4]	; (800b414 <__errno+0x8>)
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	200001c4 	.word	0x200001c4

0800b418 <__libc_init_array>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	4d0d      	ldr	r5, [pc, #52]	; (800b450 <__libc_init_array+0x38>)
 800b41c:	4c0d      	ldr	r4, [pc, #52]	; (800b454 <__libc_init_array+0x3c>)
 800b41e:	1b64      	subs	r4, r4, r5
 800b420:	10a4      	asrs	r4, r4, #2
 800b422:	2600      	movs	r6, #0
 800b424:	42a6      	cmp	r6, r4
 800b426:	d109      	bne.n	800b43c <__libc_init_array+0x24>
 800b428:	4d0b      	ldr	r5, [pc, #44]	; (800b458 <__libc_init_array+0x40>)
 800b42a:	4c0c      	ldr	r4, [pc, #48]	; (800b45c <__libc_init_array+0x44>)
 800b42c:	f001 f8c8 	bl	800c5c0 <_init>
 800b430:	1b64      	subs	r4, r4, r5
 800b432:	10a4      	asrs	r4, r4, #2
 800b434:	2600      	movs	r6, #0
 800b436:	42a6      	cmp	r6, r4
 800b438:	d105      	bne.n	800b446 <__libc_init_array+0x2e>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b440:	4798      	blx	r3
 800b442:	3601      	adds	r6, #1
 800b444:	e7ee      	b.n	800b424 <__libc_init_array+0xc>
 800b446:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44a:	4798      	blx	r3
 800b44c:	3601      	adds	r6, #1
 800b44e:	e7f2      	b.n	800b436 <__libc_init_array+0x1e>
 800b450:	0800c854 	.word	0x0800c854
 800b454:	0800c854 	.word	0x0800c854
 800b458:	0800c854 	.word	0x0800c854
 800b45c:	0800c858 	.word	0x0800c858

0800b460 <malloc>:
 800b460:	4b02      	ldr	r3, [pc, #8]	; (800b46c <malloc+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f000 b885 	b.w	800b574 <_malloc_r>
 800b46a:	bf00      	nop
 800b46c:	200001c4 	.word	0x200001c4

0800b470 <memcpy>:
 800b470:	440a      	add	r2, r1
 800b472:	4291      	cmp	r1, r2
 800b474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b478:	d100      	bne.n	800b47c <memcpy+0xc>
 800b47a:	4770      	bx	lr
 800b47c:	b510      	push	{r4, lr}
 800b47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b486:	4291      	cmp	r1, r2
 800b488:	d1f9      	bne.n	800b47e <memcpy+0xe>
 800b48a:	bd10      	pop	{r4, pc}

0800b48c <memset>:
 800b48c:	4402      	add	r2, r0
 800b48e:	4603      	mov	r3, r0
 800b490:	4293      	cmp	r3, r2
 800b492:	d100      	bne.n	800b496 <memset+0xa>
 800b494:	4770      	bx	lr
 800b496:	f803 1b01 	strb.w	r1, [r3], #1
 800b49a:	e7f9      	b.n	800b490 <memset+0x4>

0800b49c <_free_r>:
 800b49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d044      	beq.n	800b52c <_free_r+0x90>
 800b4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a6:	9001      	str	r0, [sp, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ae:	bfb8      	it	lt
 800b4b0:	18e4      	addlt	r4, r4, r3
 800b4b2:	f000 f9ab 	bl	800b80c <__malloc_lock>
 800b4b6:	4a1e      	ldr	r2, [pc, #120]	; (800b530 <_free_r+0x94>)
 800b4b8:	9801      	ldr	r0, [sp, #4]
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x30>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	b003      	add	sp, #12
 800b4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c8:	f000 b9a6 	b.w	800b818 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x46>
 800b4d0:	6825      	ldr	r5, [r4, #0]
 800b4d2:	1961      	adds	r1, r4, r5
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1949      	addeq	r1, r1, r5
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x22>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x50>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x46>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1855      	adds	r5, r2, r1
 800b4f0:	42a5      	cmp	r5, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x70>
 800b4f4:	6824      	ldr	r4, [r4, #0]
 800b4f6:	4421      	add	r1, r4
 800b4f8:	1854      	adds	r4, r2, r1
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x26>
 800b500:	681c      	ldr	r4, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	6053      	str	r3, [r2, #4]
 800b506:	4421      	add	r1, r4
 800b508:	6011      	str	r1, [r2, #0]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x26>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x78>
 800b50e:	230c      	movs	r3, #12
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x26>
 800b514:	6825      	ldr	r5, [r4, #0]
 800b516:	1961      	adds	r1, r4, r5
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf04      	itt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	bf04      	itt	eq
 800b524:	1949      	addeq	r1, r1, r5
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6054      	str	r4, [r2, #4]
 800b52a:	e7ca      	b.n	800b4c2 <_free_r+0x26>
 800b52c:	b003      	add	sp, #12
 800b52e:	bd30      	pop	{r4, r5, pc}
 800b530:	20003990 	.word	0x20003990

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0e      	ldr	r6, [pc, #56]	; (800b570 <sbrk_aligned+0x3c>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f000 f8f8 	bl	800b734 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 f8f3 	bl	800b734 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d00a      	beq.n	800b568 <sbrk_aligned+0x34>
 800b552:	1cc4      	adds	r4, r0, #3
 800b554:	f024 0403 	bic.w	r4, r4, #3
 800b558:	42a0      	cmp	r0, r4
 800b55a:	d007      	beq.n	800b56c <sbrk_aligned+0x38>
 800b55c:	1a21      	subs	r1, r4, r0
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 f8e8 	bl	800b734 <_sbrk_r>
 800b564:	3001      	adds	r0, #1
 800b566:	d101      	bne.n	800b56c <sbrk_aligned+0x38>
 800b568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b56c:	4620      	mov	r0, r4
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	20003994 	.word	0x20003994

0800b574 <_malloc_r>:
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	1ccd      	adds	r5, r1, #3
 800b57a:	f025 0503 	bic.w	r5, r5, #3
 800b57e:	3508      	adds	r5, #8
 800b580:	2d0c      	cmp	r5, #12
 800b582:	bf38      	it	cc
 800b584:	250c      	movcc	r5, #12
 800b586:	2d00      	cmp	r5, #0
 800b588:	4607      	mov	r7, r0
 800b58a:	db01      	blt.n	800b590 <_malloc_r+0x1c>
 800b58c:	42a9      	cmp	r1, r5
 800b58e:	d905      	bls.n	800b59c <_malloc_r+0x28>
 800b590:	230c      	movs	r3, #12
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	2600      	movs	r6, #0
 800b596:	4630      	mov	r0, r6
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59c:	4e2e      	ldr	r6, [pc, #184]	; (800b658 <_malloc_r+0xe4>)
 800b59e:	f000 f935 	bl	800b80c <__malloc_lock>
 800b5a2:	6833      	ldr	r3, [r6, #0]
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	bb34      	cbnz	r4, 800b5f6 <_malloc_r+0x82>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f7ff ffc2 	bl	800b534 <sbrk_aligned>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	d14d      	bne.n	800b652 <_malloc_r+0xde>
 800b5b6:	6834      	ldr	r4, [r6, #0]
 800b5b8:	4626      	mov	r6, r4
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d140      	bne.n	800b640 <_malloc_r+0xcc>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	eb04 0803 	add.w	r8, r4, r3
 800b5c8:	f000 f8b4 	bl	800b734 <_sbrk_r>
 800b5cc:	4580      	cmp	r8, r0
 800b5ce:	d13a      	bne.n	800b646 <_malloc_r+0xd2>
 800b5d0:	6821      	ldr	r1, [r4, #0]
 800b5d2:	3503      	adds	r5, #3
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	f025 0503 	bic.w	r5, r5, #3
 800b5da:	3508      	adds	r5, #8
 800b5dc:	2d0c      	cmp	r5, #12
 800b5de:	bf38      	it	cc
 800b5e0:	250c      	movcc	r5, #12
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f7ff ffa5 	bl	800b534 <sbrk_aligned>
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d02b      	beq.n	800b646 <_malloc_r+0xd2>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	442b      	add	r3, r5
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	e00e      	b.n	800b614 <_malloc_r+0xa0>
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	1b52      	subs	r2, r2, r5
 800b5fa:	d41e      	bmi.n	800b63a <_malloc_r+0xc6>
 800b5fc:	2a0b      	cmp	r2, #11
 800b5fe:	d916      	bls.n	800b62e <_malloc_r+0xba>
 800b600:	1961      	adds	r1, r4, r5
 800b602:	42a3      	cmp	r3, r4
 800b604:	6025      	str	r5, [r4, #0]
 800b606:	bf18      	it	ne
 800b608:	6059      	strne	r1, [r3, #4]
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	bf08      	it	eq
 800b60e:	6031      	streq	r1, [r6, #0]
 800b610:	5162      	str	r2, [r4, r5]
 800b612:	604b      	str	r3, [r1, #4]
 800b614:	4638      	mov	r0, r7
 800b616:	f104 060b 	add.w	r6, r4, #11
 800b61a:	f000 f8fd 	bl	800b818 <__malloc_unlock>
 800b61e:	f026 0607 	bic.w	r6, r6, #7
 800b622:	1d23      	adds	r3, r4, #4
 800b624:	1af2      	subs	r2, r6, r3
 800b626:	d0b6      	beq.n	800b596 <_malloc_r+0x22>
 800b628:	1b9b      	subs	r3, r3, r6
 800b62a:	50a3      	str	r3, [r4, r2]
 800b62c:	e7b3      	b.n	800b596 <_malloc_r+0x22>
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	42a3      	cmp	r3, r4
 800b632:	bf0c      	ite	eq
 800b634:	6032      	streq	r2, [r6, #0]
 800b636:	605a      	strne	r2, [r3, #4]
 800b638:	e7ec      	b.n	800b614 <_malloc_r+0xa0>
 800b63a:	4623      	mov	r3, r4
 800b63c:	6864      	ldr	r4, [r4, #4]
 800b63e:	e7b2      	b.n	800b5a6 <_malloc_r+0x32>
 800b640:	4634      	mov	r4, r6
 800b642:	6876      	ldr	r6, [r6, #4]
 800b644:	e7b9      	b.n	800b5ba <_malloc_r+0x46>
 800b646:	230c      	movs	r3, #12
 800b648:	603b      	str	r3, [r7, #0]
 800b64a:	4638      	mov	r0, r7
 800b64c:	f000 f8e4 	bl	800b818 <__malloc_unlock>
 800b650:	e7a1      	b.n	800b596 <_malloc_r+0x22>
 800b652:	6025      	str	r5, [r4, #0]
 800b654:	e7de      	b.n	800b614 <_malloc_r+0xa0>
 800b656:	bf00      	nop
 800b658:	20003990 	.word	0x20003990

0800b65c <srand>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <srand+0x44>)
 800b660:	681d      	ldr	r5, [r3, #0]
 800b662:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b664:	4604      	mov	r4, r0
 800b666:	b9b3      	cbnz	r3, 800b696 <srand+0x3a>
 800b668:	2018      	movs	r0, #24
 800b66a:	f7ff fef9 	bl	800b460 <malloc>
 800b66e:	4602      	mov	r2, r0
 800b670:	63a8      	str	r0, [r5, #56]	; 0x38
 800b672:	b920      	cbnz	r0, 800b67e <srand+0x22>
 800b674:	4b0b      	ldr	r3, [pc, #44]	; (800b6a4 <srand+0x48>)
 800b676:	480c      	ldr	r0, [pc, #48]	; (800b6a8 <srand+0x4c>)
 800b678:	2142      	movs	r1, #66	; 0x42
 800b67a:	f000 f885 	bl	800b788 <__assert_func>
 800b67e:	490b      	ldr	r1, [pc, #44]	; (800b6ac <srand+0x50>)
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <srand+0x54>)
 800b682:	e9c0 1300 	strd	r1, r3, [r0]
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <srand+0x58>)
 800b688:	6083      	str	r3, [r0, #8]
 800b68a:	230b      	movs	r3, #11
 800b68c:	8183      	strh	r3, [r0, #12]
 800b68e:	2100      	movs	r1, #0
 800b690:	2001      	movs	r0, #1
 800b692:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b696:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b698:	2200      	movs	r2, #0
 800b69a:	611c      	str	r4, [r3, #16]
 800b69c:	615a      	str	r2, [r3, #20]
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	200001c4 	.word	0x200001c4
 800b6a4:	0800c708 	.word	0x0800c708
 800b6a8:	0800c71f 	.word	0x0800c71f
 800b6ac:	abcd330e 	.word	0xabcd330e
 800b6b0:	e66d1234 	.word	0xe66d1234
 800b6b4:	0005deec 	.word	0x0005deec

0800b6b8 <rand>:
 800b6b8:	4b16      	ldr	r3, [pc, #88]	; (800b714 <rand+0x5c>)
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	681c      	ldr	r4, [r3, #0]
 800b6be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6c0:	b9b3      	cbnz	r3, 800b6f0 <rand+0x38>
 800b6c2:	2018      	movs	r0, #24
 800b6c4:	f7ff fecc 	bl	800b460 <malloc>
 800b6c8:	63a0      	str	r0, [r4, #56]	; 0x38
 800b6ca:	b928      	cbnz	r0, 800b6d8 <rand+0x20>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <rand+0x60>)
 800b6d0:	4812      	ldr	r0, [pc, #72]	; (800b71c <rand+0x64>)
 800b6d2:	214e      	movs	r1, #78	; 0x4e
 800b6d4:	f000 f858 	bl	800b788 <__assert_func>
 800b6d8:	4a11      	ldr	r2, [pc, #68]	; (800b720 <rand+0x68>)
 800b6da:	4b12      	ldr	r3, [pc, #72]	; (800b724 <rand+0x6c>)
 800b6dc:	e9c0 2300 	strd	r2, r3, [r0]
 800b6e0:	4b11      	ldr	r3, [pc, #68]	; (800b728 <rand+0x70>)
 800b6e2:	6083      	str	r3, [r0, #8]
 800b6e4:	230b      	movs	r3, #11
 800b6e6:	8183      	strh	r3, [r0, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b6f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b6f2:	4a0e      	ldr	r2, [pc, #56]	; (800b72c <rand+0x74>)
 800b6f4:	6920      	ldr	r0, [r4, #16]
 800b6f6:	6963      	ldr	r3, [r4, #20]
 800b6f8:	490d      	ldr	r1, [pc, #52]	; (800b730 <rand+0x78>)
 800b6fa:	4342      	muls	r2, r0
 800b6fc:	fb01 2203 	mla	r2, r1, r3, r2
 800b700:	fba0 0101 	umull	r0, r1, r0, r1
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	eb42 0001 	adc.w	r0, r2, r1
 800b70a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b70e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b712:	bd10      	pop	{r4, pc}
 800b714:	200001c4 	.word	0x200001c4
 800b718:	0800c708 	.word	0x0800c708
 800b71c:	0800c71f 	.word	0x0800c71f
 800b720:	abcd330e 	.word	0xabcd330e
 800b724:	e66d1234 	.word	0xe66d1234
 800b728:	0005deec 	.word	0x0005deec
 800b72c:	5851f42d 	.word	0x5851f42d
 800b730:	4c957f2d 	.word	0x4c957f2d

0800b734 <_sbrk_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d06      	ldr	r5, [pc, #24]	; (800b750 <_sbrk_r+0x1c>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f7ff fbbc 	bl	800aebc <_sbrk>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_sbrk_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_sbrk_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	20003998 	.word	0x20003998

0800b754 <time>:
 800b754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <time+0x30>)
 800b758:	2200      	movs	r2, #0
 800b75a:	4669      	mov	r1, sp
 800b75c:	4604      	mov	r4, r0
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	f000 f842 	bl	800b7e8 <_gettimeofday_r>
 800b764:	2800      	cmp	r0, #0
 800b766:	bfbe      	ittt	lt
 800b768:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b76c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b770:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b778:	b10c      	cbz	r4, 800b77e <time+0x2a>
 800b77a:	e9c4 0100 	strd	r0, r1, [r4]
 800b77e:	b004      	add	sp, #16
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	200001c4 	.word	0x200001c4

0800b788 <__assert_func>:
 800b788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b78a:	4614      	mov	r4, r2
 800b78c:	461a      	mov	r2, r3
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <__assert_func+0x2c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4605      	mov	r5, r0
 800b794:	68d8      	ldr	r0, [r3, #12]
 800b796:	b14c      	cbz	r4, 800b7ac <__assert_func+0x24>
 800b798:	4b07      	ldr	r3, [pc, #28]	; (800b7b8 <__assert_func+0x30>)
 800b79a:	9100      	str	r1, [sp, #0]
 800b79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7a0:	4906      	ldr	r1, [pc, #24]	; (800b7bc <__assert_func+0x34>)
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f000 f80e 	bl	800b7c4 <fiprintf>
 800b7a8:	f000 fbea 	bl	800bf80 <abort>
 800b7ac:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <__assert_func+0x38>)
 800b7ae:	461c      	mov	r4, r3
 800b7b0:	e7f3      	b.n	800b79a <__assert_func+0x12>
 800b7b2:	bf00      	nop
 800b7b4:	200001c4 	.word	0x200001c4
 800b7b8:	0800c77a 	.word	0x0800c77a
 800b7bc:	0800c787 	.word	0x0800c787
 800b7c0:	0800c7b5 	.word	0x0800c7b5

0800b7c4 <fiprintf>:
 800b7c4:	b40e      	push	{r1, r2, r3}
 800b7c6:	b503      	push	{r0, r1, lr}
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	ab03      	add	r3, sp, #12
 800b7cc:	4805      	ldr	r0, [pc, #20]	; (800b7e4 <fiprintf+0x20>)
 800b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d2:	6800      	ldr	r0, [r0, #0]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	f000 f84f 	bl	800b878 <_vfiprintf_r>
 800b7da:	b002      	add	sp, #8
 800b7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e0:	b003      	add	sp, #12
 800b7e2:	4770      	bx	lr
 800b7e4:	200001c4 	.word	0x200001c4

0800b7e8 <_gettimeofday_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_gettimeofday_r+0x20>)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	f000 fedb 	bl	800c5b0 <_gettimeofday>
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	d102      	bne.n	800b804 <_gettimeofday_r+0x1c>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b103      	cbz	r3, 800b804 <_gettimeofday_r+0x1c>
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	bd38      	pop	{r3, r4, r5, pc}
 800b806:	bf00      	nop
 800b808:	20003998 	.word	0x20003998

0800b80c <__malloc_lock>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__malloc_lock+0x8>)
 800b80e:	f000 bd77 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800b812:	bf00      	nop
 800b814:	2000399c 	.word	0x2000399c

0800b818 <__malloc_unlock>:
 800b818:	4801      	ldr	r0, [pc, #4]	; (800b820 <__malloc_unlock+0x8>)
 800b81a:	f000 bd72 	b.w	800c302 <__retarget_lock_release_recursive>
 800b81e:	bf00      	nop
 800b820:	2000399c 	.word	0x2000399c

0800b824 <__sfputc_r>:
 800b824:	6893      	ldr	r3, [r2, #8]
 800b826:	3b01      	subs	r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	b410      	push	{r4}
 800b82c:	6093      	str	r3, [r2, #8]
 800b82e:	da08      	bge.n	800b842 <__sfputc_r+0x1e>
 800b830:	6994      	ldr	r4, [r2, #24]
 800b832:	42a3      	cmp	r3, r4
 800b834:	db01      	blt.n	800b83a <__sfputc_r+0x16>
 800b836:	290a      	cmp	r1, #10
 800b838:	d103      	bne.n	800b842 <__sfputc_r+0x1e>
 800b83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b83e:	f000 badf 	b.w	800be00 <__swbuf_r>
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	1c58      	adds	r0, r3, #1
 800b846:	6010      	str	r0, [r2, #0]
 800b848:	7019      	strb	r1, [r3, #0]
 800b84a:	4608      	mov	r0, r1
 800b84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <__sfputs_r>:
 800b852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	4614      	mov	r4, r2
 800b85a:	18d5      	adds	r5, r2, r3
 800b85c:	42ac      	cmp	r4, r5
 800b85e:	d101      	bne.n	800b864 <__sfputs_r+0x12>
 800b860:	2000      	movs	r0, #0
 800b862:	e007      	b.n	800b874 <__sfputs_r+0x22>
 800b864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b868:	463a      	mov	r2, r7
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ffda 	bl	800b824 <__sfputc_r>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d1f3      	bne.n	800b85c <__sfputs_r+0xa>
 800b874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b878 <_vfiprintf_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	460d      	mov	r5, r1
 800b87e:	b09d      	sub	sp, #116	; 0x74
 800b880:	4614      	mov	r4, r2
 800b882:	4698      	mov	r8, r3
 800b884:	4606      	mov	r6, r0
 800b886:	b118      	cbz	r0, 800b890 <_vfiprintf_r+0x18>
 800b888:	6983      	ldr	r3, [r0, #24]
 800b88a:	b90b      	cbnz	r3, 800b890 <_vfiprintf_r+0x18>
 800b88c:	f000 fc9a 	bl	800c1c4 <__sinit>
 800b890:	4b89      	ldr	r3, [pc, #548]	; (800bab8 <_vfiprintf_r+0x240>)
 800b892:	429d      	cmp	r5, r3
 800b894:	d11b      	bne.n	800b8ce <_vfiprintf_r+0x56>
 800b896:	6875      	ldr	r5, [r6, #4]
 800b898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b89a:	07d9      	lsls	r1, r3, #31
 800b89c:	d405      	bmi.n	800b8aa <_vfiprintf_r+0x32>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	059a      	lsls	r2, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_vfiprintf_r+0x32>
 800b8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a6:	f000 fd2b 	bl	800c300 <__retarget_lock_acquire_recursive>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	071b      	lsls	r3, r3, #28
 800b8ae:	d501      	bpl.n	800b8b4 <_vfiprintf_r+0x3c>
 800b8b0:	692b      	ldr	r3, [r5, #16]
 800b8b2:	b9eb      	cbnz	r3, 800b8f0 <_vfiprintf_r+0x78>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f000 faf4 	bl	800bea4 <__swsetup_r>
 800b8bc:	b1c0      	cbz	r0, 800b8f0 <_vfiprintf_r+0x78>
 800b8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c0:	07dc      	lsls	r4, r3, #31
 800b8c2:	d50e      	bpl.n	800b8e2 <_vfiprintf_r+0x6a>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c8:	b01d      	add	sp, #116	; 0x74
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	4b7b      	ldr	r3, [pc, #492]	; (800babc <_vfiprintf_r+0x244>)
 800b8d0:	429d      	cmp	r5, r3
 800b8d2:	d101      	bne.n	800b8d8 <_vfiprintf_r+0x60>
 800b8d4:	68b5      	ldr	r5, [r6, #8]
 800b8d6:	e7df      	b.n	800b898 <_vfiprintf_r+0x20>
 800b8d8:	4b79      	ldr	r3, [pc, #484]	; (800bac0 <_vfiprintf_r+0x248>)
 800b8da:	429d      	cmp	r5, r3
 800b8dc:	bf08      	it	eq
 800b8de:	68f5      	ldreq	r5, [r6, #12]
 800b8e0:	e7da      	b.n	800b898 <_vfiprintf_r+0x20>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	0598      	lsls	r0, r3, #22
 800b8e6:	d4ed      	bmi.n	800b8c4 <_vfiprintf_r+0x4c>
 800b8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ea:	f000 fd0a 	bl	800c302 <__retarget_lock_release_recursive>
 800b8ee:	e7e9      	b.n	800b8c4 <_vfiprintf_r+0x4c>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8fe:	2330      	movs	r3, #48	; 0x30
 800b900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bac4 <_vfiprintf_r+0x24c>
 800b904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b908:	f04f 0901 	mov.w	r9, #1
 800b90c:	4623      	mov	r3, r4
 800b90e:	469a      	mov	sl, r3
 800b910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b914:	b10a      	cbz	r2, 800b91a <_vfiprintf_r+0xa2>
 800b916:	2a25      	cmp	r2, #37	; 0x25
 800b918:	d1f9      	bne.n	800b90e <_vfiprintf_r+0x96>
 800b91a:	ebba 0b04 	subs.w	fp, sl, r4
 800b91e:	d00b      	beq.n	800b938 <_vfiprintf_r+0xc0>
 800b920:	465b      	mov	r3, fp
 800b922:	4622      	mov	r2, r4
 800b924:	4629      	mov	r1, r5
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ff93 	bl	800b852 <__sfputs_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	f000 80aa 	beq.w	800ba86 <_vfiprintf_r+0x20e>
 800b932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b934:	445a      	add	r2, fp
 800b936:	9209      	str	r2, [sp, #36]	; 0x24
 800b938:	f89a 3000 	ldrb.w	r3, [sl]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 80a2 	beq.w	800ba86 <_vfiprintf_r+0x20e>
 800b942:	2300      	movs	r3, #0
 800b944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94c:	f10a 0a01 	add.w	sl, sl, #1
 800b950:	9304      	str	r3, [sp, #16]
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b958:	931a      	str	r3, [sp, #104]	; 0x68
 800b95a:	4654      	mov	r4, sl
 800b95c:	2205      	movs	r2, #5
 800b95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b962:	4858      	ldr	r0, [pc, #352]	; (800bac4 <_vfiprintf_r+0x24c>)
 800b964:	f7f4 fc34 	bl	80001d0 <memchr>
 800b968:	9a04      	ldr	r2, [sp, #16]
 800b96a:	b9d8      	cbnz	r0, 800b9a4 <_vfiprintf_r+0x12c>
 800b96c:	06d1      	lsls	r1, r2, #27
 800b96e:	bf44      	itt	mi
 800b970:	2320      	movmi	r3, #32
 800b972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b976:	0713      	lsls	r3, r2, #28
 800b978:	bf44      	itt	mi
 800b97a:	232b      	movmi	r3, #43	; 0x2b
 800b97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b980:	f89a 3000 	ldrb.w	r3, [sl]
 800b984:	2b2a      	cmp	r3, #42	; 0x2a
 800b986:	d015      	beq.n	800b9b4 <_vfiprintf_r+0x13c>
 800b988:	9a07      	ldr	r2, [sp, #28]
 800b98a:	4654      	mov	r4, sl
 800b98c:	2000      	movs	r0, #0
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4621      	mov	r1, r4
 800b994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b998:	3b30      	subs	r3, #48	; 0x30
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	d94e      	bls.n	800ba3c <_vfiprintf_r+0x1c4>
 800b99e:	b1b0      	cbz	r0, 800b9ce <_vfiprintf_r+0x156>
 800b9a0:	9207      	str	r2, [sp, #28]
 800b9a2:	e014      	b.n	800b9ce <_vfiprintf_r+0x156>
 800b9a4:	eba0 0308 	sub.w	r3, r0, r8
 800b9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	46a2      	mov	sl, r4
 800b9b2:	e7d2      	b.n	800b95a <_vfiprintf_r+0xe2>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1d19      	adds	r1, r3, #4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	9103      	str	r1, [sp, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfbb      	ittet	lt
 800b9c0:	425b      	neglt	r3, r3
 800b9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c6:	9307      	strge	r3, [sp, #28]
 800b9c8:	9307      	strlt	r3, [sp, #28]
 800b9ca:	bfb8      	it	lt
 800b9cc:	9204      	strlt	r2, [sp, #16]
 800b9ce:	7823      	ldrb	r3, [r4, #0]
 800b9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d2:	d10c      	bne.n	800b9ee <_vfiprintf_r+0x176>
 800b9d4:	7863      	ldrb	r3, [r4, #1]
 800b9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d8:	d135      	bne.n	800ba46 <_vfiprintf_r+0x1ce>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	9203      	str	r2, [sp, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bfb8      	it	lt
 800b9e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9ea:	3402      	adds	r4, #2
 800b9ec:	9305      	str	r3, [sp, #20]
 800b9ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bad4 <_vfiprintf_r+0x25c>
 800b9f2:	7821      	ldrb	r1, [r4, #0]
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	f7f4 fbea 	bl	80001d0 <memchr>
 800b9fc:	b140      	cbz	r0, 800ba10 <_vfiprintf_r+0x198>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	eba0 000a 	sub.w	r0, r0, sl
 800ba04:	fa03 f000 	lsl.w	r0, r3, r0
 800ba08:	9b04      	ldr	r3, [sp, #16]
 800ba0a:	4303      	orrs	r3, r0
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	482c      	ldr	r0, [pc, #176]	; (800bac8 <_vfiprintf_r+0x250>)
 800ba16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	f7f4 fbd8 	bl	80001d0 <memchr>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d03f      	beq.n	800baa4 <_vfiprintf_r+0x22c>
 800ba24:	4b29      	ldr	r3, [pc, #164]	; (800bacc <_vfiprintf_r+0x254>)
 800ba26:	bb1b      	cbnz	r3, 800ba70 <_vfiprintf_r+0x1f8>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	f023 0307 	bic.w	r3, r3, #7
 800ba30:	3308      	adds	r3, #8
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	443b      	add	r3, r7
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	e767      	b.n	800b90c <_vfiprintf_r+0x94>
 800ba3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba40:	460c      	mov	r4, r1
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7a5      	b.n	800b992 <_vfiprintf_r+0x11a>
 800ba46:	2300      	movs	r3, #0
 800ba48:	3401      	adds	r4, #1
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f04f 0c0a 	mov.w	ip, #10
 800ba52:	4620      	mov	r0, r4
 800ba54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba58:	3a30      	subs	r2, #48	; 0x30
 800ba5a:	2a09      	cmp	r2, #9
 800ba5c:	d903      	bls.n	800ba66 <_vfiprintf_r+0x1ee>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0c5      	beq.n	800b9ee <_vfiprintf_r+0x176>
 800ba62:	9105      	str	r1, [sp, #20]
 800ba64:	e7c3      	b.n	800b9ee <_vfiprintf_r+0x176>
 800ba66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f0      	b.n	800ba52 <_vfiprintf_r+0x1da>
 800ba70:	ab03      	add	r3, sp, #12
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	462a      	mov	r2, r5
 800ba76:	4b16      	ldr	r3, [pc, #88]	; (800bad0 <_vfiprintf_r+0x258>)
 800ba78:	a904      	add	r1, sp, #16
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f3af 8000 	nop.w
 800ba80:	4607      	mov	r7, r0
 800ba82:	1c78      	adds	r0, r7, #1
 800ba84:	d1d6      	bne.n	800ba34 <_vfiprintf_r+0x1bc>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba88:	07d9      	lsls	r1, r3, #31
 800ba8a:	d405      	bmi.n	800ba98 <_vfiprintf_r+0x220>
 800ba8c:	89ab      	ldrh	r3, [r5, #12]
 800ba8e:	059a      	lsls	r2, r3, #22
 800ba90:	d402      	bmi.n	800ba98 <_vfiprintf_r+0x220>
 800ba92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba94:	f000 fc35 	bl	800c302 <__retarget_lock_release_recursive>
 800ba98:	89ab      	ldrh	r3, [r5, #12]
 800ba9a:	065b      	lsls	r3, r3, #25
 800ba9c:	f53f af12 	bmi.w	800b8c4 <_vfiprintf_r+0x4c>
 800baa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baa2:	e711      	b.n	800b8c8 <_vfiprintf_r+0x50>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	462a      	mov	r2, r5
 800baaa:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <_vfiprintf_r+0x258>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f880 	bl	800bbb4 <_printf_i>
 800bab4:	e7e4      	b.n	800ba80 <_vfiprintf_r+0x208>
 800bab6:	bf00      	nop
 800bab8:	0800c80c 	.word	0x0800c80c
 800babc:	0800c82c 	.word	0x0800c82c
 800bac0:	0800c7ec 	.word	0x0800c7ec
 800bac4:	0800c7b6 	.word	0x0800c7b6
 800bac8:	0800c7c0 	.word	0x0800c7c0
 800bacc:	00000000 	.word	0x00000000
 800bad0:	0800b853 	.word	0x0800b853
 800bad4:	0800c7bc 	.word	0x0800c7bc

0800bad8 <_printf_common>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	4616      	mov	r6, r2
 800bade:	4699      	mov	r9, r3
 800bae0:	688a      	ldr	r2, [r1, #8]
 800bae2:	690b      	ldr	r3, [r1, #16]
 800bae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bae8:	4293      	cmp	r3, r2
 800baea:	bfb8      	it	lt
 800baec:	4613      	movlt	r3, r2
 800baee:	6033      	str	r3, [r6, #0]
 800baf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf4:	4607      	mov	r7, r0
 800baf6:	460c      	mov	r4, r1
 800baf8:	b10a      	cbz	r2, 800bafe <_printf_common+0x26>
 800bafa:	3301      	adds	r3, #1
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	0699      	lsls	r1, r3, #26
 800bb02:	bf42      	ittt	mi
 800bb04:	6833      	ldrmi	r3, [r6, #0]
 800bb06:	3302      	addmi	r3, #2
 800bb08:	6033      	strmi	r3, [r6, #0]
 800bb0a:	6825      	ldr	r5, [r4, #0]
 800bb0c:	f015 0506 	ands.w	r5, r5, #6
 800bb10:	d106      	bne.n	800bb20 <_printf_common+0x48>
 800bb12:	f104 0a19 	add.w	sl, r4, #25
 800bb16:	68e3      	ldr	r3, [r4, #12]
 800bb18:	6832      	ldr	r2, [r6, #0]
 800bb1a:	1a9b      	subs	r3, r3, r2
 800bb1c:	42ab      	cmp	r3, r5
 800bb1e:	dc26      	bgt.n	800bb6e <_printf_common+0x96>
 800bb20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb24:	1e13      	subs	r3, r2, #0
 800bb26:	6822      	ldr	r2, [r4, #0]
 800bb28:	bf18      	it	ne
 800bb2a:	2301      	movne	r3, #1
 800bb2c:	0692      	lsls	r2, r2, #26
 800bb2e:	d42b      	bmi.n	800bb88 <_printf_common+0xb0>
 800bb30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb34:	4649      	mov	r1, r9
 800bb36:	4638      	mov	r0, r7
 800bb38:	47c0      	blx	r8
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d01e      	beq.n	800bb7c <_printf_common+0xa4>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	68e5      	ldr	r5, [r4, #12]
 800bb42:	6832      	ldr	r2, [r6, #0]
 800bb44:	f003 0306 	and.w	r3, r3, #6
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	bf08      	it	eq
 800bb4c:	1aad      	subeq	r5, r5, r2
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	bf0c      	ite	eq
 800bb54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb58:	2500      	movne	r5, #0
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	bfc4      	itt	gt
 800bb5e:	1a9b      	subgt	r3, r3, r2
 800bb60:	18ed      	addgt	r5, r5, r3
 800bb62:	2600      	movs	r6, #0
 800bb64:	341a      	adds	r4, #26
 800bb66:	42b5      	cmp	r5, r6
 800bb68:	d11a      	bne.n	800bba0 <_printf_common+0xc8>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	e008      	b.n	800bb80 <_printf_common+0xa8>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4652      	mov	r2, sl
 800bb72:	4649      	mov	r1, r9
 800bb74:	4638      	mov	r0, r7
 800bb76:	47c0      	blx	r8
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d103      	bne.n	800bb84 <_printf_common+0xac>
 800bb7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb84:	3501      	adds	r5, #1
 800bb86:	e7c6      	b.n	800bb16 <_printf_common+0x3e>
 800bb88:	18e1      	adds	r1, r4, r3
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	2030      	movs	r0, #48	; 0x30
 800bb8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb92:	4422      	add	r2, r4
 800bb94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	e7c7      	b.n	800bb30 <_printf_common+0x58>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4622      	mov	r2, r4
 800bba4:	4649      	mov	r1, r9
 800bba6:	4638      	mov	r0, r7
 800bba8:	47c0      	blx	r8
 800bbaa:	3001      	adds	r0, #1
 800bbac:	d0e6      	beq.n	800bb7c <_printf_common+0xa4>
 800bbae:	3601      	adds	r6, #1
 800bbb0:	e7d9      	b.n	800bb66 <_printf_common+0x8e>
	...

0800bbb4 <_printf_i>:
 800bbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	7e0f      	ldrb	r7, [r1, #24]
 800bbba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbbc:	2f78      	cmp	r7, #120	; 0x78
 800bbbe:	4691      	mov	r9, r2
 800bbc0:	4680      	mov	r8, r0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	469a      	mov	sl, r3
 800bbc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbca:	d807      	bhi.n	800bbdc <_printf_i+0x28>
 800bbcc:	2f62      	cmp	r7, #98	; 0x62
 800bbce:	d80a      	bhi.n	800bbe6 <_printf_i+0x32>
 800bbd0:	2f00      	cmp	r7, #0
 800bbd2:	f000 80d8 	beq.w	800bd86 <_printf_i+0x1d2>
 800bbd6:	2f58      	cmp	r7, #88	; 0x58
 800bbd8:	f000 80a3 	beq.w	800bd22 <_printf_i+0x16e>
 800bbdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbe4:	e03a      	b.n	800bc5c <_printf_i+0xa8>
 800bbe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbea:	2b15      	cmp	r3, #21
 800bbec:	d8f6      	bhi.n	800bbdc <_printf_i+0x28>
 800bbee:	a101      	add	r1, pc, #4	; (adr r1, 800bbf4 <_printf_i+0x40>)
 800bbf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc61 	.word	0x0800bc61
 800bbfc:	0800bbdd 	.word	0x0800bbdd
 800bc00:	0800bbdd 	.word	0x0800bbdd
 800bc04:	0800bbdd 	.word	0x0800bbdd
 800bc08:	0800bbdd 	.word	0x0800bbdd
 800bc0c:	0800bc61 	.word	0x0800bc61
 800bc10:	0800bbdd 	.word	0x0800bbdd
 800bc14:	0800bbdd 	.word	0x0800bbdd
 800bc18:	0800bbdd 	.word	0x0800bbdd
 800bc1c:	0800bbdd 	.word	0x0800bbdd
 800bc20:	0800bd6d 	.word	0x0800bd6d
 800bc24:	0800bc91 	.word	0x0800bc91
 800bc28:	0800bd4f 	.word	0x0800bd4f
 800bc2c:	0800bbdd 	.word	0x0800bbdd
 800bc30:	0800bbdd 	.word	0x0800bbdd
 800bc34:	0800bd8f 	.word	0x0800bd8f
 800bc38:	0800bbdd 	.word	0x0800bbdd
 800bc3c:	0800bc91 	.word	0x0800bc91
 800bc40:	0800bbdd 	.word	0x0800bbdd
 800bc44:	0800bbdd 	.word	0x0800bbdd
 800bc48:	0800bd57 	.word	0x0800bd57
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	1d1a      	adds	r2, r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	602a      	str	r2, [r5, #0]
 800bc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e0a3      	b.n	800bda8 <_printf_i+0x1f4>
 800bc60:	6820      	ldr	r0, [r4, #0]
 800bc62:	6829      	ldr	r1, [r5, #0]
 800bc64:	0606      	lsls	r6, r0, #24
 800bc66:	f101 0304 	add.w	r3, r1, #4
 800bc6a:	d50a      	bpl.n	800bc82 <_printf_i+0xce>
 800bc6c:	680e      	ldr	r6, [r1, #0]
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	da03      	bge.n	800bc7c <_printf_i+0xc8>
 800bc74:	232d      	movs	r3, #45	; 0x2d
 800bc76:	4276      	negs	r6, r6
 800bc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc7c:	485e      	ldr	r0, [pc, #376]	; (800bdf8 <_printf_i+0x244>)
 800bc7e:	230a      	movs	r3, #10
 800bc80:	e019      	b.n	800bcb6 <_printf_i+0x102>
 800bc82:	680e      	ldr	r6, [r1, #0]
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc8a:	bf18      	it	ne
 800bc8c:	b236      	sxthne	r6, r6
 800bc8e:	e7ef      	b.n	800bc70 <_printf_i+0xbc>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	1d19      	adds	r1, r3, #4
 800bc96:	6029      	str	r1, [r5, #0]
 800bc98:	0601      	lsls	r1, r0, #24
 800bc9a:	d501      	bpl.n	800bca0 <_printf_i+0xec>
 800bc9c:	681e      	ldr	r6, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <_printf_i+0xf2>
 800bca0:	0646      	lsls	r6, r0, #25
 800bca2:	d5fb      	bpl.n	800bc9c <_printf_i+0xe8>
 800bca4:	881e      	ldrh	r6, [r3, #0]
 800bca6:	4854      	ldr	r0, [pc, #336]	; (800bdf8 <_printf_i+0x244>)
 800bca8:	2f6f      	cmp	r7, #111	; 0x6f
 800bcaa:	bf0c      	ite	eq
 800bcac:	2308      	moveq	r3, #8
 800bcae:	230a      	movne	r3, #10
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcb6:	6865      	ldr	r5, [r4, #4]
 800bcb8:	60a5      	str	r5, [r4, #8]
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	bfa2      	ittt	ge
 800bcbe:	6821      	ldrge	r1, [r4, #0]
 800bcc0:	f021 0104 	bicge.w	r1, r1, #4
 800bcc4:	6021      	strge	r1, [r4, #0]
 800bcc6:	b90e      	cbnz	r6, 800bccc <_printf_i+0x118>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d04d      	beq.n	800bd68 <_printf_i+0x1b4>
 800bccc:	4615      	mov	r5, r2
 800bcce:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcd2:	fb03 6711 	mls	r7, r3, r1, r6
 800bcd6:	5dc7      	ldrb	r7, [r0, r7]
 800bcd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcdc:	4637      	mov	r7, r6
 800bcde:	42bb      	cmp	r3, r7
 800bce0:	460e      	mov	r6, r1
 800bce2:	d9f4      	bls.n	800bcce <_printf_i+0x11a>
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d10b      	bne.n	800bd00 <_printf_i+0x14c>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	07de      	lsls	r6, r3, #31
 800bcec:	d508      	bpl.n	800bd00 <_printf_i+0x14c>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	6861      	ldr	r1, [r4, #4]
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	bfde      	ittt	le
 800bcf6:	2330      	movle	r3, #48	; 0x30
 800bcf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd00:	1b52      	subs	r2, r2, r5
 800bd02:	6122      	str	r2, [r4, #16]
 800bd04:	f8cd a000 	str.w	sl, [sp]
 800bd08:	464b      	mov	r3, r9
 800bd0a:	aa03      	add	r2, sp, #12
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f7ff fee2 	bl	800bad8 <_printf_common>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d14c      	bne.n	800bdb2 <_printf_i+0x1fe>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd1c:	b004      	add	sp, #16
 800bd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd22:	4835      	ldr	r0, [pc, #212]	; (800bdf8 <_printf_i+0x244>)
 800bd24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd28:	6829      	ldr	r1, [r5, #0]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd30:	6029      	str	r1, [r5, #0]
 800bd32:	061d      	lsls	r5, r3, #24
 800bd34:	d514      	bpl.n	800bd60 <_printf_i+0x1ac>
 800bd36:	07df      	lsls	r7, r3, #31
 800bd38:	bf44      	itt	mi
 800bd3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bd3e:	6023      	strmi	r3, [r4, #0]
 800bd40:	b91e      	cbnz	r6, 800bd4a <_printf_i+0x196>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f023 0320 	bic.w	r3, r3, #32
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	2310      	movs	r3, #16
 800bd4c:	e7b0      	b.n	800bcb0 <_printf_i+0xfc>
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	f043 0320 	orr.w	r3, r3, #32
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	2378      	movs	r3, #120	; 0x78
 800bd58:	4828      	ldr	r0, [pc, #160]	; (800bdfc <_printf_i+0x248>)
 800bd5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd5e:	e7e3      	b.n	800bd28 <_printf_i+0x174>
 800bd60:	0659      	lsls	r1, r3, #25
 800bd62:	bf48      	it	mi
 800bd64:	b2b6      	uxthmi	r6, r6
 800bd66:	e7e6      	b.n	800bd36 <_printf_i+0x182>
 800bd68:	4615      	mov	r5, r2
 800bd6a:	e7bb      	b.n	800bce4 <_printf_i+0x130>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	6826      	ldr	r6, [r4, #0]
 800bd70:	6961      	ldr	r1, [r4, #20]
 800bd72:	1d18      	adds	r0, r3, #4
 800bd74:	6028      	str	r0, [r5, #0]
 800bd76:	0635      	lsls	r5, r6, #24
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	d501      	bpl.n	800bd80 <_printf_i+0x1cc>
 800bd7c:	6019      	str	r1, [r3, #0]
 800bd7e:	e002      	b.n	800bd86 <_printf_i+0x1d2>
 800bd80:	0670      	lsls	r0, r6, #25
 800bd82:	d5fb      	bpl.n	800bd7c <_printf_i+0x1c8>
 800bd84:	8019      	strh	r1, [r3, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	4615      	mov	r5, r2
 800bd8c:	e7ba      	b.n	800bd04 <_printf_i+0x150>
 800bd8e:	682b      	ldr	r3, [r5, #0]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	602a      	str	r2, [r5, #0]
 800bd94:	681d      	ldr	r5, [r3, #0]
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7f4 fa18 	bl	80001d0 <memchr>
 800bda0:	b108      	cbz	r0, 800bda6 <_printf_i+0x1f2>
 800bda2:	1b40      	subs	r0, r0, r5
 800bda4:	6060      	str	r0, [r4, #4]
 800bda6:	6863      	ldr	r3, [r4, #4]
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb0:	e7a8      	b.n	800bd04 <_printf_i+0x150>
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	47d0      	blx	sl
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d0ab      	beq.n	800bd18 <_printf_i+0x164>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	079b      	lsls	r3, r3, #30
 800bdc4:	d413      	bmi.n	800bdee <_printf_i+0x23a>
 800bdc6:	68e0      	ldr	r0, [r4, #12]
 800bdc8:	9b03      	ldr	r3, [sp, #12]
 800bdca:	4298      	cmp	r0, r3
 800bdcc:	bfb8      	it	lt
 800bdce:	4618      	movlt	r0, r3
 800bdd0:	e7a4      	b.n	800bd1c <_printf_i+0x168>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	47d0      	blx	sl
 800bddc:	3001      	adds	r0, #1
 800bdde:	d09b      	beq.n	800bd18 <_printf_i+0x164>
 800bde0:	3501      	adds	r5, #1
 800bde2:	68e3      	ldr	r3, [r4, #12]
 800bde4:	9903      	ldr	r1, [sp, #12]
 800bde6:	1a5b      	subs	r3, r3, r1
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	dcf2      	bgt.n	800bdd2 <_printf_i+0x21e>
 800bdec:	e7eb      	b.n	800bdc6 <_printf_i+0x212>
 800bdee:	2500      	movs	r5, #0
 800bdf0:	f104 0619 	add.w	r6, r4, #25
 800bdf4:	e7f5      	b.n	800bde2 <_printf_i+0x22e>
 800bdf6:	bf00      	nop
 800bdf8:	0800c7c7 	.word	0x0800c7c7
 800bdfc:	0800c7d8 	.word	0x0800c7d8

0800be00 <__swbuf_r>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	460e      	mov	r6, r1
 800be04:	4614      	mov	r4, r2
 800be06:	4605      	mov	r5, r0
 800be08:	b118      	cbz	r0, 800be12 <__swbuf_r+0x12>
 800be0a:	6983      	ldr	r3, [r0, #24]
 800be0c:	b90b      	cbnz	r3, 800be12 <__swbuf_r+0x12>
 800be0e:	f000 f9d9 	bl	800c1c4 <__sinit>
 800be12:	4b21      	ldr	r3, [pc, #132]	; (800be98 <__swbuf_r+0x98>)
 800be14:	429c      	cmp	r4, r3
 800be16:	d12b      	bne.n	800be70 <__swbuf_r+0x70>
 800be18:	686c      	ldr	r4, [r5, #4]
 800be1a:	69a3      	ldr	r3, [r4, #24]
 800be1c:	60a3      	str	r3, [r4, #8]
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	071a      	lsls	r2, r3, #28
 800be22:	d52f      	bpl.n	800be84 <__swbuf_r+0x84>
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	b36b      	cbz	r3, 800be84 <__swbuf_r+0x84>
 800be28:	6923      	ldr	r3, [r4, #16]
 800be2a:	6820      	ldr	r0, [r4, #0]
 800be2c:	1ac0      	subs	r0, r0, r3
 800be2e:	6963      	ldr	r3, [r4, #20]
 800be30:	b2f6      	uxtb	r6, r6
 800be32:	4283      	cmp	r3, r0
 800be34:	4637      	mov	r7, r6
 800be36:	dc04      	bgt.n	800be42 <__swbuf_r+0x42>
 800be38:	4621      	mov	r1, r4
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 f92e 	bl	800c09c <_fflush_r>
 800be40:	bb30      	cbnz	r0, 800be90 <__swbuf_r+0x90>
 800be42:	68a3      	ldr	r3, [r4, #8]
 800be44:	3b01      	subs	r3, #1
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	6022      	str	r2, [r4, #0]
 800be4e:	701e      	strb	r6, [r3, #0]
 800be50:	6963      	ldr	r3, [r4, #20]
 800be52:	3001      	adds	r0, #1
 800be54:	4283      	cmp	r3, r0
 800be56:	d004      	beq.n	800be62 <__swbuf_r+0x62>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	07db      	lsls	r3, r3, #31
 800be5c:	d506      	bpl.n	800be6c <__swbuf_r+0x6c>
 800be5e:	2e0a      	cmp	r6, #10
 800be60:	d104      	bne.n	800be6c <__swbuf_r+0x6c>
 800be62:	4621      	mov	r1, r4
 800be64:	4628      	mov	r0, r5
 800be66:	f000 f919 	bl	800c09c <_fflush_r>
 800be6a:	b988      	cbnz	r0, 800be90 <__swbuf_r+0x90>
 800be6c:	4638      	mov	r0, r7
 800be6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <__swbuf_r+0x9c>)
 800be72:	429c      	cmp	r4, r3
 800be74:	d101      	bne.n	800be7a <__swbuf_r+0x7a>
 800be76:	68ac      	ldr	r4, [r5, #8]
 800be78:	e7cf      	b.n	800be1a <__swbuf_r+0x1a>
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <__swbuf_r+0xa0>)
 800be7c:	429c      	cmp	r4, r3
 800be7e:	bf08      	it	eq
 800be80:	68ec      	ldreq	r4, [r5, #12]
 800be82:	e7ca      	b.n	800be1a <__swbuf_r+0x1a>
 800be84:	4621      	mov	r1, r4
 800be86:	4628      	mov	r0, r5
 800be88:	f000 f80c 	bl	800bea4 <__swsetup_r>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d0cb      	beq.n	800be28 <__swbuf_r+0x28>
 800be90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be94:	e7ea      	b.n	800be6c <__swbuf_r+0x6c>
 800be96:	bf00      	nop
 800be98:	0800c80c 	.word	0x0800c80c
 800be9c:	0800c82c 	.word	0x0800c82c
 800bea0:	0800c7ec 	.word	0x0800c7ec

0800bea4 <__swsetup_r>:
 800bea4:	4b32      	ldr	r3, [pc, #200]	; (800bf70 <__swsetup_r+0xcc>)
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	681d      	ldr	r5, [r3, #0]
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
 800beae:	b125      	cbz	r5, 800beba <__swsetup_r+0x16>
 800beb0:	69ab      	ldr	r3, [r5, #24]
 800beb2:	b913      	cbnz	r3, 800beba <__swsetup_r+0x16>
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 f985 	bl	800c1c4 <__sinit>
 800beba:	4b2e      	ldr	r3, [pc, #184]	; (800bf74 <__swsetup_r+0xd0>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d10f      	bne.n	800bee0 <__swsetup_r+0x3c>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec8:	0719      	lsls	r1, r3, #28
 800beca:	d42c      	bmi.n	800bf26 <__swsetup_r+0x82>
 800becc:	06dd      	lsls	r5, r3, #27
 800bece:	d411      	bmi.n	800bef4 <__swsetup_r+0x50>
 800bed0:	2309      	movs	r3, #9
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bede:	e03e      	b.n	800bf5e <__swsetup_r+0xba>
 800bee0:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <__swsetup_r+0xd4>)
 800bee2:	429c      	cmp	r4, r3
 800bee4:	d101      	bne.n	800beea <__swsetup_r+0x46>
 800bee6:	68ac      	ldr	r4, [r5, #8]
 800bee8:	e7eb      	b.n	800bec2 <__swsetup_r+0x1e>
 800beea:	4b24      	ldr	r3, [pc, #144]	; (800bf7c <__swsetup_r+0xd8>)
 800beec:	429c      	cmp	r4, r3
 800beee:	bf08      	it	eq
 800bef0:	68ec      	ldreq	r4, [r5, #12]
 800bef2:	e7e6      	b.n	800bec2 <__swsetup_r+0x1e>
 800bef4:	0758      	lsls	r0, r3, #29
 800bef6:	d512      	bpl.n	800bf1e <__swsetup_r+0x7a>
 800bef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befa:	b141      	cbz	r1, 800bf0e <__swsetup_r+0x6a>
 800befc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf00:	4299      	cmp	r1, r3
 800bf02:	d002      	beq.n	800bf0a <__swsetup_r+0x66>
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff fac9 	bl	800b49c <_free_r>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	2300      	movs	r3, #0
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	f043 0308 	orr.w	r3, r3, #8
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	b94b      	cbnz	r3, 800bf3e <__swsetup_r+0x9a>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf34:	d003      	beq.n	800bf3e <__swsetup_r+0x9a>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 fa09 	bl	800c350 <__smakebuf_r>
 800bf3e:	89a0      	ldrh	r0, [r4, #12]
 800bf40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf44:	f010 0301 	ands.w	r3, r0, #1
 800bf48:	d00a      	beq.n	800bf60 <__swsetup_r+0xbc>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6963      	ldr	r3, [r4, #20]
 800bf50:	425b      	negs	r3, r3
 800bf52:	61a3      	str	r3, [r4, #24]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	b943      	cbnz	r3, 800bf6a <__swsetup_r+0xc6>
 800bf58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf5c:	d1ba      	bne.n	800bed4 <__swsetup_r+0x30>
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	0781      	lsls	r1, r0, #30
 800bf62:	bf58      	it	pl
 800bf64:	6963      	ldrpl	r3, [r4, #20]
 800bf66:	60a3      	str	r3, [r4, #8]
 800bf68:	e7f4      	b.n	800bf54 <__swsetup_r+0xb0>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e7f7      	b.n	800bf5e <__swsetup_r+0xba>
 800bf6e:	bf00      	nop
 800bf70:	200001c4 	.word	0x200001c4
 800bf74:	0800c80c 	.word	0x0800c80c
 800bf78:	0800c82c 	.word	0x0800c82c
 800bf7c:	0800c7ec 	.word	0x0800c7ec

0800bf80 <abort>:
 800bf80:	b508      	push	{r3, lr}
 800bf82:	2006      	movs	r0, #6
 800bf84:	f000 fa4c 	bl	800c420 <raise>
 800bf88:	2001      	movs	r0, #1
 800bf8a:	f7fe ff1f 	bl	800adcc <_exit>
	...

0800bf90 <__sflush_r>:
 800bf90:	898a      	ldrh	r2, [r1, #12]
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	4605      	mov	r5, r0
 800bf98:	0710      	lsls	r0, r2, #28
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	d458      	bmi.n	800c050 <__sflush_r+0xc0>
 800bf9e:	684b      	ldr	r3, [r1, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc05      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	dc02      	bgt.n	800bfb0 <__sflush_r+0x20>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d0f9      	beq.n	800bfaa <__sflush_r+0x1a>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfbc:	682f      	ldr	r7, [r5, #0]
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	d032      	beq.n	800c028 <__sflush_r+0x98>
 800bfc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	075a      	lsls	r2, r3, #29
 800bfc8:	d505      	bpl.n	800bfd6 <__sflush_r+0x46>
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfd0:	b10b      	cbz	r3, 800bfd6 <__sflush_r+0x46>
 800bfd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfd4:	1ac0      	subs	r0, r0, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfdc:	6a21      	ldr	r1, [r4, #32]
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	d106      	bne.n	800bff6 <__sflush_r+0x66>
 800bfe8:	6829      	ldr	r1, [r5, #0]
 800bfea:	291d      	cmp	r1, #29
 800bfec:	d82c      	bhi.n	800c048 <__sflush_r+0xb8>
 800bfee:	4a2a      	ldr	r2, [pc, #168]	; (800c098 <__sflush_r+0x108>)
 800bff0:	40ca      	lsrs	r2, r1
 800bff2:	07d6      	lsls	r6, r2, #31
 800bff4:	d528      	bpl.n	800c048 <__sflush_r+0xb8>
 800bff6:	2200      	movs	r2, #0
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	04d9      	lsls	r1, r3, #19
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	d504      	bpl.n	800c00c <__sflush_r+0x7c>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	d101      	bne.n	800c00a <__sflush_r+0x7a>
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	b903      	cbnz	r3, 800c00c <__sflush_r+0x7c>
 800c00a:	6560      	str	r0, [r4, #84]	; 0x54
 800c00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c00e:	602f      	str	r7, [r5, #0]
 800c010:	2900      	cmp	r1, #0
 800c012:	d0ca      	beq.n	800bfaa <__sflush_r+0x1a>
 800c014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c018:	4299      	cmp	r1, r3
 800c01a:	d002      	beq.n	800c022 <__sflush_r+0x92>
 800c01c:	4628      	mov	r0, r5
 800c01e:	f7ff fa3d 	bl	800b49c <_free_r>
 800c022:	2000      	movs	r0, #0
 800c024:	6360      	str	r0, [r4, #52]	; 0x34
 800c026:	e7c1      	b.n	800bfac <__sflush_r+0x1c>
 800c028:	6a21      	ldr	r1, [r4, #32]
 800c02a:	2301      	movs	r3, #1
 800c02c:	4628      	mov	r0, r5
 800c02e:	47b0      	blx	r6
 800c030:	1c41      	adds	r1, r0, #1
 800c032:	d1c7      	bne.n	800bfc4 <__sflush_r+0x34>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0c4      	beq.n	800bfc4 <__sflush_r+0x34>
 800c03a:	2b1d      	cmp	r3, #29
 800c03c:	d001      	beq.n	800c042 <__sflush_r+0xb2>
 800c03e:	2b16      	cmp	r3, #22
 800c040:	d101      	bne.n	800c046 <__sflush_r+0xb6>
 800c042:	602f      	str	r7, [r5, #0]
 800c044:	e7b1      	b.n	800bfaa <__sflush_r+0x1a>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7ad      	b.n	800bfac <__sflush_r+0x1c>
 800c050:	690f      	ldr	r7, [r1, #16]
 800c052:	2f00      	cmp	r7, #0
 800c054:	d0a9      	beq.n	800bfaa <__sflush_r+0x1a>
 800c056:	0793      	lsls	r3, r2, #30
 800c058:	680e      	ldr	r6, [r1, #0]
 800c05a:	bf08      	it	eq
 800c05c:	694b      	ldreq	r3, [r1, #20]
 800c05e:	600f      	str	r7, [r1, #0]
 800c060:	bf18      	it	ne
 800c062:	2300      	movne	r3, #0
 800c064:	eba6 0807 	sub.w	r8, r6, r7
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	f1b8 0f00 	cmp.w	r8, #0
 800c06e:	dd9c      	ble.n	800bfaa <__sflush_r+0x1a>
 800c070:	6a21      	ldr	r1, [r4, #32]
 800c072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c074:	4643      	mov	r3, r8
 800c076:	463a      	mov	r2, r7
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc06      	bgt.n	800c08e <__sflush_r+0xfe>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c08c:	e78e      	b.n	800bfac <__sflush_r+0x1c>
 800c08e:	4407      	add	r7, r0
 800c090:	eba8 0800 	sub.w	r8, r8, r0
 800c094:	e7e9      	b.n	800c06a <__sflush_r+0xda>
 800c096:	bf00      	nop
 800c098:	20400001 	.word	0x20400001

0800c09c <_fflush_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b913      	cbnz	r3, 800c0ac <_fflush_r+0x10>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	b118      	cbz	r0, 800c0b6 <_fflush_r+0x1a>
 800c0ae:	6983      	ldr	r3, [r0, #24]
 800c0b0:	b90b      	cbnz	r3, 800c0b6 <_fflush_r+0x1a>
 800c0b2:	f000 f887 	bl	800c1c4 <__sinit>
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <_fflush_r+0x6c>)
 800c0b8:	429c      	cmp	r4, r3
 800c0ba:	d11b      	bne.n	800c0f4 <_fflush_r+0x58>
 800c0bc:	686c      	ldr	r4, [r5, #4]
 800c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0ef      	beq.n	800c0a6 <_fflush_r+0xa>
 800c0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0c8:	07d0      	lsls	r0, r2, #31
 800c0ca:	d404      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0cc:	0599      	lsls	r1, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_fflush_r+0x3a>
 800c0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0d2:	f000 f915 	bl	800c300 <__retarget_lock_acquire_recursive>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f7ff ff59 	bl	800bf90 <__sflush_r>
 800c0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0e0:	07da      	lsls	r2, r3, #31
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	d4e0      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	059b      	lsls	r3, r3, #22
 800c0ea:	d4dd      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ee:	f000 f908 	bl	800c302 <__retarget_lock_release_recursive>
 800c0f2:	e7d9      	b.n	800c0a8 <_fflush_r+0xc>
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <_fflush_r+0x70>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	d101      	bne.n	800c0fe <_fflush_r+0x62>
 800c0fa:	68ac      	ldr	r4, [r5, #8]
 800c0fc:	e7df      	b.n	800c0be <_fflush_r+0x22>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <_fflush_r+0x74>)
 800c100:	429c      	cmp	r4, r3
 800c102:	bf08      	it	eq
 800c104:	68ec      	ldreq	r4, [r5, #12]
 800c106:	e7da      	b.n	800c0be <_fflush_r+0x22>
 800c108:	0800c80c 	.word	0x0800c80c
 800c10c:	0800c82c 	.word	0x0800c82c
 800c110:	0800c7ec 	.word	0x0800c7ec

0800c114 <std>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	e9c0 3300 	strd	r3, r3, [r0]
 800c11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c122:	6083      	str	r3, [r0, #8]
 800c124:	8181      	strh	r1, [r0, #12]
 800c126:	6643      	str	r3, [r0, #100]	; 0x64
 800c128:	81c2      	strh	r2, [r0, #14]
 800c12a:	6183      	str	r3, [r0, #24]
 800c12c:	4619      	mov	r1, r3
 800c12e:	2208      	movs	r2, #8
 800c130:	305c      	adds	r0, #92	; 0x5c
 800c132:	f7ff f9ab 	bl	800b48c <memset>
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <std+0x38>)
 800c138:	6263      	str	r3, [r4, #36]	; 0x24
 800c13a:	4b05      	ldr	r3, [pc, #20]	; (800c150 <std+0x3c>)
 800c13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13e:	4b05      	ldr	r3, [pc, #20]	; (800c154 <std+0x40>)
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <std+0x44>)
 800c144:	6224      	str	r4, [r4, #32]
 800c146:	6323      	str	r3, [r4, #48]	; 0x30
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	0800c459 	.word	0x0800c459
 800c150:	0800c47b 	.word	0x0800c47b
 800c154:	0800c4b3 	.word	0x0800c4b3
 800c158:	0800c4d7 	.word	0x0800c4d7

0800c15c <_cleanup_r>:
 800c15c:	4901      	ldr	r1, [pc, #4]	; (800c164 <_cleanup_r+0x8>)
 800c15e:	f000 b8af 	b.w	800c2c0 <_fwalk_reent>
 800c162:	bf00      	nop
 800c164:	0800c09d 	.word	0x0800c09d

0800c168 <__sfmoreglue>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	2268      	movs	r2, #104	; 0x68
 800c16c:	1e4d      	subs	r5, r1, #1
 800c16e:	4355      	muls	r5, r2
 800c170:	460e      	mov	r6, r1
 800c172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c176:	f7ff f9fd 	bl	800b574 <_malloc_r>
 800c17a:	4604      	mov	r4, r0
 800c17c:	b140      	cbz	r0, 800c190 <__sfmoreglue+0x28>
 800c17e:	2100      	movs	r1, #0
 800c180:	e9c0 1600 	strd	r1, r6, [r0]
 800c184:	300c      	adds	r0, #12
 800c186:	60a0      	str	r0, [r4, #8]
 800c188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c18c:	f7ff f97e 	bl	800b48c <memset>
 800c190:	4620      	mov	r0, r4
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__sfp_lock_acquire>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__sfp_lock_acquire+0x8>)
 800c196:	f000 b8b3 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	2000399d 	.word	0x2000399d

0800c1a0 <__sfp_lock_release>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__sfp_lock_release+0x8>)
 800c1a2:	f000 b8ae 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	2000399d 	.word	0x2000399d

0800c1ac <__sinit_lock_acquire>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__sinit_lock_acquire+0x8>)
 800c1ae:	f000 b8a7 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	2000399e 	.word	0x2000399e

0800c1b8 <__sinit_lock_release>:
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <__sinit_lock_release+0x8>)
 800c1ba:	f000 b8a2 	b.w	800c302 <__retarget_lock_release_recursive>
 800c1be:	bf00      	nop
 800c1c0:	2000399e 	.word	0x2000399e

0800c1c4 <__sinit>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	f7ff fff0 	bl	800c1ac <__sinit_lock_acquire>
 800c1cc:	69a3      	ldr	r3, [r4, #24]
 800c1ce:	b11b      	cbz	r3, 800c1d8 <__sinit+0x14>
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f7ff bff0 	b.w	800c1b8 <__sinit_lock_release>
 800c1d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <__sinit+0x68>)
 800c1e0:	4a13      	ldr	r2, [pc, #76]	; (800c230 <__sinit+0x6c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1e6:	42a3      	cmp	r3, r4
 800c1e8:	bf04      	itt	eq
 800c1ea:	2301      	moveq	r3, #1
 800c1ec:	61a3      	streq	r3, [r4, #24]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f820 	bl	800c234 <__sfp>
 800c1f4:	6060      	str	r0, [r4, #4]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 f81c 	bl	800c234 <__sfp>
 800c1fc:	60a0      	str	r0, [r4, #8]
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 f818 	bl	800c234 <__sfp>
 800c204:	2200      	movs	r2, #0
 800c206:	60e0      	str	r0, [r4, #12]
 800c208:	2104      	movs	r1, #4
 800c20a:	6860      	ldr	r0, [r4, #4]
 800c20c:	f7ff ff82 	bl	800c114 <std>
 800c210:	68a0      	ldr	r0, [r4, #8]
 800c212:	2201      	movs	r2, #1
 800c214:	2109      	movs	r1, #9
 800c216:	f7ff ff7d 	bl	800c114 <std>
 800c21a:	68e0      	ldr	r0, [r4, #12]
 800c21c:	2202      	movs	r2, #2
 800c21e:	2112      	movs	r1, #18
 800c220:	f7ff ff78 	bl	800c114 <std>
 800c224:	2301      	movs	r3, #1
 800c226:	61a3      	str	r3, [r4, #24]
 800c228:	e7d2      	b.n	800c1d0 <__sinit+0xc>
 800c22a:	bf00      	nop
 800c22c:	0800c704 	.word	0x0800c704
 800c230:	0800c15d 	.word	0x0800c15d

0800c234 <__sfp>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	4607      	mov	r7, r0
 800c238:	f7ff ffac 	bl	800c194 <__sfp_lock_acquire>
 800c23c:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <__sfp+0x84>)
 800c23e:	681e      	ldr	r6, [r3, #0]
 800c240:	69b3      	ldr	r3, [r6, #24]
 800c242:	b913      	cbnz	r3, 800c24a <__sfp+0x16>
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff ffbd 	bl	800c1c4 <__sinit>
 800c24a:	3648      	adds	r6, #72	; 0x48
 800c24c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c250:	3b01      	subs	r3, #1
 800c252:	d503      	bpl.n	800c25c <__sfp+0x28>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	b30b      	cbz	r3, 800c29c <__sfp+0x68>
 800c258:	6836      	ldr	r6, [r6, #0]
 800c25a:	e7f7      	b.n	800c24c <__sfp+0x18>
 800c25c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c260:	b9d5      	cbnz	r5, 800c298 <__sfp+0x64>
 800c262:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <__sfp+0x88>)
 800c264:	60e3      	str	r3, [r4, #12]
 800c266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c26a:	6665      	str	r5, [r4, #100]	; 0x64
 800c26c:	f000 f847 	bl	800c2fe <__retarget_lock_init_recursive>
 800c270:	f7ff ff96 	bl	800c1a0 <__sfp_lock_release>
 800c274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c27c:	6025      	str	r5, [r4, #0]
 800c27e:	61a5      	str	r5, [r4, #24]
 800c280:	2208      	movs	r2, #8
 800c282:	4629      	mov	r1, r5
 800c284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c288:	f7ff f900 	bl	800b48c <memset>
 800c28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c294:	4620      	mov	r0, r4
 800c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c298:	3468      	adds	r4, #104	; 0x68
 800c29a:	e7d9      	b.n	800c250 <__sfp+0x1c>
 800c29c:	2104      	movs	r1, #4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ff62 	bl	800c168 <__sfmoreglue>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	6030      	str	r0, [r6, #0]
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d1d5      	bne.n	800c258 <__sfp+0x24>
 800c2ac:	f7ff ff78 	bl	800c1a0 <__sfp_lock_release>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	e7ee      	b.n	800c294 <__sfp+0x60>
 800c2b6:	bf00      	nop
 800c2b8:	0800c704 	.word	0x0800c704
 800c2bc:	ffff0001 	.word	0xffff0001

0800c2c0 <_fwalk_reent>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	4688      	mov	r8, r1
 800c2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2cc:	2700      	movs	r7, #0
 800c2ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2d6:	d505      	bpl.n	800c2e4 <_fwalk_reent+0x24>
 800c2d8:	6824      	ldr	r4, [r4, #0]
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d1f7      	bne.n	800c2ce <_fwalk_reent+0xe>
 800c2de:	4638      	mov	r0, r7
 800c2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e4:	89ab      	ldrh	r3, [r5, #12]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d907      	bls.n	800c2fa <_fwalk_reent+0x3a>
 800c2ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	d003      	beq.n	800c2fa <_fwalk_reent+0x3a>
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	47c0      	blx	r8
 800c2f8:	4307      	orrs	r7, r0
 800c2fa:	3568      	adds	r5, #104	; 0x68
 800c2fc:	e7e9      	b.n	800c2d2 <_fwalk_reent+0x12>

0800c2fe <__retarget_lock_init_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <__retarget_lock_acquire_recursive>:
 800c300:	4770      	bx	lr

0800c302 <__retarget_lock_release_recursive>:
 800c302:	4770      	bx	lr

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460e      	mov	r6, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	; 0x58
 800c310:	4614      	mov	r4, r2
 800c312:	461d      	mov	r5, r3
 800c314:	da08      	bge.n	800c328 <__swhatbuf_r+0x24>
 800c316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	061a      	lsls	r2, r3, #24
 800c320:	d410      	bmi.n	800c344 <__swhatbuf_r+0x40>
 800c322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c326:	e00e      	b.n	800c346 <__swhatbuf_r+0x42>
 800c328:	466a      	mov	r2, sp
 800c32a:	f000 f8fb 	bl	800c524 <_fstat_r>
 800c32e:	2800      	cmp	r0, #0
 800c330:	dbf1      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c332:	9a01      	ldr	r2, [sp, #4]
 800c334:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c338:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c33c:	425a      	negs	r2, r3
 800c33e:	415a      	adcs	r2, r3
 800c340:	602a      	str	r2, [r5, #0]
 800c342:	e7ee      	b.n	800c322 <__swhatbuf_r+0x1e>
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	2000      	movs	r0, #0
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	b016      	add	sp, #88	; 0x58
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c350 <__smakebuf_r>:
 800c350:	898b      	ldrh	r3, [r1, #12]
 800c352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c354:	079d      	lsls	r5, r3, #30
 800c356:	4606      	mov	r6, r0
 800c358:	460c      	mov	r4, r1
 800c35a:	d507      	bpl.n	800c36c <__smakebuf_r+0x1c>
 800c35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	2301      	movs	r3, #1
 800c366:	6163      	str	r3, [r4, #20]
 800c368:	b002      	add	sp, #8
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	ab01      	add	r3, sp, #4
 800c36e:	466a      	mov	r2, sp
 800c370:	f7ff ffc8 	bl	800c304 <__swhatbuf_r>
 800c374:	9900      	ldr	r1, [sp, #0]
 800c376:	4605      	mov	r5, r0
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff f8fb 	bl	800b574 <_malloc_r>
 800c37e:	b948      	cbnz	r0, 800c394 <__smakebuf_r+0x44>
 800c380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c384:	059a      	lsls	r2, r3, #22
 800c386:	d4ef      	bmi.n	800c368 <__smakebuf_r+0x18>
 800c388:	f023 0303 	bic.w	r3, r3, #3
 800c38c:	f043 0302 	orr.w	r3, r3, #2
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	e7e3      	b.n	800c35c <__smakebuf_r+0xc>
 800c394:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <__smakebuf_r+0x7c>)
 800c396:	62b3      	str	r3, [r6, #40]	; 0x28
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	6020      	str	r0, [r4, #0]
 800c39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	6163      	str	r3, [r4, #20]
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	6120      	str	r0, [r4, #16]
 800c3aa:	b15b      	cbz	r3, 800c3c4 <__smakebuf_r+0x74>
 800c3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f000 f8c9 	bl	800c548 <_isatty_r>
 800c3b6:	b128      	cbz	r0, 800c3c4 <__smakebuf_r+0x74>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	f043 0301 	orr.w	r3, r3, #1
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	89a0      	ldrh	r0, [r4, #12]
 800c3c6:	4305      	orrs	r5, r0
 800c3c8:	81a5      	strh	r5, [r4, #12]
 800c3ca:	e7cd      	b.n	800c368 <__smakebuf_r+0x18>
 800c3cc:	0800c15d 	.word	0x0800c15d

0800c3d0 <_raise_r>:
 800c3d0:	291f      	cmp	r1, #31
 800c3d2:	b538      	push	{r3, r4, r5, lr}
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	d904      	bls.n	800c3e4 <_raise_r+0x14>
 800c3da:	2316      	movs	r3, #22
 800c3dc:	6003      	str	r3, [r0, #0]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3e6:	b112      	cbz	r2, 800c3ee <_raise_r+0x1e>
 800c3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3ec:	b94b      	cbnz	r3, 800c402 <_raise_r+0x32>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 f830 	bl	800c454 <_getpid_r>
 800c3f4:	462a      	mov	r2, r5
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fe:	f000 b817 	b.w	800c430 <_kill_r>
 800c402:	2b01      	cmp	r3, #1
 800c404:	d00a      	beq.n	800c41c <_raise_r+0x4c>
 800c406:	1c59      	adds	r1, r3, #1
 800c408:	d103      	bne.n	800c412 <_raise_r+0x42>
 800c40a:	2316      	movs	r3, #22
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	e7e7      	b.n	800c3e2 <_raise_r+0x12>
 800c412:	2400      	movs	r4, #0
 800c414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c418:	4628      	mov	r0, r5
 800c41a:	4798      	blx	r3
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7e0      	b.n	800c3e2 <_raise_r+0x12>

0800c420 <raise>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <raise+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f7ff bfd3 	b.w	800c3d0 <_raise_r>
 800c42a:	bf00      	nop
 800c42c:	200001c4 	.word	0x200001c4

0800c430 <_kill_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d07      	ldr	r5, [pc, #28]	; (800c450 <_kill_r+0x20>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	f7fe fcb5 	bl	800adac <_kill>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	d102      	bne.n	800c44c <_kill_r+0x1c>
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	b103      	cbz	r3, 800c44c <_kill_r+0x1c>
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
 800c44e:	bf00      	nop
 800c450:	20003998 	.word	0x20003998

0800c454 <_getpid_r>:
 800c454:	f7fe bca2 	b.w	800ad9c <_getpid>

0800c458 <__sread>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c460:	f000 f894 	bl	800c58c <_read_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	bfab      	itete	ge
 800c468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c46a:	89a3      	ldrhlt	r3, [r4, #12]
 800c46c:	181b      	addge	r3, r3, r0
 800c46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c472:	bfac      	ite	ge
 800c474:	6563      	strge	r3, [r4, #84]	; 0x54
 800c476:	81a3      	strhlt	r3, [r4, #12]
 800c478:	bd10      	pop	{r4, pc}

0800c47a <__swrite>:
 800c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47e:	461f      	mov	r7, r3
 800c480:	898b      	ldrh	r3, [r1, #12]
 800c482:	05db      	lsls	r3, r3, #23
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	4616      	mov	r6, r2
 800c48a:	d505      	bpl.n	800c498 <__swrite+0x1e>
 800c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c490:	2302      	movs	r3, #2
 800c492:	2200      	movs	r2, #0
 800c494:	f000 f868 	bl	800c568 <_lseek_r>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ae:	f000 b817 	b.w	800c4e0 <_write_r>

0800c4b2 <__sseek>:
 800c4b2:	b510      	push	{r4, lr}
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ba:	f000 f855 	bl	800c568 <_lseek_r>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	bf15      	itete	ne
 800c4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ce:	81a3      	strheq	r3, [r4, #12]
 800c4d0:	bf18      	it	ne
 800c4d2:	81a3      	strhne	r3, [r4, #12]
 800c4d4:	bd10      	pop	{r4, pc}

0800c4d6 <__sclose>:
 800c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4da:	f000 b813 	b.w	800c504 <_close_r>
	...

0800c4e0 <_write_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	; (800c500 <_write_r+0x20>)
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7fe fc93 	bl	800ae1a <_write>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_write_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_write_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	20003998 	.word	0x20003998

0800c504 <_close_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d06      	ldr	r5, [pc, #24]	; (800c520 <_close_r+0x1c>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	f7fe fc9f 	bl	800ae52 <_close>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_close_r+0x1a>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_close_r+0x1a>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	20003998 	.word	0x20003998

0800c524 <_fstat_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	; (800c544 <_fstat_r+0x20>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	f7fe fc9a 	bl	800ae6a <_fstat>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	d102      	bne.n	800c540 <_fstat_r+0x1c>
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	b103      	cbz	r3, 800c540 <_fstat_r+0x1c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	20003998 	.word	0x20003998

0800c548 <_isatty_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_isatty_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7fe fc99 	bl	800ae8a <_isatty>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_isatty_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_isatty_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20003998 	.word	0x20003998

0800c568 <_lseek_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d07      	ldr	r5, [pc, #28]	; (800c588 <_lseek_r+0x20>)
 800c56c:	4604      	mov	r4, r0
 800c56e:	4608      	mov	r0, r1
 800c570:	4611      	mov	r1, r2
 800c572:	2200      	movs	r2, #0
 800c574:	602a      	str	r2, [r5, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	f7fe fc92 	bl	800aea0 <_lseek>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_lseek_r+0x1e>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_lseek_r+0x1e>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	20003998 	.word	0x20003998

0800c58c <_read_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_read_r+0x20>)
 800c590:	4604      	mov	r4, r0
 800c592:	4608      	mov	r0, r1
 800c594:	4611      	mov	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	602a      	str	r2, [r5, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7fe fc20 	bl	800ade0 <_read>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_read_r+0x1e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_read_r+0x1e>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20003998 	.word	0x20003998

0800c5b0 <_gettimeofday>:
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <_gettimeofday+0xc>)
 800c5b2:	2258      	movs	r2, #88	; 0x58
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5ba:	4770      	bx	lr
 800c5bc:	20003998 	.word	0x20003998

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
