
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8bc  0800c8bc  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8bc  0800c8bc  0001c8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8c4  0800c8c4  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8c4  0800c8c4  0001c8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800c8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dac  20000258  0800cb24  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003004  0800cb24  00023004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   000269bf  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005aea  00000000  00000000  00046c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a0  00000000  00000000  0004c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001975  00000000  00000000  0004e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6fb  00000000  00000000  0005018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002afa1  00000000  00000000  0007a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8df3  00000000  00000000  000a5829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009258  00000000  00000000  0019e61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a7874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c640 	.word	0x0800c640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800c640 	.word	0x0800c640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
//p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <current_monitor_set+0x3c>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d503      	bpl.n	8000dce <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <current_monitor_set+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000dcc:	e003      	b.n	8000dd6 <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <current_monitor_set+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <current_monitor_set+0x40>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000274 	.word	0x20000274
 8000de8:	20000000 	.word	0x20000000

08000dec <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <current_monitor_ratio+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000000 	.word	0x20000000

08000e08 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e0c:	e009      	b.n	8000e22 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <current_monitor_init+0x6c>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000e78 <current_monitor_init+0x70>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <current_monitor_init+0x6c>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <current_monitor_init+0x6c>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e7c <current_monitor_init+0x74>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e80 <current_monitor_init+0x78>
 8000e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e40:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	dcdf      	bgt.n	8000e0e <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <current_monitor_init+0x6c>)
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5c:	d800      	bhi.n	8000e60 <current_monitor_init+0x58>
 8000e5e:	e7fe      	b.n	8000e5e <current_monitor_init+0x56>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <current_monitor_init+0x6c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <current_monitor_init+0x7c>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000000 	.word	0x20000000
 8000e78:	3d4ccccd 	.word	0x3d4ccccd
 8000e7c:	3d23d70a 	.word	0x3d23d70a
 8000e80:	00000000 	.word	0x00000000
 8000e84:	20000274 	.word	0x20000274

08000e88 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
#if defined(STRIP_1_LENGTH)
    if (strip_mask & STRIP_BIT_1)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000e9c:	f001 f814 	bl	8001ec8 <ws2812b_show_strip_one>
    }
#endif
#if defined(STRIP_2_LENGTH)
    if (strip_mask & STRIP_BIT_2)
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <animate_led_show_strip+0x26>
    {
        ws2812b_show_strip_two();
 8000eaa:	f001 f814 	bl	8001ed6 <ws2812b_show_strip_two>
    }
#endif
#if defined(STRIP_3_LENGTH)
    if (strip_mask & STRIP_BIT_3)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <animate_led_show_strip+0x34>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
 8000eb8:	f001 f814 	bl	8001ee4 <ws2812b_show_strip_three>
    }
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4604      	mov	r4, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80bb      	strh	r3, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	70bb      	strb	r3, [r7, #2]
	for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e01a      	b.n	8000f1e <animate_led_set_pixel+0x5a>
	{
		if (mask & strip_bit)
 8000ee8:	88fa      	ldrh	r2, [r7, #6]
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d012      	beq.n	8000f18 <animate_led_set_pixel+0x54>
		{
			if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000ef2:	88ba      	ldrh	r2, [r7, #4]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fe8b 	bl	8001c14 <ws2812_pixel_is_in_strip_range>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <animate_led_set_pixel+0x54>
 8000f04:	78bc      	ldrb	r4, [r7, #2]
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	88b9      	ldrh	r1, [r7, #4]
 8000f0a:	7bf8      	ldrb	r0, [r7, #15]
 8000f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4623      	mov	r3, r4
 8000f14:	f000 feb2 	bl	8001c7c <ws2812b_set_led>
	for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d9e1      	bls.n	8000ee8 <animate_led_set_pixel+0x24>
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af02      	add	r7, sp, #8
 8000f34:	4604      	mov	r4, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	4603      	mov	r3, r0
 8000f42:	717b      	strb	r3, [r7, #5]
 8000f44:	460b      	mov	r3, r1
 8000f46:	713b      	strb	r3, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	817b      	strh	r3, [r7, #10]
	for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e020      	b.n	8000f98 <animate_led_set_all_pixels+0x6a>
	{
		if (mask & strip_bit)
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d018      	beq.n	8000f92 <animate_led_set_all_pixels+0x64>
		{
			strip_size = ws2812_get_strip_size(strip_bit);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fdd6 	bl	8001b14 <ws2812_get_strip_size>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	817b      	strh	r3, [r7, #10]
			for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81bb      	strh	r3, [r7, #12]
 8000f70:	e00b      	b.n	8000f8a <animate_led_set_all_pixels+0x5c>
 8000f72:	793c      	ldrb	r4, [r7, #4]
 8000f74:	797a      	ldrb	r2, [r7, #5]
 8000f76:	89b9      	ldrh	r1, [r7, #12]
 8000f78:	7bf8      	ldrb	r0, [r7, #15]
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4623      	mov	r3, r4
 8000f80:	f000 fe7c 	bl	8001c7c <ws2812b_set_led>
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	81bb      	strh	r3, [r7, #12]
 8000f8a:	89ba      	ldrh	r2, [r7, #12]
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3ef      	bcc.n	8000f72 <animate_led_set_all_pixels+0x44>
	for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d9db      	bls.n	8000f56 <animate_led_set_all_pixels+0x28>
		}
	}
    animate_led_show_strip(mask);
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff71 	bl	8000e88 <animate_led_show_strip>
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <animate_led_solid_custom_color+0x40>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	81bb      	strh	r3, [r7, #12]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f000 fcf7 	bl	80019c0 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000fd2:	7b39      	ldrb	r1, [r7, #12]
 8000fd4:	7b7a      	ldrb	r2, [r7, #13]
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	88f8      	ldrh	r0, [r7, #6]
 8000fda:	f7ff ffa8 	bl	8000f2e <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff51 	bl	8000e88 <animate_led_show_strip>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800c658 	.word	0x0800c658

08000ff4 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2007      	movs	r0, #7
 8001000:	f7ff ff95 	bl	8000f2e <animate_led_set_all_pixels>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	4613      	mov	r3, r2
 800101a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fdbe 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 8001024:	4603      	mov	r3, r0
 8001026:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <animate_led_only_spell_word+0xbc>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	81bb      	strh	r3, [r7, #12]
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f000 fcc1 	bl	80019c0 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e034      	b.n	80010ae <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8001044:	f000 ffa6 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	1c9a      	adds	r2, r3, #2
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fffc 	bl	800205c <task_button_press_check_interrupts>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d126      	bne.n	80010b8 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	b299      	uxth	r1, r3
 800106e:	7b3a      	ldrb	r2, [r7, #12]
 8001070:	7b7c      	ldrb	r4, [r7, #13]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	88f8      	ldrh	r0, [r7, #6]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	4623      	mov	r3, r4
 800107a:	f7ff ff23 	bl	8000ec4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff01 	bl	8000e88 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001090:	f001 fbde 	bl	8002850 <task_led_ctrl_speed>
 8001094:	eeb0 7a40 	vmov.f32	s14, s0
 8001098:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800109c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f001 fa6e 	bl	8002584 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	8a7b      	ldrh	r3, [r7, #18]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbc6      	blt.n	8001044 <animate_led_only_spell_word+0x3c>
 80010b6:	e000      	b.n	80010ba <animate_led_only_spell_word+0xb2>
                return;
 80010b8:	bf00      	nop
	}
}
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	ecbd 8b02 	vpop	{d8}
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	0800c658 	.word	0x0800c658

080010c8 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 80010d4:	4b9b      	ldr	r3, [pc, #620]	; (8001344 <animate_led_fade_in_fade_out+0x27c>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	823b      	strh	r3, [r7, #16]
 80010da:	2300      	movs	r3, #0
 80010dc:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f000 fc6b 	bl	80019c0 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	e08b      	b.n	8001208 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 80010f0:	f000 ff50 	bl	8001f94 <task_button_press_interrupt_occurred>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00e      	beq.n	8001118 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	1c9a      	adds	r2, r3, #2
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f000 ffa6 	bl	800205c <task_button_press_check_interrupts>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 810f 	bne.w	8001336 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800111a:	f7ff f9fb 	bl	8000514 <__aeabi_i2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 8001124:	f7ff fb8a 	bl	800083c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	7c3b      	ldrb	r3, [r7, #16]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9ee 	bl	8000514 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa52 	bl	80005e8 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fc5e 	bl	8000a0c <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001156:	f7ff f9dd 	bl	8000514 <__aeabi_i2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 8001160:	f7ff fb6c 	bl	800083c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	7c7b      	ldrb	r3, [r7, #17]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9d0 	bl	8000514 <__aeabi_i2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa34 	bl	80005e8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fc40 	bl	8000a0c <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001192:	f7ff f9bf 	bl	8000514 <__aeabi_i2d>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 800119c:	f7ff fb4e 	bl	800083c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
 80011a8:	7cbb      	ldrb	r3, [r7, #18]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9b2 	bl	8000514 <__aeabi_i2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff fa16 	bl	80005e8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fc22 	bl	8000a0c <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80011cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	b2d9      	uxtb	r1, r3
 80011dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	89f8      	ldrh	r0, [r7, #14]
 80011fe:	f7ff fe96 	bl	8000f2e <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	f77f af70 	ble.w	80010f0 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	e08a      	b.n	800132c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001216:	f000 febd 	bl	8001f94 <task_button_press_interrupt_occurred>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00d      	beq.n	800123c <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	1c9a      	adds	r2, r3, #2
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4618      	mov	r0, r3
 8001232:	f000 ff13 	bl	800205c <task_button_press_check_interrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d17e      	bne.n	800133a <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 800123c:	6a38      	ldr	r0, [r7, #32]
 800123e:	f7ff f969 	bl	8000514 <__aeabi_i2d>
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 8001248:	f7ff faf8 	bl	800083c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4614      	mov	r4, r2
 8001252:	461d      	mov	r5, r3
 8001254:	7c3b      	ldrb	r3, [r7, #16]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f95c 	bl	8000514 <__aeabi_i2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f9c0 	bl	80005e8 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbcc 	bl	8000a0c <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001278:	6a38      	ldr	r0, [r7, #32]
 800127a:	f7ff f94b 	bl	8000514 <__aeabi_i2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 8001284:	f7ff fada 	bl	800083c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4614      	mov	r4, r2
 800128e:	461d      	mov	r5, r3
 8001290:	7c7b      	ldrb	r3, [r7, #17]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f93e 	bl	8000514 <__aeabi_i2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff f9a2 	bl	80005e8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbae 	bl	8000a0c <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f7ff f92d 	bl	8000514 <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <animate_led_fade_in_fade_out+0x280>)
 80012c0:	f7ff fabc 	bl	800083c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	461d      	mov	r5, r3
 80012cc:	7cbb      	ldrb	r3, [r7, #18]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f920 	bl	8000514 <__aeabi_i2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff f984 	bl	80005e8 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fb90 	bl	8000a0c <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012fc:	793b      	ldrb	r3, [r7, #4]
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	edd7 7a06 	vldr	s15, [r7, #24]
 8001304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	edd7 7a05 	vldr	s15, [r7, #20]
 8001314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001318:	edc7 7a01 	vstr	s15, [r7, #4]
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	89f8      	ldrh	r0, [r7, #14]
 8001322:	f7ff fe04 	bl	8000f2e <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3b02      	subs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f6bf af71 	bge.w	8001216 <animate_led_fade_in_fade_out+0x14e>
 8001334:	e002      	b.n	800133c <animate_led_fade_in_fade_out+0x274>
                return;
 8001336:	bf00      	nop
 8001338:	e000      	b.n	800133c <animate_led_fade_in_fade_out+0x274>
                return;
 800133a:	bf00      	nop
    }
}
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0800c658 	.word	0x0800c658
 8001348:	40700000 	.word	0x40700000

0800134c <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	ed2d 8b02 	vpush	{d8}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af02      	add	r7, sp, #8
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4603      	mov	r3, r0
 800135e:	81fb      	strh	r3, [r7, #14]
 8001360:	460b      	mov	r3, r1
 8001362:	81bb      	strh	r3, [r7, #12]
 8001364:	4613      	mov	r3, r2
 8001366:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fc18 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 8001370:	4603      	mov	r3, r0
 8001372:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <animate_led_twinkle+0xe4>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	82bb      	strh	r3, [r7, #20]
 800137a:	2300      	movs	r3, #0
 800137c:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f000 fb1b 	bl	80019c0 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	e043      	b.n	8001418 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001390:	f000 fe00 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00d      	beq.n	80013b6 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	1c9a      	adds	r2, r3, #2
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	1c59      	adds	r1, r3, #1
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fe56 	bl	800205c <task_button_press_check_interrupts>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d135      	bne.n	8001422 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 80013b6:	8b7b      	ldrh	r3, [r7, #26]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00a f874 	bl	800b4a8 <random_num>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b299      	uxth	r1, r3
 80013c4:	7d3a      	ldrb	r2, [r7, #20]
 80013c6:	7d7c      	ldrb	r4, [r7, #21]
 80013c8:	7dbb      	ldrb	r3, [r7, #22]
 80013ca:	89f8      	ldrh	r0, [r7, #14]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4623      	mov	r3, r4
 80013d0:	f7ff fd78 	bl	8000ec4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd56 	bl	8000e88 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80013e6:	f001 fa33 	bl	8002850 <task_led_ctrl_speed>
 80013ea:	eeb0 7a40 	vmov.f32	s14, s0
 80013ee:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f6:	ee17 0a90 	vmov	r0, s15
 80013fa:	f001 f8c3 	bl	8002584 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 80013fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <animate_led_twinkle+0xc6>
 8001406:	89f8      	ldrh	r0, [r7, #14]
 8001408:	2300      	movs	r3, #0
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	f7ff fd8e 	bl	8000f2e <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbb7      	blt.n	8001390 <animate_led_twinkle+0x44>
 8001420:	e000      	b.n	8001424 <animate_led_twinkle+0xd8>
                return;
 8001422:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	ecbd 8b02 	vpop	{d8}
 800142c:	bd90      	pop	{r4, r7, pc}
 800142e:	bf00      	nop
 8001430:	0800c658 	.word	0x0800c658

08001434 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	ed2d 8b02 	vpush	{d8}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af02      	add	r7, sp, #8
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	4613      	mov	r3, r2
 8001448:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <animate_led_sparkle_only_random_color+0x120>)
 800144c:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fba5 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 8001456:	4603      	mov	r3, r0
 8001458:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb6d 	bl	8001b3c <ws2812_get_num_active_animation_leds>
 8001462:	4603      	mov	r3, r0
 8001464:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001466:	2300      	movs	r3, #0
 8001468:	83fb      	strh	r3, [r7, #30]
 800146a:	e059      	b.n	8001520 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800146c:	f000 fd92 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <animate_led_sparkle_only_random_color+0x5a>
 8001476:	f107 020d 	add.w	r2, r7, #13
 800147a:	f107 010e 	add.w	r1, r7, #14
 800147e:	f107 030f 	add.w	r3, r7, #15
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fdea 	bl	800205c <task_button_press_check_interrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d15c      	bne.n	8001548 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	4619      	mov	r1, r3
 8001492:	2000      	movs	r0, #0
 8001494:	f00a f808 	bl	800b4a8 <random_num>
 8001498:	4603      	mov	r3, r0
 800149a:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	b29c      	uxth	r4, r3
 80014a0:	21ff      	movs	r1, #255	; 0xff
 80014a2:	2000      	movs	r0, #0
 80014a4:	f00a f800 	bl	800b4a8 <random_num>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b2dd      	uxtb	r5, r3
 80014ac:	21ff      	movs	r1, #255	; 0xff
 80014ae:	2000      	movs	r0, #0
 80014b0:	f009 fffa 	bl	800b4a8 <random_num>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b2de      	uxtb	r6, r3
 80014b8:	21ff      	movs	r1, #255	; 0xff
 80014ba:	2000      	movs	r0, #0
 80014bc:	f009 fff4 	bl	800b4a8 <random_num>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	88f8      	ldrh	r0, [r7, #6]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4633      	mov	r3, r6
 80014ca:	462a      	mov	r2, r5
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fcf9 	bl	8000ec4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fcd7 	bl	8000e88 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80014e4:	f001 f9b4 	bl	8002850 <task_led_ctrl_speed>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80014f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f4:	ee17 0a90 	vmov	r0, s15
 80014f8:	f001 f844 	bl	8002584 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	f083 0301 	eor.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <animate_led_sparkle_only_random_color+0xe6>
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	b299      	uxth	r1, r3
 800150c:	88f8      	ldrh	r0, [r7, #6]
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	f7ff fcd5 	bl	8000ec4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800151a:	8bfb      	ldrh	r3, [r7, #30]
 800151c:	3301      	adds	r3, #1
 800151e:	83fb      	strh	r3, [r7, #30]
 8001520:	8bfb      	ldrh	r3, [r7, #30]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152a:	8abb      	ldrh	r3, [r7, #20]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d492      	bmi.n	800146c <animate_led_sparkle_only_random_color+0x38>
 8001546:	e000      	b.n	800154a <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001548:	bf00      	nop
	}
}
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	ecbd 8b02 	vpop	{d8}
 8001552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001554:	3f333333 	.word	0x3f333333

08001558 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	ed2d 8b02 	vpush	{d8}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	4613      	mov	r3, r2
 800156a:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fb16 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 8001574:	4603      	mov	r3, r0
 8001576:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001578:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800157c:	82bb      	strh	r3, [r7, #20]
 800157e:	e06c      	b.n	800165a <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001580:	f000 fd08 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <animate_led_rainbow_cycle+0x4a>
 800158a:	f107 0209 	add.w	r2, r7, #9
 800158e:	f107 010a 	add.w	r1, r7, #10
 8001592:	f107 030b 	add.w	r3, r7, #11
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fd60 	bl	800205c <task_button_press_check_interrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d15f      	bne.n	8001662 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	82fb      	strh	r3, [r7, #22]
 80015a6:	e02f      	b.n	8001608 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015a8:	f000 fcf4 	bl	8001f94 <task_button_press_interrupt_occurred>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <animate_led_rainbow_cycle+0x72>
 80015b2:	f107 0209 	add.w	r2, r7, #9
 80015b6:	f107 010a 	add.w	r1, r7, #10
 80015ba:	f107 030b 	add.w	r3, r7, #11
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fd4c 	bl	800205c <task_button_press_check_interrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d14d      	bne.n	8001666 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 80015ca:	8afb      	ldrh	r3, [r7, #22]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	8a7b      	ldrh	r3, [r7, #18]
 80015d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	8abb      	ldrh	r3, [r7, #20]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f848 	bl	8001674 <animate_led_wheel>
 80015e4:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	781c      	ldrb	r4, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3302      	adds	r3, #2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	8af9      	ldrh	r1, [r7, #22]
 80015f8:	88f8      	ldrh	r0, [r7, #6]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4623      	mov	r3, r4
 80015fe:	f7ff fc61 	bl	8000ec4 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001602:	8afb      	ldrh	r3, [r7, #22]
 8001604:	3301      	adds	r3, #1
 8001606:	82fb      	strh	r3, [r7, #22]
 8001608:	8afa      	ldrh	r2, [r7, #22]
 800160a:	8a7b      	ldrh	r3, [r7, #18]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3cb      	bcc.n	80015a8 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc38 	bl	8000e88 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001618:	f001 f91a 	bl	8002850 <task_led_ctrl_speed>
 800161c:	eef0 7a40 	vmov.f32	s15, s0
 8001620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	d103      	bne.n	8001632 <animate_led_rainbow_cycle+0xda>
 800162a:	2000      	movs	r0, #0
 800162c:	f000 ffaa 	bl	8002584 <task_led_ctrl_delay>
 8001630:	e010      	b.n	8001654 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800163c:	f001 f908 	bl	8002850 <task_led_ctrl_speed>
 8001640:	eeb0 7a40 	vmov.f32	s14, s0
 8001644:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 0a90 	vmov	r0, s15
 8001650:	f000 ff98 	bl	8002584 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001654:	8abb      	ldrh	r3, [r7, #20]
 8001656:	3b01      	subs	r3, #1
 8001658:	82bb      	strh	r3, [r7, #20]
 800165a:	8abb      	ldrh	r3, [r7, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d18f      	bne.n	8001580 <animate_led_rainbow_cycle+0x28>
 8001660:	e002      	b.n	8001668 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001666:	bf00      	nop
    }
}
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	ecbd 8b02 	vpop	{d8}
 8001670:	bd90      	pop	{r4, r7, pc}
	...

08001674 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b54      	cmp	r3, #84	; 0x54
 8001682:	d813      	bhi.n	80016ac <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	461a      	mov	r2, r3
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	4413      	add	r3, r2
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <animate_led_wheel+0xa8>)
 8001690:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	461a      	mov	r2, r3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <animate_led_wheel+0xa8>)
 80016a2:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <animate_led_wheel+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	709a      	strb	r2, [r3, #2]
 80016aa:	e02f      	b.n	800170c <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2ba9      	cmp	r3, #169	; 0xa9
 80016b0:	d816      	bhi.n	80016e0 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	3b55      	subs	r3, #85	; 0x55
 80016b6:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	461a      	mov	r2, r3
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <animate_led_wheel+0xa8>)
 80016c8:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <animate_led_wheel+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	461a      	mov	r2, r3
 80016d4:	0052      	lsls	r2, r2, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <animate_led_wheel+0xa8>)
 80016dc:	709a      	strb	r2, [r3, #2]
 80016de:	e015      	b.n	800170c <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3356      	adds	r3, #86	; 0x56
 80016e4:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <animate_led_wheel+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	461a      	mov	r2, r3
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <animate_led_wheel+0xa8>)
 80016f8:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	461a      	mov	r2, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <animate_led_wheel+0xa8>)
 800170a:	709a      	strb	r2, [r3, #2]
    }
    return c;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <animate_led_wheel+0xa8>)
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000278 	.word	0x20000278

08001720 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	ed2d 8b02 	vpush	{d8}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	4613      	mov	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fa32 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 800173c:	4603      	mov	r3, r0
 800173e:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <animate_led_theater_chase+0x140>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	813b      	strh	r3, [r7, #8]
 8001746:	2300      	movs	r3, #0
 8001748:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4619      	mov	r1, r3
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f000 f935 	bl	80019c0 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e075      	b.n	8001848 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	e06c      	b.n	800183c <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001762:	f000 fc17 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	1c9a      	adds	r2, r3, #2
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fc6d 	bl	800205c <task_button_press_check_interrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d163      	bne.n	8001850 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e010      	b.n	80017b0 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	b29a      	uxth	r2, r3
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	b299      	uxth	r1, r3
 800179a:	7a3a      	ldrb	r2, [r7, #8]
 800179c:	7a7c      	ldrb	r4, [r7, #9]
 800179e:	7abb      	ldrb	r3, [r7, #10]
 80017a0:	88f8      	ldrh	r0, [r7, #6]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4623      	mov	r3, r4
 80017a6:	f7ff fb8d 	bl	8000ec4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3303      	adds	r3, #3
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbea      	blt.n	800178e <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb64 	bl	8000e88 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 80017c0:	f000 fbe8 	bl	8001f94 <task_button_press_interrupt_occurred>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	1c9a      	adds	r2, r3, #2
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	1c59      	adds	r1, r3, #1
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fc3e 	bl	800205c <task_button_press_check_interrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d136      	bne.n	8001854 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017f0:	f001 f82e 	bl	8002850 <task_led_ctrl_speed>
 80017f4:	eeb0 7a40 	vmov.f32	s14, s0
 80017f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80017fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f000 febe 	bl	8002584 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e00f      	b.n	800182e <animate_led_theater_chase+0x10e>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	b29a      	uxth	r2, r3
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b299      	uxth	r1, r3
 800181a:	88f8      	ldrh	r0, [r7, #6]
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	f7ff fb4e 	bl	8000ec4 <animate_led_set_pixel>
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3303      	adds	r3, #3
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbeb      	blt.n	800180e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	3301      	adds	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b02      	cmp	r3, #2
 8001840:	dd8f      	ble.n	8001762 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b09      	cmp	r3, #9
 800184c:	dd86      	ble.n	800175c <animate_led_theater_chase+0x3c>
 800184e:	e002      	b.n	8001856 <animate_led_theater_chase+0x136>
                    return;
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <animate_led_theater_chase+0x136>
                    return;
 8001854:	bf00      	nop
        }
    }
}
 8001856:	3724      	adds	r7, #36	; 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	ecbd 8b02 	vpop	{d8}
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	0800c658 	.word	0x0800c658

08001864 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	ed2d 8b02 	vpush	{d8}
 800186a:	b08d      	sub	sp, #52	; 0x34
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	80fb      	strh	r3, [r7, #6]
 8001874:	4613      	mov	r3, r2
 8001876:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f990 	bl	8001ba0 <ws2812_led_get_max_strip_size>
 8001880:	4603      	mov	r3, r0
 8001882:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e08a      	b.n	80019a0 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
 800188e:	e080      	b.n	8001992 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001890:	f000 fb80 	bl	8001f94 <task_button_press_interrupt_occurred>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <animate_led_theater_chase_rainbow+0x4e>
 800189a:	f107 020d 	add.w	r2, r7, #13
 800189e:	f107 010e 	add.w	r1, r7, #14
 80018a2:	f107 030f 	add.w	r3, r7, #15
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fbd8 	bl	800205c <task_button_press_check_interrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d17b      	bne.n	80019aa <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e039      	b.n	800192c <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018b8:	f000 fb6c 	bl	8001f94 <task_button_press_interrupt_occurred>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <animate_led_theater_chase_rainbow+0x76>
 80018c2:	f107 020d 	add.w	r2, r7, #13
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	f107 030f 	add.w	r3, r7, #15
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fbc4 	bl	800205c <task_button_press_check_interrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d169      	bne.n	80019ae <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	441a      	add	r2, r3
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <animate_led_theater_chase_rainbow+0x158>)
 80018e2:	fb83 1302 	smull	r1, r3, r3, r2
 80018e6:	4413      	add	r3, r2
 80018e8:	11d9      	asrs	r1, r3, #7
 80018ea:	17d3      	asrs	r3, r2, #31
 80018ec:	1ac9      	subs	r1, r1, r3
 80018ee:	460b      	mov	r3, r1
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	1a5b      	subs	r3, r3, r1
 80018f4:	1ad1      	subs	r1, r2, r3
 80018f6:	b2cb      	uxtb	r3, r1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff febb 	bl	8001674 <animate_led_wheel>
 80018fe:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	b29a      	uxth	r2, r3
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b299      	uxth	r1, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	781c      	ldrb	r4, [r3, #0]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3302      	adds	r3, #2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	88f8      	ldrh	r0, [r7, #6]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4623      	mov	r3, r4
 8001922:	f7ff facf 	bl	8000ec4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3303      	adds	r3, #3
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	8afb      	ldrh	r3, [r7, #22]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbc1      	blt.n	80018b8 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff faa6 	bl	8000e88 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001946:	f000 ff83 	bl	8002850 <task_led_ctrl_speed>
 800194a:	eeb0 7a40 	vmov.f32	s14, s0
 800194e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 0a90 	vmov	r0, s15
 800195a:	f000 fe13 	bl	8002584 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e00f      	b.n	8001984 <animate_led_theater_chase_rainbow+0x120>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	b29a      	uxth	r2, r3
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b299      	uxth	r1, r3
 8001970:	88f8      	ldrh	r0, [r7, #6]
 8001972:	2300      	movs	r3, #0
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2300      	movs	r3, #0
 8001978:	2200      	movs	r2, #0
 800197a:	f7ff faa3 	bl	8000ec4 <animate_led_set_pixel>
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3303      	adds	r3, #3
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbeb      	blt.n	8001964 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	3301      	adds	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2b02      	cmp	r3, #2
 8001996:	f77f af7b 	ble.w	8001890 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	2bff      	cmp	r3, #255	; 0xff
 80019a4:	f77f af71 	ble.w	800188a <animate_led_theater_chase_rainbow+0x26>
 80019a8:	e002      	b.n	80019b0 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019ae:	bf00      	nop
        }
    }
}
 80019b0:	372c      	adds	r7, #44	; 0x2c
 80019b2:	46bd      	mov	sp, r7
 80019b4:	ecbd 8b02 	vpop	{d8}
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	80808081 	.word	0x80808081

080019c0 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	0a1a      	lsrs	r2, r3, #8
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3302      	adds	r3, #2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <reset_ws2812b>:
 * @brief   Reset LED strip >= 50 microseconds of 0
 * @param   void
 * @return  void
 */
void reset_ws2812b(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0
	uint8_t g_pwm_reset[50] = {0}; // 50 bytes on stack...
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	222e      	movs	r2, #46	; 0x2e
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f009 ffa4 	bl	800b958 <memset>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a10:	1d3a      	adds	r2, r7, #4
 8001a12:	2332      	movs	r3, #50	; 0x32
 8001a14:	2100      	movs	r1, #0
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <reset_ws2812b+0x44>)
 8001a18:	f006 f9a8 	bl	8007d6c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a1c:	1d3a      	adds	r2, r7, #4
 8001a1e:	2332      	movs	r3, #50	; 0x32
 8001a20:	2104      	movs	r1, #4
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <reset_ws2812b+0x44>)
 8001a24:	f006 f9a2 	bl	8007d6c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a28:	1d3a      	adds	r2, r7, #4
 8001a2a:	2332      	movs	r3, #50	; 0x32
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <reset_ws2812b+0x44>)
 8001a30:	f006 f99c 	bl	8007d6c <HAL_TIM_PWM_Start_DMA>
}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20001d94 	.word	0x20001d94

08001a40 <ws2812_convert_strip_bit_to_strip_num>:
	return (strip_bit_e)(strip_num + 1);
}


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d017      	beq.n	8001aa4 <ws2812_get_pwm_strip_offset+0x48>
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	dc2a      	bgt.n	8001ace <ws2812_get_pwm_strip_offset+0x72>
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <ws2812_get_pwm_strip_offset+0x26>
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d005      	beq.n	8001a8c <ws2812_get_pwm_strip_offset+0x30>
            offset = g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_1)].led_strip_length + \
					 g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_2)].led_strip_length;
            strip_num = 3;
        break;
        default:
        break;
 8001a80:	e025      	b.n	8001ace <ws2812_get_pwm_strip_offset+0x72>
            offset = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	737b      	strb	r3, [r7, #13]
        break;
 8001a8a:	e021      	b.n	8001ad0 <ws2812_get_pwm_strip_offset+0x74>
            offset = g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_1)].led_strip_length;
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ffd7 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <ws2812_get_pwm_strip_offset+0xb0>)
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	889b      	ldrh	r3, [r3, #4]
 8001a9c:	81fb      	strh	r3, [r7, #14]
            strip_num = 2;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	737b      	strb	r3, [r7, #13]
        break;
 8001aa2:	e015      	b.n	8001ad0 <ws2812_get_pwm_strip_offset+0x74>
            offset = g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_1)].led_strip_length + \
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff ffcb 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <ws2812_get_pwm_strip_offset+0xb0>)
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	889c      	ldrh	r4, [r3, #4]
					 g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_2)].led_strip_length;
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ffc3 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <ws2812_get_pwm_strip_offset+0xb0>)
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	889b      	ldrh	r3, [r3, #4]
            offset = g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(STRIP_NUM_1)].led_strip_length + \
 8001ac4:	4423      	add	r3, r4
 8001ac6:	81fb      	strh	r3, [r7, #14]
            strip_num = 3;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	737b      	strb	r3, [r7, #13]
        break;
 8001acc:	e000      	b.n	8001ad0 <ws2812_get_pwm_strip_offset+0x74>
        break;
 8001ace:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8001ad0:	89fa      	ldrh	r2, [r7, #14]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae2:	7b7b      	ldrb	r3, [r7, #13]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aec:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b10 <ws2812_get_pwm_strip_offset+0xb4>
 8001af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001afc:	ee17 3a90 	vmov	r3, s15
 8001b00:	b29b      	uxth	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000005c 	.word	0x2000005c
 8001b10:	453b8000 	.word	0x453b8000

08001b14 <ws2812_get_strip_size>:
 * @brief   Return the size of the current strip
 * @param   void
 * @return  void
 */
uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	return g_ws2812b_info[ws2812_convert_strip_bit_to_strip_num(strip_bit)].led_strip_length;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff8d 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <ws2812_get_strip_size+0x24>)
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	889b      	ldrh	r3, [r3, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000005c 	.word	0x2000005c

08001b3c <ws2812_get_num_active_animation_leds>:
 * @brief   Get the number of active LEDs in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  Number of active LEDs
 */
uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_1 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <ws2812_get_num_active_animation_leds+0x24>
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <ws2812_get_num_active_animation_leds+0x60>)
 8001b58:	889a      	ldrh	r2, [r3, #4]
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_2 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <ws2812_get_num_active_animation_leds+0x3a>
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <ws2812_get_num_active_animation_leds+0x60>)
 8001b6e:	899a      	ldrh	r2, [r3, #12]
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	4413      	add	r3, r2
 8001b74:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_3 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <ws2812_get_num_active_animation_leds+0x50>
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <ws2812_get_num_active_animation_leds+0x60>)
 8001b84:	8a9a      	ldrh	r2, [r3, #20]
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	4413      	add	r3, r2
 8001b8a:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000005c 	.word	0x2000005c

08001ba0 <ws2812_led_get_max_strip_size>:
 * @brief   Return max strip size in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  The max strip size
 */
uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	uint16_t max_strip_size = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_BIT_1 & strip_mask) && (max_strip_size < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) max_strip_size = g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <ws2812_led_get_max_strip_size+0x2a>
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001bbc:	889b      	ldrh	r3, [r3, #4]
 8001bbe:	89fa      	ldrh	r2, [r7, #14]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d202      	bcs.n	8001bca <ws2812_led_get_max_strip_size+0x2a>
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_BIT_2 & strip_mask) && (max_strip_size < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) max_strip_size = g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <ws2812_led_get_max_strip_size+0x46>
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001bd8:	899b      	ldrh	r3, [r3, #12]
 8001bda:	89fa      	ldrh	r2, [r7, #14]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d202      	bcs.n	8001be6 <ws2812_led_get_max_strip_size+0x46>
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001be2:	899b      	ldrh	r3, [r3, #12]
 8001be4:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_BIT_3 & strip_mask) && (max_strip_size < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) max_strip_size = g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <ws2812_led_get_max_strip_size+0x62>
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001bf4:	8a9b      	ldrh	r3, [r3, #20]
 8001bf6:	89fa      	ldrh	r2, [r7, #14]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d202      	bcs.n	8001c02 <ws2812_led_get_max_strip_size+0x62>
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <ws2812_led_get_max_strip_size+0x70>)
 8001bfe:	8a9b      	ldrh	r3, [r3, #20]
 8001c00:	81fb      	strh	r3, [r7, #14]
	return max_strip_size;
 8001c02:	89fb      	ldrh	r3, [r7, #14]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	2000005c 	.word	0x2000005c

08001c14 <ws2812_pixel_is_in_strip_range>:
 * @param   strip_bit: strip to check if pixel is in range
 * @param	pixel: LED # to check
 * @return  true if in range, else false
 */
bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
	if ((STRIP_BIT_1 == strip_bit) && (pixel < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) return_val = true;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <ws2812_pixel_is_in_strip_range+0x2a>
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	88ba      	ldrh	r2, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d202      	bcs.n	8001c3e <ws2812_pixel_is_in_strip_range+0x2a>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e014      	b.n	8001c68 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_BIT_2 == strip_bit) && (pixel < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) return_val = true;
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d107      	bne.n	8001c54 <ws2812_pixel_is_in_strip_range+0x40>
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c46:	899b      	ldrh	r3, [r3, #12]
 8001c48:	88ba      	ldrh	r2, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d202      	bcs.n	8001c54 <ws2812_pixel_is_in_strip_range+0x40>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e009      	b.n	8001c68 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_BIT_3 == strip_bit) && (pixel < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) return_val = true;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d106      	bne.n	8001c68 <ws2812_pixel_is_in_strip_range+0x54>
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c5c:	8a9b      	ldrh	r3, [r3, #20]
 8001c5e:	88ba      	ldrh	r2, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d201      	bcs.n	8001c68 <ws2812_pixel_is_in_strip_range+0x54>
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
	return return_val;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000005c 	.word	0x2000005c

08001c7c <ws2812b_set_led>:
 * @param 	blue: 8 bit blue
 * @return  void
 */
void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	81bb      	strh	r3, [r7, #12]
 8001c92:	460b      	mov	r3, r1
 8001c94:	73bb      	strb	r3, [r7, #14]
 8001c96:	4613      	mov	r3, r2
 8001c98:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fecf 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]
	(g_ws2812b_info[strip_num].led_strip + led_num)->red = red * g_max_current_ratio;
 8001ca6:	7bbb      	ldrb	r3, [r7, #14]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001cbe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001cc2:	89ba      	ldrh	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cd4:	793a      	ldrb	r2, [r7, #4]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
	(g_ws2812b_info[strip_num].led_strip + led_num)->green = green * g_max_current_ratio;
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001cf2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001cf6:	89ba      	ldrh	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d04:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d08:	793a      	ldrb	r2, [r7, #4]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	705a      	strb	r2, [r3, #1]
	(g_ws2812b_info[strip_num].led_strip + led_num)->blue = blue * g_max_current_ratio;
 8001d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <ws2812b_set_led+0xd0>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <ws2812b_set_led+0xd4>)
 8001d28:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001d2c:	89ba      	ldrh	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d3e:	793a      	ldrb	r2, [r7, #4]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	709a      	strb	r2, [r3, #2]
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	2000005c 	.word	0x2000005c

08001d54 <ws2812b_fill_pwm_buffer_strip>:
 * @brief   Fill the PWM buffer for the strip num
 * @param   strip_num: PWM buffer pertaining to strip
 * @return  void
 */
void ws2812b_fill_pwm_buffer_strip(strip_num_e strip_num)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
    uint32_t color = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
    uint32_t strip_size = g_ws2812b_info[strip_num].led_strip_length;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x164>)
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(ws2812_convert_strip_bit_to_strip_num(strip_num));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe65 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe6f 	bl	8001a5c <ws2812_get_pwm_strip_offset>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60fb      	str	r3, [r7, #12]
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	83fb      	strh	r3, [r7, #30]
 8001d86:	e04c      	b.n	8001e22 <ws2812b_fill_pwm_buffer_strip+0xce>
    {
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x164>)
 8001d8c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001d90:	8bfa      	ldrh	r2, [r7, #30]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	785b      	ldrb	r3, [r3, #1]
 8001d9c:	0419      	lsls	r1, r3, #16
                                (((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x164>)
 8001da2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001da6:	8bfa      	ldrh	r2, [r7, #30]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	4403      	add	r3, r0
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	021b      	lsls	r3, r3, #8
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001db4:	4319      	orrs	r1, r3
                                (((g_ws2812b_info[strip_num].led_strip + iii)->blue));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x164>)
 8001dba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001dbe:	8bfa      	ldrh	r2, [r7, #30]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4403      	add	r3, r0
 8001dc8:	789b      	ldrb	r3, [r3, #2]
                                (((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001dca:	430b      	orrs	r3, r1
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001dcc:	617b      	str	r3, [r7, #20]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	777b      	strb	r3, [r7, #29]
 8001dd2:	e020      	b.n	8001e16 <ws2812b_fill_pwm_buffer_strip+0xc2>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
            		(color & (1 << ((sizeof(ws2812b_led_t) * BITS_PER_BYTE) - 1 - yyy))) ? \
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	f1c3 0317 	rsb	r3, r3, #23
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4013      	ands	r3, r2
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <ws2812b_fill_pwm_buffer_strip+0x9a>
 8001dea:	2028      	movs	r0, #40	; 0x28
 8001dec:	e000      	b.n	8001df0 <ws2812b_fill_pwm_buffer_strip+0x9c>
 8001dee:	2014      	movs	r0, #20
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x168>)
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	8bfa      	ldrh	r2, [r7, #30]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	441a      	add	r2, r3
 8001e04:	7f7b      	ldrb	r3, [r7, #29]
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	440b      	add	r3, r1
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001e10:	7f7b      	ldrb	r3, [r7, #29]
 8001e12:	3301      	adds	r3, #1
 8001e14:	777b      	strb	r3, [r7, #29]
 8001e16:	7f7b      	ldrb	r3, [r7, #29]
 8001e18:	2b17      	cmp	r3, #23
 8001e1a:	d9db      	bls.n	8001dd4 <ws2812b_fill_pwm_buffer_strip+0x80>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001e1c:	8bfb      	ldrh	r3, [r7, #30]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	83fb      	strh	r3, [r7, #30]
 8001e22:	8bfb      	ldrh	r3, [r7, #30]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d8ae      	bhi.n	8001d88 <ws2812b_fill_pwm_buffer_strip+0x34>
            				(uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	837b      	strh	r3, [r7, #26]
 8001e2e:	e012      	b.n	8001e56 <ws2812b_fill_pwm_buffer_strip+0x102>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x168>)
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	441a      	add	r2, r3
 8001e44:	8b7b      	ldrh	r3, [r7, #26]
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	440b      	add	r3, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e50:	8b7b      	ldrh	r3, [r7, #26]
 8001e52:	3301      	adds	r3, #1
 8001e54:	837b      	strh	r3, [r7, #26]
 8001e56:	8b7b      	ldrh	r3, [r7, #26]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ec0 <ws2812b_fill_pwm_buffer_strip+0x16c>
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	d4e0      	bmi.n	8001e30 <ws2812b_fill_pwm_buffer_strip+0xdc>
    }
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x168>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	441a      	add	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	490f      	ldr	r1, [pc, #60]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x164>)
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	889b      	ldrh	r3, [r3, #4]
 8001e82:	4619      	mov	r1, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e94:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ec0 <ws2812b_fill_pwm_buffer_strip+0x16c>
 8001e98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea0:	ee17 3a90 	vmov	r3, s15
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <ws2812b_fill_pwm_buffer_strip+0x170>)
 8001eaa:	f005 ff5f 	bl	8007d6c <HAL_TIM_PWM_Start_DMA>
}
 8001eae:	bf00      	nop
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000005c 	.word	0x2000005c
 8001ebc:	2000027c 	.word	0x2000027c
 8001ec0:	453b8000 	.word	0x453b8000
 8001ec4:	20001d94 	.word	0x20001d94

08001ec8 <ws2812b_show_strip_one>:
	// call TIM PWM DMA to reset.
}


void ws2812b_show_strip_one(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_BIT_1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f810 	bl	8001ef2 <ws2812b_show>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ws2812b_show_strip_two>:


void ws2812b_show_strip_two(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_BIT_2);
 8001eda:	2002      	movs	r0, #2
 8001edc:	f000 f809 	bl	8001ef2 <ws2812b_show>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ws2812b_show_strip_three>:


void ws2812b_show_strip_three(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_BIT_3);
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f000 f802 	bl	8001ef2 <ws2812b_show>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <ws2812b_show>:
 * @brief   Show the strip(s)
 * @param   strip_mask: bit vector. 1 = show, 0 = don't
 * @return  void
 */
void ws2812b_show(const strip_mask_t strip_mask)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e029      	b.n	8001f56 <ws2812b_show+0x64>
	{
	    if (STRIP_BIT_1 & strip_mask)
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <ws2812b_show+0x2a>
	    {
	    	ws2812b_fill_pwm_buffer_strip(ws2812_convert_strip_bit_to_strip_num(STRIP_BIT_1));
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fd96 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff1c 	bl	8001d54 <ws2812b_fill_pwm_buffer_strip>
	    }
	    if (STRIP_BIT_2 & strip_mask)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <ws2812b_show+0x44>
	    {
	    	ws2812b_fill_pwm_buffer_strip(ws2812_convert_strip_bit_to_strip_num(STRIP_BIT_2));
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7ff fd89 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff0f 	bl	8001d54 <ws2812b_fill_pwm_buffer_strip>
	    }
        if (STRIP_BIT_3 & strip_mask)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <ws2812b_show+0x5e>
        {
        	ws2812b_fill_pwm_buffer_strip(ws2812_convert_strip_bit_to_strip_num(STRIP_BIT_3));
 8001f42:	2004      	movs	r0, #4
 8001f44:	f7ff fd7c 	bl	8001a40 <ws2812_convert_strip_bit_to_strip_num>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff02 	bl	8001d54 <ws2812b_fill_pwm_buffer_strip>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	3301      	adds	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d9d2      	bls.n	8001f02 <ws2812b_show+0x10>
	    }
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <ws2812b_init>:


void ws2812b_init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	uint8_t num_strips = NUM_STRIPS;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	71fb      	strb	r3, [r7, #7]
	//g_all_strip_mask = STRIP_BIT_ALL_SET;
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * NUM_LEDS) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001f72:	f242 5008 	movw	r0, #9480	; 0x2508
 8001f76:	f009 fb0d 	bl	800b594 <malloc>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <ws2812b_init+0x28>)
 8001f80:	601a      	str	r2, [r3, #0]
	current_monitor_init();
 8001f82:	f7fe ff41 	bl	8000e08 <current_monitor_init>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000027c 	.word	0x2000027c

08001f94 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <task_button_press_interrupt_occurred+0x14>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200002df 	.word	0x200002df

08001fac <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d817      	bhi.n	8001fec <task_led_ctrl_button_to_isr+0x40>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <task_led_ctrl_button_to_isr+0x18>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdb 	.word	0x08001fdb
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	08001fe7 	.word	0x08001fe7
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8001fd8:	e009      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8001fde:	e006      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	73fb      	strb	r3, [r7, #15]
        break;
 8001fe4:	e003      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8001fea:	e000      	b.n	8001fee <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001fec:	bf00      	nop
    }
    return return_val;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8002010:	2101      	movs	r1, #1
 8002012:	54d1      	strb	r1, [r2, r3]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	200002df 	.word	0x200002df
 8002024:	200002e0 	.word	0x200002e0

08002028 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <task_button_press_ctrl_interrupt_flag+0x20>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002044:	2100      	movs	r1, #0
 8002046:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200002e0 	.word	0x200002e0

0800205c <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8002068:	2300      	movs	r3, #0
 800206a:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 800206c:	f000 f85a 	bl	8002124 <task_button_press_major_state_change>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8002076:	f000 f849 	bl	800210c <task_button_press_interrupt_flag_clear>
        return_val = true;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800207e:	2100      	movs	r1, #0
 8002080:	2007      	movs	r0, #7
 8002082:	f7fe ff95 	bl	8000fb0 <animate_led_solid_custom_color>
 8002086:	e039      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff ffcd 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8002094:	f000 f83a 	bl	800210c <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800209c:	2100      	movs	r1, #0
 800209e:	2007      	movs	r0, #7
 80020a0:	f7fe ff86 	bl	8000fb0 <animate_led_solid_custom_color>
 80020a4:	e02a      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 80020a6:	2003      	movs	r0, #3
 80020a8:	f7ff ffbe 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 80020b2:	f000 f82b 	bl	800210c <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 80020b6:	e002      	b.n	80020be <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f000 fda7 	bl	8002c0c <osDelay>
        while (g_animate_led_pause_flag)
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <task_button_press_check_interrupts+0xac>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f8      	bne.n	80020b8 <task_button_press_check_interrupts+0x5c>
 80020c6:	e019      	b.n	80020fc <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff ffad 	bl	8002028 <task_button_press_ctrl_interrupt_flag>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 80020d4:	f000 f81a 	bl	800210c <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80020d8:	f000 fb1e 	bl	8002718 <task_led_ctrl_color_red_hex>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80020e4:	f000 fb40 	bl	8002768 <task_led_ctrl_color_green_hex>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020f0:	f000 fb62 	bl	80027b8 <task_led_ctrl_color_blue_hex>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200002de 	.word	0x200002de

0800210c <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <task_button_press_interrupt_flag_clear+0x14>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	200002df 	.word	0x200002df

08002124 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <task_button_press_major_state_change+0x14>)
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200002dd 	.word	0x200002dd

0800213c <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	f107 0208 	add.w	r2, r7, #8
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	2000      	movs	r0, #0
 8002160:	f002 fa00 	bl	8004564 <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	4b84      	ldr	r3, [pc, #528]	; (800237c <task_button_press+0x240>)
 800216c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4981      	ldr	r1, [pc, #516]	; (800237c <task_button_press+0x240>)
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002186:	d206      	bcs.n	8002196 <task_button_press+0x5a>
 8002188:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <task_button_press+0x244>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <task_button_press+0x244>)
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e002      	b.n	800219c <task_button_press+0x60>
        else fast_press_count = 0;
 8002196:	4b7a      	ldr	r3, [pc, #488]	; (8002380 <task_button_press+0x244>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff03 	bl	8001fac <task_led_ctrl_button_to_isr>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff27 	bl	8001ffc <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 80021ae:	4b74      	ldr	r3, [pc, #464]	; (8002380 <task_button_press+0x244>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d975      	bls.n	80022a2 <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <task_button_press+0x248>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 80021bc:	4b70      	ldr	r3, [pc, #448]	; (8002380 <task_button_press+0x244>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d841      	bhi.n	800224e <task_button_press+0x112>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <task_button_press+0x94>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021fb 	.word	0x080021fb
 80021d8:	08002217 	.word	0x08002217
 80021dc:	08002231 	.word	0x08002231
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 80021e0:	4b69      	ldr	r3, [pc, #420]	; (8002388 <task_button_press+0x24c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a68      	ldr	r2, [pc, #416]	; (8002388 <task_button_press+0x24c>)
 80021e8:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 80021ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ee:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 80021f0:	2308      	movs	r3, #8
 80021f2:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 80021f4:	f000 fb80 	bl	80028f8 <task_led_ctrl_speed_reset>

                break;
 80021f8:	e02a      	b.n	8002250 <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80021fa:	4b64      	ldr	r3, [pc, #400]	; (800238c <task_button_press+0x250>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a62      	ldr	r2, [pc, #392]	; (800238c <task_button_press+0x250>)
 8002202:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002204:	23ff      	movs	r3, #255	; 0xff
 8002206:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002208:	2328      	movs	r3, #40	; 0x28
 800220a:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 800220c:	f000 fb80 	bl	8002910 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8002210:	f000 fba8 	bl	8002964 <task_led_ctrl_animate_state_demo>
                break;
 8002214:	e01c      	b.n	8002250 <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002216:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <task_button_press+0x254>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <task_button_press+0x254>)
 800221e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8002220:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002224:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002226:	2317      	movs	r3, #23
 8002228:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 800222a:	f000 fa27 	bl	800267c <task_led_ctrl_color_state_demo>
                break;
 800222e:	e00f      	b.n	8002250 <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8002230:	f000 f9be 	bl	80025b0 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002234:	f000 f9ec 	bl	8002610 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8002238:	4b56      	ldr	r3, [pc, #344]	; (8002394 <task_button_press+0x258>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a55      	ldr	r2, [pc, #340]	; (8002394 <task_button_press+0x258>)
 8002240:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8002242:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002246:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002248:	2306      	movs	r3, #6
 800224a:	74fb      	strb	r3, [r7, #19]
                break;
 800224c:	e000      	b.n	8002250 <task_button_press+0x114>
                default:
                break;
 800224e:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8002250:	2300      	movs	r3, #0
 8002252:	74bb      	strb	r3, [r7, #18]
 8002254:	e012      	b.n	800227c <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	2007      	movs	r0, #7
 800225a:	f7fe fea9 	bl	8000fb0 <animate_led_solid_custom_color>
                osDelay(500);
 800225e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002262:	f000 fcd3 	bl	8002c0c <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002266:	2100      	movs	r1, #0
 8002268:	2007      	movs	r0, #7
 800226a:	f7fe fea1 	bl	8000fb0 <animate_led_solid_custom_color>
                osDelay(500);
 800226e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002272:	f000 fccb 	bl	8002c0c <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8002276:	7cbb      	ldrb	r3, [r7, #18]
 8002278:	3301      	adds	r3, #1
 800227a:	74bb      	strb	r3, [r7, #18]
 800227c:	7cbb      	ldrb	r3, [r7, #18]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d9e9      	bls.n	8002256 <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8002282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002286:	2200      	movs	r2, #0
 8002288:	2118      	movs	r1, #24
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fc1f 	bl	8005ace <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8002290:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fc36 	bl	8005b06 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <task_button_press+0x248>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e758      	b.n	8002154 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe80 	bl	8001fac <task_led_ctrl_button_to_isr>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fea4 	bl	8001ffc <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d85d      	bhi.n	8002378 <task_button_press+0x23c>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <task_button_press+0x188>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022f5 	.word	0x080022f5
 80022cc:	08002329 	.word	0x08002329
 80022d0:	08002359 	.word	0x08002359
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <task_button_press+0x24c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <task_button_press+0x24c>)
 80022dc:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 80022de:	f000 faf3 	bl	80028c8 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2118      	movs	r1, #24
 80022e6:	2008      	movs	r0, #8
 80022e8:	f003 fbf1 	bl	8005ace <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 80022ec:	2008      	movs	r0, #8
 80022ee:	f003 fc0a 	bl	8005b06 <HAL_NVIC_EnableIRQ>
                break;
 80022f2:	e042      	b.n	800237a <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <task_button_press+0x250>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a24      	ldr	r2, [pc, #144]	; (800238c <task_button_press+0x250>)
 80022fc:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 80022fe:	f000 fb59 	bl	80029b4 <task_led_ctrl_animate_state>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002308:	f000 fb3e 	bl	8002988 <task_led_ctrl_animate_state_fixed>
 800230c:	e003      	b.n	8002316 <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 800230e:	f000 faff 	bl	8002910 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8002312:	f000 fb09 	bl	8002928 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2118      	movs	r1, #24
 800231a:	2028      	movs	r0, #40	; 0x28
 800231c:	f003 fbd7 	bl	8005ace <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002320:	2028      	movs	r0, #40	; 0x28
 8002322:	f003 fbf0 	bl	8005b06 <HAL_NVIC_EnableIRQ>
                break;
 8002326:	e028      	b.n	800237a <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <task_button_press+0x254>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <task_button_press+0x254>)
 8002330:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8002332:	f000 f997 	bl	8002664 <task_led_ctrl_color_state>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 800233c:	f000 f9aa 	bl	8002694 <task_led_ctrl_color_state_fixed>
 8002340:	e001      	b.n	8002346 <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002342:	f000 f9b9 	bl	80026b8 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2118      	movs	r1, #24
 800234a:	2017      	movs	r0, #23
 800234c:	f003 fbbf 	bl	8005ace <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002350:	2017      	movs	r0, #23
 8002352:	f003 fbd8 	bl	8005b06 <HAL_NVIC_EnableIRQ>

                break;
 8002356:	e010      	b.n	800237a <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <task_button_press+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <task_button_press+0x258>)
 8002360:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002362:	f000 f961 	bl	8002628 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2118      	movs	r1, #24
 800236a:	2006      	movs	r0, #6
 800236c:	f003 fbaf 	bl	8005ace <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002370:	2006      	movs	r0, #6
 8002372:	f003 fbc8 	bl	8005b06 <HAL_NVIC_EnableIRQ>
                break;
 8002376:	e000      	b.n	800237a <task_button_press+0x23e>
                default:
                break;
 8002378:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800237a:	e6eb      	b.n	8002154 <task_button_press+0x18>
 800237c:	200002bc 	.word	0x200002bc
 8002380:	200002dc 	.word	0x200002dc
 8002384:	200002dd 	.word	0x200002dd
 8002388:	200002e4 	.word	0x200002e4
 800238c:	200002e8 	.word	0x200002e8
 8002390:	200002ec 	.word	0x200002ec
 8002394:	200002f0 	.word	0x200002f0

08002398 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <task_led_ctrl_adjust_parameters+0x74>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <task_led_ctrl_adjust_parameters+0x74>)
 80023b2:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <task_led_ctrl_adjust_parameters+0x78>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11b      	bne.n	80023f4 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <task_led_ctrl_adjust_parameters+0x32>
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f8dd 	bl	8002584 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <task_led_ctrl_adjust_parameters+0x74>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10f      	bne.n	80023f4 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <task_led_ctrl_adjust_parameters+0x7c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <task_led_ctrl_adjust_parameters+0x7c>)
 80023de:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <task_led_ctrl_adjust_parameters+0x7c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b0a      	cmp	r3, #10
 80023e6:	d102      	bne.n	80023ee <task_led_ctrl_adjust_parameters+0x56>
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <task_led_ctrl_adjust_parameters+0x7c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <task_led_ctrl_adjust_parameters+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80023f4:	f000 f936 	bl	8002664 <task_led_ctrl_color_state>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <task_led_ctrl_adjust_parameters+0x6a>
 80023fe:	f000 fa01 	bl	8002804 <task_led_ctrl_color_random>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200002f9 	.word	0x200002f9
 8002410:	200002f4 	.word	0x200002f4
 8002414:	200002f5 	.word	0x200002f5

08002418 <task_led_ctrl_strip_one>:
char binary_start[25] = "application/macbinary\r\n\r\n";
extern uint8_t* g_uart_sector_full_buffer;
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;
void task_led_ctrl_strip_one(void *argument)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af02      	add	r7, sp, #8
 800241e:	6078      	str	r0, [r7, #4]
//	}
//
//    osDelay(10);
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 8002420:	e002      	b.n	8002428 <task_led_ctrl_strip_one+0x10>
 8002422:	2064      	movs	r0, #100	; 0x64
 8002424:	f000 fbf2 	bl	8002c0c <osDelay>
 8002428:	f7ff fe7c 	bl	8002124 <task_button_press_major_state_change>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f7      	bne.n	8002422 <task_led_ctrl_strip_one+0xa>

        if (1)//(flash_info_animation_enabled(g_led_state))
        {
            switch(g_led_state)
 8002432:	4b52      	ldr	r3, [pc, #328]	; (800257c <task_led_ctrl_strip_one+0x164>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b09      	cmp	r3, #9
 8002438:	f200 809d 	bhi.w	8002576 <task_led_ctrl_strip_one+0x15e>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <task_led_ctrl_strip_one+0x2c>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	0800255d 	.word	0x0800255d
 8002448:	0800246d 	.word	0x0800246d
 800244c:	08002483 	.word	0x08002483
 8002450:	080024b9 	.word	0x080024b9
 8002454:	080024d1 	.word	0x080024d1
 8002458:	080024e5 	.word	0x080024e5
 800245c:	080024f7 	.word	0x080024f7
 8002460:	08002511 	.word	0x08002511
 8002464:	08002523 	.word	0x08002523
 8002468:	0800253b 	.word	0x0800253b
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 800246c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002470:	2001      	movs	r0, #1
 8002472:	f7fe fd9d 	bl	8000fb0 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 8002476:	f241 3188 	movw	r1, #5000	; 0x1388
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff ff8c 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 8002480:	e07a      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002482:	f000 f937 	bl	80026f4 <task_led_ctrl_color_hex>
 8002486:	4603      	mov	r3, r0
 8002488:	4619      	mov	r1, r3
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fd90 	bl	8000fb0 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <task_led_ctrl_strip_one+0x168>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d109      	bne.n	80024ac <task_led_ctrl_strip_one+0x94>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249c:	2005      	movs	r0, #5
 800249e:	f7ff ff7b 	bl	8002398 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 80024a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a6:	f000 f86d 	bl	8002584 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 80024aa:	e065      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80024ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80024b0:	2005      	movs	r0, #5
 80024b2:	f7ff ff71 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 80024b6:	e05f      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 80024b8:	f7fe fd9c 	bl	8000ff4 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 80024bc:	2264      	movs	r2, #100	; 0x64
 80024be:	2100      	movs	r1, #0
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe ffb7 	bl	8001434 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024c6:	2100      	movs	r1, #0
 80024c8:	2005      	movs	r0, #5
 80024ca:	f7ff ff65 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 80024ce:	e053      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	2101      	movs	r1, #1
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fe ffad 	bl	8001434 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024da:	2100      	movs	r1, #0
 80024dc:	200a      	movs	r0, #10
 80024de:	f7ff ff5b 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 80024e2:	e049      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 80024e4:	210a      	movs	r1, #10
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff f836 	bl	8001558 <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024ec:	2100      	movs	r1, #0
 80024ee:	2005      	movs	r0, #5
 80024f0:	f7ff ff52 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 80024f4:	e040      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80024f6:	f000 f8fd 	bl	80026f4 <task_led_ctrl_color_hex>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2214      	movs	r2, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff f90d 	bl	8001720 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002506:	2100      	movs	r1, #0
 8002508:	200a      	movs	r0, #10
 800250a:	f7ff ff45 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 800250e:	e033      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 8002510:	2114      	movs	r1, #20
 8002512:	2001      	movs	r0, #1
 8002514:	f7ff f9a6 	bl	8001864 <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002518:	2100      	movs	r1, #0
 800251a:	2002      	movs	r0, #2
 800251c:	f7ff ff3c 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 8002520:	e02a      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002522:	f000 f8e7 	bl	80026f4 <task_led_ctrl_color_hex>
 8002526:	4603      	mov	r3, r0
 8002528:	4619      	mov	r1, r3
 800252a:	2001      	movs	r0, #1
 800252c:	f7fe fdcc 	bl	80010c8 <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002530:	2100      	movs	r1, #0
 8002532:	200a      	movs	r0, #10
 8002534:	f7ff ff30 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 8002538:	e01e      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 800253a:	f7fe fd5b 	bl	8000ff4 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800253e:	f000 f8d9 	bl	80026f4 <task_led_ctrl_color_hex>
 8002542:	4601      	mov	r1, r0
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2314      	movs	r3, #20
 800254a:	2214      	movs	r2, #20
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe fefd 	bl	800134c <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002552:	2100      	movs	r1, #0
 8002554:	2005      	movs	r0, #5
 8002556:	f7ff ff1f 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 800255a:	e00d      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 800255c:	f000 f8ca 	bl	80026f4 <task_led_ctrl_color_hex>
 8002560:	4603      	mov	r3, r0
 8002562:	2214      	movs	r2, #20
 8002564:	4619      	mov	r1, r3
 8002566:	2001      	movs	r0, #1
 8002568:	f7fe fd4e 	bl	8001008 <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800256c:	2100      	movs	r1, #0
 800256e:	200a      	movs	r0, #10
 8002570:	f7ff ff12 	bl	8002398 <task_led_ctrl_adjust_parameters>
                break;
 8002574:	e000      	b.n	8002578 <task_led_ctrl_strip_one+0x160>
                default:
                break;
 8002576:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 8002578:	e756      	b.n	8002428 <task_led_ctrl_strip_one+0x10>
 800257a:	bf00      	nop
 800257c:	200002f5 	.word	0x200002f5
 8002580:	200002f4 	.word	0x200002f4

08002584 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002590:	e002      	b.n	8002598 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 fb3a 	bl	8002c0c <osDelay>
    while (ms_count++ < time_ms)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60fa      	str	r2, [r7, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f6      	bhi.n	8002592 <task_led_ctrl_delay+0xe>
    }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <task_led_ctrl_brightness_adjust+0x58>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <task_led_ctrl_brightness_adjust+0x14>
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <task_led_ctrl_brightness_adjust+0x58>)
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e005      	b.n	80025d0 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <task_led_ctrl_brightness_adjust+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <task_led_ctrl_brightness_adjust+0x58>)
 80025ce:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <task_led_ctrl_brightness_adjust+0x58>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d010      	beq.n	80025fa <task_led_ctrl_brightness_adjust+0x4a>
 80025d8:	2b02      	cmp	r3, #2
 80025da:	dc13      	bgt.n	8002604 <task_led_ctrl_brightness_adjust+0x54>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <task_led_ctrl_brightness_adjust+0x36>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d005      	beq.n	80025f0 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 80025e4:	e00e      	b.n	8002604 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 80025e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025ea:	f7fe fbdd 	bl	8000da8 <current_monitor_set>
        break;
 80025ee:	e009      	b.n	8002604 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80025f0:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80025f4:	f7fe fbd8 	bl	8000da8 <current_monitor_set>
        break;
 80025f8:	e004      	b.n	8002604 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80025fa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800260c <task_led_ctrl_brightness_adjust+0x5c>
 80025fe:	f7fe fbd3 	bl	8000da8 <current_monitor_set>
        break;
 8002602:	bf00      	nop
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200002f7 	.word	0x200002f7
 800260c:	3c23d70a 	.word	0x3c23d70a

08002610 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <task_led_ctrl_clear_pause+0x14>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	200002de 	.word	0x200002de

08002628 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <task_led_ctrl_pause+0x34>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <task_led_ctrl_pause+0x14>
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <task_led_ctrl_pause+0x38>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e002      	b.n	8002642 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <task_led_ctrl_pause+0x38>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <task_led_ctrl_pause+0x34>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <task_led_ctrl_pause+0x34>)
 800264e:	701a      	strb	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000075 	.word	0x20000075
 8002660:	200002de 	.word	0x200002de

08002664 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <task_led_ctrl_color_state+0x14>)
 800266a:	781b      	ldrb	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200002f8 	.word	0x200002f8

0800267c <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <task_led_ctrl_color_state_demo+0x14>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	200002f8 	.word	0x200002f8

08002694 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <task_led_ctrl_color_state_fixed+0x1c>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <task_led_ctrl_color_state_fixed+0x20>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200002f8 	.word	0x200002f8
 80026b4:	20000074 	.word	0x20000074

080026b8 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
    bool return_val = false;
 80026be:	2300      	movs	r3, #0
 80026c0:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <task_led_ctrl_color_adjust+0x38>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b15      	cmp	r3, #21
 80026c8:	d105      	bne.n	80026d6 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <task_led_ctrl_color_adjust+0x38>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80026d0:	2301      	movs	r3, #1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	e005      	b.n	80026e2 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <task_led_ctrl_color_adjust+0x38>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <task_led_ctrl_color_adjust+0x38>)
 80026e0:	701a      	strb	r2, [r3, #0]
    return return_val;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	20000074 	.word	0x20000074

080026f4 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <task_led_ctrl_color_hex+0x1c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <task_led_ctrl_color_hex+0x20>)
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000074 	.word	0x20000074
 8002714:	20000004 	.word	0x20000004

08002718 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	ed2d 8b02 	vpush	{d8}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <task_led_ctrl_color_red_hex+0x48>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <task_led_ctrl_color_red_hex+0x4c>)
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	b2db      	uxtb	r3, r3
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800273a:	f7fe fb57 	bl	8000dec <current_monitor_ratio>
 800273e:	eeb0 7a40 	vmov.f32	s14, s0
 8002742:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274a:	edc7 7a01 	vstr	s15, [r7, #4]
 800274e:	793b      	ldrb	r3, [r7, #4]
 8002750:	b2db      	uxtb	r3, r3
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	ecbd 8b02 	vpop	{d8}
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000074 	.word	0x20000074
 8002764:	20000004 	.word	0x20000004

08002768 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	ed2d 8b02 	vpush	{d8}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <task_led_ctrl_color_green_hex+0x48>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <task_led_ctrl_color_green_hex+0x4c>)
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b2db      	uxtb	r3, r3
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800278a:	f7fe fb2f 	bl	8000dec <current_monitor_ratio>
 800278e:	eeb0 7a40 	vmov.f32	s14, s0
 8002792:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279a:	edc7 7a01 	vstr	s15, [r7, #4]
 800279e:	793b      	ldrb	r3, [r7, #4]
 80027a0:	b2db      	uxtb	r3, r3
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	ecbd 8b02 	vpop	{d8}
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000074 	.word	0x20000074
 80027b4:	20000004 	.word	0x20000004

080027b8 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	ed2d 8b02 	vpush	{d8}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <task_led_ctrl_color_blue_hex+0x44>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <task_led_ctrl_color_blue_hex+0x48>)
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80027d8:	f7fe fb08 	bl	8000dec <current_monitor_ratio>
 80027dc:	eeb0 7a40 	vmov.f32	s14, s0
 80027e0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80027e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80027ec:	793b      	ldrb	r3, [r7, #4]
 80027ee:	b2db      	uxtb	r3, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	ecbd 8b02 	vpop	{d8}
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000074 	.word	0x20000074
 8002800:	20000004 	.word	0x20000004

08002804 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800280a:	2116      	movs	r1, #22
 800280c:	2000      	movs	r0, #0
 800280e:	f008 fe4b 	bl	800b4a8 <random_num>
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <task_led_ctrl_color_random+0x48>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	79fa      	ldrb	r2, [r7, #7]
 800281c:	429a      	cmp	r2, r3
 800281e:	d10e      	bne.n	800283e <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b15      	cmp	r3, #21
 8002824:	d105      	bne.n	8002832 <task_led_ctrl_color_random+0x2e>
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	3b01      	subs	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <task_led_ctrl_color_random+0x48>)
 800282e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002830:	e008      	b.n	8002844 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	3301      	adds	r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <task_led_ctrl_color_random+0x48>)
 800283a:	701a      	strb	r2, [r3, #0]
}
 800283c:	e002      	b.n	8002844 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800283e:	4a03      	ldr	r2, [pc, #12]	; (800284c <task_led_ctrl_color_random+0x48>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	7013      	strb	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000074 	.word	0x20000074

08002850 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <task_led_ctrl_speed+0x6c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d81f      	bhi.n	80028a4 <task_led_ctrl_speed+0x54>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <task_led_ctrl_speed+0x1c>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	08002881 	.word	0x08002881
 8002870:	08002887 	.word	0x08002887
 8002874:	0800288d 	.word	0x0800288d
 8002878:	08002895 	.word	0x08002895
 800287c:	0800289d 	.word	0x0800289d
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <task_led_ctrl_speed+0x70>)
 8002882:	607b      	str	r3, [r7, #4]
        break;
 8002884:	e00f      	b.n	80028a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <task_led_ctrl_speed+0x74>)
 8002888:	607b      	str	r3, [r7, #4]
        break;
 800288a:	e00c      	b.n	80028a6 <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 800288c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002890:	607b      	str	r3, [r7, #4]
        break;
 8002892:	e008      	b.n	80028a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8002894:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002898:	607b      	str	r3, [r7, #4]
        break;
 800289a:	e004      	b.n	80028a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 800289c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80028a0:	607b      	str	r3, [r7, #4]
        break;
 80028a2:	e000      	b.n	80028a6 <task_led_ctrl_speed+0x56>
        default:
        break;
 80028a4:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	ee07 3a90 	vmov	s15, r3
}
 80028ac:	eeb0 0a67 	vmov.f32	s0, s15
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200002f6 	.word	0x200002f6
 80028c0:	41200000 	.word	0x41200000
 80028c4:	40a00000 	.word	0x40a00000

080028c8 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <task_led_ctrl_speed_adjust+0x2c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <task_led_ctrl_speed_adjust+0x14>
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <task_led_ctrl_speed_adjust+0x2c>)
 80028d6:	2204      	movs	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80028da:	e005      	b.n	80028e8 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <task_led_ctrl_speed_adjust+0x2c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <task_led_ctrl_speed_adjust+0x2c>)
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200002f6 	.word	0x200002f6

080028f8 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <task_led_ctrl_speed_reset+0x14>)
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	200002f6 	.word	0x200002f6

08002910 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <task_led_ctrl_animate_iteration_reset+0x14>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	200002f9 	.word	0x200002f9

08002928 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
    bool return_val = false;
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <task_led_ctrl_animate_adjust_state+0x38>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d105      	bne.n	8002946 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <task_led_ctrl_animate_adjust_state+0x38>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002940:	2301      	movs	r3, #1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	e005      	b.n	8002952 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <task_led_ctrl_animate_adjust_state+0x38>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <task_led_ctrl_animate_adjust_state+0x38>)
 8002950:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002952:	79fb      	ldrb	r3, [r7, #7]
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	200002f5 	.word	0x200002f5

08002964 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <task_led_ctrl_animate_state_demo+0x1c>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <task_led_ctrl_animate_state_demo+0x20>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	200002f4 	.word	0x200002f4
 8002984:	200002f9 	.word	0x200002f9

08002988 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <task_led_ctrl_animate_state_fixed+0x20>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <task_led_ctrl_animate_state_fixed+0x24>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <task_led_ctrl_animate_state_fixed+0x28>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	200002f4 	.word	0x200002f4
 80029ac:	200002f5 	.word	0x200002f5
 80029b0:	200002f9 	.word	0x200002f9

080029b4 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <task_led_ctrl_animate_state+0x14>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200002f4 	.word	0x200002f4

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <SysTick_Handler+0x1c>)
 8002a26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a28:	f001 fd10 	bl	800444c <xTaskGetSchedulerState>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a32:	f002 fc31 	bl	8005298 <xPortSysTickHandler>
  }
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a44:	2100      	movs	r1, #0
 8002a46:	f06f 0004 	mvn.w	r0, #4
 8002a4a:	f7ff ffbf 	bl	80029cc <__NVIC_SetPriority>
#endif
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a5a:	f3ef 8305 	mrs	r3, IPSR
 8002a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a66:	f06f 0305 	mvn.w	r3, #5
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	e00c      	b.n	8002a88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <osKernelInitialize+0x44>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <osKernelInitialize+0x44>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e002      	b.n	8002a88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200002fc 	.word	0x200002fc

08002a9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa2:	f3ef 8305 	mrs	r3, IPSR
 8002aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8002aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002aae:	f06f 0305 	mvn.w	r3, #5
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	e010      	b.n	8002ad8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <osKernelStart+0x48>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d109      	bne.n	8002ad2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002abe:	f7ff ffbf 	bl	8002a40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <osKernelStart+0x48>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ac8:	f001 f866 	bl	8003b98 <vTaskStartScheduler>
      stat = osOK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	e002      	b.n	8002ad8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200002fc 	.word	0x200002fc

08002ae8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	; 0x38
 8002aec:	af04      	add	r7, sp, #16
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af8:	f3ef 8305 	mrs	r3, IPSR
 8002afc:	617b      	str	r3, [r7, #20]
  return(result);
 8002afe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d17e      	bne.n	8002c02 <osThreadNew+0x11a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d07b      	beq.n	8002c02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b0e:	2318      	movs	r3, #24
 8002b10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d045      	beq.n	8002bae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <osThreadNew+0x48>
        name = attr->name;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <osThreadNew+0x6e>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b38      	cmp	r3, #56	; 0x38
 8002b48:	d805      	bhi.n	8002b56 <osThreadNew+0x6e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <osThreadNew+0x72>
        return (NULL);
 8002b56:	2300      	movs	r3, #0
 8002b58:	e054      	b.n	8002c04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <osThreadNew+0xa8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b5b      	cmp	r3, #91	; 0x5b
 8002b78:	d90a      	bls.n	8002b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <osThreadNew+0xa8>
        mem = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e010      	b.n	8002bb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10c      	bne.n	8002bb2 <osThreadNew+0xca>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d108      	bne.n	8002bb2 <osThreadNew+0xca>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <osThreadNew+0xca>
          mem = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e001      	b.n	8002bb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d110      	bne.n	8002bda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bc0:	9202      	str	r2, [sp, #8]
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6a3a      	ldr	r2, [r7, #32]
 8002bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fe0c 	bl	80037ec <xTaskCreateStatic>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e013      	b.n	8002c02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d110      	bne.n	8002c02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fe57 	bl	80038a6 <xTaskCreate>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <osThreadNew+0x11a>
            hTask = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c02:	693b      	ldr	r3, [r7, #16]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c14:	f3ef 8305 	mrs	r3, IPSR
 8002c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <osDelay+0x1c>
    stat = osErrorISR;
 8002c20:	f06f 0305 	mvn.w	r3, #5
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e007      	b.n	8002c38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ff7c 	bl	8003b30 <vTaskDelay>
    }
  }

  return (stat);
 8002c38:	68fb      	ldr	r3, [r7, #12]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <vApplicationGetIdleTaskMemory+0x30>)
 8002c5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000300 	.word	0x20000300
 8002c74:	2000035c 	.word	0x2000035c

08002c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8002c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c96:	601a      	str	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	2000055c 	.word	0x2000055c
 8002ca8:	200005b8 	.word	0x200005b8

08002cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0208 	add.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f103 0208 	add.w	r2, r3, #8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f103 0208 	add.w	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d103      	bne.n	8002d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e00c      	b.n	8002d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3308      	adds	r3, #8
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e002      	b.n	8002d7c <vListInsert+0x2e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d2f6      	bcs.n	8002d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6852      	ldr	r2, [r2, #4]
 8002de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d103      	bne.n	8002df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1e5a      	subs	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e3e:	f002 f999 	bl	8005174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	68f9      	ldr	r1, [r7, #12]
 8002e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	441a      	add	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	22ff      	movs	r2, #255	; 0xff
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d114      	bne.n	8002ebe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01a      	beq.n	8002ed2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f915 	bl	80040d0 <xTaskRemoveFromEventList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <xQueueGenericReset+0xcc>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	e009      	b.n	8002ed2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fef2 	bl	8002cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3324      	adds	r3, #36	; 0x24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff feed 	bl	8002cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ed2:	f002 f97f 	bl	80051d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08e      	sub	sp, #56	; 0x38
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <xQueueGenericCreateStatic+0x52>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <xQueueGenericCreateStatic+0x56>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericCreateStatic+0x58>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <xQueueGenericCreateStatic+0x7e>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <xQueueGenericCreateStatic+0x82>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <xQueueGenericCreateStatic+0x84>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
}
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f82:	2350      	movs	r3, #80	; 0x50
 8002f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d00a      	beq.n	8002fa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61bb      	str	r3, [r7, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f805 	bl	8002fd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003002:	2101      	movs	r1, #1
 8003004:	69b8      	ldr	r0, [r7, #24]
 8003006:	f7ff ff05 	bl	8002e14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	; 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xQueueGenericSend+0x32>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <xQueueGenericSend+0x40>
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <xQueueGenericSend+0x44>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <xQueueGenericSend+0x46>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <xQueueGenericSend+0x60>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d103      	bne.n	800308a <xQueueGenericSend+0x6e>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <xQueueGenericSend+0x72>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericSend+0x74>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueGenericSend+0x8e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030aa:	f001 f9cf 	bl	800444c <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueGenericSend+0x9e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueGenericSend+0xa2>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericSend+0xa4>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueGenericSend+0xbe>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61fb      	str	r3, [r7, #28]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030da:	f002 f84b 	bl	8005174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <xQueueGenericSend+0xd4>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d129      	bne.n	8003144 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f6:	f000 fa0b 	bl	8003510 <prvCopyDataToQueue>
 80030fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	3324      	adds	r3, #36	; 0x24
 8003108:	4618      	mov	r0, r3
 800310a:	f000 ffe1 	bl	80040d0 <xTaskRemoveFromEventList>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003114:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <xQueueGenericSend+0x1f8>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	e00a      	b.n	800313c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800312c:	4b39      	ldr	r3, [pc, #228]	; (8003214 <xQueueGenericSend+0x1f8>)
 800312e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800313c:	f002 f84a 	bl	80051d4 <vPortExitCritical>
				return pdPASS;
 8003140:	2301      	movs	r3, #1
 8003142:	e063      	b.n	800320c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800314a:	f002 f843 	bl	80051d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800314e:	2300      	movs	r3, #0
 8003150:	e05c      	b.n	800320c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f81b 	bl	8004198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003162:	2301      	movs	r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003166:	f002 f835 	bl	80051d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800316a:	f000 fd7b 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800316e:	f002 f801 	bl	8005174 <vPortEnterCritical>
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003178:	b25b      	sxtb	r3, r3
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317e:	d103      	bne.n	8003188 <xQueueGenericSend+0x16c>
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318e:	b25b      	sxtb	r3, r3
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003194:	d103      	bne.n	800319e <xQueueGenericSend+0x182>
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800319e:	f002 f819 	bl	80051d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031a2:	1d3a      	adds	r2, r7, #4
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 f80a 	bl	80041c4 <xTaskCheckForTimeOut>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d124      	bne.n	8003200 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b8:	f000 faa2 	bl	8003700 <prvIsQueueFull>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	3310      	adds	r3, #16
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ff30 	bl	8004030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d2:	f000 fa2d 	bl	8003630 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031d6:	f000 fd53 	bl	8003c80 <xTaskResumeAll>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f47f af7c 	bne.w	80030da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <xQueueGenericSend+0x1f8>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	e772      	b.n	80030da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f6:	f000 fa1b 	bl	8003630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031fa:	f000 fd41 	bl	8003c80 <xTaskResumeAll>
 80031fe:	e76c      	b.n	80030da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003202:	f000 fa15 	bl	8003630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003206:	f000 fd3b 	bl	8003c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800320a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800320c:	4618      	mov	r0, r3
 800320e:	3738      	adds	r7, #56	; 0x38
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b090      	sub	sp, #64	; 0x40
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <xQueueGenericSendFromISR+0x3c>
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <xQueueGenericSendFromISR+0x40>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <xQueueGenericSendFromISR+0x42>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d103      	bne.n	8003282 <xQueueGenericSendFromISR+0x6a>
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <xQueueGenericSendFromISR+0x6e>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <xQueueGenericSendFromISR+0x70>
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	623b      	str	r3, [r7, #32]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032a2:	f002 f849 	bl	8005338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032a6:	f3ef 8211 	mrs	r2, BASEPRI
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	61fa      	str	r2, [r7, #28]
 80032bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <xQueueGenericSendFromISR+0xbc>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d12f      	bne.n	8003334 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032ea:	f000 f911 	bl	8003510 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f6:	d112      	bne.n	800331e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d016      	beq.n	800332e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fee3 	bl	80040d0 <xTaskRemoveFromEventList>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e007      	b.n	800332e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800331e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003322:	3301      	adds	r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	b25a      	sxtb	r2, r3
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800332e:	2301      	movs	r3, #1
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003332:	e001      	b.n	8003338 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003334:	2300      	movs	r3, #0
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003342:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003346:	4618      	mov	r0, r3
 8003348:	3740      	adds	r7, #64	; 0x40
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <xQueueReceive+0x30>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	623b      	str	r3, [r7, #32]
}
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <xQueueReceive+0x3e>
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <xQueueReceive+0x42>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueReceive+0x44>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueReceive+0x5e>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	61fb      	str	r3, [r7, #28]
}
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ae:	f001 f84d 	bl	800444c <xTaskGetSchedulerState>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <xQueueReceive+0x6e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <xQueueReceive+0x72>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueReceive+0x74>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueReceive+0x8e>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	61bb      	str	r3, [r7, #24]
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033de:	f001 fec9 	bl	8005174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01f      	beq.n	800342e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f2:	f000 f8f7 	bl	80035e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00f      	beq.n	8003426 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	3310      	adds	r3, #16
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fe60 	bl	80040d0 <xTaskRemoveFromEventList>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <xQueueReceive+0x1bc>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003426:	f001 fed5 	bl	80051d4 <vPortExitCritical>
				return pdPASS;
 800342a:	2301      	movs	r3, #1
 800342c:	e069      	b.n	8003502 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003434:	f001 fece 	bl	80051d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003438:	2300      	movs	r3, #0
 800343a:	e062      	b.n	8003502 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fea6 	bl	8004198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003450:	f001 fec0 	bl	80051d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003454:	f000 fc06 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003458:	f001 fe8c 	bl	8005174 <vPortEnterCritical>
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003462:	b25b      	sxtb	r3, r3
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d103      	bne.n	8003472 <xQueueReceive+0x122>
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800347e:	d103      	bne.n	8003488 <xQueueReceive+0x138>
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003488:	f001 fea4 	bl	80051d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800348c:	1d3a      	adds	r2, r7, #4
 800348e:	f107 0310 	add.w	r3, r7, #16
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fe95 	bl	80041c4 <xTaskCheckForTimeOut>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d123      	bne.n	80034e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a2:	f000 f917 	bl	80036d4 <prvIsQueueEmpty>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fdbb 	bl	8004030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034bc:	f000 f8b8 	bl	8003630 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034c0:	f000 fbde 	bl	8003c80 <xTaskResumeAll>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d189      	bne.n	80033de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <xQueueReceive+0x1bc>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	e780      	b.n	80033de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034de:	f000 f8a7 	bl	8003630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034e2:	f000 fbcd 	bl	8003c80 <xTaskResumeAll>
 80034e6:	e77a      	b.n	80033de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ea:	f000 f8a1 	bl	8003630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ee:	f000 fbc7 	bl	8003c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034f4:	f000 f8ee 	bl	80036d4 <prvIsQueueEmpty>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f43f af6f 	beq.w	80033de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003502:	4618      	mov	r0, r3
 8003504:	3730      	adds	r7, #48	; 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d14d      	bne.n	80035d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 ffa4 	bl	8004488 <xTaskPriorityDisinherit>
 8003540:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e043      	b.n	80035d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d119      	bne.n	8003584 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6858      	ldr	r0, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	461a      	mov	r2, r3
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	f008 fa6d 	bl	800ba3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	441a      	add	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d32b      	bcc.n	80035d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	e026      	b.n	80035d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68d8      	ldr	r0, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	461a      	mov	r2, r3
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	f008 fa53 	bl	800ba3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	425b      	negs	r3, r3
 800359e:	441a      	add	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d207      	bcs.n	80035c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	425b      	negs	r3, r3
 80035ba:	441a      	add	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d105      	bne.n	80035d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035da:	697b      	ldr	r3, [r7, #20]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	441a      	add	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d303      	bcc.n	8003618 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68d9      	ldr	r1, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	461a      	mov	r2, r3
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f008 fa09 	bl	800ba3a <memcpy>
	}
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003638:	f001 fd9c 	bl	8005174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003642:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003644:	e011      	b.n	800366a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fd3c 	bl	80040d0 <xTaskRemoveFromEventList>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800365e:	f000 fe13 	bl	8004288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3b01      	subs	r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	dce9      	bgt.n	8003646 <prvUnlockQueue+0x16>
 8003672:	e000      	b.n	8003676 <prvUnlockQueue+0x46>
					break;
 8003674:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	22ff      	movs	r2, #255	; 0xff
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800367e:	f001 fda9 	bl	80051d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003682:	f001 fd77 	bl	8005174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800368e:	e011      	b.n	80036b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d012      	beq.n	80036be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3310      	adds	r3, #16
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fd17 	bl	80040d0 <xTaskRemoveFromEventList>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036a8:	f000 fdee 	bl	8004288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	dce9      	bgt.n	8003690 <prvUnlockQueue+0x60>
 80036bc:	e000      	b.n	80036c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036c8:	f001 fd84 	bl	80051d4 <vPortExitCritical>
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036dc:	f001 fd4a 	bl	8005174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e001      	b.n	80036f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036f2:	f001 fd6f 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003708:	f001 fd34 	bl	8005174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	429a      	cmp	r2, r3
 8003716:	d102      	bne.n	800371e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e001      	b.n	8003722 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003722:	f001 fd57 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e014      	b.n	800376a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <vQueueAddToRegistry+0x50>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <vQueueAddToRegistry+0x50>)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <vQueueAddToRegistry+0x50>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003762:	e006      	b.n	8003772 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b07      	cmp	r3, #7
 800376e:	d9e7      	bls.n	8003740 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	200009b8 	.word	0x200009b8

08003784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003794:	f001 fcee 	bl	8005174 <vPortEnterCritical>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800379e:	b25b      	sxtb	r3, r3
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a4:	d103      	bne.n	80037ae <vQueueWaitForMessageRestricted+0x2a>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ba:	d103      	bne.n	80037c4 <vQueueWaitForMessageRestricted+0x40>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c4:	f001 fd06 	bl	80051d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3324      	adds	r3, #36	; 0x24
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fc4d 	bl	8004078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff26 	bl	8003630 <prvUnlockQueue>
	}
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08e      	sub	sp, #56	; 0x38
 80037f0:	af04      	add	r7, sp, #16
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	623b      	str	r3, [r7, #32]
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xTaskCreateStatic+0x46>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	61fb      	str	r3, [r7, #28]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003832:	235c      	movs	r3, #92	; 0x5c
 8003834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b5c      	cmp	r3, #92	; 0x5c
 800383a:	d00a      	beq.n	8003852 <xTaskCreateStatic+0x66>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61bb      	str	r3, [r7, #24]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <xTaskCreateStatic+0xac>
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003872:	2300      	movs	r3, #0
 8003874:	9303      	str	r3, [sp, #12]
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	9302      	str	r3, [sp, #8]
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f850 	bl	8003930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003892:	f000 f8dd 	bl	8003a50 <prvAddNewTaskToReadyList>
 8003896:	e001      	b.n	800389c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800389c:	697b      	ldr	r3, [r7, #20]
	}
 800389e:	4618      	mov	r0, r3
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	; 0x30
 80038aa:	af04      	add	r7, sp, #16
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fd7c 	bl	80053b8 <pvPortMalloc>
 80038c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038c8:	205c      	movs	r0, #92	; 0x5c
 80038ca:	f001 fd75 	bl	80053b8 <pvPortMalloc>
 80038ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
 80038dc:	e005      	b.n	80038ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f001 fe36 	bl	8005550 <vPortFree>
 80038e4:	e001      	b.n	80038ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f80e 	bl	8003930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003914:	69f8      	ldr	r0, [r7, #28]
 8003916:	f000 f89b 	bl	8003a50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e002      	b.n	8003926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003926:	69bb      	ldr	r3, [r7, #24]
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	21a5      	movs	r1, #165	; 0xa5
 800394a:	f008 f805 	bl	800b958 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003958:	3b01      	subs	r3, #1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	617b      	str	r3, [r7, #20]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01f      	beq.n	80039ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e012      	b.n	80039ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	7819      	ldrb	r1, [r3, #0]
 800399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	3334      	adds	r3, #52	; 0x34
 80039a4:	460a      	mov	r2, r1
 80039a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d9e9      	bls.n	8003994 <prvInitialiseNewTask+0x64>
 80039c0:	e000      	b.n	80039c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80039c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039cc:	e003      	b.n	80039d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	2b37      	cmp	r3, #55	; 0x37
 80039da:	d901      	bls.n	80039e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039dc:	2337      	movs	r3, #55	; 0x37
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f978 	bl	8002cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	3318      	adds	r3, #24
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f973 	bl	8002cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	2200      	movs	r2, #0
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	69b8      	ldr	r0, [r7, #24]
 8003a30:	f001 fa70 	bl	8004f14 <pxPortInitialiseStack>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a46:	bf00      	nop
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a58:	f001 fb8c 	bl	8005174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <prvAddNewTaskToReadyList+0xc4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	4a2c      	ldr	r2, [pc, #176]	; (8003b14 <prvAddNewTaskToReadyList+0xc4>)
 8003a64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a66:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <prvAddNewTaskToReadyList+0xc8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <prvAddNewTaskToReadyList+0xc8>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a74:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <prvAddNewTaskToReadyList+0xc4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d110      	bne.n	8003a9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a7c:	f000 fc28 	bl	80042d0 <prvInitialiseTaskLists>
 8003a80:	e00d      	b.n	8003a9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a82:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <prvAddNewTaskToReadyList+0xcc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <prvAddNewTaskToReadyList+0xc8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d802      	bhi.n	8003a9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <prvAddNewTaskToReadyList+0xc8>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <prvAddNewTaskToReadyList+0xd0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <prvAddNewTaskToReadyList+0xd0>)
 8003aa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <prvAddNewTaskToReadyList+0xd0>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <prvAddNewTaskToReadyList+0xd4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d903      	bls.n	8003ac4 <prvAddNewTaskToReadyList+0x74>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <prvAddNewTaskToReadyList+0xd4>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <prvAddNewTaskToReadyList+0xd8>)
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7ff f913 	bl	8002d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ae0:	f001 fb78 	bl	80051d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <prvAddNewTaskToReadyList+0xcc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <prvAddNewTaskToReadyList+0xc8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d207      	bcs.n	8003b0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <prvAddNewTaskToReadyList+0xdc>)
 8003afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000ecc 	.word	0x20000ecc
 8003b18:	200009f8 	.word	0x200009f8
 8003b1c:	20000ed8 	.word	0x20000ed8
 8003b20:	20000ee8 	.word	0x20000ee8
 8003b24:	20000ed4 	.word	0x20000ed4
 8003b28:	200009fc 	.word	0x200009fc
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d017      	beq.n	8003b72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <vTaskDelay+0x60>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <vTaskDelay+0x30>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60bb      	str	r3, [r7, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b60:	f000 f880 	bl	8003c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fe32 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b6c:	f000 f888 	bl	8003c80 <xTaskResumeAll>
 8003b70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <vTaskDelay+0x64>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000ef4 	.word	0x20000ef4
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ba6:	463a      	mov	r2, r7
 8003ba8:	1d39      	adds	r1, r7, #4
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f848 	bl	8002c44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	9202      	str	r2, [sp, #8]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	4921      	ldr	r1, [pc, #132]	; (8003c4c <vTaskStartScheduler+0xb4>)
 8003bc8:	4821      	ldr	r0, [pc, #132]	; (8003c50 <vTaskStartScheduler+0xb8>)
 8003bca:	f7ff fe0f 	bl	80037ec <xTaskCreateStatic>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <vTaskStartScheduler+0xbc>)
 8003bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <vTaskStartScheduler+0xbc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e001      	b.n	8003be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bec:	f000 fe44 	bl	8004878 <xTimerCreateTimerTask>
 8003bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d116      	bne.n	8003c26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	613b      	str	r3, [r7, #16]
}
 8003c0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <vTaskStartScheduler+0xc0>)
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <vTaskStartScheduler+0xc4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c1a:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <vTaskStartScheduler+0xc8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c20:	f001 fa06 	bl	8005030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c24:	e00e      	b.n	8003c44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2c:	d10a      	bne.n	8003c44 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60fb      	str	r3, [r7, #12]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <vTaskStartScheduler+0xaa>
}
 8003c44:	bf00      	nop
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	0800c65c 	.word	0x0800c65c
 8003c50:	080042a1 	.word	0x080042a1
 8003c54:	20000ef0 	.word	0x20000ef0
 8003c58:	20000eec 	.word	0x20000eec
 8003c5c:	20000ed8 	.word	0x20000ed8
 8003c60:	20000ed0 	.word	0x20000ed0

08003c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <vTaskSuspendAll+0x18>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <vTaskSuspendAll+0x18>)
 8003c70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	20000ef4 	.word	0x20000ef4

08003c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c8e:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <xTaskResumeAll+0x118>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <xTaskResumeAll+0x2c>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	603b      	str	r3, [r7, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cac:	f001 fa62 	bl	8005174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d162      	bne.n	8003d88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <xTaskResumeAll+0x11c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d05e      	beq.n	8003d88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cca:	e02f      	b.n	8003d2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <xTaskResumeAll+0x120>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f871 	bl	8002dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f86c 	bl	8002dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <xTaskResumeAll+0x124>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <xTaskResumeAll+0x7c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <xTaskResumeAll+0x124>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <xTaskResumeAll+0x128>)
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fff7 	bl	8002d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <xTaskResumeAll+0x12c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTaskResumeAll+0x120>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1cb      	bne.n	8003ccc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d3a:	f000 fb67 	bl	800440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <xTaskResumeAll+0x134>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d4a:	f000 f859 	bl	8003e00 <xTaskIncrementTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f1      	bne.n	8003d4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <xTaskResumeAll+0x134>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <xTaskResumeAll+0x138>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 fa24 	bl	80051d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000ef4 	.word	0x20000ef4
 8003d9c:	20000ecc 	.word	0x20000ecc
 8003da0:	20000e8c 	.word	0x20000e8c
 8003da4:	20000ed4 	.word	0x20000ed4
 8003da8:	200009fc 	.word	0x200009fc
 8003dac:	200009f8 	.word	0x200009f8
 8003db0:	20000ee0 	.word	0x20000ee0
 8003db4:	20000edc 	.word	0x20000edc
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <xTaskGetTickCount+0x1c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000ed0 	.word	0x20000ed0

08003ddc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003de2:	f001 faa9 	bl	8005338 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <xTaskGetTickCountFromISR+0x20>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df0:	683b      	ldr	r3, [r7, #0]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000ed0 	.word	0x20000ed0

08003e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <xTaskIncrementTick+0x148>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 808f 	bne.w	8003f32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <xTaskIncrementTick+0x14c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e1c:	4a4b      	ldr	r2, [pc, #300]	; (8003f4c <xTaskIncrementTick+0x14c>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d120      	bne.n	8003e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <xTaskIncrementTick+0x150>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	603b      	str	r3, [r7, #0]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskIncrementTick+0x46>
 8003e48:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <xTaskIncrementTick+0x150>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <xTaskIncrementTick+0x154>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <xTaskIncrementTick+0x150>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4a3f      	ldr	r2, [pc, #252]	; (8003f54 <xTaskIncrementTick+0x154>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <xTaskIncrementTick+0x158>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <xTaskIncrementTick+0x158>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	f000 fad1 	bl	800440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e6a:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <xTaskIncrementTick+0x15c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d349      	bcc.n	8003f08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <xTaskIncrementTick+0x150>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7e:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <xTaskIncrementTick+0x15c>)
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e84:	601a      	str	r2, [r3, #0]
					break;
 8003e86:	e03f      	b.n	8003f08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e88:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <xTaskIncrementTick+0x150>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d203      	bcs.n	8003ea8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <xTaskIncrementTick+0x15c>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ea6:	e02f      	b.n	8003f08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe ff87 	bl	8002dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe ff7e 	bl	8002dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <xTaskIncrementTick+0xd8>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <xTaskIncrementTick+0x164>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe ff09 	bl	8002d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <xTaskIncrementTick+0x168>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3b8      	bcc.n	8003e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f06:	e7b5      	b.n	8003e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <xTaskIncrementTick+0x168>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4915      	ldr	r1, [pc, #84]	; (8003f64 <xTaskIncrementTick+0x164>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d901      	bls.n	8003f24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <xTaskIncrementTick+0x16c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e004      	b.n	8003f3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <xTaskIncrementTick+0x170>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <xTaskIncrementTick+0x170>)
 8003f3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f3c:	697b      	ldr	r3, [r7, #20]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000ef4 	.word	0x20000ef4
 8003f4c:	20000ed0 	.word	0x20000ed0
 8003f50:	20000e84 	.word	0x20000e84
 8003f54:	20000e88 	.word	0x20000e88
 8003f58:	20000ee4 	.word	0x20000ee4
 8003f5c:	20000eec 	.word	0x20000eec
 8003f60:	20000ed4 	.word	0x20000ed4
 8003f64:	200009fc 	.word	0x200009fc
 8003f68:	200009f8 	.word	0x200009f8
 8003f6c:	20000ee0 	.word	0x20000ee0
 8003f70:	20000edc 	.word	0x20000edc

08003f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <vTaskSwitchContext+0xa8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f82:	4b27      	ldr	r3, [pc, #156]	; (8004020 <vTaskSwitchContext+0xac>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f88:	e041      	b.n	800400e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <vTaskSwitchContext+0xac>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <vTaskSwitchContext+0xb0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e010      	b.n	8003fba <vTaskSwitchContext+0x46>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	607b      	str	r3, [r7, #4]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <vTaskSwitchContext+0x3e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	491b      	ldr	r1, [pc, #108]	; (8004028 <vTaskSwitchContext+0xb4>)
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0e4      	beq.n	8003f98 <vTaskSwitchContext+0x24>
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <vTaskSwitchContext+0xb4>)
 8003fda:	4413      	add	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d104      	bne.n	8003ffe <vTaskSwitchContext+0x8a>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <vTaskSwitchContext+0xb8>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4a06      	ldr	r2, [pc, #24]	; (8004024 <vTaskSwitchContext+0xb0>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000ef4 	.word	0x20000ef4
 8004020:	20000ee0 	.word	0x20000ee0
 8004024:	20000ed4 	.word	0x20000ed4
 8004028:	200009fc 	.word	0x200009fc
 800402c:	200009f8 	.word	0x200009f8

08004030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <vTaskPlaceOnEventList+0x44>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3318      	adds	r3, #24
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fe fe75 	bl	8002d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004064:	2101      	movs	r1, #1
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f000 fbb2 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200009f8 	.word	0x200009f8

08004078 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	617b      	str	r3, [r7, #20]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <vTaskPlaceOnEventListRestricted+0x54>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3318      	adds	r3, #24
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7fe fe2c 	bl	8002d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f000 fb87 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
	}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200009f8 	.word	0x200009f8

080040d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	60fb      	str	r3, [r7, #12]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3318      	adds	r3, #24
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fe5d 	bl	8002dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <xTaskRemoveFromEventList+0xb0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3304      	adds	r3, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fe54 	bl	8002dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <xTaskRemoveFromEventList+0xb4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <xTaskRemoveFromEventList+0x5c>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4a16      	ldr	r2, [pc, #88]	; (8004184 <xTaskRemoveFromEventList+0xb4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <xTaskRemoveFromEventList+0xb8>)
 800413a:	441a      	add	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe fddf 	bl	8002d06 <vListInsertEnd>
 8004148:	e005      	b.n	8004156 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3318      	adds	r3, #24
 800414e:	4619      	mov	r1, r3
 8004150:	480e      	ldr	r0, [pc, #56]	; (800418c <xTaskRemoveFromEventList+0xbc>)
 8004152:	f7fe fdd8 	bl	8002d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <xTaskRemoveFromEventList+0xc0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	429a      	cmp	r2, r3
 8004162:	d905      	bls.n	8004170 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <xTaskRemoveFromEventList+0xc4>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e001      	b.n	8004174 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000ef4 	.word	0x20000ef4
 8004184:	20000ed4 	.word	0x20000ed4
 8004188:	200009fc 	.word	0x200009fc
 800418c:	20000e8c 	.word	0x20000e8c
 8004190:	200009f8 	.word	0x200009f8
 8004194:	20000ee0 	.word	0x20000ee0

08004198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <vTaskInternalSetTimeOutState+0x24>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <vTaskInternalSetTimeOutState+0x28>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	20000ee4 	.word	0x20000ee4
 80041c0:	20000ed0 	.word	0x20000ed0

080041c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60fb      	str	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004206:	f000 ffb5 	bl	8005174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <xTaskCheckForTimeOut+0xbc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004222:	d102      	bne.n	800422a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e023      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <xTaskCheckForTimeOut+0xc0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d007      	beq.n	8004246 <xTaskCheckForTimeOut+0x82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e015      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d20b      	bcs.n	8004268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff9b 	bl	8004198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e004      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004272:	f000 ffaf 	bl	80051d4 <vPortExitCritical>

	return xReturn;
 8004276:	69fb      	ldr	r3, [r7, #28]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000ed0 	.word	0x20000ed0
 8004284:	20000ee4 	.word	0x20000ee4

08004288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <vTaskMissedYield+0x14>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20000ee0 	.word	0x20000ee0

080042a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042a8:	f000 f852 	bl	8004350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <prvIdleTask+0x28>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d9f9      	bls.n	80042a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <prvIdleTask+0x2c>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042c4:	e7f0      	b.n	80042a8 <prvIdleTask+0x8>
 80042c6:	bf00      	nop
 80042c8:	200009fc 	.word	0x200009fc
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	e00c      	b.n	80042f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <prvInitialiseTaskLists+0x60>)
 80042e8:	4413      	add	r3, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fcde 	bl	8002cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3301      	adds	r3, #1
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b37      	cmp	r3, #55	; 0x37
 80042fa:	d9ef      	bls.n	80042dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042fc:	480d      	ldr	r0, [pc, #52]	; (8004334 <prvInitialiseTaskLists+0x64>)
 80042fe:	f7fe fcd5 	bl	8002cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004302:	480d      	ldr	r0, [pc, #52]	; (8004338 <prvInitialiseTaskLists+0x68>)
 8004304:	f7fe fcd2 	bl	8002cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004308:	480c      	ldr	r0, [pc, #48]	; (800433c <prvInitialiseTaskLists+0x6c>)
 800430a:	f7fe fccf 	bl	8002cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800430e:	480c      	ldr	r0, [pc, #48]	; (8004340 <prvInitialiseTaskLists+0x70>)
 8004310:	f7fe fccc 	bl	8002cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004314:	480b      	ldr	r0, [pc, #44]	; (8004344 <prvInitialiseTaskLists+0x74>)
 8004316:	f7fe fcc9 	bl	8002cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <prvInitialiseTaskLists+0x78>)
 800431c:	4a05      	ldr	r2, [pc, #20]	; (8004334 <prvInitialiseTaskLists+0x64>)
 800431e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvInitialiseTaskLists+0x7c>)
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <prvInitialiseTaskLists+0x68>)
 8004324:	601a      	str	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200009fc 	.word	0x200009fc
 8004334:	20000e5c 	.word	0x20000e5c
 8004338:	20000e70 	.word	0x20000e70
 800433c:	20000e8c 	.word	0x20000e8c
 8004340:	20000ea0 	.word	0x20000ea0
 8004344:	20000eb8 	.word	0x20000eb8
 8004348:	20000e84 	.word	0x20000e84
 800434c:	20000e88 	.word	0x20000e88

08004350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004356:	e019      	b.n	800438c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004358:	f000 ff0c 	bl	8005174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <prvCheckTasksWaitingTermination+0x50>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe fd29 	bl	8002dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <prvCheckTasksWaitingTermination+0x54>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <prvCheckTasksWaitingTermination+0x54>)
 8004376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3b01      	subs	r3, #1
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 8004380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004382:	f000 ff27 	bl	80051d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f810 	bl	80043ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e1      	bne.n	8004358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000ea0 	.word	0x20000ea0
 80043a4:	20000ecc 	.word	0x20000ecc
 80043a8:	20000eb4 	.word	0x20000eb4

080043ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f8c4 	bl	8005550 <vPortFree>
				vPortFree( pxTCB );
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 f8c1 	bl	8005550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ce:	e018      	b.n	8004402 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d103      	bne.n	80043e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f001 f8b8 	bl	8005550 <vPortFree>
	}
 80043e0:	e00f      	b.n	8004402 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d00a      	beq.n	8004402 <prvDeleteTCB+0x56>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <prvDeleteTCB+0x54>
	}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 800441e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004424:	e008      	b.n	8004438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	20000e84 	.word	0x20000e84
 8004448:	20000eec 	.word	0x20000eec

0800444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <xTaskGetSchedulerState+0x34>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445a:	2301      	movs	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e008      	b.n	8004472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <xTaskGetSchedulerState+0x38>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004468:	2302      	movs	r3, #2
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e001      	b.n	8004472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004472:	687b      	ldr	r3, [r7, #4]
	}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20000ed8 	.word	0x20000ed8
 8004484:	20000ef4 	.word	0x20000ef4

08004488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d056      	beq.n	800454c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <xTaskPriorityDisinherit+0xd0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d00a      	beq.n	80044be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	60fb      	str	r3, [r7, #12]
}
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d02c      	beq.n	800454c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d128      	bne.n	800454c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fc5e 	bl	8002dc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <xTaskPriorityDisinherit+0xd4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d903      	bls.n	800452c <xTaskPriorityDisinherit+0xa4>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <xTaskPriorityDisinherit+0xd4>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <xTaskPriorityDisinherit+0xd8>)
 800453a:	441a      	add	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fe fbdf 	bl	8002d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800454c:	697b      	ldr	r3, [r7, #20]
	}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200009f8 	.word	0x200009f8
 800455c:	20000ed4 	.word	0x20000ed4
 8004560:	200009fc 	.word	0x200009fc

08004564 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004572:	f000 fdff 	bl	8005174 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <xTaskNotifyWait+0xac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d01a      	beq.n	80045ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <xTaskNotifyWait+0xac>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	43d2      	mvns	r2, r2
 800458e:	400a      	ands	r2, r1
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004592:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <xTaskNotifyWait+0xac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045a2:	2101      	movs	r1, #1
 80045a4:	6838      	ldr	r0, [r7, #0]
 80045a6:	f000 f913 	bl	80047d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <xTaskNotifyWait+0xb0>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80045ba:	f000 fe0b 	bl	80051d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80045be:	f000 fdd9 	bl	8005174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <xTaskNotifyWait+0xac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <xTaskNotifyWait+0xac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d002      	beq.n	80045e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e008      	b.n	80045f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80045e6:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <xTaskNotifyWait+0xac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	43d2      	mvns	r2, r2
 80045f0:	400a      	ands	r2, r1
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <xTaskNotifyWait+0xac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004602:	f000 fde7 	bl	80051d4 <vPortExitCritical>

		return xReturn;
 8004606:	697b      	ldr	r3, [r7, #20]
	}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200009f8 	.word	0x200009f8
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	; 0x38
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004628:	2301      	movs	r3, #1
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004648:	f000 fe76 	bl	8005338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004650:	f3ef 8211 	mrs	r2, BASEPRI
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623a      	str	r2, [r7, #32]
 8004666:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004668:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d828      	bhi.n	80046e4 <xTaskGenericNotifyFromISR+0xcc>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <xTaskGenericNotifyFromISR+0x80>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	08004705 	.word	0x08004705
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bb 	.word	0x080046bb
 80046a4:	080046c7 	.word	0x080046c7
 80046a8:	080046cf 	.word	0x080046cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80046b8:	e027      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80046c4:	e021      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80046cc:	e01d      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80046ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d003      	beq.n	80046de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80046dc:	e015      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80046e2:	e012      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ec:	d00c      	beq.n	8004708 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	61bb      	str	r3, [r7, #24]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <xTaskGenericNotifyFromISR+0xea>
					break;
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004708:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800470a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800470e:	2b01      	cmp	r3, #1
 8004710:	d146      	bne.n	80047a0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	617b      	str	r3, [r7, #20]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <xTaskGenericNotifyFromISR+0x1a0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11d      	bne.n	8004774 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	3304      	adds	r3, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fb3f 	bl	8002dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <xTaskGenericNotifyFromISR+0x1a4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d903      	bls.n	8004756 <xTaskGenericNotifyFromISR+0x13e>
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <xTaskGenericNotifyFromISR+0x1a4>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <xTaskGenericNotifyFromISR+0x1a8>)
 8004764:	441a      	add	r2, r3
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fe faca 	bl	8002d06 <vListInsertEnd>
 8004772:	e005      	b.n	8004780 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	3318      	adds	r3, #24
 8004778:	4619      	mov	r1, r3
 800477a:	4812      	ldr	r0, [pc, #72]	; (80047c4 <xTaskGenericNotifyFromISR+0x1ac>)
 800477c:	f7fe fac3 	bl	8002d06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <xTaskGenericNotifyFromISR+0x1b0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	429a      	cmp	r2, r3
 800478c:	d908      	bls.n	80047a0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800478e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <xTaskGenericNotifyFromISR+0x1b4>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f383 8811 	msr	BASEPRI, r3
}
 80047aa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3738      	adds	r7, #56	; 0x38
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000ef4 	.word	0x20000ef4
 80047bc:	20000ed4 	.word	0x20000ed4
 80047c0:	200009fc 	.word	0x200009fc
 80047c4:	20000e8c 	.word	0x20000e8c
 80047c8:	200009f8 	.word	0x200009f8
 80047cc:	20000ee0 	.word	0x20000ee0

080047d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <prvAddCurrentTaskToDelayedList+0x90>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe faea 	bl	8002dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f2:	d10a      	bne.n	800480a <prvAddCurrentTaskToDelayedList+0x3a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4819      	ldr	r0, [pc, #100]	; (8004868 <prvAddCurrentTaskToDelayedList+0x98>)
 8004804:	f7fe fa7f 	bl	8002d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004808:	e026      	b.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d209      	bcs.n	8004836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fe fa8d 	bl	8002d4e <vListInsert>
}
 8004834:	e010      	b.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fa83 	bl	8002d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	d202      	bcs.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000ed0 	.word	0x20000ed0
 8004864:	200009f8 	.word	0x200009f8
 8004868:	20000eb8 	.word	0x20000eb8
 800486c:	20000e88 	.word	0x20000e88
 8004870:	20000e84 	.word	0x20000e84
 8004874:	20000eec 	.word	0x20000eec

08004878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004882:	f000 fb07 	bl	8004e94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <xTimerCreateTimerTask+0x80>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004896:	1d3a      	adds	r2, r7, #4
 8004898:	f107 0108 	add.w	r1, r7, #8
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe f9e9 	bl	8002c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	2302      	movs	r3, #2
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	460a      	mov	r2, r1
 80048b8:	4910      	ldr	r1, [pc, #64]	; (80048fc <xTimerCreateTimerTask+0x84>)
 80048ba:	4811      	ldr	r0, [pc, #68]	; (8004900 <xTimerCreateTimerTask+0x88>)
 80048bc:	f7fe ff96 	bl	80037ec <xTaskCreateStatic>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <xTimerCreateTimerTask+0x8c>)
 80048c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <xTimerCreateTimerTask+0x8c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048ce:	2301      	movs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	613b      	str	r3, [r7, #16]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000f28 	.word	0x20000f28
 80048fc:	0800c664 	.word	0x0800c664
 8004900:	08004a3d 	.word	0x08004a3d
 8004904:	20000f2c 	.word	0x20000f2c

08004908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <xTimerGenericCommand+0x98>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d02a      	beq.n	8004994 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	dc18      	bgt.n	8004982 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004950:	f7ff fd7c 	bl	800444c <xTaskGetSchedulerState>
 8004954:	4603      	mov	r3, r0
 8004956:	2b02      	cmp	r3, #2
 8004958:	d109      	bne.n	800496e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <xTimerGenericCommand+0x98>)
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	f107 0110 	add.w	r1, r7, #16
 8004962:	2300      	movs	r3, #0
 8004964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004966:	f7fe fb59 	bl	800301c <xQueueGenericSend>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24
 800496c:	e012      	b.n	8004994 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <xTimerGenericCommand+0x98>)
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f107 0110 	add.w	r1, r7, #16
 8004976:	2300      	movs	r3, #0
 8004978:	2200      	movs	r2, #0
 800497a:	f7fe fb4f 	bl	800301c <xQueueGenericSend>
 800497e:	6278      	str	r0, [r7, #36]	; 0x24
 8004980:	e008      	b.n	8004994 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <xTimerGenericCommand+0x98>)
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	f107 0110 	add.w	r1, r7, #16
 800498a:	2300      	movs	r3, #0
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f7fe fc43 	bl	8003218 <xQueueGenericSendFromISR>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000f28 	.word	0x20000f28

080049a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <prvProcessExpiredTimer+0x94>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe f9ff 	bl	8002dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d022      	beq.n	8004a16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	18d1      	adds	r1, r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f000 f8d1 	bl	8004b84 <prvInsertTimerInActiveList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01f      	beq.n	8004a28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049e8:	2300      	movs	r3, #0
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	2100      	movs	r1, #0
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff ff88 	bl	8004908 <xTimerGenericCommand>
 80049f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d113      	bne.n	8004a28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	4798      	blx	r3
}
 8004a30:	bf00      	nop
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000f20 	.word	0x20000f20

08004a3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f857 	bl	8004afc <prvGetNextExpireTime>
 8004a4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4619      	mov	r1, r3
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f803 	bl	8004a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a5a:	f000 f8d5 	bl	8004c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a5e:	e7f1      	b.n	8004a44 <prvTimerTask+0x8>

08004a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a6a:	f7ff f8fb 	bl	8003c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f866 	bl	8004b44 <prvSampleTimeNow>
 8004a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d130      	bne.n	8004ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <prvProcessTimerOrBlockTask+0x3c>
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d806      	bhi.n	8004a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a8e:	f7ff f8f7 	bl	8003c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff85 	bl	80049a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a9a:	e024      	b.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aa2:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <prvProcessTimerOrBlockTask+0x90>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <prvProcessTimerOrBlockTask+0x50>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <prvProcessTimerOrBlockTask+0x52>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <prvProcessTimerOrBlockTask+0x94>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f7fe fe5f 	bl	8003784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ac6:	f7ff f8db 	bl	8003c80 <xTaskResumeAll>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <prvProcessTimerOrBlockTask+0x98>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
}
 8004ae0:	e001      	b.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ae2:	f7ff f8cd 	bl	8003c80 <xTaskResumeAll>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000f24 	.word	0x20000f24
 8004af4:	20000f28 	.word	0x20000f28
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <prvGetNextExpireTime+0x44>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <prvGetNextExpireTime+0x16>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	e000      	b.n	8004b14 <prvGetNextExpireTime+0x18>
 8004b12:	2200      	movs	r2, #0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <prvGetNextExpireTime+0x44>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e001      	b.n	8004b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000f20 	.word	0x20000f20

08004b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b4c:	f7ff f936 	bl	8003dbc <xTaskGetTickCount>
 8004b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <prvSampleTimeNow+0x3c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d205      	bcs.n	8004b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b5c:	f000 f936 	bl	8004dcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <prvSampleTimeNow+0x3c>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000f30 	.word	0x20000f30

08004b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d812      	bhi.n	8004bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e01b      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <prvInsertTimerInActiveList+0x7c>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f8c0 	bl	8002d4e <vListInsert>
 8004bce:	e012      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d206      	bcs.n	8004be6 <prvInsertTimerInActiveList+0x62>
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e007      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <prvInsertTimerInActiveList+0x80>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fe f8ac 	bl	8002d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bf6:	697b      	ldr	r3, [r7, #20]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000f24 	.word	0x20000f24
 8004c04:	20000f20 	.word	0x20000f20

08004c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	; 0x38
 8004c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0e:	e0ca      	b.n	8004da6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da18      	bge.n	8004c48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	3304      	adds	r3, #4
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3e:	6850      	ldr	r0, [r2, #4]
 8004c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f2c0 80ab 	blt.w	8004da6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe f8ad 	bl	8002dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c66:	463b      	mov	r3, r7
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff6b 	bl	8004b44 <prvSampleTimeNow>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	f200 8096 	bhi.w	8004da4 <prvProcessReceivedCommands+0x19c>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <prvProcessReceivedCommands+0x78>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ca9 	.word	0x08004ca9
 8004c8c:	08004d1d 	.word	0x08004d1d
 8004c90:	08004d31 	.word	0x08004d31
 8004c94:	08004d7b 	.word	0x08004d7b
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004ca9 	.word	0x08004ca9
 8004ca0:	08004d1d 	.word	0x08004d1d
 8004ca4:	08004d31 	.word	0x08004d31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	18d1      	adds	r1, r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc8:	f7ff ff5c 	bl	8004b84 <prvInsertTimerInActiveList>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d069      	beq.n	8004da6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05e      	beq.n	8004da6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	441a      	add	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfa:	f7ff fe05 	bl	8004908 <xTimerGenericCommand>
 8004cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d14f      	bne.n	8004da6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61bb      	str	r3, [r7, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d2e:	e03a      	b.n	8004da6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	617b      	str	r3, [r7, #20]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	18d1      	adds	r1, r2, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d74:	f7ff ff06 	bl	8004b84 <prvInsertTimerInActiveList>
					break;
 8004d78:	e015      	b.n	8004da6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8a:	f000 fbe1 	bl	8005550 <vPortFree>
 8004d8e:	e00a      	b.n	8004da6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004da2:	e000      	b.n	8004da6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004da4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <prvProcessReceivedCommands+0x1c0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	1d39      	adds	r1, r7, #4
 8004dac:	2200      	movs	r2, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe face 	bl	8003350 <xQueueReceive>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f af2a 	bne.w	8004c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3730      	adds	r7, #48	; 0x30
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000f28 	.word	0x20000f28

08004dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dd2:	e048      	b.n	8004e66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd ffe7 	bl	8002dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02e      	beq.n	8004e66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d90e      	bls.n	8004e38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e26:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fd ff8c 	bl	8002d4e <vListInsert>
 8004e36:	e016      	b.n	8004e66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	2100      	movs	r1, #0
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fd60 	bl	8004908 <xTimerGenericCommand>
 8004e48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	603b      	str	r3, [r7, #0]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1b1      	bne.n	8004dd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <prvSwitchTimerLists+0xc4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <prvSwitchTimerLists+0xc0>)
 8004e7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <prvSwitchTimerLists+0xc4>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000f20 	.word	0x20000f20
 8004e90:	20000f24 	.word	0x20000f24

08004e94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e9a:	f000 f96b 	bl	8005174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <prvCheckForValidListAndQueue+0x60>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d120      	bne.n	8004ee8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ea6:	4814      	ldr	r0, [pc, #80]	; (8004ef8 <prvCheckForValidListAndQueue+0x64>)
 8004ea8:	f7fd ff00 	bl	8002cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eac:	4813      	ldr	r0, [pc, #76]	; (8004efc <prvCheckForValidListAndQueue+0x68>)
 8004eae:	f7fd fefd 	bl	8002cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <prvCheckForValidListAndQueue+0x6c>)
 8004eb4:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <prvCheckForValidListAndQueue+0x64>)
 8004eb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <prvCheckForValidListAndQueue+0x70>)
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <prvCheckForValidListAndQueue+0x68>)
 8004ebc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <prvCheckForValidListAndQueue+0x74>)
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <prvCheckForValidListAndQueue+0x78>)
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	200a      	movs	r0, #10
 8004eca:	f7fe f80b 	bl	8002ee4 <xQueueGenericCreateStatic>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <prvCheckForValidListAndQueue+0x60>)
 8004ed2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <prvCheckForValidListAndQueue+0x60>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <prvCheckForValidListAndQueue+0x60>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	490b      	ldr	r1, [pc, #44]	; (8004f10 <prvCheckForValidListAndQueue+0x7c>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fc24 	bl	8003730 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ee8:	f000 f974 	bl	80051d4 <vPortExitCritical>
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000f28 	.word	0x20000f28
 8004ef8:	20000ef8 	.word	0x20000ef8
 8004efc:	20000f0c 	.word	0x20000f0c
 8004f00:	20000f20 	.word	0x20000f20
 8004f04:	20000f24 	.word	0x20000f24
 8004f08:	20000fd4 	.word	0x20000fd4
 8004f0c:	20000f34 	.word	0x20000f34
 8004f10:	0800c66c 	.word	0x0800c66c

08004f14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b04      	subs	r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <pxPortInitialiseStack+0x64>)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b14      	subs	r3, #20
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f06f 0202 	mvn.w	r2, #2
 8004f62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b20      	subs	r3, #32
 8004f68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	08004f7d 	.word	0x08004f7d

08004f7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f86:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <prvTaskExitError+0x54>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8e:	d00a      	beq.n	8004fa6 <prvTaskExitError+0x2a>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <prvTaskExitError+0x28>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60bb      	str	r3, [r7, #8]
}
 8004fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fba:	bf00      	nop
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0fc      	beq.n	8004fbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000078 	.word	0x20000078
	...

08004fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	4770      	bx	lr
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst2>:
 8005000:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005008:	4808      	ldr	r0, [pc, #32]	; (800502c <prvPortStartFirstTask+0x24>)
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f380 8808 	msr	MSP, r0
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8814 	msr	CONTROL, r0
 800501a:	b662      	cpsie	i
 800501c:	b661      	cpsie	f
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	df00      	svc	0
 8005028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800502a:	bf00      	nop
 800502c:	e000ed08 	.word	0xe000ed08

08005030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005036:	4b46      	ldr	r3, [pc, #280]	; (8005150 <xPortStartScheduler+0x120>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a46      	ldr	r2, [pc, #280]	; (8005154 <xPortStartScheduler+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10a      	bne.n	8005056 <xPortStartScheduler+0x26>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005056:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <xPortStartScheduler+0x120>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <xPortStartScheduler+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10a      	bne.n	8005076 <xPortStartScheduler+0x46>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <xPortStartScheduler+0x12c>)
 8005078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005098:	b2da      	uxtb	r2, r3
 800509a:	4b31      	ldr	r3, [pc, #196]	; (8005160 <xPortStartScheduler+0x130>)
 800509c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800509e:	4b31      	ldr	r3, [pc, #196]	; (8005164 <xPortStartScheduler+0x134>)
 80050a0:	2207      	movs	r2, #7
 80050a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a4:	e009      	b.n	80050ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050a6:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <xPortStartScheduler+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <xPortStartScheduler+0x134>)
 80050ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d0ef      	beq.n	80050a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050c6:	4b27      	ldr	r3, [pc, #156]	; (8005164 <xPortStartScheduler+0x134>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1c3 0307 	rsb	r3, r3, #7
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d00a      	beq.n	80050e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050e8:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <xPortStartScheduler+0x134>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <xPortStartScheduler+0x134>)
 80050f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <xPortStartScheduler+0x134>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <xPortStartScheduler+0x134>)
 80050fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005106:	4b18      	ldr	r3, [pc, #96]	; (8005168 <xPortStartScheduler+0x138>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <xPortStartScheduler+0x138>)
 800510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <xPortStartScheduler+0x138>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <xPortStartScheduler+0x138>)
 8005118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800511c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800511e:	f000 f8dd 	bl	80052dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <xPortStartScheduler+0x13c>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005128:	f000 f8fc 	bl	8005324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <xPortStartScheduler+0x140>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0f      	ldr	r2, [pc, #60]	; (8005170 <xPortStartScheduler+0x140>)
 8005132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005138:	f7ff ff66 	bl	8005008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800513c:	f7fe ff1a 	bl	8003f74 <vTaskSwitchContext>
	prvTaskExitError();
 8005140:	f7ff ff1c 	bl	8004f7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	e000ed00 	.word	0xe000ed00
 8005154:	410fc271 	.word	0x410fc271
 8005158:	410fc270 	.word	0x410fc270
 800515c:	e000e400 	.word	0xe000e400
 8005160:	20001024 	.word	0x20001024
 8005164:	20001028 	.word	0x20001028
 8005168:	e000ed20 	.word	0xe000ed20
 800516c:	20000078 	.word	0x20000078
 8005170:	e000ef34 	.word	0xe000ef34

08005174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
}
 800518c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <vPortEnterCritical+0x58>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <vPortEnterCritical+0x58>)
 8005196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <vPortEnterCritical+0x58>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d10f      	bne.n	80051c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <vPortEnterCritical+0x5c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	603b      	str	r3, [r7, #0]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <vPortEnterCritical+0x4a>
	}
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20000078 	.word	0x20000078
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <vPortExitCritical+0x50>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <vPortExitCritical+0x24>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	607b      	str	r3, [r7, #4]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <vPortExitCritical+0x50>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <vPortExitCritical+0x50>)
 8005200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <vPortExitCritical+0x42>
 800520a:	2300      	movs	r3, #0
 800520c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f383 8811 	msr	BASEPRI, r3
}
 8005214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000078 	.word	0x20000078
	...

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005254:	f380 8811 	msr	BASEPRI, r0
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f7fe fe88 	bl	8003f74 <vTaskSwitchContext>
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f380 8811 	msr	BASEPRI, r0
 800526c:	bc09      	pop	{r0, r3}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005276:	f01e 0f10 	tst.w	lr, #16
 800527a:	bf08      	it	eq
 800527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005280:	f380 8809 	msr	PSP, r0
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst>:
 8005290:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b2:	f7fe fda5 	bl	8003e00 <xTaskIncrementTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <xPortSysTickHandler+0x40>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortSetupTimerInterrupt+0x34>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <vPortSetupTimerInterrupt+0x38>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <vPortSetupTimerInterrupt+0x3c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <vPortSetupTimerInterrupt+0x40>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <vPortSetupTimerInterrupt+0x44>)
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vPortSetupTimerInterrupt+0x34>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010
 8005314:	e000e018 	.word	0xe000e018
 8005318:	20000084 	.word	0x20000084
 800531c:	10624dd3 	.word	0x10624dd3
 8005320:	e000e014 	.word	0xe000e014

08005324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005334 <vPortEnableVFP+0x10>
 8005328:	6801      	ldr	r1, [r0, #0]
 800532a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800532e:	6001      	str	r1, [r0, #0]
 8005330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005332:	bf00      	nop
 8005334:	e000ed88 	.word	0xe000ed88

08005338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d914      	bls.n	8005374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <vPortValidateInterruptPriority+0x70>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005354:	4b15      	ldr	r3, [pc, #84]	; (80053ac <vPortValidateInterruptPriority+0x74>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	7afa      	ldrb	r2, [r7, #11]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20a      	bcs.n	8005374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <vPortValidateInterruptPriority+0x78>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <vPortValidateInterruptPriority+0x7c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d90a      	bls.n	800539a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	603b      	str	r3, [r7, #0]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <vPortValidateInterruptPriority+0x60>
	}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	e000e3f0 	.word	0xe000e3f0
 80053ac:	20001024 	.word	0x20001024
 80053b0:	e000ed0c 	.word	0xe000ed0c
 80053b4:	20001028 	.word	0x20001028

080053b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053c4:	f7fe fc4e 	bl	8003c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053c8:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <pvPortMalloc+0x180>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d0:	f000 f920 	bl	8005614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <pvPortMalloc+0x184>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 8093 	bne.w	8005508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01d      	beq.n	8005424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053e8:	2208      	movs	r2, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	3308      	adds	r3, #8
 8005402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <pvPortMalloc+0x6c>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	617b      	str	r3, [r7, #20]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d06e      	beq.n	8005508 <pvPortMalloc+0x150>
 800542a:	4b45      	ldr	r3, [pc, #276]	; (8005540 <pvPortMalloc+0x188>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d869      	bhi.n	8005508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005434:	4b43      	ldr	r3, [pc, #268]	; (8005544 <pvPortMalloc+0x18c>)
 8005436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <pvPortMalloc+0x18c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800543e:	e004      	b.n	800544a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d903      	bls.n	800545c <pvPortMalloc+0xa4>
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f1      	bne.n	8005440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <pvPortMalloc+0x180>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	429a      	cmp	r2, r3
 8005464:	d050      	beq.n	8005508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	4413      	add	r3, r2
 800546e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	2308      	movs	r3, #8
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	429a      	cmp	r2, r3
 8005486:	d91f      	bls.n	80054c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <pvPortMalloc+0xf8>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	613b      	str	r3, [r7, #16]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054c2:	69b8      	ldr	r0, [r7, #24]
 80054c4:	f000 f908 	bl	80056d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <pvPortMalloc+0x188>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <pvPortMalloc+0x188>)
 80054d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <pvPortMalloc+0x188>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <pvPortMalloc+0x190>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d203      	bcs.n	80054ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <pvPortMalloc+0x188>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <pvPortMalloc+0x190>)
 80054e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <pvPortMalloc+0x184>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <pvPortMalloc+0x194>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <pvPortMalloc+0x194>)
 8005506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005508:	f7fe fbba 	bl	8003c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <pvPortMalloc+0x174>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	60fb      	str	r3, [r7, #12]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <pvPortMalloc+0x172>
	return pvReturn;
 800552c:	69fb      	ldr	r3, [r7, #28]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20001bec 	.word	0x20001bec
 800553c:	20001c00 	.word	0x20001c00
 8005540:	20001bf0 	.word	0x20001bf0
 8005544:	20001be4 	.word	0x20001be4
 8005548:	20001bf4 	.word	0x20001bf4
 800554c:	20001bf8 	.word	0x20001bf8

08005550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d04d      	beq.n	80055fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005562:	2308      	movs	r3, #8
 8005564:	425b      	negs	r3, r3
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <vPortFree+0xb8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <vPortFree+0x44>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60fb      	str	r3, [r7, #12]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <vPortFree+0x62>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60bb      	str	r3, [r7, #8]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <vPortFree+0xb8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01e      	beq.n	80055fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11a      	bne.n	80055fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <vPortFree+0xb8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055d8:	f7fe fb44 	bl	8003c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <vPortFree+0xbc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4413      	add	r3, r2
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <vPortFree+0xbc>)
 80055e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f000 f874 	bl	80056d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <vPortFree+0xc0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	4a06      	ldr	r2, [pc, #24]	; (8005610 <vPortFree+0xc0>)
 80055f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055fa:	f7fe fb41 	bl	8003c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20001c00 	.word	0x20001c00
 800560c:	20001bf0 	.word	0x20001bf0
 8005610:	20001bfc 	.word	0x20001bfc

08005614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800561a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800561e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005620:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <prvHeapInit+0xac>)
 8005622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	4a1f      	ldr	r2, [pc, #124]	; (80056c0 <prvHeapInit+0xac>)
 8005644:	4413      	add	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800564c:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <prvHeapInit+0xb0>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005652:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <prvHeapInit+0xb0>)
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005660:	2208      	movs	r2, #8
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <prvHeapInit+0xb4>)
 8005674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <prvHeapInit+0xb4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <prvHeapInit+0xb4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <prvHeapInit+0xb4>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <prvHeapInit+0xb8>)
 80056a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <prvHeapInit+0xbc>)
 80056aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <prvHeapInit+0xc0>)
 80056ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	2000102c 	.word	0x2000102c
 80056c4:	20001be4 	.word	0x20001be4
 80056c8:	20001bec 	.word	0x20001bec
 80056cc:	20001bf4 	.word	0x20001bf4
 80056d0:	20001bf0 	.word	0x20001bf0
 80056d4:	20001c00 	.word	0x20001c00

080056d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <prvInsertBlockIntoFreeList+0xac>)
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e002      	b.n	80056ec <prvInsertBlockIntoFreeList+0x14>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d8f7      	bhi.n	80056e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4413      	add	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d108      	bne.n	800571a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d118      	bne.n	8005760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <prvInsertBlockIntoFreeList+0xb0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d00d      	beq.n	8005756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e008      	b.n	8005768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <prvInsertBlockIntoFreeList+0xb0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e003      	b.n	8005768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d002      	beq.n	8005776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20001be4 	.word	0x20001be4
 8005788:	20001bec 	.word	0x20001bec

0800578c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005796:	2003      	movs	r0, #3
 8005798:	f000 f98e 	bl	8005ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800579c:	2000      	movs	r0, #0
 800579e:	f000 f80d 	bl	80057bc <HAL_InitTick>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	71fb      	strb	r3, [r7, #7]
 80057ac:	e001      	b.n	80057b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057ae:	f005 f9c7 	bl	800ab40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057b2:	79fb      	ldrb	r3, [r7, #7]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <HAL_InitTick+0x6c>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d023      	beq.n	8005818 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80057d0:	4b16      	ldr	r3, [pc, #88]	; (800582c <HAL_InitTick+0x70>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_InitTick+0x6c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057de:	fbb3 f3f1 	udiv	r3, r3, r1
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f9a9 	bl	8005b3e <HAL_SYSTICK_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b0f      	cmp	r3, #15
 80057f6:	d809      	bhi.n	800580c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057f8:	2200      	movs	r2, #0
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005800:	f000 f965 	bl	8005ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <HAL_InitTick+0x74>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e007      	b.n	800581c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e004      	b.n	800581c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
 8005816:	e001      	b.n	800581c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000080 	.word	0x20000080
 800582c:	20000084 	.word	0x20000084
 8005830:	2000007c 	.word	0x2000007c

08005834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005838:	4b03      	ldr	r3, [pc, #12]	; (8005848 <HAL_GetTick+0x14>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20001c04 	.word	0x20001c04

0800584c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005854:	f7ff ffee 	bl	8005834 <HAL_GetTick>
 8005858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005864:	d005      	beq.n	8005872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_Delay+0x44>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005872:	bf00      	nop
 8005874:	f7ff ffde 	bl	8005834 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	429a      	cmp	r2, r3
 8005882:	d8f7      	bhi.n	8005874 <HAL_Delay+0x28>
  {
  }
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000080 	.word	0x20000080

08005894 <__NVIC_SetPriorityGrouping>:
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058b0:	4013      	ands	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058c6:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <__NVIC_SetPriorityGrouping+0x44>)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	60d3      	str	r3, [r2, #12]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <__NVIC_GetPriorityGrouping>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <__NVIC_GetPriorityGrouping+0x18>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f003 0307 	and.w	r3, r3, #7
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <__NVIC_EnableIRQ>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db0b      	blt.n	8005922 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	f003 021f 	and.w	r2, r3, #31
 8005910:	4907      	ldr	r1, [pc, #28]	; (8005930 <__NVIC_EnableIRQ+0x38>)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2001      	movs	r0, #1
 800591a:	fa00 f202 	lsl.w	r2, r0, r2
 800591e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	e000e100 	.word	0xe000e100

08005934 <__NVIC_DisableIRQ>:
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800593e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005942:	2b00      	cmp	r3, #0
 8005944:	db12      	blt.n	800596c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	f003 021f 	and.w	r2, r3, #31
 800594c:	490a      	ldr	r1, [pc, #40]	; (8005978 <__NVIC_DisableIRQ+0x44>)
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	2001      	movs	r0, #1
 8005956:	fa00 f202 	lsl.w	r2, r0, r2
 800595a:	3320      	adds	r3, #32
 800595c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005960:	f3bf 8f4f 	dsb	sy
}
 8005964:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005966:	f3bf 8f6f 	isb	sy
}
 800596a:	bf00      	nop
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000e100 	.word	0xe000e100

0800597c <__NVIC_ClearPendingIRQ>:
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	db0c      	blt.n	80059a8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	f003 021f 	and.w	r2, r3, #31
 8005994:	4907      	ldr	r1, [pc, #28]	; (80059b4 <__NVIC_ClearPendingIRQ+0x38>)
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2001      	movs	r0, #1
 800599e:	fa00 f202 	lsl.w	r2, r0, r2
 80059a2:	3360      	adds	r3, #96	; 0x60
 80059a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	e000e100 	.word	0xe000e100

080059b8 <__NVIC_SetPriority>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db0a      	blt.n	80059e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	490c      	ldr	r1, [pc, #48]	; (8005a04 <__NVIC_SetPriority+0x4c>)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	0112      	lsls	r2, r2, #4
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	440b      	add	r3, r1
 80059dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059e0:	e00a      	b.n	80059f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4908      	ldr	r1, [pc, #32]	; (8005a08 <__NVIC_SetPriority+0x50>)
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	3b04      	subs	r3, #4
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	440b      	add	r3, r1
 80059f6:	761a      	strb	r2, [r3, #24]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	e000e100 	.word	0xe000e100
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f1c3 0307 	rsb	r3, r3, #7
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	bf28      	it	cs
 8005a2a:	2304      	movcs	r3, #4
 8005a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d902      	bls.n	8005a3c <NVIC_EncodePriority+0x30>
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	3b03      	subs	r3, #3
 8005a3a:	e000      	b.n	8005a3e <NVIC_EncodePriority+0x32>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	401a      	ands	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	43d9      	mvns	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a64:	4313      	orrs	r3, r2
         );
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3724      	adds	r7, #36	; 0x24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a84:	d301      	bcc.n	8005a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a8a:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <SysTick_Config+0x40>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a92:	210f      	movs	r1, #15
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a98:	f7ff ff8e 	bl	80059b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <SysTick_Config+0x40>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <SysTick_Config+0x40>)
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000e010 	.word	0xe000e010

08005ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fee7 	bl	8005894 <__NVIC_SetPriorityGrouping>
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ae0:	f7ff fefc 	bl	80058dc <__NVIC_GetPriorityGrouping>
 8005ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff8e 	bl	8005a0c <NVIC_EncodePriority>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff5d 	bl	80059b8 <__NVIC_SetPriority>
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff feef 	bl	80058f8 <__NVIC_EnableIRQ>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4603      	mov	r3, r0
 8005b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff feff 	bl	8005934 <__NVIC_DisableIRQ>
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff ff94 	bl	8005a74 <SysTick_Config>
 8005b4c:	4603      	mov	r3, r0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff ff09 	bl	800597c <__NVIC_ClearPendingIRQ>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e098      	b.n	8005cb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <HAL_DMA_Init+0x150>)
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d80f      	bhi.n	8005bb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b4b      	ldr	r3, [pc, #300]	; (8005cc8 <HAL_DMA_Init+0x154>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ccc <HAL_DMA_Init+0x158>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	009a      	lsls	r2, r3, #2
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a48      	ldr	r2, [pc, #288]	; (8005cd0 <HAL_DMA_Init+0x15c>)
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
 8005bb0:	e00e      	b.n	8005bd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4b46      	ldr	r3, [pc, #280]	; (8005cd4 <HAL_DMA_Init+0x160>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	4a43      	ldr	r2, [pc, #268]	; (8005ccc <HAL_DMA_Init+0x158>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	009a      	lsls	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a42      	ldr	r2, [pc, #264]	; (8005cd8 <HAL_DMA_Init+0x164>)
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2a:	d039      	beq.n	8005ca0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <HAL_DMA_Init+0x15c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d11a      	bne.n	8005c6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c36:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HAL_DMA_Init+0x168>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	f003 031c 	and.w	r3, r3, #28
 8005c42:	210f      	movs	r1, #15
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	4924      	ldr	r1, [pc, #144]	; (8005cdc <HAL_DMA_Init+0x168>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c50:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <HAL_DMA_Init+0x168>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f003 031c 	and.w	r3, r3, #28
 8005c60:	fa01 f303 	lsl.w	r3, r1, r3
 8005c64:	491d      	ldr	r1, [pc, #116]	; (8005cdc <HAL_DMA_Init+0x168>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	600b      	str	r3, [r1, #0]
 8005c6a:	e019      	b.n	8005ca0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <HAL_DMA_Init+0x16c>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c74:	f003 031c 	and.w	r3, r3, #28
 8005c78:	210f      	movs	r1, #15
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	4917      	ldr	r1, [pc, #92]	; (8005ce0 <HAL_DMA_Init+0x16c>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <HAL_DMA_Init+0x16c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	f003 031c 	and.w	r3, r3, #28
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	4911      	ldr	r1, [pc, #68]	; (8005ce0 <HAL_DMA_Init+0x16c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40020407 	.word	0x40020407
 8005cc8:	bffdfff8 	.word	0xbffdfff8
 8005ccc:	cccccccd 	.word	0xcccccccd
 8005cd0:	40020000 	.word	0x40020000
 8005cd4:	bffdfbf8 	.word	0xbffdfbf8
 8005cd8:	40020400 	.word	0x40020400
 8005cdc:	400200a8 	.word	0x400200a8
 8005ce0:	400204a8 	.word	0x400204a8

08005ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_DMA_Start_IT+0x20>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e04b      	b.n	8005d9c <HAL_DMA_Start_IT+0xb8>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d13a      	bne.n	8005d8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f9a7 	bl	8006090 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 020e 	orr.w	r2, r2, #14
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00f      	b.n	8005d7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 020a 	orr.w	r2, r2, #10
 8005d7a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e005      	b.n	8005d9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
 8005d98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d008      	beq.n	8005dce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e022      	b.n	8005e14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 020e 	bic.w	r2, r2, #14
 8005ddc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f003 021c 	and.w	r2, r3, #28
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005e00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d005      	beq.n	8005e44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e029      	b.n	8005e98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 020e 	bic.w	r2, r2, #14
 8005e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	f003 021c 	and.w	r2, r3, #28
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f202 	lsl.w	r2, r1, r2
 8005e76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
    }
  }
  return status;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f003 031c 	and.w	r3, r3, #28
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d026      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x7a>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d021      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0204 	bic.w	r2, r2, #4
 8005ef4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f003 021c 	and.w	r2, r3, #28
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2104      	movs	r1, #4
 8005f04:	fa01 f202 	lsl.w	r2, r1, r2
 8005f08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d071      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005f1a:	e06c      	b.n	8005ff6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	f003 031c 	and.w	r3, r3, #28
 8005f24:	2202      	movs	r2, #2
 8005f26:	409a      	lsls	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02e      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xec>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d029      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020a 	bic.w	r2, r2, #10
 8005f56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	f003 021c 	and.w	r2, r3, #28
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d038      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f8c:	e033      	b.n	8005ff6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	f003 031c 	and.w	r3, r3, #28
 8005f96:	2208      	movs	r2, #8
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d02a      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x156>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d025      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 020e 	bic.w	r2, r2, #14
 8005fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	f003 021c 	and.w	r2, r3, #28
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	2101      	movs	r1, #1
 8005fca:	fa01 f202 	lsl.w	r2, r1, r2
 8005fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
}
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_DMA_RegisterCallback+0x20>
 800601c:	2302      	movs	r3, #2
 800601e:	e031      	b.n	8006084 <HAL_DMA_RegisterCallback+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d120      	bne.n	8006076 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d81a      	bhi.n	8006070 <HAL_DMA_RegisterCallback+0x70>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_DMA_RegisterCallback+0x40>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006051 	.word	0x08006051
 8006044:	08006059 	.word	0x08006059
 8006048:	08006061 	.word	0x08006061
 800604c:	08006069 	.word	0x08006069
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8006056:	e010      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800605e:	e00c      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8006066:	e008      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800606e:	e004      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
           break;
 8006074:	e001      	b.n	800607a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f003 021c 	and.w	r2, r3, #28
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f202 	lsl.w	r2, r1, r2
 80060b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d108      	bne.n	80060d4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060d2:	e007      	b.n	80060e4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060fe:	e154      	b.n	80063aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	2101      	movs	r1, #1
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	fa01 f303 	lsl.w	r3, r1, r3
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8146 	beq.w	80063a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d005      	beq.n	8006130 <HAL_GPIO_Init+0x40>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d130      	bne.n	8006192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	2203      	movs	r2, #3
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4013      	ands	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006166:	2201      	movs	r2, #1
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4013      	ands	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	f003 0201 	and.w	r2, r3, #1
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b03      	cmp	r3, #3
 800619c:	d017      	beq.n	80061ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	2203      	movs	r2, #3
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d123      	bne.n	8006222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	08da      	lsrs	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3208      	adds	r2, #8
 80061e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	220f      	movs	r2, #15
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4013      	ands	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	08da      	lsrs	r2, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3208      	adds	r2, #8
 800621c:	6939      	ldr	r1, [r7, #16]
 800621e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	2203      	movs	r2, #3
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0203 	and.w	r2, r3, #3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80a0 	beq.w	80063a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006264:	4b58      	ldr	r3, [pc, #352]	; (80063c8 <HAL_GPIO_Init+0x2d8>)
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <HAL_GPIO_Init+0x2d8>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6613      	str	r3, [r2, #96]	; 0x60
 8006270:	4b55      	ldr	r3, [pc, #340]	; (80063c8 <HAL_GPIO_Init+0x2d8>)
 8006272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800627c:	4a53      	ldr	r2, [pc, #332]	; (80063cc <HAL_GPIO_Init+0x2dc>)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	3302      	adds	r3, #2
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	220f      	movs	r2, #15
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4013      	ands	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062a6:	d019      	beq.n	80062dc <HAL_GPIO_Init+0x1ec>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a49      	ldr	r2, [pc, #292]	; (80063d0 <HAL_GPIO_Init+0x2e0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d013      	beq.n	80062d8 <HAL_GPIO_Init+0x1e8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a48      	ldr	r2, [pc, #288]	; (80063d4 <HAL_GPIO_Init+0x2e4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00d      	beq.n	80062d4 <HAL_GPIO_Init+0x1e4>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a47      	ldr	r2, [pc, #284]	; (80063d8 <HAL_GPIO_Init+0x2e8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <HAL_GPIO_Init+0x1e0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a46      	ldr	r2, [pc, #280]	; (80063dc <HAL_GPIO_Init+0x2ec>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d101      	bne.n	80062cc <HAL_GPIO_Init+0x1dc>
 80062c8:	2304      	movs	r3, #4
 80062ca:	e008      	b.n	80062de <HAL_GPIO_Init+0x1ee>
 80062cc:	2307      	movs	r3, #7
 80062ce:	e006      	b.n	80062de <HAL_GPIO_Init+0x1ee>
 80062d0:	2303      	movs	r3, #3
 80062d2:	e004      	b.n	80062de <HAL_GPIO_Init+0x1ee>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e002      	b.n	80062de <HAL_GPIO_Init+0x1ee>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <HAL_GPIO_Init+0x1ee>
 80062dc:	2300      	movs	r3, #0
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f002 0203 	and.w	r2, r2, #3
 80062e4:	0092      	lsls	r2, r2, #2
 80062e6:	4093      	lsls	r3, r2
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062ee:	4937      	ldr	r1, [pc, #220]	; (80063cc <HAL_GPIO_Init+0x2dc>)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	3302      	adds	r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062fc:	4b38      	ldr	r3, [pc, #224]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	43db      	mvns	r3, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006320:	4a2f      	ldr	r2, [pc, #188]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006326:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	43db      	mvns	r3, r3
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4013      	ands	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800634a:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006350:	4b23      	ldr	r3, [pc, #140]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	43db      	mvns	r3, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006374:	4a1a      	ldr	r2, [pc, #104]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800637a:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	43db      	mvns	r3, r3
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4013      	ands	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800639e:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <HAL_GPIO_Init+0x2f0>)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3301      	adds	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f47f aea3 	bne.w	8006100 <HAL_GPIO_Init+0x10>
  }
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40010000 	.word	0x40010000
 80063d0:	48000400 	.word	0x48000400
 80063d4:	48000800 	.word	0x48000800
 80063d8:	48000c00 	.word	0x48000c00
 80063dc:	48001000 	.word	0x48001000
 80063e0:	40010400 	.word	0x40010400

080063e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	807b      	strh	r3, [r7, #2]
 80063f0:	4613      	mov	r3, r2
 80063f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063f4:	787b      	ldrb	r3, [r7, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063fa:	887a      	ldrh	r2, [r7, #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006400:	e002      	b.n	8006408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d006      	beq.n	8006438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800642a:	4a05      	ldr	r2, [pc, #20]	; (8006440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	4618      	mov	r0, r3
 8006434:	f004 fe82 	bl	800b13c <HAL_GPIO_EXTI_Callback>
  }
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40010400 	.word	0x40010400

08006444 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a04      	ldr	r2, [pc, #16]	; (8006460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800644e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40007000 	.word	0x40007000

08006464 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <HAL_PWR_ConfigPVD+0xb8>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f023 020e 	bic.w	r2, r3, #14
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4928      	ldr	r1, [pc, #160]	; (800651c <HAL_PWR_ConfigPVD+0xb8>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800647e:	4b28      	ldr	r3, [pc, #160]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a27      	ldr	r2, [pc, #156]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006488:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800648a:	4b25      	ldr	r3, [pc, #148]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a24      	ldr	r2, [pc, #144]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006496:	4b22      	ldr	r3, [pc, #136]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 800649c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a0:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80064a2:	4b1f      	ldr	r3, [pc, #124]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4a12      	ldr	r2, [pc, #72]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4a06      	ldr	r2, [pc, #24]	; (8006520 <HAL_PWR_ConfigPVD+0xbc>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40007000 	.word	0x40007000
 8006520:	40010400 	.word	0x40010400

08006524 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <HAL_PWR_EnablePVD+0x1c>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a04      	ldr	r2, [pc, #16]	; (8006540 <HAL_PWR_EnablePVD+0x1c>)
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	6053      	str	r3, [r2, #4]
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40007000 	.word	0x40007000

08006544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <HAL_PWREx_GetVoltageRange+0x18>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	40007000 	.word	0x40007000

08006560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656e:	d130      	bne.n	80065d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006570:	4b23      	ldr	r3, [pc, #140]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d038      	beq.n	80065f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800658c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800658e:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2232      	movs	r2, #50	; 0x32
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	0c9b      	lsrs	r3, r3, #18
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065a4:	e002      	b.n	80065ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ac:	4b14      	ldr	r3, [pc, #80]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d102      	bne.n	80065c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f2      	bne.n	80065a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065cc:	d110      	bne.n	80065f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065de:	d007      	beq.n	80065f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065e8:	4a05      	ldr	r2, [pc, #20]	; (8006600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40007000 	.word	0x40007000
 8006604:	20000084 	.word	0x20000084
 8006608:	431bde83 	.word	0x431bde83

0800660c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	f000 bc02 	b.w	8006e24 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006620:	4b96      	ldr	r3, [pc, #600]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 030c 	and.w	r3, r3, #12
 8006628:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800662a:	4b94      	ldr	r3, [pc, #592]	; (800687c <HAL_RCC_OscConfig+0x270>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80e4 	beq.w	800680a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_RCC_OscConfig+0x4c>
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b0c      	cmp	r3, #12
 800664c:	f040 808b 	bne.w	8006766 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2b01      	cmp	r3, #1
 8006654:	f040 8087 	bne.w	8006766 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006658:	4b88      	ldr	r3, [pc, #544]	; (800687c <HAL_RCC_OscConfig+0x270>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_RCC_OscConfig+0x64>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e3d9      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	4b81      	ldr	r3, [pc, #516]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <HAL_RCC_OscConfig+0x7e>
 8006680:	4b7e      	ldr	r3, [pc, #504]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006688:	e005      	b.n	8006696 <HAL_RCC_OscConfig+0x8a>
 800668a:	4b7c      	ldr	r3, [pc, #496]	; (800687c <HAL_RCC_OscConfig+0x270>)
 800668c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006696:	4293      	cmp	r3, r2
 8006698:	d223      	bcs.n	80066e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd8c 	bl	80071bc <RCC_SetFlashLatencyFromMSIRange>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e3ba      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066ae:	4b73      	ldr	r3, [pc, #460]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a72      	ldr	r2, [pc, #456]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b70      	ldr	r3, [pc, #448]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	496d      	ldr	r1, [pc, #436]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066cc:	4b6b      	ldr	r3, [pc, #428]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	4968      	ldr	r1, [pc, #416]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	604b      	str	r3, [r1, #4]
 80066e0:	e025      	b.n	800672e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066e2:	4b66      	ldr	r3, [pc, #408]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a65      	ldr	r2, [pc, #404]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066e8:	f043 0308 	orr.w	r3, r3, #8
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b63      	ldr	r3, [pc, #396]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	4960      	ldr	r1, [pc, #384]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006700:	4b5e      	ldr	r3, [pc, #376]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	495b      	ldr	r1, [pc, #364]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006710:	4313      	orrs	r3, r2
 8006712:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fd4c 	bl	80071bc <RCC_SetFlashLatencyFromMSIRange>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e37a      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800672e:	f000 fc81 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8006732:	4602      	mov	r2, r0
 8006734:	4b51      	ldr	r3, [pc, #324]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	4950      	ldr	r1, [pc, #320]	; (8006880 <HAL_RCC_OscConfig+0x274>)
 8006740:	5ccb      	ldrb	r3, [r1, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	4a4e      	ldr	r2, [pc, #312]	; (8006884 <HAL_RCC_OscConfig+0x278>)
 800674c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800674e:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <HAL_RCC_OscConfig+0x27c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff f832 	bl	80057bc <HAL_InitTick>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d052      	beq.n	8006808 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	e35e      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d032      	beq.n	80067d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800676e:	4b43      	ldr	r3, [pc, #268]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a42      	ldr	r2, [pc, #264]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800677a:	f7ff f85b 	bl	8005834 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006782:	f7ff f857 	bl	8005834 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e347      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006794:	4b39      	ldr	r3, [pc, #228]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067a0:	4b36      	ldr	r3, [pc, #216]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a35      	ldr	r2, [pc, #212]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067a6:	f043 0308 	orr.w	r3, r3, #8
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b33      	ldr	r3, [pc, #204]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	4930      	ldr	r1, [pc, #192]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067be:	4b2f      	ldr	r3, [pc, #188]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	492b      	ldr	r1, [pc, #172]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
 80067d2:	e01a      	b.n	800680a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067d4:	4b29      	ldr	r3, [pc, #164]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a28      	ldr	r2, [pc, #160]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067e0:	f7ff f828 	bl	8005834 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067e8:	f7ff f824 	bl	8005834 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e314      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_RCC_OscConfig+0x270>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x1dc>
 8006806:	e000      	b.n	800680a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d073      	beq.n	80068fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d005      	beq.n	8006828 <HAL_RCC_OscConfig+0x21c>
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b0c      	cmp	r3, #12
 8006820:	d10e      	bne.n	8006840 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d10b      	bne.n	8006840 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <HAL_RCC_OscConfig+0x270>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d063      	beq.n	80068fc <HAL_RCC_OscConfig+0x2f0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d15f      	bne.n	80068fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e2f1      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x24c>
 800684a:	4b0c      	ldr	r3, [pc, #48]	; (800687c <HAL_RCC_OscConfig+0x270>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a0b      	ldr	r2, [pc, #44]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e025      	b.n	80068a4 <HAL_RCC_OscConfig+0x298>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d114      	bne.n	800688c <HAL_RCC_OscConfig+0x280>
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b03      	ldr	r3, [pc, #12]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a02      	ldr	r2, [pc, #8]	; (800687c <HAL_RCC_OscConfig+0x270>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e013      	b.n	80068a4 <HAL_RCC_OscConfig+0x298>
 800687c:	40021000 	.word	0x40021000
 8006880:	0800c6f4 	.word	0x0800c6f4
 8006884:	20000084 	.word	0x20000084
 8006888:	2000007c 	.word	0x2000007c
 800688c:	4ba0      	ldr	r3, [pc, #640]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a9f      	ldr	r2, [pc, #636]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	4b9d      	ldr	r3, [pc, #628]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a9c      	ldr	r2, [pc, #624]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800689e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d013      	beq.n	80068d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fe ffc2 	bl	8005834 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b4:	f7fe ffbe 	bl	8005834 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e2ae      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068c6:	4b92      	ldr	r3, [pc, #584]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0x2a8>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fe ffae 	bl	8005834 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fe ffaa 	bl	8005834 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e29a      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ee:	4b88      	ldr	r3, [pc, #544]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x2d0>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d060      	beq.n	80069cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d005      	beq.n	800691c <HAL_RCC_OscConfig+0x310>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b0c      	cmp	r3, #12
 8006914:	d119      	bne.n	800694a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d116      	bne.n	800694a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691c:	4b7c      	ldr	r3, [pc, #496]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCC_OscConfig+0x328>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e277      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006934:	4b76      	ldr	r3, [pc, #472]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	4973      	ldr	r1, [pc, #460]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006944:	4313      	orrs	r3, r2
 8006946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006948:	e040      	b.n	80069cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d023      	beq.n	800699a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006952:	4b6f      	ldr	r3, [pc, #444]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a6e      	ldr	r2, [pc, #440]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fe ff69 	bl	8005834 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006966:	f7fe ff65 	bl	8005834 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e255      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006978:	4b65      	ldr	r3, [pc, #404]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006984:	4b62      	ldr	r3, [pc, #392]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	061b      	lsls	r3, r3, #24
 8006992:	495f      	ldr	r1, [pc, #380]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]
 8006998:	e018      	b.n	80069cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699a:	4b5d      	ldr	r3, [pc, #372]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a5c      	ldr	r2, [pc, #368]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a6:	f7fe ff45 	bl	8005834 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ac:	e008      	b.n	80069c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ae:	f7fe ff41 	bl	8005834 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e231      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069c0:	4b53      	ldr	r3, [pc, #332]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f0      	bne.n	80069ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d03c      	beq.n	8006a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01c      	beq.n	8006a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e0:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80069e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e6:	4a4a      	ldr	r2, [pc, #296]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f0:	f7fe ff20 	bl	8005834 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f8:	f7fe ff1c 	bl	8005834 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e20c      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a0a:	4b41      	ldr	r3, [pc, #260]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0ef      	beq.n	80069f8 <HAL_RCC_OscConfig+0x3ec>
 8006a18:	e01b      	b.n	8006a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a1a:	4b3d      	ldr	r3, [pc, #244]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a20:	4a3b      	ldr	r2, [pc, #236]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2a:	f7fe ff03 	bl	8005834 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a32:	f7fe feff 	bl	8005834 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e1ef      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a44:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ef      	bne.n	8006a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a6 	beq.w	8006bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a64:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10d      	bne.n	8006a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a74:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a7c:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a8c:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <HAL_RCC_OscConfig+0x508>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d118      	bne.n	8006aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a98:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <HAL_RCC_OscConfig+0x508>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <HAL_RCC_OscConfig+0x508>)
 8006a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa4:	f7fe fec6 	bl	8005834 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fe fec2 	bl	8005834 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1b2      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <HAL_RCC_OscConfig+0x508>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d108      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x4d8>
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad8:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae2:	e029      	b.n	8006b38 <HAL_RCC_OscConfig+0x52c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b05      	cmp	r3, #5
 8006aea:	d115      	bne.n	8006b18 <HAL_RCC_OscConfig+0x50c>
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006af4:	f043 0304 	orr.w	r3, r3, #4
 8006af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006afc:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	4a03      	ldr	r2, [pc, #12]	; (8006b10 <HAL_RCC_OscConfig+0x504>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b0c:	e014      	b.n	8006b38 <HAL_RCC_OscConfig+0x52c>
 8006b0e:	bf00      	nop
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40007000 	.word	0x40007000
 8006b18:	4b9a      	ldr	r3, [pc, #616]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	4a99      	ldr	r2, [pc, #612]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b28:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	4a95      	ldr	r2, [pc, #596]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d016      	beq.n	8006b6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fe fe78 	bl	8005834 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fe fe74 	bl	8005834 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e162      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b5e:	4b89      	ldr	r3, [pc, #548]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ed      	beq.n	8006b48 <HAL_RCC_OscConfig+0x53c>
 8006b6c:	e015      	b.n	8006b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fe fe61 	bl	8005834 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fe fe5d 	bl	8005834 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e14b      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b8c:	4b7d      	ldr	r3, [pc, #500]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ed      	bne.n	8006b76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba0:	4b78      	ldr	r3, [pc, #480]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	4a77      	ldr	r2, [pc, #476]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03c      	beq.n	8006c32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bc0:	4b70      	ldr	r3, [pc, #448]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bc6:	4a6f      	ldr	r2, [pc, #444]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fe fe30 	bl	8005834 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bd8:	f7fe fe2c 	bl	8005834 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e11c      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bea:	4b66      	ldr	r3, [pc, #408]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x5cc>
 8006bf8:	e01b      	b.n	8006c32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bfa:	4b62      	ldr	r3, [pc, #392]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c00:	4a60      	ldr	r2, [pc, #384]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fe fe13 	bl	8005834 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c12:	f7fe fe0f 	bl	8005834 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0ff      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c24:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ef      	bne.n	8006c12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80f3 	beq.w	8006e22 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f040 80c9 	bne.w	8006dd8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c46:	4b4f      	ldr	r3, [pc, #316]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0203 	and.w	r2, r3, #3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d12c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	3b01      	subs	r3, #1
 8006c66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d123      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d11b      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d113      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d109      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d06b      	beq.n	8006d8c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d062      	beq.n	8006d80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006cba:	4b32      	ldr	r3, [pc, #200]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e0ac      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a2d      	ldr	r2, [pc, #180]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cd6:	f7fe fdad 	bl	8005834 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cde:	f7fe fda9 	bl	8005834 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e099      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf0:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cfc:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_RCC_OscConfig+0x77c>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0112      	lsls	r2, r2, #4
 8006d10:	4311      	orrs	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d16:	0212      	lsls	r2, r2, #8
 8006d18:	4311      	orrs	r1, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d1e:	0852      	lsrs	r2, r2, #1
 8006d20:	3a01      	subs	r2, #1
 8006d22:	0552      	lsls	r2, r2, #21
 8006d24:	4311      	orrs	r1, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d2a:	0852      	lsrs	r2, r2, #1
 8006d2c:	3a01      	subs	r2, #1
 8006d2e:	0652      	lsls	r2, r2, #25
 8006d30:	4311      	orrs	r1, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d36:	06d2      	lsls	r2, r2, #27
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	4912      	ldr	r1, [pc, #72]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0f      	ldr	r2, [pc, #60]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4a0c      	ldr	r2, [pc, #48]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d58:	f7fe fd6c 	bl	8005834 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d60:	f7fe fd68 	bl	8005834 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e058      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d72:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <HAL_RCC_OscConfig+0x778>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d7e:	e050      	b.n	8006e22 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e04f      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
 8006d84:	40021000 	.word	0x40021000
 8006d88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d8c:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d144      	bne.n	8006e22 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d98:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a23      	ldr	r2, [pc, #140]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006da4:	4b21      	ldr	r3, [pc, #132]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4a20      	ldr	r2, [pc, #128]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006db0:	f7fe fd40 	bl	8005834 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fe fd3c 	bl	8005834 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e02c      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x7ac>
 8006dd6:	e024      	b.n	8006e22 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b0c      	cmp	r3, #12
 8006ddc:	d01f      	beq.n	8006e1e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dea:	f7fe fd23 	bl	8005834 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df2:	f7fe fd1f 	bl	8005834 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e00f      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f0      	bne.n	8006df2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	4905      	ldr	r1, [pc, #20]	; (8006e2c <HAL_RCC_OscConfig+0x820>)
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_RCC_OscConfig+0x824>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60cb      	str	r3, [r1, #12]
 8006e1c:	e001      	b.n	8006e22 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	feeefffc 	.word	0xfeeefffc

08006e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e0e7      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e48:	4b75      	ldr	r3, [pc, #468]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d910      	bls.n	8006e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e56:	4b72      	ldr	r3, [pc, #456]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f023 0207 	bic.w	r2, r3, #7
 8006e5e:	4970      	ldr	r1, [pc, #448]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e66:	4b6e      	ldr	r3, [pc, #440]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0cf      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	4b66      	ldr	r3, [pc, #408]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d908      	bls.n	8006ea6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e94:	4b63      	ldr	r3, [pc, #396]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4960      	ldr	r1, [pc, #384]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d04c      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d107      	bne.n	8006eca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eba:	4b5a      	ldr	r3, [pc, #360]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d121      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e0a6      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ed2:	4b54      	ldr	r3, [pc, #336]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d115      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e09a      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006eea:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e08e      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006efa:	4b4a      	ldr	r3, [pc, #296]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e086      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f0a:	4b46      	ldr	r3, [pc, #280]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4943      	ldr	r1, [pc, #268]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f1c:	f7fe fc8a 	bl	8005834 <HAL_GetTick>
 8006f20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f22:	e00a      	b.n	8006f3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f24:	f7fe fc86 	bl	8005834 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e06e      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 020c 	and.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d1eb      	bne.n	8006f24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	4b31      	ldr	r3, [pc, #196]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d208      	bcs.n	8006f7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f68:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	492b      	ldr	r1, [pc, #172]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f7a:	4b29      	ldr	r3, [pc, #164]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d210      	bcs.n	8006faa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f023 0207 	bic.w	r2, r3, #7
 8006f90:	4923      	ldr	r1, [pc, #140]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <HAL_RCC_ClockConfig+0x1ec>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d001      	beq.n	8006faa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e036      	b.n	8007018 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d008      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb6:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	4918      	ldr	r1, [pc, #96]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d009      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	4910      	ldr	r1, [pc, #64]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fe8:	f000 f824 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_RCC_ClockConfig+0x1f0>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	490b      	ldr	r1, [pc, #44]	; (8007028 <HAL_RCC_ClockConfig+0x1f4>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
 8007004:	4a09      	ldr	r2, [pc, #36]	; (800702c <HAL_RCC_ClockConfig+0x1f8>)
 8007006:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <HAL_RCC_ClockConfig+0x1fc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fbd5 	bl	80057bc <HAL_InitTick>
 8007012:	4603      	mov	r3, r0
 8007014:	72fb      	strb	r3, [r7, #11]

  return status;
 8007016:	7afb      	ldrb	r3, [r7, #11]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40022000 	.word	0x40022000
 8007024:	40021000 	.word	0x40021000
 8007028:	0800c6f4 	.word	0x0800c6f4
 800702c:	20000084 	.word	0x20000084
 8007030:	2000007c 	.word	0x2000007c

08007034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007042:	4b3e      	ldr	r3, [pc, #248]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800704c:	4b3b      	ldr	r3, [pc, #236]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x34>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d121      	bne.n	80070a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11e      	bne.n	80070a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007068:	4b34      	ldr	r3, [pc, #208]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007074:	4b31      	ldr	r3, [pc, #196]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	e005      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007084:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007090:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10d      	bne.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070a4:	e00a      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d102      	bne.n	80070b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070ac:	4b25      	ldr	r3, [pc, #148]	; (8007144 <HAL_RCC_GetSysClockFreq+0x110>)
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e004      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d101      	bne.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070b8:	4b23      	ldr	r3, [pc, #140]	; (8007148 <HAL_RCC_GetSysClockFreq+0x114>)
 80070ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b0c      	cmp	r3, #12
 80070c0:	d134      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d003      	beq.n	80070da <HAL_RCC_GetSysClockFreq+0xa6>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d003      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0xac>
 80070d8:	e005      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <HAL_RCC_GetSysClockFreq+0x110>)
 80070dc:	617b      	str	r3, [r7, #20]
      break;
 80070de:	e005      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070e0:	4b19      	ldr	r3, [pc, #100]	; (8007148 <HAL_RCC_GetSysClockFreq+0x114>)
 80070e2:	617b      	str	r3, [r7, #20]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	617b      	str	r3, [r7, #20]
      break;
 80070ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	3301      	adds	r3, #1
 80070f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	fb03 f202 	mul.w	r2, r3, r2
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	0e5b      	lsrs	r3, r3, #25
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	3301      	adds	r3, #1
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800712c:	69bb      	ldr	r3, [r7, #24]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3724      	adds	r7, #36	; 0x24
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	0800c70c 	.word	0x0800c70c
 8007144:	00f42400 	.word	0x00f42400
 8007148:	02dc6c00 	.word	0x02dc6c00

0800714c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007150:	4b03      	ldr	r3, [pc, #12]	; (8007160 <HAL_RCC_GetHCLKFreq+0x14>)
 8007152:	681b      	ldr	r3, [r3, #0]
}
 8007154:	4618      	mov	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000084 	.word	0x20000084

08007164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007168:	f7ff fff0 	bl	800714c <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <HAL_RCC_GetPCLK1Freq+0x28>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40021000 	.word	0x40021000
 800718c:	0800c704 	.word	0x0800c704

08007190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007194:	f7ff ffda 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	0adb      	lsrs	r3, r3, #11
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40021000 	.word	0x40021000
 80071b8:	0800c704 	.word	0x0800c704

080071bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071d4:	f7ff f9b6 	bl	8006544 <HAL_PWREx_GetVoltageRange>
 80071d8:	6178      	str	r0, [r7, #20]
 80071da:	e014      	b.n	8007206 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	4a24      	ldr	r2, [pc, #144]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e6:	6593      	str	r3, [r2, #88]	; 0x58
 80071e8:	4b22      	ldr	r3, [pc, #136]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071f4:	f7ff f9a6 	bl	8006544 <HAL_PWREx_GetVoltageRange>
 80071f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720c:	d10b      	bne.n	8007226 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d919      	bls.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2ba0      	cmp	r3, #160	; 0xa0
 8007218:	d902      	bls.n	8007220 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800721a:	2302      	movs	r3, #2
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e013      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007220:	2301      	movs	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e010      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b80      	cmp	r3, #128	; 0x80
 800722a:	d902      	bls.n	8007232 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800722c:	2303      	movs	r3, #3
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	e00a      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d102      	bne.n	800723e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007238:	2302      	movs	r3, #2
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	e004      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	d101      	bne.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007244:	2301      	movs	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 0207 	bic.w	r2, r3, #7
 8007250:	4909      	ldr	r1, [pc, #36]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007258:	4b07      	ldr	r3, [pc, #28]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	429a      	cmp	r2, r3
 8007264:	d001      	beq.n	800726a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40021000 	.word	0x40021000
 8007278:	40022000 	.word	0x40022000

0800727c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007284:	2300      	movs	r3, #0
 8007286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007288:	2300      	movs	r3, #0
 800728a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007294:	2b00      	cmp	r3, #0
 8007296:	d031      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072a0:	d01a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80072a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072a6:	d814      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b0:	d10f      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80072b2:	4b5d      	ldr	r3, [pc, #372]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	4a5c      	ldr	r2, [pc, #368]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072be:	e00c      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f9f0 	bl	80076ac <RCCEx_PLLSAI1_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072d0:	e003      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	74fb      	strb	r3, [r7, #19]
      break;
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80072d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072da:	7cfb      	ldrb	r3, [r7, #19]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072e0:	4b51      	ldr	r3, [pc, #324]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	494e      	ldr	r1, [pc, #312]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80072f6:	e001      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 809e 	beq.w	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730a:	2300      	movs	r3, #0
 800730c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800730e:	4b46      	ldr	r3, [pc, #280]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800731e:	2300      	movs	r3, #0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00d      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007324:	4b40      	ldr	r3, [pc, #256]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	4a3f      	ldr	r2, [pc, #252]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800732a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732e:	6593      	str	r3, [r2, #88]	; 0x58
 8007330:	4b3d      	ldr	r3, [pc, #244]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007338:	60bb      	str	r3, [r7, #8]
 800733a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733c:	2301      	movs	r3, #1
 800733e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007340:	4b3a      	ldr	r3, [pc, #232]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a39      	ldr	r2, [pc, #228]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800734c:	f7fe fa72 	bl	8005834 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007352:	e009      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007354:	f7fe fa6e 	bl	8005834 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d902      	bls.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	74fb      	strb	r3, [r7, #19]
        break;
 8007366:	e005      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007368:	4b30      	ldr	r3, [pc, #192]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0ef      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007374:	7cfb      	ldrb	r3, [r7, #19]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d15a      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800737a:	4b2b      	ldr	r3, [pc, #172]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	429a      	cmp	r2, r3
 8007394:	d019      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073a2:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a8:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073b2:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	4a1b      	ldr	r2, [pc, #108]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073c2:	4a19      	ldr	r2, [pc, #100]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d016      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d4:	f7fe fa2e 	bl	8005834 <HAL_GetTick>
 80073d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073da:	e00b      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073dc:	f7fe fa2a 	bl	8005834 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d902      	bls.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	74fb      	strb	r3, [r7, #19]
            break;
 80073f2:	e006      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0ec      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007402:	7cfb      	ldrb	r3, [r7, #19]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10b      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	4904      	ldr	r1, [pc, #16]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800741e:	e009      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007420:	7cfb      	ldrb	r3, [r7, #19]
 8007422:	74bb      	strb	r3, [r7, #18]
 8007424:	e006      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007426:	bf00      	nop
 8007428:	40021000 	.word	0x40021000
 800742c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007434:	7c7b      	ldrb	r3, [r7, #17]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d105      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800743a:	4b9b      	ldr	r3, [pc, #620]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	4a9a      	ldr	r2, [pc, #616]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007444:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007452:	4b95      	ldr	r3, [pc, #596]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007458:	f023 0203 	bic.w	r2, r3, #3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	4991      	ldr	r1, [pc, #580]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007474:	4b8c      	ldr	r3, [pc, #560]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f023 020c 	bic.w	r2, r3, #12
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	4989      	ldr	r1, [pc, #548]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007496:	4b84      	ldr	r3, [pc, #528]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	4980      	ldr	r1, [pc, #512]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074b8:	4b7b      	ldr	r3, [pc, #492]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4978      	ldr	r1, [pc, #480]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074da:	4b73      	ldr	r3, [pc, #460]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e8:	496f      	ldr	r1, [pc, #444]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074fc:	4b6a      	ldr	r3, [pc, #424]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	4967      	ldr	r1, [pc, #412]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800751e:	4b62      	ldr	r3, [pc, #392]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	495e      	ldr	r1, [pc, #376]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007540:	4b59      	ldr	r3, [pc, #356]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007546:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754e:	4956      	ldr	r1, [pc, #344]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007562:	4b51      	ldr	r3, [pc, #324]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	494d      	ldr	r1, [pc, #308]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d028      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007584:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	4945      	ldr	r1, [pc, #276]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a2:	d106      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a4:	4b40      	ldr	r3, [pc, #256]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ae:	60d3      	str	r3, [r2, #12]
 80075b0:	e011      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	2101      	movs	r1, #1
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f872 	bl	80076ac <RCCEx_PLLSAI1_Config>
 80075c8:	4603      	mov	r3, r0
 80075ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80075d2:	7cfb      	ldrb	r3, [r7, #19]
 80075d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d028      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075e2:	4b31      	ldr	r3, [pc, #196]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f0:	492d      	ldr	r1, [pc, #180]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007602:	4b29      	ldr	r3, [pc, #164]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4a28      	ldr	r2, [pc, #160]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760c:	60d3      	str	r3, [r2, #12]
 800760e:	e011      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	2101      	movs	r1, #1
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f843 	bl	80076ac <RCCEx_PLLSAI1_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800762a:	7cfb      	ldrb	r3, [r7, #19]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01c      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007640:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	4916      	ldr	r1, [pc, #88]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765e:	d10c      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	2102      	movs	r1, #2
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f820 	bl	80076ac <RCCEx_PLLSAI1_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007670:	7cfb      	ldrb	r3, [r7, #19]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007676:	7cfb      	ldrb	r3, [r7, #19]
 8007678:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007686:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800769c:	7cbb      	ldrb	r3, [r7, #18]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40021000 	.word	0x40021000

080076ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076ba:	4b74      	ldr	r3, [pc, #464]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80076c6:	4b71      	ldr	r3, [pc, #452]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f003 0203 	and.w	r2, r3, #3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d10d      	bne.n	80076f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
       ||
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80076de:	4b6b      	ldr	r3, [pc, #428]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
       ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d047      	beq.n	8007782 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
 80076f6:	e044      	b.n	8007782 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d018      	beq.n	8007732 <RCCEx_PLLSAI1_Config+0x86>
 8007700:	2b03      	cmp	r3, #3
 8007702:	d825      	bhi.n	8007750 <RCCEx_PLLSAI1_Config+0xa4>
 8007704:	2b01      	cmp	r3, #1
 8007706:	d002      	beq.n	800770e <RCCEx_PLLSAI1_Config+0x62>
 8007708:	2b02      	cmp	r3, #2
 800770a:	d009      	beq.n	8007720 <RCCEx_PLLSAI1_Config+0x74>
 800770c:	e020      	b.n	8007750 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800770e:	4b5f      	ldr	r3, [pc, #380]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11d      	bne.n	8007756 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800771e:	e01a      	b.n	8007756 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007720:	4b5a      	ldr	r3, [pc, #360]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	2b00      	cmp	r3, #0
 800772a:	d116      	bne.n	800775a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007730:	e013      	b.n	800775a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007732:	4b56      	ldr	r3, [pc, #344]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800773e:	4b53      	ldr	r3, [pc, #332]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800774e:	e006      	b.n	800775e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
      break;
 8007754:	e004      	b.n	8007760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007756:	bf00      	nop
 8007758:	e002      	b.n	8007760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800775a:	bf00      	nop
 800775c:	e000      	b.n	8007760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800775e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007766:	4b49      	ldr	r3, [pc, #292]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	3b01      	subs	r3, #1
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	430b      	orrs	r3, r1
 800777c:	4943      	ldr	r1, [pc, #268]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 800777e:	4313      	orrs	r3, r2
 8007780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d17c      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007788:	4b40      	ldr	r3, [pc, #256]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a3f      	ldr	r2, [pc, #252]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 800778e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007794:	f7fe f84e 	bl	8005834 <HAL_GetTick>
 8007798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800779a:	e009      	b.n	80077b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800779c:	f7fe f84a 	bl	8005834 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d902      	bls.n	80077b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	73fb      	strb	r3, [r7, #15]
        break;
 80077ae:	e005      	b.n	80077bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077b0:	4b36      	ldr	r3, [pc, #216]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ef      	bne.n	800779c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d15f      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d110      	bne.n	80077ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077c8:	4b30      	ldr	r3, [pc, #192]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80077d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6892      	ldr	r2, [r2, #8]
 80077d8:	0211      	lsls	r1, r2, #8
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68d2      	ldr	r2, [r2, #12]
 80077de:	06d2      	lsls	r2, r2, #27
 80077e0:	430a      	orrs	r2, r1
 80077e2:	492a      	ldr	r1, [pc, #168]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	610b      	str	r3, [r1, #16]
 80077e8:	e027      	b.n	800783a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d112      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077f0:	4b26      	ldr	r3, [pc, #152]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80077f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6892      	ldr	r2, [r2, #8]
 8007800:	0211      	lsls	r1, r2, #8
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6912      	ldr	r2, [r2, #16]
 8007806:	0852      	lsrs	r2, r2, #1
 8007808:	3a01      	subs	r2, #1
 800780a:	0552      	lsls	r2, r2, #21
 800780c:	430a      	orrs	r2, r1
 800780e:	491f      	ldr	r1, [pc, #124]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007810:	4313      	orrs	r3, r2
 8007812:	610b      	str	r3, [r1, #16]
 8007814:	e011      	b.n	800783a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800781e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6892      	ldr	r2, [r2, #8]
 8007826:	0211      	lsls	r1, r2, #8
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6952      	ldr	r2, [r2, #20]
 800782c:	0852      	lsrs	r2, r2, #1
 800782e:	3a01      	subs	r2, #1
 8007830:	0652      	lsls	r2, r2, #25
 8007832:	430a      	orrs	r2, r1
 8007834:	4915      	ldr	r1, [pc, #84]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007836:	4313      	orrs	r3, r2
 8007838:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800783a:	4b14      	ldr	r3, [pc, #80]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a13      	ldr	r2, [pc, #76]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007844:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007846:	f7fd fff5 	bl	8005834 <HAL_GetTick>
 800784a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800784c:	e009      	b.n	8007862 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800784e:	f7fd fff1 	bl	8005834 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d902      	bls.n	8007862 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	73fb      	strb	r3, [r7, #15]
          break;
 8007860:	e005      	b.n	800786e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ef      	beq.n	800784e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	4903      	ldr	r1, [pc, #12]	; (800788c <RCCEx_PLLSAI1_Config+0x1e0>)
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40021000 	.word	0x40021000

08007890 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d06c      	beq.n	800797c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f003 f974 	bl	800aba4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	22ca      	movs	r2, #202	; 0xca
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2253      	movs	r2, #83	; 0x53
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f87c 	bl	80079d2 <RTC_EnterInitMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d14b      	bne.n	800797c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6899      	ldr	r1, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68d2      	ldr	r2, [r2, #12]
 800791e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6919      	ldr	r1, [r3, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	041a      	lsls	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f87f 	bl	8007a38 <RTC_ExitInitMode>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11b      	bne.n	800797c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0203 	bic.w	r2, r2, #3
 8007952:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69da      	ldr	r2, [r3, #28]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	22ff      	movs	r2, #255	; 0xff
 8007972:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800799c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800799e:	f7fd ff49 	bl	8005834 <HAL_GetTick>
 80079a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079a4:	e009      	b.n	80079ba <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079a6:	f7fd ff45 	bl	8005834 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b4:	d901      	bls.n	80079ba <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e007      	b.n	80079ca <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ee      	beq.n	80079a6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d120      	bne.n	8007a2e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80079f6:	f7fd ff1d 	bl	8005834 <HAL_GetTick>
 80079fa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079fc:	e00d      	b.n	8007a1a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80079fe:	f7fd ff19 	bl	8005834 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a0c:	d905      	bls.n	8007a1a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2203      	movs	r2, #3
 8007a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <RTC_EnterInitMode+0x5c>
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d1e7      	bne.n	80079fe <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a4e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10c      	bne.n	8007a76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ff92 	bl	8007986 <HAL_RTC_WaitForSynchro>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01e      	beq.n	8007aa6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e017      	b.n	8007aa6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a76:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a7c:	f023 0320 	bic.w	r3, r3, #32
 8007a80:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff ff7f 	bl	8007986 <HAL_RTC_WaitForSynchro>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2203      	movs	r2, #3
 8007a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <RTC_ExitInitMode+0x78>)
 8007aa0:	f043 0320 	orr.w	r3, r3, #32
 8007aa4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40002800 	.word	0x40002800

08007ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e095      	b.n	8007bf2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad6:	d009      	beq.n	8007aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	61da      	str	r2, [r3, #28]
 8007ade:	e005      	b.n	8007aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f877 	bl	8007bfa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b2c:	d902      	bls.n	8007b34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e002      	b.n	8007b3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b42:	d007      	beq.n	8007b54 <HAL_SPI_Init+0xa0>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b4c:	d002      	beq.n	8007b54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	ea42 0103 	orr.w	r1, r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	0c1b      	lsrs	r3, r3, #16
 8007bb0:	f003 0204 	and.w	r2, r3, #4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007bd0:	ea42 0103 	orr.w	r1, r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e049      	b.n	8007cb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f002 ffd1 	bl	800abdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f000 fe2f 	bl	80088b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e049      	b.n	8007d62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f003 f874 	bl	800add0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f000 fdd8 	bl	80088b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	bf0c      	ite	eq
 8007d90:	2301      	moveq	r3, #1
 8007d92:	2300      	movne	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	e03c      	b.n	8007e12 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d109      	bne.n	8007db2 <HAL_TIM_PWM_Start_DMA+0x46>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	bf0c      	ite	eq
 8007daa:	2301      	moveq	r3, #1
 8007dac:	2300      	movne	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	e02f      	b.n	8007e12 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d109      	bne.n	8007dcc <HAL_TIM_PWM_Start_DMA+0x60>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	e022      	b.n	8007e12 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	d109      	bne.n	8007de6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e015      	b.n	8007e12 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d109      	bne.n	8007e00 <HAL_TIM_PWM_Start_DMA+0x94>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e008      	b.n	8007e12 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2301      	moveq	r3, #1
 8007e0e:	2300      	movne	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007e16:	2302      	movs	r3, #2
 8007e18:	e18d      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e03c      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x142>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d109      	bne.n	8007e4e <HAL_TIM_PWM_Start_DMA+0xe2>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	e02f      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x142>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d109      	bne.n	8007e68 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e022      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x142>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b0c      	cmp	r3, #12
 8007e6c:	d109      	bne.n	8007e82 <HAL_TIM_PWM_Start_DMA+0x116>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	e015      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x142>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d109      	bne.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x130>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	e008      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x142>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d034      	beq.n	8007f1c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <HAL_TIM_PWM_Start_DMA+0x152>
 8007eb8:	887b      	ldrh	r3, [r7, #2]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e139      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_PWM_Start_DMA+0x166>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed0:	e026      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_PWM_Start_DMA+0x176>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee0:	e01e      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Start_DMA+0x186>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef0:	e016      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Start_DMA+0x196>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f00:	e00e      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d104      	bne.n	8007f12 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f10:	e006      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1a:	e001      	b.n	8007f20 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e10a      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b0c      	cmp	r3, #12
 8007f24:	f200 80ae 	bhi.w	8008084 <HAL_TIM_PWM_Start_DMA+0x318>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08008085 	.word	0x08008085
 8007f38:	08008085 	.word	0x08008085
 8007f3c:	08008085 	.word	0x08008085
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08008085 	.word	0x08008085
 8007f48:	08008085 	.word	0x08008085
 8007f4c:	08008085 	.word	0x08008085
 8007f50:	08007ff5 	.word	0x08007ff5
 8007f54:	08008085 	.word	0x08008085
 8007f58:	08008085 	.word	0x08008085
 8007f5c:	08008085 	.word	0x08008085
 8007f60:	0800803d 	.word	0x0800803d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	4a75      	ldr	r2, [pc, #468]	; (8008140 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	4a74      	ldr	r2, [pc, #464]	; (8008144 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	4a73      	ldr	r2, [pc, #460]	; (8008148 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3334      	adds	r3, #52	; 0x34
 8007f88:	461a      	mov	r2, r3
 8007f8a:	887b      	ldrh	r3, [r7, #2]
 8007f8c:	f7fd feaa 	bl	8005ce4 <HAL_DMA_Start_IT>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e0cd      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa8:	60da      	str	r2, [r3, #12]
      break;
 8007faa:	e06e      	b.n	800808a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	4a63      	ldr	r2, [pc, #396]	; (8008140 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	4a62      	ldr	r2, [pc, #392]	; (8008144 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	4a61      	ldr	r2, [pc, #388]	; (8008148 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3338      	adds	r3, #56	; 0x38
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	887b      	ldrh	r3, [r7, #2]
 8007fd4:	f7fd fe86 	bl	8005ce4 <HAL_DMA_Start_IT>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e0a9      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ff0:	60da      	str	r2, [r3, #12]
      break;
 8007ff2:	e04a      	b.n	800808a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	4a51      	ldr	r2, [pc, #324]	; (8008140 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	4a50      	ldr	r2, [pc, #320]	; (8008144 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008002:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a4f      	ldr	r2, [pc, #316]	; (8008148 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800800a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	333c      	adds	r3, #60	; 0x3c
 8008018:	461a      	mov	r2, r3
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	f7fd fe62 	bl	8005ce4 <HAL_DMA_Start_IT>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e085      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008038:	60da      	str	r2, [r3, #12]
      break;
 800803a:	e026      	b.n	800808a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	4a3f      	ldr	r2, [pc, #252]	; (8008140 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008042:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	4a3e      	ldr	r2, [pc, #248]	; (8008144 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800804a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008050:	4a3d      	ldr	r2, [pc, #244]	; (8008148 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3340      	adds	r3, #64	; 0x40
 8008060:	461a      	mov	r2, r3
 8008062:	887b      	ldrh	r3, [r7, #2]
 8008064:	f7fd fe3e 	bl	8005ce4 <HAL_DMA_Start_IT>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e061      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008080:	60da      	str	r2, [r3, #12]
      break;
 8008082:	e002      	b.n	800808a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  if (status == HAL_OK)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d151      	bne.n	8008134 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2201      	movs	r2, #1
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	4618      	mov	r0, r3
 800809a:	f000 ff85 	bl	8008fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a2a      	ldr	r2, [pc, #168]	; (800814c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_TIM_PWM_Start_DMA+0x350>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a28      	ldr	r2, [pc, #160]	; (8008150 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_TIM_PWM_Start_DMA+0x350>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a27      	ldr	r2, [pc, #156]	; (8008154 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_PWM_Start_DMA+0x354>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_TIM_PWM_Start_DMA+0x356>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1c      	ldr	r2, [pc, #112]	; (800814c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d009      	beq.n	80080f4 <HAL_TIM_PWM_Start_DMA+0x388>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e8:	d004      	beq.n	80080f4 <HAL_TIM_PWM_Start_DMA+0x388>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a18      	ldr	r2, [pc, #96]	; (8008150 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d115      	bne.n	8008120 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	4b17      	ldr	r3, [pc, #92]	; (8008158 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b06      	cmp	r3, #6
 8008104:	d015      	beq.n	8008132 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810c:	d011      	beq.n	8008132 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0201 	orr.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	e008      	b.n	8008132 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e000      	b.n	8008134 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	080087a1 	.word	0x080087a1
 8008144:	08008849 	.word	0x08008849
 8008148:	0800870f 	.word	0x0800870f
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40014000 	.word	0x40014000
 8008154:	40014400 	.word	0x40014400
 8008158:	00010007 	.word	0x00010007

0800815c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b0c      	cmp	r3, #12
 800816e:	d855      	bhi.n	800821c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	080081ad 	.word	0x080081ad
 800817c:	0800821d 	.word	0x0800821d
 8008180:	0800821d 	.word	0x0800821d
 8008184:	0800821d 	.word	0x0800821d
 8008188:	080081c9 	.word	0x080081c9
 800818c:	0800821d 	.word	0x0800821d
 8008190:	0800821d 	.word	0x0800821d
 8008194:	0800821d 	.word	0x0800821d
 8008198:	080081e5 	.word	0x080081e5
 800819c:	0800821d 	.word	0x0800821d
 80081a0:	0800821d 	.word	0x0800821d
 80081a4:	0800821d 	.word	0x0800821d
 80081a8:	08008201 	.word	0x08008201
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80081ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd fe2d 	bl	8005e20 <HAL_DMA_Abort_IT>
      break;
 80081c6:	e02c      	b.n	8008222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fd fe1f 	bl	8005e20 <HAL_DMA_Abort_IT>
      break;
 80081e2:	e01e      	b.n	8008222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fd fe11 	bl	8005e20 <HAL_DMA_Abort_IT>
      break;
 80081fe:	e010      	b.n	8008222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800820e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008214:	4618      	mov	r0, r3
 8008216:	f7fd fe03 	bl	8005e20 <HAL_DMA_Abort_IT>
      break;
 800821a:	e002      	b.n	8008222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
      break;
 8008220:	bf00      	nop
  }

  if (status == HAL_OK)
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d176      	bne.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2200      	movs	r2, #0
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 feb9 	bl	8008fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a39      	ldr	r2, [pc, #228]	; (8008320 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d009      	beq.n	8008254 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a37      	ldr	r2, [pc, #220]	; (8008324 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a36      	ldr	r2, [pc, #216]	; (8008328 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d101      	bne.n	8008258 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008258:	2300      	movs	r3, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d017      	beq.n	800828e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6a1a      	ldr	r2, [r3, #32]
 8008264:	f241 1311 	movw	r3, #4369	; 0x1111
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10f      	bne.n	800828e <HAL_TIM_PWM_Stop_DMA+0x132>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6a1a      	ldr	r2, [r3, #32]
 8008274:	f240 4344 	movw	r3, #1092	; 0x444
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <HAL_TIM_PWM_Stop_DMA+0x132>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800828c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	f241 1311 	movw	r3, #4369	; 0x1111
 8008298:	4013      	ands	r3, r2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10f      	bne.n	80082be <HAL_TIM_PWM_Stop_DMA+0x162>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	f240 4344 	movw	r3, #1092	; 0x444
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d107      	bne.n	80082be <HAL_TIM_PWM_Stop_DMA+0x162>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <HAL_TIM_PWM_Stop_DMA+0x172>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082cc:	e023      	b.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d104      	bne.n	80082de <HAL_TIM_PWM_Stop_DMA+0x182>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	e01b      	b.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d104      	bne.n	80082ee <HAL_TIM_PWM_Stop_DMA+0x192>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ec:	e013      	b.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b0c      	cmp	r3, #12
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082fc:	e00b      	b.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b10      	cmp	r3, #16
 8008302:	d104      	bne.n	800830e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800830c:	e003      	b.n	8008316 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40014000 	.word	0x40014000
 8008328:	40014400 	.word	0x40014400

0800832c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008346:	2302      	movs	r3, #2
 8008348:	e0ff      	b.n	800854a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b14      	cmp	r3, #20
 8008356:	f200 80f0 	bhi.w	800853a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	080083b5 	.word	0x080083b5
 8008364:	0800853b 	.word	0x0800853b
 8008368:	0800853b 	.word	0x0800853b
 800836c:	0800853b 	.word	0x0800853b
 8008370:	080083f5 	.word	0x080083f5
 8008374:	0800853b 	.word	0x0800853b
 8008378:	0800853b 	.word	0x0800853b
 800837c:	0800853b 	.word	0x0800853b
 8008380:	08008437 	.word	0x08008437
 8008384:	0800853b 	.word	0x0800853b
 8008388:	0800853b 	.word	0x0800853b
 800838c:	0800853b 	.word	0x0800853b
 8008390:	08008477 	.word	0x08008477
 8008394:	0800853b 	.word	0x0800853b
 8008398:	0800853b 	.word	0x0800853b
 800839c:	0800853b 	.word	0x0800853b
 80083a0:	080084b9 	.word	0x080084b9
 80083a4:	0800853b 	.word	0x0800853b
 80083a8:	0800853b 	.word	0x0800853b
 80083ac:	0800853b 	.word	0x0800853b
 80083b0:	080084f9 	.word	0x080084f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fadc 	bl	8008978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0208 	orr.w	r2, r2, #8
 80083ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0204 	bic.w	r2, r2, #4
 80083de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6999      	ldr	r1, [r3, #24]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	619a      	str	r2, [r3, #24]
      break;
 80083f2:	e0a5      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fb38 	bl	8008a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800840e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800841e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6999      	ldr	r1, [r3, #24]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	021a      	lsls	r2, r3, #8
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	619a      	str	r2, [r3, #24]
      break;
 8008434:	e084      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fb91 	bl	8008b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0208 	orr.w	r2, r2, #8
 8008450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0204 	bic.w	r2, r2, #4
 8008460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69d9      	ldr	r1, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	61da      	str	r2, [r3, #28]
      break;
 8008474:	e064      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fbe9 	bl	8008c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69d9      	ldr	r1, [r3, #28]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	021a      	lsls	r2, r3, #8
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	61da      	str	r2, [r3, #28]
      break;
 80084b6:	e043      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fc26 	bl	8008d10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0208 	orr.w	r2, r2, #8
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0204 	bic.w	r2, r2, #4
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691a      	ldr	r2, [r3, #16]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084f6:	e023      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fc5e 	bl	8008dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008512:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008522:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	021a      	lsls	r2, r3, #8
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008538:	e002      	b.n	8008540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
      break;
 800853e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop

08008554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_TIM_ConfigClockSource+0x1c>
 800856c:	2302      	movs	r3, #2
 800856e:	e0b6      	b.n	80086de <HAL_TIM_ConfigClockSource+0x18a>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800859a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ac:	d03e      	beq.n	800862c <HAL_TIM_ConfigClockSource+0xd8>
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b2:	f200 8087 	bhi.w	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	f000 8086 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x176>
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c2:	d87f      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085c4:	2b70      	cmp	r3, #112	; 0x70
 80085c6:	d01a      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0xaa>
 80085c8:	2b70      	cmp	r3, #112	; 0x70
 80085ca:	d87b      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085cc:	2b60      	cmp	r3, #96	; 0x60
 80085ce:	d050      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x11e>
 80085d0:	2b60      	cmp	r3, #96	; 0x60
 80085d2:	d877      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085d4:	2b50      	cmp	r3, #80	; 0x50
 80085d6:	d03c      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0xfe>
 80085d8:	2b50      	cmp	r3, #80	; 0x50
 80085da:	d873      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085dc:	2b40      	cmp	r3, #64	; 0x40
 80085de:	d058      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x13e>
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d86f      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085e4:	2b30      	cmp	r3, #48	; 0x30
 80085e6:	d064      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15e>
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	d86b      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d060      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15e>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d867      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d05c      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15e>
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d05a      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15e>
 80085fc:	e062      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800860e:	f000 fcab 	bl	8008f68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	609a      	str	r2, [r3, #8]
      break;
 800862a:	e04f      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800863c:	f000 fc94 	bl	8008f68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800864e:	609a      	str	r2, [r3, #8]
      break;
 8008650:	e03c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800865e:	461a      	mov	r2, r3
 8008660:	f000 fc08 	bl	8008e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2150      	movs	r1, #80	; 0x50
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fc61 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 8008670:	e02c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800867e:	461a      	mov	r2, r3
 8008680:	f000 fc27 	bl	8008ed2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2160      	movs	r1, #96	; 0x60
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fc51 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 8008690:	e01c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800869e:	461a      	mov	r2, r3
 80086a0:	f000 fbe8 	bl	8008e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fc41 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80086b0:	e00c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f000 fc38 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80086c2:	e003      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
      break;
 80086c8:	e000      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80086ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d107      	bne.n	8008736 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008734:	e02a      	b.n	800878c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d107      	bne.n	8008750 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2202      	movs	r2, #2
 8008744:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800874e:	e01d      	b.n	800878c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d107      	bne.n	800876a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2204      	movs	r2, #4
 800875e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008768:	e010      	b.n	800878c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d107      	bne.n	8008784 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2208      	movs	r2, #8
 8008778:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008782:	e003      	b.n	800878c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff ffb4 	bl	80086fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10b      	bne.n	80087d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d136      	bne.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ce:	e031      	b.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d10b      	bne.n	80087f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2202      	movs	r2, #2
 80087de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d125      	bne.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f0:	e020      	b.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10b      	bne.n	8008814 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2204      	movs	r2, #4
 8008800:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d114      	bne.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008812:	e00f      	b.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d10a      	bne.n	8008834 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2208      	movs	r2, #8
 8008822:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f002 fc91 	bl	800b15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d103      	bne.n	8008868 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	771a      	strb	r2, [r3, #28]
 8008866:	e019      	b.n	800889c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d103      	bne.n	800887a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2202      	movs	r2, #2
 8008876:	771a      	strb	r2, [r3, #28]
 8008878:	e010      	b.n	800889c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d103      	bne.n	800888c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2204      	movs	r2, #4
 8008888:	771a      	strb	r2, [r3, #28]
 800888a:	e007      	b.n	800889c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	429a      	cmp	r2, r3
 8008894:	d102      	bne.n	800889c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2208      	movs	r2, #8
 800889a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff ff22 	bl	80086e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
}
 80088a8:	bf00      	nop
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a2a      	ldr	r2, [pc, #168]	; (800896c <TIM_Base_SetConfig+0xbc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_Base_SetConfig+0x20>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d108      	bne.n	80088e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a21      	ldr	r2, [pc, #132]	; (800896c <TIM_Base_SetConfig+0xbc>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00b      	beq.n	8008902 <TIM_Base_SetConfig+0x52>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f0:	d007      	beq.n	8008902 <TIM_Base_SetConfig+0x52>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <TIM_Base_SetConfig+0xc0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_Base_SetConfig+0x52>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <TIM_Base_SetConfig+0xc4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d108      	bne.n	8008914 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <TIM_Base_SetConfig+0xbc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_Base_SetConfig+0xa0>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <TIM_Base_SetConfig+0xc0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_Base_SetConfig+0xa0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a0a      	ldr	r2, [pc, #40]	; (8008974 <TIM_Base_SetConfig+0xc4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d103      	bne.n	8008958 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	615a      	str	r2, [r3, #20]
}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40014000 	.word	0x40014000
 8008974:	40014400 	.word	0x40014400

08008978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0303 	bic.w	r3, r3, #3
 80089b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f023 0302 	bic.w	r3, r3, #2
 80089c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <TIM_OC1_SetConfig+0xec>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_OC1_SetConfig+0x70>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a23      	ldr	r2, [pc, #140]	; (8008a68 <TIM_OC1_SetConfig+0xf0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_OC1_SetConfig+0x70>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a22      	ldr	r2, [pc, #136]	; (8008a6c <TIM_OC1_SetConfig+0xf4>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10c      	bne.n	8008a02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0308 	bic.w	r3, r3, #8
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f023 0304 	bic.w	r3, r3, #4
 8008a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a17      	ldr	r2, [pc, #92]	; (8008a64 <TIM_OC1_SetConfig+0xec>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d007      	beq.n	8008a1a <TIM_OC1_SetConfig+0xa2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a16      	ldr	r2, [pc, #88]	; (8008a68 <TIM_OC1_SetConfig+0xf0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d003      	beq.n	8008a1a <TIM_OC1_SetConfig+0xa2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <TIM_OC1_SetConfig+0xf4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d111      	bne.n	8008a3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	621a      	str	r2, [r3, #32]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400

08008a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	f023 0210 	bic.w	r2, r3, #16
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f023 0320 	bic.w	r3, r3, #32
 8008abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a22      	ldr	r2, [pc, #136]	; (8008b58 <TIM_OC2_SetConfig+0xe8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d10d      	bne.n	8008af0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <TIM_OC2_SetConfig+0xe8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_OC2_SetConfig+0x98>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <TIM_OC2_SetConfig+0xec>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_OC2_SetConfig+0x98>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <TIM_OC2_SetConfig+0xf0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d113      	bne.n	8008b30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40014000 	.word	0x40014000
 8008b60:	40014400 	.word	0x40014400

08008b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a21      	ldr	r2, [pc, #132]	; (8008c48 <TIM_OC3_SetConfig+0xe4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d10d      	bne.n	8008be2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <TIM_OC3_SetConfig+0xe4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_OC3_SetConfig+0x96>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a17      	ldr	r2, [pc, #92]	; (8008c4c <TIM_OC3_SetConfig+0xe8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_OC3_SetConfig+0x96>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <TIM_OC3_SetConfig+0xec>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d113      	bne.n	8008c22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	621a      	str	r2, [r3, #32]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40014400 	.word	0x40014400

08008c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	031b      	lsls	r3, r3, #12
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <TIM_OC4_SetConfig+0xb0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_OC4_SetConfig+0x74>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a13      	ldr	r2, [pc, #76]	; (8008d08 <TIM_OC4_SetConfig+0xb4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_OC4_SetConfig+0x74>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a12      	ldr	r2, [pc, #72]	; (8008d0c <TIM_OC4_SetConfig+0xb8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d109      	bne.n	8008cdc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	019b      	lsls	r3, r3, #6
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	621a      	str	r2, [r3, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40012c00 	.word	0x40012c00
 8008d08:	40014000 	.word	0x40014000
 8008d0c:	40014400 	.word	0x40014400

08008d10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	041b      	lsls	r3, r3, #16
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <TIM_OC5_SetConfig+0xa4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <TIM_OC5_SetConfig+0x6a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a12      	ldr	r2, [pc, #72]	; (8008db8 <TIM_OC5_SetConfig+0xa8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <TIM_OC5_SetConfig+0x6a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a11      	ldr	r2, [pc, #68]	; (8008dbc <TIM_OC5_SetConfig+0xac>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d109      	bne.n	8008d8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	621a      	str	r2, [r3, #32]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40014400 	.word	0x40014400

08008dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	051b      	lsls	r3, r3, #20
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <TIM_OC6_SetConfig+0xa8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_OC6_SetConfig+0x6c>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <TIM_OC6_SetConfig+0xac>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC6_SetConfig+0x6c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <TIM_OC6_SetConfig+0xb0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d109      	bne.n	8008e40 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	621a      	str	r2, [r3, #32]
}
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	40012c00 	.word	0x40012c00
 8008e6c:	40014000 	.word	0x40014000
 8008e70:	40014400 	.word	0x40014400

08008e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0201 	bic.w	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 030a 	bic.w	r3, r3, #10
 8008eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b087      	sub	sp, #28
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0210 	bic.w	r2, r3, #16
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f043 0307 	orr.w	r3, r3, #7
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	609a      	str	r2, [r3, #8]
}
 8008f5c:	bf00      	nop
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	021a      	lsls	r2, r3, #8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	609a      	str	r2, [r3, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	2201      	movs	r2, #1
 8008fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a1a      	ldr	r2, [r3, #32]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	401a      	ands	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1a      	ldr	r2, [r3, #32]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009008:	2302      	movs	r3, #2
 800900a:	e04f      	b.n	80090ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d108      	bne.n	8009048 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800903c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a14      	ldr	r2, [pc, #80]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d009      	beq.n	8009080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009074:	d004      	beq.n	8009080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a10      	ldr	r2, [pc, #64]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d10c      	bne.n	800909a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	4313      	orrs	r3, r2
 8009090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40012c00 	.word	0x40012c00
 80090bc:	40014000 	.word	0x40014000

080090c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090d8:	2302      	movs	r3, #2
 80090da:	e060      	b.n	800919e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a14      	ldr	r2, [pc, #80]	; (80091ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d115      	bne.n	800918c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	051b      	lsls	r3, r3, #20
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40012c00 	.word	0x40012c00

080091b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e040      	b.n	8009244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d106      	bne.n	80091d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f873 	bl	80092be <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2224      	movs	r2, #36	; 0x24
 80091dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fb72 	bl	80098d8 <UART_SetConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e022      	b.n	8009244 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fdc0 	bl	8009d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800921a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800922a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fe47 	bl	8009ed0 <UART_CheckIdleState>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e02b      	b.n	80092b6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2224      	movs	r2, #36	; 0x24
 8009262:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0201 	bic.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2200      	movs	r2, #0
 8009282:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f820 	bl	80092d2 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b0ba      	sub	sp, #232	; 0xe8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009312:	f640 030f 	movw	r3, #2063	; 0x80f
 8009316:	4013      	ands	r3, r2
 8009318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800931c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009320:	2b00      	cmp	r3, #0
 8009322:	d115      	bne.n	8009350 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00f      	beq.n	8009350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d009      	beq.n	8009350 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 82a6 	beq.w	8009892 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
      }
      return;
 800934e:	e2a0      	b.n	8009892 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8117 	beq.w	8009588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800935a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800936a:	4b85      	ldr	r3, [pc, #532]	; (8009580 <HAL_UART_IRQHandler+0x298>)
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 810a 	beq.w	8009588 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d011      	beq.n	80093a4 <HAL_UART_IRQHandler+0xbc>
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2201      	movs	r2, #1
 8009392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800939a:	f043 0201 	orr.w	r2, r3, #1
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d011      	beq.n	80093d4 <HAL_UART_IRQHandler+0xec>
 80093b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2202      	movs	r2, #2
 80093c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ca:	f043 0204 	orr.w	r2, r3, #4
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d011      	beq.n	8009404 <HAL_UART_IRQHandler+0x11c>
 80093e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2204      	movs	r2, #4
 80093f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093fa:	f043 0202 	orr.w	r2, r3, #2
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d017      	beq.n	8009440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800941c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2208      	movs	r2, #8
 800942e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009436:	f043 0208 	orr.w	r2, r3, #8
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009448:	2b00      	cmp	r3, #0
 800944a:	d012      	beq.n	8009472 <HAL_UART_IRQHandler+0x18a>
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009468:	f043 0220 	orr.w	r2, r3, #32
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 820c 	beq.w	8009896 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800947e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800948a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b00      	cmp	r3, #0
 8009494:	d007      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ba:	2b40      	cmp	r3, #64	; 0x40
 80094bc:	d005      	beq.n	80094ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d04f      	beq.n	800956a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fe0d 	bl	800a0ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b40      	cmp	r3, #64	; 0x40
 80094dc:	d141      	bne.n	8009562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800950a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800950e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1d9      	bne.n	80094de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	2b00      	cmp	r3, #0
 8009530:	d013      	beq.n	800955a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	4a13      	ldr	r2, [pc, #76]	; (8009584 <HAL_UART_IRQHandler+0x29c>)
 8009538:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	4618      	mov	r0, r3
 8009540:	f7fc fc6e 	bl	8005e20 <HAL_DMA_Abort_IT>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d017      	beq.n	800957a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	e00f      	b.n	800957a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9a6 	bl	80098ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009560:	e00b      	b.n	800957a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f9a2 	bl	80098ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009568:	e007      	b.n	800957a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f99e 	bl	80098ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009578:	e18d      	b.n	8009896 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957a:	bf00      	nop
    return;
 800957c:	e18b      	b.n	8009896 <HAL_UART_IRQHandler+0x5ae>
 800957e:	bf00      	nop
 8009580:	04000120 	.word	0x04000120
 8009584:	0800a1b1 	.word	0x0800a1b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800958c:	2b01      	cmp	r3, #1
 800958e:	f040 8146 	bne.w	800981e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 813f 	beq.w	800981e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 8138 	beq.w	800981e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2210      	movs	r2, #16
 80095b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b40      	cmp	r3, #64	; 0x40
 80095c2:	f040 80b4 	bne.w	800972e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 815f 	beq.w	800989a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095e6:	429a      	cmp	r2, r3
 80095e8:	f080 8157 	bcs.w	800989a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 8085 	bne.w	8009712 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800961c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009636:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800963e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800964a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1da      	bne.n	8009608 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3308      	adds	r3, #8
 8009672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800967a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800967e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e1      	bne.n	8009652 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3308      	adds	r3, #8
 8009694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800969e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3308      	adds	r3, #8
 80096ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e3      	bne.n	800968e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e2:	f023 0310 	bic.w	r3, r3, #16
 80096e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80096f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e4      	bne.n	80096d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970c:	4618      	mov	r0, r3
 800970e:	f7fc fb49 	bl	8005da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800971e:	b29b      	uxth	r3, r3
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	b29b      	uxth	r3, r3
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f8ca 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800972c:	e0b5      	b.n	800989a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800973a:	b29b      	uxth	r3, r3
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 80a7 	beq.w	800989e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 80a2 	beq.w	800989e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	e853 3f00 	ldrex	r3, [r3]
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800976e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800977c:	647b      	str	r3, [r7, #68]	; 0x44
 800977e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e4      	bne.n	800975a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3308      	adds	r3, #8
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	623b      	str	r3, [r7, #32]
   return(result);
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097b4:	633a      	str	r2, [r7, #48]	; 0x30
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e3      	bne.n	8009790 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2220      	movs	r2, #32
 80097cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0310 	bic.w	r3, r3, #16
 80097ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	617b      	str	r3, [r7, #20]
   return(result);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e4      	bne.n	80097da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f852 	bl	80098c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800981c:	e03f      	b.n	800989e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800981e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <HAL_UART_IRQHandler+0x560>
 800982a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800982e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d008      	beq.n	8009848 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800983e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcf5 	bl	800a230 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009846:	e02d      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00e      	beq.n	8009872 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009864:	2b00      	cmp	r3, #0
 8009866:	d01c      	beq.n	80098a2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
    }
    return;
 8009870:	e017      	b.n	80098a2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d012      	beq.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
 800987e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00c      	beq.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fca6 	bl	800a1dc <UART_EndTransmit_IT>
    return;
 8009890:	e008      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009892:	bf00      	nop
 8009894:	e006      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009896:	bf00      	nop
 8009898:	e004      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800989a:	bf00      	nop
 800989c:	e002      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800989e:	bf00      	nop
 80098a0:	e000      	b.n	80098a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80098a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80098a4:	37e8      	adds	r7, #232	; 0xe8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop

080098ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098dc:	b08a      	sub	sp, #40	; 0x28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4b9e      	ldr	r3, [pc, #632]	; (8009b80 <UART_SetConfig+0x2a8>)
 8009908:	4013      	ands	r3, r2
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009910:	430b      	orrs	r3, r1
 8009912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a93      	ldr	r2, [pc, #588]	; (8009b84 <UART_SetConfig+0x2ac>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009940:	4313      	orrs	r3, r2
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	430a      	orrs	r2, r1
 8009956:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a8a      	ldr	r2, [pc, #552]	; (8009b88 <UART_SetConfig+0x2b0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d126      	bne.n	80099b0 <UART_SetConfig+0xd8>
 8009962:	4b8a      	ldr	r3, [pc, #552]	; (8009b8c <UART_SetConfig+0x2b4>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	2b03      	cmp	r3, #3
 800996e:	d81b      	bhi.n	80099a8 <UART_SetConfig+0xd0>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0xa0>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	08009989 	.word	0x08009989
 800997c:	08009999 	.word	0x08009999
 8009980:	08009991 	.word	0x08009991
 8009984:	080099a1 	.word	0x080099a1
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998e:	e0ab      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009990:	2302      	movs	r3, #2
 8009992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009996:	e0a7      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800999e:	e0a3      	b.n	8009ae8 <UART_SetConfig+0x210>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a6:	e09f      	b.n	8009ae8 <UART_SetConfig+0x210>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ae:	e09b      	b.n	8009ae8 <UART_SetConfig+0x210>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a76      	ldr	r2, [pc, #472]	; (8009b90 <UART_SetConfig+0x2b8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d138      	bne.n	8009a2c <UART_SetConfig+0x154>
 80099ba:	4b74      	ldr	r3, [pc, #464]	; (8009b8c <UART_SetConfig+0x2b4>)
 80099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c0:	f003 030c 	and.w	r3, r3, #12
 80099c4:	2b0c      	cmp	r3, #12
 80099c6:	d82d      	bhi.n	8009a24 <UART_SetConfig+0x14c>
 80099c8:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <UART_SetConfig+0xf8>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	08009a05 	.word	0x08009a05
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009a25 	.word	0x08009a25
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a15 	.word	0x08009a15
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a25 	.word	0x08009a25
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a25 	.word	0x08009a25
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a0a:	e06d      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a12:	e069      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a14:	2304      	movs	r3, #4
 8009a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a1a:	e065      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a22:	e061      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a24:	2310      	movs	r3, #16
 8009a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a2a:	e05d      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a58      	ldr	r2, [pc, #352]	; (8009b94 <UART_SetConfig+0x2bc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d125      	bne.n	8009a82 <UART_SetConfig+0x1aa>
 8009a36:	4b55      	ldr	r3, [pc, #340]	; (8009b8c <UART_SetConfig+0x2b4>)
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a40:	2b30      	cmp	r3, #48	; 0x30
 8009a42:	d016      	beq.n	8009a72 <UART_SetConfig+0x19a>
 8009a44:	2b30      	cmp	r3, #48	; 0x30
 8009a46:	d818      	bhi.n	8009a7a <UART_SetConfig+0x1a2>
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d00a      	beq.n	8009a62 <UART_SetConfig+0x18a>
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d814      	bhi.n	8009a7a <UART_SetConfig+0x1a2>
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <UART_SetConfig+0x182>
 8009a54:	2b10      	cmp	r3, #16
 8009a56:	d008      	beq.n	8009a6a <UART_SetConfig+0x192>
 8009a58:	e00f      	b.n	8009a7a <UART_SetConfig+0x1a2>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a60:	e042      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a62:	2302      	movs	r3, #2
 8009a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a68:	e03e      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a70:	e03a      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a72:	2308      	movs	r3, #8
 8009a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a78:	e036      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a7a:	2310      	movs	r3, #16
 8009a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a80:	e032      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a3f      	ldr	r2, [pc, #252]	; (8009b84 <UART_SetConfig+0x2ac>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d12a      	bne.n	8009ae2 <UART_SetConfig+0x20a>
 8009a8c:	4b3f      	ldr	r3, [pc, #252]	; (8009b8c <UART_SetConfig+0x2b4>)
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a9a:	d01a      	beq.n	8009ad2 <UART_SetConfig+0x1fa>
 8009a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009aa0:	d81b      	bhi.n	8009ada <UART_SetConfig+0x202>
 8009aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa6:	d00c      	beq.n	8009ac2 <UART_SetConfig+0x1ea>
 8009aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aac:	d815      	bhi.n	8009ada <UART_SetConfig+0x202>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <UART_SetConfig+0x1e2>
 8009ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab6:	d008      	beq.n	8009aca <UART_SetConfig+0x1f2>
 8009ab8:	e00f      	b.n	8009ada <UART_SetConfig+0x202>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ac0:	e012      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ac8:	e00e      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009aca:	2304      	movs	r3, #4
 8009acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ad0:	e00a      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ad8:	e006      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009ada:	2310      	movs	r3, #16
 8009adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ae0:	e002      	b.n	8009ae8 <UART_SetConfig+0x210>
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a25      	ldr	r2, [pc, #148]	; (8009b84 <UART_SetConfig+0x2ac>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	f040 808a 	bne.w	8009c08 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d824      	bhi.n	8009b46 <UART_SetConfig+0x26e>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x22c>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b47 	.word	0x08009b47
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b47 	.word	0x08009b47
 8009b14:	08009b37 	.word	0x08009b37
 8009b18:	08009b47 	.word	0x08009b47
 8009b1c:	08009b47 	.word	0x08009b47
 8009b20:	08009b47 	.word	0x08009b47
 8009b24:	08009b3f 	.word	0x08009b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b28:	f7fd fb1c 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8009b2c:	61f8      	str	r0, [r7, #28]
        break;
 8009b2e:	e010      	b.n	8009b52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b30:	4b19      	ldr	r3, [pc, #100]	; (8009b98 <UART_SetConfig+0x2c0>)
 8009b32:	61fb      	str	r3, [r7, #28]
        break;
 8009b34:	e00d      	b.n	8009b52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b36:	f7fd fa7d 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8009b3a:	61f8      	str	r0, [r7, #28]
        break;
 8009b3c:	e009      	b.n	8009b52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b42:	61fb      	str	r3, [r7, #28]
        break;
 8009b44:	e005      	b.n	8009b52 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8109 	beq.w	8009d6c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d305      	bcc.n	8009b76 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d912      	bls.n	8009b9c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b7c:	e0f6      	b.n	8009d6c <UART_SetConfig+0x494>
 8009b7e:	bf00      	nop
 8009b80:	efff69f3 	.word	0xefff69f3
 8009b84:	40008000 	.word	0x40008000
 8009b88:	40013800 	.word	0x40013800
 8009b8c:	40021000 	.word	0x40021000
 8009b90:	40004400 	.word	0x40004400
 8009b94:	40004800 	.word	0x40004800
 8009b98:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	4615      	mov	r5, r2
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	022b      	lsls	r3, r5, #8
 8009bae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009bb2:	0222      	lsls	r2, r4, #8
 8009bb4:	68f9      	ldr	r1, [r7, #12]
 8009bb6:	6849      	ldr	r1, [r1, #4]
 8009bb8:	0849      	lsrs	r1, r1, #1
 8009bba:	2000      	movs	r0, #0
 8009bbc:	4688      	mov	r8, r1
 8009bbe:	4681      	mov	r9, r0
 8009bc0:	eb12 0a08 	adds.w	sl, r2, r8
 8009bc4:	eb43 0b09 	adc.w	fp, r3, r9
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	f7f6 ff67 	bl	8000aac <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4613      	mov	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bec:	d308      	bcc.n	8009c00 <UART_SetConfig+0x328>
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf4:	d204      	bcs.n	8009c00 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	e0b5      	b.n	8009d6c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c06:	e0b1      	b.n	8009d6c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c10:	d15d      	bne.n	8009cce <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d827      	bhi.n	8009c6a <UART_SetConfig+0x392>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <UART_SetConfig+0x348>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c55 	.word	0x08009c55
 8009c2c:	08009c6b 	.word	0x08009c6b
 8009c30:	08009c5b 	.word	0x08009c5b
 8009c34:	08009c6b 	.word	0x08009c6b
 8009c38:	08009c6b 	.word	0x08009c6b
 8009c3c:	08009c6b 	.word	0x08009c6b
 8009c40:	08009c63 	.word	0x08009c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c44:	f7fd fa8e 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8009c48:	61f8      	str	r0, [r7, #28]
        break;
 8009c4a:	e014      	b.n	8009c76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c4c:	f7fd faa0 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 8009c50:	61f8      	str	r0, [r7, #28]
        break;
 8009c52:	e010      	b.n	8009c76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c54:	4b4c      	ldr	r3, [pc, #304]	; (8009d88 <UART_SetConfig+0x4b0>)
 8009c56:	61fb      	str	r3, [r7, #28]
        break;
 8009c58:	e00d      	b.n	8009c76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c5a:	f7fd f9eb 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8009c5e:	61f8      	str	r0, [r7, #28]
        break;
 8009c60:	e009      	b.n	8009c76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c66:	61fb      	str	r3, [r7, #28]
        break;
 8009c68:	e005      	b.n	8009c76 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d077      	beq.n	8009d6c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	005a      	lsls	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	085b      	lsrs	r3, r3, #1
 8009c86:	441a      	add	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	2b0f      	cmp	r3, #15
 8009c96:	d916      	bls.n	8009cc6 <UART_SetConfig+0x3ee>
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9e:	d212      	bcs.n	8009cc6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	f023 030f 	bic.w	r3, r3, #15
 8009ca8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	8afb      	ldrh	r3, [r7, #22]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	8afa      	ldrh	r2, [r7, #22]
 8009cc2:	60da      	str	r2, [r3, #12]
 8009cc4:	e052      	b.n	8009d6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ccc:	e04e      	b.n	8009d6c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	d827      	bhi.n	8009d26 <UART_SetConfig+0x44e>
 8009cd6:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <UART_SetConfig+0x404>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d01 	.word	0x08009d01
 8009ce0:	08009d09 	.word	0x08009d09
 8009ce4:	08009d11 	.word	0x08009d11
 8009ce8:	08009d27 	.word	0x08009d27
 8009cec:	08009d17 	.word	0x08009d17
 8009cf0:	08009d27 	.word	0x08009d27
 8009cf4:	08009d27 	.word	0x08009d27
 8009cf8:	08009d27 	.word	0x08009d27
 8009cfc:	08009d1f 	.word	0x08009d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d00:	f7fd fa30 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8009d04:	61f8      	str	r0, [r7, #28]
        break;
 8009d06:	e014      	b.n	8009d32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d08:	f7fd fa42 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 8009d0c:	61f8      	str	r0, [r7, #28]
        break;
 8009d0e:	e010      	b.n	8009d32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <UART_SetConfig+0x4b0>)
 8009d12:	61fb      	str	r3, [r7, #28]
        break;
 8009d14:	e00d      	b.n	8009d32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d16:	f7fd f98d 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8009d1a:	61f8      	str	r0, [r7, #28]
        break;
 8009d1c:	e009      	b.n	8009d32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d22:	61fb      	str	r3, [r7, #28]
        break;
 8009d24:	e005      	b.n	8009d32 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009d30:	bf00      	nop
    }

    if (pclk != 0U)
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d019      	beq.n	8009d6c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	085a      	lsrs	r2, r3, #1
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	441a      	add	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b0f      	cmp	r3, #15
 8009d50:	d909      	bls.n	8009d66 <UART_SetConfig+0x48e>
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d58:	d205      	bcs.n	8009d66 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60da      	str	r2, [r3, #12]
 8009d64:	e002      	b.n	8009d6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3728      	adds	r7, #40	; 0x28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d86:	bf00      	nop
 8009d88:	00f42400 	.word	0x00f42400

08009d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	f003 0308 	and.w	r3, r3, #8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e8a:	d10a      	bne.n	8009ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee0:	f7fb fca8 	bl	8005834 <HAL_GetTick>
 8009ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d10e      	bne.n	8009f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f82d 	bl	8009f62 <UART_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e023      	b.n	8009f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d10e      	bne.n	8009f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f817 	bl	8009f62 <UART_WaitOnFlagUntilTimeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e00d      	b.n	8009f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b09c      	sub	sp, #112	; 0x70
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	603b      	str	r3, [r7, #0]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f72:	e0a5      	b.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f7a:	f000 80a1 	beq.w	800a0c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f7e:	f7fb fc59 	bl	8005834 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d13e      	bne.n	800a012 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e6      	bne.n	8009f94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	f023 0301 	bic.w	r3, r3, #1
 8009fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e5      	bne.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e067      	b.n	800a0e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d04f      	beq.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a02e:	d147      	bne.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a038:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a04e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a058:	637b      	str	r3, [r7, #52]	; 0x34
 800a05a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a05e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e6      	bne.n	800a03a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3308      	adds	r3, #8
 800a072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	e853 3f00 	ldrex	r3, [r3]
 800a07a:	613b      	str	r3, [r7, #16]
   return(result);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f023 0301 	bic.w	r3, r3, #1
 800a082:	66bb      	str	r3, [r7, #104]	; 0x68
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a08c:	623a      	str	r2, [r7, #32]
 800a08e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	69f9      	ldr	r1, [r7, #28]
 800a092:	6a3a      	ldr	r2, [r7, #32]
 800a094:	e841 2300 	strex	r3, r2, [r1]
 800a098:	61bb      	str	r3, [r7, #24]
   return(result);
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1e5      	bne.n	800a06c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e010      	b.n	800a0e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	69da      	ldr	r2, [r3, #28]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	bf0c      	ite	eq
 800a0d0:	2301      	moveq	r3, #1
 800a0d2:	2300      	movne	r3, #0
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	f43f af4a 	beq.w	8009f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3770      	adds	r7, #112	; 0x70
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b095      	sub	sp, #84	; 0x54
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	e853 3f00 	ldrex	r3, [r3]
 800a0fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a106:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a110:	643b      	str	r3, [r7, #64]	; 0x40
 800a112:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a114:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a118:	e841 2300 	strex	r3, r2, [r1]
 800a11c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e6      	bne.n	800a0f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	61fb      	str	r3, [r7, #28]
   return(result);
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3308      	adds	r3, #8
 800a142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a144:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e5      	bne.n	800a124 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d118      	bne.n	800a192 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f023 0310 	bic.w	r3, r3, #16
 800a174:	647b      	str	r3, [r7, #68]	; 0x44
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6979      	ldr	r1, [r7, #20]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	613b      	str	r3, [r7, #16]
   return(result);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e6      	bne.n	800a160 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a1a4:	bf00      	nop
 800a1a6:	3754      	adds	r7, #84	; 0x54
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fb6c 	bl	80098ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	61bb      	str	r3, [r7, #24]
 800a204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a206:	6979      	ldr	r1, [r7, #20]
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	613b      	str	r3, [r7, #16]
   return(result);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1e6      	bne.n	800a1e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2220      	movs	r2, #32
 800a21a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fb44 	bl	800a8b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a228:	bf00      	nop
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800a248:	4b10      	ldr	r3, [pc, #64]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a24a:	4a11      	ldr	r2, [pc, #68]	; (800a290 <board_init_common_rtc_init+0x4c>)
 800a24c:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a250:	2200      	movs	r2, #0
 800a252:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 800a254:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a256:	227f      	movs	r2, #127	; 0x7f
 800a258:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800a25a:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a25c:	22ff      	movs	r2, #255	; 0xff
 800a25e:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a260:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a262:	2200      	movs	r2, #0
 800a264:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a268:	2200      	movs	r2, #0
 800a26a:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a26e:	2200      	movs	r2, #0
 800a270:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a274:	2200      	movs	r2, #0
 800a276:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800a278:	4804      	ldr	r0, [pc, #16]	; (800a28c <board_init_common_rtc_init+0x48>)
 800a27a:	f7fd fb09 	bl	8007890 <HAL_RTC_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <board_init_common_rtc_init+0x44>
 800a284:	f000 fa4b 	bl	800a71e <Error_Handler>
}
 800a288:	bf00      	nop
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20001d70 	.word	0x20001d70
 800a290:	40002800 	.word	0x40002800

0800a294 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b0ae      	sub	sp, #184	; 0xb8
 800a298:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a29a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a29e:	2244      	movs	r2, #68	; 0x44
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 fb58 	bl	800b958 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a2a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	609a      	str	r2, [r3, #8]
 800a2b4:	60da      	str	r2, [r3, #12]
 800a2b6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a2b8:	1d3b      	adds	r3, r7, #4
 800a2ba:	225c      	movs	r2, #92	; 0x5c
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 fb4a 	bl	800b958 <memset>

    HAL_PWR_EnableBkUpAccess();
 800a2c4:	f7fc f8be 	bl	8006444 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a2c8:	4b25      	ldr	r3, [pc, #148]	; (800a360 <SystemClock_Config+0xcc>)
 800a2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ce:	4a24      	ldr	r2, [pc, #144]	; (800a360 <SystemClock_Config+0xcc>)
 800a2d0:	f023 0318 	bic.w	r3, r3, #24
 800a2d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a2d8:	2305      	movs	r3, #5
 800a2da:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a2dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2e0:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800a2ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fc f98b 	bl	800660c <HAL_RCC_OscConfig>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d000      	beq.n	800a2fe <SystemClock_Config+0x6a>
 800a2fc:	e7fe      	b.n	800a2fc <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2fe:	230f      	movs	r3, #15
 800a300:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800a302:	2302      	movs	r3, #2
 800a304:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a306:	2300      	movs	r3, #0
 800a308:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a30a:	2300      	movs	r3, #0
 800a30c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a30e:	2300      	movs	r3, #0
 800a310:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800a312:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fc fd8b 	bl	8006e34 <HAL_RCC_ClockConfig>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d000      	beq.n	800a326 <SystemClock_Config+0x92>
 800a324:	e7fe      	b.n	800a324 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a32a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a330:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800a332:	1d3b      	adds	r3, r7, #4
 800a334:	4618      	mov	r0, r3
 800a336:	f7fc ffa1 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <SystemClock_Config+0xb0>
 800a340:	f000 f9ed 	bl	800a71e <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 800a344:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a348:	f7fc f90a 	bl	8006560 <HAL_PWREx_ControlVoltageScaling>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <SystemClock_Config+0xc2>
 800a352:	f000 f9e4 	bl	800a71e <Error_Handler>
}
 800a356:	bf00      	nop
 800a358:	37b8      	adds	r7, #184	; 0xb8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	40021000 	.word	0x40021000

0800a364 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b09e      	sub	sp, #120	; 0x78
 800a368:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a36a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	609a      	str	r2, [r3, #8]
 800a376:	60da      	str	r2, [r3, #12]
 800a378:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a37a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	605a      	str	r2, [r3, #4]
 800a384:	609a      	str	r2, [r3, #8]
 800a386:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800a394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	605a      	str	r2, [r3, #4]
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	60da      	str	r2, [r3, #12]
 800a3a2:	611a      	str	r2, [r3, #16]
 800a3a4:	615a      	str	r2, [r3, #20]
 800a3a6:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a3a8:	463b      	mov	r3, r7
 800a3aa:	222c      	movs	r2, #44	; 0x2c
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f001 fad2 	bl	800b958 <memset>
    g_tim1_handle.Instance = TIM1;
 800a3b4:	4b5c      	ldr	r3, [pc, #368]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3b6:	4a5d      	ldr	r2, [pc, #372]	; (800a52c <board_init_common_timer_init+0x1c8>)
 800a3b8:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800a3ba:	4b5b      	ldr	r3, [pc, #364]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3c0:	4b59      	ldr	r3, [pc, #356]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800a3c6:	4b58      	ldr	r3, [pc, #352]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3c8:	223b      	movs	r2, #59	; 0x3b
 800a3ca:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3cc:	4b56      	ldr	r3, [pc, #344]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800a3d2:	4b55      	ldr	r3, [pc, #340]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3d8:	4b53      	ldr	r3, [pc, #332]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a3de:	4852      	ldr	r0, [pc, #328]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3e0:	f7fd fc15 	bl	8007c0e <HAL_TIM_Base_Init>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <board_init_common_timer_init+0x8a>
 800a3ea:	f000 f998 	bl	800a71e <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800a3f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	484b      	ldr	r0, [pc, #300]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a3fc:	f7fe f8aa 	bl	8008554 <HAL_TIM_ConfigClockSource>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <board_init_common_timer_init+0xa6>
 800a406:	f000 f98a 	bl	800a71e <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a40a:	4847      	ldr	r0, [pc, #284]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a40c:	f7fd fc56 	bl	8007cbc <HAL_TIM_PWM_Init>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <board_init_common_timer_init+0xb6>
 800a416:	f000 f982 	bl	800a71e <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a41a:	2300      	movs	r3, #0
 800a41c:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a41e:	2300      	movs	r3, #0
 800a420:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a422:	2300      	movs	r3, #0
 800a424:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a42a:	4619      	mov	r1, r3
 800a42c:	483e      	ldr	r0, [pc, #248]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a42e:	f7fe fde1 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <board_init_common_timer_init+0xd8>
 800a438:	f000 f971 	bl	800a71e <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a43c:	2360      	movs	r3, #96	; 0x60
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a444:	2300      	movs	r3, #0
 800a446:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a448:	2300      	movs	r3, #0
 800a44a:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a450:	2300      	movs	r3, #0
 800a452:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a454:	2300      	movs	r3, #0
 800a456:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a45c:	2200      	movs	r2, #0
 800a45e:	4619      	mov	r1, r3
 800a460:	4831      	ldr	r0, [pc, #196]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a462:	f7fd ff63 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <board_init_common_timer_init+0x10c>
 800a46c:	f000 f957 	bl	800a71e <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a474:	2204      	movs	r2, #4
 800a476:	4619      	mov	r1, r3
 800a478:	482b      	ldr	r0, [pc, #172]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a47a:	f7fd ff57 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <board_init_common_timer_init+0x124>
 800a484:	f000 f94b 	bl	800a71e <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a48c:	2208      	movs	r2, #8
 800a48e:	4619      	mov	r1, r3
 800a490:	4825      	ldr	r0, [pc, #148]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a492:	f7fd ff4b 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <board_init_common_timer_init+0x13c>
 800a49c:	f000 f93f 	bl	800a71e <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a4b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4b8:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a4c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4c6:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a4d0:	463b      	mov	r3, r7
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	4814      	ldr	r0, [pc, #80]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a4d6:	f7fe fdf3 	bl	80090c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <board_init_common_timer_init+0x180>
 800a4e0:	f000 f91d 	bl	800a71e <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4810      	ldr	r0, [pc, #64]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a4e8:	f7fd fe38 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	480e      	ldr	r0, [pc, #56]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a4f0:	f7fd fe34 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a4f4:	2108      	movs	r1, #8
 800a4f6:	480c      	ldr	r0, [pc, #48]	; (800a528 <board_init_common_timer_init+0x1c4>)
 800a4f8:	f7fd fe30 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 800a4fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a500:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a502:	2302      	movs	r3, #2
 800a504:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a506:	2300      	movs	r3, #0
 800a508:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50a:	2300      	movs	r3, #0
 800a50c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a50e:	2301      	movs	r3, #1
 800a510:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a512:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a516:	4619      	mov	r1, r3
 800a518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a51c:	f7fb fde8 	bl	80060f0 <HAL_GPIO_Init>
}
 800a520:	bf00      	nop
 800a522:	3778      	adds	r7, #120	; 0x78
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20001d94 	.word	0x20001d94
 800a52c:	40012c00 	.word	0x40012c00

0800a530 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a534:	4b30      	ldr	r3, [pc, #192]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a536:	2206      	movs	r2, #6
 800a538:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a53a:	4b2f      	ldr	r3, [pc, #188]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a53c:	2208      	movs	r2, #8
 800a53e:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a540:	4b2d      	ldr	r3, [pc, #180]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a542:	2217      	movs	r2, #23
 800a544:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a546:	4b2c      	ldr	r3, [pc, #176]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a548:	2228      	movs	r2, #40	; 0x28
 800a54a:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 800a54c:	2200      	movs	r2, #0
 800a54e:	2118      	movs	r1, #24
 800a550:	2006      	movs	r0, #6
 800a552:	f7fb fabc 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a556:	2006      	movs	r0, #6
 800a558:	f7fb fad5 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 800a55c:	2200      	movs	r2, #0
 800a55e:	2118      	movs	r1, #24
 800a560:	2008      	movs	r0, #8
 800a562:	f7fb fab4 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800a566:	2008      	movs	r0, #8
 800a568:	f7fb facd 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 800a56c:	2200      	movs	r2, #0
 800a56e:	2118      	movs	r1, #24
 800a570:	2017      	movs	r0, #23
 800a572:	f7fb faac 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a576:	2017      	movs	r0, #23
 800a578:	f7fb fac5 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800a57c:	2200      	movs	r2, #0
 800a57e:	2118      	movs	r1, #24
 800a580:	2028      	movs	r0, #40	; 0x28
 800a582:	f7fb faa4 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a586:	2028      	movs	r0, #40	; 0x28
 800a588:	f7fb fabd 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a58c:	4b1a      	ldr	r3, [pc, #104]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a58e:	2206      	movs	r2, #6
 800a590:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a594:	2208      	movs	r2, #8
 800a596:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a598:	4b17      	ldr	r3, [pc, #92]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a59a:	2217      	movs	r2, #23
 800a59c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a59e:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a5a0:	2228      	movs	r2, #40	; 0x28
 800a5a2:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	200c      	movs	r0, #12
 800a5aa:	f7fb fa90 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a5ae:	200c      	movs	r0, #12
 800a5b0:	f7fb faa9 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	200d      	movs	r0, #13
 800a5ba:	f7fb fa88 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a5be:	200d      	movs	r0, #13
 800a5c0:	f7fb faa1 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	200f      	movs	r0, #15
 800a5ca:	f7fb fa80 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a5ce:	200f      	movs	r0, #15
 800a5d0:	f7fb fa99 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	2010      	movs	r0, #16
 800a5da:	f7fb fa78 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a5de:	2010      	movs	r0, #16
 800a5e0:	f7fb fa91 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	2011      	movs	r0, #17
 800a5ea:	f7fb fa70 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a5ee:	2011      	movs	r0, #17
 800a5f0:	f7fb fa89 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 800a5f4:	bf00      	nop
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	40010400 	.word	0x40010400

0800a5fc <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	605a      	str	r2, [r3, #4]
 800a60a:	609a      	str	r2, [r3, #8]
 800a60c:	60da      	str	r2, [r3, #12]
 800a60e:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 800a610:	2305      	movs	r3, #5
 800a612:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a614:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a618:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a61a:	2301      	movs	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a61e:	1d3b      	adds	r3, r7, #4
 800a620:	4619      	mov	r1, r3
 800a622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a626:	f7fb fd63 	bl	80060f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800a62a:	f242 0320 	movw	r3, #8224	; 0x2020
 800a62e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a630:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a634:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a636:	2301      	movs	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a63a:	1d3b      	adds	r3, r7, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4804      	ldr	r0, [pc, #16]	; (800a650 <board_init_common_setup_wakeups+0x54>)
 800a640:	f7fb fd56 	bl	80060f0 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 800a644:	f7ff ff74 	bl	800a530 <board_init_common_nvic_setup_interrupts>
}
 800a648:	bf00      	nop
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	48000800 	.word	0x48000800

0800a654 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a65a:	4b21      	ldr	r3, [pc, #132]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65e:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a666:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a672:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a676:	4a1a      	ldr	r2, [pc, #104]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a678:	f043 0302 	orr.w	r3, r3, #2
 800a67c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a67e:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a68a:	4b15      	ldr	r3, [pc, #84]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68e:	4a14      	ldr	r2, [pc, #80]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a690:	f043 0304 	orr.w	r3, r3, #4
 800a694:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a696:	4b12      	ldr	r3, [pc, #72]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69a:	f003 0304 	and.w	r3, r3, #4
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a6a2:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a6:	4a0e      	ldr	r2, [pc, #56]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ae:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	60bb      	str	r3, [r7, #8]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6be:	4a08      	ldr	r2, [pc, #32]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6c0:	f043 0301 	orr.w	r3, r3, #1
 800a6c4:	6493      	str	r3, [r2, #72]	; 0x48
 800a6c6:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <board_init_port_wakeup+0x8c>)
 800a6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40021000 	.word	0x40021000

0800a6e4 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
    srand(time(0));
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f001 f93d 	bl	800b968 <time>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 f801 	bl	800b6fc <srand>
    HAL_Init();
 800a6fa:	f7fb f847 	bl	800578c <HAL_Init>
    SystemClock_Config();
 800a6fe:	f7ff fdc9 	bl	800a294 <SystemClock_Config>

    board_init_port_wakeup();
 800a702:	f7ff ffa7 	bl	800a654 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800a706:	f7ff ff79 	bl	800a5fc <board_init_common_setup_wakeups>
    board_init_specific();
 800a70a:	f000 fe6b 	bl	800b3e4 <board_init_specific>

    board_init_common_timer_init();
 800a70e:	f7ff fe29 	bl	800a364 <board_init_common_timer_init>

    ws2812b_init();
 800a712:	f7f7 fc29 	bl	8001f68 <ws2812b_init>

    board_init_common_rtc_init();
 800a716:	f7ff fd95 	bl	800a244 <board_init_common_rtc_init>
}
 800a71a:	bf00      	nop
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a71e:	b480      	push	{r7}
 800a720:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a722:	b672      	cpsid	i
}
 800a724:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a726:	e7fe      	b.n	800a726 <Error_Handler+0x8>

0800a728 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a72e:	2300      	movs	r3, #0
 800a730:	77fb      	strb	r3, [r7, #31]
 800a732:	e0a3      	b.n	800a87c <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 800a734:	7ffb      	ldrb	r3, [r7, #31]
 800a736:	4a56      	ldr	r2, [pc, #344]	; (800a890 <spi_config_hal_setup+0x168>)
 800a738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 809a 	beq.w	800a876 <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 800a742:	7ffa      	ldrb	r2, [r7, #31]
 800a744:	4953      	ldr	r1, [pc, #332]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 800a760:	7ffa      	ldrb	r2, [r7, #31]
 800a762:	494c      	ldr	r1, [pc, #304]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	440b      	add	r3, r1
 800a76e:	3304      	adds	r3, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f107 0208 	add.w	r2, r7, #8
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fb fcb9 	bl	80060f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800a77e:	7ffa      	ldrb	r2, [r7, #31]
 800a780:	4944      	ldr	r1, [pc, #272]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	440b      	add	r3, r1
 800a78c:	330a      	adds	r3, #10
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a796:	2300      	movs	r3, #0
 800a798:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800a79e:	7ffa      	ldrb	r2, [r7, #31]
 800a7a0:	493c      	ldr	r1, [pc, #240]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	440b      	add	r3, r1
 800a7ac:	330c      	adds	r3, #12
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f107 0208 	add.w	r2, r7, #8
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fb fc9a 	bl	80060f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800a7bc:	7ffa      	ldrb	r2, [r7, #31]
 800a7be:	4935      	ldr	r1, [pc, #212]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	440b      	add	r3, r1
 800a7ca:	3312      	adds	r3, #18
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800a7dc:	7ffa      	ldrb	r2, [r7, #31]
 800a7de:	492d      	ldr	r1, [pc, #180]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3314      	adds	r3, #20
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f107 0208 	add.w	r2, r7, #8
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb fc7b 	bl	80060f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800a7fa:	7ffa      	ldrb	r2, [r7, #31]
 800a7fc:	4925      	ldr	r1, [pc, #148]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	440b      	add	r3, r1
 800a808:	331a      	adds	r3, #26
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a812:	2300      	movs	r3, #0
 800a814:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800a816:	7ffa      	ldrb	r2, [r7, #31]
 800a818:	491e      	ldr	r1, [pc, #120]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	440b      	add	r3, r1
 800a824:	331c      	adds	r3, #28
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f107 0208 	add.w	r2, r7, #8
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fb fc5e 	bl	80060f0 <HAL_GPIO_Init>

        	switch (bus)
 800a834:	7ffb      	ldrb	r3, [r7, #31]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10c      	bne.n	800a854 <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800a83a:	4b17      	ldr	r3, [pc, #92]	; (800a898 <spi_config_hal_setup+0x170>)
 800a83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <spi_config_hal_setup+0x170>)
 800a840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a844:	6613      	str	r3, [r2, #96]	; 0x60
 800a846:	4b14      	ldr	r3, [pc, #80]	; (800a898 <spi_config_hal_setup+0x170>)
 800a848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a84a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
        		break;
 800a852:	e000      	b.n	800a856 <spi_config_hal_setup+0x12e>
        		default:
				break;
 800a854:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800a856:	7ffa      	ldrb	r2, [r7, #31]
 800a858:	490e      	ldr	r1, [pc, #56]	; (800a894 <spi_config_hal_setup+0x16c>)
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	440b      	add	r3, r1
 800a864:	3324      	adds	r3, #36	; 0x24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd f923 	bl	8007ab4 <HAL_SPI_Init>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d000      	beq.n	800a876 <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800a874:	e7fe      	b.n	800a874 <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a876:	7ffb      	ldrb	r3, [r7, #31]
 800a878:	3301      	adds	r3, #1
 800a87a:	77fb      	strb	r3, [r7, #31]
 800a87c:	7ffb      	ldrb	r3, [r7, #31]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f43f af58 	beq.w	800a734 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	200000ec 	.word	0x200000ec
 800a894:	0800c73c 	.word	0x0800c73c
 800a898:	40021000 	.word	0x40021000

0800a89c <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 800a8a0:	f000 f91a 	bl	800aad8 <uart_config_esp8266_handle>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe fd1e 	bl	80092e8 <HAL_UART_IRQHandler>
}
 800a8ac:	bf00      	nop
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	// do something in future
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b0a0      	sub	sp, #128	; 0x80
 800a8c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a8ca:	f107 030c 	add.w	r3, r7, #12
 800a8ce:	225c      	movs	r2, #92	; 0x5c
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 f840 	bl	800b958 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a8de:	e0e9      	b.n	800aab4 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800a8e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a8e4:	4a78      	ldr	r2, [pc, #480]	; (800aac8 <uart_config_hal_setup+0x204>)
 800a8e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80dd 	beq.w	800aaaa <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800a8f0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8f4:	4975      	ldr	r1, [pc, #468]	; (800aacc <uart_config_hal_setup+0x208>)
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	4413      	add	r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	440b      	add	r3, r1
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a904:	2302      	movs	r3, #2
 800a906:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a90c:	2303      	movs	r3, #3
 800a90e:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800a910:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a914:	496d      	ldr	r1, [pc, #436]	; (800aacc <uart_config_hal_setup+0x208>)
 800a916:	4613      	mov	r3, r2
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	4413      	add	r3, r2
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	440b      	add	r3, r1
 800a920:	3308      	adds	r3, #8
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800a926:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a92a:	4968      	ldr	r1, [pc, #416]	; (800aacc <uart_config_hal_setup+0x208>)
 800a92c:	4613      	mov	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4413      	add	r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	440b      	add	r3, r1
 800a936:	3304      	adds	r3, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7fb fbd5 	bl	80060f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800a946:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a94a:	4960      	ldr	r1, [pc, #384]	; (800aacc <uart_config_hal_setup+0x208>)
 800a94c:	4613      	mov	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	330a      	adds	r3, #10
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a95c:	2302      	movs	r3, #2
 800a95e:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a960:	2300      	movs	r3, #0
 800a962:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a964:	2303      	movs	r3, #3
 800a966:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800a968:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a96c:	4957      	ldr	r1, [pc, #348]	; (800aacc <uart_config_hal_setup+0x208>)
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	440b      	add	r3, r1
 800a978:	3310      	adds	r3, #16
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800a97e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a982:	4952      	ldr	r1, [pc, #328]	; (800aacc <uart_config_hal_setup+0x208>)
 800a984:	4613      	mov	r3, r2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	4413      	add	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	440b      	add	r3, r1
 800a98e:	330c      	adds	r3, #12
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a996:	4611      	mov	r1, r2
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fb fba9 	bl	80060f0 <HAL_GPIO_Init>

    	    switch (bus)
 800a99e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <uart_config_hal_setup+0xe8>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d01b      	beq.n	800a9e2 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800a9aa:	e034      	b.n	800aa16 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800a9b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a9b4:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fc fc5e 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d000      	beq.n	800a9c8 <uart_config_hal_setup+0x104>
    	    	         while(1);
 800a9c6:	e7fe      	b.n	800a9c6 <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a9c8:	4b41      	ldr	r3, [pc, #260]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800a9ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9cc:	4a40      	ldr	r2, [pc, #256]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a9d4:	4b3e      	ldr	r3, [pc, #248]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800a9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	60bb      	str	r3, [r7, #8]
 800a9de:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800a9e0:	e019      	b.n	800aa16 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fc fc44 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d000      	beq.n	800a9fc <uart_config_hal_setup+0x138>
    	    	         while(1);
 800a9fa:	e7fe      	b.n	800a9fa <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800a9fc:	4b34      	ldr	r3, [pc, #208]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800a9fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa00:	4a33      	ldr	r2, [pc, #204]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800aa02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa06:	6613      	str	r3, [r2, #96]	; 0x60
 800aa08:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <uart_config_hal_setup+0x20c>)
 800aa0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
				break;
 800aa14:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800aa16:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	015b      	lsls	r3, r3, #5
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a2c      	ldr	r2, [pc, #176]	; (800aad4 <uart_config_hal_setup+0x210>)
 800aa24:	4413      	add	r3, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fc10 	bl	800924c <HAL_UART_DeInit>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d000      	beq.n	800aa34 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 800aa32:	e7fe      	b.n	800aa32 <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800aa34:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa38:	4613      	mov	r3, r2
 800aa3a:	015b      	lsls	r3, r3, #5
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4a24      	ldr	r2, [pc, #144]	; (800aad4 <uart_config_hal_setup+0x210>)
 800aa42:	4413      	add	r3, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fbb3 	bl	80091b0 <HAL_UART_Init>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d000      	beq.n	800aa52 <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 800aa50:	e7fe      	b.n	800aa50 <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800aa52:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa56:	491d      	ldr	r1, [pc, #116]	; (800aacc <uart_config_hal_setup+0x208>)
 800aa58:	4613      	mov	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	440b      	add	r3, r1
 800aa62:	3314      	adds	r3, #20
 800aa64:	f993 3000 	ldrsb.w	r3, [r3]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fb f82e 	bl	8005ace <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800aa72:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa76:	4915      	ldr	r1, [pc, #84]	; (800aacc <uart_config_hal_setup+0x208>)
 800aa78:	4613      	mov	r3, r2
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	4413      	add	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	440b      	add	r3, r1
 800aa82:	3314      	adds	r3, #20
 800aa84:	f993 3000 	ldrsb.w	r3, [r3]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fb f83c 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 800aa8e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa92:	490e      	ldr	r1, [pc, #56]	; (800aacc <uart_config_hal_setup+0x208>)
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	440b      	add	r3, r1
 800aa9e:	3314      	adds	r3, #20
 800aaa0:	f993 3000 	ldrsb.w	r3, [r3]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fb f856 	bl	8005b56 <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800aaaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aaae:	3301      	adds	r3, #1
 800aab0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aab4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	f67f af11 	bls.w	800a8e0 <uart_config_hal_setup+0x1c>
    	}
    }

}
 800aabe:	bf00      	nop
 800aac0:	bf00      	nop
 800aac2:	3780      	adds	r7, #128	; 0x80
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	200001f8 	.word	0x200001f8
 800aacc:	0800c764 	.word	0x0800c764
 800aad0:	40021000 	.word	0x40021000
 800aad4:	200000f0 	.word	0x200000f0

0800aad8 <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 800aad8:	b480      	push	{r7}
 800aada:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <uart_config_esp8266_handle+0x10>)
}
 800aade:	4618      	mov	r0, r3
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20000174 	.word	0x20000174

0800aaec <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aaf0:	4a0d      	ldr	r2, [pc, #52]	; (800ab28 <HAL_Set_DMA_Callbacks+0x3c>)
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	480d      	ldr	r0, [pc, #52]	; (800ab2c <HAL_Set_DMA_Callbacks+0x40>)
 800aaf6:	f7fb fa83 	bl	8006000 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aafa:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <HAL_Set_DMA_Callbacks+0x3c>)
 800aafc:	2100      	movs	r1, #0
 800aafe:	480c      	ldr	r0, [pc, #48]	; (800ab30 <HAL_Set_DMA_Callbacks+0x44>)
 800ab00:	f7fb fa7e 	bl	8006000 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ab04:	4a08      	ldr	r2, [pc, #32]	; (800ab28 <HAL_Set_DMA_Callbacks+0x3c>)
 800ab06:	2100      	movs	r1, #0
 800ab08:	480a      	ldr	r0, [pc, #40]	; (800ab34 <HAL_Set_DMA_Callbacks+0x48>)
 800ab0a:	f7fb fa79 	bl	8006000 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ab0e:	4a06      	ldr	r2, [pc, #24]	; (800ab28 <HAL_Set_DMA_Callbacks+0x3c>)
 800ab10:	2100      	movs	r1, #0
 800ab12:	4809      	ldr	r0, [pc, #36]	; (800ab38 <HAL_Set_DMA_Callbacks+0x4c>)
 800ab14:	f7fb fa74 	bl	8006000 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ab18:	4a03      	ldr	r2, [pc, #12]	; (800ab28 <HAL_Set_DMA_Callbacks+0x3c>)
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4807      	ldr	r0, [pc, #28]	; (800ab3c <HAL_Set_DMA_Callbacks+0x50>)
 800ab1e:	f7fb fa6f 	bl	8006000 <HAL_DMA_RegisterCallback>
}
 800ab22:	bf00      	nop
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	0800b153 	.word	0x0800b153
 800ab2c:	20001c08 	.word	0x20001c08
 800ab30:	20001c50 	.word	0x20001c50
 800ab34:	20001c98 	.word	0x20001c98
 800ab38:	20001ce0 	.word	0x20001ce0
 800ab3c:	20001d28 	.word	0x20001d28

0800ab40 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800ab46:	f107 0308 	add.w	r3, r7, #8
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab50:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <HAL_MspInit+0x60>)
 800ab52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab54:	4a12      	ldr	r2, [pc, #72]	; (800aba0 <HAL_MspInit+0x60>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	6613      	str	r3, [r2, #96]	; 0x60
 800ab5c:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <HAL_MspInit+0x60>)
 800ab5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	607b      	str	r3, [r7, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab68:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <HAL_MspInit+0x60>)
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6c:	4a0c      	ldr	r2, [pc, #48]	; (800aba0 <HAL_MspInit+0x60>)
 800ab6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab72:	6593      	str	r3, [r2, #88]	; 0x58
 800ab74:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <HAL_MspInit+0x60>)
 800ab76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800ab88:	f107 0308 	add.w	r3, r7, #8
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fb fc69 	bl	8006464 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800ab92:	f7fb fcc7 	bl	8006524 <HAL_PWR_EnablePVD>
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	40021000 	.word	0x40021000

0800aba4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a08      	ldr	r2, [pc, #32]	; (800abd4 <HAL_RTC_MspInit+0x30>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d107      	bne.n	800abc6 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800abb6:	4b08      	ldr	r3, [pc, #32]	; (800abd8 <HAL_RTC_MspInit+0x34>)
 800abb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abbc:	4a06      	ldr	r2, [pc, #24]	; (800abd8 <HAL_RTC_MspInit+0x34>)
 800abbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	40002800 	.word	0x40002800
 800abd8:	40021000 	.word	0x40021000

0800abdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a6e      	ldr	r2, [pc, #440]	; (800ada4 <HAL_TIM_Base_MspInit+0x1c8>)
 800abea:	4293      	cmp	r3, r2
 800abec:	f040 8091 	bne.w	800ad12 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800abf0:	4b6d      	ldr	r3, [pc, #436]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800abf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf4:	4a6c      	ldr	r2, [pc, #432]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800abf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abfa:	6613      	str	r3, [r2, #96]	; 0x60
 800abfc:	4b6a      	ldr	r3, [pc, #424]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800abfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800ac08:	4b68      	ldr	r3, [pc, #416]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac0a:	4a69      	ldr	r2, [pc, #420]	; (800adb0 <HAL_TIM_Base_MspInit+0x1d4>)
 800ac0c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800ac0e:	4b67      	ldr	r3, [pc, #412]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac10:	2207      	movs	r2, #7
 800ac12:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac14:	4b65      	ldr	r3, [pc, #404]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac16:	2210      	movs	r2, #16
 800ac18:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac1a:	4b64      	ldr	r3, [pc, #400]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ac20:	4b62      	ldr	r3, [pc, #392]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac22:	2280      	movs	r2, #128	; 0x80
 800ac24:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac26:	4b61      	ldr	r3, [pc, #388]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac2c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac2e:	4b5f      	ldr	r3, [pc, #380]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac34:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800ac36:	4b5d      	ldr	r3, [pc, #372]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac3c:	4b5b      	ldr	r3, [pc, #364]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800ac44:	4859      	ldr	r0, [pc, #356]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac46:	f7fa ff95 	bl	8005b74 <HAL_DMA_Init>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800ac50:	f7ff fd65 	bl	800a71e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a55      	ldr	r2, [pc, #340]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac58:	625a      	str	r2, [r3, #36]	; 0x24
 800ac5a:	4a54      	ldr	r2, [pc, #336]	; (800adac <HAL_TIM_Base_MspInit+0x1d0>)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800ac60:	4b54      	ldr	r3, [pc, #336]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac62:	4a55      	ldr	r2, [pc, #340]	; (800adb8 <HAL_TIM_Base_MspInit+0x1dc>)
 800ac64:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800ac66:	4b53      	ldr	r3, [pc, #332]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac68:	2207      	movs	r2, #7
 800ac6a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac6c:	4b51      	ldr	r3, [pc, #324]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac6e:	2210      	movs	r2, #16
 800ac70:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac72:	4b50      	ldr	r3, [pc, #320]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ac78:	4b4e      	ldr	r3, [pc, #312]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac7a:	2280      	movs	r2, #128	; 0x80
 800ac7c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac7e:	4b4d      	ldr	r3, [pc, #308]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac84:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac86:	4b4b      	ldr	r3, [pc, #300]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac8c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800ac8e:	4b49      	ldr	r3, [pc, #292]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac94:	4b47      	ldr	r3, [pc, #284]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac96:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800ac9c:	4845      	ldr	r0, [pc, #276]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac9e:	f7fa ff69 	bl	8005b74 <HAL_DMA_Init>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800aca8:	f7ff fd39 	bl	800a71e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a41      	ldr	r2, [pc, #260]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800acb0:	629a      	str	r2, [r3, #40]	; 0x28
 800acb2:	4a40      	ldr	r2, [pc, #256]	; (800adb4 <HAL_TIM_Base_MspInit+0x1d8>)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800acb8:	4b40      	ldr	r3, [pc, #256]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acba:	4a41      	ldr	r2, [pc, #260]	; (800adc0 <HAL_TIM_Base_MspInit+0x1e4>)
 800acbc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800acbe:	4b3f      	ldr	r3, [pc, #252]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acc4:	4b3d      	ldr	r3, [pc, #244]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acc6:	2210      	movs	r2, #16
 800acc8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800acca:	4b3c      	ldr	r3, [pc, #240]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800accc:	2200      	movs	r2, #0
 800acce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800acd0:	4b3a      	ldr	r3, [pc, #232]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acd2:	2280      	movs	r2, #128	; 0x80
 800acd4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800acd6:	4b39      	ldr	r3, [pc, #228]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acdc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800acde:	4b37      	ldr	r3, [pc, #220]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800ace0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ace4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800ace6:	4b35      	ldr	r3, [pc, #212]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800ace8:	2200      	movs	r2, #0
 800acea:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800acec:	4b33      	ldr	r3, [pc, #204]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800acf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800acf4:	4831      	ldr	r0, [pc, #196]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800acf6:	f7fa ff3d 	bl	8005b74 <HAL_DMA_Init>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800ad00:	f7ff fd0d 	bl	800a71e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a2d      	ldr	r2, [pc, #180]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800ad08:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad0a:	4a2c      	ldr	r2, [pc, #176]	; (800adbc <HAL_TIM_Base_MspInit+0x1e0>)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6293      	str	r3, [r2, #40]	; 0x28
 800ad10:	e041      	b.n	800ad96 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a2b      	ldr	r2, [pc, #172]	; (800adc4 <HAL_TIM_Base_MspInit+0x1e8>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d13c      	bne.n	800ad96 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ad1c:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800ad1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad20:	4a21      	ldr	r2, [pc, #132]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800ad22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad26:	6613      	str	r3, [r2, #96]	; 0x60
 800ad28:	4b1f      	ldr	r3, [pc, #124]	; (800ada8 <HAL_TIM_Base_MspInit+0x1cc>)
 800ad2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad30:	60bb      	str	r3, [r7, #8]
 800ad32:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800ad34:	4b24      	ldr	r3, [pc, #144]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad36:	4a25      	ldr	r2, [pc, #148]	; (800adcc <HAL_TIM_Base_MspInit+0x1f0>)
 800ad38:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800ad3a:	4b23      	ldr	r3, [pc, #140]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad40:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad42:	2210      	movs	r2, #16
 800ad44:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad46:	4b20      	ldr	r3, [pc, #128]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad4e:	2280      	movs	r2, #128	; 0x80
 800ad50:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ad52:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad58:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ad5a:	4b1b      	ldr	r3, [pc, #108]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad60:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800ad62:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800ad68:	4b17      	ldr	r3, [pc, #92]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800ad6e:	4816      	ldr	r0, [pc, #88]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad70:	f7fa ff00 	bl	8005b74 <HAL_DMA_Init>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800ad7a:	f7ff fcd0 	bl	800a71e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a11      	ldr	r2, [pc, #68]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad82:	625a      	str	r2, [r3, #36]	; 0x24
 800ad84:	4a10      	ldr	r2, [pc, #64]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a0e      	ldr	r2, [pc, #56]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad8e:	621a      	str	r2, [r3, #32]
 800ad90:	4a0d      	ldr	r2, [pc, #52]	; (800adc8 <HAL_TIM_Base_MspInit+0x1ec>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800ad96:	f7ff fea9 	bl	800aaec <HAL_Set_DMA_Callbacks>
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	40012c00 	.word	0x40012c00
 800ada8:	40021000 	.word	0x40021000
 800adac:	20001c08 	.word	0x20001c08
 800adb0:	4002001c 	.word	0x4002001c
 800adb4:	20001c50 	.word	0x20001c50
 800adb8:	40020030 	.word	0x40020030
 800adbc:	20001c98 	.word	0x20001c98
 800adc0:	40020080 	.word	0x40020080
 800adc4:	40014400 	.word	0x40014400
 800adc8:	20001d28 	.word	0x20001d28
 800adcc:	4002006c 	.word	0x4002006c

0800add0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a28      	ldr	r2, [pc, #160]	; (800ae80 <HAL_TIM_PWM_MspInit+0xb0>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d149      	bne.n	800ae76 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ade2:	4b28      	ldr	r3, [pc, #160]	; (800ae84 <HAL_TIM_PWM_MspInit+0xb4>)
 800ade4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade6:	4a27      	ldr	r2, [pc, #156]	; (800ae84 <HAL_TIM_PWM_MspInit+0xb4>)
 800ade8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adec:	6613      	str	r3, [r2, #96]	; 0x60
 800adee:	4b25      	ldr	r3, [pc, #148]	; (800ae84 <HAL_TIM_PWM_MspInit+0xb4>)
 800adf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800adfa:	4b23      	ldr	r3, [pc, #140]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800adfc:	4a23      	ldr	r2, [pc, #140]	; (800ae8c <HAL_TIM_PWM_MspInit+0xbc>)
 800adfe:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800ae00:	4b21      	ldr	r3, [pc, #132]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae02:	2207      	movs	r2, #7
 800ae04:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae06:	4b20      	ldr	r3, [pc, #128]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae08:	2210      	movs	r2, #16
 800ae0a:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae0c:	4b1e      	ldr	r3, [pc, #120]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800ae12:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae14:	2280      	movs	r2, #128	; 0x80
 800ae16:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae18:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae1e:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae20:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae26:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800ae28:	4b17      	ldr	r3, [pc, #92]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae2e:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae30:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ae34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800ae36:	4814      	ldr	r0, [pc, #80]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae38:	f7fa fe9c 	bl	8005b74 <HAL_DMA_Init>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800ae42:	f7ff fc6c 	bl	800a71e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a0f      	ldr	r2, [pc, #60]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae4a:	625a      	str	r2, [r3, #36]	; 0x24
 800ae4c:	4a0e      	ldr	r2, [pc, #56]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae56:	621a      	str	r2, [r3, #32]
 800ae58:	4a0b      	ldr	r2, [pc, #44]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38
 800ae64:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a06      	ldr	r2, [pc, #24]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae6e:	635a      	str	r2, [r3, #52]	; 0x34
 800ae70:	4a05      	ldr	r2, [pc, #20]	; (800ae88 <HAL_TIM_PWM_MspInit+0xb8>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	40014000 	.word	0x40014000
 800ae84:	40021000 	.word	0x40021000
 800ae88:	20001ce0 	.word	0x20001ce0
 800ae8c:	40020058 	.word	0x40020058

0800ae90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae96:	2300      	movs	r3, #0
 800ae98:	71fb      	strb	r3, [r7, #7]
 800ae9a:	e005      	b.n	800aea8 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae9c:	2064      	movs	r0, #100	; 0x64
 800ae9e:	f7fa fcd5 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	3301      	adds	r3, #1
 800aea6:	71fb      	strb	r3, [r7, #7]
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0f6      	beq.n	800ae9c <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aeae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aeb2:	f7fa fccb 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aeb6:	e7ee      	b.n	800ae96 <NMI_Handler+0x6>

0800aeb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800aebe:	2300      	movs	r3, #0
 800aec0:	71fb      	strb	r3, [r7, #7]
 800aec2:	e005      	b.n	800aed0 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aec4:	2064      	movs	r0, #100	; 0x64
 800aec6:	f7fa fcc1 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	3301      	adds	r3, #1
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d9f6      	bls.n	800aec4 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aed6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aeda:	f7fa fcb7 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aede:	e7ee      	b.n	800aebe <HardFault_Handler+0x6>

0800aee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800aee6:	2300      	movs	r3, #0
 800aee8:	71fb      	strb	r3, [r7, #7]
 800aeea:	e005      	b.n	800aef8 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aeec:	2064      	movs	r0, #100	; 0x64
 800aeee:	f7fa fcad 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	3301      	adds	r3, #1
 800aef6:	71fb      	strb	r3, [r7, #7]
 800aef8:	79fb      	ldrb	r3, [r7, #7]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d9f6      	bls.n	800aeec <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aefe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af02:	f7fa fca3 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800af06:	e7ee      	b.n	800aee6 <MemManage_Handler+0x6>

0800af08 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800af0e:	2300      	movs	r3, #0
 800af10:	71fb      	strb	r3, [r7, #7]
 800af12:	e005      	b.n	800af20 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800af14:	2064      	movs	r0, #100	; 0x64
 800af16:	f7fa fc99 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	3301      	adds	r3, #1
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b03      	cmp	r3, #3
 800af24:	d9f6      	bls.n	800af14 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800af26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af2a:	f7fa fc8f 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800af2e:	e7ee      	b.n	800af0e <BusFault_Handler+0x6>

0800af30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800af36:	2300      	movs	r3, #0
 800af38:	71fb      	strb	r3, [r7, #7]
 800af3a:	e005      	b.n	800af48 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800af3c:	2064      	movs	r0, #100	; 0x64
 800af3e:	f7fa fc85 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	3301      	adds	r3, #1
 800af46:	71fb      	strb	r3, [r7, #7]
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d9f6      	bls.n	800af3c <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800af4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af52:	f7fa fc7b 	bl	800584c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800af56:	e7ee      	b.n	800af36 <UsageFault_Handler+0x6>

0800af58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
}
 800af5c:	bf00      	nop
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
	...

0800af68 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800af68:	b590      	push	{r4, r7, lr}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800af6e:	2301      	movs	r3, #1
 800af70:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800af72:	2303      	movs	r3, #3
 800af74:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800af76:	2306      	movs	r3, #6
 800af78:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800af7a:	4b15      	ldr	r3, [pc, #84]	; (800afd0 <EXTI0_IRQHandler+0x68>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3301      	adds	r3, #1
 800af80:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <EXTI0_IRQHandler+0x68>)
 800af82:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800af84:	88fb      	ldrh	r3, [r7, #6]
 800af86:	4618      	mov	r0, r3
 800af88:	f7fb fa44 	bl	8006414 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800af8c:	797a      	ldrb	r2, [r7, #5]
 800af8e:	797b      	ldrb	r3, [r7, #5]
 800af90:	4910      	ldr	r1, [pc, #64]	; (800afd4 <EXTI0_IRQHandler+0x6c>)
 800af92:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800af96:	490f      	ldr	r1, [pc, #60]	; (800afd4 <EXTI0_IRQHandler+0x6c>)
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	440b      	add	r3, r1
 800af9c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800af9e:	797c      	ldrb	r4, [r7, #5]
 800afa0:	f7f8 ff1c 	bl	8003ddc <xTaskGetTickCountFromISR>
 800afa4:	4603      	mov	r3, r0
 800afa6:	4a0b      	ldr	r2, [pc, #44]	; (800afd4 <EXTI0_IRQHandler+0x6c>)
 800afa8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800afac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fa fdb6 	bl	8005b22 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800afb6:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <EXTI0_IRQHandler+0x70>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	7979      	ldrb	r1, [r7, #5]
 800afbc:	463b      	mov	r3, r7
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	2203      	movs	r2, #3
 800afc4:	f7f9 fb28 	bl	8004618 <xTaskGenericNotifyFromISR>
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd90      	pop	{r4, r7, pc}
 800afd0:	20001de0 	.word	0x20001de0
 800afd4:	200002bc 	.word	0x200002bc
 800afd8:	20001df8 	.word	0x20001df8

0800afdc <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b085      	sub	sp, #20
 800afe0:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800afe2:	2304      	movs	r3, #4
 800afe4:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800afe6:	2300      	movs	r3, #0
 800afe8:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800afea:	2308      	movs	r3, #8
 800afec:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800afee:	4b15      	ldr	r3, [pc, #84]	; (800b044 <EXTI2_IRQHandler+0x68>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	4a13      	ldr	r2, [pc, #76]	; (800b044 <EXTI2_IRQHandler+0x68>)
 800aff6:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	4618      	mov	r0, r3
 800affc:	f7fb fa0a 	bl	8006414 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b000:	797a      	ldrb	r2, [r7, #5]
 800b002:	797b      	ldrb	r3, [r7, #5]
 800b004:	4910      	ldr	r1, [pc, #64]	; (800b048 <EXTI2_IRQHandler+0x6c>)
 800b006:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b00a:	490f      	ldr	r1, [pc, #60]	; (800b048 <EXTI2_IRQHandler+0x6c>)
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	440b      	add	r3, r1
 800b010:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b012:	797c      	ldrb	r4, [r7, #5]
 800b014:	f7f8 fee2 	bl	8003ddc <xTaskGetTickCountFromISR>
 800b018:	4603      	mov	r3, r0
 800b01a:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <EXTI2_IRQHandler+0x6c>)
 800b01c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b020:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	f7fa fd7c 	bl	8005b22 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b02a:	4b08      	ldr	r3, [pc, #32]	; (800b04c <EXTI2_IRQHandler+0x70>)
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	7979      	ldrb	r1, [r7, #5]
 800b030:	463b      	mov	r3, r7
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	2203      	movs	r2, #3
 800b038:	f7f9 faee 	bl	8004618 <xTaskGenericNotifyFromISR>
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	bd90      	pop	{r4, r7, pc}
 800b044:	20001de4 	.word	0x20001de4
 800b048:	200002bc 	.word	0x200002bc
 800b04c:	20001df8 	.word	0x20001df8

0800b050 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b085      	sub	sp, #20
 800b054:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800b056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b05a:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800b05c:	2301      	movs	r3, #1
 800b05e:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800b060:	2328      	movs	r3, #40	; 0x28
 800b062:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800b064:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <EXTI15_10_IRQHandler+0x6c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	4a14      	ldr	r2, [pc, #80]	; (800b0bc <EXTI15_10_IRQHandler+0x6c>)
 800b06c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	4618      	mov	r0, r3
 800b072:	f7fb f9cf 	bl	8006414 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b076:	797a      	ldrb	r2, [r7, #5]
 800b078:	797b      	ldrb	r3, [r7, #5]
 800b07a:	4911      	ldr	r1, [pc, #68]	; (800b0c0 <EXTI15_10_IRQHandler+0x70>)
 800b07c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b080:	490f      	ldr	r1, [pc, #60]	; (800b0c0 <EXTI15_10_IRQHandler+0x70>)
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	440b      	add	r3, r1
 800b086:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b088:	797c      	ldrb	r4, [r7, #5]
 800b08a:	f7f8 fea7 	bl	8003ddc <xTaskGetTickCountFromISR>
 800b08e:	4603      	mov	r3, r0
 800b090:	4a0b      	ldr	r2, [pc, #44]	; (800b0c0 <EXTI15_10_IRQHandler+0x70>)
 800b092:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b096:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fa fd41 	bl	8005b22 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b0a0:	4b08      	ldr	r3, [pc, #32]	; (800b0c4 <EXTI15_10_IRQHandler+0x74>)
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	7979      	ldrb	r1, [r7, #5]
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2203      	movs	r2, #3
 800b0ae:	f7f9 fab3 	bl	8004618 <xTaskGenericNotifyFromISR>
}
 800b0b2:	bf00      	nop
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20001de8 	.word	0x20001de8
 800b0c0:	200002bc 	.word	0x200002bc
 800b0c4:	20001df8 	.word	0x20001df8

0800b0c8 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800b0ce:	2320      	movs	r3, #32
 800b0d0:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800b0d6:	2317      	movs	r3, #23
 800b0d8:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800b0da:	4b15      	ldr	r3, [pc, #84]	; (800b130 <EXTI9_5_IRQHandler+0x68>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	4a13      	ldr	r2, [pc, #76]	; (800b130 <EXTI9_5_IRQHandler+0x68>)
 800b0e2:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fb f994 	bl	8006414 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b0ec:	797a      	ldrb	r2, [r7, #5]
 800b0ee:	797b      	ldrb	r3, [r7, #5]
 800b0f0:	4910      	ldr	r1, [pc, #64]	; (800b134 <EXTI9_5_IRQHandler+0x6c>)
 800b0f2:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b0f6:	490f      	ldr	r1, [pc, #60]	; (800b134 <EXTI9_5_IRQHandler+0x6c>)
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	440b      	add	r3, r1
 800b0fc:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b0fe:	797c      	ldrb	r4, [r7, #5]
 800b100:	f7f8 fe6c 	bl	8003ddc <xTaskGetTickCountFromISR>
 800b104:	4603      	mov	r3, r0
 800b106:	4a0b      	ldr	r2, [pc, #44]	; (800b134 <EXTI9_5_IRQHandler+0x6c>)
 800b108:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b10c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f7fa fd06 	bl	8005b22 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b116:	4b08      	ldr	r3, [pc, #32]	; (800b138 <EXTI9_5_IRQHandler+0x70>)
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	7979      	ldrb	r1, [r7, #5]
 800b11c:	463b      	mov	r3, r7
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	2300      	movs	r3, #0
 800b122:	2203      	movs	r2, #3
 800b124:	f7f9 fa78 	bl	8004618 <xTaskGenericNotifyFromISR>
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd90      	pop	{r4, r7, pc}
 800b130:	20001dec 	.word	0x20001dec
 800b134:	200002bc 	.word	0x200002bc
 800b138:	20001df8 	.word	0x20001df8

0800b13c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	80fb      	strh	r3, [r7, #6]

}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
    while(1);
 800b15a:	e7fe      	b.n	800b15a <HAL_DMA_CMPLT_CALLBACK+0x8>

0800b15c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	7f1b      	ldrb	r3, [r3, #28]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d016      	beq.n	800b19a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	dc1c      	bgt.n	800b1aa <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800b170:	2b01      	cmp	r3, #1
 800b172:	d002      	beq.n	800b17a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800b174:	2b02      	cmp	r3, #2
 800b176:	d008      	beq.n	800b18a <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800b178:	e017      	b.n	800b1aa <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800b17a:	2100      	movs	r1, #0
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7fc ffed 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800b182:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800b184:	2201      	movs	r2, #1
 800b186:	701a      	strb	r2, [r3, #0]
        break;
 800b188:	e010      	b.n	800b1ac <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800b18a:	2104      	movs	r1, #4
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fc ffe5 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800b194:	2201      	movs	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
        break;
 800b198:	e008      	b.n	800b1ac <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800b19a:	2108      	movs	r1, #8
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7fc ffdd 	bl	800815c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	701a      	strb	r2, [r3, #0]
        break;
 800b1a8:	e000      	b.n	800b1ac <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800b1aa:	bf00      	nop
    }
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000081 	.word	0x20000081
 800b1b8:	20000082 	.word	0x20000082
 800b1bc:	20000083 	.word	0x20000083

0800b1c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800b1c4:	4802      	ldr	r0, [pc, #8]	; (800b1d0 <DMA1_Channel2_IRQHandler+0x10>)
 800b1c6:	f7fa fe6c 	bl	8005ea2 <HAL_DMA_IRQHandler>
}
 800b1ca:	bf00      	nop
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20001c08 	.word	0x20001c08

0800b1d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800b1d8:	4802      	ldr	r0, [pc, #8]	; (800b1e4 <DMA1_Channel3_IRQHandler+0x10>)
 800b1da:	f7fa fe62 	bl	8005ea2 <HAL_DMA_IRQHandler>
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20001c50 	.word	0x20001c50

0800b1e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800b1ec:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <DMA1_Channel5_IRQHandler+0x10>)
 800b1ee:	f7fa fe58 	bl	8005ea2 <HAL_DMA_IRQHandler>
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20001ce0 	.word	0x20001ce0

0800b1fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800b200:	4802      	ldr	r0, [pc, #8]	; (800b20c <DMA1_Channel6_IRQHandler+0x10>)
 800b202:	f7fa fe4e 	bl	8005ea2 <HAL_DMA_IRQHandler>
}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20001d28 	.word	0x20001d28

0800b210 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800b214:	4802      	ldr	r0, [pc, #8]	; (800b220 <DMA1_Channel7_IRQHandler+0x10>)
 800b216:	f7fa fe44 	bl	8005ea2 <HAL_DMA_IRQHandler>
}
 800b21a:	bf00      	nop
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20001c98 	.word	0x20001c98

0800b224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
	return 1;
 800b228:	2301      	movs	r3, #1
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <_kill>:

int _kill(int pid, int sig)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b23e:	f000 fbcf 	bl	800b9e0 <__errno>
 800b242:	4603      	mov	r3, r0
 800b244:	2216      	movs	r2, #22
 800b246:	601a      	str	r2, [r3, #0]
	return -1;
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <_exit>:

void _exit (int status)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b25c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ffe7 	bl	800b234 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b266:	e7fe      	b.n	800b266 <_exit+0x12>

0800b268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	e00a      	b.n	800b290 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b27a:	f3af 8000 	nop.w
 800b27e:	4601      	mov	r1, r0
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	60ba      	str	r2, [r7, #8]
 800b286:	b2ca      	uxtb	r2, r1
 800b288:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	3301      	adds	r3, #1
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	429a      	cmp	r2, r3
 800b296:	dbf0      	blt.n	800b27a <_read+0x12>
	}

return len;
 800b298:	687b      	ldr	r3, [r7, #4]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b086      	sub	sp, #24
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	617b      	str	r3, [r7, #20]
 800b2b2:	e009      	b.n	800b2c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	60ba      	str	r2, [r7, #8]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	dbf1      	blt.n	800b2b4 <_write+0x12>
	}
	return len;
 800b2d0:	687b      	ldr	r3, [r7, #4]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <_close>:

int _close(int file)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b083      	sub	sp, #12
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
	return -1;
 800b2e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b302:	605a      	str	r2, [r3, #4]
	return 0;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <_isatty>:

int _isatty(int file)
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
	return 1;
 800b31a:	2301      	movs	r3, #1
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
	return 0;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
	...

0800b344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b34c:	4a14      	ldr	r2, [pc, #80]	; (800b3a0 <_sbrk+0x5c>)
 800b34e:	4b15      	ldr	r3, [pc, #84]	; (800b3a4 <_sbrk+0x60>)
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b358:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <_sbrk+0x64>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b360:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <_sbrk+0x64>)
 800b362:	4a12      	ldr	r2, [pc, #72]	; (800b3ac <_sbrk+0x68>)
 800b364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <_sbrk+0x64>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4413      	add	r3, r2
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	429a      	cmp	r2, r3
 800b372:	d207      	bcs.n	800b384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b374:	f000 fb34 	bl	800b9e0 <__errno>
 800b378:	4603      	mov	r3, r0
 800b37a:	220c      	movs	r2, #12
 800b37c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b382:	e009      	b.n	800b398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b384:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <_sbrk+0x64>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b38a:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <_sbrk+0x64>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4413      	add	r3, r2
 800b392:	4a05      	ldr	r2, [pc, #20]	; (800b3a8 <_sbrk+0x64>)
 800b394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b396:	68fb      	ldr	r3, [r7, #12]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20010000 	.word	0x20010000
 800b3a4:	00000400 	.word	0x00000400
 800b3a8:	20001df0 	.word	0x20001df0
 800b3ac:	20003008 	.word	0x20003008

0800b3b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <SystemInit+0x20>)
 800b3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ba:	4a05      	ldr	r2, [pc, #20]	; (800b3d0 <SystemInit+0x20>)
 800b3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	e000ed00 	.word	0xe000ed00

0800b3d4 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800b3d8:	f7ff fa74 	bl	800a8c4 <uart_config_hal_setup>
	spi_config_hal_setup();
 800b3dc:	f7ff f9a4 	bl	800a728 <spi_config_hal_setup>
}
 800b3e0:	bf00      	nop
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <board_init_specific>:


void board_init_specific(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3ea:	1d3b      	adds	r3, r7, #4
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	609a      	str	r2, [r3, #8]
 800b3f4:	60da      	str	r2, [r3, #12]
 800b3f6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800b3f8:	2380      	movs	r3, #128	; 0x80
 800b3fa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b400:	2300      	movs	r3, #0
 800b402:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b404:	1d3b      	adds	r3, r7, #4
 800b406:	4619      	mov	r1, r3
 800b408:	4825      	ldr	r0, [pc, #148]	; (800b4a0 <board_init_specific+0xbc>)
 800b40a:	f7fa fe71 	bl	80060f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800b40e:	2200      	movs	r2, #0
 800b410:	2180      	movs	r1, #128	; 0x80
 800b412:	4823      	ldr	r0, [pc, #140]	; (800b4a0 <board_init_specific+0xbc>)
 800b414:	f7fa ffe6 	bl	80063e4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800b418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b41c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b41e:	2301      	movs	r3, #1
 800b420:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b426:	1d3b      	adds	r3, r7, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	481d      	ldr	r0, [pc, #116]	; (800b4a0 <board_init_specific+0xbc>)
 800b42c:	f7fa fe60 	bl	80060f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800b430:	2201      	movs	r2, #1
 800b432:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b436:	481a      	ldr	r0, [pc, #104]	; (800b4a0 <board_init_specific+0xbc>)
 800b438:	f7fa ffd4 	bl	80063e4 <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 800b43c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b440:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b442:	2300      	movs	r3, #0
 800b444:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800b44a:	1d3b      	adds	r3, r7, #4
 800b44c:	4619      	mov	r1, r3
 800b44e:	4815      	ldr	r0, [pc, #84]	; (800b4a4 <board_init_specific+0xc0>)
 800b450:	f7fa fe4e 	bl	80060f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800b454:	2304      	movs	r3, #4
 800b456:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b458:	2301      	movs	r3, #1
 800b45a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b460:	1d3b      	adds	r3, r7, #4
 800b462:	4619      	mov	r1, r3
 800b464:	480e      	ldr	r0, [pc, #56]	; (800b4a0 <board_init_specific+0xbc>)
 800b466:	f7fa fe43 	bl	80060f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800b46a:	2200      	movs	r2, #0
 800b46c:	2104      	movs	r1, #4
 800b46e:	480c      	ldr	r0, [pc, #48]	; (800b4a0 <board_init_specific+0xbc>)
 800b470:	f7fa ffb8 	bl	80063e4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800b474:	2308      	movs	r3, #8
 800b476:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b478:	2301      	movs	r3, #1
 800b47a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b480:	1d3b      	adds	r3, r7, #4
 800b482:	4619      	mov	r1, r3
 800b484:	4806      	ldr	r0, [pc, #24]	; (800b4a0 <board_init_specific+0xbc>)
 800b486:	f7fa fe33 	bl	80060f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2108      	movs	r1, #8
 800b48e:	4804      	ldr	r0, [pc, #16]	; (800b4a0 <board_init_specific+0xbc>)
 800b490:	f7fa ffa8 	bl	80063e4 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800b494:	f7ff ff9e 	bl	800b3d4 <board_init_peripheral_setup>
}
 800b498:	bf00      	nop
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	48000800 	.word	0x48000800
 800b4a4:	48000400 	.word	0x48000400

0800b4a8 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800b4b2:	f000 f951 	bl	800b758 <rand>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	1acb      	subs	r3, r1, r3
 800b4c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4c4:	fb01 f303 	mul.w	r3, r1, r3
 800b4c8:	1ad2      	subs	r2, r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 800b4da:	f7ff f903 	bl	800a6e4 <board_init_common_board_init>
    //flash_info_init();
    task_create();
 800b4de:	f000 f807 	bl	800b4f0 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b4e2:	f7f6 fa89 	bl	80019f8 <reset_ws2812b>
	osKernelStart();
 800b4e6:	f7f7 fad9 	bl	8002a9c <osKernelStart>
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b4f4:	f7f7 faae 	bl	8002a54 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b4f8:	4a0a      	ldr	r2, [pc, #40]	; (800b524 <task_create+0x34>)
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	480a      	ldr	r0, [pc, #40]	; (800b528 <task_create+0x38>)
 800b4fe:	f7f7 faf3 	bl	8002ae8 <osThreadNew>
 800b502:	4603      	mov	r3, r0
 800b504:	4a09      	ldr	r2, [pc, #36]	; (800b52c <task_create+0x3c>)
 800b506:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800b508:	4a09      	ldr	r2, [pc, #36]	; (800b530 <task_create+0x40>)
 800b50a:	2100      	movs	r1, #0
 800b50c:	4809      	ldr	r0, [pc, #36]	; (800b534 <task_create+0x44>)
 800b50e:	f7f7 faeb 	bl	8002ae8 <osThreadNew>
 800b512:	4603      	mov	r3, r0
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <task_create+0x48>)
 800b516:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b518:	4b08      	ldr	r3, [pc, #32]	; (800b53c <task_create+0x4c>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]



}
 800b51e:	bf00      	nop
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0800c794 	.word	0x0800c794
 800b528:	0800213d 	.word	0x0800213d
 800b52c:	20001df8 	.word	0x20001df8
 800b530:	0800c7b8 	.word	0x0800c7b8
 800b534:	08002419 	.word	0x08002419
 800b538:	20001df4 	.word	0x20001df4
 800b53c:	20002eb4 	.word	0x20002eb4

0800b540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b540:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b544:	f7ff ff34 	bl	800b3b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b548:	480c      	ldr	r0, [pc, #48]	; (800b57c <LoopForever+0x6>)
  ldr r1, =_edata
 800b54a:	490d      	ldr	r1, [pc, #52]	; (800b580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b54c:	4a0d      	ldr	r2, [pc, #52]	; (800b584 <LoopForever+0xe>)
  movs r3, #0
 800b54e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b550:	e002      	b.n	800b558 <LoopCopyDataInit>

0800b552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b556:	3304      	adds	r3, #4

0800b558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b55a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b55c:	d3f9      	bcc.n	800b552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b55e:	4a0a      	ldr	r2, [pc, #40]	; (800b588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b560:	4c0a      	ldr	r4, [pc, #40]	; (800b58c <LoopForever+0x16>)
  movs r3, #0
 800b562:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b564:	e001      	b.n	800b56a <LoopFillZerobss>

0800b566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b568:	3204      	adds	r2, #4

0800b56a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b56a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b56c:	d3fb      	bcc.n	800b566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b56e:	f000 fa3d 	bl	800b9ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b572:	f7ff ffb0 	bl	800b4d6 <main>

0800b576 <LoopForever>:

LoopForever:
    b LoopForever
 800b576:	e7fe      	b.n	800b576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b578:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b57c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b580:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800b584:	0800c8cc 	.word	0x0800c8cc
  ldr r2, =_sbss
 800b588:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800b58c:	20003004 	.word	0x20003004

0800b590 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b590:	e7fe      	b.n	800b590 <ADC1_IRQHandler>
	...

0800b594 <malloc>:
 800b594:	4b02      	ldr	r3, [pc, #8]	; (800b5a0 <malloc+0xc>)
 800b596:	4601      	mov	r1, r0
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f000 b823 	b.w	800b5e4 <_malloc_r>
 800b59e:	bf00      	nop
 800b5a0:	20000254 	.word	0x20000254

0800b5a4 <sbrk_aligned>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	4e0e      	ldr	r6, [pc, #56]	; (800b5e0 <sbrk_aligned+0x3c>)
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	6831      	ldr	r1, [r6, #0]
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	b911      	cbnz	r1, 800b5b6 <sbrk_aligned+0x12>
 800b5b0:	f000 fa06 	bl	800b9c0 <_sbrk_r>
 800b5b4:	6030      	str	r0, [r6, #0]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 fa01 	bl	800b9c0 <_sbrk_r>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d00a      	beq.n	800b5d8 <sbrk_aligned+0x34>
 800b5c2:	1cc4      	adds	r4, r0, #3
 800b5c4:	f024 0403 	bic.w	r4, r4, #3
 800b5c8:	42a0      	cmp	r0, r4
 800b5ca:	d007      	beq.n	800b5dc <sbrk_aligned+0x38>
 800b5cc:	1a21      	subs	r1, r4, r0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 f9f6 	bl	800b9c0 <_sbrk_r>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d101      	bne.n	800b5dc <sbrk_aligned+0x38>
 800b5d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b5dc:	4620      	mov	r0, r4
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	20002ebc 	.word	0x20002ebc

0800b5e4 <_malloc_r>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	1ccd      	adds	r5, r1, #3
 800b5ea:	f025 0503 	bic.w	r5, r5, #3
 800b5ee:	3508      	adds	r5, #8
 800b5f0:	2d0c      	cmp	r5, #12
 800b5f2:	bf38      	it	cc
 800b5f4:	250c      	movcc	r5, #12
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	db01      	blt.n	800b600 <_malloc_r+0x1c>
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d905      	bls.n	800b60c <_malloc_r+0x28>
 800b600:	230c      	movs	r3, #12
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	2600      	movs	r6, #0
 800b606:	4630      	mov	r0, r6
 800b608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6e0 <_malloc_r+0xfc>
 800b610:	f000 f868 	bl	800b6e4 <__malloc_lock>
 800b614:	f8d8 3000 	ldr.w	r3, [r8]
 800b618:	461c      	mov	r4, r3
 800b61a:	bb5c      	cbnz	r4, 800b674 <_malloc_r+0x90>
 800b61c:	4629      	mov	r1, r5
 800b61e:	4638      	mov	r0, r7
 800b620:	f7ff ffc0 	bl	800b5a4 <sbrk_aligned>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	4604      	mov	r4, r0
 800b628:	d155      	bne.n	800b6d6 <_malloc_r+0xf2>
 800b62a:	f8d8 4000 	ldr.w	r4, [r8]
 800b62e:	4626      	mov	r6, r4
 800b630:	2e00      	cmp	r6, #0
 800b632:	d145      	bne.n	800b6c0 <_malloc_r+0xdc>
 800b634:	2c00      	cmp	r4, #0
 800b636:	d048      	beq.n	800b6ca <_malloc_r+0xe6>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	4631      	mov	r1, r6
 800b63c:	4638      	mov	r0, r7
 800b63e:	eb04 0903 	add.w	r9, r4, r3
 800b642:	f000 f9bd 	bl	800b9c0 <_sbrk_r>
 800b646:	4581      	cmp	r9, r0
 800b648:	d13f      	bne.n	800b6ca <_malloc_r+0xe6>
 800b64a:	6821      	ldr	r1, [r4, #0]
 800b64c:	1a6d      	subs	r5, r5, r1
 800b64e:	4629      	mov	r1, r5
 800b650:	4638      	mov	r0, r7
 800b652:	f7ff ffa7 	bl	800b5a4 <sbrk_aligned>
 800b656:	3001      	adds	r0, #1
 800b658:	d037      	beq.n	800b6ca <_malloc_r+0xe6>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	442b      	add	r3, r5
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	f8d8 3000 	ldr.w	r3, [r8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d038      	beq.n	800b6da <_malloc_r+0xf6>
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	42a2      	cmp	r2, r4
 800b66c:	d12b      	bne.n	800b6c6 <_malloc_r+0xe2>
 800b66e:	2200      	movs	r2, #0
 800b670:	605a      	str	r2, [r3, #4]
 800b672:	e00f      	b.n	800b694 <_malloc_r+0xb0>
 800b674:	6822      	ldr	r2, [r4, #0]
 800b676:	1b52      	subs	r2, r2, r5
 800b678:	d41f      	bmi.n	800b6ba <_malloc_r+0xd6>
 800b67a:	2a0b      	cmp	r2, #11
 800b67c:	d917      	bls.n	800b6ae <_malloc_r+0xca>
 800b67e:	1961      	adds	r1, r4, r5
 800b680:	42a3      	cmp	r3, r4
 800b682:	6025      	str	r5, [r4, #0]
 800b684:	bf18      	it	ne
 800b686:	6059      	strne	r1, [r3, #4]
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	bf08      	it	eq
 800b68c:	f8c8 1000 	streq.w	r1, [r8]
 800b690:	5162      	str	r2, [r4, r5]
 800b692:	604b      	str	r3, [r1, #4]
 800b694:	4638      	mov	r0, r7
 800b696:	f104 060b 	add.w	r6, r4, #11
 800b69a:	f000 f829 	bl	800b6f0 <__malloc_unlock>
 800b69e:	f026 0607 	bic.w	r6, r6, #7
 800b6a2:	1d23      	adds	r3, r4, #4
 800b6a4:	1af2      	subs	r2, r6, r3
 800b6a6:	d0ae      	beq.n	800b606 <_malloc_r+0x22>
 800b6a8:	1b9b      	subs	r3, r3, r6
 800b6aa:	50a3      	str	r3, [r4, r2]
 800b6ac:	e7ab      	b.n	800b606 <_malloc_r+0x22>
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	6862      	ldr	r2, [r4, #4]
 800b6b2:	d1dd      	bne.n	800b670 <_malloc_r+0x8c>
 800b6b4:	f8c8 2000 	str.w	r2, [r8]
 800b6b8:	e7ec      	b.n	800b694 <_malloc_r+0xb0>
 800b6ba:	4623      	mov	r3, r4
 800b6bc:	6864      	ldr	r4, [r4, #4]
 800b6be:	e7ac      	b.n	800b61a <_malloc_r+0x36>
 800b6c0:	4634      	mov	r4, r6
 800b6c2:	6876      	ldr	r6, [r6, #4]
 800b6c4:	e7b4      	b.n	800b630 <_malloc_r+0x4c>
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	e7cc      	b.n	800b664 <_malloc_r+0x80>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	603b      	str	r3, [r7, #0]
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f000 f80e 	bl	800b6f0 <__malloc_unlock>
 800b6d4:	e797      	b.n	800b606 <_malloc_r+0x22>
 800b6d6:	6025      	str	r5, [r4, #0]
 800b6d8:	e7dc      	b.n	800b694 <_malloc_r+0xb0>
 800b6da:	605b      	str	r3, [r3, #4]
 800b6dc:	deff      	udf	#255	; 0xff
 800b6de:	bf00      	nop
 800b6e0:	20002eb8 	.word	0x20002eb8

0800b6e4 <__malloc_lock>:
 800b6e4:	4801      	ldr	r0, [pc, #4]	; (800b6ec <__malloc_lock+0x8>)
 800b6e6:	f000 b9a6 	b.w	800ba36 <__retarget_lock_acquire_recursive>
 800b6ea:	bf00      	nop
 800b6ec:	20002ffc 	.word	0x20002ffc

0800b6f0 <__malloc_unlock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_unlock+0x8>)
 800b6f2:	f000 b9a1 	b.w	800ba38 <__retarget_lock_release_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20002ffc 	.word	0x20002ffc

0800b6fc <srand>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4b10      	ldr	r3, [pc, #64]	; (800b740 <srand+0x44>)
 800b700:	681d      	ldr	r5, [r3, #0]
 800b702:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b704:	4604      	mov	r4, r0
 800b706:	b9b3      	cbnz	r3, 800b736 <srand+0x3a>
 800b708:	2018      	movs	r0, #24
 800b70a:	f7ff ff43 	bl	800b594 <malloc>
 800b70e:	4602      	mov	r2, r0
 800b710:	6328      	str	r0, [r5, #48]	; 0x30
 800b712:	b920      	cbnz	r0, 800b71e <srand+0x22>
 800b714:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <srand+0x48>)
 800b716:	480c      	ldr	r0, [pc, #48]	; (800b748 <srand+0x4c>)
 800b718:	2146      	movs	r1, #70	; 0x46
 800b71a:	f000 f99d 	bl	800ba58 <__assert_func>
 800b71e:	490b      	ldr	r1, [pc, #44]	; (800b74c <srand+0x50>)
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <srand+0x54>)
 800b722:	e9c0 1300 	strd	r1, r3, [r0]
 800b726:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <srand+0x58>)
 800b728:	6083      	str	r3, [r0, #8]
 800b72a:	230b      	movs	r3, #11
 800b72c:	8183      	strh	r3, [r0, #12]
 800b72e:	2100      	movs	r1, #0
 800b730:	2001      	movs	r0, #1
 800b732:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b736:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b738:	2200      	movs	r2, #0
 800b73a:	611c      	str	r4, [r3, #16]
 800b73c:	615a      	str	r2, [r3, #20]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	20000254 	.word	0x20000254
 800b744:	0800c7dc 	.word	0x0800c7dc
 800b748:	0800c7f3 	.word	0x0800c7f3
 800b74c:	abcd330e 	.word	0xabcd330e
 800b750:	e66d1234 	.word	0xe66d1234
 800b754:	0005deec 	.word	0x0005deec

0800b758 <rand>:
 800b758:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <rand+0x5c>)
 800b75a:	b510      	push	{r4, lr}
 800b75c:	681c      	ldr	r4, [r3, #0]
 800b75e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b760:	b9b3      	cbnz	r3, 800b790 <rand+0x38>
 800b762:	2018      	movs	r0, #24
 800b764:	f7ff ff16 	bl	800b594 <malloc>
 800b768:	4602      	mov	r2, r0
 800b76a:	6320      	str	r0, [r4, #48]	; 0x30
 800b76c:	b920      	cbnz	r0, 800b778 <rand+0x20>
 800b76e:	4b12      	ldr	r3, [pc, #72]	; (800b7b8 <rand+0x60>)
 800b770:	4812      	ldr	r0, [pc, #72]	; (800b7bc <rand+0x64>)
 800b772:	2152      	movs	r1, #82	; 0x52
 800b774:	f000 f970 	bl	800ba58 <__assert_func>
 800b778:	4911      	ldr	r1, [pc, #68]	; (800b7c0 <rand+0x68>)
 800b77a:	4b12      	ldr	r3, [pc, #72]	; (800b7c4 <rand+0x6c>)
 800b77c:	e9c0 1300 	strd	r1, r3, [r0]
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <rand+0x70>)
 800b782:	6083      	str	r3, [r0, #8]
 800b784:	230b      	movs	r3, #11
 800b786:	8183      	strh	r3, [r0, #12]
 800b788:	2100      	movs	r1, #0
 800b78a:	2001      	movs	r0, #1
 800b78c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b790:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b792:	480e      	ldr	r0, [pc, #56]	; (800b7cc <rand+0x74>)
 800b794:	690b      	ldr	r3, [r1, #16]
 800b796:	694c      	ldr	r4, [r1, #20]
 800b798:	4a0d      	ldr	r2, [pc, #52]	; (800b7d0 <rand+0x78>)
 800b79a:	4358      	muls	r0, r3
 800b79c:	fb02 0004 	mla	r0, r2, r4, r0
 800b7a0:	fba3 3202 	umull	r3, r2, r3, r2
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	eb40 0002 	adc.w	r0, r0, r2
 800b7aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b7ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b7b2:	bd10      	pop	{r4, pc}
 800b7b4:	20000254 	.word	0x20000254
 800b7b8:	0800c7dc 	.word	0x0800c7dc
 800b7bc:	0800c7f3 	.word	0x0800c7f3
 800b7c0:	abcd330e 	.word	0xabcd330e
 800b7c4:	e66d1234 	.word	0xe66d1234
 800b7c8:	0005deec 	.word	0x0005deec
 800b7cc:	5851f42d 	.word	0x5851f42d
 800b7d0:	4c957f2d 	.word	0x4c957f2d

0800b7d4 <std>:
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	4604      	mov	r4, r0
 800b7da:	e9c0 3300 	strd	r3, r3, [r0]
 800b7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e2:	6083      	str	r3, [r0, #8]
 800b7e4:	8181      	strh	r1, [r0, #12]
 800b7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b7e8:	81c2      	strh	r2, [r0, #14]
 800b7ea:	6183      	str	r3, [r0, #24]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	305c      	adds	r0, #92	; 0x5c
 800b7f2:	f000 f8b1 	bl	800b958 <memset>
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <std+0x58>)
 800b7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <std+0x5c>)
 800b7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <std+0x60>)
 800b800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <std+0x64>)
 800b804:	6323      	str	r3, [r4, #48]	; 0x30
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <std+0x68>)
 800b808:	6224      	str	r4, [r4, #32]
 800b80a:	429c      	cmp	r4, r3
 800b80c:	d006      	beq.n	800b81c <std+0x48>
 800b80e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b812:	4294      	cmp	r4, r2
 800b814:	d002      	beq.n	800b81c <std+0x48>
 800b816:	33d0      	adds	r3, #208	; 0xd0
 800b818:	429c      	cmp	r4, r3
 800b81a:	d105      	bne.n	800b828 <std+0x54>
 800b81c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b824:	f000 b906 	b.w	800ba34 <__retarget_lock_init_recursive>
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	bf00      	nop
 800b82c:	0800bc89 	.word	0x0800bc89
 800b830:	0800bcab 	.word	0x0800bcab
 800b834:	0800bce3 	.word	0x0800bce3
 800b838:	0800bd07 	.word	0x0800bd07
 800b83c:	20002ec0 	.word	0x20002ec0

0800b840 <stdio_exit_handler>:
 800b840:	4a02      	ldr	r2, [pc, #8]	; (800b84c <stdio_exit_handler+0xc>)
 800b842:	4903      	ldr	r1, [pc, #12]	; (800b850 <stdio_exit_handler+0x10>)
 800b844:	4803      	ldr	r0, [pc, #12]	; (800b854 <stdio_exit_handler+0x14>)
 800b846:	f000 b869 	b.w	800b91c <_fwalk_sglue>
 800b84a:	bf00      	nop
 800b84c:	200001fc 	.word	0x200001fc
 800b850:	0800bc39 	.word	0x0800bc39
 800b854:	20000208 	.word	0x20000208

0800b858 <cleanup_stdio>:
 800b858:	6841      	ldr	r1, [r0, #4]
 800b85a:	4b0c      	ldr	r3, [pc, #48]	; (800b88c <cleanup_stdio+0x34>)
 800b85c:	4299      	cmp	r1, r3
 800b85e:	b510      	push	{r4, lr}
 800b860:	4604      	mov	r4, r0
 800b862:	d001      	beq.n	800b868 <cleanup_stdio+0x10>
 800b864:	f000 f9e8 	bl	800bc38 <_fflush_r>
 800b868:	68a1      	ldr	r1, [r4, #8]
 800b86a:	4b09      	ldr	r3, [pc, #36]	; (800b890 <cleanup_stdio+0x38>)
 800b86c:	4299      	cmp	r1, r3
 800b86e:	d002      	beq.n	800b876 <cleanup_stdio+0x1e>
 800b870:	4620      	mov	r0, r4
 800b872:	f000 f9e1 	bl	800bc38 <_fflush_r>
 800b876:	68e1      	ldr	r1, [r4, #12]
 800b878:	4b06      	ldr	r3, [pc, #24]	; (800b894 <cleanup_stdio+0x3c>)
 800b87a:	4299      	cmp	r1, r3
 800b87c:	d004      	beq.n	800b888 <cleanup_stdio+0x30>
 800b87e:	4620      	mov	r0, r4
 800b880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b884:	f000 b9d8 	b.w	800bc38 <_fflush_r>
 800b888:	bd10      	pop	{r4, pc}
 800b88a:	bf00      	nop
 800b88c:	20002ec0 	.word	0x20002ec0
 800b890:	20002f28 	.word	0x20002f28
 800b894:	20002f90 	.word	0x20002f90

0800b898 <global_stdio_init.part.0>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <global_stdio_init.part.0+0x30>)
 800b89c:	4c0b      	ldr	r4, [pc, #44]	; (800b8cc <global_stdio_init.part.0+0x34>)
 800b89e:	4a0c      	ldr	r2, [pc, #48]	; (800b8d0 <global_stdio_init.part.0+0x38>)
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	f7ff ff94 	bl	800b7d4 <std>
 800b8ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	2109      	movs	r1, #9
 800b8b4:	f7ff ff8e 	bl	800b7d4 <std>
 800b8b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8bc:	2202      	movs	r2, #2
 800b8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c2:	2112      	movs	r1, #18
 800b8c4:	f7ff bf86 	b.w	800b7d4 <std>
 800b8c8:	20002ff8 	.word	0x20002ff8
 800b8cc:	20002ec0 	.word	0x20002ec0
 800b8d0:	0800b841 	.word	0x0800b841

0800b8d4 <__sfp_lock_acquire>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__sfp_lock_acquire+0x8>)
 800b8d6:	f000 b8ae 	b.w	800ba36 <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20002ffd 	.word	0x20002ffd

0800b8e0 <__sfp_lock_release>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	; (800b8e8 <__sfp_lock_release+0x8>)
 800b8e2:	f000 b8a9 	b.w	800ba38 <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	20002ffd 	.word	0x20002ffd

0800b8ec <__sinit>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	f7ff fff0 	bl	800b8d4 <__sfp_lock_acquire>
 800b8f4:	6a23      	ldr	r3, [r4, #32]
 800b8f6:	b11b      	cbz	r3, 800b900 <__sinit+0x14>
 800b8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8fc:	f7ff bff0 	b.w	800b8e0 <__sfp_lock_release>
 800b900:	4b04      	ldr	r3, [pc, #16]	; (800b914 <__sinit+0x28>)
 800b902:	6223      	str	r3, [r4, #32]
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <__sinit+0x2c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f5      	bne.n	800b8f8 <__sinit+0xc>
 800b90c:	f7ff ffc4 	bl	800b898 <global_stdio_init.part.0>
 800b910:	e7f2      	b.n	800b8f8 <__sinit+0xc>
 800b912:	bf00      	nop
 800b914:	0800b859 	.word	0x0800b859
 800b918:	20002ff8 	.word	0x20002ff8

0800b91c <_fwalk_sglue>:
 800b91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b920:	4607      	mov	r7, r0
 800b922:	4688      	mov	r8, r1
 800b924:	4614      	mov	r4, r2
 800b926:	2600      	movs	r6, #0
 800b928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b92c:	f1b9 0901 	subs.w	r9, r9, #1
 800b930:	d505      	bpl.n	800b93e <_fwalk_sglue+0x22>
 800b932:	6824      	ldr	r4, [r4, #0]
 800b934:	2c00      	cmp	r4, #0
 800b936:	d1f7      	bne.n	800b928 <_fwalk_sglue+0xc>
 800b938:	4630      	mov	r0, r6
 800b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d907      	bls.n	800b954 <_fwalk_sglue+0x38>
 800b944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b948:	3301      	adds	r3, #1
 800b94a:	d003      	beq.n	800b954 <_fwalk_sglue+0x38>
 800b94c:	4629      	mov	r1, r5
 800b94e:	4638      	mov	r0, r7
 800b950:	47c0      	blx	r8
 800b952:	4306      	orrs	r6, r0
 800b954:	3568      	adds	r5, #104	; 0x68
 800b956:	e7e9      	b.n	800b92c <_fwalk_sglue+0x10>

0800b958 <memset>:
 800b958:	4402      	add	r2, r0
 800b95a:	4603      	mov	r3, r0
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d100      	bne.n	800b962 <memset+0xa>
 800b960:	4770      	bx	lr
 800b962:	f803 1b01 	strb.w	r1, [r3], #1
 800b966:	e7f9      	b.n	800b95c <memset+0x4>

0800b968 <time>:
 800b968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <time+0x30>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	4669      	mov	r1, sp
 800b970:	4604      	mov	r4, r0
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	f000 f812 	bl	800b99c <_gettimeofday_r>
 800b978:	2800      	cmp	r0, #0
 800b97a:	bfbe      	ittt	lt
 800b97c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b984:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b98c:	b10c      	cbz	r4, 800b992 <time+0x2a>
 800b98e:	e9c4 0100 	strd	r0, r1, [r4]
 800b992:	b004      	add	sp, #16
 800b994:	bd10      	pop	{r4, pc}
 800b996:	bf00      	nop
 800b998:	20000254 	.word	0x20000254

0800b99c <_gettimeofday_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_gettimeofday_r+0x20>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	f000 fe41 	bl	800c630 <_gettimeofday>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d102      	bne.n	800b9b8 <_gettimeofday_r+0x1c>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	b103      	cbz	r3, 800b9b8 <_gettimeofday_r+0x1c>
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20003000 	.word	0x20003000

0800b9c0 <_sbrk_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	; (800b9dc <_sbrk_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7ff fcba 	bl	800b344 <_sbrk>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_sbrk_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_sbrk_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	20003000 	.word	0x20003000

0800b9e0 <__errno>:
 800b9e0:	4b01      	ldr	r3, [pc, #4]	; (800b9e8 <__errno+0x8>)
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000254 	.word	0x20000254

0800b9ec <__libc_init_array>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	4d0d      	ldr	r5, [pc, #52]	; (800ba24 <__libc_init_array+0x38>)
 800b9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ba28 <__libc_init_array+0x3c>)
 800b9f2:	1b64      	subs	r4, r4, r5
 800b9f4:	10a4      	asrs	r4, r4, #2
 800b9f6:	2600      	movs	r6, #0
 800b9f8:	42a6      	cmp	r6, r4
 800b9fa:	d109      	bne.n	800ba10 <__libc_init_array+0x24>
 800b9fc:	4d0b      	ldr	r5, [pc, #44]	; (800ba2c <__libc_init_array+0x40>)
 800b9fe:	4c0c      	ldr	r4, [pc, #48]	; (800ba30 <__libc_init_array+0x44>)
 800ba00:	f000 fe1e 	bl	800c640 <_init>
 800ba04:	1b64      	subs	r4, r4, r5
 800ba06:	10a4      	asrs	r4, r4, #2
 800ba08:	2600      	movs	r6, #0
 800ba0a:	42a6      	cmp	r6, r4
 800ba0c:	d105      	bne.n	800ba1a <__libc_init_array+0x2e>
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba14:	4798      	blx	r3
 800ba16:	3601      	adds	r6, #1
 800ba18:	e7ee      	b.n	800b9f8 <__libc_init_array+0xc>
 800ba1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba1e:	4798      	blx	r3
 800ba20:	3601      	adds	r6, #1
 800ba22:	e7f2      	b.n	800ba0a <__libc_init_array+0x1e>
 800ba24:	0800c8c4 	.word	0x0800c8c4
 800ba28:	0800c8c4 	.word	0x0800c8c4
 800ba2c:	0800c8c4 	.word	0x0800c8c4
 800ba30:	0800c8c8 	.word	0x0800c8c8

0800ba34 <__retarget_lock_init_recursive>:
 800ba34:	4770      	bx	lr

0800ba36 <__retarget_lock_acquire_recursive>:
 800ba36:	4770      	bx	lr

0800ba38 <__retarget_lock_release_recursive>:
 800ba38:	4770      	bx	lr

0800ba3a <memcpy>:
 800ba3a:	440a      	add	r2, r1
 800ba3c:	4291      	cmp	r1, r2
 800ba3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba42:	d100      	bne.n	800ba46 <memcpy+0xc>
 800ba44:	4770      	bx	lr
 800ba46:	b510      	push	{r4, lr}
 800ba48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba50:	4291      	cmp	r1, r2
 800ba52:	d1f9      	bne.n	800ba48 <memcpy+0xe>
 800ba54:	bd10      	pop	{r4, pc}
	...

0800ba58 <__assert_func>:
 800ba58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <__assert_func+0x2c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4605      	mov	r5, r0
 800ba64:	68d8      	ldr	r0, [r3, #12]
 800ba66:	b14c      	cbz	r4, 800ba7c <__assert_func+0x24>
 800ba68:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <__assert_func+0x30>)
 800ba6a:	9100      	str	r1, [sp, #0]
 800ba6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba70:	4906      	ldr	r1, [pc, #24]	; (800ba8c <__assert_func+0x34>)
 800ba72:	462b      	mov	r3, r5
 800ba74:	f000 f94c 	bl	800bd10 <fiprintf>
 800ba78:	f000 f9a2 	bl	800bdc0 <abort>
 800ba7c:	4b04      	ldr	r3, [pc, #16]	; (800ba90 <__assert_func+0x38>)
 800ba7e:	461c      	mov	r4, r3
 800ba80:	e7f3      	b.n	800ba6a <__assert_func+0x12>
 800ba82:	bf00      	nop
 800ba84:	20000254 	.word	0x20000254
 800ba88:	0800c84b 	.word	0x0800c84b
 800ba8c:	0800c858 	.word	0x0800c858
 800ba90:	0800c886 	.word	0x0800c886

0800ba94 <_free_r>:
 800ba94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba96:	2900      	cmp	r1, #0
 800ba98:	d044      	beq.n	800bb24 <_free_r+0x90>
 800ba9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9e:	9001      	str	r0, [sp, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f1a1 0404 	sub.w	r4, r1, #4
 800baa6:	bfb8      	it	lt
 800baa8:	18e4      	addlt	r4, r4, r3
 800baaa:	f7ff fe1b 	bl	800b6e4 <__malloc_lock>
 800baae:	4a1e      	ldr	r2, [pc, #120]	; (800bb28 <_free_r+0x94>)
 800bab0:	9801      	ldr	r0, [sp, #4]
 800bab2:	6813      	ldr	r3, [r2, #0]
 800bab4:	b933      	cbnz	r3, 800bac4 <_free_r+0x30>
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	6014      	str	r4, [r2, #0]
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac0:	f7ff be16 	b.w	800b6f0 <__malloc_unlock>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d908      	bls.n	800bada <_free_r+0x46>
 800bac8:	6825      	ldr	r5, [r4, #0]
 800baca:	1961      	adds	r1, r4, r5
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf01      	itttt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	1949      	addeq	r1, r1, r5
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	e7ed      	b.n	800bab6 <_free_r+0x22>
 800bada:	461a      	mov	r2, r3
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	b10b      	cbz	r3, 800bae4 <_free_r+0x50>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d9fa      	bls.n	800bada <_free_r+0x46>
 800bae4:	6811      	ldr	r1, [r2, #0]
 800bae6:	1855      	adds	r5, r2, r1
 800bae8:	42a5      	cmp	r5, r4
 800baea:	d10b      	bne.n	800bb04 <_free_r+0x70>
 800baec:	6824      	ldr	r4, [r4, #0]
 800baee:	4421      	add	r1, r4
 800baf0:	1854      	adds	r4, r2, r1
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	6011      	str	r1, [r2, #0]
 800baf6:	d1e0      	bne.n	800baba <_free_r+0x26>
 800baf8:	681c      	ldr	r4, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	6053      	str	r3, [r2, #4]
 800bafe:	440c      	add	r4, r1
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	e7da      	b.n	800baba <_free_r+0x26>
 800bb04:	d902      	bls.n	800bb0c <_free_r+0x78>
 800bb06:	230c      	movs	r3, #12
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	e7d6      	b.n	800baba <_free_r+0x26>
 800bb0c:	6825      	ldr	r5, [r4, #0]
 800bb0e:	1961      	adds	r1, r4, r5
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf04      	itt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	bf04      	itt	eq
 800bb1c:	1949      	addeq	r1, r1, r5
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	6054      	str	r4, [r2, #4]
 800bb22:	e7ca      	b.n	800baba <_free_r+0x26>
 800bb24:	b003      	add	sp, #12
 800bb26:	bd30      	pop	{r4, r5, pc}
 800bb28:	20002eb8 	.word	0x20002eb8

0800bb2c <__sflush_r>:
 800bb2c:	898a      	ldrh	r2, [r1, #12]
 800bb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	0710      	lsls	r0, r2, #28
 800bb36:	460c      	mov	r4, r1
 800bb38:	d458      	bmi.n	800bbec <__sflush_r+0xc0>
 800bb3a:	684b      	ldr	r3, [r1, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dc05      	bgt.n	800bb4c <__sflush_r+0x20>
 800bb40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	dc02      	bgt.n	800bb4c <__sflush_r+0x20>
 800bb46:	2000      	movs	r0, #0
 800bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	d0f9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bb52:	2300      	movs	r3, #0
 800bb54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb58:	682f      	ldr	r7, [r5, #0]
 800bb5a:	6a21      	ldr	r1, [r4, #32]
 800bb5c:	602b      	str	r3, [r5, #0]
 800bb5e:	d032      	beq.n	800bbc6 <__sflush_r+0x9a>
 800bb60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	075a      	lsls	r2, r3, #29
 800bb66:	d505      	bpl.n	800bb74 <__sflush_r+0x48>
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	1ac0      	subs	r0, r0, r3
 800bb6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb6e:	b10b      	cbz	r3, 800bb74 <__sflush_r+0x48>
 800bb70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb72:	1ac0      	subs	r0, r0, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	4602      	mov	r2, r0
 800bb78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb7a:	6a21      	ldr	r1, [r4, #32]
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b0      	blx	r6
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	d106      	bne.n	800bb94 <__sflush_r+0x68>
 800bb86:	6829      	ldr	r1, [r5, #0]
 800bb88:	291d      	cmp	r1, #29
 800bb8a:	d82b      	bhi.n	800bbe4 <__sflush_r+0xb8>
 800bb8c:	4a29      	ldr	r2, [pc, #164]	; (800bc34 <__sflush_r+0x108>)
 800bb8e:	410a      	asrs	r2, r1
 800bb90:	07d6      	lsls	r6, r2, #31
 800bb92:	d427      	bmi.n	800bbe4 <__sflush_r+0xb8>
 800bb94:	2200      	movs	r2, #0
 800bb96:	6062      	str	r2, [r4, #4]
 800bb98:	04d9      	lsls	r1, r3, #19
 800bb9a:	6922      	ldr	r2, [r4, #16]
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	d504      	bpl.n	800bbaa <__sflush_r+0x7e>
 800bba0:	1c42      	adds	r2, r0, #1
 800bba2:	d101      	bne.n	800bba8 <__sflush_r+0x7c>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b903      	cbnz	r3, 800bbaa <__sflush_r+0x7e>
 800bba8:	6560      	str	r0, [r4, #84]	; 0x54
 800bbaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbac:	602f      	str	r7, [r5, #0]
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d0c9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bbb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb6:	4299      	cmp	r1, r3
 800bbb8:	d002      	beq.n	800bbc0 <__sflush_r+0x94>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7ff ff6a 	bl	800ba94 <_free_r>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bbc4:	e7c0      	b.n	800bb48 <__sflush_r+0x1c>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b0      	blx	r6
 800bbcc:	1c41      	adds	r1, r0, #1
 800bbce:	d1c8      	bne.n	800bb62 <__sflush_r+0x36>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0c5      	beq.n	800bb62 <__sflush_r+0x36>
 800bbd6:	2b1d      	cmp	r3, #29
 800bbd8:	d001      	beq.n	800bbde <__sflush_r+0xb2>
 800bbda:	2b16      	cmp	r3, #22
 800bbdc:	d101      	bne.n	800bbe2 <__sflush_r+0xb6>
 800bbde:	602f      	str	r7, [r5, #0]
 800bbe0:	e7b1      	b.n	800bb46 <__sflush_r+0x1a>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	e7ad      	b.n	800bb48 <__sflush_r+0x1c>
 800bbec:	690f      	ldr	r7, [r1, #16]
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	d0a9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bbf2:	0793      	lsls	r3, r2, #30
 800bbf4:	680e      	ldr	r6, [r1, #0]
 800bbf6:	bf08      	it	eq
 800bbf8:	694b      	ldreq	r3, [r1, #20]
 800bbfa:	600f      	str	r7, [r1, #0]
 800bbfc:	bf18      	it	ne
 800bbfe:	2300      	movne	r3, #0
 800bc00:	eba6 0807 	sub.w	r8, r6, r7
 800bc04:	608b      	str	r3, [r1, #8]
 800bc06:	f1b8 0f00 	cmp.w	r8, #0
 800bc0a:	dd9c      	ble.n	800bb46 <__sflush_r+0x1a>
 800bc0c:	6a21      	ldr	r1, [r4, #32]
 800bc0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc10:	4643      	mov	r3, r8
 800bc12:	463a      	mov	r2, r7
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b0      	blx	r6
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	dc06      	bgt.n	800bc2a <__sflush_r+0xfe>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc28:	e78e      	b.n	800bb48 <__sflush_r+0x1c>
 800bc2a:	4407      	add	r7, r0
 800bc2c:	eba8 0800 	sub.w	r8, r8, r0
 800bc30:	e7e9      	b.n	800bc06 <__sflush_r+0xda>
 800bc32:	bf00      	nop
 800bc34:	dfbffffe 	.word	0xdfbffffe

0800bc38 <_fflush_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	690b      	ldr	r3, [r1, #16]
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	b913      	cbnz	r3, 800bc48 <_fflush_r+0x10>
 800bc42:	2500      	movs	r5, #0
 800bc44:	4628      	mov	r0, r5
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	b118      	cbz	r0, 800bc52 <_fflush_r+0x1a>
 800bc4a:	6a03      	ldr	r3, [r0, #32]
 800bc4c:	b90b      	cbnz	r3, 800bc52 <_fflush_r+0x1a>
 800bc4e:	f7ff fe4d 	bl	800b8ec <__sinit>
 800bc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0f3      	beq.n	800bc42 <_fflush_r+0xa>
 800bc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc5c:	07d0      	lsls	r0, r2, #31
 800bc5e:	d404      	bmi.n	800bc6a <_fflush_r+0x32>
 800bc60:	0599      	lsls	r1, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_fflush_r+0x32>
 800bc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc66:	f7ff fee6 	bl	800ba36 <__retarget_lock_acquire_recursive>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f7ff ff5d 	bl	800bb2c <__sflush_r>
 800bc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc74:	07da      	lsls	r2, r3, #31
 800bc76:	4605      	mov	r5, r0
 800bc78:	d4e4      	bmi.n	800bc44 <_fflush_r+0xc>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	059b      	lsls	r3, r3, #22
 800bc7e:	d4e1      	bmi.n	800bc44 <_fflush_r+0xc>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f7ff fed9 	bl	800ba38 <__retarget_lock_release_recursive>
 800bc86:	e7dd      	b.n	800bc44 <_fflush_r+0xc>

0800bc88 <__sread>:
 800bc88:	b510      	push	{r4, lr}
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc90:	f000 f872 	bl	800bd78 <_read_r>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	bfab      	itete	ge
 800bc98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc9a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc9c:	181b      	addge	r3, r3, r0
 800bc9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bca2:	bfac      	ite	ge
 800bca4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bca6:	81a3      	strhlt	r3, [r4, #12]
 800bca8:	bd10      	pop	{r4, pc}

0800bcaa <__swrite>:
 800bcaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcae:	461f      	mov	r7, r3
 800bcb0:	898b      	ldrh	r3, [r1, #12]
 800bcb2:	05db      	lsls	r3, r3, #23
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	4616      	mov	r6, r2
 800bcba:	d505      	bpl.n	800bcc8 <__swrite+0x1e>
 800bcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc0:	2302      	movs	r3, #2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f000 f846 	bl	800bd54 <_lseek_r>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcd2:	81a3      	strh	r3, [r4, #12]
 800bcd4:	4632      	mov	r2, r6
 800bcd6:	463b      	mov	r3, r7
 800bcd8:	4628      	mov	r0, r5
 800bcda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcde:	f000 b85d 	b.w	800bd9c <_write_r>

0800bce2 <__sseek>:
 800bce2:	b510      	push	{r4, lr}
 800bce4:	460c      	mov	r4, r1
 800bce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcea:	f000 f833 	bl	800bd54 <_lseek_r>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	bf15      	itete	ne
 800bcf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcfe:	81a3      	strheq	r3, [r4, #12]
 800bd00:	bf18      	it	ne
 800bd02:	81a3      	strhne	r3, [r4, #12]
 800bd04:	bd10      	pop	{r4, pc}

0800bd06 <__sclose>:
 800bd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0a:	f000 b813 	b.w	800bd34 <_close_r>
	...

0800bd10 <fiprintf>:
 800bd10:	b40e      	push	{r1, r2, r3}
 800bd12:	b503      	push	{r0, r1, lr}
 800bd14:	4601      	mov	r1, r0
 800bd16:	ab03      	add	r3, sp, #12
 800bd18:	4805      	ldr	r0, [pc, #20]	; (800bd30 <fiprintf+0x20>)
 800bd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd1e:	6800      	ldr	r0, [r0, #0]
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	f000 f87d 	bl	800be20 <_vfiprintf_r>
 800bd26:	b002      	add	sp, #8
 800bd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd2c:	b003      	add	sp, #12
 800bd2e:	4770      	bx	lr
 800bd30:	20000254 	.word	0x20000254

0800bd34 <_close_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d06      	ldr	r5, [pc, #24]	; (800bd50 <_close_r+0x1c>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7ff facb 	bl	800b2da <_close>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_close_r+0x1a>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_close_r+0x1a>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20003000 	.word	0x20003000

0800bd54 <_lseek_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	; (800bd74 <_lseek_r+0x20>)
 800bd58:	4604      	mov	r4, r0
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	2200      	movs	r2, #0
 800bd60:	602a      	str	r2, [r5, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	f7ff fae0 	bl	800b328 <_lseek>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_lseek_r+0x1e>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_lseek_r+0x1e>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	20003000 	.word	0x20003000

0800bd78 <_read_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	; (800bd98 <_read_r+0x20>)
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4608      	mov	r0, r1
 800bd80:	4611      	mov	r1, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	602a      	str	r2, [r5, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	f7ff fa6e 	bl	800b268 <_read>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d102      	bne.n	800bd96 <_read_r+0x1e>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	b103      	cbz	r3, 800bd96 <_read_r+0x1e>
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	20003000 	.word	0x20003000

0800bd9c <_write_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d07      	ldr	r5, [pc, #28]	; (800bdbc <_write_r+0x20>)
 800bda0:	4604      	mov	r4, r0
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	602a      	str	r2, [r5, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f7ff fa79 	bl	800b2a2 <_write>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_write_r+0x1e>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_write_r+0x1e>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	20003000 	.word	0x20003000

0800bdc0 <abort>:
 800bdc0:	b508      	push	{r3, lr}
 800bdc2:	2006      	movs	r0, #6
 800bdc4:	f000 fc18 	bl	800c5f8 <raise>
 800bdc8:	2001      	movs	r0, #1
 800bdca:	f7ff fa43 	bl	800b254 <_exit>

0800bdce <__sfputc_r>:
 800bdce:	6893      	ldr	r3, [r2, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	b410      	push	{r4}
 800bdd6:	6093      	str	r3, [r2, #8]
 800bdd8:	da08      	bge.n	800bdec <__sfputc_r+0x1e>
 800bdda:	6994      	ldr	r4, [r2, #24]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	db01      	blt.n	800bde4 <__sfputc_r+0x16>
 800bde0:	290a      	cmp	r1, #10
 800bde2:	d103      	bne.n	800bdec <__sfputc_r+0x1e>
 800bde4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde8:	f000 bac4 	b.w	800c374 <__swbuf_r>
 800bdec:	6813      	ldr	r3, [r2, #0]
 800bdee:	1c58      	adds	r0, r3, #1
 800bdf0:	6010      	str	r0, [r2, #0]
 800bdf2:	7019      	strb	r1, [r3, #0]
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <__sfputs_r>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	4614      	mov	r4, r2
 800be04:	18d5      	adds	r5, r2, r3
 800be06:	42ac      	cmp	r4, r5
 800be08:	d101      	bne.n	800be0e <__sfputs_r+0x12>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e007      	b.n	800be1e <__sfputs_r+0x22>
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	463a      	mov	r2, r7
 800be14:	4630      	mov	r0, r6
 800be16:	f7ff ffda 	bl	800bdce <__sfputc_r>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d1f3      	bne.n	800be06 <__sfputs_r+0xa>
 800be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be20 <_vfiprintf_r>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	460d      	mov	r5, r1
 800be26:	b09d      	sub	sp, #116	; 0x74
 800be28:	4614      	mov	r4, r2
 800be2a:	4698      	mov	r8, r3
 800be2c:	4606      	mov	r6, r0
 800be2e:	b118      	cbz	r0, 800be38 <_vfiprintf_r+0x18>
 800be30:	6a03      	ldr	r3, [r0, #32]
 800be32:	b90b      	cbnz	r3, 800be38 <_vfiprintf_r+0x18>
 800be34:	f7ff fd5a 	bl	800b8ec <__sinit>
 800be38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3a:	07d9      	lsls	r1, r3, #31
 800be3c:	d405      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d402      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be46:	f7ff fdf6 	bl	800ba36 <__retarget_lock_acquire_recursive>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	071b      	lsls	r3, r3, #28
 800be4e:	d501      	bpl.n	800be54 <_vfiprintf_r+0x34>
 800be50:	692b      	ldr	r3, [r5, #16]
 800be52:	b99b      	cbnz	r3, 800be7c <_vfiprintf_r+0x5c>
 800be54:	4629      	mov	r1, r5
 800be56:	4630      	mov	r0, r6
 800be58:	f000 faca 	bl	800c3f0 <__swsetup_r>
 800be5c:	b170      	cbz	r0, 800be7c <_vfiprintf_r+0x5c>
 800be5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be60:	07dc      	lsls	r4, r3, #31
 800be62:	d504      	bpl.n	800be6e <_vfiprintf_r+0x4e>
 800be64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be68:	b01d      	add	sp, #116	; 0x74
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	0598      	lsls	r0, r3, #22
 800be72:	d4f7      	bmi.n	800be64 <_vfiprintf_r+0x44>
 800be74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be76:	f7ff fddf 	bl	800ba38 <__retarget_lock_release_recursive>
 800be7a:	e7f3      	b.n	800be64 <_vfiprintf_r+0x44>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9309      	str	r3, [sp, #36]	; 0x24
 800be80:	2320      	movs	r3, #32
 800be82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be86:	f8cd 800c 	str.w	r8, [sp, #12]
 800be8a:	2330      	movs	r3, #48	; 0x30
 800be8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c040 <_vfiprintf_r+0x220>
 800be90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be94:	f04f 0901 	mov.w	r9, #1
 800be98:	4623      	mov	r3, r4
 800be9a:	469a      	mov	sl, r3
 800be9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea0:	b10a      	cbz	r2, 800bea6 <_vfiprintf_r+0x86>
 800bea2:	2a25      	cmp	r2, #37	; 0x25
 800bea4:	d1f9      	bne.n	800be9a <_vfiprintf_r+0x7a>
 800bea6:	ebba 0b04 	subs.w	fp, sl, r4
 800beaa:	d00b      	beq.n	800bec4 <_vfiprintf_r+0xa4>
 800beac:	465b      	mov	r3, fp
 800beae:	4622      	mov	r2, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ffa2 	bl	800bdfc <__sfputs_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	f000 80a9 	beq.w	800c010 <_vfiprintf_r+0x1f0>
 800bebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec0:	445a      	add	r2, fp
 800bec2:	9209      	str	r2, [sp, #36]	; 0x24
 800bec4:	f89a 3000 	ldrb.w	r3, [sl]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80a1 	beq.w	800c010 <_vfiprintf_r+0x1f0>
 800bece:	2300      	movs	r3, #0
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed8:	f10a 0a01 	add.w	sl, sl, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	9307      	str	r3, [sp, #28]
 800bee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bee4:	931a      	str	r3, [sp, #104]	; 0x68
 800bee6:	4654      	mov	r4, sl
 800bee8:	2205      	movs	r2, #5
 800beea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beee:	4854      	ldr	r0, [pc, #336]	; (800c040 <_vfiprintf_r+0x220>)
 800bef0:	f7f4 f96e 	bl	80001d0 <memchr>
 800bef4:	9a04      	ldr	r2, [sp, #16]
 800bef6:	b9d8      	cbnz	r0, 800bf30 <_vfiprintf_r+0x110>
 800bef8:	06d1      	lsls	r1, r2, #27
 800befa:	bf44      	itt	mi
 800befc:	2320      	movmi	r3, #32
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf02:	0713      	lsls	r3, r2, #28
 800bf04:	bf44      	itt	mi
 800bf06:	232b      	movmi	r3, #43	; 0x2b
 800bf08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf10:	2b2a      	cmp	r3, #42	; 0x2a
 800bf12:	d015      	beq.n	800bf40 <_vfiprintf_r+0x120>
 800bf14:	9a07      	ldr	r2, [sp, #28]
 800bf16:	4654      	mov	r4, sl
 800bf18:	2000      	movs	r0, #0
 800bf1a:	f04f 0c0a 	mov.w	ip, #10
 800bf1e:	4621      	mov	r1, r4
 800bf20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf24:	3b30      	subs	r3, #48	; 0x30
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d94d      	bls.n	800bfc6 <_vfiprintf_r+0x1a6>
 800bf2a:	b1b0      	cbz	r0, 800bf5a <_vfiprintf_r+0x13a>
 800bf2c:	9207      	str	r2, [sp, #28]
 800bf2e:	e014      	b.n	800bf5a <_vfiprintf_r+0x13a>
 800bf30:	eba0 0308 	sub.w	r3, r0, r8
 800bf34:	fa09 f303 	lsl.w	r3, r9, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	46a2      	mov	sl, r4
 800bf3e:	e7d2      	b.n	800bee6 <_vfiprintf_r+0xc6>
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	1d19      	adds	r1, r3, #4
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	9103      	str	r1, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfbb      	ittet	lt
 800bf4c:	425b      	neglt	r3, r3
 800bf4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf52:	9307      	strge	r3, [sp, #28]
 800bf54:	9307      	strlt	r3, [sp, #28]
 800bf56:	bfb8      	it	lt
 800bf58:	9204      	strlt	r2, [sp, #16]
 800bf5a:	7823      	ldrb	r3, [r4, #0]
 800bf5c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf5e:	d10c      	bne.n	800bf7a <_vfiprintf_r+0x15a>
 800bf60:	7863      	ldrb	r3, [r4, #1]
 800bf62:	2b2a      	cmp	r3, #42	; 0x2a
 800bf64:	d134      	bne.n	800bfd0 <_vfiprintf_r+0x1b0>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	1d1a      	adds	r2, r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	9203      	str	r2, [sp, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfb8      	it	lt
 800bf72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf76:	3402      	adds	r4, #2
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c050 <_vfiprintf_r+0x230>
 800bf7e:	7821      	ldrb	r1, [r4, #0]
 800bf80:	2203      	movs	r2, #3
 800bf82:	4650      	mov	r0, sl
 800bf84:	f7f4 f924 	bl	80001d0 <memchr>
 800bf88:	b138      	cbz	r0, 800bf9a <_vfiprintf_r+0x17a>
 800bf8a:	9b04      	ldr	r3, [sp, #16]
 800bf8c:	eba0 000a 	sub.w	r0, r0, sl
 800bf90:	2240      	movs	r2, #64	; 0x40
 800bf92:	4082      	lsls	r2, r0
 800bf94:	4313      	orrs	r3, r2
 800bf96:	3401      	adds	r4, #1
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9e:	4829      	ldr	r0, [pc, #164]	; (800c044 <_vfiprintf_r+0x224>)
 800bfa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfa4:	2206      	movs	r2, #6
 800bfa6:	f7f4 f913 	bl	80001d0 <memchr>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d03f      	beq.n	800c02e <_vfiprintf_r+0x20e>
 800bfae:	4b26      	ldr	r3, [pc, #152]	; (800c048 <_vfiprintf_r+0x228>)
 800bfb0:	bb1b      	cbnz	r3, 800bffa <_vfiprintf_r+0x1da>
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	3307      	adds	r3, #7
 800bfb6:	f023 0307 	bic.w	r3, r3, #7
 800bfba:	3308      	adds	r3, #8
 800bfbc:	9303      	str	r3, [sp, #12]
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	443b      	add	r3, r7
 800bfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc4:	e768      	b.n	800be98 <_vfiprintf_r+0x78>
 800bfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfca:	460c      	mov	r4, r1
 800bfcc:	2001      	movs	r0, #1
 800bfce:	e7a6      	b.n	800bf1e <_vfiprintf_r+0xfe>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	3401      	adds	r4, #1
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f04f 0c0a 	mov.w	ip, #10
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe2:	3a30      	subs	r2, #48	; 0x30
 800bfe4:	2a09      	cmp	r2, #9
 800bfe6:	d903      	bls.n	800bff0 <_vfiprintf_r+0x1d0>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0c6      	beq.n	800bf7a <_vfiprintf_r+0x15a>
 800bfec:	9105      	str	r1, [sp, #20]
 800bfee:	e7c4      	b.n	800bf7a <_vfiprintf_r+0x15a>
 800bff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bff4:	4604      	mov	r4, r0
 800bff6:	2301      	movs	r3, #1
 800bff8:	e7f0      	b.n	800bfdc <_vfiprintf_r+0x1bc>
 800bffa:	ab03      	add	r3, sp, #12
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	462a      	mov	r2, r5
 800c000:	4b12      	ldr	r3, [pc, #72]	; (800c04c <_vfiprintf_r+0x22c>)
 800c002:	a904      	add	r1, sp, #16
 800c004:	4630      	mov	r0, r6
 800c006:	f3af 8000 	nop.w
 800c00a:	4607      	mov	r7, r0
 800c00c:	1c78      	adds	r0, r7, #1
 800c00e:	d1d6      	bne.n	800bfbe <_vfiprintf_r+0x19e>
 800c010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d405      	bmi.n	800c022 <_vfiprintf_r+0x202>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	059a      	lsls	r2, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_vfiprintf_r+0x202>
 800c01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01e:	f7ff fd0b 	bl	800ba38 <__retarget_lock_release_recursive>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	065b      	lsls	r3, r3, #25
 800c026:	f53f af1d 	bmi.w	800be64 <_vfiprintf_r+0x44>
 800c02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c02c:	e71c      	b.n	800be68 <_vfiprintf_r+0x48>
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <_vfiprintf_r+0x22c>)
 800c036:	a904      	add	r1, sp, #16
 800c038:	4630      	mov	r0, r6
 800c03a:	f000 f879 	bl	800c130 <_printf_i>
 800c03e:	e7e4      	b.n	800c00a <_vfiprintf_r+0x1ea>
 800c040:	0800c887 	.word	0x0800c887
 800c044:	0800c891 	.word	0x0800c891
 800c048:	00000000 	.word	0x00000000
 800c04c:	0800bdfd 	.word	0x0800bdfd
 800c050:	0800c88d 	.word	0x0800c88d

0800c054 <_printf_common>:
 800c054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c058:	4616      	mov	r6, r2
 800c05a:	4699      	mov	r9, r3
 800c05c:	688a      	ldr	r2, [r1, #8]
 800c05e:	690b      	ldr	r3, [r1, #16]
 800c060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c064:	4293      	cmp	r3, r2
 800c066:	bfb8      	it	lt
 800c068:	4613      	movlt	r3, r2
 800c06a:	6033      	str	r3, [r6, #0]
 800c06c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c070:	4607      	mov	r7, r0
 800c072:	460c      	mov	r4, r1
 800c074:	b10a      	cbz	r2, 800c07a <_printf_common+0x26>
 800c076:	3301      	adds	r3, #1
 800c078:	6033      	str	r3, [r6, #0]
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	0699      	lsls	r1, r3, #26
 800c07e:	bf42      	ittt	mi
 800c080:	6833      	ldrmi	r3, [r6, #0]
 800c082:	3302      	addmi	r3, #2
 800c084:	6033      	strmi	r3, [r6, #0]
 800c086:	6825      	ldr	r5, [r4, #0]
 800c088:	f015 0506 	ands.w	r5, r5, #6
 800c08c:	d106      	bne.n	800c09c <_printf_common+0x48>
 800c08e:	f104 0a19 	add.w	sl, r4, #25
 800c092:	68e3      	ldr	r3, [r4, #12]
 800c094:	6832      	ldr	r2, [r6, #0]
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	42ab      	cmp	r3, r5
 800c09a:	dc26      	bgt.n	800c0ea <_printf_common+0x96>
 800c09c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0a0:	1e13      	subs	r3, r2, #0
 800c0a2:	6822      	ldr	r2, [r4, #0]
 800c0a4:	bf18      	it	ne
 800c0a6:	2301      	movne	r3, #1
 800c0a8:	0692      	lsls	r2, r2, #26
 800c0aa:	d42b      	bmi.n	800c104 <_printf_common+0xb0>
 800c0ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	47c0      	blx	r8
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	d01e      	beq.n	800c0f8 <_printf_common+0xa4>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	6922      	ldr	r2, [r4, #16]
 800c0be:	f003 0306 	and.w	r3, r3, #6
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	bf02      	ittt	eq
 800c0c6:	68e5      	ldreq	r5, [r4, #12]
 800c0c8:	6833      	ldreq	r3, [r6, #0]
 800c0ca:	1aed      	subeq	r5, r5, r3
 800c0cc:	68a3      	ldr	r3, [r4, #8]
 800c0ce:	bf0c      	ite	eq
 800c0d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0d4:	2500      	movne	r5, #0
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	bfc4      	itt	gt
 800c0da:	1a9b      	subgt	r3, r3, r2
 800c0dc:	18ed      	addgt	r5, r5, r3
 800c0de:	2600      	movs	r6, #0
 800c0e0:	341a      	adds	r4, #26
 800c0e2:	42b5      	cmp	r5, r6
 800c0e4:	d11a      	bne.n	800c11c <_printf_common+0xc8>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e008      	b.n	800c0fc <_printf_common+0xa8>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	4652      	mov	r2, sl
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	47c0      	blx	r8
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d103      	bne.n	800c100 <_printf_common+0xac>
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c100:	3501      	adds	r5, #1
 800c102:	e7c6      	b.n	800c092 <_printf_common+0x3e>
 800c104:	18e1      	adds	r1, r4, r3
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	2030      	movs	r0, #48	; 0x30
 800c10a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c10e:	4422      	add	r2, r4
 800c110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c118:	3302      	adds	r3, #2
 800c11a:	e7c7      	b.n	800c0ac <_printf_common+0x58>
 800c11c:	2301      	movs	r3, #1
 800c11e:	4622      	mov	r2, r4
 800c120:	4649      	mov	r1, r9
 800c122:	4638      	mov	r0, r7
 800c124:	47c0      	blx	r8
 800c126:	3001      	adds	r0, #1
 800c128:	d0e6      	beq.n	800c0f8 <_printf_common+0xa4>
 800c12a:	3601      	adds	r6, #1
 800c12c:	e7d9      	b.n	800c0e2 <_printf_common+0x8e>
	...

0800c130 <_printf_i>:
 800c130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c134:	7e0f      	ldrb	r7, [r1, #24]
 800c136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c138:	2f78      	cmp	r7, #120	; 0x78
 800c13a:	4691      	mov	r9, r2
 800c13c:	4680      	mov	r8, r0
 800c13e:	460c      	mov	r4, r1
 800c140:	469a      	mov	sl, r3
 800c142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c146:	d807      	bhi.n	800c158 <_printf_i+0x28>
 800c148:	2f62      	cmp	r7, #98	; 0x62
 800c14a:	d80a      	bhi.n	800c162 <_printf_i+0x32>
 800c14c:	2f00      	cmp	r7, #0
 800c14e:	f000 80d4 	beq.w	800c2fa <_printf_i+0x1ca>
 800c152:	2f58      	cmp	r7, #88	; 0x58
 800c154:	f000 80c0 	beq.w	800c2d8 <_printf_i+0x1a8>
 800c158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c15c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c160:	e03a      	b.n	800c1d8 <_printf_i+0xa8>
 800c162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c166:	2b15      	cmp	r3, #21
 800c168:	d8f6      	bhi.n	800c158 <_printf_i+0x28>
 800c16a:	a101      	add	r1, pc, #4	; (adr r1, 800c170 <_printf_i+0x40>)
 800c16c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c170:	0800c1c9 	.word	0x0800c1c9
 800c174:	0800c1dd 	.word	0x0800c1dd
 800c178:	0800c159 	.word	0x0800c159
 800c17c:	0800c159 	.word	0x0800c159
 800c180:	0800c159 	.word	0x0800c159
 800c184:	0800c159 	.word	0x0800c159
 800c188:	0800c1dd 	.word	0x0800c1dd
 800c18c:	0800c159 	.word	0x0800c159
 800c190:	0800c159 	.word	0x0800c159
 800c194:	0800c159 	.word	0x0800c159
 800c198:	0800c159 	.word	0x0800c159
 800c19c:	0800c2e1 	.word	0x0800c2e1
 800c1a0:	0800c209 	.word	0x0800c209
 800c1a4:	0800c29b 	.word	0x0800c29b
 800c1a8:	0800c159 	.word	0x0800c159
 800c1ac:	0800c159 	.word	0x0800c159
 800c1b0:	0800c303 	.word	0x0800c303
 800c1b4:	0800c159 	.word	0x0800c159
 800c1b8:	0800c209 	.word	0x0800c209
 800c1bc:	0800c159 	.word	0x0800c159
 800c1c0:	0800c159 	.word	0x0800c159
 800c1c4:	0800c2a3 	.word	0x0800c2a3
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	1d1a      	adds	r2, r3, #4
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	602a      	str	r2, [r5, #0]
 800c1d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e09f      	b.n	800c31c <_printf_i+0x1ec>
 800c1dc:	6820      	ldr	r0, [r4, #0]
 800c1de:	682b      	ldr	r3, [r5, #0]
 800c1e0:	0607      	lsls	r7, r0, #24
 800c1e2:	f103 0104 	add.w	r1, r3, #4
 800c1e6:	6029      	str	r1, [r5, #0]
 800c1e8:	d501      	bpl.n	800c1ee <_printf_i+0xbe>
 800c1ea:	681e      	ldr	r6, [r3, #0]
 800c1ec:	e003      	b.n	800c1f6 <_printf_i+0xc6>
 800c1ee:	0646      	lsls	r6, r0, #25
 800c1f0:	d5fb      	bpl.n	800c1ea <_printf_i+0xba>
 800c1f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	da03      	bge.n	800c202 <_printf_i+0xd2>
 800c1fa:	232d      	movs	r3, #45	; 0x2d
 800c1fc:	4276      	negs	r6, r6
 800c1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c202:	485a      	ldr	r0, [pc, #360]	; (800c36c <_printf_i+0x23c>)
 800c204:	230a      	movs	r3, #10
 800c206:	e012      	b.n	800c22e <_printf_i+0xfe>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	6820      	ldr	r0, [r4, #0]
 800c20c:	1d19      	adds	r1, r3, #4
 800c20e:	6029      	str	r1, [r5, #0]
 800c210:	0605      	lsls	r5, r0, #24
 800c212:	d501      	bpl.n	800c218 <_printf_i+0xe8>
 800c214:	681e      	ldr	r6, [r3, #0]
 800c216:	e002      	b.n	800c21e <_printf_i+0xee>
 800c218:	0641      	lsls	r1, r0, #25
 800c21a:	d5fb      	bpl.n	800c214 <_printf_i+0xe4>
 800c21c:	881e      	ldrh	r6, [r3, #0]
 800c21e:	4853      	ldr	r0, [pc, #332]	; (800c36c <_printf_i+0x23c>)
 800c220:	2f6f      	cmp	r7, #111	; 0x6f
 800c222:	bf0c      	ite	eq
 800c224:	2308      	moveq	r3, #8
 800c226:	230a      	movne	r3, #10
 800c228:	2100      	movs	r1, #0
 800c22a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c22e:	6865      	ldr	r5, [r4, #4]
 800c230:	60a5      	str	r5, [r4, #8]
 800c232:	2d00      	cmp	r5, #0
 800c234:	bfa2      	ittt	ge
 800c236:	6821      	ldrge	r1, [r4, #0]
 800c238:	f021 0104 	bicge.w	r1, r1, #4
 800c23c:	6021      	strge	r1, [r4, #0]
 800c23e:	b90e      	cbnz	r6, 800c244 <_printf_i+0x114>
 800c240:	2d00      	cmp	r5, #0
 800c242:	d04b      	beq.n	800c2dc <_printf_i+0x1ac>
 800c244:	4615      	mov	r5, r2
 800c246:	fbb6 f1f3 	udiv	r1, r6, r3
 800c24a:	fb03 6711 	mls	r7, r3, r1, r6
 800c24e:	5dc7      	ldrb	r7, [r0, r7]
 800c250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c254:	4637      	mov	r7, r6
 800c256:	42bb      	cmp	r3, r7
 800c258:	460e      	mov	r6, r1
 800c25a:	d9f4      	bls.n	800c246 <_printf_i+0x116>
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d10b      	bne.n	800c278 <_printf_i+0x148>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	07de      	lsls	r6, r3, #31
 800c264:	d508      	bpl.n	800c278 <_printf_i+0x148>
 800c266:	6923      	ldr	r3, [r4, #16]
 800c268:	6861      	ldr	r1, [r4, #4]
 800c26a:	4299      	cmp	r1, r3
 800c26c:	bfde      	ittt	le
 800c26e:	2330      	movle	r3, #48	; 0x30
 800c270:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c274:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c278:	1b52      	subs	r2, r2, r5
 800c27a:	6122      	str	r2, [r4, #16]
 800c27c:	f8cd a000 	str.w	sl, [sp]
 800c280:	464b      	mov	r3, r9
 800c282:	aa03      	add	r2, sp, #12
 800c284:	4621      	mov	r1, r4
 800c286:	4640      	mov	r0, r8
 800c288:	f7ff fee4 	bl	800c054 <_printf_common>
 800c28c:	3001      	adds	r0, #1
 800c28e:	d14a      	bne.n	800c326 <_printf_i+0x1f6>
 800c290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c294:	b004      	add	sp, #16
 800c296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	f043 0320 	orr.w	r3, r3, #32
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	4833      	ldr	r0, [pc, #204]	; (800c370 <_printf_i+0x240>)
 800c2a4:	2778      	movs	r7, #120	; 0x78
 800c2a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	6829      	ldr	r1, [r5, #0]
 800c2ae:	061f      	lsls	r7, r3, #24
 800c2b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2b4:	d402      	bmi.n	800c2bc <_printf_i+0x18c>
 800c2b6:	065f      	lsls	r7, r3, #25
 800c2b8:	bf48      	it	mi
 800c2ba:	b2b6      	uxthmi	r6, r6
 800c2bc:	07df      	lsls	r7, r3, #31
 800c2be:	bf48      	it	mi
 800c2c0:	f043 0320 	orrmi.w	r3, r3, #32
 800c2c4:	6029      	str	r1, [r5, #0]
 800c2c6:	bf48      	it	mi
 800c2c8:	6023      	strmi	r3, [r4, #0]
 800c2ca:	b91e      	cbnz	r6, 800c2d4 <_printf_i+0x1a4>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	f023 0320 	bic.w	r3, r3, #32
 800c2d2:	6023      	str	r3, [r4, #0]
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	e7a7      	b.n	800c228 <_printf_i+0xf8>
 800c2d8:	4824      	ldr	r0, [pc, #144]	; (800c36c <_printf_i+0x23c>)
 800c2da:	e7e4      	b.n	800c2a6 <_printf_i+0x176>
 800c2dc:	4615      	mov	r5, r2
 800c2de:	e7bd      	b.n	800c25c <_printf_i+0x12c>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	6826      	ldr	r6, [r4, #0]
 800c2e4:	6961      	ldr	r1, [r4, #20]
 800c2e6:	1d18      	adds	r0, r3, #4
 800c2e8:	6028      	str	r0, [r5, #0]
 800c2ea:	0635      	lsls	r5, r6, #24
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	d501      	bpl.n	800c2f4 <_printf_i+0x1c4>
 800c2f0:	6019      	str	r1, [r3, #0]
 800c2f2:	e002      	b.n	800c2fa <_printf_i+0x1ca>
 800c2f4:	0670      	lsls	r0, r6, #25
 800c2f6:	d5fb      	bpl.n	800c2f0 <_printf_i+0x1c0>
 800c2f8:	8019      	strh	r1, [r3, #0]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6123      	str	r3, [r4, #16]
 800c2fe:	4615      	mov	r5, r2
 800c300:	e7bc      	b.n	800c27c <_printf_i+0x14c>
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	1d1a      	adds	r2, r3, #4
 800c306:	602a      	str	r2, [r5, #0]
 800c308:	681d      	ldr	r5, [r3, #0]
 800c30a:	6862      	ldr	r2, [r4, #4]
 800c30c:	2100      	movs	r1, #0
 800c30e:	4628      	mov	r0, r5
 800c310:	f7f3 ff5e 	bl	80001d0 <memchr>
 800c314:	b108      	cbz	r0, 800c31a <_printf_i+0x1ea>
 800c316:	1b40      	subs	r0, r0, r5
 800c318:	6060      	str	r0, [r4, #4]
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	6123      	str	r3, [r4, #16]
 800c31e:	2300      	movs	r3, #0
 800c320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c324:	e7aa      	b.n	800c27c <_printf_i+0x14c>
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	462a      	mov	r2, r5
 800c32a:	4649      	mov	r1, r9
 800c32c:	4640      	mov	r0, r8
 800c32e:	47d0      	blx	sl
 800c330:	3001      	adds	r0, #1
 800c332:	d0ad      	beq.n	800c290 <_printf_i+0x160>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	079b      	lsls	r3, r3, #30
 800c338:	d413      	bmi.n	800c362 <_printf_i+0x232>
 800c33a:	68e0      	ldr	r0, [r4, #12]
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	4298      	cmp	r0, r3
 800c340:	bfb8      	it	lt
 800c342:	4618      	movlt	r0, r3
 800c344:	e7a6      	b.n	800c294 <_printf_i+0x164>
 800c346:	2301      	movs	r3, #1
 800c348:	4632      	mov	r2, r6
 800c34a:	4649      	mov	r1, r9
 800c34c:	4640      	mov	r0, r8
 800c34e:	47d0      	blx	sl
 800c350:	3001      	adds	r0, #1
 800c352:	d09d      	beq.n	800c290 <_printf_i+0x160>
 800c354:	3501      	adds	r5, #1
 800c356:	68e3      	ldr	r3, [r4, #12]
 800c358:	9903      	ldr	r1, [sp, #12]
 800c35a:	1a5b      	subs	r3, r3, r1
 800c35c:	42ab      	cmp	r3, r5
 800c35e:	dcf2      	bgt.n	800c346 <_printf_i+0x216>
 800c360:	e7eb      	b.n	800c33a <_printf_i+0x20a>
 800c362:	2500      	movs	r5, #0
 800c364:	f104 0619 	add.w	r6, r4, #25
 800c368:	e7f5      	b.n	800c356 <_printf_i+0x226>
 800c36a:	bf00      	nop
 800c36c:	0800c898 	.word	0x0800c898
 800c370:	0800c8a9 	.word	0x0800c8a9

0800c374 <__swbuf_r>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	460e      	mov	r6, r1
 800c378:	4614      	mov	r4, r2
 800c37a:	4605      	mov	r5, r0
 800c37c:	b118      	cbz	r0, 800c386 <__swbuf_r+0x12>
 800c37e:	6a03      	ldr	r3, [r0, #32]
 800c380:	b90b      	cbnz	r3, 800c386 <__swbuf_r+0x12>
 800c382:	f7ff fab3 	bl	800b8ec <__sinit>
 800c386:	69a3      	ldr	r3, [r4, #24]
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	071a      	lsls	r2, r3, #28
 800c38e:	d525      	bpl.n	800c3dc <__swbuf_r+0x68>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	b31b      	cbz	r3, 800c3dc <__swbuf_r+0x68>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	6922      	ldr	r2, [r4, #16]
 800c398:	1a98      	subs	r0, r3, r2
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	b2f6      	uxtb	r6, r6
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	4637      	mov	r7, r6
 800c3a2:	dc04      	bgt.n	800c3ae <__swbuf_r+0x3a>
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f7ff fc46 	bl	800bc38 <_fflush_r>
 800c3ac:	b9e0      	cbnz	r0, 800c3e8 <__swbuf_r+0x74>
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	6022      	str	r2, [r4, #0]
 800c3ba:	701e      	strb	r6, [r3, #0]
 800c3bc:	6962      	ldr	r2, [r4, #20]
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d004      	beq.n	800c3ce <__swbuf_r+0x5a>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	07db      	lsls	r3, r3, #31
 800c3c8:	d506      	bpl.n	800c3d8 <__swbuf_r+0x64>
 800c3ca:	2e0a      	cmp	r6, #10
 800c3cc:	d104      	bne.n	800c3d8 <__swbuf_r+0x64>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f7ff fc31 	bl	800bc38 <_fflush_r>
 800c3d6:	b938      	cbnz	r0, 800c3e8 <__swbuf_r+0x74>
 800c3d8:	4638      	mov	r0, r7
 800c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 f806 	bl	800c3f0 <__swsetup_r>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0d5      	beq.n	800c394 <__swbuf_r+0x20>
 800c3e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c3ec:	e7f4      	b.n	800c3d8 <__swbuf_r+0x64>
	...

0800c3f0 <__swsetup_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4b2a      	ldr	r3, [pc, #168]	; (800c49c <__swsetup_r+0xac>)
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	b118      	cbz	r0, 800c404 <__swsetup_r+0x14>
 800c3fc:	6a03      	ldr	r3, [r0, #32]
 800c3fe:	b90b      	cbnz	r3, 800c404 <__swsetup_r+0x14>
 800c400:	f7ff fa74 	bl	800b8ec <__sinit>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40a:	0718      	lsls	r0, r3, #28
 800c40c:	d422      	bmi.n	800c454 <__swsetup_r+0x64>
 800c40e:	06d9      	lsls	r1, r3, #27
 800c410:	d407      	bmi.n	800c422 <__swsetup_r+0x32>
 800c412:	2309      	movs	r3, #9
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c420:	e034      	b.n	800c48c <__swsetup_r+0x9c>
 800c422:	0758      	lsls	r0, r3, #29
 800c424:	d512      	bpl.n	800c44c <__swsetup_r+0x5c>
 800c426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c428:	b141      	cbz	r1, 800c43c <__swsetup_r+0x4c>
 800c42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c42e:	4299      	cmp	r1, r3
 800c430:	d002      	beq.n	800c438 <__swsetup_r+0x48>
 800c432:	4628      	mov	r0, r5
 800c434:	f7ff fb2e 	bl	800ba94 <_free_r>
 800c438:	2300      	movs	r3, #0
 800c43a:	6363      	str	r3, [r4, #52]	; 0x34
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	2300      	movs	r3, #0
 800c446:	6063      	str	r3, [r4, #4]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f043 0308 	orr.w	r3, r3, #8
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	b94b      	cbnz	r3, 800c46c <__swsetup_r+0x7c>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c462:	d003      	beq.n	800c46c <__swsetup_r+0x7c>
 800c464:	4621      	mov	r1, r4
 800c466:	4628      	mov	r0, r5
 800c468:	f000 f840 	bl	800c4ec <__smakebuf_r>
 800c46c:	89a0      	ldrh	r0, [r4, #12]
 800c46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c472:	f010 0301 	ands.w	r3, r0, #1
 800c476:	d00a      	beq.n	800c48e <__swsetup_r+0x9e>
 800c478:	2300      	movs	r3, #0
 800c47a:	60a3      	str	r3, [r4, #8]
 800c47c:	6963      	ldr	r3, [r4, #20]
 800c47e:	425b      	negs	r3, r3
 800c480:	61a3      	str	r3, [r4, #24]
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	b943      	cbnz	r3, 800c498 <__swsetup_r+0xa8>
 800c486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c48a:	d1c4      	bne.n	800c416 <__swsetup_r+0x26>
 800c48c:	bd38      	pop	{r3, r4, r5, pc}
 800c48e:	0781      	lsls	r1, r0, #30
 800c490:	bf58      	it	pl
 800c492:	6963      	ldrpl	r3, [r4, #20]
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	e7f4      	b.n	800c482 <__swsetup_r+0x92>
 800c498:	2000      	movs	r0, #0
 800c49a:	e7f7      	b.n	800c48c <__swsetup_r+0x9c>
 800c49c:	20000254 	.word	0x20000254

0800c4a0 <__swhatbuf_r>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	b096      	sub	sp, #88	; 0x58
 800c4ac:	4615      	mov	r5, r2
 800c4ae:	461e      	mov	r6, r3
 800c4b0:	da0d      	bge.n	800c4ce <__swhatbuf_r+0x2e>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c4b8:	f04f 0100 	mov.w	r1, #0
 800c4bc:	bf0c      	ite	eq
 800c4be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c4c2:	2340      	movne	r3, #64	; 0x40
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	6031      	str	r1, [r6, #0]
 800c4c8:	602b      	str	r3, [r5, #0]
 800c4ca:	b016      	add	sp, #88	; 0x58
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	466a      	mov	r2, sp
 800c4d0:	f000 f848 	bl	800c564 <_fstat_r>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	dbec      	blt.n	800c4b2 <__swhatbuf_r+0x12>
 800c4d8:	9901      	ldr	r1, [sp, #4]
 800c4da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4e2:	4259      	negs	r1, r3
 800c4e4:	4159      	adcs	r1, r3
 800c4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ea:	e7eb      	b.n	800c4c4 <__swhatbuf_r+0x24>

0800c4ec <__smakebuf_r>:
 800c4ec:	898b      	ldrh	r3, [r1, #12]
 800c4ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4f0:	079d      	lsls	r5, r3, #30
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	d507      	bpl.n	800c508 <__smakebuf_r+0x1c>
 800c4f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	2301      	movs	r3, #1
 800c502:	6163      	str	r3, [r4, #20]
 800c504:	b002      	add	sp, #8
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	ab01      	add	r3, sp, #4
 800c50a:	466a      	mov	r2, sp
 800c50c:	f7ff ffc8 	bl	800c4a0 <__swhatbuf_r>
 800c510:	9900      	ldr	r1, [sp, #0]
 800c512:	4605      	mov	r5, r0
 800c514:	4630      	mov	r0, r6
 800c516:	f7ff f865 	bl	800b5e4 <_malloc_r>
 800c51a:	b948      	cbnz	r0, 800c530 <__smakebuf_r+0x44>
 800c51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c520:	059a      	lsls	r2, r3, #22
 800c522:	d4ef      	bmi.n	800c504 <__smakebuf_r+0x18>
 800c524:	f023 0303 	bic.w	r3, r3, #3
 800c528:	f043 0302 	orr.w	r3, r3, #2
 800c52c:	81a3      	strh	r3, [r4, #12]
 800c52e:	e7e3      	b.n	800c4f8 <__smakebuf_r+0xc>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	6020      	str	r0, [r4, #0]
 800c534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c538:	81a3      	strh	r3, [r4, #12]
 800c53a:	9b00      	ldr	r3, [sp, #0]
 800c53c:	6163      	str	r3, [r4, #20]
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	6120      	str	r0, [r4, #16]
 800c542:	b15b      	cbz	r3, 800c55c <__smakebuf_r+0x70>
 800c544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c548:	4630      	mov	r0, r6
 800c54a:	f000 f81d 	bl	800c588 <_isatty_r>
 800c54e:	b128      	cbz	r0, 800c55c <__smakebuf_r+0x70>
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f023 0303 	bic.w	r3, r3, #3
 800c556:	f043 0301 	orr.w	r3, r3, #1
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	431d      	orrs	r5, r3
 800c560:	81a5      	strh	r5, [r4, #12]
 800c562:	e7cf      	b.n	800c504 <__smakebuf_r+0x18>

0800c564 <_fstat_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	; (800c584 <_fstat_r+0x20>)
 800c568:	2300      	movs	r3, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f7fe febe 	bl	800b2f2 <_fstat>
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	d102      	bne.n	800c580 <_fstat_r+0x1c>
 800c57a:	682b      	ldr	r3, [r5, #0]
 800c57c:	b103      	cbz	r3, 800c580 <_fstat_r+0x1c>
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	bf00      	nop
 800c584:	20003000 	.word	0x20003000

0800c588 <_isatty_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d06      	ldr	r5, [pc, #24]	; (800c5a4 <_isatty_r+0x1c>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	602b      	str	r3, [r5, #0]
 800c594:	f7fe febd 	bl	800b312 <_isatty>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_isatty_r+0x1a>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_isatty_r+0x1a>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	20003000 	.word	0x20003000

0800c5a8 <_raise_r>:
 800c5a8:	291f      	cmp	r1, #31
 800c5aa:	b538      	push	{r3, r4, r5, lr}
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	460d      	mov	r5, r1
 800c5b0:	d904      	bls.n	800c5bc <_raise_r+0x14>
 800c5b2:	2316      	movs	r3, #22
 800c5b4:	6003      	str	r3, [r0, #0]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5be:	b112      	cbz	r2, 800c5c6 <_raise_r+0x1e>
 800c5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5c4:	b94b      	cbnz	r3, 800c5da <_raise_r+0x32>
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 f830 	bl	800c62c <_getpid_r>
 800c5cc:	462a      	mov	r2, r5
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5d6:	f000 b817 	b.w	800c608 <_kill_r>
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d00a      	beq.n	800c5f4 <_raise_r+0x4c>
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	d103      	bne.n	800c5ea <_raise_r+0x42>
 800c5e2:	2316      	movs	r3, #22
 800c5e4:	6003      	str	r3, [r0, #0]
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	e7e7      	b.n	800c5ba <_raise_r+0x12>
 800c5ea:	2400      	movs	r4, #0
 800c5ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	4798      	blx	r3
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7e0      	b.n	800c5ba <_raise_r+0x12>

0800c5f8 <raise>:
 800c5f8:	4b02      	ldr	r3, [pc, #8]	; (800c604 <raise+0xc>)
 800c5fa:	4601      	mov	r1, r0
 800c5fc:	6818      	ldr	r0, [r3, #0]
 800c5fe:	f7ff bfd3 	b.w	800c5a8 <_raise_r>
 800c602:	bf00      	nop
 800c604:	20000254 	.word	0x20000254

0800c608 <_kill_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	; (800c628 <_kill_r+0x20>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	f7fe fe0d 	bl	800b234 <_kill>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d102      	bne.n	800c624 <_kill_r+0x1c>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b103      	cbz	r3, 800c624 <_kill_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	bf00      	nop
 800c628:	20003000 	.word	0x20003000

0800c62c <_getpid_r>:
 800c62c:	f7fe bdfa 	b.w	800b224 <_getpid>

0800c630 <_gettimeofday>:
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <_gettimeofday+0xc>)
 800c632:	2258      	movs	r2, #88	; 0x58
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c63a:	4770      	bx	lr
 800c63c:	20003000 	.word	0x20003000

0800c640 <_init>:
 800c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c642:	bf00      	nop
 800c644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c646:	bc08      	pop	{r3}
 800c648:	469e      	mov	lr, r3
 800c64a:	4770      	bx	lr

0800c64c <_fini>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	bf00      	nop
 800c650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c652:	bc08      	pop	{r3}
 800c654:	469e      	mov	lr, r3
 800c656:	4770      	bx	lr
