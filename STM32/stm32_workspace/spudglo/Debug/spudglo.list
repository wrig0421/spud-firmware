
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800c6c4  0800c6c4  0001c6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd80  0800cd80  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd80  0800cd80  0001cd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd88  0800cd88  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd88  0800cd88  0001cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800cd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d3c  200002d4  0800d064  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003010  0800d064  00023010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000282e8  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f2b  00000000  00000000  0004862f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0004e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000195f  00000000  00000000  00050650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a87f  00000000  00000000  00051faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c98d  00000000  00000000  0007c82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f86bf  00000000  00000000  000a91bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009230  00000000  00000000  001a187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001aaaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6ac 	.word	0x0800c6ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800c6ac 	.word	0x0800c6ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
//p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <current_monitor_set+0x3c>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d503      	bpl.n	8000dce <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <current_monitor_set+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000dcc:	e003      	b.n	8000dd6 <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <current_monitor_set+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <current_monitor_set+0x40>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200002f0 	.word	0x200002f0
 8000de8:	20000000 	.word	0x20000000

08000dec <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <current_monitor_ratio+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000000 	.word	0x20000000

08000e08 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e0c:	e009      	b.n	8000e22 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <current_monitor_init+0x68>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e74 <current_monitor_init+0x6c>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <current_monitor_init+0x68>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <current_monitor_init+0x68>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e78 <current_monitor_init+0x70>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e7c <current_monitor_init+0x74>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dce3      	bgt.n	8000e0e <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <current_monitor_init+0x68>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	d800      	bhi.n	8000e58 <current_monitor_init+0x50>
 8000e56:	e7fe      	b.n	8000e56 <current_monitor_init+0x4e>
    g_max_current_ratio = 0.1f;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <current_monitor_init+0x68>)
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <current_monitor_init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <current_monitor_init+0x68>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <current_monitor_init+0x7c>)
 8000e64:	6013      	str	r3, [r2, #0]

}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000000 	.word	0x20000000
 8000e74:	3d4ccccd 	.word	0x3d4ccccd
 8000e78:	3d23d70a 	.word	0x3d23d70a
 8000e7c:	42080000 	.word	0x42080000
 8000e80:	3dcccccd 	.word	0x3dcccccd
 8000e84:	200002f0 	.word	0x200002f0

08000e88 <animate_led_wheel>:
extern uint32_t g_max_strip_length;
extern uint16_t g_all_strip_mask;


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    // red, green, blue (3 primary colors)
    // 8 bit colors..  Max value is 255
    // make a wheel, split it into 3 primary colors (85 positions per section)
    // increment wheel position.  After 85 steps passed then move to next primary color
    // this creates a rainbow effect. Reset wheel position to the section.
    if (wheel_pos < 85)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b54      	cmp	r3, #84	; 0x54
 8000e96:	d813      	bhi.n	8000ec0 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	0052      	lsls	r2, r2, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <animate_led_wheel+0xa8>)
 8000ea4:	701a      	strb	r2, [r3, #0]
        c[1] = UINT8_MAX - (wheel_pos * 3);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <animate_led_wheel+0xa8>)
 8000eb6:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <animate_led_wheel+0xa8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	709a      	strb	r2, [r3, #2]
 8000ebe:	e02f      	b.n	8000f20 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2ba9      	cmp	r3, #169	; 0xa9
 8000ec4:	d816      	bhi.n	8000ef4 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	3b55      	subs	r3, #85	; 0x55
 8000eca:	71fb      	strb	r3, [r7, #7]
        c[0] = UINT8_MAX - (wheel_pos * 3);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <animate_led_wheel+0xa8>)
 8000edc:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <animate_led_wheel+0xa8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	0052      	lsls	r2, r2, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <animate_led_wheel+0xa8>)
 8000ef0:	709a      	strb	r2, [r3, #2]
 8000ef2:	e015      	b.n	8000f20 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3356      	adds	r3, #86	; 0x56
 8000ef8:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <animate_led_wheel+0xa8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	461a      	mov	r2, r3
 8000f04:	0052      	lsls	r2, r2, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <animate_led_wheel+0xa8>)
 8000f0c:	705a      	strb	r2, [r3, #1]
        c[2] = UINT8_MAX - (wheel_pos * 3);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	461a      	mov	r2, r3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <animate_led_wheel+0xa8>)
 8000f1e:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <animate_led_wheel+0xa8>)
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200002f4 	.word	0x200002f4

08000f34 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
    if (STRIP_NUM_1 & strip_mask)
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <animate_led_show_strip+0x1a>
    {
        ws2812b_show_strip_one();
 8000f4a:	f000 ffbd 	bl	8001ec8 <ws2812b_show_strip_one>
    }
    if (STRIP_NUM_2 & strip_mask)
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <animate_led_show_strip+0x2a>
    {
        ws2812b_show_strip_two();
 8000f5a:	f000 ffbc 	bl	8001ed6 <ws2812b_show_strip_two>
    }
    if (STRIP_NUM_3 & strip_mask)
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <animate_led_show_strip+0x3a>
    {
        ws2812b_show_strip_three();
 8000f6a:	f000 ffbb 	bl	8001ee4 <ws2812b_show_strip_three>
    }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af02      	add	r7, sp, #8
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
 8000f90:	4613      	mov	r3, r2
 8000f92:	70bb      	strb	r3, [r7, #2]
    if (STRIP_NUM_1 & mask)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d010      	beq.n	8000fc2 <animate_led_set_pixel+0x4c>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_1, pixel))
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fe21 	bl	8001bec <ws2812_pixel_is_in_strip_range>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <animate_led_set_pixel+0x4c>
		{
			 ws2812b_set_led(STRIP_NUM_1, pixel, red, green, blue);
 8000fb0:	78b8      	ldrb	r0, [r7, #2]
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	88b9      	ldrh	r1, [r7, #4]
 8000fb6:	7e3b      	ldrb	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fe49 	bl	8001c54 <ws2812b_set_led>
		}
    }
    if (STRIP_NUM_2 & mask)
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d010      	beq.n	8000ff0 <animate_led_set_pixel+0x7a>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_2, pixel))
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f000 fe0a 	bl	8001bec <ws2812_pixel_is_in_strip_range>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <animate_led_set_pixel+0x7a>
		{
			 ws2812b_set_led(STRIP_NUM_2, pixel, red, green, blue);
 8000fde:	78b8      	ldrb	r0, [r7, #2]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	7e3b      	ldrb	r3, [r7, #24]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2002      	movs	r0, #2
 8000fec:	f000 fe32 	bl	8001c54 <ws2812b_set_led>
		}
    }
    if (STRIP_NUM_3 & mask)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d010      	beq.n	800101e <animate_led_set_pixel+0xa8>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_3, pixel))
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	4619      	mov	r1, r3
 8001000:	2004      	movs	r0, #4
 8001002:	f000 fdf3 	bl	8001bec <ws2812_pixel_is_in_strip_range>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <animate_led_set_pixel+0xa8>
		{
			 ws2812b_set_led(STRIP_NUM_3, pixel, red, green, blue);
 800100c:	78b8      	ldrb	r0, [r7, #2]
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	88b9      	ldrh	r1, [r7, #4]
 8001012:	7e3b      	ldrb	r3, [r7, #24]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4603      	mov	r3, r0
 8001018:	2004      	movs	r0, #4
 800101a:	f000 fe1b 	bl	8001c54 <ws2812b_set_led>
		}
    }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b087      	sub	sp, #28
 800102a:	af02      	add	r7, sp, #8
 800102c:	4604      	mov	r4, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4623      	mov	r3, r4
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4603      	mov	r3, r0
 800103a:	717b      	strb	r3, [r7, #5]
 800103c:	460b      	mov	r3, r1
 800103e:	713b      	strb	r3, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	813b      	strh	r3, [r7, #8]

    if (STRIP_NUM_1 & mask)
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <animate_led_set_all_pixels+0x5e>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 fd4b 	bl	8001af0 <ws2812_get_strip_size>
 800105a:	4603      	mov	r3, r0
 800105c:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_1, yyy, red, green, blue);
 800105e:	2300      	movs	r3, #0
 8001060:	81fb      	strh	r3, [r7, #14]
 8001062:	e00b      	b.n	800107c <animate_led_set_all_pixels+0x56>
 8001064:	7938      	ldrb	r0, [r7, #4]
 8001066:	797a      	ldrb	r2, [r7, #5]
 8001068:	89f9      	ldrh	r1, [r7, #14]
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4603      	mov	r3, r0
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fdef 	bl	8001c54 <ws2812b_set_led>
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	3301      	adds	r3, #1
 800107a:	81fb      	strh	r3, [r7, #14]
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3ef      	bcc.n	8001064 <animate_led_set_all_pixels+0x3e>
    }
    if (STRIP_NUM_2 & mask)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	b29b      	uxth	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d017      	beq.n	80010c0 <animate_led_set_all_pixels+0x9a>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_2);
 8001090:	2002      	movs	r0, #2
 8001092:	f000 fd2d 	bl	8001af0 <ws2812_get_strip_size>
 8001096:	4603      	mov	r3, r0
 8001098:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_2, yyy, red, green, blue);
 800109a:	2300      	movs	r3, #0
 800109c:	81bb      	strh	r3, [r7, #12]
 800109e:	e00b      	b.n	80010b8 <animate_led_set_all_pixels+0x92>
 80010a0:	7938      	ldrb	r0, [r7, #4]
 80010a2:	797a      	ldrb	r2, [r7, #5]
 80010a4:	89b9      	ldrh	r1, [r7, #12]
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	4603      	mov	r3, r0
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 fdd1 	bl	8001c54 <ws2812b_set_led>
 80010b2:	89bb      	ldrh	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	81bb      	strh	r3, [r7, #12]
 80010b8:	89ba      	ldrh	r2, [r7, #12]
 80010ba:	893b      	ldrh	r3, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3ef      	bcc.n	80010a0 <animate_led_set_all_pixels+0x7a>
    }
    if (STRIP_NUM_3 & mask)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d017      	beq.n	80010fc <animate_led_set_all_pixels+0xd6>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_3);
 80010cc:	2004      	movs	r0, #4
 80010ce:	f000 fd0f 	bl	8001af0 <ws2812_get_strip_size>
 80010d2:	4603      	mov	r3, r0
 80010d4:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_3, yyy, red, green, blue);
 80010d6:	2300      	movs	r3, #0
 80010d8:	817b      	strh	r3, [r7, #10]
 80010da:	e00b      	b.n	80010f4 <animate_led_set_all_pixels+0xce>
 80010dc:	7938      	ldrb	r0, [r7, #4]
 80010de:	797a      	ldrb	r2, [r7, #5]
 80010e0:	8979      	ldrh	r1, [r7, #10]
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4603      	mov	r3, r0
 80010e8:	2004      	movs	r0, #4
 80010ea:	f000 fdb3 	bl	8001c54 <ws2812b_set_led>
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	3301      	adds	r3, #1
 80010f2:	817b      	strh	r3, [r7, #10]
 80010f4:	897a      	ldrh	r2, [r7, #10]
 80010f6:	893b      	ldrh	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3ef      	bcc.n	80010dc <animate_led_set_all_pixels+0xb6>
    }
    animate_led_show_strip(mask);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff18 	bl	8000f34 <animate_led_show_strip>
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}

0800110c <animate_led_solid_custom_color>:


void animate_led_solid_custom_color(const strip_mask_t mask, const color_hex_code_e color)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	80fb      	strh	r3, [r7, #6]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <animate_led_solid_custom_color+0x40>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	81bb      	strh	r3, [r7, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f000 fca1 	bl	8001a70 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask, color_rgb[offsetof(ws2812b_led_t, red)], \
 800112e:	7b39      	ldrb	r1, [r7, #12]
 8001130:	7b7a      	ldrb	r2, [r7, #13]
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	88f8      	ldrh	r0, [r7, #6]
 8001136:	f7ff ff76 	bl	8001026 <animate_led_set_all_pixels>
    		color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fef9 	bl	8000f34 <animate_led_show_strip>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	0800c6c4 	.word	0x0800c6c4

08001150 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_ALL_SET, 0, 0, 0);
 8001154:	2300      	movs	r3, #0
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2007      	movs	r0, #7
 800115c:	f7ff ff63 	bl	8001026 <animate_led_set_all_pixels>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <animate_led_only_spell_word>:


void animate_led_only_spell_word(const strip_mask_t mask, const color_hex_code_e color,
                                 const uint16_t time_ms)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	ed2d 8b02 	vpush	{d8}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fcfc 	bl	8001b78 <ws2812_led_get_max_strip_size>
 8001180:	4603      	mov	r3, r0
 8001182:	827b      	strh	r3, [r7, #18]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <animate_led_only_spell_word+0xbc>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	81bb      	strh	r3, [r7, #12]
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f000 fc6b 	bl	8001a70 <color_led_hex_to_rgb>
	for (int iii = 0; iii < strip_size; iii++)
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e034      	b.n	800120a <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 80011a0:	f000 fef0 	bl	8001f84 <task_button_press_interrupt_occurred>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	1c9a      	adds	r2, r3, #2
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	1c59      	adds	r1, r3, #1
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 ff42 	bl	8002044 <task_button_press_check_interrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d126      	bne.n	8001214 <animate_led_only_spell_word+0xb0>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, iii,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	b299      	uxth	r1, r3
 80011ca:	7b3a      	ldrb	r2, [r7, #12]
 80011cc:	7b7c      	ldrb	r4, [r7, #13]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	88f8      	ldrh	r0, [r7, #6]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7ff fece 	bl	8000f76 <animate_led_set_pixel>
        		color_rgb[offsetof(ws2812b_led_t, red)],
				color_rgb[offsetof(ws2812b_led_t, green)],
				color_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask);
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fea9 	bl	8000f34 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011ec:	f001 fb52 	bl	8002894 <task_led_ctrl_speed>
 80011f0:	eeb0 7a40 	vmov.f32	s14, s0
 80011f4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80011f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f001 f9e5 	bl	80025ce <task_led_ctrl_delay>
	for (int iii = 0; iii < strip_size; iii++)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	8a7b      	ldrh	r3, [r7, #18]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	429a      	cmp	r2, r3
 8001210:	dbc6      	blt.n	80011a0 <animate_led_only_spell_word+0x3c>
 8001212:	e000      	b.n	8001216 <animate_led_only_spell_word+0xb2>
                return;
 8001214:	bf00      	nop
	}
}
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	ecbd 8b02 	vpop	{d8}
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	0800c6c4 	.word	0x0800c6c4

08001224 <animate_led_fade_in_fade_out>:


void animate_led_fade_in_fade_out(const strip_mask_t mask, const color_hex_code_e color)
{
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001230:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <animate_led_fade_in_fade_out+0x27c>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	823b      	strh	r3, [r7, #16]
 8001236:	2300      	movs	r3, #0
 8001238:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color, color_rgb);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f000 fc15 	bl	8001a70 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e08b      	b.n	8001364 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 800124c:	f000 fe9a 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00e      	beq.n	8001274 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	1c9a      	adds	r2, r3, #2
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	1c59      	adds	r1, r3, #1
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4618      	mov	r0, r3
 8001268:	f000 feec 	bl	8002044 <task_button_press_check_interrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 810f 	bne.w	8001492 <animate_led_fade_in_fade_out+0x26e>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 8001274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001276:	f7ff f94d 	bl	8000514 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b89      	ldr	r3, [pc, #548]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 8001280:	f7ff fadc 	bl	800083c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	7c3b      	ldrb	r3, [r7, #16]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f940 	bl	8000514 <__aeabi_i2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7ff f9a4 	bl	80005e8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fbb0 	bl	8000a0c <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 80012b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b2:	f7ff f92f 	bl	8000514 <__aeabi_i2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 80012bc:	f7ff fabe 	bl	800083c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	461d      	mov	r5, r3
 80012c8:	7c7b      	ldrb	r3, [r7, #17]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f922 	bl	8000514 <__aeabi_i2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff f986 	bl	80005e8 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fb92 	bl	8000a0c <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 80012ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ee:	f7ff f911 	bl	8000514 <__aeabi_i2d>
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 80012f8:	f7ff faa0 	bl	800083c <__aeabi_ddiv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4614      	mov	r4, r2
 8001302:	461d      	mov	r5, r3
 8001304:	7cbb      	ldrb	r3, [r7, #18]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f904 	bl	8000514 <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f968 	bl	80005e8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fb74 	bl	8000a0c <__aeabi_d2f>
 8001324:	4603      	mov	r3, r0
 8001326:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 8001328:	edd7 7a07 	vldr	s15, [r7, #28]
 800132c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001330:	edc7 7a01 	vstr	s15, [r7, #4]
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	b2d9      	uxtb	r1, r3
 8001338:	edd7 7a06 	vldr	s15, [r7, #24]
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	edc7 7a01 	vstr	s15, [r7, #4]
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001350:	edc7 7a01 	vstr	s15, [r7, #4]
 8001354:	793b      	ldrb	r3, [r7, #4]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	89f8      	ldrh	r0, [r7, #14]
 800135a:	f7ff fe64 	bl	8001026 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	f77f af70 	ble.w	800124c <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	e08a      	b.n	8001488 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001372:	f000 fe07 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00d      	beq.n	8001398 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	1c9a      	adds	r2, r3, #2
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	1c59      	adds	r1, r3, #1
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fe59 	bl	8002044 <task_button_press_check_interrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d17e      	bne.n	8001496 <animate_led_fade_in_fade_out+0x272>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 8001398:	6a38      	ldr	r0, [r7, #32]
 800139a:	f7ff f8bb 	bl	8000514 <__aeabi_i2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 80013a4:	f7ff fa4a 	bl	800083c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4614      	mov	r4, r2
 80013ae:	461d      	mov	r5, r3
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8ae 	bl	8000514 <__aeabi_i2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f912 	bl	80005e8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fb1e 	bl	8000a0c <__aeabi_d2f>
 80013d0:	4603      	mov	r3, r0
 80013d2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 80013d4:	6a38      	ldr	r0, [r7, #32]
 80013d6:	f7ff f89d 	bl	8000514 <__aeabi_i2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 80013e0:	f7ff fa2c 	bl	800083c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4614      	mov	r4, r2
 80013ea:	461d      	mov	r5, r3
 80013ec:	7c7b      	ldrb	r3, [r7, #17]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f890 	bl	8000514 <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7ff f8f4 	bl	80005e8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb00 	bl	8000a0c <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 8001410:	6a38      	ldr	r0, [r7, #32]
 8001412:	f7ff f87f 	bl	8000514 <__aeabi_i2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <animate_led_fade_in_fade_out+0x280>)
 800141c:	f7ff fa0e 	bl	800083c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	461d      	mov	r5, r3
 8001428:	7cbb      	ldrb	r3, [r7, #18]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f872 	bl	8000514 <__aeabi_i2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4620      	mov	r0, r4
 8001436:	4629      	mov	r1, r5
 8001438:	f7ff f8d6 	bl	80005e8 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fae2 	bl	8000a0c <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 800144c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001454:	edc7 7a01 	vstr	s15, [r7, #4]
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	b2d9      	uxtb	r1, r3
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	edc7 7a01 	vstr	s15, [r7, #4]
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001474:	edc7 7a01 	vstr	s15, [r7, #4]
 8001478:	793b      	ldrb	r3, [r7, #4]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	89f8      	ldrh	r0, [r7, #14]
 800147e:	f7ff fdd2 	bl	8001026 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	3b02      	subs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f6bf af71 	bge.w	8001372 <animate_led_fade_in_fade_out+0x14e>
 8001490:	e002      	b.n	8001498 <animate_led_fade_in_fade_out+0x274>
                return;
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <animate_led_fade_in_fade_out+0x274>
                return;
 8001496:	bf00      	nop
    }
}
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800c6c4 	.word	0x0800c6c4
 80014a4:	40700000 	.word	0x40700000

080014a8 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t mask, const color_hex_code_e color, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	ed2d 8b02 	vpush	{d8}
 80014ae:	b08b      	sub	sp, #44	; 0x2c
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	4611      	mov	r1, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	81fb      	strh	r3, [r7, #14]
 80014bc:	460b      	mov	r3, r1
 80014be:	81bb      	strh	r3, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fb56 	bl	8001b78 <ws2812_led_get_max_strip_size>
 80014cc:	4603      	mov	r3, r0
 80014ce:	837b      	strh	r3, [r7, #26]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <animate_led_twinkle+0xe4>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	82bb      	strh	r3, [r7, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color, color_rgb);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f000 fac5 	bl	8001a70 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e043      	b.n	8001574 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 80014ec:	f000 fd4a 	bl	8001f84 <task_button_press_interrupt_occurred>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00d      	beq.n	8001512 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	1c9a      	adds	r2, r3, #2
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	1c59      	adds	r1, r3, #1
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fd9c 	bl	8002044 <task_button_press_check_interrupts>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d135      	bne.n	800157e <animate_led_twinkle+0xd6>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, random_num(0, strip_size),
 8001512:	8b7b      	ldrh	r3, [r7, #26]
 8001514:	4619      	mov	r1, r3
 8001516:	2000      	movs	r0, #0
 8001518:	f009 fffc 	bl	800b514 <random_num>
 800151c:	4603      	mov	r3, r0
 800151e:	b299      	uxth	r1, r3
 8001520:	7d3a      	ldrb	r2, [r7, #20]
 8001522:	7d7c      	ldrb	r4, [r7, #21]
 8001524:	7dbb      	ldrb	r3, [r7, #22]
 8001526:	89f8      	ldrh	r0, [r7, #14]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4623      	mov	r3, r4
 800152c:	f7ff fd23 	bl	8000f76 <animate_led_set_pixel>
                              (color_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(mask);
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fcfe 	bl	8000f34 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001542:	f001 f9a7 	bl	8002894 <task_led_ctrl_speed>
 8001546:	eeb0 7a40 	vmov.f32	s14, s0
 800154a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800154e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f001 f83a 	bl	80025ce <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(mask, 0, 0, 0);
 800155a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <animate_led_twinkle+0xc6>
 8001562:	89f8      	ldrh	r0, [r7, #14]
 8001564:	2300      	movs	r3, #0
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	f7ff fd5c 	bl	8001026 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbb7      	blt.n	80014ec <animate_led_twinkle+0x44>
 800157c:	e000      	b.n	8001580 <animate_led_twinkle+0xd8>
                return;
 800157e:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	ecbd 8b02 	vpop	{d8}
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	0800c6c4 	.word	0x0800c6c4

08001590 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask, const bool fill,
                                           const uint16_t speed_delay)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	ed2d 8b02 	vpush	{d8}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af02      	add	r7, sp, #8
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
 800159e:	460b      	mov	r3, r1
 80015a0:	717b      	strb	r3, [r7, #5]
 80015a2:	4613      	mov	r3, r2
 80015a4:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80015a6:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <animate_led_sparkle_only_random_color+0x120>)
 80015a8:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fae3 	bl	8001b78 <ws2812_led_get_max_strip_size>
 80015b2:	4603      	mov	r3, r0
 80015b4:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask);
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 faab 	bl	8001b14 <ws2812_get_num_active_animation_leds>
 80015be:	4603      	mov	r3, r0
 80015c0:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	83fb      	strh	r3, [r7, #30]
 80015c6:	e059      	b.n	800167c <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015c8:	f000 fcdc 	bl	8001f84 <task_button_press_interrupt_occurred>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <animate_led_sparkle_only_random_color+0x5a>
 80015d2:	f107 020d 	add.w	r2, r7, #13
 80015d6:	f107 010e 	add.w	r1, r7, #14
 80015da:	f107 030f 	add.w	r3, r7, #15
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fd30 	bl	8002044 <task_button_press_check_interrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d15c      	bne.n	80016a4 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	4619      	mov	r1, r3
 80015ee:	2000      	movs	r0, #0
 80015f0:	f009 ff90 	bl	800b514 <random_num>
 80015f4:	4603      	mov	r3, r0
 80015f6:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	b29c      	uxth	r4, r3
 80015fc:	21ff      	movs	r1, #255	; 0xff
 80015fe:	2000      	movs	r0, #0
 8001600:	f009 ff88 	bl	800b514 <random_num>
 8001604:	4603      	mov	r3, r0
 8001606:	b2dd      	uxtb	r5, r3
 8001608:	21ff      	movs	r1, #255	; 0xff
 800160a:	2000      	movs	r0, #0
 800160c:	f009 ff82 	bl	800b514 <random_num>
 8001610:	4603      	mov	r3, r0
 8001612:	b2de      	uxtb	r6, r3
 8001614:	21ff      	movs	r1, #255	; 0xff
 8001616:	2000      	movs	r0, #0
 8001618:	f009 ff7c 	bl	800b514 <random_num>
 800161c:	4603      	mov	r3, r0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	88f8      	ldrh	r0, [r7, #6]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4633      	mov	r3, r6
 8001626:	462a      	mov	r2, r5
 8001628:	4621      	mov	r1, r4
 800162a:	f7ff fca4 	bl	8000f76 <animate_led_set_pixel>
		animate_led_show_strip(mask);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fc7f 	bl	8000f34 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001640:	f001 f928 	bl	8002894 <task_led_ctrl_speed>
 8001644:	eeb0 7a40 	vmov.f32	s14, s0
 8001648:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800164c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001650:	ee17 0a90 	vmov	r0, s15
 8001654:	f000 ffbb 	bl	80025ce <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask, pix, 0, 0, 0);
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <animate_led_sparkle_only_random_color+0xe6>
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	b299      	uxth	r1, r3
 8001668:	88f8      	ldrh	r0, [r7, #6]
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2200      	movs	r2, #0
 8001672:	f7ff fc80 	bl	8000f76 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001676:	8bfb      	ldrh	r3, [r7, #30]
 8001678:	3301      	adds	r3, #1
 800167a:	83fb      	strh	r3, [r7, #30]
 800167c:	8bfb      	ldrh	r3, [r7, #30]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001686:	8abb      	ldrh	r3, [r7, #20]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001690:	edd7 7a06 	vldr	s15, [r7, #24]
 8001694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d492      	bmi.n	80015c8 <animate_led_sparkle_only_random_color+0x38>
 80016a2:	e000      	b.n	80016a6 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016a4:	bf00      	nop
	}
}
 80016a6:	3724      	adds	r7, #36	; 0x24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	ecbd 8b02 	vpop	{d8}
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	3f333333 	.word	0x3f333333

080016b4 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask, const uint16_t speed_delay)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	ed2d 8b02 	vpush	{d8}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	80fb      	strh	r3, [r7, #6]
 80016c4:	4613      	mov	r3, r2
 80016c6:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fa54 	bl	8001b78 <ws2812_led_get_max_strip_size>
 80016d0:	4603      	mov	r3, r0
 80016d2:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80016d4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016d8:	82bb      	strh	r3, [r7, #20]
 80016da:	e06c      	b.n	80017b6 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016dc:	f000 fc52 	bl	8001f84 <task_button_press_interrupt_occurred>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <animate_led_rainbow_cycle+0x4a>
 80016e6:	f107 0209 	add.w	r2, r7, #9
 80016ea:	f107 010a 	add.w	r1, r7, #10
 80016ee:	f107 030b 	add.w	r3, r7, #11
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fca6 	bl	8002044 <task_button_press_check_interrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d15f      	bne.n	80017be <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80016fe:	2300      	movs	r3, #0
 8001700:	82fb      	strh	r3, [r7, #22]
 8001702:	e02f      	b.n	8001764 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001704:	f000 fc3e 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <animate_led_rainbow_cycle+0x72>
 800170e:	f107 0209 	add.w	r2, r7, #9
 8001712:	f107 010a 	add.w	r1, r7, #10
 8001716:	f107 030b 	add.w	r3, r7, #11
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fc92 	bl	8002044 <task_button_press_check_interrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d14d      	bne.n	80017c2 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 8001726:	8afb      	ldrh	r3, [r7, #22]
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001730:	b2da      	uxtb	r2, r3
 8001732:	8abb      	ldrh	r3, [r7, #20]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fba4 	bl	8000e88 <animate_led_wheel>
 8001740:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask, iii, *c, *(c + 1), *(c + 2));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	781c      	ldrb	r4, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	8af9      	ldrh	r1, [r7, #22]
 8001754:	88f8      	ldrh	r0, [r7, #6]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4623      	mov	r3, r4
 800175a:	f7ff fc0c 	bl	8000f76 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 800175e:	8afb      	ldrh	r3, [r7, #22]
 8001760:	3301      	adds	r3, #1
 8001762:	82fb      	strh	r3, [r7, #22]
 8001764:	8afa      	ldrh	r2, [r7, #22]
 8001766:	8a7b      	ldrh	r3, [r7, #18]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3cb      	bcc.n	8001704 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fbe0 	bl	8000f34 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001774:	f001 f88e 	bl	8002894 <task_led_ctrl_speed>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d103      	bne.n	800178e <animate_led_rainbow_cycle+0xda>
 8001786:	2000      	movs	r0, #0
 8001788:	f000 ff21 	bl	80025ce <task_led_ctrl_delay>
 800178c:	e010      	b.n	80017b0 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001798:	f001 f87c 	bl	8002894 <task_led_ctrl_speed>
 800179c:	eeb0 7a40 	vmov.f32	s14, s0
 80017a0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 0a90 	vmov	r0, s15
 80017ac:	f000 ff0f 	bl	80025ce <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80017b0:	8abb      	ldrh	r3, [r7, #20]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	82bb      	strh	r3, [r7, #20]
 80017b6:	8abb      	ldrh	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d18f      	bne.n	80016dc <animate_led_rainbow_cycle+0x28>
 80017bc:	e002      	b.n	80017c4 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80017c2:	bf00      	nop
    }
}
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	ecbd 8b02 	vpop	{d8}
 80017cc:	bd90      	pop	{r4, r7, pc}
	...

080017d0 <animate_led_theater_chase>:


void animate_led_theater_chase(const strip_mask_t mask, const color_hex_code_e color,
                               const uint16_t speed_delay)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	ed2d 8b02 	vpush	{d8}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f9c6 	bl	8001b78 <ws2812_led_get_max_strip_size>
 80017ec:	4603      	mov	r3, r0
 80017ee:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80017f0:	4b47      	ldr	r3, [pc, #284]	; (8001910 <animate_led_theater_chase+0x140>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	813b      	strh	r3, [r7, #8]
 80017f6:	2300      	movs	r3, #0
 80017f8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color, color_theater_chase_rgb);
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f000 f935 	bl	8001a70 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e075      	b.n	80018f8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	e06c      	b.n	80018ec <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001812:	f000 fbb7 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	1c9a      	adds	r2, r3, #2
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	1c59      	adds	r1, r3, #1
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fc09 	bl	8002044 <task_button_press_check_interrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d163      	bne.n	8001900 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e010      	b.n	8001860 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask, iii + qqq,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	b29a      	uxth	r2, r3
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b299      	uxth	r1, r3
 800184a:	7a3a      	ldrb	r2, [r7, #8]
 800184c:	7a7c      	ldrb	r4, [r7, #9]
 800184e:	7abb      	ldrb	r3, [r7, #10]
 8001850:	88f8      	ldrh	r0, [r7, #6]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4623      	mov	r3, r4
 8001856:	f7ff fb8e 	bl	8000f76 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3303      	adds	r3, #3
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbea      	blt.n	800183e <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fb62 	bl	8000f34 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001870:	f000 fb88 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00d      	beq.n	8001896 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	1c9a      	adds	r2, r3, #2
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	1c59      	adds	r1, r3, #1
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fbda 	bl	8002044 <task_button_press_check_interrupts>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d136      	bne.n	8001904 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80018a0:	f000 fff8 	bl	8002894 <task_led_ctrl_speed>
 80018a4:	eeb0 7a40 	vmov.f32	s14, s0
 80018a8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f000 fe8b 	bl	80025ce <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e00f      	b.n	80018de <animate_led_theater_chase+0x10e>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	b299      	uxth	r1, r3
 80018ca:	88f8      	ldrh	r0, [r7, #6]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	f7ff fb4f 	bl	8000f76 <animate_led_set_pixel>
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	3303      	adds	r3, #3
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbeb      	blt.n	80018be <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	dd8f      	ble.n	8001812 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	dd86      	ble.n	800180c <animate_led_theater_chase+0x3c>
 80018fe:	e002      	b.n	8001906 <animate_led_theater_chase+0x136>
                    return;
 8001900:	bf00      	nop
 8001902:	e000      	b.n	8001906 <animate_led_theater_chase+0x136>
                    return;
 8001904:	bf00      	nop
        }
    }
}
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	ecbd 8b02 	vpop	{d8}
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	0800c6c4 	.word	0x0800c6c4

08001914 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask, const uint16_t speed_delay)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	ed2d 8b02 	vpush	{d8}
 800191a:	b08d      	sub	sp, #52	; 0x34
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	4613      	mov	r3, r2
 8001926:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f924 	bl	8001b78 <ws2812_led_get_max_strip_size>
 8001930:	4603      	mov	r3, r0
 8001932:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
 8001938:	e08a      	b.n	8001a50 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	e080      	b.n	8001a42 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001940:	f000 fb20 	bl	8001f84 <task_button_press_interrupt_occurred>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <animate_led_theater_chase_rainbow+0x4e>
 800194a:	f107 020d 	add.w	r2, r7, #13
 800194e:	f107 010e 	add.w	r1, r7, #14
 8001952:	f107 030f 	add.w	r3, r7, #15
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fb74 	bl	8002044 <task_button_press_check_interrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d17b      	bne.n	8001a5a <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e039      	b.n	80019dc <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001968:	f000 fb0c 	bl	8001f84 <task_button_press_interrupt_occurred>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <animate_led_theater_chase_rainbow+0x76>
 8001972:	f107 020d 	add.w	r2, r7, #13
 8001976:	f107 010e 	add.w	r1, r7, #14
 800197a:	f107 030f 	add.w	r3, r7, #15
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb60 	bl	8002044 <task_button_press_check_interrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d169      	bne.n	8001a5e <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	441a      	add	r2, r3
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <animate_led_theater_chase_rainbow+0x158>)
 8001992:	fb83 1302 	smull	r1, r3, r3, r2
 8001996:	4413      	add	r3, r2
 8001998:	11d9      	asrs	r1, r3, #7
 800199a:	17d3      	asrs	r3, r2, #31
 800199c:	1ac9      	subs	r1, r1, r3
 800199e:	460b      	mov	r3, r1
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	1a5b      	subs	r3, r3, r1
 80019a4:	1ad1      	subs	r1, r2, r3
 80019a6:	b2cb      	uxtb	r3, r1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa6d 	bl	8000e88 <animate_led_wheel>
 80019ae:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	b299      	uxth	r1, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3301      	adds	r3, #1
 80019c4:	781c      	ldrb	r4, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3302      	adds	r3, #2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	88f8      	ldrh	r0, [r7, #6]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4623      	mov	r3, r4
 80019d2:	f7ff fad0 	bl	8000f76 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3303      	adds	r3, #3
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	8afb      	ldrh	r3, [r7, #22]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbc1      	blt.n	8001968 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff faa4 	bl	8000f34 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019f6:	f000 ff4d 	bl	8002894 <task_led_ctrl_speed>
 80019fa:	eeb0 7a40 	vmov.f32	s14, s0
 80019fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a06:	ee17 0a90 	vmov	r0, s15
 8001a0a:	f000 fde0 	bl	80025ce <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	e00f      	b.n	8001a34 <animate_led_theater_chase_rainbow+0x120>
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	88f8      	ldrh	r0, [r7, #6]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f7ff faa4 	bl	8000f76 <animate_led_set_pixel>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3303      	adds	r3, #3
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbeb      	blt.n	8001a14 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f77f af7b 	ble.w	8001940 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	f77f af71 	ble.w	800193a <animate_led_theater_chase_rainbow+0x26>
 8001a58:	e002      	b.n	8001a60 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a5e:	bf00      	nop
        }
    }
}
 8001a60:	372c      	adds	r7, #44	; 0x2c
 8001a62:	46bd      	mov	sp, r7
 8001a64:	ecbd 8b02 	vpop	{d8}
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	80808081 	.word	0x80808081

08001a70 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0a1a      	lsrs	r2, r3, #8
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3302      	adds	r3, #2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <reset_ws2812b>:
 * @brief   Reset LED strip >= 50 microseconds of 0
 * @param   void
 * @return  void
 */
void reset_ws2812b(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
	// something needs to change here... This should be 3000
	uint8_t g_pwm_reset[50] = {0}; // 50 bytes on stack...
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	222e      	movs	r2, #46	; 0x2e
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f009 ff82 	bl	800b9c4 <memset>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001ac0:	1d3a      	adds	r2, r7, #4
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <reset_ws2812b+0x44>)
 8001ac8:	f006 f988 	bl	8007ddc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001acc:	1d3a      	adds	r2, r7, #4
 8001ace:	2332      	movs	r3, #50	; 0x32
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <reset_ws2812b+0x44>)
 8001ad4:	f006 f982 	bl	8007ddc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001ad8:	1d3a      	adds	r2, r7, #4
 8001ada:	2332      	movs	r3, #50	; 0x32
 8001adc:	2108      	movs	r1, #8
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <reset_ws2812b+0x44>)
 8001ae0:	f006 f97c 	bl	8007ddc <HAL_TIM_PWM_Start_DMA>
}
 8001ae4:	bf00      	nop
 8001ae6:	3738      	adds	r7, #56	; 0x38
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20001da8 	.word	0x20001da8

08001af0 <ws2812_get_strip_size>:
 * @brief   Return the size of the current strip
 * @param   void
 * @return  void
 */
uint16_t ws2812_get_strip_size(const strip_num_e strip_num)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	return g_ws2812b_info[strip_num].led_strip_length;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <ws2812_get_strip_size+0x20>)
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	889b      	ldrh	r3, [r3, #4]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	2000005c 	.word	0x2000005c

08001b14 <ws2812_get_num_active_animation_leds>:
 * @brief   Get the number of active LEDs in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  Number of active LEDs
 */
uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_1 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <ws2812_get_num_active_animation_leds+0x24>
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <ws2812_get_num_active_animation_leds+0x60>)
 8001b30:	899a      	ldrh	r2, [r3, #12]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	4413      	add	r3, r2
 8001b36:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_2 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <ws2812_get_num_active_animation_leds+0x3a>
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <ws2812_get_num_active_animation_leds+0x60>)
 8001b46:	8a9a      	ldrh	r2, [r3, #20]
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_3 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <ws2812_get_num_active_animation_leds+0x50>
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <ws2812_get_num_active_animation_leds+0x60>)
 8001b5c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	4413      	add	r3, r2
 8001b62:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000005c 	.word	0x2000005c

08001b78 <ws2812_led_get_max_strip_size>:
 * @brief   Return max strip size in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  The max strip size
 */
uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
	uint16_t max_strip_size = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <ws2812_led_get_max_strip_size+0x2a>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) \
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001b94:	899b      	ldrh	r3, [r3, #12]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001b96:	89fa      	ldrh	r2, [r7, #14]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d202      	bcs.n	8001ba2 <ws2812_led_get_max_strip_size+0x2a>
					max_strip_size = g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001b9e:	899b      	ldrh	r3, [r3, #12]
 8001ba0:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_2 & strip_mask) && \
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <ws2812_led_get_max_strip_size+0x46>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) \
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001bb0:	8a9b      	ldrh	r3, [r3, #20]
	if ((STRIP_NUM_2 & strip_mask) && \
 8001bb2:	89fa      	ldrh	r2, [r7, #14]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d202      	bcs.n	8001bbe <ws2812_led_get_max_strip_size+0x46>
					max_strip_size = g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001bba:	8a9b      	ldrh	r3, [r3, #20]
 8001bbc:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_3 & strip_mask) && \
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <ws2812_led_get_max_strip_size+0x62>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) \
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001bcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	if ((STRIP_NUM_3 & strip_mask) && \
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d202      	bcs.n	8001bda <ws2812_led_get_max_strip_size+0x62>
					max_strip_size = g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <ws2812_led_get_max_strip_size+0x70>)
 8001bd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bd8:	81fb      	strh	r3, [r7, #14]
	return max_strip_size;
 8001bda:	89fb      	ldrh	r3, [r7, #14]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	2000005c 	.word	0x2000005c

08001bec <ws2812_pixel_is_in_strip_range>:
 * @param   strip_bit: strip to check if pixel is in range
 * @param	pixel: LED # to check
 * @return  true if in range, else false
 */
bool ws2812_pixel_is_in_strip_range(const strip_num_e strip_num, const uint16_t pixel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
	if ((STRIP_NUM_1 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) return_val = true;
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <ws2812_pixel_is_in_strip_range+0x2a>
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c08:	899b      	ldrh	r3, [r3, #12]
 8001c0a:	88ba      	ldrh	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d202      	bcs.n	8001c16 <ws2812_pixel_is_in_strip_range+0x2a>
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e014      	b.n	8001c40 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_2 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) return_val = true;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d107      	bne.n	8001c2c <ws2812_pixel_is_in_strip_range+0x40>
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c1e:	8a9b      	ldrh	r3, [r3, #20]
 8001c20:	88ba      	ldrh	r2, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d202      	bcs.n	8001c2c <ws2812_pixel_is_in_strip_range+0x40>
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e009      	b.n	8001c40 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_3 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) return_val = true;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d106      	bne.n	8001c40 <ws2812_pixel_is_in_strip_range+0x54>
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <ws2812_pixel_is_in_strip_range+0x64>)
 8001c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c36:	88ba      	ldrh	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d201      	bcs.n	8001c40 <ws2812_pixel_is_in_strip_range+0x54>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
	return return_val;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	2000005c 	.word	0x2000005c

08001c54 <ws2812b_set_led>:
 * @param 	blue: 8 bit blue
 * @return  void
 */
void ws2812b_set_led(const strip_num_e strip_num, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001c54:	b490      	push	{r4, r7}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	4603      	mov	r3, r0
 8001c68:	81bb      	strh	r3, [r7, #12]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	73bb      	strb	r3, [r7, #14]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	72fb      	strb	r3, [r7, #11]
	(g_ws2812b_info[strip_num].led_strip + led_num)->red = red * g_max_current_ratio;
 8001c72:	7bbb      	ldrb	r3, [r7, #14]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <ws2812b_set_led+0xc4>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <ws2812b_set_led+0xc8>)
 8001c8a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001c8e:	89ba      	ldrh	r2, [r7, #12]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ca0:	793a      	ldrb	r2, [r7, #4]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
	(g_ws2812b_info[strip_num].led_strip + led_num)->green = green * g_max_current_ratio;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <ws2812b_set_led+0xc4>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <ws2812b_set_led+0xc8>)
 8001cbe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001cc2:	89ba      	ldrh	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cd4:	793a      	ldrb	r2, [r7, #4]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	705a      	strb	r2, [r3, #1]
	(g_ws2812b_info[strip_num].led_strip + led_num)->blue = blue * g_max_current_ratio;
 8001cda:	7e3b      	ldrb	r3, [r7, #24]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <ws2812b_set_led+0xc4>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <ws2812b_set_led+0xc8>)
 8001cf2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001cf6:	89ba      	ldrh	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d04:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d08:	793a      	ldrb	r2, [r7, #4]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	709a      	strb	r2, [r3, #2]
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc90      	pop	{r4, r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	2000005c 	.word	0x2000005c

08001d20 <ws2812b_fill_pwm_buffer_strip>:
 * @brief   Fill the PWM buffer for the strip num
 * @param   strip_num: PWM buffer pertaining to strip
 * @return  void
 */
void ws2812b_fill_pwm_buffer_strip(strip_num_e strip_num)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
    uint32_t color = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
    uint32_t timer_channel = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	827b      	strh	r3, [r7, #18]
 8001d36:	e050      	b.n	8001dda <ws2812b_fill_pwm_buffer_strip+0xba>
    {
    	// reconstruct 24 bit color...
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001d3c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001d40:	8a7a      	ldrh	r2, [r7, #18]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	0419      	lsls	r1, r3, #16
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a59      	ldr	r2, [pc, #356]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001d52:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001d56:	8a7a      	ldrh	r2, [r7, #18]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4403      	add	r3, r0
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001d64:	4319      	orrs	r1, r3
				(((g_ws2812b_info[strip_num].led_strip + iii)->blue));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a53      	ldr	r2, [pc, #332]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001d6a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001d6e:	8a7a      	ldrh	r2, [r7, #18]
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	4403      	add	r3, r0
 8001d78:	789b      	ldrb	r3, [r3, #2]
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001d7a:	430b      	orrs	r3, r1
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001d7c:	60bb      	str	r3, [r7, #8]
        // walk over each bit.. starting at msb
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	747b      	strb	r3, [r7, #17]
 8001d82:	e024      	b.n	8001dce <ws2812b_fill_pwm_buffer_strip+0xae>
        {
        	// if bit in color is set then fill w/ WS2812B_BIT_SET_CYCLES else WS2812B_BIT_RESET_CYCLES
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
            		(color & (1 << ((sizeof(ws2812b_led_t) * BITS_PER_BYTE) - 1 - yyy))) ? \
 8001d84:	7c7b      	ldrb	r3, [r7, #17]
 8001d86:	f1c3 0317 	rsb	r3, r3, #23
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4013      	ands	r3, r2
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <ws2812b_fill_pwm_buffer_strip+0x7e>
 8001d9a:	2028      	movs	r0, #40	; 0x28
 8001d9c:	e000      	b.n	8001da0 <ws2812b_fill_pwm_buffer_strip+0x80>
 8001d9e:	2014      	movs	r0, #20
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	88db      	ldrh	r3, [r3, #6]
 8001dae:	461c      	mov	r4, r3
 8001db0:	8a7a      	ldrh	r2, [r7, #18]
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	18e2      	adds	r2, r4, r3
 8001dbc:	7c7b      	ldrb	r3, [r7, #17]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001dc8:	7c7b      	ldrb	r3, [r7, #17]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	747b      	strb	r3, [r7, #17]
 8001dce:	7c7b      	ldrb	r3, [r7, #17]
 8001dd0:	2b17      	cmp	r3, #23
 8001dd2:	d9d7      	bls.n	8001d84 <ws2812b_fill_pwm_buffer_strip+0x64>
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001dd4:	8a7b      	ldrh	r3, [r7, #18]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	827b      	strh	r3, [r7, #18]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a36      	ldr	r2, [pc, #216]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	8a7a      	ldrh	r2, [r7, #18]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3a6      	bcc.n	8001d38 <ws2812b_fill_pwm_buffer_strip+0x18>
            				(uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	81fb      	strh	r3, [r7, #14]
 8001dee:	e01b      	b.n	8001e28 <ws2812b_fill_pwm_buffer_strip+0x108>
    {
        gp_pwm_data_fill[(g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	492d      	ldr	r1, [pc, #180]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	889b      	ldrh	r3, [r3, #4]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	18c1      	adds	r1, r0, r3
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	440b      	add	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e22:	89fb      	ldrh	r3, [r7, #14]
 8001e24:	3301      	adds	r3, #1
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ec0 <ws2812b_fill_pwm_buffer_strip+0x1a0>
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d4d7      	bmi.n	8001df0 <ws2812b_fill_pwm_buffer_strip+0xd0>
    }
    switch (strip_num)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00c      	beq.n	8001e60 <ws2812b_fill_pwm_buffer_strip+0x140>
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	dc0d      	bgt.n	8001e66 <ws2812b_fill_pwm_buffer_strip+0x146>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d002      	beq.n	8001e54 <ws2812b_fill_pwm_buffer_strip+0x134>
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d003      	beq.n	8001e5a <ws2812b_fill_pwm_buffer_strip+0x13a>
		break;
    	case STRIP_NUM_3:
    		timer_channel = TIM_CHANNEL_3;
		break;
    	default:
    	break;
 8001e52:	e008      	b.n	8001e66 <ws2812b_fill_pwm_buffer_strip+0x146>
    		timer_channel = TIM_CHANNEL_1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
		break;
 8001e58:	e006      	b.n	8001e68 <ws2812b_fill_pwm_buffer_strip+0x148>
    		timer_channel = TIM_CHANNEL_2;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	617b      	str	r3, [r7, #20]
		break;
 8001e5e:	e003      	b.n	8001e68 <ws2812b_fill_pwm_buffer_strip+0x148>
    		timer_channel = TIM_CHANNEL_3;
 8001e60:	2308      	movs	r3, #8
 8001e62:	617b      	str	r3, [r7, #20]
		break;
 8001e64:	e000      	b.n	8001e68 <ws2812b_fill_pwm_buffer_strip+0x148>
    	break;
 8001e66:	bf00      	nop

    }
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, timer_channel, (uint32_t *)(gp_pwm_data_fill + g_ws2812b_info[strip_num].pwm_dma_buffer_index_start), (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4912      	ldr	r1, [pc, #72]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	88db      	ldrh	r3, [r3, #6]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	441a      	add	r2, r3
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	4619      	mov	r1, r3
 8001e86:	460b      	mov	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	440b      	add	r3, r1
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e96:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ec0 <ws2812b_fill_pwm_buffer_strip+0x1a0>
 8001e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 3a90 	vmov	r3, s15
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <ws2812b_fill_pwm_buffer_strip+0x1a4>)
 8001eac:	f005 ff96 	bl	8007ddc <HAL_TIM_PWM_Start_DMA>
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	2000005c 	.word	0x2000005c
 8001ebc:	200002f8 	.word	0x200002f8
 8001ec0:	453b8000 	.word	0x453b8000
 8001ec4:	20001da8 	.word	0x20001da8

08001ec8 <ws2812b_show_strip_one>:
	// call TIM PWM DMA to reset.
}


void ws2812b_show_strip_one(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f810 	bl	8001ef2 <ws2812b_show>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ws2812b_show_strip_two>:


void ws2812b_show_strip_two(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_2);
 8001eda:	2002      	movs	r0, #2
 8001edc:	f000 f809 	bl	8001ef2 <ws2812b_show>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ws2812b_show_strip_three>:


void ws2812b_show_strip_three(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_3);
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f000 f802 	bl	8001ef2 <ws2812b_show>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <ws2812b_show>:
 * @brief   Show the strip(s)
 * @param   strip_mask: bit vector. 1 = show, 0 = don't
 * @return  void
 */
void ws2812b_show(const strip_mask_t strip_mask)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	80fb      	strh	r3, [r7, #6]
	if (STRIP_NUM_1 & strip_mask)
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <ws2812b_show+0x1c>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_1));
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff ff09 	bl	8001d20 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_2 & strip_mask)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <ws2812b_show+0x2e>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_2));
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f7ff ff00 	bl	8001d20 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_3 & strip_mask)
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <ws2812b_show+0x40>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_3));
 8001f2c:	2004      	movs	r0, #4
 8001f2e:	f7ff fef7 	bl	8001d20 <ws2812b_fill_pwm_buffer_strip>
	}
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <ws2812b_init>:


void ws2812b_init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
	uint32_t total_led_bits_in_all_strips = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * NUM_LEDS);
 8001f42:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001f46:	607b      	str	r3, [r7, #4]
	//g_all_strip_mask = STRIP_ALL_SET;
    gp_pwm_data_fill = malloc(total_led_bits_in_all_strips + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001f7c <ws2812b_init+0x40>
 8001f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5e:	ee17 0a90 	vmov	r0, s15
 8001f62:	f009 fb4d 	bl	800b600 <malloc>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <ws2812b_init+0x44>)
 8001f6c:	601a      	str	r2, [r3, #0]
	current_monitor_init();
 8001f6e:	f7fe ff4b 	bl	8000e08 <current_monitor_init>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	45bb8000 	.word	0x45bb8000
 8001f80:	200002f8 	.word	0x200002f8

08001f84 <task_button_press_interrupt_occurred>:
uint32_t 	g_c_ok_count = 0;
uint32_t 	g_d_ok_count = 0;


bool task_button_press_interrupt_occurred(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.interrupt_set;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <task_button_press_interrupt_occurred+0x14>)
 8001f8a:	799b      	ldrb	r3, [r3, #6]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000084 	.word	0x20000084

08001f9c <task_led_ctrl_button_to_isr>:
 * @brief   Return the ISR pertaining to the button
 * @param   button: the button of interest
 * @return  isr_e: enumerated type for the interrupt pertaining to the button
 */
isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
    switch (button)
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d813      	bhi.n	8001fd4 <task_led_ctrl_button_to_isr+0x38>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <task_led_ctrl_button_to_isr+0x18>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fd1 	.word	0x08001fd1
    {
        case PUSH_BUTTON_A: return ISR_SPEED;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e006      	b.n	8001fd6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_B: return ISR_STATE;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e004      	b.n	8001fd6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_C: return ISR_COLOR;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_D: return ISR_PAUSE;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <task_led_ctrl_button_to_isr+0x3a>
        default: return ISR_INVALID;
 8001fd4:	2305      	movs	r3, #5
    }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <task_button_press_ctrl_set_interrupt_flag>:
 * @brief   Set global flag denoting that src interrupt has occurred
 * @param   src: source of interrupt
 * @return  void
 */
void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
    g_task_led_ctrl.interrupt_set = true;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	719a      	strb	r2, [r3, #6]
    g_interrupt_flag[src] = true;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	54d1      	strb	r1, [r2, r3]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000084 	.word	0x20000084
 800200c:	20000388 	.word	0x20000388

08002010 <task_button_press_ctrl_interrupt_flag>:
 * @return  bool: true if occurred else false
 * @note	This function auto clears the flag.  If set it will
 *  		return true and clear the tracked flag.
 */
bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4a08      	ldr	r2, [pc, #32]	; (8002040 <task_button_press_ctrl_interrupt_flag+0x30>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <task_button_press_ctrl_interrupt_flag+0x20>
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <task_button_press_ctrl_interrupt_flag+0x30>)
 800202c:	2100      	movs	r1, #0
 800202e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000388 	.word	0x20000388

08002044 <task_button_press_check_interrupts>:
 * @param   *green: pointer to current animation green color (8 bit)
 * @param  	*blue: pointer to current animation blue color (8 bit)
 * @return  bool: true if interrupt occurred since last check, else false
 */
bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8002054:	f000 f85a 	bl	800210c <task_button_press_major_state_change>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 800205e:	f000 f849 	bl	80020f4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8002066:	2100      	movs	r1, #0
 8002068:	2007      	movs	r0, #7
 800206a:	f7ff f84f 	bl	800110c <animate_led_solid_custom_color>
 800206e:	e039      	b.n	80020e4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff ffcd 	bl	8002010 <task_button_press_ctrl_interrupt_flag>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 800207c:	f000 f83a 	bl	80020f4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002080:	2301      	movs	r3, #1
 8002082:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8002084:	2100      	movs	r1, #0
 8002086:	2007      	movs	r0, #7
 8002088:	f7ff f840 	bl	800110c <animate_led_solid_custom_color>
 800208c:	e02a      	b.n	80020e4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 800208e:	2003      	movs	r0, #3
 8002090:	f7ff ffbe 	bl	8002010 <task_button_press_ctrl_interrupt_flag>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 800209a:	f000 f82b 	bl	80020f4 <task_button_press_interrupt_flag_clear>
        while (g_task_led_ctrl.pause_set)
 800209e:	e002      	b.n	80020a6 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f000 fdd3 	bl	8002c4c <osDelay>
        while (g_task_led_ctrl.pause_set)
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <task_button_press_check_interrupts+0xac>)
 80020a8:	79db      	ldrb	r3, [r3, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f8      	bne.n	80020a0 <task_button_press_check_interrupts+0x5c>
 80020ae:	e019      	b.n	80020e4 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7ff ffad 	bl	8002010 <task_button_press_ctrl_interrupt_flag>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 80020bc:	f000 f81a 	bl	80020f4 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80020c0:	f000 fb4c 	bl	800275c <task_led_ctrl_color_red_hex>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80020cc:	f000 fb6e 	bl	80027ac <task_led_ctrl_color_green_hex>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020d8:	f000 fb90 	bl	80027fc <task_led_ctrl_color_blue_hex>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000084 	.word	0x20000084

080020f4 <task_button_press_interrupt_flag_clear>:
 * @brief  	Clear global flag indicating that an interrupt occurred.
 * @param   void
 * @return  void
 */
void task_button_press_interrupt_flag_clear(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
    g_task_led_ctrl.interrupt_set = false;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <task_button_press_interrupt_flag_clear+0x14>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	719a      	strb	r2, [r3, #6]
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000084 	.word	0x20000084

0800210c <task_button_press_major_state_change>:
 * @brief  	Check if a major state change was intiated
 * @param   void
 * @return  bool: true if major state change, else false
 */
bool task_button_press_major_state_change(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <task_button_press_major_state_change+0x14>)
 8002112:	781b      	ldrb	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000384 	.word	0x20000384

08002124 <task_button_press>:
 * @brief   Task to control all button press action
 * @param   *arguments: UNUSED!!
 * @return  void
 */
void task_button_press(void *argument)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	gpio_specific_pin_e button_pin;
    uint32_t button_pressed_bit = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
    IRQn_Type irq_type = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
    board_init_push_buttons_e pushed_button = NUM_PUSH_BUTTONS;
 8002138:	2304      	movs	r3, #4
 800213a:	737b      	strb	r3, [r7, #13]
    while (1)
    {
    	// wait for task notification from button interrupt.
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	f107 0208 	add.w	r2, r7, #8
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	2000      	movs	r0, #0
 8002148:	f002 fa2c 	bl	80045a4 <xTaskNotifyWait>
        // button_pressed_bit is passed through notification.  Convert to the button pressed enum.
        pushed_button = (board_init_push_buttons_e) button_pressed_bit;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(gpio_config_port_lookup(GPIO_PIOB_INT_LVL_EN), gpio_config_pin_lookup(GPIO_PIOB_INT_LVL_EN), GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(gpio_config_port_lookup(GPIO_PIOB_INT_LVL_EN), gpio_config_pin_lookup(GPIO_PIOB_INT_LVL_EN), GPIO_PIN_SET);
#endif
        // get the pin for button pressed
        switch (pushed_button)
 8002150:	7b7b      	ldrb	r3, [r7, #13]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d816      	bhi.n	8002184 <task_button_press+0x60>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <task_button_press+0x38>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002173 	.word	0x08002173
 8002164:	08002179 	.word	0x08002179
 8002168:	0800217f 	.word	0x0800217f
        {
        	case PUSH_BUTTON_A: button_pin = GPIO_PIN_PUSH_BUTTON_A; break;
 800216c:	2325      	movs	r3, #37	; 0x25
 800216e:	75fb      	strb	r3, [r7, #23]
 8002170:	e009      	b.n	8002186 <task_button_press+0x62>
        	case PUSH_BUTTON_B: button_pin = GPIO_PIN_PUSH_BUTTON_B; break;
 8002172:	232d      	movs	r3, #45	; 0x2d
 8002174:	75fb      	strb	r3, [r7, #23]
 8002176:	e006      	b.n	8002186 <task_button_press+0x62>
        	case PUSH_BUTTON_C: button_pin = GPIO_PIN_PUSH_BUTTON_C; break;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
 800217c:	e003      	b.n	8002186 <task_button_press+0x62>
			case PUSH_BUTTON_D: button_pin = GPIO_PIN_PUSH_BUTTON_D; break;
 800217e:	2302      	movs	r3, #2
 8002180:	75fb      	strb	r3, [r7, #23]
 8002182:	e000      	b.n	8002186 <task_button_press+0x62>
			default: break;
 8002184:	bf00      	nop
        }
        // wait for push button to be released
		while (gpio_access_hal_input_is_low(button_pin))
 8002186:	e009      	b.n	800219c <task_button_press+0x78>
		{
			// record the current timestamp every 100 ms while waiting for this bitch to go high
    		g_button_press_timestamp[pushed_button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8002188:	7b7c      	ldrb	r4, [r7, #13]
 800218a:	f001 fe47 	bl	8003e1c <xTaskGetTickCountFromISR>
 800218e:	4603      	mov	r3, r0
 8002190:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <task_button_press+0x260>)
 8002192:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    		osDelay(100);
 8002196:	2064      	movs	r0, #100	; 0x64
 8002198:	f000 fd58 	bl	8002c4c <osDelay>
		while (gpio_access_hal_input_is_low(button_pin))
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 fa68 	bl	800a674 <gpio_access_hal_input_is_low>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ee      	bne.n	8002188 <task_button_press+0x64>
		}
        // set flag to signal that a button interrupt was received!
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(pushed_button));
 80021aa:	7b7b      	ldrb	r3, [r7, #13]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fef5 	bl	8001f9c <task_led_ctrl_button_to_isr>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff15 	bl	8001fe4 <task_button_press_ctrl_set_interrupt_flag>
        // check if the button was held down longer than SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <task_button_press+0x260>)
 80021c2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
        				g_button_press_timestamp[pushed_button][TIMESTAMP_PREVIOUS]))
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	496e      	ldr	r1, [pc, #440]	; (8002384 <task_button_press+0x260>)
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	685b      	ldr	r3, [r3, #4]
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 80021d0:	1ad3      	subs	r3, r2, r3
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d971      	bls.n	80022be <task_button_press+0x19a>
        {
        	// major state change initiated. Special action occurs below.
            task_button_press_major_change = true;
 80021da:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <task_button_press+0x264>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
            switch (pushed_button)
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d841      	bhi.n	800226a <task_button_press+0x146>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <task_button_press+0xc8>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002217 	.word	0x08002217
 80021f4:	08002233 	.word	0x08002233
 80021f8:	0800224d 	.word	0x0800224d
            {
                case PUSH_BUTTON_A:
                	// `A` button is speed.  Reset the speed to the default value.
                    g_a_ok_count++;
 80021fc:	4b63      	ldr	r3, [pc, #396]	; (800238c <task_button_press+0x268>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a62      	ldr	r2, [pc, #392]	; (800238c <task_button_press+0x268>)
 8002204:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_A_IRQ;
 800220c:	2317      	movs	r3, #23
 800220e:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_speed_reset();
 8002210:	f000 fb94 	bl	800293c <task_led_ctrl_speed_reset>
                break;
 8002214:	e02a      	b.n	800226c <task_button_press+0x148>
                case PUSH_BUTTON_B:
                	// `B` button is animation.  Reset the iteration count and also reset the master state to demo!
                    g_b_ok_count++;
 8002216:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <task_button_press+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <task_button_press+0x26c>)
 800221e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002220:	23ff      	movs	r3, #255	; 0xff
 8002222:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002224:	2328      	movs	r3, #40	; 0x28
 8002226:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_animate_iteration_reset();
 8002228:	f000 fb94 	bl	8002954 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 800222c:	f000 fbbc 	bl	80029a8 <task_led_ctrl_animate_state_demo>
                break;
 8002230:	e01c      	b.n	800226c <task_button_press+0x148>
                case PUSH_BUTTON_C:
                	// `C` button is color.  Reset the color master state back to demo mode.
                    g_c_ok_count++;
 8002232:	4b58      	ldr	r3, [pc, #352]	; (8002394 <task_button_press+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a56      	ldr	r2, [pc, #344]	; (8002394 <task_button_press+0x270>)
 800223a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 800223c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002240:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002242:	2306      	movs	r3, #6
 8002244:	73fb      	strb	r3, [r7, #15]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8002246:	f000 fa3d 	bl	80026c4 <task_led_ctrl_color_state_demo>
                break;
 800224a:	e00f      	b.n	800226c <task_button_press+0x148>
                case PUSH_BUTTON_D:
                	// `D` button is brightness.  Adjust the brightness and also clear pause if for some reason we are paused.
                    task_led_ctrl_brightness_adjust();
 800224c:	f000 f9d4 	bl	80025f8 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002250:	f000 fa02 	bl	8002658 <task_led_ctrl_clear_pause>
                    g_d_ok_count++;
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <task_button_press+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <task_button_press+0x274>)
 800225c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 800225e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002262:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002264:	2308      	movs	r3, #8
 8002266:	73fb      	strb	r3, [r7, #15]
                break;
 8002268:	e000      	b.n	800226c <task_button_press+0x148>
                default:
                break;
 800226a:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 800226c:	2300      	movs	r3, #0
 800226e:	73bb      	strb	r3, [r7, #14]
 8002270:	e012      	b.n	8002298 <task_button_press+0x174>
            {
            	// flash the LEDs on the sign signalling that a master state change was made!
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, color);
 8002272:	6939      	ldr	r1, [r7, #16]
 8002274:	2007      	movs	r0, #7
 8002276:	f7fe ff49 	bl	800110c <animate_led_solid_custom_color>
                osDelay(500);
 800227a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800227e:	f000 fce5 	bl	8002c4c <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8002282:	2100      	movs	r1, #0
 8002284:	2007      	movs	r0, #7
 8002286:	f7fe ff41 	bl	800110c <animate_led_solid_custom_color>
                osDelay(500);
 800228a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800228e:	f000 fcdd 	bl	8002c4c <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8002292:	7bbb      	ldrb	r3, [r7, #14]
 8002294:	3301      	adds	r3, #1
 8002296:	73bb      	strb	r3, [r7, #14]
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d9e9      	bls.n	8002272 <task_button_press+0x14e>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2118      	movs	r1, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fc31 	bl	8005b0e <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fc48 	bl	8005b46 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <task_button_press+0x264>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e73e      	b.n	800213c <task_button_press+0x18>
        }
        else
        {
        	// simple button press.  No master state change here!
            switch (pushed_button)
 80022be:	7b7b      	ldrb	r3, [r7, #13]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d85d      	bhi.n	8002380 <task_button_press+0x25c>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <task_button_press+0x1a8>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022fd 	.word	0x080022fd
 80022d4:	08002331 	.word	0x08002331
 80022d8:	08002361 	.word	0x08002361
            {
                case PUSH_BUTTON_A:
                	// A is speed.  Adjust it!
                    g_a_ok_count++;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <task_button_press+0x268>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <task_button_press+0x268>)
 80022e4:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 80022e6:	f000 fb11 	bl	800290c <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2118      	movs	r1, #24
 80022ee:	2017      	movs	r0, #23
 80022f0:	f003 fc0d 	bl	8005b0e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 80022f4:	2017      	movs	r0, #23
 80022f6:	f003 fc26 	bl	8005b46 <HAL_NVIC_EnableIRQ>
                break;
 80022fa:	e042      	b.n	8002382 <task_button_press+0x25e>
                case PUSH_BUTTON_B:
                	// B is state.  Adjust it!
                    g_b_ok_count++;
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <task_button_press+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <task_button_press+0x26c>)
 8002304:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8002306:	f000 fb75 	bl	80029f4 <task_led_ctrl_animate_state>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <task_button_press+0x1f2>
                    {
                    	// if master state is demo then change to fixed master state!
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002310:	f000 fb5c 	bl	80029cc <task_led_ctrl_animate_state_fixed>
 8002314:	e003      	b.n	800231e <task_button_press+0x1fa>
                    }
                    else
                    {
                    	// reset animation state count and adjust the state
                        task_led_ctrl_animate_iteration_reset();
 8002316:	f000 fb1d 	bl	8002954 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 800231a:	f000 fb27 	bl	800296c <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2118      	movs	r1, #24
 8002322:	2028      	movs	r0, #40	; 0x28
 8002324:	f003 fbf3 	bl	8005b0e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002328:	2028      	movs	r0, #40	; 0x28
 800232a:	f003 fc0c 	bl	8005b46 <HAL_NVIC_EnableIRQ>
                break;
 800232e:	e028      	b.n	8002382 <task_button_press+0x25e>
                case PUSH_BUTTON_C:
                	// C is color.  Adjust it!
                    g_c_ok_count++;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <task_button_press+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <task_button_press+0x270>)
 8002338:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 800233a:	f000 f9b7 	bl	80026ac <task_led_ctrl_color_state>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <task_button_press+0x226>
                    {
                    	// if master color state is demo then change to fixed master state!
                        task_led_ctrl_color_state_fixed();
 8002344:	f000 f9ca 	bl	80026dc <task_led_ctrl_color_state_fixed>
 8002348:	e001      	b.n	800234e <task_button_press+0x22a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 800234a:	f000 f9d7 	bl	80026fc <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2118      	movs	r1, #24
 8002352:	2006      	movs	r0, #6
 8002354:	f003 fbdb 	bl	8005b0e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002358:	2006      	movs	r0, #6
 800235a:	f003 fbf4 	bl	8005b46 <HAL_NVIC_EnableIRQ>
                break;
 800235e:	e010      	b.n	8002382 <task_button_press+0x25e>
                case PUSH_BUTTON_D:
                	// D is pause.
                    g_d_ok_count++;
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <task_button_press+0x274>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <task_button_press+0x274>)
 8002368:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 800236a:	f000 f981 	bl	8002670 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2118      	movs	r1, #24
 8002372:	2008      	movs	r0, #8
 8002374:	f003 fbcb 	bl	8005b0e <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002378:	2008      	movs	r0, #8
 800237a:	f003 fbe4 	bl	8005b46 <HAL_NVIC_EnableIRQ>
                break;
 800237e:	e000      	b.n	8002382 <task_button_press+0x25e>
                default:
                break;
 8002380:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002382:	e6db      	b.n	800213c <task_button_press+0x18>
 8002384:	20000364 	.word	0x20000364
 8002388:	20000384 	.word	0x20000384
 800238c:	2000038c 	.word	0x2000038c
 8002390:	20000390 	.word	0x20000390
 8002394:	20000394 	.word	0x20000394
 8002398:	20000398 	.word	0x20000398

0800239c <task_led_ctrl_adjust_parameters>:
uint16_t                g_delay_in_animation_ms = 100; // where applicable of course


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	460a      	mov	r2, r1
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <task_led_ctrl_adjust_parameters+0x74>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <task_led_ctrl_adjust_parameters+0x74>)
 80023b6:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_task_led_ctrl.led_state_master)
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <task_led_ctrl_adjust_parameters+0x78>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11b      	bne.n	80023f8 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <task_led_ctrl_adjust_parameters+0x32>
 80023c6:	88bb      	ldrh	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f900 	bl	80025ce <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <task_led_ctrl_adjust_parameters+0x74>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	79fa      	ldrb	r2, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10f      	bne.n	80023f8 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_task_led_ctrl.led_state = (led_state_e) (g_task_led_ctrl.led_state + 1);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <task_led_ctrl_adjust_parameters+0x78>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	3301      	adds	r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <task_led_ctrl_adjust_parameters+0x78>)
 80023e2:	705a      	strb	r2, [r3, #1]
            if (NUM_LED_STATES == g_task_led_ctrl.led_state) g_task_led_ctrl.led_state = LED_STATE_FIRST;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <task_led_ctrl_adjust_parameters+0x78>)
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b0a      	cmp	r3, #10
 80023ea:	d102      	bne.n	80023f2 <task_led_ctrl_adjust_parameters+0x56>
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <task_led_ctrl_adjust_parameters+0x78>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	705a      	strb	r2, [r3, #1]
            g_animation_iterations = 0;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <task_led_ctrl_adjust_parameters+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80023f8:	f000 f958 	bl	80026ac <task_led_ctrl_color_state>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <task_led_ctrl_adjust_parameters+0x6a>
 8002402:	f000 fa21 	bl	8002848 <task_led_ctrl_color_random>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000039c 	.word	0x2000039c
 8002414:	20000084 	.word	0x20000084

08002418 <task_led_ctrl_strip>:
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;


static void task_led_ctrl_strip(strip_num_e strip_num)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af02      	add	r7, sp, #8
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	if (1)//(flash_info_animation_enabled(g_task_led_ctrl.led_state))
	{
		switch(g_task_led_ctrl.led_state)
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <task_led_ctrl_strip+0x180>)
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	2b09      	cmp	r3, #9
 8002428:	f200 80b1 	bhi.w	800258e <task_led_ctrl_strip+0x176>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <task_led_ctrl_strip+0x1c>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002571 	.word	0x08002571
 8002438:	0800245d 	.word	0x0800245d
 800243c:	08002477 	.word	0x08002477
 8002440:	080024b1 	.word	0x080024b1
 8002444:	080024cd 	.word	0x080024cd
 8002448:	080024e5 	.word	0x080024e5
 800244c:	080024fb 	.word	0x080024fb
 8002450:	08002519 	.word	0x08002519
 8002454:	0800252f 	.word	0x0800252f
 8002458:	0800254b 	.word	0x0800254b
		{
			case LED_STATE_WHITE_COLOR:

				animate_led_solid_custom_color((uint16_t)strip_num, COLOR_HEX_RED);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fe51 	bl	800110c <animate_led_solid_custom_color>
				//animate_led_solid_custom_color((uint16_t)STRIP_NUM_2, COLOR_HEX_WHITE);
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 800246a:	f241 3188 	movw	r1, #5000	; 0x1388
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff ff94 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 8002474:	e08c      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_SOLID_COLOR:
				animate_led_solid_custom_color((uint16_t)strip_num, task_led_ctrl_color_hex());
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	b29c      	uxth	r4, r3
 800247a:	f000 f95d 	bl	8002738 <task_led_ctrl_color_hex>
 800247e:	4603      	mov	r3, r0
 8002480:	4619      	mov	r1, r3
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe fe42 	bl	800110c <animate_led_solid_custom_color>
				if (MASTER_LED_STATE_FIXED == g_task_led_ctrl.led_state_master)
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <task_led_ctrl_strip+0x180>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d109      	bne.n	80024a4 <task_led_ctrl_strip+0x8c>
				{
					task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002494:	2005      	movs	r0, #5
 8002496:	f7ff ff81 	bl	800239c <task_led_ctrl_adjust_parameters>
					task_led_ctrl_delay(1000);
 800249a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800249e:	f000 f896 	bl	80025ce <task_led_ctrl_delay>
				}
				else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
			break;
 80024a2:	e075      	b.n	8002590 <task_led_ctrl_strip+0x178>
				else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80024a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80024a8:	2005      	movs	r0, #5
 80024aa:	f7ff ff77 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 80024ae:	e06f      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_SPARKLE_NO_FILL:
				animate_led_turn_all_pixels_off();
 80024b0:	f7fe fe4e 	bl	8001150 <animate_led_turn_all_pixels_off>
				animate_led_sparkle_only_random_color(strip_num, false, 100);//random(0, 50));
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2264      	movs	r2, #100	; 0x64
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f867 	bl	8001590 <animate_led_sparkle_only_random_color>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024c2:	2100      	movs	r1, #0
 80024c4:	2005      	movs	r0, #5
 80024c6:	f7ff ff69 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 80024ca:	e061      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_SPARKLE_FILL:
				animate_led_sparkle_only_random_color(strip_num, true, 100);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f85b 	bl	8001590 <animate_led_sparkle_only_random_color>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024da:	2100      	movs	r1, #0
 80024dc:	200a      	movs	r0, #10
 80024de:	f7ff ff5d 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 80024e2:	e055      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_RAINBOW_CYCLE:
				animate_led_rainbow_cycle(strip_num, 10);
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	210a      	movs	r1, #10
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f8e2 	bl	80016b4 <animate_led_rainbow_cycle>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024f0:	2100      	movs	r1, #0
 80024f2:	2005      	movs	r0, #5
 80024f4:	f7ff ff52 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 80024f8:	e04a      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_THEATER_CHASE:
				animate_led_theater_chase(strip_num, task_led_ctrl_color_hex(), 20);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	b29c      	uxth	r4, r3
 80024fe:	f000 f91b 	bl	8002738 <task_led_ctrl_color_hex>
 8002502:	4603      	mov	r3, r0
 8002504:	2214      	movs	r2, #20
 8002506:	4619      	mov	r1, r3
 8002508:	4620      	mov	r0, r4
 800250a:	f7ff f961 	bl	80017d0 <animate_led_theater_chase>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800250e:	2100      	movs	r1, #0
 8002510:	200a      	movs	r0, #10
 8002512:	f7ff ff43 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 8002516:	e03b      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_THEATER_CHASE_RAINBOW:\
				animate_led_theater_chase_rainbow(strip_num, 20);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	b29b      	uxth	r3, r3
 800251c:	2114      	movs	r1, #20
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f9f8 	bl	8001914 <animate_led_theater_chase_rainbow>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002524:	2100      	movs	r1, #0
 8002526:	2002      	movs	r0, #2
 8002528:	f7ff ff38 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 800252c:	e030      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_FADE_IN_AND_OUT:
				animate_led_fade_in_fade_out((uint16_t)strip_num, task_led_ctrl_color_hex());
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	b29c      	uxth	r4, r3
 8002532:	f000 f901 	bl	8002738 <task_led_ctrl_color_hex>
 8002536:	4603      	mov	r3, r0
 8002538:	4619      	mov	r1, r3
 800253a:	4620      	mov	r0, r4
 800253c:	f7fe fe72 	bl	8001224 <animate_led_fade_in_fade_out>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002540:	2100      	movs	r1, #0
 8002542:	200a      	movs	r0, #10
 8002544:	f7ff ff2a 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 8002548:	e022      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_TWINKLE:
				animate_led_turn_all_pixels_off();
 800254a:	f7fe fe01 	bl	8001150 <animate_led_turn_all_pixels_off>
				animate_led_twinkle(strip_num, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	b29c      	uxth	r4, r3
 8002552:	f000 f8f1 	bl	8002738 <task_led_ctrl_color_hex>
 8002556:	4601      	mov	r1, r0
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2314      	movs	r3, #20
 800255e:	221e      	movs	r2, #30
 8002560:	4620      	mov	r0, r4
 8002562:	f7fe ffa1 	bl	80014a8 <animate_led_twinkle>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002566:	2100      	movs	r1, #0
 8002568:	2005      	movs	r0, #5
 800256a:	f7ff ff17 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 800256e:	e00f      	b.n	8002590 <task_led_ctrl_strip+0x178>
			case LED_STATE_SPELL:
				animate_led_only_spell_word(strip_num, task_led_ctrl_color_hex(), 20);
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	b29c      	uxth	r4, r3
 8002574:	f000 f8e0 	bl	8002738 <task_led_ctrl_color_hex>
 8002578:	4603      	mov	r3, r0
 800257a:	2214      	movs	r2, #20
 800257c:	4619      	mov	r1, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f7fe fdf0 	bl	8001164 <animate_led_only_spell_word>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002584:	2100      	movs	r1, #0
 8002586:	200a      	movs	r0, #10
 8002588:	f7ff ff08 	bl	800239c <task_led_ctrl_adjust_parameters>
			break;
 800258c:	e000      	b.n	8002590 <task_led_ctrl_strip+0x178>
			default:
			break;
 800258e:	bf00      	nop
		}
	}
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000084 	.word	0x20000084

0800259c <task_led_ctrl>:

}


void task_led_ctrl(void *argument)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	// need a custom init function to clear all these LEDs..  Right now the funcion
	// below
	animate_led_turn_all_pixels_off();
 80025a4:	f7fe fdd4 	bl	8001150 <animate_led_turn_all_pixels_off>

	strip_num_e strip_num = STRIP_NONE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
	{
		case 1:
			strip_num = STRIP_NUM_1;
		break;
		case 2:
			strip_num = STRIP_NUM_1 | STRIP_NUM_2;
 80025ac:	2303      	movs	r3, #3
 80025ae:	73fb      	strb	r3, [r7, #15]
		break;
 80025b0:	bf00      	nop
		default:
		break;
	}
	while (1)
	{
		while(task_button_press_major_state_change()) osDelay(100);
 80025b2:	e002      	b.n	80025ba <task_led_ctrl+0x1e>
 80025b4:	2064      	movs	r0, #100	; 0x64
 80025b6:	f000 fb49 	bl	8002c4c <osDelay>
 80025ba:	f7ff fda7 	bl	800210c <task_button_press_major_state_change>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f7      	bne.n	80025b4 <task_led_ctrl+0x18>
		task_led_ctrl_strip(strip_num);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff26 	bl	8002418 <task_led_ctrl_strip>
		while(task_button_press_major_state_change()) osDelay(100);
 80025cc:	e7f5      	b.n	80025ba <task_led_ctrl+0x1e>

080025ce <task_led_ctrl_delay>:
	}
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 80025da:	e002      	b.n	80025e2 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 80025dc:	2001      	movs	r0, #1
 80025de:	f000 fb35 	bl	8002c4c <osDelay>
    while (ms_count++ < time_ms)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	60fa      	str	r2, [r7, #12]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d8f6      	bhi.n	80025dc <task_led_ctrl_delay+0xe>
    }
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_task_led_ctrl.led_brightness) g_task_led_ctrl.led_brightness = LED_BRIGHTNESS_LAST;
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <task_led_ctrl_brightness_adjust+0x58>)
 80025fe:	78db      	ldrb	r3, [r3, #3]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <task_led_ctrl_brightness_adjust+0x14>
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <task_led_ctrl_brightness_adjust+0x58>)
 8002606:	2202      	movs	r2, #2
 8002608:	70da      	strb	r2, [r3, #3]
 800260a:	e005      	b.n	8002618 <task_led_ctrl_brightness_adjust+0x20>
    else g_task_led_ctrl.led_brightness = (led_brightness_e) (g_task_led_ctrl.led_brightness - 1);
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <task_led_ctrl_brightness_adjust+0x58>)
 800260e:	78db      	ldrb	r3, [r3, #3]
 8002610:	3b01      	subs	r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <task_led_ctrl_brightness_adjust+0x58>)
 8002616:	70da      	strb	r2, [r3, #3]
    switch (g_task_led_ctrl.led_brightness)
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <task_led_ctrl_brightness_adjust+0x58>)
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d010      	beq.n	8002642 <task_led_ctrl_brightness_adjust+0x4a>
 8002620:	2b02      	cmp	r3, #2
 8002622:	dc13      	bgt.n	800264c <task_led_ctrl_brightness_adjust+0x54>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <task_led_ctrl_brightness_adjust+0x36>
 8002628:	2b01      	cmp	r3, #1
 800262a:	d005      	beq.n	8002638 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 800262c:	e00e      	b.n	800264c <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 800262e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002632:	f7fe fbb9 	bl	8000da8 <current_monitor_set>
        break;
 8002636:	e009      	b.n	800264c <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8002638:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800263c:	f7fe fbb4 	bl	8000da8 <current_monitor_set>
        break;
 8002640:	e004      	b.n	800264c <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8002642:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002654 <task_led_ctrl_brightness_adjust+0x5c>
 8002646:	f7fe fbaf 	bl	8000da8 <current_monitor_set>
        break;
 800264a:	bf00      	nop
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000084 	.word	0x20000084
 8002654:	3c23d70a 	.word	0x3c23d70a

08002658 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
    g_task_led_ctrl.pause_set = false;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <task_led_ctrl_clear_pause+0x14>)
 800265e:	2200      	movs	r2, #0
 8002660:	71da      	strb	r2, [r3, #7]
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	20000084 	.word	0x20000084

08002670 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_task_led_ctrl.pause_set = true;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <task_led_ctrl_pause+0x34>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <task_led_ctrl_pause+0x14>
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <task_led_ctrl_pause+0x38>)
 800267e:	2201      	movs	r2, #1
 8002680:	71da      	strb	r2, [r3, #7]
 8002682:	e002      	b.n	800268a <task_led_ctrl_pause+0x1a>
    else g_task_led_ctrl.pause_set = false;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <task_led_ctrl_pause+0x38>)
 8002686:	2200      	movs	r2, #0
 8002688:	71da      	strb	r2, [r3, #7]
    flip_or_flop ^= 1;
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <task_led_ctrl_pause+0x34>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	f083 0301 	eor.w	r3, r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <task_led_ctrl_pause+0x34>)
 8002696:	701a      	strb	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000008c 	.word	0x2000008c
 80026a8:	20000084 	.word	0x20000084

080026ac <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.led_color_master;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <task_led_ctrl_color_state+0x14>)
 80026b2:	791b      	ldrb	r3, [r3, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000084 	.word	0x20000084

080026c4 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_color_master = MASTER_COLOR_STATE_DEMO;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <task_led_ctrl_color_state_demo+0x14>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	711a      	strb	r2, [r3, #4]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20000084 	.word	0x20000084

080026dc <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_color_master = MASTER_COLOR_STATE_FIXED;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <task_led_ctrl_color_state_fixed+0x1c>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	711a      	strb	r2, [r3, #4]
    g_task_led_ctrl.led_color = COLORS_FIRST;
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <task_led_ctrl_color_state_fixed+0x1c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	715a      	strb	r2, [r3, #5]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000084 	.word	0x20000084

080026fc <task_led_ctrl_color_adjust>:
    g_task_led_ctrl.led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002702:	2300      	movs	r3, #0
 8002704:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_task_led_ctrl.led_color)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <task_led_ctrl_color_adjust+0x38>)
 8002708:	795b      	ldrb	r3, [r3, #5]
 800270a:	2b15      	cmp	r3, #21
 800270c:	d105      	bne.n	800271a <task_led_ctrl_color_adjust+0x1e>
    {
        g_task_led_ctrl.led_color = COLORS_FIRST;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <task_led_ctrl_color_adjust+0x38>)
 8002710:	2200      	movs	r2, #0
 8002712:	715a      	strb	r2, [r3, #5]
        return_val = true;
 8002714:	2301      	movs	r3, #1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	e005      	b.n	8002726 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_task_led_ctrl.led_color = (all_colors_e) (g_task_led_ctrl.led_color + 1);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <task_led_ctrl_color_adjust+0x38>)
 800271c:	795b      	ldrb	r3, [r3, #5]
 800271e:	3301      	adds	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <task_led_ctrl_color_adjust+0x38>)
 8002724:	715a      	strb	r2, [r3, #5]
    return return_val;
 8002726:	79fb      	ldrb	r3, [r7, #7]
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000084 	.word	0x20000084

08002738 <task_led_ctrl_color_hex>:
    return g_task_led_ctrl.led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_task_led_ctrl.led_color];
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <task_led_ctrl_color_hex+0x1c>)
 800273e:	795b      	ldrb	r3, [r3, #5]
 8002740:	461a      	mov	r2, r3
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <task_led_ctrl_color_hex+0x20>)
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000084 	.word	0x20000084
 8002758:	20000004 	.word	0x20000004

0800275c <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	ed2d 8b02 	vpush	{d8}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_task_led_ctrl.led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <task_led_ctrl_color_red_hex+0x48>)
 8002768:	795b      	ldrb	r3, [r3, #5]
 800276a:	461a      	mov	r2, r3
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <task_led_ctrl_color_red_hex+0x4c>)
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	b2db      	uxtb	r3, r3
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800277e:	f7fe fb35 	bl	8000dec <current_monitor_ratio>
 8002782:	eeb0 7a40 	vmov.f32	s14, s0
 8002786:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800278a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002792:	793b      	ldrb	r3, [r7, #4]
 8002794:	b2db      	uxtb	r3, r3
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	ecbd 8b02 	vpop	{d8}
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000084 	.word	0x20000084
 80027a8:	20000004 	.word	0x20000004

080027ac <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	ed2d 8b02 	vpush	{d8}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_task_led_ctrl.led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <task_led_ctrl_color_green_hex+0x48>)
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <task_led_ctrl_color_green_hex+0x4c>)
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80027ce:	f7fe fb0d 	bl	8000dec <current_monitor_ratio>
 80027d2:	eeb0 7a40 	vmov.f32	s14, s0
 80027d6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80027da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027de:	edc7 7a01 	vstr	s15, [r7, #4]
 80027e2:	793b      	ldrb	r3, [r7, #4]
 80027e4:	b2db      	uxtb	r3, r3
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	ecbd 8b02 	vpop	{d8}
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000084 	.word	0x20000084
 80027f8:	20000004 	.word	0x20000004

080027fc <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	ed2d 8b02 	vpush	{d8}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_task_led_ctrl.led_color] & 0x0000FF) / current_monitor_ratio());
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <task_led_ctrl_color_blue_hex+0x44>)
 8002808:	795b      	ldrb	r3, [r3, #5]
 800280a:	461a      	mov	r2, r3
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <task_led_ctrl_color_blue_hex+0x48>)
 800280e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800281c:	f7fe fae6 	bl	8000dec <current_monitor_ratio>
 8002820:	eeb0 7a40 	vmov.f32	s14, s0
 8002824:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002830:	793b      	ldrb	r3, [r7, #4]
 8002832:	b2db      	uxtb	r3, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	ecbd 8b02 	vpop	{d8}
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000084 	.word	0x20000084
 8002844:	20000004 	.word	0x20000004

08002848 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800284e:	2116      	movs	r1, #22
 8002850:	2000      	movs	r0, #0
 8002852:	f008 fe5f 	bl	800b514 <random_num>
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
    if (g_task_led_ctrl.led_color == color)
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <task_led_ctrl_color_random+0x48>)
 800285c:	795b      	ldrb	r3, [r3, #5]
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d10e      	bne.n	8002882 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_task_led_ctrl.led_color = (all_colors_e)(color - 1);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b15      	cmp	r3, #21
 8002868:	d105      	bne.n	8002876 <task_led_ctrl_color_random+0x2e>
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	3b01      	subs	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <task_led_ctrl_color_random+0x48>)
 8002872:	715a      	strb	r2, [r3, #5]
    }
    else
    {
        g_task_led_ctrl.led_color = color;
    }
}
 8002874:	e008      	b.n	8002888 <task_led_ctrl_color_random+0x40>
        else g_task_led_ctrl.led_color = (all_colors_e)(color + 1);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	3301      	adds	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <task_led_ctrl_color_random+0x48>)
 800287e:	715a      	strb	r2, [r3, #5]
}
 8002880:	e002      	b.n	8002888 <task_led_ctrl_color_random+0x40>
        g_task_led_ctrl.led_color = color;
 8002882:	4a03      	ldr	r2, [pc, #12]	; (8002890 <task_led_ctrl_color_random+0x48>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	7153      	strb	r3, [r2, #5]
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000084 	.word	0x20000084

08002894 <task_led_ctrl_speed>:
    g_task_led_ctrl.led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
    switch(g_task_led_ctrl.led_speed)
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <task_led_ctrl_speed+0x6c>)
 80028a2:	789b      	ldrb	r3, [r3, #2]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d81f      	bhi.n	80028e8 <task_led_ctrl_speed+0x54>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <task_led_ctrl_speed+0x1c>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c5 	.word	0x080028c5
 80028b4:	080028cb 	.word	0x080028cb
 80028b8:	080028d1 	.word	0x080028d1
 80028bc:	080028d9 	.word	0x080028d9
 80028c0:	080028e1 	.word	0x080028e1
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <task_led_ctrl_speed+0x70>)
 80028c6:	607b      	str	r3, [r7, #4]
        break;
 80028c8:	e00f      	b.n	80028ea <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <task_led_ctrl_speed+0x74>)
 80028cc:	607b      	str	r3, [r7, #4]
        break;
 80028ce:	e00c      	b.n	80028ea <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 80028d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028d4:	607b      	str	r3, [r7, #4]
        break;
 80028d6:	e008      	b.n	80028ea <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 80028d8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80028dc:	607b      	str	r3, [r7, #4]
        break;
 80028de:	e004      	b.n	80028ea <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 80028e0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80028e4:	607b      	str	r3, [r7, #4]
        break;
 80028e6:	e000      	b.n	80028ea <task_led_ctrl_speed+0x56>
        default:
        break;
 80028e8:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	ee07 3a90 	vmov	s15, r3
}
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000084 	.word	0x20000084
 8002904:	41200000 	.word	0x41200000
 8002908:	40a00000 	.word	0x40a00000

0800290c <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_task_led_ctrl.led_speed) g_task_led_ctrl.led_speed = LED_SPEED_LAST;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <task_led_ctrl_speed_adjust+0x2c>)
 8002912:	789b      	ldrb	r3, [r3, #2]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <task_led_ctrl_speed_adjust+0x14>
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <task_led_ctrl_speed_adjust+0x2c>)
 800291a:	2204      	movs	r2, #4
 800291c:	709a      	strb	r2, [r3, #2]
    else g_task_led_ctrl.led_speed = (led_speed_e) (g_task_led_ctrl.led_speed - 1);
}
 800291e:	e005      	b.n	800292c <task_led_ctrl_speed_adjust+0x20>
    else g_task_led_ctrl.led_speed = (led_speed_e) (g_task_led_ctrl.led_speed - 1);
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <task_led_ctrl_speed_adjust+0x2c>)
 8002922:	789b      	ldrb	r3, [r3, #2]
 8002924:	3b01      	subs	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <task_led_ctrl_speed_adjust+0x2c>)
 800292a:	709a      	strb	r2, [r3, #2]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000084 	.word	0x20000084

0800293c <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_speed = LED_SPEED_1X;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <task_led_ctrl_speed_reset+0x14>)
 8002942:	2202      	movs	r2, #2
 8002944:	709a      	strb	r2, [r3, #2]
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000084 	.word	0x20000084

08002954 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <task_led_ctrl_animate_iteration_reset+0x14>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	2000039c 	.word	0x2000039c

0800296c <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002972:	2300      	movs	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_task_led_ctrl.led_state)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <task_led_ctrl_animate_adjust_state+0x38>)
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d105      	bne.n	800298a <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_task_led_ctrl.led_state = LED_STATE_FIRST;
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <task_led_ctrl_animate_adjust_state+0x38>)
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
        return_val = true;
 8002984:	2301      	movs	r3, #1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	e005      	b.n	8002996 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_task_led_ctrl.led_state = (led_state_e) (g_task_led_ctrl.led_state + 1);
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <task_led_ctrl_animate_adjust_state+0x38>)
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	3301      	adds	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <task_led_ctrl_animate_adjust_state+0x38>)
 8002994:	705a      	strb	r2, [r3, #1]
    return return_val;
 8002996:	79fb      	ldrb	r3, [r7, #7]
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000084 	.word	0x20000084

080029a8 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_state_master = MASTER_LED_STATE_DEMO;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <task_led_ctrl_animate_state_demo+0x1c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <task_led_ctrl_animate_state_demo+0x20>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000084 	.word	0x20000084
 80029c8:	2000039c 	.word	0x2000039c

080029cc <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_state_master = MASTER_LED_STATE_FIXED;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <task_led_ctrl_animate_state_fixed+0x20>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
    g_task_led_ctrl.led_state = LED_STATE_FIRST; // set first state
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <task_led_ctrl_animate_state_fixed+0x20>)
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
    g_animation_iterations = 0;
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <task_led_ctrl_animate_state_fixed+0x24>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	20000084 	.word	0x20000084
 80029f0:	2000039c 	.word	0x2000039c

080029f4 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.led_state_master;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <task_led_ctrl_animate_state+0x14>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000084 	.word	0x20000084

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Handler+0x1c>)
 8002a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a68:	f001 fd10 	bl	800448c <xTaskGetSchedulerState>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a72:	f002 fc31 	bl	80052d8 <xPortSysTickHandler>
  }
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a84:	2100      	movs	r1, #0
 8002a86:	f06f 0004 	mvn.w	r0, #4
 8002a8a:	f7ff ffbf 	bl	8002a0c <__NVIC_SetPriority>
#endif
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9a:	f3ef 8305 	mrs	r3, IPSR
 8002a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aa6:	f06f 0305 	mvn.w	r3, #5
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	e00c      	b.n	8002ac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <osKernelInitialize+0x44>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <osKernelInitialize+0x44>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	e002      	b.n	8002ac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200003a0 	.word	0x200003a0

08002adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ae2:	f3ef 8305 	mrs	r3, IPSR
 8002ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002aee:	f06f 0305 	mvn.w	r3, #5
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	e010      	b.n	8002b18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <osKernelStart+0x48>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d109      	bne.n	8002b12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002afe:	f7ff ffbf 	bl	8002a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <osKernelStart+0x48>)
 8002b04:	2202      	movs	r2, #2
 8002b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b08:	f001 f866 	bl	8003bd8 <vTaskStartScheduler>
      stat = osOK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	e002      	b.n	8002b18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200003a0 	.word	0x200003a0

08002b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af04      	add	r7, sp, #16
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b38:	f3ef 8305 	mrs	r3, IPSR
 8002b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d17e      	bne.n	8002c42 <osThreadNew+0x11a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07b      	beq.n	8002c42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b4e:	2318      	movs	r3, #24
 8002b50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d045      	beq.n	8002bee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <osThreadNew+0x48>
        name = attr->name;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <osThreadNew+0x6e>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b38      	cmp	r3, #56	; 0x38
 8002b88:	d805      	bhi.n	8002b96 <osThreadNew+0x6e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <osThreadNew+0x72>
        return (NULL);
 8002b96:	2300      	movs	r3, #0
 8002b98:	e054      	b.n	8002c44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <osThreadNew+0xa8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b5b      	cmp	r3, #91	; 0x5b
 8002bb8:	d90a      	bls.n	8002bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <osThreadNew+0xa8>
        mem = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e010      	b.n	8002bf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <osThreadNew+0xca>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <osThreadNew+0xca>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <osThreadNew+0xca>
          mem = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e001      	b.n	8002bf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c00:	9202      	str	r2, [sp, #8]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fe0c 	bl	800382c <xTaskCreateStatic>
 8002c14:	4603      	mov	r3, r0
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	e013      	b.n	8002c42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fe57 	bl	80038e6 <xTaskCreate>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <osThreadNew+0x11a>
            hTask = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c42:	693b      	ldr	r3, [r7, #16]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c54:	f3ef 8305 	mrs	r3, IPSR
 8002c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <osDelay+0x1c>
    stat = osErrorISR;
 8002c60:	f06f 0305 	mvn.w	r3, #5
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e007      	b.n	8002c78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 ff7c 	bl	8003b70 <vTaskDelay>
    }
  }

  return (stat);
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8002c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	200003a4 	.word	0x200003a4
 8002cb4:	20000400 	.word	0x20000400

08002cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8002cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20000600 	.word	0x20000600
 8002ce8:	2000065c 	.word	0x2000065c

08002cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 0208 	add.w	r2, r3, #8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f103 0208 	add.w	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f103 0208 	add.w	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da4:	d103      	bne.n	8002dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e00c      	b.n	8002dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3308      	adds	r3, #8
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e002      	b.n	8002dbc <vListInsert+0x2e>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d2f6      	bcs.n	8002db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6852      	ldr	r2, [r2, #4]
 8002e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d103      	bne.n	8002e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1e5a      	subs	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e7e:	f002 f999 	bl	80051b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	441a      	add	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d114      	bne.n	8002efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01a      	beq.n	8002f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3310      	adds	r3, #16
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 f915 	bl	8004110 <xTaskRemoveFromEventList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <xQueueGenericReset+0xcc>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	e009      	b.n	8002f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3310      	adds	r3, #16
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fef2 	bl	8002cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3324      	adds	r3, #36	; 0x24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff feed 	bl	8002cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f12:	f002 f97f 	bl	8005214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08e      	sub	sp, #56	; 0x38
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <xQueueGenericCreateStatic+0x52>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <xQueueGenericCreateStatic+0x56>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericCreateStatic+0x58>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	623b      	str	r3, [r7, #32]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <xQueueGenericCreateStatic+0x7e>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericCreateStatic+0x82>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericCreateStatic+0x84>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fb      	str	r3, [r7, #28]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fc2:	2350      	movs	r3, #80	; 0x50
 8002fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b50      	cmp	r3, #80	; 0x50
 8002fca:	d00a      	beq.n	8002fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	61bb      	str	r3, [r7, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f805 	bl	8003014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800300c:	4618      	mov	r0, r3
 800300e:	3730      	adds	r7, #48	; 0x30
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e002      	b.n	8003036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003042:	2101      	movs	r1, #1
 8003044:	69b8      	ldr	r0, [r7, #24]
 8003046:	f7ff ff05 	bl	8002e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xQueueGenericSend+0x32>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <xQueueGenericSend+0x40>
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueGenericSend+0x44>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueGenericSend+0x46>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <xQueueGenericSend+0x60>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d103      	bne.n	80030ca <xQueueGenericSend+0x6e>
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <xQueueGenericSend+0x72>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <xQueueGenericSend+0x74>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <xQueueGenericSend+0x8e>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	623b      	str	r3, [r7, #32]
}
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ea:	f001 f9cf 	bl	800448c <xTaskGetSchedulerState>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <xQueueGenericSend+0x9e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <xQueueGenericSend+0xa2>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueGenericSend+0xa4>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericSend+0xbe>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61fb      	str	r3, [r7, #28]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800311a:	f002 f84b 	bl	80051b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <xQueueGenericSend+0xd4>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d129      	bne.n	8003184 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003136:	f000 fa0b 	bl	8003550 <prvCopyDataToQueue>
 800313a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ffe1 	bl	8004110 <xTaskRemoveFromEventList>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <xQueueGenericSend+0x1f8>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	e00a      	b.n	800317c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800316c:	4b39      	ldr	r3, [pc, #228]	; (8003254 <xQueueGenericSend+0x1f8>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800317c:	f002 f84a 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 8003180:	2301      	movs	r3, #1
 8003182:	e063      	b.n	800324c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800318a:	f002 f843 	bl	8005214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800318e:	2300      	movs	r3, #0
 8003190:	e05c      	b.n	800324c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4618      	mov	r0, r3
 800319e:	f001 f81b 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031a6:	f002 f835 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031aa:	f000 fd7b 	bl	8003ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ae:	f002 f801 	bl	80051b4 <vPortEnterCritical>
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031be:	d103      	bne.n	80031c8 <xQueueGenericSend+0x16c>
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d4:	d103      	bne.n	80031de <xQueueGenericSend+0x182>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031de:	f002 f819 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 f80a 	bl	8004204 <xTaskCheckForTimeOut>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d124      	bne.n	8003240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f8:	f000 faa2 	bl	8003740 <prvIsQueueFull>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	3310      	adds	r3, #16
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ff30 	bl	8004070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003212:	f000 fa2d 	bl	8003670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003216:	f000 fd53 	bl	8003cc0 <xTaskResumeAll>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af7c 	bne.w	800311a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <xQueueGenericSend+0x1f8>)
 8003224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	e772      	b.n	800311a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003236:	f000 fa1b 	bl	8003670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800323a:	f000 fd41 	bl	8003cc0 <xTaskResumeAll>
 800323e:	e76c      	b.n	800311a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003242:	f000 fa15 	bl	8003670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003246:	f000 fd3b 	bl	8003cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800324a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800324c:	4618      	mov	r0, r3
 800324e:	3738      	adds	r7, #56	; 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	e000ed04 	.word	0xe000ed04

08003258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b090      	sub	sp, #64	; 0x40
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <xQueueGenericSendFromISR+0x3c>
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <xQueueGenericSendFromISR+0x40>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <xQueueGenericSendFromISR+0x42>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d103      	bne.n	80032c2 <xQueueGenericSendFromISR+0x6a>
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <xQueueGenericSendFromISR+0x6e>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <xQueueGenericSendFromISR+0x70>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	623b      	str	r3, [r7, #32]
}
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032e2:	f002 f849 	bl	8005378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032e6:	f3ef 8211 	mrs	r2, BASEPRI
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	61fa      	str	r2, [r7, #28]
 80032fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <xQueueGenericSendFromISR+0xbc>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d12f      	bne.n	8003374 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800331a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800332a:	f000 f911 	bl	8003550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800332e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003336:	d112      	bne.n	800335e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	3324      	adds	r3, #36	; 0x24
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fee3 	bl	8004110 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e007      	b.n	800336e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800335e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003362:	3301      	adds	r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	b25a      	sxtb	r2, r3
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800336e:	2301      	movs	r3, #1
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003372:	e001      	b.n	8003378 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003374:	2300      	movs	r3, #0
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003386:	4618      	mov	r0, r3
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <xQueueReceive+0x30>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	623b      	str	r3, [r7, #32]
}
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueReceive+0x3e>
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueReceive+0x42>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueReceive+0x44>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xQueueReceive+0x5e>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61fb      	str	r3, [r7, #28]
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ee:	f001 f84d 	bl	800448c <xTaskGetSchedulerState>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <xQueueReceive+0x6e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <xQueueReceive+0x72>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueReceive+0x74>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <xQueueReceive+0x8e>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	61bb      	str	r3, [r7, #24]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800341e:	f001 fec9 	bl	80051b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01f      	beq.n	800346e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003432:	f000 f8f7 	bl	8003624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	3310      	adds	r3, #16
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fe60 	bl	8004110 <xTaskRemoveFromEventList>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <xQueueReceive+0x1bc>)
 8003458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003466:	f001 fed5 	bl	8005214 <vPortExitCritical>
				return pdPASS;
 800346a:	2301      	movs	r3, #1
 800346c:	e069      	b.n	8003542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003474:	f001 fece 	bl	8005214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003478:	2300      	movs	r3, #0
 800347a:	e062      	b.n	8003542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003482:	f107 0310 	add.w	r3, r7, #16
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fea6 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003490:	f001 fec0 	bl	8005214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003494:	f000 fc06 	bl	8003ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003498:	f001 fe8c 	bl	80051b4 <vPortEnterCritical>
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a8:	d103      	bne.n	80034b2 <xQueueReceive+0x122>
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034be:	d103      	bne.n	80034c8 <xQueueReceive+0x138>
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c8:	f001 fea4 	bl	8005214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034cc:	1d3a      	adds	r2, r7, #4
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe95 	bl	8004204 <xTaskCheckForTimeOut>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d123      	bne.n	8003528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e2:	f000 f917 	bl	8003714 <prvIsQueueEmpty>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fdbb 	bl	8004070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034fc:	f000 f8b8 	bl	8003670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003500:	f000 fbde 	bl	8003cc0 <xTaskResumeAll>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d189      	bne.n	800341e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <xQueueReceive+0x1bc>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	e780      	b.n	800341e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800351c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351e:	f000 f8a7 	bl	8003670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003522:	f000 fbcd 	bl	8003cc0 <xTaskResumeAll>
 8003526:	e77a      	b.n	800341e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352a:	f000 f8a1 	bl	8003670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800352e:	f000 fbc7 	bl	8003cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003534:	f000 f8ee 	bl	8003714 <prvIsQueueEmpty>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f43f af6f 	beq.w	800341e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003542:	4618      	mov	r0, r3
 8003544:	3730      	adds	r7, #48	; 0x30
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d14d      	bne.n	8003612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 ffa4 	bl	80044c8 <xTaskPriorityDisinherit>
 8003580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e043      	b.n	8003612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d119      	bne.n	80035c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6858      	ldr	r0, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	461a      	mov	r2, r3
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	f008 fa83 	bl	800baa6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	441a      	add	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d32b      	bcc.n	8003612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e026      	b.n	8003612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68d8      	ldr	r0, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	461a      	mov	r2, r3
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	f008 fa69 	bl	800baa6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	425b      	negs	r3, r3
 80035de:	441a      	add	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	425b      	negs	r3, r3
 80035fa:	441a      	add	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d105      	bne.n	8003612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3b01      	subs	r3, #1
 8003610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800361a:	697b      	ldr	r3, [r7, #20]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	441a      	add	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	d303      	bcc.n	8003658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68d9      	ldr	r1, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	461a      	mov	r2, r3
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f008 fa1f 	bl	800baa6 <memcpy>
	}
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003678:	f001 fd9c 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003684:	e011      	b.n	80036aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3324      	adds	r3, #36	; 0x24
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fd3c 	bl	8004110 <xTaskRemoveFromEventList>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800369e:	f000 fe13 	bl	80042c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dce9      	bgt.n	8003686 <prvUnlockQueue+0x16>
 80036b2:	e000      	b.n	80036b6 <prvUnlockQueue+0x46>
					break;
 80036b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036be:	f001 fda9 	bl	8005214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036c2:	f001 fd77 	bl	80051b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ce:	e011      	b.n	80036f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3310      	adds	r3, #16
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd17 	bl	8004110 <xTaskRemoveFromEventList>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036e8:	f000 fdee 	bl	80042c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036ec:	7bbb      	ldrb	r3, [r7, #14]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dce9      	bgt.n	80036d0 <prvUnlockQueue+0x60>
 80036fc:	e000      	b.n	8003700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003708:	f001 fd84 	bl	8005214 <vPortExitCritical>
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800371c:	f001 fd4a 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e001      	b.n	8003732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003732:	f001 fd6f 	bl	8005214 <vPortExitCritical>

	return xReturn;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003748:	f001 fd34 	bl	80051b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	429a      	cmp	r2, r3
 8003756:	d102      	bne.n	800375e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e001      	b.n	8003762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003762:	f001 fd57 	bl	8005214 <vPortExitCritical>

	return xReturn;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e014      	b.n	80037aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <vQueueAddToRegistry+0x50>)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800378c:	490c      	ldr	r1, [pc, #48]	; (80037c0 <vQueueAddToRegistry+0x50>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <vQueueAddToRegistry+0x50>)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037a2:	e006      	b.n	80037b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d9e7      	bls.n	8003780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000a5c 	.word	0x20000a5c

080037c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037d4:	f001 fcee 	bl	80051b4 <vPortEnterCritical>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e4:	d103      	bne.n	80037ee <vQueueWaitForMessageRestricted+0x2a>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fa:	d103      	bne.n	8003804 <vQueueWaitForMessageRestricted+0x40>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003804:	f001 fd06 	bl	8005214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fc4d 	bl	80040b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff26 	bl	8003670 <prvUnlockQueue>
	}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af04      	add	r7, sp, #16
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	623b      	str	r3, [r7, #32]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xTaskCreateStatic+0x46>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61fb      	str	r3, [r7, #28]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003872:	235c      	movs	r3, #92	; 0x5c
 8003874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b5c      	cmp	r3, #92	; 0x5c
 800387a:	d00a      	beq.n	8003892 <xTaskCreateStatic+0x66>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	61bb      	str	r3, [r7, #24]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01e      	beq.n	80038d8 <xTaskCreateStatic+0xac>
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038b2:	2300      	movs	r3, #0
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f850 	bl	8003970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d2:	f000 f8dd 	bl	8003a90 <prvAddNewTaskToReadyList>
 80038d6:	e001      	b.n	80038dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038dc:	697b      	ldr	r3, [r7, #20]
	}
 80038de:	4618      	mov	r0, r3
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08c      	sub	sp, #48	; 0x30
 80038ea:	af04      	add	r7, sp, #16
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fd7c 	bl	80053f8 <pvPortMalloc>
 8003900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003908:	205c      	movs	r0, #92	; 0x5c
 800390a:	f001 fd75 	bl	80053f8 <pvPortMalloc>
 800390e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
 800391c:	e005      	b.n	800392a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f001 fe36 	bl	8005590 <vPortFree>
 8003924:	e001      	b.n	800392a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	2300      	movs	r3, #0
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f80e 	bl	8003970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	69f8      	ldr	r0, [r7, #28]
 8003956:	f000 f89b 	bl	8003a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e002      	b.n	8003966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003966:	69bb      	ldr	r3, [r7, #24]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	461a      	mov	r2, r3
 8003988:	21a5      	movs	r1, #165	; 0xa5
 800398a:	f008 f81b 	bl	800b9c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003998:	3b01      	subs	r3, #1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f023 0307 	bic.w	r3, r3, #7
 80039a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	617b      	str	r3, [r7, #20]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01f      	beq.n	8003a0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e012      	b.n	80039fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	7819      	ldrb	r1, [r3, #0]
 80039dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	3334      	adds	r3, #52	; 0x34
 80039e4:	460a      	mov	r2, r1
 80039e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d9e9      	bls.n	80039d4 <prvInitialiseNewTask+0x64>
 8003a00:	e000      	b.n	8003a04 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	e003      	b.n	8003a16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2b37      	cmp	r3, #55	; 0x37
 8003a1a:	d901      	bls.n	8003a20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a1c:	2337      	movs	r3, #55	; 0x37
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	3304      	adds	r3, #4
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff f978 	bl	8002d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f973 	bl	8002d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f001 fa70 	bl	8004f54 <pxPortInitialiseStack>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a98:	f001 fb8c 	bl	80051b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d110      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003abc:	f000 fc28 	bl	8004310 <prvInitialiseTaskLists>
 8003ac0:	e00d      	b.n	8003ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <prvAddNewTaskToReadyList+0xcc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d802      	bhi.n	8003ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003ae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <prvAddNewTaskToReadyList+0xd4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d903      	bls.n	8003b04 <prvAddNewTaskToReadyList+0x74>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <prvAddNewTaskToReadyList+0xd4>)
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <prvAddNewTaskToReadyList+0xd8>)
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7ff f913 	bl	8002d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b20:	f001 fb78 	bl	8005214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <prvAddNewTaskToReadyList+0xcc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d207      	bcs.n	8003b4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <prvAddNewTaskToReadyList+0xdc>)
 8003b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000f70 	.word	0x20000f70
 8003b58:	20000a9c 	.word	0x20000a9c
 8003b5c:	20000f7c 	.word	0x20000f7c
 8003b60:	20000f8c 	.word	0x20000f8c
 8003b64:	20000f78 	.word	0x20000f78
 8003b68:	20000aa0 	.word	0x20000aa0
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d017      	beq.n	8003bb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <vTaskDelay+0x60>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <vTaskDelay+0x30>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ba0:	f000 f880 	bl	8003ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fe32 	bl	8004810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bac:	f000 f888 	bl	8003cc0 <xTaskResumeAll>
 8003bb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <vTaskDelay+0x64>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000f98 	.word	0x20000f98
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003be6:	463a      	mov	r2, r7
 8003be8:	1d39      	adds	r1, r7, #4
 8003bea:	f107 0308 	add.w	r3, r7, #8
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f848 	bl	8002c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	9202      	str	r2, [sp, #8]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	460a      	mov	r2, r1
 8003c06:	4921      	ldr	r1, [pc, #132]	; (8003c8c <vTaskStartScheduler+0xb4>)
 8003c08:	4821      	ldr	r0, [pc, #132]	; (8003c90 <vTaskStartScheduler+0xb8>)
 8003c0a:	f7ff fe0f 	bl	800382c <xTaskCreateStatic>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <vTaskStartScheduler+0xbc>)
 8003c12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <vTaskStartScheduler+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e001      	b.n	8003c26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c2c:	f000 fe44 	bl	80048b8 <xTimerCreateTimerTask>
 8003c30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d116      	bne.n	8003c66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	613b      	str	r3, [r7, #16]
}
 8003c4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <vTaskStartScheduler+0xc0>)
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <vTaskStartScheduler+0xc4>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <vTaskStartScheduler+0xc8>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c60:	f001 fa06 	bl	8005070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c64:	e00e      	b.n	8003c84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c6c:	d10a      	bne.n	8003c84 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60fb      	str	r3, [r7, #12]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <vTaskStartScheduler+0xaa>
}
 8003c84:	bf00      	nop
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	0800c6c8 	.word	0x0800c6c8
 8003c90:	080042e1 	.word	0x080042e1
 8003c94:	20000f94 	.word	0x20000f94
 8003c98:	20000f90 	.word	0x20000f90
 8003c9c:	20000f7c 	.word	0x20000f7c
 8003ca0:	20000f74 	.word	0x20000f74

08003ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <vTaskSuspendAll+0x18>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <vTaskSuspendAll+0x18>)
 8003cb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000f98 	.word	0x20000f98

08003cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cce:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <xTaskResumeAll+0x118>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xTaskResumeAll+0x2c>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	603b      	str	r3, [r7, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cec:	f001 fa62 	bl	80051b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <xTaskResumeAll+0x118>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <xTaskResumeAll+0x118>)
 8003cf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <xTaskResumeAll+0x118>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d162      	bne.n	8003dc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <xTaskResumeAll+0x11c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d05e      	beq.n	8003dc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d0a:	e02f      	b.n	8003d6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0c:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <xTaskResumeAll+0x120>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3318      	adds	r3, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff f871 	bl	8002e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f86c 	bl	8002e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <xTaskResumeAll+0x124>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d903      	bls.n	8003d3c <xTaskResumeAll+0x7c>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <xTaskResumeAll+0x124>)
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <xTaskResumeAll+0x128>)
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7fe fff7 	bl	8002d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <xTaskResumeAll+0x12c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <xTaskResumeAll+0x130>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <xTaskResumeAll+0x120>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1cb      	bne.n	8003d0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d7a:	f000 fb67 	bl	800444c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <xTaskResumeAll+0x134>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d8a:	f000 f859 	bl	8003e40 <xTaskIncrementTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <xTaskResumeAll+0x130>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f1      	bne.n	8003d8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <xTaskResumeAll+0x134>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <xTaskResumeAll+0x130>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskResumeAll+0x138>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dc8:	f001 fa24 	bl	8005214 <vPortExitCritical>

	return xAlreadyYielded;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000f98 	.word	0x20000f98
 8003ddc:	20000f70 	.word	0x20000f70
 8003de0:	20000f30 	.word	0x20000f30
 8003de4:	20000f78 	.word	0x20000f78
 8003de8:	20000aa0 	.word	0x20000aa0
 8003dec:	20000a9c 	.word	0x20000a9c
 8003df0:	20000f84 	.word	0x20000f84
 8003df4:	20000f80 	.word	0x20000f80
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <xTaskGetTickCount+0x1c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e08:	687b      	ldr	r3, [r7, #4]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000f74 	.word	0x20000f74

08003e1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e22:	f001 faa9 	bl	8005378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <xTaskGetTickCountFromISR+0x20>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e30:	683b      	ldr	r3, [r7, #0]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000f74 	.word	0x20000f74

08003e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4a:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <xTaskIncrementTick+0x148>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 808f 	bne.w	8003f72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e54:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <xTaskIncrementTick+0x14c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <xTaskIncrementTick+0x14c>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d120      	bne.n	8003eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e68:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	603b      	str	r3, [r7, #0]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <xTaskIncrementTick+0x46>
 8003e88:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <xTaskIncrementTick+0x154>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3f      	ldr	r2, [pc, #252]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <xTaskIncrementTick+0x154>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <xTaskIncrementTick+0x158>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <xTaskIncrementTick+0x158>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f000 fad1 	bl	800444c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d349      	bcc.n	8003f48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec4:	601a      	str	r2, [r3, #0]
					break;
 8003ec6:	e03f      	b.n	8003f48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <xTaskIncrementTick+0x150>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d203      	bcs.n	8003ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <xTaskIncrementTick+0x15c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ee6:	e02f      	b.n	8003f48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe ff87 	bl	8002e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3318      	adds	r3, #24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe ff7e 	bl	8002e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <xTaskIncrementTick+0x160>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d903      	bls.n	8003f18 <xTaskIncrementTick+0xd8>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <xTaskIncrementTick+0x160>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <xTaskIncrementTick+0x164>)
 8003f26:	441a      	add	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fe ff09 	bl	8002d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <xTaskIncrementTick+0x168>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d3b8      	bcc.n	8003eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f46:	e7b5      	b.n	8003eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <xTaskIncrementTick+0x168>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4915      	ldr	r1, [pc, #84]	; (8003fa4 <xTaskIncrementTick+0x164>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d901      	bls.n	8003f64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <xTaskIncrementTick+0x16c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e004      	b.n	8003f7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <xTaskIncrementTick+0x170>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <xTaskIncrementTick+0x170>)
 8003f7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000f98 	.word	0x20000f98
 8003f8c:	20000f74 	.word	0x20000f74
 8003f90:	20000f28 	.word	0x20000f28
 8003f94:	20000f2c 	.word	0x20000f2c
 8003f98:	20000f88 	.word	0x20000f88
 8003f9c:	20000f90 	.word	0x20000f90
 8003fa0:	20000f78 	.word	0x20000f78
 8003fa4:	20000aa0 	.word	0x20000aa0
 8003fa8:	20000a9c 	.word	0x20000a9c
 8003fac:	20000f84 	.word	0x20000f84
 8003fb0:	20000f80 	.word	0x20000f80

08003fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <vTaskSwitchContext+0xa8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <vTaskSwitchContext+0xac>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fc8:	e041      	b.n	800404e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <vTaskSwitchContext+0xac>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <vTaskSwitchContext+0xb0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e010      	b.n	8003ffa <vTaskSwitchContext+0x46>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <vTaskSwitchContext+0x3e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <vTaskSwitchContext+0xb4>)
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0e4      	beq.n	8003fd8 <vTaskSwitchContext+0x24>
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <vTaskSwitchContext+0xb4>)
 800401a:	4413      	add	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3308      	adds	r3, #8
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <vTaskSwitchContext+0x8a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <vTaskSwitchContext+0xb8>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4a06      	ldr	r2, [pc, #24]	; (8004064 <vTaskSwitchContext+0xb0>)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6013      	str	r3, [r2, #0]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000f98 	.word	0x20000f98
 8004060:	20000f84 	.word	0x20000f84
 8004064:	20000f78 	.word	0x20000f78
 8004068:	20000aa0 	.word	0x20000aa0
 800406c:	20000a9c 	.word	0x20000a9c

08004070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <vTaskPlaceOnEventList+0x44>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3318      	adds	r3, #24
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fe75 	bl	8002d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a4:	2101      	movs	r1, #1
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f000 fbb2 	bl	8004810 <prvAddCurrentTaskToDelayedList>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000a9c 	.word	0x20000a9c

080040b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <vTaskPlaceOnEventListRestricted+0x54>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fe fe2c 	bl	8002d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f000 fb87 	bl	8004810 <prvAddCurrentTaskToDelayedList>
	}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000a9c 	.word	0x20000a9c

08004110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3318      	adds	r3, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fe5d 	bl	8002e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <xTaskRemoveFromEventList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fe54 	bl	8002e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <xTaskRemoveFromEventList+0x5c>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <xTaskRemoveFromEventList+0xb8>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fddf 	bl	8002d46 <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <xTaskRemoveFromEventList+0xbc>)
 8004192:	f7fe fdd8 	bl	8002d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTaskRemoveFromEventList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <xTaskRemoveFromEventList+0xc4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000f98 	.word	0x20000f98
 80041c4:	20000f78 	.word	0x20000f78
 80041c8:	20000aa0 	.word	0x20000aa0
 80041cc:	20000f30 	.word	0x20000f30
 80041d0:	20000a9c 	.word	0x20000a9c
 80041d4:	20000f84 	.word	0x20000f84

080041d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <vTaskInternalSetTimeOutState+0x24>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <vTaskInternalSetTimeOutState+0x28>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	20000f88 	.word	0x20000f88
 8004200:	20000f74 	.word	0x20000f74

08004204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004246:	f000 ffb5 	bl	80051b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <xTaskCheckForTimeOut+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004262:	d102      	bne.n	800426a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e023      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <xTaskCheckForTimeOut+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d007      	beq.n	8004286 <xTaskCheckForTimeOut+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e015      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d20b      	bcs.n	80042a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff9b 	bl	80041d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e004      	b.n	80042b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f000 ffaf 	bl	8005214 <vPortExitCritical>

	return xReturn;
 80042b6:	69fb      	ldr	r3, [r7, #28]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000f74 	.word	0x20000f74
 80042c4:	20000f88 	.word	0x20000f88

080042c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <vTaskMissedYield+0x14>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000f84 	.word	0x20000f84

080042e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e8:	f000 f852 	bl	8004390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <prvIdleTask+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d9f9      	bls.n	80042e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <prvIdleTask+0x2c>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004304:	e7f0      	b.n	80042e8 <prvIdleTask+0x8>
 8004306:	bf00      	nop
 8004308:	20000aa0 	.word	0x20000aa0
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e00c      	b.n	8004336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <prvInitialiseTaskLists+0x60>)
 8004328:	4413      	add	r3, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fcde 	bl	8002cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b37      	cmp	r3, #55	; 0x37
 800433a:	d9ef      	bls.n	800431c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800433e:	f7fe fcd5 	bl	8002cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004344:	f7fe fcd2 	bl	8002cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <prvInitialiseTaskLists+0x6c>)
 800434a:	f7fe fccf 	bl	8002cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x70>)
 8004350:	f7fe fccc 	bl	8002cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <prvInitialiseTaskLists+0x74>)
 8004356:	f7fe fcc9 	bl	8002cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x78>)
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvInitialiseTaskLists+0x7c>)
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000aa0 	.word	0x20000aa0
 8004374:	20000f00 	.word	0x20000f00
 8004378:	20000f14 	.word	0x20000f14
 800437c:	20000f30 	.word	0x20000f30
 8004380:	20000f44 	.word	0x20000f44
 8004384:	20000f5c 	.word	0x20000f5c
 8004388:	20000f28 	.word	0x20000f28
 800438c:	20000f2c 	.word	0x20000f2c

08004390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004396:	e019      	b.n	80043cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004398:	f000 ff0c 	bl	80051b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fd29 	bl	8002e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c2:	f000 ff27 	bl	8005214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f810 	bl	80043ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e1      	bne.n	8004398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000f44 	.word	0x20000f44
 80043e4:	20000f70 	.word	0x20000f70
 80043e8:	20000f58 	.word	0x20000f58

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f8c4 	bl	8005590 <vPortFree>
				vPortFree( pxTCB );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f001 f8c1 	bl	8005590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800440e:	e018      	b.n	8004442 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004416:	2b01      	cmp	r3, #1
 8004418:	d103      	bne.n	8004422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 f8b8 	bl	8005590 <vPortFree>
	}
 8004420:	e00f      	b.n	8004442 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004428:	2b02      	cmp	r3, #2
 800442a:	d00a      	beq.n	8004442 <prvDeleteTCB+0x56>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <prvDeleteTCB+0x54>
	}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004464:	e008      	b.n	8004478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000f28 	.word	0x20000f28
 8004488:	20000f90 	.word	0x20000f90

0800448c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <xTaskGetSchedulerState+0x34>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449a:	2301      	movs	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	e008      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <xTaskGetSchedulerState+0x38>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044a8:	2302      	movs	r3, #2
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e001      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b2:	687b      	ldr	r3, [r7, #4]
	}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000f7c 	.word	0x20000f7c
 80044c4:	20000f98 	.word	0x20000f98

080044c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d056      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <xTaskPriorityDisinherit+0xd0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d00a      	beq.n	80044fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	429a      	cmp	r2, r3
 8004530:	d02c      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d128      	bne.n	800458c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fc5e 	bl	8002e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <xTaskPriorityDisinherit+0xa4>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <xTaskPriorityDisinherit+0xd8>)
 800457a:	441a      	add	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fbdf 	bl	8002d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	697b      	ldr	r3, [r7, #20]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000a9c 	.word	0x20000a9c
 800459c:	20000f78 	.word	0x20000f78
 80045a0:	20000aa0 	.word	0x20000aa0

080045a4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80045b2:	f000 fdff 	bl	80051b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80045b6:	4b26      	ldr	r3, [pc, #152]	; (8004650 <xTaskNotifyWait+0xac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d01a      	beq.n	80045fa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80045c4:	4b22      	ldr	r3, [pc, #136]	; (8004650 <xTaskNotifyWait+0xac>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	43d2      	mvns	r2, r2
 80045ce:	400a      	ands	r2, r1
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80045d2:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <xTaskNotifyWait+0xac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045e2:	2101      	movs	r1, #1
 80045e4:	6838      	ldr	r0, [r7, #0]
 80045e6:	f000 f913 	bl	8004810 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <xTaskNotifyWait+0xb0>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80045fa:	f000 fe0b 	bl	8005214 <vPortExitCritical>

		taskENTER_CRITICAL();
 80045fe:	f000 fdd9 	bl	80051b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004608:	4b11      	ldr	r3, [pc, #68]	; (8004650 <xTaskNotifyWait+0xac>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskNotifyWait+0xac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d002      	beq.n	8004626 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e008      	b.n	8004638 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <xTaskNotifyWait+0xac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	43d2      	mvns	r2, r2
 8004630:	400a      	ands	r2, r1
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <xTaskNotifyWait+0xac>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004642:	f000 fde7 	bl	8005214 <vPortExitCritical>

		return xReturn;
 8004646:	697b      	ldr	r3, [r7, #20]
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000a9c 	.word	0x20000a9c
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004668:	2301      	movs	r3, #1
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004688:	f000 fe76 	bl	8005378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004690:	f3ef 8211 	mrs	r2, BASEPRI
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	623a      	str	r2, [r7, #32]
 80046a6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80046a8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d828      	bhi.n	8004724 <xTaskGenericNotifyFromISR+0xcc>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <xTaskGenericNotifyFromISR+0x80>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	08004745 	.word	0x08004745
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046fb 	.word	0x080046fb
 80046e4:	08004707 	.word	0x08004707
 80046e8:	0800470f 	.word	0x0800470f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80046f8:	e027      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004704:	e021      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800470c:	e01d      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800470e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004712:	2b02      	cmp	r3, #2
 8004714:	d003      	beq.n	800471e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800471c:	e015      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800471e:	2300      	movs	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004722:	e012      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472c:	d00c      	beq.n	8004748 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61bb      	str	r3, [r7, #24]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xTaskGenericNotifyFromISR+0xea>
					break;
 8004744:	bf00      	nop
 8004746:	e000      	b.n	800474a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004748:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800474a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800474e:	2b01      	cmp	r3, #1
 8004750:	d146      	bne.n	80047e0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	617b      	str	r3, [r7, #20]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <xTaskGenericNotifyFromISR+0x1a0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11d      	bne.n	80047b4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fb3f 	bl	8002e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <xTaskGenericNotifyFromISR+0x1a4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d903      	bls.n	8004796 <xTaskGenericNotifyFromISR+0x13e>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <xTaskGenericNotifyFromISR+0x1a4>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <xTaskGenericNotifyFromISR+0x1a8>)
 80047a4:	441a      	add	r2, r3
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe faca 	bl	8002d46 <vListInsertEnd>
 80047b2:	e005      	b.n	80047c0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	3318      	adds	r3, #24
 80047b8:	4619      	mov	r1, r3
 80047ba:	4812      	ldr	r0, [pc, #72]	; (8004804 <xTaskGenericNotifyFromISR+0x1ac>)
 80047bc:	f7fe fac3 	bl	8002d46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b10      	ldr	r3, [pc, #64]	; (8004808 <xTaskGenericNotifyFromISR+0x1b0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d908      	bls.n	80047e0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80047ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <xTaskGenericNotifyFromISR+0x1b4>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f383 8811 	msr	BASEPRI, r3
}
 80047ea:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3738      	adds	r7, #56	; 0x38
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000f98 	.word	0x20000f98
 80047fc:	20000f78 	.word	0x20000f78
 8004800:	20000aa0 	.word	0x20000aa0
 8004804:	20000f30 	.word	0x20000f30
 8004808:	20000a9c 	.word	0x20000a9c
 800480c:	20000f84 	.word	0x20000f84

08004810 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe faea 	bl	8002e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004832:	d10a      	bne.n	800484a <prvAddCurrentTaskToDelayedList+0x3a>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483a:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4819      	ldr	r0, [pc, #100]	; (80048a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004844:	f7fe fa7f 	bl	8002d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004848:	e026      	b.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d209      	bcs.n	8004876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fa8d 	bl	8002d8e <vListInsert>
}
 8004874:	e010      	b.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe fa83 	bl	8002d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d202      	bcs.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000f74 	.word	0x20000f74
 80048a4:	20000a9c 	.word	0x20000a9c
 80048a8:	20000f5c 	.word	0x20000f5c
 80048ac:	20000f2c 	.word	0x20000f2c
 80048b0:	20000f28 	.word	0x20000f28
 80048b4:	20000f90 	.word	0x20000f90

080048b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048c2:	f000 fb07 	bl	8004ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <xTimerCreateTimerTask+0x80>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d021      	beq.n	8004912 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048d6:	1d3a      	adds	r2, r7, #4
 80048d8:	f107 0108 	add.w	r1, r7, #8
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f9e9 	bl	8002cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	9202      	str	r2, [sp, #8]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2302      	movs	r3, #2
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	460a      	mov	r2, r1
 80048f8:	4910      	ldr	r1, [pc, #64]	; (800493c <xTimerCreateTimerTask+0x84>)
 80048fa:	4811      	ldr	r0, [pc, #68]	; (8004940 <xTimerCreateTimerTask+0x88>)
 80048fc:	f7fe ff96 	bl	800382c <xTaskCreateStatic>
 8004900:	4603      	mov	r3, r0
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <xTimerCreateTimerTask+0x8c>)
 8004904:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTimerCreateTimerTask+0x8c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	613b      	str	r3, [r7, #16]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800492e:	697b      	ldr	r3, [r7, #20]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000fcc 	.word	0x20000fcc
 800493c:	0800c6d0 	.word	0x0800c6d0
 8004940:	08004a7d 	.word	0x08004a7d
 8004944:	20000fd0 	.word	0x20000fd0

08004948 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <xTimerGenericCommand+0x98>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02a      	beq.n	80049d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	dc18      	bgt.n	80049c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004990:	f7ff fd7c 	bl	800448c <xTaskGetSchedulerState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b02      	cmp	r3, #2
 8004998:	d109      	bne.n	80049ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <xTimerGenericCommand+0x98>)
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f107 0110 	add.w	r1, r7, #16
 80049a2:	2300      	movs	r3, #0
 80049a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a6:	f7fe fb59 	bl	800305c <xQueueGenericSend>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24
 80049ac:	e012      	b.n	80049d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <xTimerGenericCommand+0x98>)
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f107 0110 	add.w	r1, r7, #16
 80049b6:	2300      	movs	r3, #0
 80049b8:	2200      	movs	r2, #0
 80049ba:	f7fe fb4f 	bl	800305c <xQueueGenericSend>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24
 80049c0:	e008      	b.n	80049d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <xTimerGenericCommand+0x98>)
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f107 0110 	add.w	r1, r7, #16
 80049ca:	2300      	movs	r3, #0
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	f7fe fc43 	bl	8003258 <xQueueGenericSendFromISR>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3728      	adds	r7, #40	; 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000fcc 	.word	0x20000fcc

080049e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <prvProcessExpiredTimer+0x94>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe f9ff 	bl	8002e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d022      	beq.n	8004a56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	18d1      	adds	r1, r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f000 f8d1 	bl	8004bc4 <prvInsertTimerInActiveList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01f      	beq.n	8004a68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	2100      	movs	r1, #0
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f7ff ff88 	bl	8004948 <xTimerGenericCommand>
 8004a38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	4798      	blx	r3
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000fc4 	.word	0x20000fc4

08004a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f857 	bl	8004b3c <prvGetNextExpireTime>
 8004a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4619      	mov	r1, r3
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f803 	bl	8004aa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a9a:	f000 f8d5 	bl	8004c48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a9e:	e7f1      	b.n	8004a84 <prvTimerTask+0x8>

08004aa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aaa:	f7ff f8fb 	bl	8003ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f866 	bl	8004b84 <prvSampleTimeNow>
 8004ab8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d130      	bne.n	8004b22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <prvProcessTimerOrBlockTask+0x3c>
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d806      	bhi.n	8004adc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ace:	f7ff f8f7 	bl	8003cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff85 	bl	80049e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ada:	e024      	b.n	8004b26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <prvProcessTimerOrBlockTask+0x90>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <prvProcessTimerOrBlockTask+0x50>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <prvProcessTimerOrBlockTask+0x52>
 8004af0:	2300      	movs	r3, #0
 8004af2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <prvProcessTimerOrBlockTask+0x94>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f7fe fe5f 	bl	80037c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b06:	f7ff f8db 	bl	8003cc0 <xTaskResumeAll>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <prvProcessTimerOrBlockTask+0x98>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
}
 8004b20:	e001      	b.n	8004b26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b22:	f7ff f8cd 	bl	8003cc0 <xTaskResumeAll>
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000fc8 	.word	0x20000fc8
 8004b34:	20000fcc 	.word	0x20000fcc
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b44:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <prvGetNextExpireTime+0x44>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <prvGetNextExpireTime+0x16>
 8004b4e:	2201      	movs	r2, #1
 8004b50:	e000      	b.n	8004b54 <prvGetNextExpireTime+0x18>
 8004b52:	2200      	movs	r2, #0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <prvGetNextExpireTime+0x44>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e001      	b.n	8004b70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b70:	68fb      	ldr	r3, [r7, #12]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000fc4 	.word	0x20000fc4

08004b84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b8c:	f7ff f936 	bl	8003dfc <xTaskGetTickCount>
 8004b90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <prvSampleTimeNow+0x3c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d205      	bcs.n	8004ba8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b9c:	f000 f936 	bl	8004e0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e002      	b.n	8004bae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <prvSampleTimeNow+0x3c>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000fd4 	.word	0x20000fd4

08004bc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d812      	bhi.n	8004c10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	e01b      	b.n	8004c36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <prvInsertTimerInActiveList+0x7c>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe f8c0 	bl	8002d8e <vListInsert>
 8004c0e:	e012      	b.n	8004c36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d206      	bcs.n	8004c26 <prvInsertTimerInActiveList+0x62>
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e007      	b.n	8004c36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <prvInsertTimerInActiveList+0x80>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f7fe f8ac 	bl	8002d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000fc8 	.word	0x20000fc8
 8004c44:	20000fc4 	.word	0x20000fc4

08004c48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08e      	sub	sp, #56	; 0x38
 8004c4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c4e:	e0ca      	b.n	8004de6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	da18      	bge.n	8004c88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	3304      	adds	r3, #4
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	61fb      	str	r3, [r7, #28]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7e:	6850      	ldr	r0, [r2, #4]
 8004c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f2c0 80ab 	blt.w	8004de6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe f8ad 	bl	8002e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ff6b 	bl	8004b84 <prvSampleTimeNow>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	f200 8096 	bhi.w	8004de4 <prvProcessReceivedCommands+0x19c>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <prvProcessReceivedCommands+0x78>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004ce9 	.word	0x08004ce9
 8004ccc:	08004d5d 	.word	0x08004d5d
 8004cd0:	08004d71 	.word	0x08004d71
 8004cd4:	08004dbb 	.word	0x08004dbb
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004ce9 	.word	0x08004ce9
 8004ce0:	08004d5d 	.word	0x08004d5d
 8004ce4:	08004d71 	.word	0x08004d71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	18d1      	adds	r1, r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d08:	f7ff ff5c 	bl	8004bc4 <prvInsertTimerInActiveList>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d069      	beq.n	8004de6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05e      	beq.n	8004de6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	441a      	add	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f7ff fe05 	bl	8004948 <xTimerGenericCommand>
 8004d3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d14f      	bne.n	8004de6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61bb      	str	r3, [r7, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d6e:	e03a      	b.n	8004de6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	617b      	str	r3, [r7, #20]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	18d1      	adds	r1, r2, r3
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db4:	f7ff ff06 	bl	8004bc4 <prvInsertTimerInActiveList>
					break;
 8004db8:	e015      	b.n	8004de6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dca:	f000 fbe1 	bl	8005590 <vPortFree>
 8004dce:	e00a      	b.n	8004de6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004de2:	e000      	b.n	8004de6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004de4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <prvProcessReceivedCommands+0x1c0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	1d39      	adds	r1, r7, #4
 8004dec:	2200      	movs	r2, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe face 	bl	8003390 <xQueueReceive>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f47f af2a 	bne.w	8004c50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	3730      	adds	r7, #48	; 0x30
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000fcc 	.word	0x20000fcc

08004e0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e12:	e048      	b.n	8004ea6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e14:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fd ffe7 	bl	8002e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02e      	beq.n	8004ea6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d90e      	bls.n	8004e78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fd ff8c 	bl	8002d8e <vListInsert>
 8004e76:	e016      	b.n	8004ea6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	2100      	movs	r1, #0
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff fd60 	bl	8004948 <xTimerGenericCommand>
 8004e88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	603b      	str	r3, [r7, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1b1      	bne.n	8004e14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <prvSwitchTimerLists+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <prvSwitchTimerLists+0xc0>)
 8004ebc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ebe:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <prvSwitchTimerLists+0xc4>)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000fc4 	.word	0x20000fc4
 8004ed0:	20000fc8 	.word	0x20000fc8

08004ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eda:	f000 f96b 	bl	80051b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d120      	bne.n	8004f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ee6:	4814      	ldr	r0, [pc, #80]	; (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ee8:	f7fd ff00 	bl	8002cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eec:	4813      	ldr	r0, [pc, #76]	; (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004eee:	f7fd fefd 	bl	8002cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <prvCheckForValidListAndQueue+0x6c>)
 8004ef4:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <prvCheckForValidListAndQueue+0x70>)
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <prvCheckForValidListAndQueue+0x74>)
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <prvCheckForValidListAndQueue+0x78>)
 8004f06:	2110      	movs	r1, #16
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fe f80b 	bl	8002f24 <xQueueGenericCreateStatic>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	490b      	ldr	r1, [pc, #44]	; (8004f50 <prvCheckForValidListAndQueue+0x7c>)
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fc24 	bl	8003770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f28:	f000 f974 	bl	8005214 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000fcc 	.word	0x20000fcc
 8004f38:	20000f9c 	.word	0x20000f9c
 8004f3c:	20000fb0 	.word	0x20000fb0
 8004f40:	20000fc4 	.word	0x20000fc4
 8004f44:	20000fc8 	.word	0x20000fc8
 8004f48:	20001078 	.word	0x20001078
 8004f4c:	20000fd8 	.word	0x20000fd8
 8004f50:	0800c6d8 	.word	0x0800c6d8

08004f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b04      	subs	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f84:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <pxPortInitialiseStack+0x64>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b14      	subs	r3, #20
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f06f 0202 	mvn.w	r2, #2
 8004fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b20      	subs	r3, #32
 8004fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	08004fbd 	.word	0x08004fbd

08004fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <prvTaskExitError+0x54>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fce:	d00a      	beq.n	8004fe6 <prvTaskExitError+0x2a>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <prvTaskExitError+0x28>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60bb      	str	r3, [r7, #8]
}
 8004ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ffa:	bf00      	nop
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0fc      	beq.n	8004ffc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000090 	.word	0x20000090
	...

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800506a:	bf00      	nop
 800506c:	e000ed08 	.word	0xe000ed08

08005070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005076:	4b46      	ldr	r3, [pc, #280]	; (8005190 <xPortStartScheduler+0x120>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a46      	ldr	r2, [pc, #280]	; (8005194 <xPortStartScheduler+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10a      	bne.n	8005096 <xPortStartScheduler+0x26>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	613b      	str	r3, [r7, #16]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <xPortStartScheduler+0x120>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <xPortStartScheduler+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10a      	bne.n	80050b6 <xPortStartScheduler+0x46>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <xPortStartScheduler+0x12c>)
 80050b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <xPortStartScheduler+0x130>)
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <xPortStartScheduler+0x134>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <xPortStartScheduler+0x134>)
 80050ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <xPortStartScheduler+0x134>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00a      	beq.n	8005128 <xPortStartScheduler+0xb8>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005128:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <xPortStartScheduler+0x134>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <xPortStartScheduler+0x134>)
 8005130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <xPortStartScheduler+0x134>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800513a:	4a1a      	ldr	r2, [pc, #104]	; (80051a4 <xPortStartScheduler+0x134>)
 800513c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <xPortStartScheduler+0x138>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <xPortStartScheduler+0x138>)
 800514c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <xPortStartScheduler+0x138>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <xPortStartScheduler+0x138>)
 8005158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800515c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800515e:	f000 f8dd 	bl	800531c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <xPortStartScheduler+0x13c>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005168:	f000 f8fc 	bl	8005364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <xPortStartScheduler+0x140>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <xPortStartScheduler+0x140>)
 8005172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005178:	f7ff ff66 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800517c:	f7fe ff1a 	bl	8003fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8005180:	f7ff ff1c 	bl	8004fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	e000ed00 	.word	0xe000ed00
 8005194:	410fc271 	.word	0x410fc271
 8005198:	410fc270 	.word	0x410fc270
 800519c:	e000e400 	.word	0xe000e400
 80051a0:	200010c8 	.word	0x200010c8
 80051a4:	200010cc 	.word	0x200010cc
 80051a8:	e000ed20 	.word	0xe000ed20
 80051ac:	20000090 	.word	0x20000090
 80051b0:	e000ef34 	.word	0xe000ef34

080051b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	607b      	str	r3, [r7, #4]
}
 80051cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <vPortEnterCritical+0x58>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <vPortEnterCritical+0x58>)
 80051d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <vPortEnterCritical+0x58>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10f      	bne.n	8005200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortEnterCritical+0x5c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vPortEnterCritical+0x4c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	603b      	str	r3, [r7, #0]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vPortEnterCritical+0x4a>
	}
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000090 	.word	0x20000090
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <vPortExitCritical+0x50>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <vPortExitCritical+0x24>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	607b      	str	r3, [r7, #4]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <vPortExitCritical+0x50>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <vPortExitCritical+0x50>)
 8005240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <vPortExitCritical+0x42>
 800524a:	2300      	movs	r3, #0
 800524c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f383 8811 	msr	BASEPRI, r3
}
 8005254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000090 	.word	0x20000090
	...

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7fe fe88 	bl	8003fb4 <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7fe fda5 	bl	8003e40 <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <xPortSysTickHandler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	2000009c 	.word	0x2000009c
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005372:	bf00      	nop
 8005374:	e000ed88 	.word	0xe000ed88

08005378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d914      	bls.n	80053b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <vPortValidateInterruptPriority+0x70>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005394:	4b15      	ldr	r3, [pc, #84]	; (80053ec <vPortValidateInterruptPriority+0x74>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	7afa      	ldrb	r2, [r7, #11]
 800539a:	429a      	cmp	r2, r3
 800539c:	d20a      	bcs.n	80053b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <vPortValidateInterruptPriority+0x78>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <vPortValidateInterruptPriority+0x7c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d90a      	bls.n	80053da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	603b      	str	r3, [r7, #0]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vPortValidateInterruptPriority+0x60>
	}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000e3f0 	.word	0xe000e3f0
 80053ec:	200010c8 	.word	0x200010c8
 80053f0:	e000ed0c 	.word	0xe000ed0c
 80053f4:	200010cc 	.word	0x200010cc

080053f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005404:	f7fe fc4e 	bl	8003ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005408:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <pvPortMalloc+0x180>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005410:	f000 f920 	bl	8005654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <pvPortMalloc+0x184>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8093 	bne.w	8005548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01d      	beq.n	8005464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d014      	beq.n	8005464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <pvPortMalloc+0x6c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d06e      	beq.n	8005548 <pvPortMalloc+0x150>
 800546a:	4b45      	ldr	r3, [pc, #276]	; (8005580 <pvPortMalloc+0x188>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d869      	bhi.n	8005548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005474:	4b43      	ldr	r3, [pc, #268]	; (8005584 <pvPortMalloc+0x18c>)
 8005476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005478:	4b42      	ldr	r3, [pc, #264]	; (8005584 <pvPortMalloc+0x18c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547e:	e004      	b.n	800548a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <pvPortMalloc+0xa4>
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f1      	bne.n	8005480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <pvPortMalloc+0x180>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d050      	beq.n	8005548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2208      	movs	r2, #8
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	2308      	movs	r3, #8
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d91f      	bls.n	8005508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <pvPortMalloc+0xf8>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	613b      	str	r3, [r7, #16]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 f908 	bl	8005718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <pvPortMalloc+0x188>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <pvPortMalloc+0x188>)
 8005514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <pvPortMalloc+0x188>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <pvPortMalloc+0x190>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <pvPortMalloc+0x188>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <pvPortMalloc+0x190>)
 8005528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x184>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	431a      	orrs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <pvPortMalloc+0x194>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <pvPortMalloc+0x194>)
 8005546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005548:	f7fe fbba 	bl	8003cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <pvPortMalloc+0x174>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <pvPortMalloc+0x172>
	return pvReturn;
 800556c:	69fb      	ldr	r3, [r7, #28]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20001c90 	.word	0x20001c90
 800557c:	20001ca4 	.word	0x20001ca4
 8005580:	20001c94 	.word	0x20001c94
 8005584:	20001c88 	.word	0x20001c88
 8005588:	20001c98 	.word	0x20001c98
 800558c:	20001c9c 	.word	0x20001c9c

08005590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04d      	beq.n	800563e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055a2:	2308      	movs	r3, #8
 80055a4:	425b      	negs	r3, r3
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <vPortFree+0xb8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <vPortFree+0x44>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <vPortFree+0x62>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60bb      	str	r3, [r7, #8]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <vPortFree+0xb8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01e      	beq.n	800563e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11a      	bne.n	800563e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <vPortFree+0xb8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005618:	f7fe fb44 	bl	8003ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <vPortFree+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4413      	add	r3, r2
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <vPortFree+0xbc>)
 8005628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800562a:	6938      	ldr	r0, [r7, #16]
 800562c:	f000 f874 	bl	8005718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <vPortFree+0xc0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a06      	ldr	r2, [pc, #24]	; (8005650 <vPortFree+0xc0>)
 8005638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800563a:	f7fe fb41 	bl	8003cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001ca4 	.word	0x20001ca4
 800564c:	20001c94 	.word	0x20001c94
 8005650:	20001ca0 	.word	0x20001ca0

08005654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800565a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800565e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <prvHeapInit+0xac>)
 8005662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3307      	adds	r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <prvHeapInit+0xac>)
 8005684:	4413      	add	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <prvHeapInit+0xb0>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <prvHeapInit+0xb0>)
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056a0:	2208      	movs	r2, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <prvHeapInit+0xb4>)
 80056b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <prvHeapInit+0xb4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <prvHeapInit+0xb4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvHeapInit+0xb4>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <prvHeapInit+0xb8>)
 80056e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <prvHeapInit+0xbc>)
 80056ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <prvHeapInit+0xc0>)
 80056ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200010d0 	.word	0x200010d0
 8005704:	20001c88 	.word	0x20001c88
 8005708:	20001c90 	.word	0x20001c90
 800570c:	20001c98 	.word	0x20001c98
 8005710:	20001c94 	.word	0x20001c94
 8005714:	20001ca4 	.word	0x20001ca4

08005718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <prvInsertBlockIntoFreeList+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e002      	b.n	800572c <prvInsertBlockIntoFreeList+0x14>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d8f7      	bhi.n	8005726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d108      	bne.n	800575a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	441a      	add	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d118      	bne.n	80057a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d00d      	beq.n	8005796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e008      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e003      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d002      	beq.n	80057b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20001c88 	.word	0x20001c88
 80057c8:	20001c90 	.word	0x20001c90

080057cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d6:	2003      	movs	r0, #3
 80057d8:	f000 f98e 	bl	8005af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057dc:	2000      	movs	r0, #0
 80057de:	f000 f80d 	bl	80057fc <HAL_InitTick>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	71fb      	strb	r3, [r7, #7]
 80057ec:	e001      	b.n	80057f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057ee:	f005 faeb 	bl	800adc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005808:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_InitTick+0x6c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d023      	beq.n	8005858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_InitTick+0x70>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_InitTick+0x6c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f9a9 	bl	8005b7e <HAL_SYSTICK_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d809      	bhi.n	800584c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005838:	2200      	movs	r2, #0
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005840:	f000 f965 	bl	8005b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <HAL_InitTick+0x74>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e007      	b.n	800585c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e004      	b.n	800585c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	e001      	b.n	800585c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000098 	.word	0x20000098
 800586c:	2000009c 	.word	0x2000009c
 8005870:	20000094 	.word	0x20000094

08005874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_GetTick+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20001ca8 	.word	0x20001ca8

0800588c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005894:	f7ff ffee 	bl	8005874 <HAL_GetTick>
 8005898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a4:	d005      	beq.n	80058b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_Delay+0x44>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058b2:	bf00      	nop
 80058b4:	f7ff ffde 	bl	8005874 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d8f7      	bhi.n	80058b4 <HAL_Delay+0x28>
  {
  }
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000098 	.word	0x20000098

080058d4 <__NVIC_SetPriorityGrouping>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <__NVIC_SetPriorityGrouping+0x44>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058f0:	4013      	ands	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005906:	4a04      	ldr	r2, [pc, #16]	; (8005918 <__NVIC_SetPriorityGrouping+0x44>)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	60d3      	str	r3, [r2, #12]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <__NVIC_GetPriorityGrouping>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <__NVIC_GetPriorityGrouping+0x18>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 0307 	and.w	r3, r3, #7
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <__NVIC_EnableIRQ>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	db0b      	blt.n	8005962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	f003 021f 	and.w	r2, r3, #31
 8005950:	4907      	ldr	r1, [pc, #28]	; (8005970 <__NVIC_EnableIRQ+0x38>)
 8005952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2001      	movs	r0, #1
 800595a:	fa00 f202 	lsl.w	r2, r0, r2
 800595e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	e000e100 	.word	0xe000e100

08005974 <__NVIC_DisableIRQ>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db12      	blt.n	80059ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	f003 021f 	and.w	r2, r3, #31
 800598c:	490a      	ldr	r1, [pc, #40]	; (80059b8 <__NVIC_DisableIRQ+0x44>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2001      	movs	r0, #1
 8005996:	fa00 f202 	lsl.w	r2, r0, r2
 800599a:	3320      	adds	r3, #32
 800599c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80059a0:	f3bf 8f4f 	dsb	sy
}
 80059a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059a6:	f3bf 8f6f 	isb	sy
}
 80059aa:	bf00      	nop
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	e000e100 	.word	0xe000e100

080059bc <__NVIC_ClearPendingIRQ>:
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	db0c      	blt.n	80059e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	f003 021f 	and.w	r2, r3, #31
 80059d4:	4907      	ldr	r1, [pc, #28]	; (80059f4 <__NVIC_ClearPendingIRQ+0x38>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2001      	movs	r0, #1
 80059de:	fa00 f202 	lsl.w	r2, r0, r2
 80059e2:	3360      	adds	r3, #96	; 0x60
 80059e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	e000e100 	.word	0xe000e100

080059f8 <__NVIC_SetPriority>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db0a      	blt.n	8005a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	490c      	ldr	r1, [pc, #48]	; (8005a44 <__NVIC_SetPriority+0x4c>)
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	0112      	lsls	r2, r2, #4
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a20:	e00a      	b.n	8005a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4908      	ldr	r1, [pc, #32]	; (8005a48 <__NVIC_SetPriority+0x50>)
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	3b04      	subs	r3, #4
 8005a30:	0112      	lsls	r2, r2, #4
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	440b      	add	r3, r1
 8005a36:	761a      	strb	r2, [r3, #24]
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	e000e100 	.word	0xe000e100
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b089      	sub	sp, #36	; 0x24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f1c3 0307 	rsb	r3, r3, #7
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	bf28      	it	cs
 8005a6a:	2304      	movcs	r3, #4
 8005a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d902      	bls.n	8005a7c <NVIC_EncodePriority+0x30>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3b03      	subs	r3, #3
 8005a7a:	e000      	b.n	8005a7e <NVIC_EncodePriority+0x32>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	401a      	ands	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	43d9      	mvns	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa4:	4313      	orrs	r3, r2
         );
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3724      	adds	r7, #36	; 0x24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ac4:	d301      	bcc.n	8005aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e00f      	b.n	8005aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <SysTick_Config+0x40>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ad2:	210f      	movs	r1, #15
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad8:	f7ff ff8e 	bl	80059f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <SysTick_Config+0x40>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <SysTick_Config+0x40>)
 8005ae4:	2207      	movs	r2, #7
 8005ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	e000e010 	.word	0xe000e010

08005af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fee7 	bl	80058d4 <__NVIC_SetPriorityGrouping>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	4603      	mov	r3, r0
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b20:	f7ff fefc 	bl	800591c <__NVIC_GetPriorityGrouping>
 8005b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7ff ff8e 	bl	8005a4c <NVIC_EncodePriority>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff ff5d 	bl	80059f8 <__NVIC_SetPriority>
}
 8005b3e:	bf00      	nop
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff feef 	bl	8005938 <__NVIC_EnableIRQ>
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	4603      	mov	r3, r0
 8005b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff feff 	bl	8005974 <__NVIC_DisableIRQ>
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff ff94 	bl	8005ab4 <SysTick_Config>
 8005b8c:	4603      	mov	r3, r0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff ff09 	bl	80059bc <__NVIC_ClearPendingIRQ>
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e098      	b.n	8005cf8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <HAL_DMA_Init+0x150>)
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d80f      	bhi.n	8005bf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_DMA_Init+0x154>)
 8005bda:	4413      	add	r3, r2
 8005bdc:	4a4b      	ldr	r2, [pc, #300]	; (8005d0c <HAL_DMA_Init+0x158>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	009a      	lsls	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a48      	ldr	r2, [pc, #288]	; (8005d10 <HAL_DMA_Init+0x15c>)
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
 8005bf0:	e00e      	b.n	8005c10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <HAL_DMA_Init+0x160>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	4a43      	ldr	r2, [pc, #268]	; (8005d0c <HAL_DMA_Init+0x158>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	009a      	lsls	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_DMA_Init+0x164>)
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c6a:	d039      	beq.n	8005ce0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <HAL_DMA_Init+0x15c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d11a      	bne.n	8005cac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c76:	4b29      	ldr	r3, [pc, #164]	; (8005d1c <HAL_DMA_Init+0x168>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f003 031c 	and.w	r3, r3, #28
 8005c82:	210f      	movs	r1, #15
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	4924      	ldr	r1, [pc, #144]	; (8005d1c <HAL_DMA_Init+0x168>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c90:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <HAL_DMA_Init+0x168>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	f003 031c 	and.w	r3, r3, #28
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	491d      	ldr	r1, [pc, #116]	; (8005d1c <HAL_DMA_Init+0x168>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
 8005caa:	e019      	b.n	8005ce0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005cac:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <HAL_DMA_Init+0x16c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	f003 031c 	and.w	r3, r3, #28
 8005cb8:	210f      	movs	r1, #15
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	4917      	ldr	r1, [pc, #92]	; (8005d20 <HAL_DMA_Init+0x16c>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <HAL_DMA_Init+0x16c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f003 031c 	and.w	r3, r3, #28
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	4911      	ldr	r1, [pc, #68]	; (8005d20 <HAL_DMA_Init+0x16c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40020407 	.word	0x40020407
 8005d08:	bffdfff8 	.word	0xbffdfff8
 8005d0c:	cccccccd 	.word	0xcccccccd
 8005d10:	40020000 	.word	0x40020000
 8005d14:	bffdfbf8 	.word	0xbffdfbf8
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	400200a8 	.word	0x400200a8
 8005d20:	400204a8 	.word	0x400204a8

08005d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_DMA_Start_IT+0x20>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e04b      	b.n	8005ddc <HAL_DMA_Start_IT+0xb8>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d13a      	bne.n	8005dce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f9a7 	bl	80060d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 020e 	orr.w	r2, r2, #14
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e00f      	b.n	8005dbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 020a 	orr.w	r2, r2, #10
 8005dba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e005      	b.n	8005dda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d008      	beq.n	8005e0e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e022      	b.n	8005e54 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020e 	bic.w	r2, r2, #14
 8005e1c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f003 021c 	and.w	r2, r3, #28
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d005      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e029      	b.n	8005ed8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	f003 021c 	and.w	r2, r3, #28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
    }
  }
  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f003 031c 	and.w	r3, r3, #28
 8005f02:	2204      	movs	r2, #4
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d026      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x7a>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d021      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d107      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0204 	bic.w	r2, r2, #4
 8005f34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f003 021c 	and.w	r2, r3, #28
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2104      	movs	r1, #4
 8005f44:	fa01 f202 	lsl.w	r2, r1, r2
 8005f48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d071      	beq.n	8006036 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005f5a:	e06c      	b.n	8006036 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	f003 031c 	and.w	r3, r3, #28
 8005f64:	2202      	movs	r2, #2
 8005f66:	409a      	lsls	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d02e      	beq.n	8005fce <HAL_DMA_IRQHandler+0xec>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d029      	beq.n	8005fce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 020a 	bic.w	r2, r2, #10
 8005f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	f003 021c 	and.w	r2, r3, #28
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	2102      	movs	r1, #2
 8005fae:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d038      	beq.n	8006036 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005fcc:	e033      	b.n	8006036 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f003 031c 	and.w	r3, r3, #28
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02a      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d025      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 020e 	bic.w	r2, r2, #14
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	f003 021c 	and.w	r2, r3, #28
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f202 	lsl.w	r2, r1, r2
 800600e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006036:	bf00      	nop
 8006038:	bf00      	nop
}
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	460b      	mov	r3, r1
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_DMA_RegisterCallback+0x20>
 800605c:	2302      	movs	r3, #2
 800605e:	e031      	b.n	80060c4 <HAL_DMA_RegisterCallback+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d120      	bne.n	80060b6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d81a      	bhi.n	80060b0 <HAL_DMA_RegisterCallback+0x70>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_DMA_RegisterCallback+0x40>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006091 	.word	0x08006091
 8006084:	08006099 	.word	0x08006099
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8006096:	e010      	b.n	80060ba <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800609e:	e00c      	b.n	80060ba <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80060a6:	e008      	b.n	80060ba <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80060ae:	e004      	b.n	80060ba <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
           break;
 80060b4:	e001      	b.n	80060ba <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	f003 021c 	and.w	r2, r3, #28
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2101      	movs	r1, #1
 80060ec:	fa01 f202 	lsl.w	r2, r1, r2
 80060f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d108      	bne.n	8006114 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006112:	e007      	b.n	8006124 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800613e:	e154      	b.n	80063ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	4013      	ands	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8146 	beq.w	80063e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d005      	beq.n	8006170 <HAL_GPIO_Init+0x40>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d130      	bne.n	80061d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	2203      	movs	r2, #3
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4013      	ands	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061a6:	2201      	movs	r2, #1
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 0201 	and.w	r2, r3, #1
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d017      	beq.n	800620e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	2203      	movs	r2, #3
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4013      	ands	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d123      	bne.n	8006262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	08da      	lsrs	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3208      	adds	r2, #8
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	220f      	movs	r2, #15
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4013      	ands	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	08da      	lsrs	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3208      	adds	r2, #8
 800625c:	6939      	ldr	r1, [r7, #16]
 800625e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	2203      	movs	r2, #3
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0203 	and.w	r2, r3, #3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80a0 	beq.w	80063e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a4:	4b58      	ldr	r3, [pc, #352]	; (8006408 <HAL_GPIO_Init+0x2d8>)
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_GPIO_Init+0x2d8>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6613      	str	r3, [r2, #96]	; 0x60
 80062b0:	4b55      	ldr	r3, [pc, #340]	; (8006408 <HAL_GPIO_Init+0x2d8>)
 80062b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80062bc:	4a53      	ldr	r2, [pc, #332]	; (800640c <HAL_GPIO_Init+0x2dc>)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	3302      	adds	r3, #2
 80062c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	220f      	movs	r2, #15
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062e6:	d019      	beq.n	800631c <HAL_GPIO_Init+0x1ec>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a49      	ldr	r2, [pc, #292]	; (8006410 <HAL_GPIO_Init+0x2e0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_GPIO_Init+0x1e8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a48      	ldr	r2, [pc, #288]	; (8006414 <HAL_GPIO_Init+0x2e4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00d      	beq.n	8006314 <HAL_GPIO_Init+0x1e4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a47      	ldr	r2, [pc, #284]	; (8006418 <HAL_GPIO_Init+0x2e8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <HAL_GPIO_Init+0x1e0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a46      	ldr	r2, [pc, #280]	; (800641c <HAL_GPIO_Init+0x2ec>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d101      	bne.n	800630c <HAL_GPIO_Init+0x1dc>
 8006308:	2304      	movs	r3, #4
 800630a:	e008      	b.n	800631e <HAL_GPIO_Init+0x1ee>
 800630c:	2307      	movs	r3, #7
 800630e:	e006      	b.n	800631e <HAL_GPIO_Init+0x1ee>
 8006310:	2303      	movs	r3, #3
 8006312:	e004      	b.n	800631e <HAL_GPIO_Init+0x1ee>
 8006314:	2302      	movs	r3, #2
 8006316:	e002      	b.n	800631e <HAL_GPIO_Init+0x1ee>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <HAL_GPIO_Init+0x1ee>
 800631c:	2300      	movs	r3, #0
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	f002 0203 	and.w	r2, r2, #3
 8006324:	0092      	lsls	r2, r2, #2
 8006326:	4093      	lsls	r3, r2
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800632e:	4937      	ldr	r1, [pc, #220]	; (800640c <HAL_GPIO_Init+0x2dc>)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	3302      	adds	r3, #2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800633c:	4b38      	ldr	r3, [pc, #224]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	43db      	mvns	r3, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006360:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006366:	4b2e      	ldr	r3, [pc, #184]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	43db      	mvns	r3, r3
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4013      	ands	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800638a:	4a25      	ldr	r2, [pc, #148]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006390:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	43db      	mvns	r3, r3
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4013      	ands	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80063ba:	4b19      	ldr	r3, [pc, #100]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4013      	ands	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063de:	4a10      	ldr	r2, [pc, #64]	; (8006420 <HAL_GPIO_Init+0x2f0>)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3301      	adds	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f47f aea3 	bne.w	8006140 <HAL_GPIO_Init+0x10>
  }
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40021000 	.word	0x40021000
 800640c:	40010000 	.word	0x40010000
 8006410:	48000400 	.word	0x48000400
 8006414:	48000800 	.word	0x48000800
 8006418:	48000c00 	.word	0x48000c00
 800641c:	48001000 	.word	0x48001000
 8006420:	40010400 	.word	0x40010400

08006424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	887b      	ldrh	r3, [r7, #2]
 8006436:	4013      	ands	r3, r2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
 8006440:	e001      	b.n	8006446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
 8006460:	4613      	mov	r3, r2
 8006462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006464:	787b      	ldrb	r3, [r7, #1]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800646a:	887a      	ldrh	r2, [r7, #2]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006470:	e002      	b.n	8006478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800648e:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	4013      	ands	r3, r2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d006      	beq.n	80064a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800649a:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064a0:	88fb      	ldrh	r3, [r7, #6]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f004 fee8 	bl	800b278 <HAL_GPIO_EXTI_Callback>
  }
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40010400 	.word	0x40010400

080064b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40007000 	.word	0x40007000

080064d4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_PWR_ConfigPVD+0xb8>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f023 020e 	bic.w	r2, r3, #14
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4928      	ldr	r1, [pc, #160]	; (800658c <HAL_PWR_ConfigPVD+0xb8>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80064ee:	4b28      	ldr	r3, [pc, #160]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 80064f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80064fa:	4b25      	ldr	r3, [pc, #148]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a24      	ldr	r2, [pc, #144]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006504:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006506:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 800650c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006510:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006512:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a18      	ldr	r2, [pc, #96]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006534:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4a06      	ldr	r2, [pc, #24]	; (8006590 <HAL_PWR_ConfigPVD+0xbc>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40007000 	.word	0x40007000
 8006590:	40010400 	.word	0x40010400

08006594 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_PWR_EnablePVD+0x1c>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <HAL_PWR_EnablePVD+0x1c>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6053      	str	r3, [r2, #4]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40007000 	.word	0x40007000

080065b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <HAL_PWREx_GetVoltageRange+0x18>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40007000 	.word	0x40007000

080065d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065de:	d130      	bne.n	8006642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80065e0:	4b23      	ldr	r3, [pc, #140]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d038      	beq.n	8006660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065ee:	4b20      	ldr	r3, [pc, #128]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2232      	movs	r2, #50	; 0x32
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	0c9b      	lsrs	r3, r3, #18
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006614:	e002      	b.n	800661c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b01      	subs	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d102      	bne.n	8006630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f2      	bne.n	8006616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d110      	bne.n	8006660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e00f      	b.n	8006662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d007      	beq.n	8006660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006658:	4a05      	ldr	r2, [pc, #20]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800665a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800665e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40007000 	.word	0x40007000
 8006674:	2000009c 	.word	0x2000009c
 8006678:	431bde83 	.word	0x431bde83

0800667c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f000 bc02 	b.w	8006e94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006690:	4b96      	ldr	r3, [pc, #600]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 030c 	and.w	r3, r3, #12
 8006698:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800669a:	4b94      	ldr	r3, [pc, #592]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80e4 	beq.w	800687a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_RCC_OscConfig+0x4c>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	f040 808b 	bne.w	80067d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	f040 8087 	bne.w	80067d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066c8:	4b88      	ldr	r3, [pc, #544]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_OscConfig+0x64>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e3d9      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	4b81      	ldr	r3, [pc, #516]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_RCC_OscConfig+0x7e>
 80066f0:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f8:	e005      	b.n	8006706 <HAL_RCC_OscConfig+0x8a>
 80066fa:	4b7c      	ldr	r3, [pc, #496]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80066fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006706:	4293      	cmp	r3, r2
 8006708:	d223      	bcs.n	8006752 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd8c 	bl	800722c <RCC_SetFlashLatencyFromMSIRange>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e3ba      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800671e:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a72      	ldr	r2, [pc, #456]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	4b70      	ldr	r3, [pc, #448]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	496d      	ldr	r1, [pc, #436]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800673c:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	4968      	ldr	r1, [pc, #416]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	e025      	b.n	800679e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006752:	4b66      	ldr	r3, [pc, #408]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a65      	ldr	r2, [pc, #404]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006758:	f043 0308 	orr.w	r3, r3, #8
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b63      	ldr	r3, [pc, #396]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	4960      	ldr	r1, [pc, #384]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006770:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	495b      	ldr	r1, [pc, #364]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fd4c 	bl	800722c <RCC_SetFlashLatencyFromMSIRange>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e37a      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800679e:	f000 fc81 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 80067a2:	4602      	mov	r2, r0
 80067a4:	4b51      	ldr	r3, [pc, #324]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	4950      	ldr	r1, [pc, #320]	; (80068f0 <HAL_RCC_OscConfig+0x274>)
 80067b0:	5ccb      	ldrb	r3, [r1, r3]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	4a4e      	ldr	r2, [pc, #312]	; (80068f4 <HAL_RCC_OscConfig+0x278>)
 80067bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067be:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <HAL_RCC_OscConfig+0x27c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f81a 	bl	80057fc <HAL_InitTick>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d052      	beq.n	8006878 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	e35e      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d032      	beq.n	8006844 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067de:	4b43      	ldr	r3, [pc, #268]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a42      	ldr	r2, [pc, #264]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ea:	f7ff f843 	bl	8005874 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067f2:	f7ff f83f 	bl	8005874 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e347      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006804:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006810:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a35      	ldr	r2, [pc, #212]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006816:	f043 0308 	orr.w	r3, r3, #8
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b33      	ldr	r3, [pc, #204]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4930      	ldr	r1, [pc, #192]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800682e:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	492b      	ldr	r1, [pc, #172]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
 8006842:	e01a      	b.n	800687a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006844:	4b29      	ldr	r3, [pc, #164]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a28      	ldr	r2, [pc, #160]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006850:	f7ff f810 	bl	8005874 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006858:	f7ff f80c 	bl	8005874 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e314      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x1dc>
 8006876:	e000      	b.n	800687a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d073      	beq.n	800696e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d005      	beq.n	8006898 <HAL_RCC_OscConfig+0x21c>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d10e      	bne.n	80068b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d10b      	bne.n	80068b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d063      	beq.n	800696c <HAL_RCC_OscConfig+0x2f0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d15f      	bne.n	800696c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e2f1      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b8:	d106      	bne.n	80068c8 <HAL_RCC_OscConfig+0x24c>
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a0b      	ldr	r2, [pc, #44]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e025      	b.n	8006914 <HAL_RCC_OscConfig+0x298>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d0:	d114      	bne.n	80068fc <HAL_RCC_OscConfig+0x280>
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a05      	ldr	r2, [pc, #20]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a02      	ldr	r2, [pc, #8]	; (80068ec <HAL_RCC_OscConfig+0x270>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e013      	b.n	8006914 <HAL_RCC_OscConfig+0x298>
 80068ec:	40021000 	.word	0x40021000
 80068f0:	0800c850 	.word	0x0800c850
 80068f4:	2000009c 	.word	0x2000009c
 80068f8:	20000094 	.word	0x20000094
 80068fc:	4ba0      	ldr	r3, [pc, #640]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a9f      	ldr	r2, [pc, #636]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4b9d      	ldr	r3, [pc, #628]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a9c      	ldr	r2, [pc, #624]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 800690e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d013      	beq.n	8006944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fe ffaa 	bl	8005874 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006924:	f7fe ffa6 	bl	8005874 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	; 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e2ae      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006936:	4b92      	ldr	r3, [pc, #584]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x2a8>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fe ff96 	bl	8005874 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800694c:	f7fe ff92 	bl	8005874 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e29a      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800695e:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x2d0>
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d060      	beq.n	8006a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d005      	beq.n	800698c <HAL_RCC_OscConfig+0x310>
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b0c      	cmp	r3, #12
 8006984:	d119      	bne.n	80069ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d116      	bne.n	80069ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698c:	4b7c      	ldr	r3, [pc, #496]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_OscConfig+0x328>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e277      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	4b76      	ldr	r3, [pc, #472]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	4973      	ldr	r1, [pc, #460]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b8:	e040      	b.n	8006a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d023      	beq.n	8006a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c2:	4b6f      	ldr	r3, [pc, #444]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6e      	ldr	r2, [pc, #440]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ce:	f7fe ff51 	bl	8005874 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d6:	f7fe ff4d 	bl	8005874 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e255      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069e8:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f4:	4b62      	ldr	r3, [pc, #392]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	061b      	lsls	r3, r3, #24
 8006a02:	495f      	ldr	r1, [pc, #380]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	604b      	str	r3, [r1, #4]
 8006a08:	e018      	b.n	8006a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a0a:	4b5d      	ldr	r3, [pc, #372]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5c      	ldr	r2, [pc, #368]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a16:	f7fe ff2d 	bl	8005874 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a1e:	f7fe ff29 	bl	8005874 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e231      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a30:	4b53      	ldr	r3, [pc, #332]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f0      	bne.n	8006a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d03c      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01c      	beq.n	8006a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a56:	4a4a      	ldr	r2, [pc, #296]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a60:	f7fe ff08 	bl	8005874 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a68:	f7fe ff04 	bl	8005874 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e20c      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a7a:	4b41      	ldr	r3, [pc, #260]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0ef      	beq.n	8006a68 <HAL_RCC_OscConfig+0x3ec>
 8006a88:	e01b      	b.n	8006ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a8a:	4b3d      	ldr	r3, [pc, #244]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a90:	4a3b      	ldr	r2, [pc, #236]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9a:	f7fe feeb 	bl	8005874 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa2:	f7fe fee7 	bl	8005874 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e1ef      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ab4:	4b32      	ldr	r3, [pc, #200]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ef      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80a6 	beq.w	8006c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ad4:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10d      	bne.n	8006afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ae0:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aea:	6593      	str	r3, [r2, #88]	; 0x58
 8006aec:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af4:	60bb      	str	r3, [r7, #8]
 8006af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006afc:	4b21      	ldr	r3, [pc, #132]	; (8006b84 <HAL_RCC_OscConfig+0x508>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d118      	bne.n	8006b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <HAL_RCC_OscConfig+0x508>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <HAL_RCC_OscConfig+0x508>)
 8006b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b14:	f7fe feae 	bl	8005874 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b1c:	f7fe feaa 	bl	8005874 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e1b2      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b2e:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <HAL_RCC_OscConfig+0x508>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d108      	bne.n	8006b54 <HAL_RCC_OscConfig+0x4d8>
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b52:	e029      	b.n	8006ba8 <HAL_RCC_OscConfig+0x52c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d115      	bne.n	8006b88 <HAL_RCC_OscConfig+0x50c>
 8006b5c:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b62:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b64:	f043 0304 	orr.w	r3, r3, #4
 8006b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	4a03      	ldr	r2, [pc, #12]	; (8006b80 <HAL_RCC_OscConfig+0x504>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b7c:	e014      	b.n	8006ba8 <HAL_RCC_OscConfig+0x52c>
 8006b7e:	bf00      	nop
 8006b80:	40021000 	.word	0x40021000
 8006b84:	40007000 	.word	0x40007000
 8006b88:	4b9a      	ldr	r3, [pc, #616]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8e:	4a99      	ldr	r2, [pc, #612]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b98:	4b96      	ldr	r3, [pc, #600]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	4a95      	ldr	r2, [pc, #596]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006ba0:	f023 0304 	bic.w	r3, r3, #4
 8006ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fe fe60 	bl	8005874 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb8:	f7fe fe5c 	bl	8005874 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e162      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0ed      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x53c>
 8006bdc:	e015      	b.n	8006c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bde:	f7fe fe49 	bl	8005874 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006be4:	e00a      	b.n	8006bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be6:	f7fe fe45 	bl	8005874 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e14b      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bfc:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1ed      	bne.n	8006be6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c0a:	7ffb      	ldrb	r3, [r7, #31]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d105      	bne.n	8006c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c10:	4b78      	ldr	r3, [pc, #480]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	4a77      	ldr	r2, [pc, #476]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d03c      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01c      	beq.n	8006c6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c30:	4b70      	ldr	r3, [pc, #448]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c36:	4a6f      	ldr	r2, [pc, #444]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fe fe18 	bl	8005874 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c48:	f7fe fe14 	bl	8005874 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e11c      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c5a:	4b66      	ldr	r3, [pc, #408]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0ef      	beq.n	8006c48 <HAL_RCC_OscConfig+0x5cc>
 8006c68:	e01b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c6a:	4b62      	ldr	r3, [pc, #392]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c70:	4a60      	ldr	r2, [pc, #384]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c72:	f023 0301 	bic.w	r3, r3, #1
 8006c76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7a:	f7fe fdfb 	bl	8005874 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c82:	f7fe fdf7 	bl	8005874 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e0ff      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c94:	4b57      	ldr	r3, [pc, #348]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1ef      	bne.n	8006c82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80f3 	beq.w	8006e92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f040 80c9 	bne.w	8006e48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006cb6:	4b4f      	ldr	r3, [pc, #316]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f003 0203 	and.w	r2, r3, #3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d12c      	bne.n	8006d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d123      	bne.n	8006d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d11b      	bne.n	8006d24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d113      	bne.n	8006d24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d109      	bne.n	8006d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d06b      	beq.n	8006dfc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d062      	beq.n	8006df0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d2a:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0ac      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d46:	f7fe fd95 	bl	8005874 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4e:	f7fe fd91 	bl	8005874 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e099      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d60:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d6c:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	0112      	lsls	r2, r2, #4
 8006d80:	4311      	orrs	r1, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d86:	0212      	lsls	r2, r2, #8
 8006d88:	4311      	orrs	r1, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d8e:	0852      	lsrs	r2, r2, #1
 8006d90:	3a01      	subs	r2, #1
 8006d92:	0552      	lsls	r2, r2, #21
 8006d94:	4311      	orrs	r1, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d9a:	0852      	lsrs	r2, r2, #1
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	0652      	lsls	r2, r2, #25
 8006da0:	4311      	orrs	r1, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006da6:	06d2      	lsls	r2, r2, #27
 8006da8:	430a      	orrs	r2, r1
 8006daa:	4912      	ldr	r1, [pc, #72]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006db0:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a0f      	ldr	r2, [pc, #60]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006dc8:	f7fe fd54 	bl	8005874 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fe fd50 	bl	8005874 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e058      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <HAL_RCC_OscConfig+0x778>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dee:	e050      	b.n	8006e92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e04f      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
 8006df4:	40021000 	.word	0x40021000
 8006df8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfc:	4b27      	ldr	r3, [pc, #156]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d144      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e08:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e14:	4b21      	ldr	r3, [pc, #132]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e20:	f7fe fd28 	bl	8005874 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fe fd24 	bl	8005874 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e02c      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e3a:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x7ac>
 8006e46:	e024      	b.n	8006e92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b0c      	cmp	r3, #12
 8006e4c:	d01f      	beq.n	8006e8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5a:	f7fe fd0b 	bl	8005874 <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e62:	f7fe fd07 	bl	8005874 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e00f      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e74:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f0      	bne.n	8006e62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4905      	ldr	r1, [pc, #20]	; (8006e9c <HAL_RCC_OscConfig+0x820>)
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_RCC_OscConfig+0x824>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60cb      	str	r3, [r1, #12]
 8006e8c:	e001      	b.n	8006e92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	feeefffc 	.word	0xfeeefffc

08006ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0e7      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb8:	4b75      	ldr	r3, [pc, #468]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d910      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec6:	4b72      	ldr	r3, [pc, #456]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f023 0207 	bic.w	r2, r3, #7
 8006ece:	4970      	ldr	r1, [pc, #448]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed6:	4b6e      	ldr	r3, [pc, #440]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0cf      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	4b66      	ldr	r3, [pc, #408]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d908      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f04:	4b63      	ldr	r3, [pc, #396]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4960      	ldr	r1, [pc, #384]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d04c      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d107      	bne.n	8006f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2a:	4b5a      	ldr	r3, [pc, #360]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d121      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e0a6      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d107      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f42:	4b54      	ldr	r3, [pc, #336]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d115      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e09a      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f5a:	4b4e      	ldr	r3, [pc, #312]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e08e      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f6a:	4b4a      	ldr	r3, [pc, #296]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e086      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f7a:	4b46      	ldr	r3, [pc, #280]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 0203 	bic.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4943      	ldr	r1, [pc, #268]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8c:	f7fe fc72 	bl	8005874 <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fe fc6e 	bl	8005874 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e06e      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	4b3a      	ldr	r3, [pc, #232]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 020c 	and.w	r2, r3, #12
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1eb      	bne.n	8006f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d010      	beq.n	8006fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	4b31      	ldr	r3, [pc, #196]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d208      	bcs.n	8006fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd8:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	492b      	ldr	r1, [pc, #172]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fea:	4b29      	ldr	r3, [pc, #164]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d210      	bcs.n	800701a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f023 0207 	bic.w	r2, r3, #7
 8007000:	4923      	ldr	r1, [pc, #140]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <HAL_RCC_ClockConfig+0x1ec>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d001      	beq.n	800701a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e036      	b.n	8007088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	4918      	ldr	r1, [pc, #96]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007044:	4b13      	ldr	r3, [pc, #76]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4910      	ldr	r1, [pc, #64]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8007054:	4313      	orrs	r3, r2
 8007056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007058:	f000 f824 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 800705c:	4602      	mov	r2, r0
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <HAL_RCC_ClockConfig+0x1f0>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	490b      	ldr	r1, [pc, #44]	; (8007098 <HAL_RCC_ClockConfig+0x1f4>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
 8007074:	4a09      	ldr	r2, [pc, #36]	; (800709c <HAL_RCC_ClockConfig+0x1f8>)
 8007076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007078:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <HAL_RCC_ClockConfig+0x1fc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fbbd 	bl	80057fc <HAL_InitTick>
 8007082:	4603      	mov	r3, r0
 8007084:	72fb      	strb	r3, [r7, #11]

  return status;
 8007086:	7afb      	ldrb	r3, [r7, #11]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40022000 	.word	0x40022000
 8007094:	40021000 	.word	0x40021000
 8007098:	0800c850 	.word	0x0800c850
 800709c:	2000009c 	.word	0x2000009c
 80070a0:	20000094 	.word	0x20000094

080070a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	; 0x24
 80070a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070b2:	4b3e      	ldr	r3, [pc, #248]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 030c 	and.w	r3, r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070bc:	4b3b      	ldr	r3, [pc, #236]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0x34>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b0c      	cmp	r3, #12
 80070d0:	d121      	bne.n	8007116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11e      	bne.n	8007116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80070e4:	4b31      	ldr	r3, [pc, #196]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 80070e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e005      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10d      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007114:	e00a      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d102      	bne.n	8007122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800711c:	4b25      	ldr	r3, [pc, #148]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e004      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d101      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007128:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800712a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b0c      	cmp	r3, #12
 8007130:	d134      	bne.n	800719c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007132:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0xa6>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d003      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0xac>
 8007148:	e005      	b.n	8007156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800714c:	617b      	str	r3, [r7, #20]
      break;
 800714e:	e005      	b.n	800715c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007152:	617b      	str	r3, [r7, #20]
      break;
 8007154:	e002      	b.n	800715c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	617b      	str	r3, [r7, #20]
      break;
 800715a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800715c:	4b13      	ldr	r3, [pc, #76]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	3301      	adds	r3, #1
 8007168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800716a:	4b10      	ldr	r3, [pc, #64]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	fb03 f202 	mul.w	r2, r3, r2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	0e5b      	lsrs	r3, r3, #25
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	3301      	adds	r3, #1
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	fbb2 f3f3 	udiv	r3, r2, r3
 800719a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800719c:	69bb      	ldr	r3, [r7, #24]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3724      	adds	r7, #36	; 0x24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800c868 	.word	0x0800c868
 80071b4:	00f42400 	.word	0x00f42400
 80071b8:	02dc6c00 	.word	0x02dc6c00

080071bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c0:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071c2:	681b      	ldr	r3, [r3, #0]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	2000009c 	.word	0x2000009c

080071d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80071d8:	f7ff fff0 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4904      	ldr	r1, [pc, #16]	; (80071fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40021000 	.word	0x40021000
 80071fc:	0800c860 	.word	0x0800c860

08007200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007204:	f7ff ffda 	bl	80071bc <HAL_RCC_GetHCLKFreq>
 8007208:	4602      	mov	r2, r0
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	0adb      	lsrs	r3, r3, #11
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007216:	5ccb      	ldrb	r3, [r1, r3]
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40021000 	.word	0x40021000
 8007228:	0800c860 	.word	0x0800c860

0800722c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007238:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007244:	f7ff f9b6 	bl	80065b4 <HAL_PWREx_GetVoltageRange>
 8007248:	6178      	str	r0, [r7, #20]
 800724a:	e014      	b.n	8007276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800724c:	4b25      	ldr	r3, [pc, #148]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800724e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007250:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007256:	6593      	str	r3, [r2, #88]	; 0x58
 8007258:	4b22      	ldr	r3, [pc, #136]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007264:	f7ff f9a6 	bl	80065b4 <HAL_PWREx_GetVoltageRange>
 8007268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726e:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d10b      	bne.n	8007296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d919      	bls.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2ba0      	cmp	r3, #160	; 0xa0
 8007288:	d902      	bls.n	8007290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800728a:	2302      	movs	r3, #2
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	e013      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007290:	2301      	movs	r3, #1
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	e010      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d902      	bls.n	80072a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800729c:	2303      	movs	r3, #3
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	e00a      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d102      	bne.n	80072ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072a8:	2302      	movs	r3, #2
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	e004      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b70      	cmp	r3, #112	; 0x70
 80072b2:	d101      	bne.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072b4:	2301      	movs	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 0207 	bic.w	r2, r3, #7
 80072c0:	4909      	ldr	r1, [pc, #36]	; (80072e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d001      	beq.n	80072da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40021000 	.word	0x40021000
 80072e8:	40022000 	.word	0x40022000

080072ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072f4:	2300      	movs	r3, #0
 80072f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072f8:	2300      	movs	r3, #0
 80072fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007304:	2b00      	cmp	r3, #0
 8007306:	d031      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007310:	d01a      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007316:	d814      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800731c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007320:	d10f      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007322:	4b5d      	ldr	r3, [pc, #372]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4a5c      	ldr	r2, [pc, #368]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800732c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800732e:	e00c      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	2100      	movs	r1, #0
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f9f0 	bl	800771c <RCCEx_PLLSAI1_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007340:	e003      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	74fb      	strb	r3, [r7, #19]
      break;
 8007346:	e000      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734a:	7cfb      	ldrb	r3, [r7, #19]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007350:	4b51      	ldr	r3, [pc, #324]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	494e      	ldr	r1, [pc, #312]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007366:	e001      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007368:	7cfb      	ldrb	r3, [r7, #19]
 800736a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 809e 	beq.w	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800737a:	2300      	movs	r3, #0
 800737c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800737e:	4b46      	ldr	r3, [pc, #280]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00d      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007394:	4b40      	ldr	r3, [pc, #256]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	4a3f      	ldr	r2, [pc, #252]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800739a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739e:	6593      	str	r3, [r2, #88]	; 0x58
 80073a0:	4b3d      	ldr	r3, [pc, #244]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ac:	2301      	movs	r3, #1
 80073ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073b0:	4b3a      	ldr	r3, [pc, #232]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a39      	ldr	r2, [pc, #228]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073bc:	f7fe fa5a 	bl	8005874 <HAL_GetTick>
 80073c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073c2:	e009      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c4:	f7fe fa56 	bl	8005874 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d902      	bls.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	74fb      	strb	r3, [r7, #19]
        break;
 80073d6:	e005      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073d8:	4b30      	ldr	r3, [pc, #192]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ef      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80073e4:	7cfb      	ldrb	r3, [r7, #19]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d15a      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073ea:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01e      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	429a      	cmp	r2, r3
 8007404:	d019      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007410:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007412:	4b21      	ldr	r3, [pc, #132]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800741a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800741e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007422:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800742a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800742e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007432:	4a19      	ldr	r2, [pc, #100]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d016      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007444:	f7fe fa16 	bl	8005874 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744a:	e00b      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744c:	f7fe fa12 	bl	8005874 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d902      	bls.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	74fb      	strb	r3, [r7, #19]
            break;
 8007462:	e006      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ec      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007472:	7cfb      	ldrb	r3, [r7, #19]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	4904      	ldr	r1, [pc, #16]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800748e:	e009      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007490:	7cfb      	ldrb	r3, [r7, #19]
 8007492:	74bb      	strb	r3, [r7, #18]
 8007494:	e006      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007496:	bf00      	nop
 8007498:	40021000 	.word	0x40021000
 800749c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	7cfb      	ldrb	r3, [r7, #19]
 80074a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074a4:	7c7b      	ldrb	r3, [r7, #17]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d105      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074aa:	4b9b      	ldr	r3, [pc, #620]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ae:	4a9a      	ldr	r2, [pc, #616]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074c2:	4b95      	ldr	r3, [pc, #596]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	f023 0203 	bic.w	r2, r3, #3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	4991      	ldr	r1, [pc, #580]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074e4:	4b8c      	ldr	r3, [pc, #560]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	f023 020c 	bic.w	r2, r3, #12
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	4989      	ldr	r1, [pc, #548]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007506:	4b84      	ldr	r3, [pc, #528]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	4980      	ldr	r1, [pc, #512]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007528:	4b7b      	ldr	r3, [pc, #492]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	4978      	ldr	r1, [pc, #480]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800754a:	4b73      	ldr	r3, [pc, #460]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	496f      	ldr	r1, [pc, #444]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800756c:	4b6a      	ldr	r3, [pc, #424]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	4967      	ldr	r1, [pc, #412]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800758e:	4b62      	ldr	r3, [pc, #392]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759c:	495e      	ldr	r1, [pc, #376]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075b0:	4b59      	ldr	r3, [pc, #356]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075be:	4956      	ldr	r1, [pc, #344]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075d2:	4b51      	ldr	r3, [pc, #324]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	494d      	ldr	r1, [pc, #308]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d028      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075f4:	4b48      	ldr	r3, [pc, #288]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	4945      	ldr	r1, [pc, #276]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007612:	d106      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007614:	4b40      	ldr	r3, [pc, #256]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4a3f      	ldr	r2, [pc, #252]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800761a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800761e:	60d3      	str	r3, [r2, #12]
 8007620:	e011      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800762a:	d10c      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f872 	bl	800771c <RCCEx_PLLSAI1_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800763c:	7cfb      	ldrb	r3, [r7, #19]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007642:	7cfb      	ldrb	r3, [r7, #19]
 8007644:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d028      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007652:	4b31      	ldr	r3, [pc, #196]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007660:	492d      	ldr	r1, [pc, #180]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007670:	d106      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007672:	4b29      	ldr	r3, [pc, #164]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4a28      	ldr	r2, [pc, #160]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800767c:	60d3      	str	r3, [r2, #12]
 800767e:	e011      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007688:	d10c      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	2101      	movs	r1, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f843 	bl	800771c <RCCEx_PLLSAI1_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800769a:	7cfb      	ldrb	r3, [r7, #19]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80076a0:	7cfb      	ldrb	r3, [r7, #19]
 80076a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01c      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076b0:	4b19      	ldr	r3, [pc, #100]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076be:	4916      	ldr	r1, [pc, #88]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ce:	d10c      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	2102      	movs	r1, #2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f820 	bl	800771c <RCCEx_PLLSAI1_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80076e6:	7cfb      	ldrb	r3, [r7, #19]
 80076e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007704:	4904      	ldr	r1, [pc, #16]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800770c:	7cbb      	ldrb	r3, [r7, #18]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40021000 	.word	0x40021000

0800771c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800772a:	4b74      	ldr	r3, [pc, #464]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d018      	beq.n	8007768 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007736:	4b71      	ldr	r3, [pc, #452]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 0203 	and.w	r2, r3, #3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d10d      	bne.n	8007762 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
       ||
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800774e:	4b6b      	ldr	r3, [pc, #428]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	091b      	lsrs	r3, r3, #4
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
       ||
 800775e:	429a      	cmp	r2, r3
 8007760:	d047      	beq.n	80077f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e044      	b.n	80077f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b03      	cmp	r3, #3
 800776e:	d018      	beq.n	80077a2 <RCCEx_PLLSAI1_Config+0x86>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d825      	bhi.n	80077c0 <RCCEx_PLLSAI1_Config+0xa4>
 8007774:	2b01      	cmp	r3, #1
 8007776:	d002      	beq.n	800777e <RCCEx_PLLSAI1_Config+0x62>
 8007778:	2b02      	cmp	r3, #2
 800777a:	d009      	beq.n	8007790 <RCCEx_PLLSAI1_Config+0x74>
 800777c:	e020      	b.n	80077c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800777e:	4b5f      	ldr	r3, [pc, #380]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d11d      	bne.n	80077c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800778e:	e01a      	b.n	80077c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007790:	4b5a      	ldr	r3, [pc, #360]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	2b00      	cmp	r3, #0
 800779a:	d116      	bne.n	80077ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a0:	e013      	b.n	80077ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077a2:	4b56      	ldr	r3, [pc, #344]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10f      	bne.n	80077ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077ae:	4b53      	ldr	r3, [pc, #332]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077be:	e006      	b.n	80077ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
      break;
 80077c4:	e004      	b.n	80077d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077d6:	4b49      	ldr	r3, [pc, #292]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	430b      	orrs	r3, r1
 80077ec:	4943      	ldr	r1, [pc, #268]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d17c      	bne.n	80078f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077f8:	4b40      	ldr	r3, [pc, #256]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3f      	ldr	r2, [pc, #252]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007804:	f7fe f836 	bl	8005874 <HAL_GetTick>
 8007808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800780a:	e009      	b.n	8007820 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800780c:	f7fe f832 	bl	8005874 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d902      	bls.n	8007820 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
        break;
 800781e:	e005      	b.n	800782c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1ef      	bne.n	800780c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d15f      	bne.n	80078f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d110      	bne.n	800785a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007838:	4b30      	ldr	r3, [pc, #192]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007840:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6892      	ldr	r2, [r2, #8]
 8007848:	0211      	lsls	r1, r2, #8
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	68d2      	ldr	r2, [r2, #12]
 800784e:	06d2      	lsls	r2, r2, #27
 8007850:	430a      	orrs	r2, r1
 8007852:	492a      	ldr	r1, [pc, #168]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007854:	4313      	orrs	r3, r2
 8007856:	610b      	str	r3, [r1, #16]
 8007858:	e027      	b.n	80078aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d112      	bne.n	8007886 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007860:	4b26      	ldr	r3, [pc, #152]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6892      	ldr	r2, [r2, #8]
 8007870:	0211      	lsls	r1, r2, #8
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6912      	ldr	r2, [r2, #16]
 8007876:	0852      	lsrs	r2, r2, #1
 8007878:	3a01      	subs	r2, #1
 800787a:	0552      	lsls	r2, r2, #21
 800787c:	430a      	orrs	r2, r1
 800787e:	491f      	ldr	r1, [pc, #124]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007880:	4313      	orrs	r3, r2
 8007882:	610b      	str	r3, [r1, #16]
 8007884:	e011      	b.n	80078aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800788e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6892      	ldr	r2, [r2, #8]
 8007896:	0211      	lsls	r1, r2, #8
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6952      	ldr	r2, [r2, #20]
 800789c:	0852      	lsrs	r2, r2, #1
 800789e:	3a01      	subs	r2, #1
 80078a0:	0652      	lsls	r2, r2, #25
 80078a2:	430a      	orrs	r2, r1
 80078a4:	4915      	ldr	r1, [pc, #84]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a13      	ldr	r2, [pc, #76]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b6:	f7fd ffdd 	bl	8005874 <HAL_GetTick>
 80078ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078bc:	e009      	b.n	80078d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078be:	f7fd ffd9 	bl	8005874 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d902      	bls.n	80078d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]
          break;
 80078d0:	e005      	b.n	80078de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ef      	beq.n	80078be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	4903      	ldr	r1, [pc, #12]	; (80078fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40021000 	.word	0x40021000

08007900 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d06c      	beq.n	80079ec <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f003 fa80 	bl	800ae2c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	22ca      	movs	r2, #202	; 0xca
 800793a:	625a      	str	r2, [r3, #36]	; 0x24
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2253      	movs	r2, #83	; 0x53
 8007942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f87c 	bl	8007a42 <RTC_EnterInitMode>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d14b      	bne.n	80079ec <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007966:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68d2      	ldr	r2, [r2, #12]
 800798e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6919      	ldr	r1, [r3, #16]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	041a      	lsls	r2, r3, #16
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f87f 	bl	8007aa8 <RTC_ExitInitMode>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11b      	bne.n	80079ec <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0203 	bic.w	r2, r2, #3
 80079c2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	22ff      	movs	r2, #255	; 0xff
 80079e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a0c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007a0e:	f7fd ff31 	bl	8005874 <HAL_GetTick>
 8007a12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a14:	e009      	b.n	8007a2a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a16:	f7fd ff2d 	bl	8005874 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a24:	d901      	bls.n	8007a2a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e007      	b.n	8007a3a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0ee      	beq.n	8007a16 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d120      	bne.n	8007a9e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a66:	f7fd ff05 	bl	8005874 <HAL_GetTick>
 8007a6a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a6c:	e00d      	b.n	8007a8a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007a6e:	f7fd ff01 	bl	8005874 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a7c:	d905      	bls.n	8007a8a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2203      	movs	r2, #3
 8007a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <RTC_EnterInitMode+0x5c>
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d1e7      	bne.n	8007a6e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007abe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ff92 	bl	80079f6 <HAL_RTC_WaitForSynchro>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01e      	beq.n	8007b16 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2203      	movs	r2, #3
 8007adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e017      	b.n	8007b16 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4a0d      	ldr	r2, [pc, #52]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007aec:	f023 0320 	bic.w	r3, r3, #32
 8007af0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ff7f 	bl	80079f6 <HAL_RTC_WaitForSynchro>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2203      	movs	r2, #3
 8007b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <RTC_ExitInitMode+0x78>)
 8007b10:	f043 0320 	orr.w	r3, r3, #32
 8007b14:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40002800 	.word	0x40002800

08007b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e095      	b.n	8007c62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b46:	d009      	beq.n	8007b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	61da      	str	r2, [r3, #28]
 8007b4e:	e005      	b.n	8007b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f877 	bl	8007c6a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b9c:	d902      	bls.n	8007ba4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e002      	b.n	8007baa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ba8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bb2:	d007      	beq.n	8007bc4 <HAL_SPI_Init+0xa0>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	431a      	orrs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	ea42 0103 	orr.w	r1, r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	0c1b      	lsrs	r3, r3, #16
 8007c20:	f003 0204 	and.w	r2, r3, #4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c40:	ea42 0103 	orr.w	r1, r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e049      	b.n	8007d24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f003 f8dd 	bl	800ae64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f000 fe2f 	bl	8008920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e049      	b.n	8007dd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f003 f936 	bl	800afc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f000 fdd8 	bl	8008920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	e03c      	b.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d109      	bne.n	8007e22 <HAL_TIM_PWM_Start_DMA+0x46>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	bf0c      	ite	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	e02f      	b.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d109      	bne.n	8007e3c <HAL_TIM_PWM_Start_DMA+0x60>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	bf0c      	ite	eq
 8007e34:	2301      	moveq	r3, #1
 8007e36:	2300      	movne	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	e022      	b.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b0c      	cmp	r3, #12
 8007e40:	d109      	bne.n	8007e56 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	e015      	b.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b10      	cmp	r3, #16
 8007e5a:	d109      	bne.n	8007e70 <HAL_TIM_PWM_Start_DMA+0x94>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	e008      	b.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2301      	moveq	r3, #1
 8007e7e:	2300      	movne	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e18d      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	bf0c      	ite	eq
 8007e9c:	2301      	moveq	r3, #1
 8007e9e:	2300      	movne	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	e03c      	b.n	8007f1e <HAL_TIM_PWM_Start_DMA+0x142>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d109      	bne.n	8007ebe <HAL_TIM_PWM_Start_DMA+0xe2>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	2300      	movne	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	e02f      	b.n	8007f1e <HAL_TIM_PWM_Start_DMA+0x142>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d109      	bne.n	8007ed8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	bf0c      	ite	eq
 8007ed0:	2301      	moveq	r3, #1
 8007ed2:	2300      	movne	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e022      	b.n	8007f1e <HAL_TIM_PWM_Start_DMA+0x142>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d109      	bne.n	8007ef2 <HAL_TIM_PWM_Start_DMA+0x116>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf0c      	ite	eq
 8007eea:	2301      	moveq	r3, #1
 8007eec:	2300      	movne	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e015      	b.n	8007f1e <HAL_TIM_PWM_Start_DMA+0x142>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start_DMA+0x130>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e008      	b.n	8007f1e <HAL_TIM_PWM_Start_DMA+0x142>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d034      	beq.n	8007f8c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <HAL_TIM_PWM_Start_DMA+0x152>
 8007f28:	887b      	ldrh	r3, [r7, #2]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e139      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_PWM_Start_DMA+0x166>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f40:	e026      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d104      	bne.n	8007f52 <HAL_TIM_PWM_Start_DMA+0x176>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f50:	e01e      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d104      	bne.n	8007f62 <HAL_TIM_PWM_Start_DMA+0x186>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f60:	e016      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	d104      	bne.n	8007f72 <HAL_TIM_PWM_Start_DMA+0x196>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f70:	e00e      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f80:	e006      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f8a:	e001      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e10a      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b0c      	cmp	r3, #12
 8007f94:	f200 80ae 	bhi.w	80080f4 <HAL_TIM_PWM_Start_DMA+0x318>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fd5 	.word	0x08007fd5
 8007fa4:	080080f5 	.word	0x080080f5
 8007fa8:	080080f5 	.word	0x080080f5
 8007fac:	080080f5 	.word	0x080080f5
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	080080f5 	.word	0x080080f5
 8007fb8:	080080f5 	.word	0x080080f5
 8007fbc:	080080f5 	.word	0x080080f5
 8007fc0:	08008065 	.word	0x08008065
 8007fc4:	080080f5 	.word	0x080080f5
 8007fc8:	080080f5 	.word	0x080080f5
 8007fcc:	080080f5 	.word	0x080080f5
 8007fd0:	080080ad 	.word	0x080080ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	4a75      	ldr	r2, [pc, #468]	; (80081b0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	4a74      	ldr	r2, [pc, #464]	; (80081b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	4a73      	ldr	r2, [pc, #460]	; (80081b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3334      	adds	r3, #52	; 0x34
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	887b      	ldrh	r3, [r7, #2]
 8007ffc:	f7fd fe92 	bl	8005d24 <HAL_DMA_Start_IT>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e0cd      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008018:	60da      	str	r2, [r3, #12]
      break;
 800801a:	e06e      	b.n	80080fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	4a63      	ldr	r2, [pc, #396]	; (80081b0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	4a62      	ldr	r2, [pc, #392]	; (80081b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800802a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	4a61      	ldr	r2, [pc, #388]	; (80081b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3338      	adds	r3, #56	; 0x38
 8008040:	461a      	mov	r2, r3
 8008042:	887b      	ldrh	r3, [r7, #2]
 8008044:	f7fd fe6e 	bl	8005d24 <HAL_DMA_Start_IT>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e0a9      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008060:	60da      	str	r2, [r3, #12]
      break;
 8008062:	e04a      	b.n	80080fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a51      	ldr	r2, [pc, #324]	; (80081b0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a50      	ldr	r2, [pc, #320]	; (80081b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008072:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4a4f      	ldr	r2, [pc, #316]	; (80081b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800807a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	333c      	adds	r3, #60	; 0x3c
 8008088:	461a      	mov	r2, r3
 800808a:	887b      	ldrh	r3, [r7, #2]
 800808c:	f7fd fe4a 	bl	8005d24 <HAL_DMA_Start_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e085      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a8:	60da      	str	r2, [r3, #12]
      break;
 80080aa:	e026      	b.n	80080fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	4a3f      	ldr	r2, [pc, #252]	; (80081b0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	4a3e      	ldr	r2, [pc, #248]	; (80081b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	4a3d      	ldr	r2, [pc, #244]	; (80081b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80080c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3340      	adds	r3, #64	; 0x40
 80080d0:	461a      	mov	r2, r3
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	f7fd fe26 	bl	8005d24 <HAL_DMA_Start_IT>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e061      	b.n	80081a6 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080f0:	60da      	str	r2, [r3, #12]
      break;
 80080f2:	e002      	b.n	80080fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
      break;
 80080f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d151      	bne.n	80081a4 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 ff85 	bl	8009018 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d009      	beq.n	800812c <HAL_TIM_PWM_Start_DMA+0x350>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a28      	ldr	r2, [pc, #160]	; (80081c0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d004      	beq.n	800812c <HAL_TIM_PWM_Start_DMA+0x350>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a27      	ldr	r2, [pc, #156]	; (80081c4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d101      	bne.n	8008130 <HAL_TIM_PWM_Start_DMA+0x354>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <HAL_TIM_PWM_Start_DMA+0x356>
 8008130:	2300      	movs	r3, #0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_TIM_PWM_Start_DMA+0x388>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008158:	d004      	beq.n	8008164 <HAL_TIM_PWM_Start_DMA+0x388>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a18      	ldr	r2, [pc, #96]	; (80081c0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d115      	bne.n	8008190 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800816c:	4013      	ands	r3, r2
 800816e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b06      	cmp	r3, #6
 8008174:	d015      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800817c:	d011      	beq.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e008      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e000      	b.n	80081a4 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	08008811 	.word	0x08008811
 80081b4:	080088b9 	.word	0x080088b9
 80081b8:	0800877f 	.word	0x0800877f
 80081bc:	40012c00 	.word	0x40012c00
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	00010007 	.word	0x00010007

080081cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b0c      	cmp	r3, #12
 80081de:	d855      	bhi.n	800828c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	0800821d 	.word	0x0800821d
 80081ec:	0800828d 	.word	0x0800828d
 80081f0:	0800828d 	.word	0x0800828d
 80081f4:	0800828d 	.word	0x0800828d
 80081f8:	08008239 	.word	0x08008239
 80081fc:	0800828d 	.word	0x0800828d
 8008200:	0800828d 	.word	0x0800828d
 8008204:	0800828d 	.word	0x0800828d
 8008208:	08008255 	.word	0x08008255
 800820c:	0800828d 	.word	0x0800828d
 8008210:	0800828d 	.word	0x0800828d
 8008214:	0800828d 	.word	0x0800828d
 8008218:	08008271 	.word	0x08008271
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800822a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	4618      	mov	r0, r3
 8008232:	f7fd fe15 	bl	8005e60 <HAL_DMA_Abort_IT>
      break;
 8008236:	e02c      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008246:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd fe07 	bl	8005e60 <HAL_DMA_Abort_IT>
      break;
 8008252:	e01e      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008262:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd fdf9 	bl	8005e60 <HAL_DMA_Abort_IT>
      break;
 800826e:	e010      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800827e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	4618      	mov	r0, r3
 8008286:	f7fd fdeb 	bl	8005e60 <HAL_DMA_Abort_IT>
      break;
 800828a:	e002      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
      break;
 8008290:	bf00      	nop
  }

  if (status == HAL_OK)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d176      	bne.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 feb9 	bl	8009018 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a39      	ldr	r2, [pc, #228]	; (8008390 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a37      	ldr	r2, [pc, #220]	; (8008394 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a36      	ldr	r2, [pc, #216]	; (8008398 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d101      	bne.n	80082c8 <HAL_TIM_PWM_Stop_DMA+0xfc>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <HAL_TIM_PWM_Stop_DMA+0xfe>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d017      	beq.n	80082fe <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6a1a      	ldr	r2, [r3, #32]
 80082d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80082d8:	4013      	ands	r3, r2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10f      	bne.n	80082fe <HAL_TIM_PWM_Stop_DMA+0x132>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6a1a      	ldr	r2, [r3, #32]
 80082e4:	f240 4344 	movw	r3, #1092	; 0x444
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d107      	bne.n	80082fe <HAL_TIM_PWM_Stop_DMA+0x132>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	f241 1311 	movw	r3, #4369	; 0x1111
 8008308:	4013      	ands	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10f      	bne.n	800832e <HAL_TIM_PWM_Stop_DMA+0x162>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6a1a      	ldr	r2, [r3, #32]
 8008314:	f240 4344 	movw	r3, #1092	; 0x444
 8008318:	4013      	ands	r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <HAL_TIM_PWM_Stop_DMA+0x162>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0201 	bic.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <HAL_TIM_PWM_Stop_DMA+0x172>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800833c:	e023      	b.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d104      	bne.n	800834e <HAL_TIM_PWM_Stop_DMA+0x182>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800834c:	e01b      	b.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b08      	cmp	r3, #8
 8008352:	d104      	bne.n	800835e <HAL_TIM_PWM_Stop_DMA+0x192>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800835c:	e013      	b.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b0c      	cmp	r3, #12
 8008362:	d104      	bne.n	800836e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800836c:	e00b      	b.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b10      	cmp	r3, #16
 8008372:	d104      	bne.n	800837e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800837c:	e003      	b.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40012c00 	.word	0x40012c00
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400

0800839c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e0ff      	b.n	80085ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b14      	cmp	r3, #20
 80083c6:	f200 80f0 	bhi.w	80085aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008425 	.word	0x08008425
 80083d4:	080085ab 	.word	0x080085ab
 80083d8:	080085ab 	.word	0x080085ab
 80083dc:	080085ab 	.word	0x080085ab
 80083e0:	08008465 	.word	0x08008465
 80083e4:	080085ab 	.word	0x080085ab
 80083e8:	080085ab 	.word	0x080085ab
 80083ec:	080085ab 	.word	0x080085ab
 80083f0:	080084a7 	.word	0x080084a7
 80083f4:	080085ab 	.word	0x080085ab
 80083f8:	080085ab 	.word	0x080085ab
 80083fc:	080085ab 	.word	0x080085ab
 8008400:	080084e7 	.word	0x080084e7
 8008404:	080085ab 	.word	0x080085ab
 8008408:	080085ab 	.word	0x080085ab
 800840c:	080085ab 	.word	0x080085ab
 8008410:	08008529 	.word	0x08008529
 8008414:	080085ab 	.word	0x080085ab
 8008418:	080085ab 	.word	0x080085ab
 800841c:	080085ab 	.word	0x080085ab
 8008420:	08008569 	.word	0x08008569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fadc 	bl	80089e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0208 	orr.w	r2, r2, #8
 800843e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0204 	bic.w	r2, r2, #4
 800844e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6999      	ldr	r1, [r3, #24]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	619a      	str	r2, [r3, #24]
      break;
 8008462:	e0a5      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fb38 	bl	8008ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800847e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800848e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6999      	ldr	r1, [r3, #24]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	021a      	lsls	r2, r3, #8
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	619a      	str	r2, [r3, #24]
      break;
 80084a4:	e084      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fb91 	bl	8008bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0208 	orr.w	r2, r2, #8
 80084c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0204 	bic.w	r2, r2, #4
 80084d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69d9      	ldr	r1, [r3, #28]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	61da      	str	r2, [r3, #28]
      break;
 80084e4:	e064      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fbe9 	bl	8008cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69d9      	ldr	r1, [r3, #28]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	021a      	lsls	r2, r3, #8
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	61da      	str	r2, [r3, #28]
      break;
 8008526:	e043      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fc26 	bl	8008d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0208 	orr.w	r2, r2, #8
 8008542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0204 	bic.w	r2, r2, #4
 8008552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	691a      	ldr	r2, [r3, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008566:	e023      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fc5e 	bl	8008e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	021a      	lsls	r2, r3, #8
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085a8:	e002      	b.n	80085b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	75fb      	strb	r3, [r7, #23]
      break;
 80085ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop

080085c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_TIM_ConfigClockSource+0x1c>
 80085dc:	2302      	movs	r3, #2
 80085de:	e0b6      	b.n	800874e <HAL_TIM_ConfigClockSource+0x18a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800860a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861c:	d03e      	beq.n	800869c <HAL_TIM_ConfigClockSource+0xd8>
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	f200 8087 	bhi.w	8008734 <HAL_TIM_ConfigClockSource+0x170>
 8008626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862a:	f000 8086 	beq.w	800873a <HAL_TIM_ConfigClockSource+0x176>
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008632:	d87f      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 8008634:	2b70      	cmp	r3, #112	; 0x70
 8008636:	d01a      	beq.n	800866e <HAL_TIM_ConfigClockSource+0xaa>
 8008638:	2b70      	cmp	r3, #112	; 0x70
 800863a:	d87b      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 800863c:	2b60      	cmp	r3, #96	; 0x60
 800863e:	d050      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x11e>
 8008640:	2b60      	cmp	r3, #96	; 0x60
 8008642:	d877      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 8008644:	2b50      	cmp	r3, #80	; 0x50
 8008646:	d03c      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0xfe>
 8008648:	2b50      	cmp	r3, #80	; 0x50
 800864a:	d873      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 800864c:	2b40      	cmp	r3, #64	; 0x40
 800864e:	d058      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x13e>
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d86f      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 8008654:	2b30      	cmp	r3, #48	; 0x30
 8008656:	d064      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15e>
 8008658:	2b30      	cmp	r3, #48	; 0x30
 800865a:	d86b      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 800865c:	2b20      	cmp	r3, #32
 800865e:	d060      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15e>
 8008660:	2b20      	cmp	r3, #32
 8008662:	d867      	bhi.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d05c      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15e>
 8008668:	2b10      	cmp	r3, #16
 800866a:	d05a      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x15e>
 800866c:	e062      	b.n	8008734 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800867e:	f000 fcab 	bl	8008fd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	609a      	str	r2, [r3, #8]
      break;
 800869a:	e04f      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086ac:	f000 fc94 	bl	8008fd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086be:	609a      	str	r2, [r3, #8]
      break;
 80086c0:	e03c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 fc08 	bl	8008ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2150      	movs	r1, #80	; 0x50
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fc61 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 80086e0:	e02c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 fc27 	bl	8008f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2160      	movs	r1, #96	; 0x60
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fc51 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 8008700:	e01c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800870e:	461a      	mov	r2, r3
 8008710:	f000 fbe8 	bl	8008ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2140      	movs	r1, #64	; 0x40
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fc41 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 8008720:	e00c      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f000 fc38 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 8008732:	e003      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e000      	b.n	800873c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800873a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d107      	bne.n	80087a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087a4:	e02a      	b.n	80087fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d107      	bne.n	80087c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2202      	movs	r2, #2
 80087b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087be:	e01d      	b.n	80087fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d107      	bne.n	80087da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2204      	movs	r2, #4
 80087ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d8:	e010      	b.n	80087fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d107      	bne.n	80087f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2208      	movs	r2, #8
 80087e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087f2:	e003      	b.n	80087fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff ffb4 	bl	800876a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	771a      	strb	r2, [r3, #28]
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d10b      	bne.n	8008840 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d136      	bne.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800883e:	e031      	b.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	429a      	cmp	r2, r3
 8008848:	d10b      	bne.n	8008862 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2202      	movs	r2, #2
 800884e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d125      	bne.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008860:	e020      	b.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	d10b      	bne.n	8008884 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2204      	movs	r2, #4
 8008870:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d114      	bne.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008882:	e00f      	b.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	429a      	cmp	r2, r3
 800888c:	d10a      	bne.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2208      	movs	r2, #8
 8008892:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f002 fcf7 	bl	800b298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d103      	bne.n	80088d8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	771a      	strb	r2, [r3, #28]
 80088d6:	e019      	b.n	800890c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d103      	bne.n	80088ea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2202      	movs	r2, #2
 80088e6:	771a      	strb	r2, [r3, #28]
 80088e8:	e010      	b.n	800890c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d103      	bne.n	80088fc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2204      	movs	r2, #4
 80088f8:	771a      	strb	r2, [r3, #28]
 80088fa:	e007      	b.n	800890c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d102      	bne.n	800890c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2208      	movs	r2, #8
 800890a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ff22 	bl	8008756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	771a      	strb	r2, [r3, #28]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a2a      	ldr	r2, [pc, #168]	; (80089dc <TIM_Base_SetConfig+0xbc>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_Base_SetConfig+0x20>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893e:	d108      	bne.n	8008952 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a21      	ldr	r2, [pc, #132]	; (80089dc <TIM_Base_SetConfig+0xbc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_Base_SetConfig+0x52>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008960:	d007      	beq.n	8008972 <TIM_Base_SetConfig+0x52>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <TIM_Base_SetConfig+0xc0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_Base_SetConfig+0x52>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_Base_SetConfig+0xc4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a0c      	ldr	r2, [pc, #48]	; (80089dc <TIM_Base_SetConfig+0xbc>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d007      	beq.n	80089c0 <TIM_Base_SetConfig+0xa0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a0b      	ldr	r2, [pc, #44]	; (80089e0 <TIM_Base_SetConfig+0xc0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_Base_SetConfig+0xa0>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <TIM_Base_SetConfig+0xc4>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d103      	bne.n	80089c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	615a      	str	r2, [r3, #20]
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40012c00 	.word	0x40012c00
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40014400 	.word	0x40014400

080089e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 0302 	bic.w	r3, r3, #2
 8008a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a24      	ldr	r2, [pc, #144]	; (8008ad4 <TIM_OC1_SetConfig+0xec>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d007      	beq.n	8008a58 <TIM_OC1_SetConfig+0x70>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a23      	ldr	r2, [pc, #140]	; (8008ad8 <TIM_OC1_SetConfig+0xf0>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d003      	beq.n	8008a58 <TIM_OC1_SetConfig+0x70>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a22      	ldr	r2, [pc, #136]	; (8008adc <TIM_OC1_SetConfig+0xf4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d10c      	bne.n	8008a72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f023 0308 	bic.w	r3, r3, #8
 8008a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f023 0304 	bic.w	r3, r3, #4
 8008a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <TIM_OC1_SetConfig+0xec>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d007      	beq.n	8008a8a <TIM_OC1_SetConfig+0xa2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <TIM_OC1_SetConfig+0xf0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_OC1_SetConfig+0xa2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a15      	ldr	r2, [pc, #84]	; (8008adc <TIM_OC1_SetConfig+0xf4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d111      	bne.n	8008aae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	621a      	str	r2, [r3, #32]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400

08008ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	f023 0210 	bic.w	r2, r3, #16
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0320 	bic.w	r3, r3, #32
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a22      	ldr	r2, [pc, #136]	; (8008bc8 <TIM_OC2_SetConfig+0xe8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d10d      	bne.n	8008b60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <TIM_OC2_SetConfig+0xe8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d007      	beq.n	8008b78 <TIM_OC2_SetConfig+0x98>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <TIM_OC2_SetConfig+0xec>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d003      	beq.n	8008b78 <TIM_OC2_SetConfig+0x98>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a17      	ldr	r2, [pc, #92]	; (8008bd0 <TIM_OC2_SetConfig+0xf0>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d113      	bne.n	8008ba0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40012c00 	.word	0x40012c00
 8008bcc:	40014000 	.word	0x40014000
 8008bd0:	40014400 	.word	0x40014400

08008bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a21      	ldr	r2, [pc, #132]	; (8008cb8 <TIM_OC3_SetConfig+0xe4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d10d      	bne.n	8008c52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <TIM_OC3_SetConfig+0xe4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_OC3_SetConfig+0x96>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <TIM_OC3_SetConfig+0xe8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_OC3_SetConfig+0x96>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a16      	ldr	r2, [pc, #88]	; (8008cc0 <TIM_OC3_SetConfig+0xec>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d113      	bne.n	8008c92 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	621a      	str	r2, [r3, #32]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400

08008cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	031b      	lsls	r3, r3, #12
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a14      	ldr	r2, [pc, #80]	; (8008d74 <TIM_OC4_SetConfig+0xb0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <TIM_OC4_SetConfig+0x74>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a13      	ldr	r2, [pc, #76]	; (8008d78 <TIM_OC4_SetConfig+0xb4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_OC4_SetConfig+0x74>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <TIM_OC4_SetConfig+0xb8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d109      	bne.n	8008d4c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	019b      	lsls	r3, r3, #6
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40012c00 	.word	0x40012c00
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400

08008d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	041b      	lsls	r3, r3, #16
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <TIM_OC5_SetConfig+0xa4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d007      	beq.n	8008dea <TIM_OC5_SetConfig+0x6a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a12      	ldr	r2, [pc, #72]	; (8008e28 <TIM_OC5_SetConfig+0xa8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d003      	beq.n	8008dea <TIM_OC5_SetConfig+0x6a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <TIM_OC5_SetConfig+0xac>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d109      	bne.n	8008dfe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40014400 	.word	0x40014400

08008e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	051b      	lsls	r3, r3, #20
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a14      	ldr	r2, [pc, #80]	; (8008ed8 <TIM_OC6_SetConfig+0xa8>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d007      	beq.n	8008e9c <TIM_OC6_SetConfig+0x6c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a13      	ldr	r2, [pc, #76]	; (8008edc <TIM_OC6_SetConfig+0xac>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d003      	beq.n	8008e9c <TIM_OC6_SetConfig+0x6c>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <TIM_OC6_SetConfig+0xb0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d109      	bne.n	8008eb0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	029b      	lsls	r3, r3, #10
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40012c00 	.word	0x40012c00
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40014400 	.word	0x40014400

08008ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f023 0201 	bic.w	r2, r3, #1
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f023 030a 	bic.w	r3, r3, #10
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b087      	sub	sp, #28
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f023 0210 	bic.w	r2, r3, #16
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	031b      	lsls	r3, r3, #12
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f043 0307 	orr.w	r3, r3, #7
 8008fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	609a      	str	r2, [r3, #8]
}
 800900c:	bf00      	nop
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 031f 	and.w	r3, r3, #31
 800902a:	2201      	movs	r2, #1
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a1a      	ldr	r2, [r3, #32]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	43db      	mvns	r3, r3
 800903a:	401a      	ands	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	fa01 f303 	lsl.w	r3, r1, r3
 8009050:	431a      	orrs	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	621a      	str	r2, [r3, #32]
}
 8009056:	bf00      	nop
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
	...

08009064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009078:	2302      	movs	r3, #2
 800907a:	e04f      	b.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a21      	ldr	r2, [pc, #132]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d108      	bne.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a14      	ldr	r2, [pc, #80]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d009      	beq.n	80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d004      	beq.n	80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a10      	ldr	r2, [pc, #64]	; (800912c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10c      	bne.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40012c00 	.word	0x40012c00
 800912c:	40014000 	.word	0x40014000

08009130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009148:	2302      	movs	r3, #2
 800914a:	e060      	b.n	800920e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a14      	ldr	r2, [pc, #80]	; (800921c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d115      	bne.n	80091fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	051b      	lsls	r3, r3, #20
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40012c00 	.word	0x40012c00

08009220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e040      	b.n	80092b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f873 	bl	800932e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2224      	movs	r2, #36	; 0x24
 800924c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0201 	bic.w	r2, r2, #1
 800925c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb72 	bl	8009948 <UART_SetConfig>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e022      	b.n	80092b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fdc0 	bl	8009dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800928a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800929a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fe47 	bl	8009f40 <UART_CheckIdleState>
 80092b2:	4603      	mov	r3, r0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e02b      	b.n	8009326 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2224      	movs	r2, #36	; 0x24
 80092d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0201 	bic.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2200      	movs	r2, #0
 80092fa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f820 	bl	8009342 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b0ba      	sub	sp, #232	; 0xe8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800937e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009382:	f640 030f 	movw	r3, #2063	; 0x80f
 8009386:	4013      	ands	r3, r2
 8009388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800938c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009390:	2b00      	cmp	r3, #0
 8009392:	d115      	bne.n	80093c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00f      	beq.n	80093c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 82a6 	beq.w	8009902 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
      }
      return;
 80093be:	e2a0      	b.n	8009902 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80093c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8117 	beq.w	80095f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80093d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80093da:	4b85      	ldr	r3, [pc, #532]	; (80095f0 <HAL_UART_IRQHandler+0x298>)
 80093dc:	4013      	ands	r3, r2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 810a 	beq.w	80095f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d011      	beq.n	8009414 <HAL_UART_IRQHandler+0xbc>
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2201      	movs	r2, #1
 8009402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940a:	f043 0201 	orr.w	r2, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d011      	beq.n	8009444 <HAL_UART_IRQHandler+0xec>
 8009420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2202      	movs	r2, #2
 8009432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943a:	f043 0204 	orr.w	r2, r3, #4
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d011      	beq.n	8009474 <HAL_UART_IRQHandler+0x11c>
 8009450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2204      	movs	r2, #4
 8009462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946a:	f043 0202 	orr.w	r2, r3, #2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d017      	beq.n	80094b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800948c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009490:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2208      	movs	r2, #8
 800949e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094a6:	f043 0208 	orr.w	r2, r3, #8
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <HAL_UART_IRQHandler+0x18a>
 80094bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00c      	beq.n	80094e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d8:	f043 0220 	orr.w	r2, r3, #32
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 820c 	beq.w	8009906 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00d      	beq.n	8009516 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d005      	beq.n	800953a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800952e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009532:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009536:	2b00      	cmp	r3, #0
 8009538:	d04f      	beq.n	80095da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fe0d 	bl	800a15a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	d141      	bne.n	80095d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800957a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800957e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1d9      	bne.n	800954e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d013      	beq.n	80095ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a6:	4a13      	ldr	r2, [pc, #76]	; (80095f4 <HAL_UART_IRQHandler+0x29c>)
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fc fc56 	bl	8005e60 <HAL_DMA_Abort_IT>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d017      	beq.n	80095ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c8:	e00f      	b.n	80095ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f9a6 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	e00b      	b.n	80095ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f9a2 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	e007      	b.n	80095ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f99e 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80095e8:	e18d      	b.n	8009906 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ea:	bf00      	nop
    return;
 80095ec:	e18b      	b.n	8009906 <HAL_UART_IRQHandler+0x5ae>
 80095ee:	bf00      	nop
 80095f0:	04000120 	.word	0x04000120
 80095f4:	0800a221 	.word	0x0800a221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f040 8146 	bne.w	800988e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009606:	f003 0310 	and.w	r3, r3, #16
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 813f 	beq.w	800988e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8138 	beq.w	800988e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2210      	movs	r2, #16
 8009624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	f040 80b4 	bne.w	800979e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009642:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 815f 	beq.w	800990a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009656:	429a      	cmp	r2, r3
 8009658:	f080 8157 	bcs.w	800990a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 8085 	bne.w	8009782 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800968c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1da      	bne.n	8009678 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e1      	bne.n	80096c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800970e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3308      	adds	r3, #8
 800971e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e3      	bne.n	80096fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009752:	f023 0310 	bic.w	r3, r3, #16
 8009756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009764:	65bb      	str	r3, [r7, #88]	; 0x58
 8009766:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800976a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e4      	bne.n	8009742 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977c:	4618      	mov	r0, r3
 800977e:	f7fc fb31 	bl	8005de4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800978e:	b29b      	uxth	r3, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	b29b      	uxth	r3, r3
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8ca 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800979c:	e0b5      	b.n	800990a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80a7 	beq.w	800990e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80097c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80a2 	beq.w	800990e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ec:	647b      	str	r3, [r7, #68]	; 0x44
 80097ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e4      	bne.n	80097ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3308      	adds	r3, #8
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	623b      	str	r3, [r7, #32]
   return(result);
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	f023 0301 	bic.w	r3, r3, #1
 8009816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009824:	633a      	str	r2, [r7, #48]	; 0x30
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800982a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e3      	bne.n	8009800 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2220      	movs	r2, #32
 800983c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	60fb      	str	r3, [r7, #12]
   return(result);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0310 	bic.w	r3, r3, #16
 800985e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	69b9      	ldr	r1, [r7, #24]
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	617b      	str	r3, [r7, #20]
   return(result);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e4      	bne.n	800984a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f852 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800988c:	e03f      	b.n	800990e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800988e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00e      	beq.n	80098b8 <HAL_UART_IRQHandler+0x560>
 800989a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800989e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d008      	beq.n	80098b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fcf5 	bl	800a2a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098b6:	e02d      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d008      	beq.n	80098e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01c      	beq.n	8009912 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4798      	blx	r3
    }
    return;
 80098e0:	e017      	b.n	8009912 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d012      	beq.n	8009914 <HAL_UART_IRQHandler+0x5bc>
 80098ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fca6 	bl	800a24c <UART_EndTransmit_IT>
    return;
 8009900:	e008      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009902:	bf00      	nop
 8009904:	e006      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009906:	bf00      	nop
 8009908:	e004      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
      return;
 800990a:	bf00      	nop
 800990c:	e002      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
      return;
 800990e:	bf00      	nop
 8009910:	e000      	b.n	8009914 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009912:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009914:	37e8      	adds	r7, #232	; 0xe8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop

0800991c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800994c:	b08a      	sub	sp, #40	; 0x28
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	431a      	orrs	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	4313      	orrs	r3, r2
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4b9e      	ldr	r3, [pc, #632]	; (8009bf0 <UART_SetConfig+0x2a8>)
 8009978:	4013      	ands	r3, r2
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	6812      	ldr	r2, [r2, #0]
 800997e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009980:	430b      	orrs	r3, r1
 8009982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a93      	ldr	r2, [pc, #588]	; (8009bf4 <UART_SetConfig+0x2ac>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b0:	4313      	orrs	r3, r2
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c4:	430a      	orrs	r2, r1
 80099c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a8a      	ldr	r2, [pc, #552]	; (8009bf8 <UART_SetConfig+0x2b0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d126      	bne.n	8009a20 <UART_SetConfig+0xd8>
 80099d2:	4b8a      	ldr	r3, [pc, #552]	; (8009bfc <UART_SetConfig+0x2b4>)
 80099d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d81b      	bhi.n	8009a18 <UART_SetConfig+0xd0>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0xa0>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	080099f9 	.word	0x080099f9
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a01 	.word	0x08009a01
 80099f4:	08009a11 	.word	0x08009a11
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099fe:	e0ab      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a00:	2302      	movs	r3, #2
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a06:	e0a7      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a0e:	e0a3      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a16:	e09f      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a1e:	e09b      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a76      	ldr	r2, [pc, #472]	; (8009c00 <UART_SetConfig+0x2b8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d138      	bne.n	8009a9c <UART_SetConfig+0x154>
 8009a2a:	4b74      	ldr	r3, [pc, #464]	; (8009bfc <UART_SetConfig+0x2b4>)
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a30:	f003 030c 	and.w	r3, r3, #12
 8009a34:	2b0c      	cmp	r3, #12
 8009a36:	d82d      	bhi.n	8009a94 <UART_SetConfig+0x14c>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <UART_SetConfig+0xf8>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a75 	.word	0x08009a75
 8009a44:	08009a95 	.word	0x08009a95
 8009a48:	08009a95 	.word	0x08009a95
 8009a4c:	08009a95 	.word	0x08009a95
 8009a50:	08009a85 	.word	0x08009a85
 8009a54:	08009a95 	.word	0x08009a95
 8009a58:	08009a95 	.word	0x08009a95
 8009a5c:	08009a95 	.word	0x08009a95
 8009a60:	08009a7d 	.word	0x08009a7d
 8009a64:	08009a95 	.word	0x08009a95
 8009a68:	08009a95 	.word	0x08009a95
 8009a6c:	08009a95 	.word	0x08009a95
 8009a70:	08009a8d 	.word	0x08009a8d
 8009a74:	2300      	movs	r3, #0
 8009a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a7a:	e06d      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a82:	e069      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a8a:	e065      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a92:	e061      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a9a:	e05d      	b.n	8009b58 <UART_SetConfig+0x210>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a58      	ldr	r2, [pc, #352]	; (8009c04 <UART_SetConfig+0x2bc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d125      	bne.n	8009af2 <UART_SetConfig+0x1aa>
 8009aa6:	4b55      	ldr	r3, [pc, #340]	; (8009bfc <UART_SetConfig+0x2b4>)
 8009aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ab0:	2b30      	cmp	r3, #48	; 0x30
 8009ab2:	d016      	beq.n	8009ae2 <UART_SetConfig+0x19a>
 8009ab4:	2b30      	cmp	r3, #48	; 0x30
 8009ab6:	d818      	bhi.n	8009aea <UART_SetConfig+0x1a2>
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d00a      	beq.n	8009ad2 <UART_SetConfig+0x18a>
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d814      	bhi.n	8009aea <UART_SetConfig+0x1a2>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <UART_SetConfig+0x182>
 8009ac4:	2b10      	cmp	r3, #16
 8009ac6:	d008      	beq.n	8009ada <UART_SetConfig+0x192>
 8009ac8:	e00f      	b.n	8009aea <UART_SetConfig+0x1a2>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ad0:	e042      	b.n	8009b58 <UART_SetConfig+0x210>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ad8:	e03e      	b.n	8009b58 <UART_SetConfig+0x210>
 8009ada:	2304      	movs	r3, #4
 8009adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ae0:	e03a      	b.n	8009b58 <UART_SetConfig+0x210>
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ae8:	e036      	b.n	8009b58 <UART_SetConfig+0x210>
 8009aea:	2310      	movs	r3, #16
 8009aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009af0:	e032      	b.n	8009b58 <UART_SetConfig+0x210>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <UART_SetConfig+0x2ac>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d12a      	bne.n	8009b52 <UART_SetConfig+0x20a>
 8009afc:	4b3f      	ldr	r3, [pc, #252]	; (8009bfc <UART_SetConfig+0x2b4>)
 8009afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b0a:	d01a      	beq.n	8009b42 <UART_SetConfig+0x1fa>
 8009b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b10:	d81b      	bhi.n	8009b4a <UART_SetConfig+0x202>
 8009b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b16:	d00c      	beq.n	8009b32 <UART_SetConfig+0x1ea>
 8009b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b1c:	d815      	bhi.n	8009b4a <UART_SetConfig+0x202>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <UART_SetConfig+0x1e2>
 8009b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b26:	d008      	beq.n	8009b3a <UART_SetConfig+0x1f2>
 8009b28:	e00f      	b.n	8009b4a <UART_SetConfig+0x202>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b30:	e012      	b.n	8009b58 <UART_SetConfig+0x210>
 8009b32:	2302      	movs	r3, #2
 8009b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b38:	e00e      	b.n	8009b58 <UART_SetConfig+0x210>
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b40:	e00a      	b.n	8009b58 <UART_SetConfig+0x210>
 8009b42:	2308      	movs	r3, #8
 8009b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b48:	e006      	b.n	8009b58 <UART_SetConfig+0x210>
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b50:	e002      	b.n	8009b58 <UART_SetConfig+0x210>
 8009b52:	2310      	movs	r3, #16
 8009b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a25      	ldr	r2, [pc, #148]	; (8009bf4 <UART_SetConfig+0x2ac>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	f040 808a 	bne.w	8009c78 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d824      	bhi.n	8009bb6 <UART_SetConfig+0x26e>
 8009b6c:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <UART_SetConfig+0x22c>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009bb7 	.word	0x08009bb7
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009bb7 	.word	0x08009bb7
 8009b84:	08009ba7 	.word	0x08009ba7
 8009b88:	08009bb7 	.word	0x08009bb7
 8009b8c:	08009bb7 	.word	0x08009bb7
 8009b90:	08009bb7 	.word	0x08009bb7
 8009b94:	08009baf 	.word	0x08009baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b98:	f7fd fb1c 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8009b9c:	61f8      	str	r0, [r7, #28]
        break;
 8009b9e:	e010      	b.n	8009bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ba0:	4b19      	ldr	r3, [pc, #100]	; (8009c08 <UART_SetConfig+0x2c0>)
 8009ba2:	61fb      	str	r3, [r7, #28]
        break;
 8009ba4:	e00d      	b.n	8009bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ba6:	f7fd fa7d 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8009baa:	61f8      	str	r0, [r7, #28]
        break;
 8009bac:	e009      	b.n	8009bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bb2:	61fb      	str	r3, [r7, #28]
        break;
 8009bb4:	e005      	b.n	8009bc2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009bc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8109 	beq.w	8009ddc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d305      	bcc.n	8009be6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d912      	bls.n	8009c0c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009bec:	e0f6      	b.n	8009ddc <UART_SetConfig+0x494>
 8009bee:	bf00      	nop
 8009bf0:	efff69f3 	.word	0xefff69f3
 8009bf4:	40008000 	.word	0x40008000
 8009bf8:	40013800 	.word	0x40013800
 8009bfc:	40021000 	.word	0x40021000
 8009c00:	40004400 	.word	0x40004400
 8009c04:	40004800 	.word	0x40004800
 8009c08:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	461c      	mov	r4, r3
 8009c12:	4615      	mov	r5, r2
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	f04f 0300 	mov.w	r3, #0
 8009c1c:	022b      	lsls	r3, r5, #8
 8009c1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009c22:	0222      	lsls	r2, r4, #8
 8009c24:	68f9      	ldr	r1, [r7, #12]
 8009c26:	6849      	ldr	r1, [r1, #4]
 8009c28:	0849      	lsrs	r1, r1, #1
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	4688      	mov	r8, r1
 8009c2e:	4681      	mov	r9, r0
 8009c30:	eb12 0a08 	adds.w	sl, r2, r8
 8009c34:	eb43 0b09 	adc.w	fp, r3, r9
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	607a      	str	r2, [r7, #4]
 8009c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c46:	4650      	mov	r0, sl
 8009c48:	4659      	mov	r1, fp
 8009c4a:	f7f6 ff2f 	bl	8000aac <__aeabi_uldivmod>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4613      	mov	r3, r2
 8009c54:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c5c:	d308      	bcc.n	8009c70 <UART_SetConfig+0x328>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c64:	d204      	bcs.n	8009c70 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	e0b5      	b.n	8009ddc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c76:	e0b1      	b.n	8009ddc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c80:	d15d      	bne.n	8009d3e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d827      	bhi.n	8009cda <UART_SetConfig+0x392>
 8009c8a:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <UART_SetConfig+0x348>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cbd 	.word	0x08009cbd
 8009c98:	08009cc5 	.word	0x08009cc5
 8009c9c:	08009cdb 	.word	0x08009cdb
 8009ca0:	08009ccb 	.word	0x08009ccb
 8009ca4:	08009cdb 	.word	0x08009cdb
 8009ca8:	08009cdb 	.word	0x08009cdb
 8009cac:	08009cdb 	.word	0x08009cdb
 8009cb0:	08009cd3 	.word	0x08009cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb4:	f7fd fa8e 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8009cb8:	61f8      	str	r0, [r7, #28]
        break;
 8009cba:	e014      	b.n	8009ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cbc:	f7fd faa0 	bl	8007200 <HAL_RCC_GetPCLK2Freq>
 8009cc0:	61f8      	str	r0, [r7, #28]
        break;
 8009cc2:	e010      	b.n	8009ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc4:	4b4c      	ldr	r3, [pc, #304]	; (8009df8 <UART_SetConfig+0x4b0>)
 8009cc6:	61fb      	str	r3, [r7, #28]
        break;
 8009cc8:	e00d      	b.n	8009ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cca:	f7fd f9eb 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8009cce:	61f8      	str	r0, [r7, #28]
        break;
 8009cd0:	e009      	b.n	8009ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cd6:	61fb      	str	r3, [r7, #28]
        break;
 8009cd8:	e005      	b.n	8009ce6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d077      	beq.n	8009ddc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	005a      	lsls	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	441a      	add	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b0f      	cmp	r3, #15
 8009d06:	d916      	bls.n	8009d36 <UART_SetConfig+0x3ee>
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d0e:	d212      	bcs.n	8009d36 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f023 030f 	bic.w	r3, r3, #15
 8009d18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	8afb      	ldrh	r3, [r7, #22]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	8afa      	ldrh	r2, [r7, #22]
 8009d32:	60da      	str	r2, [r3, #12]
 8009d34:	e052      	b.n	8009ddc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009d3c:	e04e      	b.n	8009ddc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d827      	bhi.n	8009d96 <UART_SetConfig+0x44e>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <UART_SetConfig+0x404>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d71 	.word	0x08009d71
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d81 	.word	0x08009d81
 8009d58:	08009d97 	.word	0x08009d97
 8009d5c:	08009d87 	.word	0x08009d87
 8009d60:	08009d97 	.word	0x08009d97
 8009d64:	08009d97 	.word	0x08009d97
 8009d68:	08009d97 	.word	0x08009d97
 8009d6c:	08009d8f 	.word	0x08009d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d70:	f7fd fa30 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8009d74:	61f8      	str	r0, [r7, #28]
        break;
 8009d76:	e014      	b.n	8009da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d78:	f7fd fa42 	bl	8007200 <HAL_RCC_GetPCLK2Freq>
 8009d7c:	61f8      	str	r0, [r7, #28]
        break;
 8009d7e:	e010      	b.n	8009da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d80:	4b1d      	ldr	r3, [pc, #116]	; (8009df8 <UART_SetConfig+0x4b0>)
 8009d82:	61fb      	str	r3, [r7, #28]
        break;
 8009d84:	e00d      	b.n	8009da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d86:	f7fd f98d 	bl	80070a4 <HAL_RCC_GetSysClockFreq>
 8009d8a:	61f8      	str	r0, [r7, #28]
        break;
 8009d8c:	e009      	b.n	8009da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d92:	61fb      	str	r3, [r7, #28]
        break;
 8009d94:	e005      	b.n	8009da2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009da0:	bf00      	nop
    }

    if (pclk != 0U)
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d019      	beq.n	8009ddc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	085a      	lsrs	r2, r3, #1
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	441a      	add	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	2b0f      	cmp	r3, #15
 8009dc0:	d909      	bls.n	8009dd6 <UART_SetConfig+0x48e>
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc8:	d205      	bcs.n	8009dd6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60da      	str	r2, [r3, #12]
 8009dd4:	e002      	b.n	8009ddc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009de8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3728      	adds	r7, #40	; 0x28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009df6:	bf00      	nop
 8009df8:	00f42400 	.word	0x00f42400

08009dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00a      	beq.n	8009e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00a      	beq.n	8009e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00a      	beq.n	8009e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	f003 0310 	and.w	r3, r3, #16
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00a      	beq.n	8009eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01a      	beq.n	8009f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009efa:	d10a      	bne.n	8009f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	605a      	str	r2, [r3, #4]
  }
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f50:	f7fb fc90 	bl	8005874 <HAL_GetTick>
 8009f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0308 	and.w	r3, r3, #8
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10e      	bne.n	8009f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f82d 	bl	8009fd2 <UART_WaitOnFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e023      	b.n	8009fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d10e      	bne.n	8009fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f817 	bl	8009fd2 <UART_WaitOnFlagUntilTimeout>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e00d      	b.n	8009fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b09c      	sub	sp, #112	; 0x70
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fe2:	e0a5      	b.n	800a130 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fea:	f000 80a1 	beq.w	800a130 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fee:	f7fb fc41 	bl	8005874 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d302      	bcc.n	800a004 <UART_WaitOnFlagUntilTimeout+0x32>
 8009ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a000:	2b00      	cmp	r3, #0
 800a002:	d13e      	bne.n	800a082 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a018:	667b      	str	r3, [r7, #100]	; 0x64
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a022:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a024:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e6      	bne.n	800a004 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3308      	adds	r3, #8
 800a03c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	663b      	str	r3, [r7, #96]	; 0x60
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a056:	64ba      	str	r2, [r7, #72]	; 0x48
 800a058:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a05c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2220      	movs	r2, #32
 800a06e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2220      	movs	r2, #32
 800a074:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e067      	b.n	800a152 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d04f      	beq.n	800a130 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a09e:	d147      	bne.n	800a130 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e6      	bne.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0fc:	623a      	str	r2, [r7, #32]
 800a0fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	61bb      	str	r3, [r7, #24]
   return(result);
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e5      	bne.n	800a0dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2220      	movs	r2, #32
 800a120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e010      	b.n	800a152 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	69da      	ldr	r2, [r3, #28]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4013      	ands	r3, r2
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	bf0c      	ite	eq
 800a140:	2301      	moveq	r3, #1
 800a142:	2300      	movne	r3, #0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	461a      	mov	r2, r3
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	f43f af4a 	beq.w	8009fe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3770      	adds	r7, #112	; 0x70
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b095      	sub	sp, #84	; 0x54
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a176:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a180:	643b      	str	r3, [r7, #64]	; 0x40
 800a182:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e6      	bne.n	800a162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e5      	bne.n	800a194 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d118      	bne.n	800a202 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f023 0310 	bic.w	r3, r3, #16
 800a1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ee:	61bb      	str	r3, [r7, #24]
 800a1f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6979      	ldr	r1, [r7, #20]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e6      	bne.n	800a1d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a214:	bf00      	nop
 800a216:	3754      	adds	r7, #84	; 0x54
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff fb6c 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a244:	bf00      	nop
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	60bb      	str	r3, [r7, #8]
   return(result);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a268:	61fb      	str	r3, [r7, #28]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	61bb      	str	r3, [r7, #24]
 800a274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	6979      	ldr	r1, [r7, #20]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	613b      	str	r3, [r7, #16]
   return(result);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e6      	bne.n	800a254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fc5e 	bl	800ab54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a298:	bf00      	nop
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <board_init_common_rtc_init>:
bool 				g_button_press_state[NUM_PUSH_BUTTONS] 	= {false};

extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800a2b8:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2ba:	4a11      	ldr	r2, [pc, #68]	; (800a300 <board_init_common_rtc_init+0x4c>)
 800a2bc:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 800a2c4:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2c6:	227f      	movs	r2, #127	; 0x7f
 800a2c8:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800a2ca:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2cc:	22ff      	movs	r2, #255	; 0xff
 800a2ce:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a2e2:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800a2e8:	4804      	ldr	r0, [pc, #16]	; (800a2fc <board_init_common_rtc_init+0x48>)
 800a2ea:	f7fd fb09 	bl	8007900 <HAL_RTC_Init>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <board_init_common_rtc_init+0x44>
 800a2f4:	f000 f9b9 	bl	800a66a <Error_Handler>
}
 800a2f8:	bf00      	nop
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20001d84 	.word	0x20001d84
 800a300:	40002800 	.word	0x40002800

0800a304 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b0ae      	sub	sp, #184	; 0xb8
 800a308:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a30a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a30e:	2244      	movs	r2, #68	; 0x44
 800a310:	2100      	movs	r1, #0
 800a312:	4618      	mov	r0, r3
 800a314:	f001 fb56 	bl	800b9c4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a318:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	609a      	str	r2, [r3, #8]
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a328:	1d3b      	adds	r3, r7, #4
 800a32a:	225c      	movs	r2, #92	; 0x5c
 800a32c:	2100      	movs	r1, #0
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 fb48 	bl	800b9c4 <memset>

    HAL_PWR_EnableBkUpAccess();
 800a334:	f7fc f8be 	bl	80064b4 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a338:	4b25      	ldr	r3, [pc, #148]	; (800a3d0 <SystemClock_Config+0xcc>)
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	4a24      	ldr	r2, [pc, #144]	; (800a3d0 <SystemClock_Config+0xcc>)
 800a340:	f023 0318 	bic.w	r3, r3, #24
 800a344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a348:	2305      	movs	r3, #5
 800a34a:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a34c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a350:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a352:	2301      	movs	r3, #1
 800a354:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800a35c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a360:	4618      	mov	r0, r3
 800a362:	f7fc f98b 	bl	800667c <HAL_RCC_OscConfig>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d000      	beq.n	800a36e <SystemClock_Config+0x6a>
 800a36c:	e7fe      	b.n	800a36c <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a36e:	230f      	movs	r3, #15
 800a370:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800a372:	2302      	movs	r3, #2
 800a374:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a376:	2300      	movs	r3, #0
 800a378:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a37a:	2300      	movs	r3, #0
 800a37c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a37e:	2300      	movs	r3, #0
 800a380:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800a382:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a386:	2102      	movs	r1, #2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fc fd8b 	bl	8006ea4 <HAL_RCC_ClockConfig>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d000      	beq.n	800a396 <SystemClock_Config+0x92>
 800a394:	e7fe      	b.n	800a394 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a39a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a39c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800a3a2:	1d3b      	adds	r3, r7, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fc ffa1 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <SystemClock_Config+0xb0>
 800a3b0:	f000 f95b 	bl	800a66a <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 800a3b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a3b8:	f7fc f90a 	bl	80065d0 <HAL_PWREx_ControlVoltageScaling>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <SystemClock_Config+0xc2>
 800a3c2:	f000 f952 	bl	800a66a <Error_Handler>
}
 800a3c6:	bf00      	nop
 800a3c8:	37b8      	adds	r7, #184	; 0xb8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	40021000 	.word	0x40021000

0800a3d4 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 800a3d4:	b590      	push	{r4, r7, lr}
 800a3d6:	b0a1      	sub	sp, #132	; 0x84
 800a3d8:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE(); // TODO determine a better place for this clock enable call.
 800a3da:	4b93      	ldr	r3, [pc, #588]	; (800a628 <board_init_common_timer_init+0x254>)
 800a3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3de:	4a92      	ldr	r2, [pc, #584]	; (800a628 <board_init_common_timer_init+0x254>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	6493      	str	r3, [r2, #72]	; 0x48
 800a3e6:	4b90      	ldr	r3, [pc, #576]	; (800a628 <board_init_common_timer_init+0x254>)
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
 800a3fc:	609a      	str	r2, [r3, #8]
 800a3fe:	60da      	str	r2, [r3, #12]
 800a400:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a402:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	605a      	str	r2, [r3, #4]
 800a40c:	609a      	str	r2, [r3, #8]
 800a40e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800a41c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	609a      	str	r2, [r3, #8]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	611a      	str	r2, [r3, #16]
 800a42c:	615a      	str	r2, [r3, #20]
 800a42e:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	222c      	movs	r2, #44	; 0x2c
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 fac3 	bl	800b9c4 <memset>
    g_tim1_handle.Instance = TIM1;
 800a43e:	4b7b      	ldr	r3, [pc, #492]	; (800a62c <board_init_common_timer_init+0x258>)
 800a440:	4a7b      	ldr	r2, [pc, #492]	; (800a630 <board_init_common_timer_init+0x25c>)
 800a442:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800a444:	4b79      	ldr	r3, [pc, #484]	; (800a62c <board_init_common_timer_init+0x258>)
 800a446:	2200      	movs	r2, #0
 800a448:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a44a:	4b78      	ldr	r3, [pc, #480]	; (800a62c <board_init_common_timer_init+0x258>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800a450:	4b76      	ldr	r3, [pc, #472]	; (800a62c <board_init_common_timer_init+0x258>)
 800a452:	223b      	movs	r2, #59	; 0x3b
 800a454:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a456:	4b75      	ldr	r3, [pc, #468]	; (800a62c <board_init_common_timer_init+0x258>)
 800a458:	2200      	movs	r2, #0
 800a45a:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800a45c:	4b73      	ldr	r3, [pc, #460]	; (800a62c <board_init_common_timer_init+0x258>)
 800a45e:	2200      	movs	r2, #0
 800a460:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a462:	4b72      	ldr	r3, [pc, #456]	; (800a62c <board_init_common_timer_init+0x258>)
 800a464:	2200      	movs	r2, #0
 800a466:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a468:	4870      	ldr	r0, [pc, #448]	; (800a62c <board_init_common_timer_init+0x258>)
 800a46a:	f7fd fc08 	bl	8007c7e <HAL_TIM_Base_Init>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <board_init_common_timer_init+0xa4>
 800a474:	f000 f8f9 	bl	800a66a <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a47c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800a47e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a482:	4619      	mov	r1, r3
 800a484:	4869      	ldr	r0, [pc, #420]	; (800a62c <board_init_common_timer_init+0x258>)
 800a486:	f7fe f89d 	bl	80085c4 <HAL_TIM_ConfigClockSource>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <board_init_common_timer_init+0xc0>
 800a490:	f000 f8eb 	bl	800a66a <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a494:	4865      	ldr	r0, [pc, #404]	; (800a62c <board_init_common_timer_init+0x258>)
 800a496:	f7fd fc49 	bl	8007d2c <HAL_TIM_PWM_Init>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <board_init_common_timer_init+0xd0>
 800a4a0:	f000 f8e3 	bl	800a66a <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	653b      	str	r3, [r7, #80]	; 0x50
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a4b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	485d      	ldr	r0, [pc, #372]	; (800a62c <board_init_common_timer_init+0x258>)
 800a4b8:	f7fe fdd4 	bl	8009064 <HAL_TIMEx_MasterConfigSynchronization>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <board_init_common_timer_init+0xf2>
 800a4c2:	f000 f8d2 	bl	800a66a <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a4c6:	2360      	movs	r3, #96	; 0x60
 800a4c8:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.Pulse = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a4e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4850      	ldr	r0, [pc, #320]	; (800a62c <board_init_common_timer_init+0x258>)
 800a4ec:	f7fd ff56 	bl	800839c <HAL_TIM_PWM_ConfigChannel>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <board_init_common_timer_init+0x126>
 800a4f6:	f000 f8b8 	bl	800a66a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a4fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4fe:	2204      	movs	r2, #4
 800a500:	4619      	mov	r1, r3
 800a502:	484a      	ldr	r0, [pc, #296]	; (800a62c <board_init_common_timer_init+0x258>)
 800a504:	f7fd ff4a 	bl	800839c <HAL_TIM_PWM_ConfigChannel>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <board_init_common_timer_init+0x13e>
 800a50e:	f000 f8ac 	bl	800a66a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a516:	2208      	movs	r2, #8
 800a518:	4619      	mov	r1, r3
 800a51a:	4844      	ldr	r0, [pc, #272]	; (800a62c <board_init_common_timer_init+0x258>)
 800a51c:	f7fd ff3e 	bl	800839c <HAL_TIM_PWM_ConfigChannel>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <board_init_common_timer_init+0x156>
 800a526:	f000 f8a0 	bl	800a66a <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a53e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a542:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a548:	2300      	movs	r3, #0
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a54c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a556:	2300      	movs	r3, #0
 800a558:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4619      	mov	r1, r3
 800a560:	4832      	ldr	r0, [pc, #200]	; (800a62c <board_init_common_timer_init+0x258>)
 800a562:	f7fe fde5 	bl	8009130 <HAL_TIMEx_ConfigBreakDeadTime>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <board_init_common_timer_init+0x19c>
 800a56c:	f000 f87d 	bl	800a66a <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a570:	2100      	movs	r1, #0
 800a572:	482e      	ldr	r0, [pc, #184]	; (800a62c <board_init_common_timer_init+0x258>)
 800a574:	f7fd fe2a 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a578:	2104      	movs	r1, #4
 800a57a:	482c      	ldr	r0, [pc, #176]	; (800a62c <board_init_common_timer_init+0x258>)
 800a57c:	f7fd fe26 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a580:	2108      	movs	r1, #8
 800a582:	482a      	ldr	r0, [pc, #168]	; (800a62c <board_init_common_timer_init+0x258>)
 800a584:	f7fd fe22 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = gpio_config_pin_lookup(GPIO_PIN_TIM1_CH1) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH2) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH3);
 800a588:	2008      	movs	r0, #8
 800a58a:	f000 f8cb 	bl	800a724 <gpio_config_pin_lookup>
 800a58e:	4603      	mov	r3, r0
 800a590:	461c      	mov	r4, r3
 800a592:	2009      	movs	r0, #9
 800a594:	f000 f8c6 	bl	800a724 <gpio_config_pin_lookup>
 800a598:	4603      	mov	r3, r0
 800a59a:	4323      	orrs	r3, r4
 800a59c:	b29c      	uxth	r4, r3
 800a59e:	200a      	movs	r0, #10
 800a5a0:	f000 f8c0 	bl	800a724 <gpio_config_pin_lookup>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	4323      	orrs	r3, r4
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(gpio_config_port_lookup(GPIO_PIN_TIM1_CH1), &GPIO_InitStruct); // all timer pins are on the same port!
 800a5bc:	2008      	movs	r0, #8
 800a5be:	f000 f89f 	bl	800a700 <gpio_config_port_lookup>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7fb fdb0 	bl	8006130 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	200c      	movs	r0, #12
 800a5d6:	f7fb fa9a 	bl	8005b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a5da:	200c      	movs	r0, #12
 800a5dc:	f7fb fab3 	bl	8005b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	200d      	movs	r0, #13
 800a5e6:	f7fb fa92 	bl	8005b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a5ea:	200d      	movs	r0, #13
 800a5ec:	f7fb faab 	bl	8005b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	200f      	movs	r0, #15
 800a5f6:	f7fb fa8a 	bl	8005b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a5fa:	200f      	movs	r0, #15
 800a5fc:	f7fb faa3 	bl	8005b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a600:	2200      	movs	r2, #0
 800a602:	2100      	movs	r1, #0
 800a604:	2010      	movs	r0, #16
 800a606:	f7fb fa82 	bl	8005b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a60a:	2010      	movs	r0, #16
 800a60c:	f7fb fa9b 	bl	8005b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a610:	2200      	movs	r2, #0
 800a612:	2100      	movs	r1, #0
 800a614:	2011      	movs	r0, #17
 800a616:	f7fb fa7a 	bl	8005b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a61a:	2011      	movs	r0, #17
 800a61c:	f7fb fa93 	bl	8005b46 <HAL_NVIC_EnableIRQ>
}
 800a620:	bf00      	nop
 800a622:	3784      	adds	r7, #132	; 0x84
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	40021000 	.word	0x40021000
 800a62c:	20001da8 	.word	0x20001da8
 800a630:	40012c00 	.word	0x40012c00

0800a634 <board_init_common_board_init>:
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
}


void board_init_common_board_init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
    srand(time(0)); // TODO determine a better seed.  Analog input noise would be superb!
 800a638:	2000      	movs	r0, #0
 800a63a:	f001 f9cb 	bl	800b9d4 <time>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4613      	mov	r3, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f001 f88f 	bl	800b768 <srand>

    HAL_Init();
 800a64a:	f7fb f8bf 	bl	80057cc <HAL_Init>
    SystemClock_Config(); // 32.768 kHz LSE, 48 MHz HSE enabled by default.
 800a64e:	f7ff fe59 	bl	800a304 <SystemClock_Config>

    gpio_config_hal_setup();
 800a652:	f000 f879 	bl	800a748 <gpio_config_hal_setup>
#if defined(BOARD_SPUDGLO_V5)
    board_init_peripheral_setup(); // TODO determine whether to continue supporting boards that don't have peripheral access or not...
 800a656:	f000 ff55 	bl	800b504 <board_init_peripheral_setup>
#endif
    board_init_common_timer_init(); // TODO determine if timer should be part of a separate config file??
 800a65a:	f7ff febb 	bl	800a3d4 <board_init_common_timer_init>
    ws2812b_init();
 800a65e:	f7f7 fc6d 	bl	8001f3c <ws2812b_init>
    board_init_common_rtc_init();
 800a662:	f7ff fe27 	bl	800a2b4 <board_init_common_rtc_init>
}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}

0800a66a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a66a:	b480      	push	{r7}
 800a66c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a66e:	b672      	cpsid	i
}
 800a670:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a672:	e7fe      	b.n	800a672 <Error_Handler+0x8>

0800a674 <gpio_access_hal_input_is_low>:
    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
}


bool gpio_access_hal_input_is_low(gpio_pin_e pin)
{
 800a674:	b590      	push	{r4, r7, lr}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
	return ((GPIO_PIN_RESET == HAL_GPIO_ReadPin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin))) ? true : false);
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	4a0e      	ldr	r2, [pc, #56]	; (800a6bc <gpio_access_hal_input_is_low+0x48>)
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	4413      	add	r3, r2
 800a686:	3304      	adds	r3, #4
 800a688:	681c      	ldr	r4, [r3, #0]
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4a0b      	ldr	r2, [pc, #44]	; (800a6bc <gpio_access_hal_input_is_low+0x48>)
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	4413      	add	r3, r2
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f844 	bl	800a724 <gpio_config_pin_lookup>
 800a69c:	4603      	mov	r3, r0
 800a69e:	4619      	mov	r1, r3
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f7fb febf 	bl	8006424 <HAL_GPIO_ReadPin>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bf0c      	ite	eq
 800a6ac:	2301      	moveq	r3, #1
 800a6ae:	2300      	movne	r3, #0
 800a6b0:	b2db      	uxtb	r3, r3
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd90      	pop	{r4, r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800c898 	.word	0x0800c898

0800a6c0 <gpio_config_irqn_lookup>:
	[GPIO_PIOH_PIN_3] = GPIO_PIN_3
};


IRQn_Type gpio_config_irqn_lookup(gpio_pin_e pin)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
	if (GPIO_CONFIG_INTERRUPT_MODE_ENABLE == g_gpio_config[pin].interrupt_mode)
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	4a0b      	ldr	r2, [pc, #44]	; (800a6fc <gpio_config_irqn_lookup+0x3c>)
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	4413      	add	r3, r2
 800a6d2:	330a      	adds	r3, #10
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d107      	bne.n	800a6ea <gpio_config_irqn_lookup+0x2a>
	{
		return g_gpio_config[pin].irqn;
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <gpio_config_irqn_lookup+0x3c>)
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	4413      	add	r3, r2
 800a6e2:	330c      	adds	r3, #12
 800a6e4:	f993 3000 	ldrsb.w	r3, [r3]
 800a6e8:	e001      	b.n	800a6ee <gpio_config_irqn_lookup+0x2e>
	}
	else
	{
		return HardFault_IRQn; // lmfao
 800a6ea:	f06f 030c 	mvn.w	r3, #12
	}
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	0800c898 	.word	0x0800c898

0800a700 <gpio_config_port_lookup>:


port_t gpio_config_port_lookup(gpio_pin_e pin)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	71fb      	strb	r3, [r7, #7]
	return g_gpio_port_lookup_table[pin];
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	4a04      	ldr	r2, [pc, #16]	; (800a720 <gpio_config_port_lookup+0x20>)
 800a70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	0800c718 	.word	0x0800c718

0800a724 <gpio_config_pin_lookup>:


uint16_t gpio_config_pin_lookup(gpio_pin_e pin)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
	return g_gpio_lookup_table[pin];
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	4a04      	ldr	r2, [pc, #16]	; (800a744 <gpio_config_pin_lookup+0x20>)
 800a732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800a736:	4618      	mov	r0, r3
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	0800c7e8 	.word	0x0800c7e8

0800a748 <gpio_config_hal_setup>:


void gpio_config_hal_setup(void)
{
 800a748:	b590      	push	{r4, r7, lr}
 800a74a:	b08b      	sub	sp, #44	; 0x2c
 800a74c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a74e:	4b9b      	ldr	r3, [pc, #620]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a752:	4a9a      	ldr	r2, [pc, #616]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a754:	f043 0301 	orr.w	r3, r3, #1
 800a758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a75a:	4b98      	ldr	r3, [pc, #608]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a766:	4b95      	ldr	r3, [pc, #596]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76a:	4a94      	ldr	r2, [pc, #592]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a772:	4b92      	ldr	r3, [pc, #584]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	60bb      	str	r3, [r7, #8]
 800a77c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a77e:	4b8f      	ldr	r3, [pc, #572]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a782:	4a8e      	ldr	r2, [pc, #568]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a784:	f043 0304 	orr.w	r3, r3, #4
 800a788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a78a:	4b8c      	ldr	r3, [pc, #560]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a796:	4b89      	ldr	r3, [pc, #548]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79a:	4a88      	ldr	r2, [pc, #544]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7a2:	4b86      	ldr	r3, [pc, #536]	; (800a9bc <gpio_config_hal_setup+0x274>)
 800a7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]

	bool enable_interrupt = false;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool gpio_setup = false;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a7c0:	e0f2      	b.n	800a9a8 <gpio_config_hal_setup+0x260>
    {
    	gpio_setup = true;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	GPIO_InitStruct.Pin = g_gpio_lookup_table[pin];
 800a7c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7cc:	4a7c      	ldr	r2, [pc, #496]	; (800a9c0 <gpio_config_hal_setup+0x278>)
 800a7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7d2:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Pull = GPIO_NOPULL; // initially set no pullup here..
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
    	if (GPIO_CONFIG_INTERRUPT_MODE_ENABLE == g_gpio_config[pin].interrupt_mode)
 800a7d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7dc:	4a79      	ldr	r2, [pc, #484]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	4413      	add	r3, r2
 800a7e2:	330a      	adds	r3, #10
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d103      	bne.n	800a7f2 <gpio_config_hal_setup+0xaa>
    	{
    		enable_interrupt = true;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7f0:	e002      	b.n	800a7f8 <gpio_config_hal_setup+0xb0>
    	}
    	else
    	{
    		enable_interrupt = false;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	}
		switch (g_gpio_config[pin].mode)
 800a7f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7fc:	4a71      	ldr	r2, [pc, #452]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	4413      	add	r3, r2
 800a802:	3308      	adds	r3, #8
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b06      	cmp	r3, #6
 800a808:	d829      	bhi.n	800a85e <gpio_config_hal_setup+0x116>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <gpio_config_hal_setup+0xc8>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a82d 	.word	0x0800a82d
 800a814:	0800a835 	.word	0x0800a835
 800a818:	0800a83f 	.word	0x0800a83f
 800a81c:	0800a849 	.word	0x0800a849
 800a820:	0800a853 	.word	0x0800a853
 800a824:	0800a859 	.word	0x0800a859
 800a828:	0800a82d 	.word	0x0800a82d
    	{
			case GPIO_CONFIG_MODE_ALTERNATE_FUNCTION: // fall through intentionally!!
    		case GPIO_CONFIG_MODE_NO_SETTING: // do nothing!
    			gpio_setup = false;
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    		break;
 800a832:	e015      	b.n	800a860 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_FLOAT:
    			GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
    		    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	61bb      	str	r3, [r7, #24]
    		break;
 800a83c:	e010      	b.n	800a860 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLDOWN:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800a842:	2302      	movs	r3, #2
 800a844:	61bb      	str	r3, [r7, #24]
			break;
 800a846:	e00b      	b.n	800a860 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLUP:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800a84c:	2301      	movs	r3, #1
 800a84e:	61bb      	str	r3, [r7, #24]
			break;
 800a850:	e006      	b.n	800a860 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_OUTPUT_PUSHPULL:
    			GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800a852:	2301      	movs	r3, #1
 800a854:	617b      	str	r3, [r7, #20]
    		break;
 800a856:	e003      	b.n	800a860 <gpio_config_hal_setup+0x118>
			case GPIO_CONFIG_MODE_OUTPUT_OPEN_DRAIN:
				GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 800a858:	2311      	movs	r3, #17
 800a85a:	617b      	str	r3, [r7, #20]
			break;
 800a85c:	e000      	b.n	800a860 <gpio_config_hal_setup+0x118>
				// these alternate function settings are expected to be made in the peripheral setup files
			default:
			break;
 800a85e:	bf00      	nop
    	}
		if (enable_interrupt)
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a864:	2b00      	cmp	r3, #0
 800a866:	d048      	beq.n	800a8fa <gpio_config_hal_setup+0x1b2>
		{
			switch (g_gpio_config[pin].interrupt_edge)
 800a868:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a86c:	4a55      	ldr	r2, [pc, #340]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a86e:	011b      	lsls	r3, r3, #4
 800a870:	4413      	add	r3, r2
 800a872:	330b      	adds	r3, #11
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b02      	cmp	r3, #2
 800a878:	d00e      	beq.n	800a898 <gpio_config_hal_setup+0x150>
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	dc10      	bgt.n	800a8a0 <gpio_config_hal_setup+0x158>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <gpio_config_hal_setup+0x140>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d004      	beq.n	800a890 <gpio_config_hal_setup+0x148>
				break;
				case GPIO_CONFIG_INTERRUPT_EDGE_RISING_FALLING:
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
				break;
				default:
				break;
 800a886:	e00b      	b.n	800a8a0 <gpio_config_hal_setup+0x158>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_FALLING;
 800a888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a88c:	617b      	str	r3, [r7, #20]
				break;
 800a88e:	e008      	b.n	800a8a2 <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_RISING;
 800a890:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a894:	617b      	str	r3, [r7, #20]
				break;
 800a896:	e004      	b.n	800a8a2 <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
 800a898:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800a89c:	617b      	str	r3, [r7, #20]
				break;
 800a89e:	e000      	b.n	800a8a2 <gpio_config_hal_setup+0x15a>
				break;
 800a8a0:	bf00      	nop
			}
			__HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800a8a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8a6:	4a47      	ldr	r2, [pc, #284]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	4413      	add	r3, r2
 800a8ac:	330c      	adds	r3, #12
 800a8ae:	f993 2000 	ldrsb.w	r2, [r3]
 800a8b2:	4b45      	ldr	r3, [pc, #276]	; (800a9c8 <gpio_config_hal_setup+0x280>)
 800a8b4:	615a      	str	r2, [r3, #20]
		    HAL_NVIC_SetPriority(g_gpio_config[pin].irqn, 24, 0);
 800a8b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8ba:	4a42      	ldr	r2, [pc, #264]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	4413      	add	r3, r2
 800a8c0:	330c      	adds	r3, #12
 800a8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2118      	movs	r1, #24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fb f91f 	bl	8005b0e <HAL_NVIC_SetPriority>
		    HAL_NVIC_EnableIRQ(g_gpio_config[pin].irqn);
 800a8d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8d4:	4a3b      	ldr	r2, [pc, #236]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	4413      	add	r3, r2
 800a8da:	330c      	adds	r3, #12
 800a8dc:	f993 3000 	ldrsb.w	r3, [r3]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fb f930 	bl	8005b46 <HAL_NVIC_EnableIRQ>
		    __HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800a8e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8ea:	4a36      	ldr	r2, [pc, #216]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	330c      	adds	r3, #12
 800a8f2:	f993 2000 	ldrsb.w	r2, [r3]
 800a8f6:	4b34      	ldr	r3, [pc, #208]	; (800a9c8 <gpio_config_hal_setup+0x280>)
 800a8f8:	615a      	str	r2, [r3, #20]
		}
		if (gpio_setup)
 800a8fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d04d      	beq.n	800a99e <gpio_config_hal_setup+0x256>
		{
		    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
 800a902:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a906:	4a2f      	ldr	r2, [pc, #188]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	4413      	add	r3, r2
 800a90c:	3304      	adds	r3, #4
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f107 0210 	add.w	r2, r7, #16
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fb fc0a 	bl	8006130 <HAL_GPIO_Init>
		    if (GPIO_CONFIG_MODE_OUTPUT_PUSHPULL == g_gpio_config[pin].mode)
 800a91c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a920:	4a28      	ldr	r2, [pc, #160]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	4413      	add	r3, r2
 800a926:	3308      	adds	r3, #8
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d137      	bne.n	800a99e <gpio_config_hal_setup+0x256>
		    {
		    	if (GPIO_CONFIG_OUTPUT_LVL_RESET == g_gpio_config[pin].lvl)
 800a92e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a932:	4a24      	ldr	r2, [pc, #144]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	4413      	add	r3, r2
 800a938:	3309      	adds	r3, #9
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d117      	bne.n	800a970 <gpio_config_hal_setup+0x228>
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin), GPIO_PIN_RESET);
 800a940:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a944:	4a1f      	ldr	r2, [pc, #124]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	4413      	add	r3, r2
 800a94a:	3304      	adds	r3, #4
 800a94c:	681c      	ldr	r4, [r3, #0]
 800a94e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a952:	4a1c      	ldr	r2, [pc, #112]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	4413      	add	r3, r2
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff fee1 	bl	800a724 <gpio_config_pin_lookup>
 800a962:	4603      	mov	r3, r0
 800a964:	2200      	movs	r2, #0
 800a966:	4619      	mov	r1, r3
 800a968:	4620      	mov	r0, r4
 800a96a:	f7fb fd73 	bl	8006454 <HAL_GPIO_WritePin>
 800a96e:	e016      	b.n	800a99e <gpio_config_hal_setup+0x256>
				}
				else
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin), GPIO_PIN_SET);
 800a970:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a974:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	4413      	add	r3, r2
 800a97a:	3304      	adds	r3, #4
 800a97c:	681c      	ldr	r4, [r3, #0]
 800a97e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a982:	4a10      	ldr	r2, [pc, #64]	; (800a9c4 <gpio_config_hal_setup+0x27c>)
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	4413      	add	r3, r2
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fec9 	bl	800a724 <gpio_config_pin_lookup>
 800a992:	4603      	mov	r3, r0
 800a994:	2201      	movs	r2, #1
 800a996:	4619      	mov	r1, r3
 800a998:	4620      	mov	r0, r4
 800a99a:	f7fb fd5b 	bl	8006454 <HAL_GPIO_WritePin>
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 800a99e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a9a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a9ac:	2b33      	cmp	r3, #51	; 0x33
 800a9ae:	f67f af08 	bls.w	800a7c2 <gpio_config_hal_setup+0x7a>
				}
		    }
		}
    }
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	372c      	adds	r7, #44	; 0x2c
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}
 800a9bc:	40021000 	.word	0x40021000
 800a9c0:	0800c7e8 	.word	0x0800c7e8
 800a9c4:	0800c898 	.word	0x0800c898
 800a9c8:	40010400 	.word	0x40010400

0800a9cc <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	77fb      	strb	r3, [r7, #31]
 800a9d6:	e0a3      	b.n	800ab20 <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 800a9d8:	7ffb      	ldrb	r3, [r7, #31]
 800a9da:	4a56      	ldr	r2, [pc, #344]	; (800ab34 <spi_config_hal_setup+0x168>)
 800a9dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 809a 	beq.w	800ab1a <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 800a9e6:	7ffa      	ldrb	r2, [r7, #31]
 800a9e8:	4953      	ldr	r1, [pc, #332]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	440b      	add	r3, r1
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800aa00:	2300      	movs	r3, #0
 800aa02:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 800aa04:	7ffa      	ldrb	r2, [r7, #31]
 800aa06:	494c      	ldr	r1, [pc, #304]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	440b      	add	r3, r1
 800aa12:	3304      	adds	r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f107 0208 	add.w	r2, r7, #8
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fb fb87 	bl	8006130 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800aa22:	7ffa      	ldrb	r2, [r7, #31]
 800aa24:	4944      	ldr	r1, [pc, #272]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aa26:	4613      	mov	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	440b      	add	r3, r1
 800aa30:	330a      	adds	r3, #10
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800aa42:	7ffa      	ldrb	r2, [r7, #31]
 800aa44:	493c      	ldr	r1, [pc, #240]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	440b      	add	r3, r1
 800aa50:	330c      	adds	r3, #12
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fb fb68 	bl	8006130 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800aa60:	7ffa      	ldrb	r2, [r7, #31]
 800aa62:	4935      	ldr	r1, [pc, #212]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	440b      	add	r3, r1
 800aa6e:	3312      	adds	r3, #18
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800aa74:	2300      	movs	r3, #0
 800aa76:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800aa80:	7ffa      	ldrb	r2, [r7, #31]
 800aa82:	492d      	ldr	r1, [pc, #180]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3314      	adds	r3, #20
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f107 0208 	add.w	r2, r7, #8
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fb fb49 	bl	8006130 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800aa9e:	7ffa      	ldrb	r2, [r7, #31]
 800aaa0:	4925      	ldr	r1, [pc, #148]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	440b      	add	r3, r1
 800aaac:	331a      	adds	r3, #26
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800aaba:	7ffa      	ldrb	r2, [r7, #31]
 800aabc:	491e      	ldr	r1, [pc, #120]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	440b      	add	r3, r1
 800aac8:	331c      	adds	r3, #28
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f107 0208 	add.w	r2, r7, #8
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fb fb2c 	bl	8006130 <HAL_GPIO_Init>

        	switch (bus)
 800aad8:	7ffb      	ldrb	r3, [r7, #31]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10c      	bne.n	800aaf8 <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800aade:	4b17      	ldr	r3, [pc, #92]	; (800ab3c <spi_config_hal_setup+0x170>)
 800aae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae2:	4a16      	ldr	r2, [pc, #88]	; (800ab3c <spi_config_hal_setup+0x170>)
 800aae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aae8:	6613      	str	r3, [r2, #96]	; 0x60
 800aaea:	4b14      	ldr	r3, [pc, #80]	; (800ab3c <spi_config_hal_setup+0x170>)
 800aaec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aaf2:	607b      	str	r3, [r7, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
        		break;
 800aaf6:	e000      	b.n	800aafa <spi_config_hal_setup+0x12e>
        		default:
				break;
 800aaf8:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800aafa:	7ffa      	ldrb	r2, [r7, #31]
 800aafc:	490e      	ldr	r1, [pc, #56]	; (800ab38 <spi_config_hal_setup+0x16c>)
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	440b      	add	r3, r1
 800ab08:	3324      	adds	r3, #36	; 0x24
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fd f809 	bl	8007b24 <HAL_SPI_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d000      	beq.n	800ab1a <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800ab18:	e7fe      	b.n	800ab18 <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800ab1a:	7ffb      	ldrb	r3, [r7, #31]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	7ffb      	ldrb	r3, [r7, #31]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	f67f af58 	bls.w	800a9d8 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	3720      	adds	r7, #32
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20000168 	.word	0x20000168
 800ab38:	0800cbd8 	.word	0x0800cbd8
 800ab3c:	40021000 	.word	0x40021000

0800ab40 <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
#if defined (BOARD_SPUDGLO_V5)
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 800ab44:	f000 f91a 	bl	800ad7c <uart_config_esp8266_handle>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe fc04 	bl	8009358 <HAL_UART_IRQHandler>
#endif
}
 800ab50:	bf00      	nop
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
	// do something in future
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b0a0      	sub	sp, #128	; 0x80
 800ab6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab6e:	f107 030c 	add.w	r3, r7, #12
 800ab72:	225c      	movs	r2, #92	; 0x5c
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 ff24 	bl	800b9c4 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ab82:	e0e9      	b.n	800ad58 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800ab84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab88:	4a78      	ldr	r2, [pc, #480]	; (800ad6c <uart_config_hal_setup+0x204>)
 800ab8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 80dd 	beq.w	800ad4e <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800ab94:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ab98:	4975      	ldr	r1, [pc, #468]	; (800ad70 <uart_config_hal_setup+0x208>)
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4413      	add	r3, r2
 800aba0:	00db      	lsls	r3, r3, #3
 800aba2:	440b      	add	r3, r1
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800aba8:	2302      	movs	r3, #2
 800abaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800abac:	2300      	movs	r3, #0
 800abae:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb0:	2303      	movs	r3, #3
 800abb2:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800abb4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abb8:	496d      	ldr	r1, [pc, #436]	; (800ad70 <uart_config_hal_setup+0x208>)
 800abba:	4613      	mov	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4413      	add	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	440b      	add	r3, r1
 800abc4:	3308      	adds	r3, #8
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800abca:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abce:	4968      	ldr	r1, [pc, #416]	; (800ad70 <uart_config_hal_setup+0x208>)
 800abd0:	4613      	mov	r3, r2
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	4413      	add	r3, r2
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	440b      	add	r3, r1
 800abda:	3304      	adds	r3, #4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fb faa3 	bl	8006130 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800abea:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abee:	4960      	ldr	r1, [pc, #384]	; (800ad70 <uart_config_hal_setup+0x208>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	330a      	adds	r3, #10
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ac00:	2302      	movs	r3, #2
 800ac02:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800ac0c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ac10:	4957      	ldr	r1, [pc, #348]	; (800ad70 <uart_config_hal_setup+0x208>)
 800ac12:	4613      	mov	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	4413      	add	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3310      	adds	r3, #16
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800ac22:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ac26:	4952      	ldr	r1, [pc, #328]	; (800ad70 <uart_config_hal_setup+0x208>)
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	440b      	add	r3, r1
 800ac32:	330c      	adds	r3, #12
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fb fa77 	bl	8006130 <HAL_GPIO_Init>

    	    switch (bus)
 800ac42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <uart_config_hal_setup+0xe8>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d01b      	beq.n	800ac86 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800ac4e:	e034      	b.n	800acba <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800ac50:	2320      	movs	r3, #32
 800ac52:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800ac54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac58:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac5a:	f107 030c 	add.w	r3, r7, #12
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fc fb44 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d000      	beq.n	800ac6c <uart_config_hal_setup+0x104>
    	    	         while(1);
 800ac6a:	e7fe      	b.n	800ac6a <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ac6c:	4b41      	ldr	r3, [pc, #260]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800ac6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac70:	4a40      	ldr	r2, [pc, #256]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800ac72:	f043 0301 	orr.w	r3, r3, #1
 800ac76:	65d3      	str	r3, [r2, #92]	; 0x5c
 800ac78:	4b3e      	ldr	r3, [pc, #248]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	60bb      	str	r3, [r7, #8]
 800ac82:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800ac84:	e019      	b.n	800acba <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ac86:	2301      	movs	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac8e:	f107 030c 	add.w	r3, r7, #12
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fc fb2a 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d000      	beq.n	800aca0 <uart_config_hal_setup+0x138>
    	    	         while(1);
 800ac9e:	e7fe      	b.n	800ac9e <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800aca0:	4b34      	ldr	r3, [pc, #208]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800aca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca4:	4a33      	ldr	r2, [pc, #204]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800aca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acaa:	6613      	str	r3, [r2, #96]	; 0x60
 800acac:	4b31      	ldr	r3, [pc, #196]	; (800ad74 <uart_config_hal_setup+0x20c>)
 800acae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acb4:	607b      	str	r3, [r7, #4]
 800acb6:	687b      	ldr	r3, [r7, #4]
				break;
 800acb8:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800acba:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800acbe:	4613      	mov	r3, r2
 800acc0:	015b      	lsls	r3, r3, #5
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4a2c      	ldr	r2, [pc, #176]	; (800ad78 <uart_config_hal_setup+0x210>)
 800acc8:	4413      	add	r3, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe faf6 	bl	80092bc <HAL_UART_DeInit>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d000      	beq.n	800acd8 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 800acd6:	e7fe      	b.n	800acd6 <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800acd8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800acdc:	4613      	mov	r3, r2
 800acde:	015b      	lsls	r3, r3, #5
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4a24      	ldr	r2, [pc, #144]	; (800ad78 <uart_config_hal_setup+0x210>)
 800ace6:	4413      	add	r3, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe fa99 	bl	8009220 <HAL_UART_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d000      	beq.n	800acf6 <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 800acf4:	e7fe      	b.n	800acf4 <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800acf6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800acfa:	491d      	ldr	r1, [pc, #116]	; (800ad70 <uart_config_hal_setup+0x208>)
 800acfc:	4613      	mov	r3, r2
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4413      	add	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	440b      	add	r3, r1
 800ad06:	3314      	adds	r3, #20
 800ad08:	f993 3000 	ldrsb.w	r3, [r3]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	2100      	movs	r1, #0
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fa fefc 	bl	8005b0e <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800ad16:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ad1a:	4915      	ldr	r1, [pc, #84]	; (800ad70 <uart_config_hal_setup+0x208>)
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	4413      	add	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	440b      	add	r3, r1
 800ad26:	3314      	adds	r3, #20
 800ad28:	f993 3000 	ldrsb.w	r3, [r3]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fa ff0a 	bl	8005b46 <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 800ad32:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ad36:	490e      	ldr	r1, [pc, #56]	; (800ad70 <uart_config_hal_setup+0x208>)
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	440b      	add	r3, r1
 800ad42:	3314      	adds	r3, #20
 800ad44:	f993 3000 	ldrsb.w	r3, [r3]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fa ff24 	bl	8005b96 <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800ad4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad52:	3301      	adds	r3, #1
 800ad54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ad58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	f67f af11 	bls.w	800ab84 <uart_config_hal_setup+0x1c>
    	}
    }

}
 800ad62:	bf00      	nop
 800ad64:	bf00      	nop
 800ad66:	3780      	adds	r7, #128	; 0x80
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000274 	.word	0x20000274
 800ad70:	0800cc28 	.word	0x0800cc28
 800ad74:	40021000 	.word	0x40021000
 800ad78:	2000016c 	.word	0x2000016c

0800ad7c <uart_config_esp8266_handle>:
}


#if defined(BOARD_SPUDGLO_V5)
uart_handle_t uart_config_esp8266_handle(void)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <uart_config_esp8266_handle+0x10>)
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	200001f0 	.word	0x200001f0

0800ad90 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ad94:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <HAL_Set_DMA_Callbacks+0x28>)
 800ad96:	2100      	movs	r1, #0
 800ad98:	4808      	ldr	r0, [pc, #32]	; (800adbc <HAL_Set_DMA_Callbacks+0x2c>)
 800ad9a:	f7fb f951 	bl	8006040 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ad9e:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <HAL_Set_DMA_Callbacks+0x28>)
 800ada0:	2100      	movs	r1, #0
 800ada2:	4807      	ldr	r0, [pc, #28]	; (800adc0 <HAL_Set_DMA_Callbacks+0x30>)
 800ada4:	f7fb f94c 	bl	8006040 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ada8:	4a03      	ldr	r2, [pc, #12]	; (800adb8 <HAL_Set_DMA_Callbacks+0x28>)
 800adaa:	2100      	movs	r1, #0
 800adac:	4805      	ldr	r0, [pc, #20]	; (800adc4 <HAL_Set_DMA_Callbacks+0x34>)
 800adae:	f7fb f947 	bl	8006040 <HAL_DMA_RegisterCallback>
}
 800adb2:	bf00      	nop
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	0800b28f 	.word	0x0800b28f
 800adbc:	20001cac 	.word	0x20001cac
 800adc0:	20001cf4 	.word	0x20001cf4
 800adc4:	20001d3c 	.word	0x20001d3c

0800adc8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800add8:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <HAL_MspInit+0x60>)
 800adda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800addc:	4a12      	ldr	r2, [pc, #72]	; (800ae28 <HAL_MspInit+0x60>)
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	6613      	str	r3, [r2, #96]	; 0x60
 800ade4:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <HAL_MspInit+0x60>)
 800ade6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	607b      	str	r3, [r7, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <HAL_MspInit+0x60>)
 800adf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf4:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <HAL_MspInit+0x60>)
 800adf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adfa:	6593      	str	r3, [r2, #88]	; 0x58
 800adfc:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <HAL_MspInit+0x60>)
 800adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fb fb5d 	bl	80064d4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800ae1a:	f7fb fbbb 	bl	8006594 <HAL_PWR_EnablePVD>
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	40021000 	.word	0x40021000

0800ae2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a08      	ldr	r2, [pc, #32]	; (800ae5c <HAL_RTC_MspInit+0x30>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d107      	bne.n	800ae4e <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae3e:	4b08      	ldr	r3, [pc, #32]	; (800ae60 <HAL_RTC_MspInit+0x34>)
 800ae40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae44:	4a06      	ldr	r2, [pc, #24]	; (800ae60 <HAL_RTC_MspInit+0x34>)
 800ae46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800ae4e:	bf00      	nop
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40002800 	.word	0x40002800
 800ae60:	40021000 	.word	0x40021000

0800ae64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a4c      	ldr	r2, [pc, #304]	; (800afa4 <HAL_TIM_Base_MspInit+0x140>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	f040 8090 	bne.w	800af98 <HAL_TIM_Base_MspInit+0x134>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ae78:	4b4b      	ldr	r3, [pc, #300]	; (800afa8 <HAL_TIM_Base_MspInit+0x144>)
 800ae7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7c:	4a4a      	ldr	r2, [pc, #296]	; (800afa8 <HAL_TIM_Base_MspInit+0x144>)
 800ae7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae82:	6613      	str	r3, [r2, #96]	; 0x60
 800ae84:	4b48      	ldr	r3, [pc, #288]	; (800afa8 <HAL_TIM_Base_MspInit+0x144>)
 800ae86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    g_hdma_tim1_ch1.Instance = DMA1_Channel2;
 800ae90:	4b46      	ldr	r3, [pc, #280]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800ae92:	4a47      	ldr	r2, [pc, #284]	; (800afb0 <HAL_TIM_Base_MspInit+0x14c>)
 800ae94:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800ae96:	4b45      	ldr	r3, [pc, #276]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800ae98:	2207      	movs	r2, #7
 800ae9a:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae9c:	4b43      	ldr	r3, [pc, #268]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800ae9e:	2210      	movs	r2, #16
 800aea0:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aea2:	4b42      	ldr	r3, [pc, #264]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800aea8:	4b40      	ldr	r3, [pc, #256]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aeaa:	2280      	movs	r2, #128	; 0x80
 800aeac:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aeae:	4b3f      	ldr	r3, [pc, #252]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aeb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aeb4:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aeb6:	4b3d      	ldr	r3, [pc, #244]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aeb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aebc:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800aebe:	4b3b      	ldr	r3, [pc, #236]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800aec4:	4b39      	ldr	r3, [pc, #228]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aec6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aeca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch1) != HAL_OK)
 800aecc:	4837      	ldr	r0, [pc, #220]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aece:	f7fa fe71 	bl	8005bb4 <HAL_DMA_Init>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800aed8:	f7ff fbc7 	bl	800a66a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],g_hdma_tim1_ch1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a33      	ldr	r2, [pc, #204]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24
 800aee2:	4a32      	ldr	r2, [pc, #200]	; (800afac <HAL_TIM_Base_MspInit+0x148>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    g_hdma_tim1_ch2.Instance = DMA1_Channel3;
 800aee8:	4b32      	ldr	r3, [pc, #200]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800aeea:	4a33      	ldr	r2, [pc, #204]	; (800afb8 <HAL_TIM_Base_MspInit+0x154>)
 800aeec:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800aeee:	4b31      	ldr	r3, [pc, #196]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800aef0:	2207      	movs	r2, #7
 800aef2:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aef4:	4b2f      	ldr	r3, [pc, #188]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800aef6:	2210      	movs	r2, #16
 800aef8:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800aefa:	4b2e      	ldr	r3, [pc, #184]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800af00:	4b2c      	ldr	r3, [pc, #176]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af02:	2280      	movs	r2, #128	; 0x80
 800af04:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800af06:	4b2b      	ldr	r3, [pc, #172]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af0c:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800af0e:	4b29      	ldr	r3, [pc, #164]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af14:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800af16:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af18:	2200      	movs	r2, #0
 800af1a:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800af1c:	4b25      	ldr	r3, [pc, #148]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800af22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch2) != HAL_OK)
 800af24:	4823      	ldr	r0, [pc, #140]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af26:	f7fa fe45 	bl	8005bb4 <HAL_DMA_Init>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800af30:	f7ff fb9b 	bl	800a66a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],g_hdma_tim1_ch2);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af38:	629a      	str	r2, [r3, #40]	; 0x28
 800af3a:	4a1e      	ldr	r2, [pc, #120]	; (800afb4 <HAL_TIM_Base_MspInit+0x150>)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    g_hdma_tim1_ch3.Instance = DMA1_Channel7;
 800af40:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af42:	4a1f      	ldr	r2, [pc, #124]	; (800afc0 <HAL_TIM_Base_MspInit+0x15c>)
 800af44:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800af46:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af48:	2207      	movs	r2, #7
 800af4a:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800af4c:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af4e:	2210      	movs	r2, #16
 800af50:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af54:	2200      	movs	r2, #0
 800af56:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800af58:	4b18      	ldr	r3, [pc, #96]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af5a:	2280      	movs	r2, #128	; 0x80
 800af5c:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800af5e:	4b17      	ldr	r3, [pc, #92]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af64:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af6c:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800af6e:	4b13      	ldr	r3, [pc, #76]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af70:	2200      	movs	r2, #0
 800af72:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800af74:	4b11      	ldr	r3, [pc, #68]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800af7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch3) != HAL_OK)
 800af7c:	480f      	ldr	r0, [pc, #60]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af7e:	f7fa fe19 	bl	8005bb4 <HAL_DMA_Init>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800af88:	f7ff fb6f 	bl	800a66a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],g_hdma_tim1_ch3);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a0b      	ldr	r2, [pc, #44]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c
 800af92:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <HAL_TIM_Base_MspInit+0x158>)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800af98:	f7ff fefa 	bl	800ad90 <HAL_Set_DMA_Callbacks>
}
 800af9c:	bf00      	nop
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	40012c00 	.word	0x40012c00
 800afa8:	40021000 	.word	0x40021000
 800afac:	20001cac 	.word	0x20001cac
 800afb0:	4002001c 	.word	0x4002001c
 800afb4:	20001cf4 	.word	0x20001cf4
 800afb8:	40020030 	.word	0x40020030
 800afbc:	20001d3c 	.word	0x20001d3c
 800afc0:	40020080 	.word	0x40020080

0800afc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]

}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800afde:	2300      	movs	r3, #0
 800afe0:	71fb      	strb	r3, [r7, #7]
 800afe2:	e005      	b.n	800aff0 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800afe4:	2064      	movs	r0, #100	; 0x64
 800afe6:	f7fa fc51 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	3301      	adds	r3, #1
 800afee:	71fb      	strb	r3, [r7, #7]
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0f6      	beq.n	800afe4 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aff6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800affa:	f7fa fc47 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800affe:	e7ee      	b.n	800afde <NMI_Handler+0x6>

0800b000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800b006:	2300      	movs	r3, #0
 800b008:	71fb      	strb	r3, [r7, #7]
 800b00a:	e005      	b.n	800b018 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800b00c:	2064      	movs	r0, #100	; 0x64
 800b00e:	f7fa fc3d 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	3301      	adds	r3, #1
 800b016:	71fb      	strb	r3, [r7, #7]
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d9f6      	bls.n	800b00c <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800b01e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b022:	f7fa fc33 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800b026:	e7ee      	b.n	800b006 <HardFault_Handler+0x6>

0800b028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800b02e:	2300      	movs	r3, #0
 800b030:	71fb      	strb	r3, [r7, #7]
 800b032:	e005      	b.n	800b040 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800b034:	2064      	movs	r0, #100	; 0x64
 800b036:	f7fa fc29 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	3301      	adds	r3, #1
 800b03e:	71fb      	strb	r3, [r7, #7]
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d9f6      	bls.n	800b034 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800b046:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b04a:	f7fa fc1f 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800b04e:	e7ee      	b.n	800b02e <MemManage_Handler+0x6>

0800b050 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800b056:	2300      	movs	r3, #0
 800b058:	71fb      	strb	r3, [r7, #7]
 800b05a:	e005      	b.n	800b068 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800b05c:	2064      	movs	r0, #100	; 0x64
 800b05e:	f7fa fc15 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	3301      	adds	r3, #1
 800b066:	71fb      	strb	r3, [r7, #7]
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d9f6      	bls.n	800b05c <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800b06e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b072:	f7fa fc0b 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800b076:	e7ee      	b.n	800b056 <BusFault_Handler+0x6>

0800b078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800b07e:	2300      	movs	r3, #0
 800b080:	71fb      	strb	r3, [r7, #7]
 800b082:	e005      	b.n	800b090 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800b084:	2064      	movs	r0, #100	; 0x64
 800b086:	f7fa fc01 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	3301      	adds	r3, #1
 800b08e:	71fb      	strb	r3, [r7, #7]
 800b090:	79fb      	ldrb	r3, [r7, #7]
 800b092:	2b04      	cmp	r3, #4
 800b094:	d9f6      	bls.n	800b084 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800b096:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b09a:	f7fa fbf7 	bl	800588c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800b09e:	e7ee      	b.n	800b07e <UsageFault_Handler+0x6>

0800b0a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
}
 800b0a4:	bf00      	nop
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// C is color
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800b0b6:	2320      	movs	r3, #32
 800b0b8:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800b0be:	2306      	movs	r3, #6
 800b0c0:	713b      	strb	r3, [r7, #4]
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_D;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
    //d_passes++;
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fb f9dd 	bl	8006484 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b0ca:	797a      	ldrb	r2, [r7, #5]
 800b0cc:	797b      	ldrb	r3, [r7, #5]
 800b0ce:	4910      	ldr	r1, [pc, #64]	; (800b110 <EXTI0_IRQHandler+0x60>)
 800b0d0:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b0d4:	490e      	ldr	r1, [pc, #56]	; (800b110 <EXTI0_IRQHandler+0x60>)
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	440b      	add	r3, r1
 800b0da:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b0dc:	797c      	ldrb	r4, [r7, #5]
 800b0de:	f7f8 fe9d 	bl	8003e1c <xTaskGetTickCountFromISR>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4a0a      	ldr	r2, [pc, #40]	; (800b110 <EXTI0_IRQHandler+0x60>)
 800b0e6:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b0ea:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fa fd37 	bl	8005b62 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b0f4:	4b07      	ldr	r3, [pc, #28]	; (800b114 <EXTI0_IRQHandler+0x64>)
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	7979      	ldrb	r1, [r7, #5]
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	2203      	movs	r2, #3
 800b102:	f7f9 faa9 	bl	8004658 <xTaskGenericNotifyFromISR>
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd90      	pop	{r4, r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000364 	.word	0x20000364
 800b114:	20001e04 	.word	0x20001e04

0800b118 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// D is speed!
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800b11e:	2301      	movs	r3, #1
 800b120:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800b122:	2303      	movs	r3, #3
 800b124:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800b126:	2308      	movs	r3, #8
 800b128:	713b      	strb	r3, [r7, #4]
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_A;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
    a_passes++;
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b12a:	88fb      	ldrh	r3, [r7, #6]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fb f9a9 	bl	8006484 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b132:	797a      	ldrb	r2, [r7, #5]
 800b134:	797b      	ldrb	r3, [r7, #5]
 800b136:	4910      	ldr	r1, [pc, #64]	; (800b178 <EXTI2_IRQHandler+0x60>)
 800b138:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b13c:	490e      	ldr	r1, [pc, #56]	; (800b178 <EXTI2_IRQHandler+0x60>)
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	440b      	add	r3, r1
 800b142:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b144:	797c      	ldrb	r4, [r7, #5]
 800b146:	f7f8 fe69 	bl	8003e1c <xTaskGetTickCountFromISR>
 800b14a:	4603      	mov	r3, r0
 800b14c:	4a0a      	ldr	r2, [pc, #40]	; (800b178 <EXTI2_IRQHandler+0x60>)
 800b14e:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b152:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f7fa fd03 	bl	8005b62 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b15c:	4b07      	ldr	r3, [pc, #28]	; (800b17c <EXTI2_IRQHandler+0x64>)
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	7979      	ldrb	r1, [r7, #5]
 800b162:	463b      	mov	r3, r7
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	2300      	movs	r3, #0
 800b168:	2203      	movs	r2, #3
 800b16a:	f7f9 fa75 	bl	8004658 <xTaskGenericNotifyFromISR>
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	bd90      	pop	{r4, r7, pc}
 800b176:	bf00      	nop
 800b178:	20000364 	.word	0x20000364
 800b17c:	20001e04 	.word	0x20001e04

0800b180 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b085      	sub	sp, #20
 800b184:	af02      	add	r7, sp, #8
	// B is animation
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800b186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b18a:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800b18c:	2301      	movs	r3, #1
 800b18e:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800b190:	2328      	movs	r3, #40	; 0x28
 800b192:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800b194:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <EXTI15_10_IRQHandler+0x6c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	4a14      	ldr	r2, [pc, #80]	; (800b1ec <EXTI15_10_IRQHandler+0x6c>)
 800b19c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fb f96f 	bl	8006484 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b1a6:	797a      	ldrb	r2, [r7, #5]
 800b1a8:	797b      	ldrb	r3, [r7, #5]
 800b1aa:	4911      	ldr	r1, [pc, #68]	; (800b1f0 <EXTI15_10_IRQHandler+0x70>)
 800b1ac:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b1b0:	490f      	ldr	r1, [pc, #60]	; (800b1f0 <EXTI15_10_IRQHandler+0x70>)
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	440b      	add	r3, r1
 800b1b6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b1b8:	797c      	ldrb	r4, [r7, #5]
 800b1ba:	f7f8 fe2f 	bl	8003e1c <xTaskGetTickCountFromISR>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4a0b      	ldr	r2, [pc, #44]	; (800b1f0 <EXTI15_10_IRQHandler+0x70>)
 800b1c2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b1c6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fa fcc9 	bl	8005b62 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b1d0:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <EXTI15_10_IRQHandler+0x74>)
 800b1d2:	6818      	ldr	r0, [r3, #0]
 800b1d4:	7979      	ldrb	r1, [r7, #5]
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2203      	movs	r2, #3
 800b1de:	f7f9 fa3b 	bl	8004658 <xTaskGenericNotifyFromISR>
}
 800b1e2:	bf00      	nop
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd90      	pop	{r4, r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20001df8 	.word	0x20001df8
 800b1f0:	20000364 	.word	0x20000364
 800b1f4:	20001e04 	.word	0x20001e04

0800b1f8 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b1f8:	b590      	push	{r4, r7, lr}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// A is speed!
    board_init_push_button_pin_e button_pin = gpio_config_pin_lookup(GPIO_PIN_PUSH_BUTTON_A);
 800b1fe:	2025      	movs	r0, #37	; 0x25
 800b200:	f7ff fa90 	bl	800a724 <gpio_config_pin_lookup>
 800b204:	4603      	mov	r3, r0
 800b206:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800b208:	2300      	movs	r3, #0
 800b20a:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = gpio_config_irqn_lookup(GPIO_PIN_PUSH_BUTTON_A);
 800b20c:	2025      	movs	r0, #37	; 0x25
 800b20e:	f7ff fa57 	bl	800a6c0 <gpio_config_irqn_lookup>
 800b212:	4603      	mov	r3, r0
 800b214:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800b216:	4b15      	ldr	r3, [pc, #84]	; (800b26c <EXTI9_5_IRQHandler+0x74>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3301      	adds	r3, #1
 800b21c:	4a13      	ldr	r2, [pc, #76]	; (800b26c <EXTI9_5_IRQHandler+0x74>)
 800b21e:	6013      	str	r3, [r2, #0]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
    c_passes++;
#endif
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b220:	88fb      	ldrh	r3, [r7, #6]
 800b222:	4618      	mov	r0, r3
 800b224:	f7fb f92e 	bl	8006484 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b228:	797a      	ldrb	r2, [r7, #5]
 800b22a:	797b      	ldrb	r3, [r7, #5]
 800b22c:	4910      	ldr	r1, [pc, #64]	; (800b270 <EXTI9_5_IRQHandler+0x78>)
 800b22e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b232:	490f      	ldr	r1, [pc, #60]	; (800b270 <EXTI9_5_IRQHandler+0x78>)
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	440b      	add	r3, r1
 800b238:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b23a:	797c      	ldrb	r4, [r7, #5]
 800b23c:	f7f8 fdee 	bl	8003e1c <xTaskGetTickCountFromISR>
 800b240:	4603      	mov	r3, r0
 800b242:	4a0b      	ldr	r2, [pc, #44]	; (800b270 <EXTI9_5_IRQHandler+0x78>)
 800b244:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b248:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fa fc88 	bl	8005b62 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b252:	4b08      	ldr	r3, [pc, #32]	; (800b274 <EXTI9_5_IRQHandler+0x7c>)
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	7979      	ldrb	r1, [r7, #5]
 800b258:	463b      	mov	r3, r7
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2300      	movs	r3, #0
 800b25e:	2203      	movs	r2, #3
 800b260:	f7f9 f9fa 	bl	8004658 <xTaskGenericNotifyFromISR>
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd90      	pop	{r4, r7, pc}
 800b26c:	20001df4 	.word	0x20001df4
 800b270:	20000364 	.word	0x20000364
 800b274:	20001e04 	.word	0x20001e04

0800b278 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	80fb      	strh	r3, [r7, #6]

}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
    while(1);
 800b296:	e7fe      	b.n	800b296 <HAL_DMA_CMPLT_CALLBACK+0x8>

0800b298 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7f1b      	ldrb	r3, [r3, #28]
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	d016      	beq.n	800b2d6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	dc1c      	bgt.n	800b2e6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d002      	beq.n	800b2b6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d008      	beq.n	800b2c6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800b2b4:	e017      	b.n	800b2e6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7fc ff87 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	701a      	strb	r2, [r3, #0]
        break;
 800b2c4:	e010      	b.n	800b2e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7fc ff7f 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800b2ce:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
        break;
 800b2d4:	e008      	b.n	800b2e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800b2d6:	2108      	movs	r1, #8
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7fc ff77 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	701a      	strb	r2, [r3, #0]
        break;
 800b2e4:	e000      	b.n	800b2e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800b2e6:	bf00      	nop
    }
}
 800b2e8:	bf00      	nop
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20000099 	.word	0x20000099
 800b2f4:	2000009a 	.word	0x2000009a
 800b2f8:	2000009b 	.word	0x2000009b

0800b2fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch1);
 800b300:	4802      	ldr	r0, [pc, #8]	; (800b30c <DMA1_Channel2_IRQHandler+0x10>)
 800b302:	f7fa fdee 	bl	8005ee2 <HAL_DMA_IRQHandler>
}
 800b306:	bf00      	nop
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20001cac 	.word	0x20001cac

0800b310 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch2);
 800b314:	4802      	ldr	r0, [pc, #8]	; (800b320 <DMA1_Channel3_IRQHandler+0x10>)
 800b316:	f7fa fde4 	bl	8005ee2 <HAL_DMA_IRQHandler>
}
 800b31a:	bf00      	nop
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20001cf4 	.word	0x20001cf4

0800b324 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
}
 800b328:	bf00      	nop
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b332:	b480      	push	{r7}
 800b334:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
}
 800b336:	bf00      	nop
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch3);
 800b344:	4802      	ldr	r0, [pc, #8]	; (800b350 <DMA1_Channel7_IRQHandler+0x10>)
 800b346:	f7fa fdcc 	bl	8005ee2 <HAL_DMA_IRQHandler>
}
 800b34a:	bf00      	nop
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20001d3c 	.word	0x20001d3c

0800b354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
	return 1;
 800b358:	2301      	movs	r3, #1
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <_kill>:

int _kill(int pid, int sig)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b36e:	f000 fb6d 	bl	800ba4c <__errno>
 800b372:	4603      	mov	r3, r0
 800b374:	2216      	movs	r2, #22
 800b376:	601a      	str	r2, [r3, #0]
	return -1;
 800b378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <_exit>:

void _exit (int status)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b38c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff ffe7 	bl	800b364 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b396:	e7fe      	b.n	800b396 <_exit+0x12>

0800b398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	e00a      	b.n	800b3c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b3aa:	f3af 8000 	nop.w
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	60ba      	str	r2, [r7, #8]
 800b3b6:	b2ca      	uxtb	r2, r1
 800b3b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	dbf0      	blt.n	800b3aa <_read+0x12>
	}

return len;
 800b3c8:	687b      	ldr	r3, [r7, #4]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b086      	sub	sp, #24
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	e009      	b.n	800b3f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	60ba      	str	r2, [r7, #8]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	dbf1      	blt.n	800b3e4 <_write+0x12>
	}
	return len;
 800b400:	687b      	ldr	r3, [r7, #4]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <_close>:

int _close(int file)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
	return -1;
 800b412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b432:	605a      	str	r2, [r3, #4]
	return 0;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <_isatty>:

int _isatty(int file)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
	return 1;
 800b44a:	2301      	movs	r3, #1
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
	return 0;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b47c:	4a14      	ldr	r2, [pc, #80]	; (800b4d0 <_sbrk+0x5c>)
 800b47e:	4b15      	ldr	r3, [pc, #84]	; (800b4d4 <_sbrk+0x60>)
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b488:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <_sbrk+0x64>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b490:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <_sbrk+0x64>)
 800b492:	4a12      	ldr	r2, [pc, #72]	; (800b4dc <_sbrk+0x68>)
 800b494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b496:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <_sbrk+0x64>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4413      	add	r3, r2
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d207      	bcs.n	800b4b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b4a4:	f000 fad2 	bl	800ba4c <__errno>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	220c      	movs	r2, #12
 800b4ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4b2:	e009      	b.n	800b4c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b4b4:	4b08      	ldr	r3, [pc, #32]	; (800b4d8 <_sbrk+0x64>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b4ba:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <_sbrk+0x64>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4a05      	ldr	r2, [pc, #20]	; (800b4d8 <_sbrk+0x64>)
 800b4c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20010000 	.word	0x20010000
 800b4d4:	00000400 	.word	0x00000400
 800b4d8:	20001dfc 	.word	0x20001dfc
 800b4dc:	20003010 	.word	0x20003010

0800b4e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b4e4:	4b06      	ldr	r3, [pc, #24]	; (800b500 <SystemInit+0x20>)
 800b4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ea:	4a05      	ldr	r2, [pc, #20]	; (800b500 <SystemInit+0x20>)
 800b4ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000ed00 	.word	0xe000ed00

0800b504 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


void board_init_peripheral_setup(void)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800b508:	f7ff fb2e 	bl	800ab68 <uart_config_hal_setup>
	spi_config_hal_setup();
 800b50c:	f7ff fa5e 	bl	800a9cc <spi_config_hal_setup>
}
 800b510:	bf00      	nop
 800b512:	bd80      	pop	{r7, pc}

0800b514 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800b51e:	f000 f951 	bl	800b7c4 <rand>
 800b522:	4603      	mov	r3, r0
 800b524:	461a      	mov	r2, r3
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	1acb      	subs	r3, r1, r3
 800b52c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b530:	fb01 f303 	mul.w	r3, r1, r3
 800b534:	1ad2      	subs	r2, r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4413      	add	r3, r2
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 800b546:	f7ff f875 	bl	800a634 <board_init_common_board_init>
    //flash_info_init();
    task_create();
 800b54a:	f000 f807 	bl	800b55c <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b54e:	f7f6 faab 	bl	8001aa8 <reset_ws2812b>
	osKernelStart();
 800b552:	f7f7 fac3 	bl	8002adc <osKernelStart>
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b560:	f7f7 fa98 	bl	8002a94 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <task_create+0x34>)
 800b566:	2100      	movs	r1, #0
 800b568:	480a      	ldr	r0, [pc, #40]	; (800b594 <task_create+0x38>)
 800b56a:	f7f7 fadd 	bl	8002b28 <osThreadNew>
 800b56e:	4603      	mov	r3, r0
 800b570:	4a09      	ldr	r2, [pc, #36]	; (800b598 <task_create+0x3c>)
 800b572:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
	g_led_strip_ctrl_handle = osThreadNew(task_led_ctrl, NULL, &g_task_led_ctrl_attributes);
 800b574:	4a09      	ldr	r2, [pc, #36]	; (800b59c <task_create+0x40>)
 800b576:	2100      	movs	r1, #0
 800b578:	4809      	ldr	r0, [pc, #36]	; (800b5a0 <task_create+0x44>)
 800b57a:	f7f7 fad5 	bl	8002b28 <osThreadNew>
 800b57e:	4603      	mov	r3, r0
 800b580:	4a08      	ldr	r2, [pc, #32]	; (800b5a4 <task_create+0x48>)
 800b582:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b584:	4b08      	ldr	r3, [pc, #32]	; (800b5a8 <task_create+0x4c>)
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]



}
 800b58a:	bf00      	nop
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	0800cc58 	.word	0x0800cc58
 800b594:	08002125 	.word	0x08002125
 800b598:	20001e04 	.word	0x20001e04
 800b59c:	0800cc7c 	.word	0x0800cc7c
 800b5a0:	0800259d 	.word	0x0800259d
 800b5a4:	20001e00 	.word	0x20001e00
 800b5a8:	20002ec0 	.word	0x20002ec0

0800b5ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b5ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b5e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b5b0:	f7ff ff96 	bl	800b4e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b5b4:	480c      	ldr	r0, [pc, #48]	; (800b5e8 <LoopForever+0x6>)
  ldr r1, =_edata
 800b5b6:	490d      	ldr	r1, [pc, #52]	; (800b5ec <LoopForever+0xa>)
  ldr r2, =_sidata
 800b5b8:	4a0d      	ldr	r2, [pc, #52]	; (800b5f0 <LoopForever+0xe>)
  movs r3, #0
 800b5ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b5bc:	e002      	b.n	800b5c4 <LoopCopyDataInit>

0800b5be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b5be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b5c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b5c2:	3304      	adds	r3, #4

0800b5c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b5c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b5c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b5c8:	d3f9      	bcc.n	800b5be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b5ca:	4a0a      	ldr	r2, [pc, #40]	; (800b5f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b5cc:	4c0a      	ldr	r4, [pc, #40]	; (800b5f8 <LoopForever+0x16>)
  movs r3, #0
 800b5ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b5d0:	e001      	b.n	800b5d6 <LoopFillZerobss>

0800b5d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b5d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b5d4:	3204      	adds	r2, #4

0800b5d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b5d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b5d8:	d3fb      	bcc.n	800b5d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b5da:	f000 fa3d 	bl	800ba58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b5de:	f7ff ffb0 	bl	800b542 <main>

0800b5e2 <LoopForever>:

LoopForever:
    b LoopForever
 800b5e2:	e7fe      	b.n	800b5e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b5e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b5e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b5ec:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800b5f0:	0800cd90 	.word	0x0800cd90
  ldr r2, =_sbss
 800b5f4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 800b5f8:	20003010 	.word	0x20003010

0800b5fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b5fc:	e7fe      	b.n	800b5fc <ADC1_IRQHandler>
	...

0800b600 <malloc>:
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <malloc+0xc>)
 800b602:	4601      	mov	r1, r0
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f000 b823 	b.w	800b650 <_malloc_r>
 800b60a:	bf00      	nop
 800b60c:	200002d0 	.word	0x200002d0

0800b610 <sbrk_aligned>:
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	4e0e      	ldr	r6, [pc, #56]	; (800b64c <sbrk_aligned+0x3c>)
 800b614:	460c      	mov	r4, r1
 800b616:	6831      	ldr	r1, [r6, #0]
 800b618:	4605      	mov	r5, r0
 800b61a:	b911      	cbnz	r1, 800b622 <sbrk_aligned+0x12>
 800b61c:	f000 fa06 	bl	800ba2c <_sbrk_r>
 800b620:	6030      	str	r0, [r6, #0]
 800b622:	4621      	mov	r1, r4
 800b624:	4628      	mov	r0, r5
 800b626:	f000 fa01 	bl	800ba2c <_sbrk_r>
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d00a      	beq.n	800b644 <sbrk_aligned+0x34>
 800b62e:	1cc4      	adds	r4, r0, #3
 800b630:	f024 0403 	bic.w	r4, r4, #3
 800b634:	42a0      	cmp	r0, r4
 800b636:	d007      	beq.n	800b648 <sbrk_aligned+0x38>
 800b638:	1a21      	subs	r1, r4, r0
 800b63a:	4628      	mov	r0, r5
 800b63c:	f000 f9f6 	bl	800ba2c <_sbrk_r>
 800b640:	3001      	adds	r0, #1
 800b642:	d101      	bne.n	800b648 <sbrk_aligned+0x38>
 800b644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b648:	4620      	mov	r0, r4
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	20002ec8 	.word	0x20002ec8

0800b650 <_malloc_r>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	1ccd      	adds	r5, r1, #3
 800b656:	f025 0503 	bic.w	r5, r5, #3
 800b65a:	3508      	adds	r5, #8
 800b65c:	2d0c      	cmp	r5, #12
 800b65e:	bf38      	it	cc
 800b660:	250c      	movcc	r5, #12
 800b662:	2d00      	cmp	r5, #0
 800b664:	4607      	mov	r7, r0
 800b666:	db01      	blt.n	800b66c <_malloc_r+0x1c>
 800b668:	42a9      	cmp	r1, r5
 800b66a:	d905      	bls.n	800b678 <_malloc_r+0x28>
 800b66c:	230c      	movs	r3, #12
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	2600      	movs	r6, #0
 800b672:	4630      	mov	r0, r6
 800b674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b74c <_malloc_r+0xfc>
 800b67c:	f000 f868 	bl	800b750 <__malloc_lock>
 800b680:	f8d8 3000 	ldr.w	r3, [r8]
 800b684:	461c      	mov	r4, r3
 800b686:	bb5c      	cbnz	r4, 800b6e0 <_malloc_r+0x90>
 800b688:	4629      	mov	r1, r5
 800b68a:	4638      	mov	r0, r7
 800b68c:	f7ff ffc0 	bl	800b610 <sbrk_aligned>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	4604      	mov	r4, r0
 800b694:	d155      	bne.n	800b742 <_malloc_r+0xf2>
 800b696:	f8d8 4000 	ldr.w	r4, [r8]
 800b69a:	4626      	mov	r6, r4
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	d145      	bne.n	800b72c <_malloc_r+0xdc>
 800b6a0:	2c00      	cmp	r4, #0
 800b6a2:	d048      	beq.n	800b736 <_malloc_r+0xe6>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	eb04 0903 	add.w	r9, r4, r3
 800b6ae:	f000 f9bd 	bl	800ba2c <_sbrk_r>
 800b6b2:	4581      	cmp	r9, r0
 800b6b4:	d13f      	bne.n	800b736 <_malloc_r+0xe6>
 800b6b6:	6821      	ldr	r1, [r4, #0]
 800b6b8:	1a6d      	subs	r5, r5, r1
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff ffa7 	bl	800b610 <sbrk_aligned>
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d037      	beq.n	800b736 <_malloc_r+0xe6>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	442b      	add	r3, r5
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d038      	beq.n	800b746 <_malloc_r+0xf6>
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	42a2      	cmp	r2, r4
 800b6d8:	d12b      	bne.n	800b732 <_malloc_r+0xe2>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	605a      	str	r2, [r3, #4]
 800b6de:	e00f      	b.n	800b700 <_malloc_r+0xb0>
 800b6e0:	6822      	ldr	r2, [r4, #0]
 800b6e2:	1b52      	subs	r2, r2, r5
 800b6e4:	d41f      	bmi.n	800b726 <_malloc_r+0xd6>
 800b6e6:	2a0b      	cmp	r2, #11
 800b6e8:	d917      	bls.n	800b71a <_malloc_r+0xca>
 800b6ea:	1961      	adds	r1, r4, r5
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	6025      	str	r5, [r4, #0]
 800b6f0:	bf18      	it	ne
 800b6f2:	6059      	strne	r1, [r3, #4]
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	bf08      	it	eq
 800b6f8:	f8c8 1000 	streq.w	r1, [r8]
 800b6fc:	5162      	str	r2, [r4, r5]
 800b6fe:	604b      	str	r3, [r1, #4]
 800b700:	4638      	mov	r0, r7
 800b702:	f104 060b 	add.w	r6, r4, #11
 800b706:	f000 f829 	bl	800b75c <__malloc_unlock>
 800b70a:	f026 0607 	bic.w	r6, r6, #7
 800b70e:	1d23      	adds	r3, r4, #4
 800b710:	1af2      	subs	r2, r6, r3
 800b712:	d0ae      	beq.n	800b672 <_malloc_r+0x22>
 800b714:	1b9b      	subs	r3, r3, r6
 800b716:	50a3      	str	r3, [r4, r2]
 800b718:	e7ab      	b.n	800b672 <_malloc_r+0x22>
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	6862      	ldr	r2, [r4, #4]
 800b71e:	d1dd      	bne.n	800b6dc <_malloc_r+0x8c>
 800b720:	f8c8 2000 	str.w	r2, [r8]
 800b724:	e7ec      	b.n	800b700 <_malloc_r+0xb0>
 800b726:	4623      	mov	r3, r4
 800b728:	6864      	ldr	r4, [r4, #4]
 800b72a:	e7ac      	b.n	800b686 <_malloc_r+0x36>
 800b72c:	4634      	mov	r4, r6
 800b72e:	6876      	ldr	r6, [r6, #4]
 800b730:	e7b4      	b.n	800b69c <_malloc_r+0x4c>
 800b732:	4613      	mov	r3, r2
 800b734:	e7cc      	b.n	800b6d0 <_malloc_r+0x80>
 800b736:	230c      	movs	r3, #12
 800b738:	603b      	str	r3, [r7, #0]
 800b73a:	4638      	mov	r0, r7
 800b73c:	f000 f80e 	bl	800b75c <__malloc_unlock>
 800b740:	e797      	b.n	800b672 <_malloc_r+0x22>
 800b742:	6025      	str	r5, [r4, #0]
 800b744:	e7dc      	b.n	800b700 <_malloc_r+0xb0>
 800b746:	605b      	str	r3, [r3, #4]
 800b748:	deff      	udf	#255	; 0xff
 800b74a:	bf00      	nop
 800b74c:	20002ec4 	.word	0x20002ec4

0800b750 <__malloc_lock>:
 800b750:	4801      	ldr	r0, [pc, #4]	; (800b758 <__malloc_lock+0x8>)
 800b752:	f000 b9a6 	b.w	800baa2 <__retarget_lock_acquire_recursive>
 800b756:	bf00      	nop
 800b758:	20003008 	.word	0x20003008

0800b75c <__malloc_unlock>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__malloc_unlock+0x8>)
 800b75e:	f000 b9a1 	b.w	800baa4 <__retarget_lock_release_recursive>
 800b762:	bf00      	nop
 800b764:	20003008 	.word	0x20003008

0800b768 <srand>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4b10      	ldr	r3, [pc, #64]	; (800b7ac <srand+0x44>)
 800b76c:	681d      	ldr	r5, [r3, #0]
 800b76e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b770:	4604      	mov	r4, r0
 800b772:	b9b3      	cbnz	r3, 800b7a2 <srand+0x3a>
 800b774:	2018      	movs	r0, #24
 800b776:	f7ff ff43 	bl	800b600 <malloc>
 800b77a:	4602      	mov	r2, r0
 800b77c:	6328      	str	r0, [r5, #48]	; 0x30
 800b77e:	b920      	cbnz	r0, 800b78a <srand+0x22>
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <srand+0x48>)
 800b782:	480c      	ldr	r0, [pc, #48]	; (800b7b4 <srand+0x4c>)
 800b784:	2146      	movs	r1, #70	; 0x46
 800b786:	f000 f99d 	bl	800bac4 <__assert_func>
 800b78a:	490b      	ldr	r1, [pc, #44]	; (800b7b8 <srand+0x50>)
 800b78c:	4b0b      	ldr	r3, [pc, #44]	; (800b7bc <srand+0x54>)
 800b78e:	e9c0 1300 	strd	r1, r3, [r0]
 800b792:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <srand+0x58>)
 800b794:	6083      	str	r3, [r0, #8]
 800b796:	230b      	movs	r3, #11
 800b798:	8183      	strh	r3, [r0, #12]
 800b79a:	2100      	movs	r1, #0
 800b79c:	2001      	movs	r0, #1
 800b79e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b7a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	611c      	str	r4, [r3, #16]
 800b7a8:	615a      	str	r2, [r3, #20]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	200002d0 	.word	0x200002d0
 800b7b0:	0800cca0 	.word	0x0800cca0
 800b7b4:	0800ccb7 	.word	0x0800ccb7
 800b7b8:	abcd330e 	.word	0xabcd330e
 800b7bc:	e66d1234 	.word	0xe66d1234
 800b7c0:	0005deec 	.word	0x0005deec

0800b7c4 <rand>:
 800b7c4:	4b16      	ldr	r3, [pc, #88]	; (800b820 <rand+0x5c>)
 800b7c6:	b510      	push	{r4, lr}
 800b7c8:	681c      	ldr	r4, [r3, #0]
 800b7ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b7cc:	b9b3      	cbnz	r3, 800b7fc <rand+0x38>
 800b7ce:	2018      	movs	r0, #24
 800b7d0:	f7ff ff16 	bl	800b600 <malloc>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	6320      	str	r0, [r4, #48]	; 0x30
 800b7d8:	b920      	cbnz	r0, 800b7e4 <rand+0x20>
 800b7da:	4b12      	ldr	r3, [pc, #72]	; (800b824 <rand+0x60>)
 800b7dc:	4812      	ldr	r0, [pc, #72]	; (800b828 <rand+0x64>)
 800b7de:	2152      	movs	r1, #82	; 0x52
 800b7e0:	f000 f970 	bl	800bac4 <__assert_func>
 800b7e4:	4911      	ldr	r1, [pc, #68]	; (800b82c <rand+0x68>)
 800b7e6:	4b12      	ldr	r3, [pc, #72]	; (800b830 <rand+0x6c>)
 800b7e8:	e9c0 1300 	strd	r1, r3, [r0]
 800b7ec:	4b11      	ldr	r3, [pc, #68]	; (800b834 <rand+0x70>)
 800b7ee:	6083      	str	r3, [r0, #8]
 800b7f0:	230b      	movs	r3, #11
 800b7f2:	8183      	strh	r3, [r0, #12]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b7fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b7fe:	480e      	ldr	r0, [pc, #56]	; (800b838 <rand+0x74>)
 800b800:	690b      	ldr	r3, [r1, #16]
 800b802:	694c      	ldr	r4, [r1, #20]
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <rand+0x78>)
 800b806:	4358      	muls	r0, r3
 800b808:	fb02 0004 	mla	r0, r2, r4, r0
 800b80c:	fba3 3202 	umull	r3, r2, r3, r2
 800b810:	3301      	adds	r3, #1
 800b812:	eb40 0002 	adc.w	r0, r0, r2
 800b816:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b81a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b81e:	bd10      	pop	{r4, pc}
 800b820:	200002d0 	.word	0x200002d0
 800b824:	0800cca0 	.word	0x0800cca0
 800b828:	0800ccb7 	.word	0x0800ccb7
 800b82c:	abcd330e 	.word	0xabcd330e
 800b830:	e66d1234 	.word	0xe66d1234
 800b834:	0005deec 	.word	0x0005deec
 800b838:	5851f42d 	.word	0x5851f42d
 800b83c:	4c957f2d 	.word	0x4c957f2d

0800b840 <std>:
 800b840:	2300      	movs	r3, #0
 800b842:	b510      	push	{r4, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	e9c0 3300 	strd	r3, r3, [r0]
 800b84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b84e:	6083      	str	r3, [r0, #8]
 800b850:	8181      	strh	r1, [r0, #12]
 800b852:	6643      	str	r3, [r0, #100]	; 0x64
 800b854:	81c2      	strh	r2, [r0, #14]
 800b856:	6183      	str	r3, [r0, #24]
 800b858:	4619      	mov	r1, r3
 800b85a:	2208      	movs	r2, #8
 800b85c:	305c      	adds	r0, #92	; 0x5c
 800b85e:	f000 f8b1 	bl	800b9c4 <memset>
 800b862:	4b0d      	ldr	r3, [pc, #52]	; (800b898 <std+0x58>)
 800b864:	6263      	str	r3, [r4, #36]	; 0x24
 800b866:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <std+0x5c>)
 800b868:	62a3      	str	r3, [r4, #40]	; 0x28
 800b86a:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <std+0x60>)
 800b86c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <std+0x64>)
 800b870:	6323      	str	r3, [r4, #48]	; 0x30
 800b872:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <std+0x68>)
 800b874:	6224      	str	r4, [r4, #32]
 800b876:	429c      	cmp	r4, r3
 800b878:	d006      	beq.n	800b888 <std+0x48>
 800b87a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b87e:	4294      	cmp	r4, r2
 800b880:	d002      	beq.n	800b888 <std+0x48>
 800b882:	33d0      	adds	r3, #208	; 0xd0
 800b884:	429c      	cmp	r4, r3
 800b886:	d105      	bne.n	800b894 <std+0x54>
 800b888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b890:	f000 b906 	b.w	800baa0 <__retarget_lock_init_recursive>
 800b894:	bd10      	pop	{r4, pc}
 800b896:	bf00      	nop
 800b898:	0800bcf5 	.word	0x0800bcf5
 800b89c:	0800bd17 	.word	0x0800bd17
 800b8a0:	0800bd4f 	.word	0x0800bd4f
 800b8a4:	0800bd73 	.word	0x0800bd73
 800b8a8:	20002ecc 	.word	0x20002ecc

0800b8ac <stdio_exit_handler>:
 800b8ac:	4a02      	ldr	r2, [pc, #8]	; (800b8b8 <stdio_exit_handler+0xc>)
 800b8ae:	4903      	ldr	r1, [pc, #12]	; (800b8bc <stdio_exit_handler+0x10>)
 800b8b0:	4803      	ldr	r0, [pc, #12]	; (800b8c0 <stdio_exit_handler+0x14>)
 800b8b2:	f000 b869 	b.w	800b988 <_fwalk_sglue>
 800b8b6:	bf00      	nop
 800b8b8:	20000278 	.word	0x20000278
 800b8bc:	0800bca5 	.word	0x0800bca5
 800b8c0:	20000284 	.word	0x20000284

0800b8c4 <cleanup_stdio>:
 800b8c4:	6841      	ldr	r1, [r0, #4]
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <cleanup_stdio+0x34>)
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	d001      	beq.n	800b8d4 <cleanup_stdio+0x10>
 800b8d0:	f000 f9e8 	bl	800bca4 <_fflush_r>
 800b8d4:	68a1      	ldr	r1, [r4, #8]
 800b8d6:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <cleanup_stdio+0x38>)
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	d002      	beq.n	800b8e2 <cleanup_stdio+0x1e>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 f9e1 	bl	800bca4 <_fflush_r>
 800b8e2:	68e1      	ldr	r1, [r4, #12]
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <cleanup_stdio+0x3c>)
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	d004      	beq.n	800b8f4 <cleanup_stdio+0x30>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f0:	f000 b9d8 	b.w	800bca4 <_fflush_r>
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20002ecc 	.word	0x20002ecc
 800b8fc:	20002f34 	.word	0x20002f34
 800b900:	20002f9c 	.word	0x20002f9c

0800b904 <global_stdio_init.part.0>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <global_stdio_init.part.0+0x30>)
 800b908:	4c0b      	ldr	r4, [pc, #44]	; (800b938 <global_stdio_init.part.0+0x34>)
 800b90a:	4a0c      	ldr	r2, [pc, #48]	; (800b93c <global_stdio_init.part.0+0x38>)
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	4620      	mov	r0, r4
 800b910:	2200      	movs	r2, #0
 800b912:	2104      	movs	r1, #4
 800b914:	f7ff ff94 	bl	800b840 <std>
 800b918:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b91c:	2201      	movs	r2, #1
 800b91e:	2109      	movs	r1, #9
 800b920:	f7ff ff8e 	bl	800b840 <std>
 800b924:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b928:	2202      	movs	r2, #2
 800b92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b92e:	2112      	movs	r1, #18
 800b930:	f7ff bf86 	b.w	800b840 <std>
 800b934:	20003004 	.word	0x20003004
 800b938:	20002ecc 	.word	0x20002ecc
 800b93c:	0800b8ad 	.word	0x0800b8ad

0800b940 <__sfp_lock_acquire>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__sfp_lock_acquire+0x8>)
 800b942:	f000 b8ae 	b.w	800baa2 <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	20003009 	.word	0x20003009

0800b94c <__sfp_lock_release>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sfp_lock_release+0x8>)
 800b94e:	f000 b8a9 	b.w	800baa4 <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	20003009 	.word	0x20003009

0800b958 <__sinit>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	f7ff fff0 	bl	800b940 <__sfp_lock_acquire>
 800b960:	6a23      	ldr	r3, [r4, #32]
 800b962:	b11b      	cbz	r3, 800b96c <__sinit+0x14>
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	f7ff bff0 	b.w	800b94c <__sfp_lock_release>
 800b96c:	4b04      	ldr	r3, [pc, #16]	; (800b980 <__sinit+0x28>)
 800b96e:	6223      	str	r3, [r4, #32]
 800b970:	4b04      	ldr	r3, [pc, #16]	; (800b984 <__sinit+0x2c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f5      	bne.n	800b964 <__sinit+0xc>
 800b978:	f7ff ffc4 	bl	800b904 <global_stdio_init.part.0>
 800b97c:	e7f2      	b.n	800b964 <__sinit+0xc>
 800b97e:	bf00      	nop
 800b980:	0800b8c5 	.word	0x0800b8c5
 800b984:	20003004 	.word	0x20003004

0800b988 <_fwalk_sglue>:
 800b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98c:	4607      	mov	r7, r0
 800b98e:	4688      	mov	r8, r1
 800b990:	4614      	mov	r4, r2
 800b992:	2600      	movs	r6, #0
 800b994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b998:	f1b9 0901 	subs.w	r9, r9, #1
 800b99c:	d505      	bpl.n	800b9aa <_fwalk_sglue+0x22>
 800b99e:	6824      	ldr	r4, [r4, #0]
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	d1f7      	bne.n	800b994 <_fwalk_sglue+0xc>
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d907      	bls.n	800b9c0 <_fwalk_sglue+0x38>
 800b9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	d003      	beq.n	800b9c0 <_fwalk_sglue+0x38>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	47c0      	blx	r8
 800b9be:	4306      	orrs	r6, r0
 800b9c0:	3568      	adds	r5, #104	; 0x68
 800b9c2:	e7e9      	b.n	800b998 <_fwalk_sglue+0x10>

0800b9c4 <memset>:
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d100      	bne.n	800b9ce <memset+0xa>
 800b9cc:	4770      	bx	lr
 800b9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d2:	e7f9      	b.n	800b9c8 <memset+0x4>

0800b9d4 <time>:
 800b9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <time+0x30>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4669      	mov	r1, sp
 800b9dc:	4604      	mov	r4, r0
 800b9de:	6818      	ldr	r0, [r3, #0]
 800b9e0:	f000 f812 	bl	800ba08 <_gettimeofday_r>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	bfbe      	ittt	lt
 800b9e8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b9ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9f0:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9f8:	b10c      	cbz	r4, 800b9fe <time+0x2a>
 800b9fa:	e9c4 0100 	strd	r0, r1, [r4]
 800b9fe:	b004      	add	sp, #16
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	bf00      	nop
 800ba04:	200002d0 	.word	0x200002d0

0800ba08 <_gettimeofday_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_gettimeofday_r+0x20>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	f000 fe41 	bl	800c69c <_gettimeofday>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d102      	bne.n	800ba24 <_gettimeofday_r+0x1c>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b103      	cbz	r3, 800ba24 <_gettimeofday_r+0x1c>
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	2000300c 	.word	0x2000300c

0800ba2c <_sbrk_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	; (800ba48 <_sbrk_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7ff fd1c 	bl	800b474 <_sbrk>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_sbrk_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_sbrk_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	2000300c 	.word	0x2000300c

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	200002d0 	.word	0x200002d0

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	4d0d      	ldr	r5, [pc, #52]	; (800ba90 <__libc_init_array+0x38>)
 800ba5c:	4c0d      	ldr	r4, [pc, #52]	; (800ba94 <__libc_init_array+0x3c>)
 800ba5e:	1b64      	subs	r4, r4, r5
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	2600      	movs	r6, #0
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	4d0b      	ldr	r5, [pc, #44]	; (800ba98 <__libc_init_array+0x40>)
 800ba6a:	4c0c      	ldr	r4, [pc, #48]	; (800ba9c <__libc_init_array+0x44>)
 800ba6c:	f000 fe1e 	bl	800c6ac <_init>
 800ba70:	1b64      	subs	r4, r4, r5
 800ba72:	10a4      	asrs	r4, r4, #2
 800ba74:	2600      	movs	r6, #0
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	0800cd88 	.word	0x0800cd88
 800ba94:	0800cd88 	.word	0x0800cd88
 800ba98:	0800cd88 	.word	0x0800cd88
 800ba9c:	0800cd8c 	.word	0x0800cd8c

0800baa0 <__retarget_lock_init_recursive>:
 800baa0:	4770      	bx	lr

0800baa2 <__retarget_lock_acquire_recursive>:
 800baa2:	4770      	bx	lr

0800baa4 <__retarget_lock_release_recursive>:
 800baa4:	4770      	bx	lr

0800baa6 <memcpy>:
 800baa6:	440a      	add	r2, r1
 800baa8:	4291      	cmp	r1, r2
 800baaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baae:	d100      	bne.n	800bab2 <memcpy+0xc>
 800bab0:	4770      	bx	lr
 800bab2:	b510      	push	{r4, lr}
 800bab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800babc:	4291      	cmp	r1, r2
 800babe:	d1f9      	bne.n	800bab4 <memcpy+0xe>
 800bac0:	bd10      	pop	{r4, pc}
	...

0800bac4 <__assert_func>:
 800bac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bac6:	4614      	mov	r4, r2
 800bac8:	461a      	mov	r2, r3
 800baca:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <__assert_func+0x2c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4605      	mov	r5, r0
 800bad0:	68d8      	ldr	r0, [r3, #12]
 800bad2:	b14c      	cbz	r4, 800bae8 <__assert_func+0x24>
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <__assert_func+0x30>)
 800bad6:	9100      	str	r1, [sp, #0]
 800bad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800badc:	4906      	ldr	r1, [pc, #24]	; (800baf8 <__assert_func+0x34>)
 800bade:	462b      	mov	r3, r5
 800bae0:	f000 f94c 	bl	800bd7c <fiprintf>
 800bae4:	f000 f9a2 	bl	800be2c <abort>
 800bae8:	4b04      	ldr	r3, [pc, #16]	; (800bafc <__assert_func+0x38>)
 800baea:	461c      	mov	r4, r3
 800baec:	e7f3      	b.n	800bad6 <__assert_func+0x12>
 800baee:	bf00      	nop
 800baf0:	200002d0 	.word	0x200002d0
 800baf4:	0800cd0f 	.word	0x0800cd0f
 800baf8:	0800cd1c 	.word	0x0800cd1c
 800bafc:	0800cd4a 	.word	0x0800cd4a

0800bb00 <_free_r>:
 800bb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d044      	beq.n	800bb90 <_free_r+0x90>
 800bb06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb0a:	9001      	str	r0, [sp, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb12:	bfb8      	it	lt
 800bb14:	18e4      	addlt	r4, r4, r3
 800bb16:	f7ff fe1b 	bl	800b750 <__malloc_lock>
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	; (800bb94 <_free_r+0x94>)
 800bb1c:	9801      	ldr	r0, [sp, #4]
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	b933      	cbnz	r3, 800bb30 <_free_r+0x30>
 800bb22:	6063      	str	r3, [r4, #4]
 800bb24:	6014      	str	r4, [r2, #0]
 800bb26:	b003      	add	sp, #12
 800bb28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb2c:	f7ff be16 	b.w	800b75c <__malloc_unlock>
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	d908      	bls.n	800bb46 <_free_r+0x46>
 800bb34:	6825      	ldr	r5, [r4, #0]
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	bf01      	itttt	eq
 800bb3c:	6819      	ldreq	r1, [r3, #0]
 800bb3e:	685b      	ldreq	r3, [r3, #4]
 800bb40:	1949      	addeq	r1, r1, r5
 800bb42:	6021      	streq	r1, [r4, #0]
 800bb44:	e7ed      	b.n	800bb22 <_free_r+0x22>
 800bb46:	461a      	mov	r2, r3
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	b10b      	cbz	r3, 800bb50 <_free_r+0x50>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d9fa      	bls.n	800bb46 <_free_r+0x46>
 800bb50:	6811      	ldr	r1, [r2, #0]
 800bb52:	1855      	adds	r5, r2, r1
 800bb54:	42a5      	cmp	r5, r4
 800bb56:	d10b      	bne.n	800bb70 <_free_r+0x70>
 800bb58:	6824      	ldr	r4, [r4, #0]
 800bb5a:	4421      	add	r1, r4
 800bb5c:	1854      	adds	r4, r2, r1
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	6011      	str	r1, [r2, #0]
 800bb62:	d1e0      	bne.n	800bb26 <_free_r+0x26>
 800bb64:	681c      	ldr	r4, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	6053      	str	r3, [r2, #4]
 800bb6a:	440c      	add	r4, r1
 800bb6c:	6014      	str	r4, [r2, #0]
 800bb6e:	e7da      	b.n	800bb26 <_free_r+0x26>
 800bb70:	d902      	bls.n	800bb78 <_free_r+0x78>
 800bb72:	230c      	movs	r3, #12
 800bb74:	6003      	str	r3, [r0, #0]
 800bb76:	e7d6      	b.n	800bb26 <_free_r+0x26>
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1961      	adds	r1, r4, r5
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf04      	itt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	6063      	str	r3, [r4, #4]
 800bb86:	bf04      	itt	eq
 800bb88:	1949      	addeq	r1, r1, r5
 800bb8a:	6021      	streq	r1, [r4, #0]
 800bb8c:	6054      	str	r4, [r2, #4]
 800bb8e:	e7ca      	b.n	800bb26 <_free_r+0x26>
 800bb90:	b003      	add	sp, #12
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	20002ec4 	.word	0x20002ec4

0800bb98 <__sflush_r>:
 800bb98:	898a      	ldrh	r2, [r1, #12]
 800bb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9e:	4605      	mov	r5, r0
 800bba0:	0710      	lsls	r0, r2, #28
 800bba2:	460c      	mov	r4, r1
 800bba4:	d458      	bmi.n	800bc58 <__sflush_r+0xc0>
 800bba6:	684b      	ldr	r3, [r1, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dc05      	bgt.n	800bbb8 <__sflush_r+0x20>
 800bbac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dc02      	bgt.n	800bbb8 <__sflush_r+0x20>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d0f9      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbc4:	682f      	ldr	r7, [r5, #0]
 800bbc6:	6a21      	ldr	r1, [r4, #32]
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	d032      	beq.n	800bc32 <__sflush_r+0x9a>
 800bbcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	075a      	lsls	r2, r3, #29
 800bbd2:	d505      	bpl.n	800bbe0 <__sflush_r+0x48>
 800bbd4:	6863      	ldr	r3, [r4, #4]
 800bbd6:	1ac0      	subs	r0, r0, r3
 800bbd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbda:	b10b      	cbz	r3, 800bbe0 <__sflush_r+0x48>
 800bbdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbde:	1ac0      	subs	r0, r0, r3
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe6:	6a21      	ldr	r1, [r4, #32]
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b0      	blx	r6
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	d106      	bne.n	800bc00 <__sflush_r+0x68>
 800bbf2:	6829      	ldr	r1, [r5, #0]
 800bbf4:	291d      	cmp	r1, #29
 800bbf6:	d82b      	bhi.n	800bc50 <__sflush_r+0xb8>
 800bbf8:	4a29      	ldr	r2, [pc, #164]	; (800bca0 <__sflush_r+0x108>)
 800bbfa:	410a      	asrs	r2, r1
 800bbfc:	07d6      	lsls	r6, r2, #31
 800bbfe:	d427      	bmi.n	800bc50 <__sflush_r+0xb8>
 800bc00:	2200      	movs	r2, #0
 800bc02:	6062      	str	r2, [r4, #4]
 800bc04:	04d9      	lsls	r1, r3, #19
 800bc06:	6922      	ldr	r2, [r4, #16]
 800bc08:	6022      	str	r2, [r4, #0]
 800bc0a:	d504      	bpl.n	800bc16 <__sflush_r+0x7e>
 800bc0c:	1c42      	adds	r2, r0, #1
 800bc0e:	d101      	bne.n	800bc14 <__sflush_r+0x7c>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b903      	cbnz	r3, 800bc16 <__sflush_r+0x7e>
 800bc14:	6560      	str	r0, [r4, #84]	; 0x54
 800bc16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc18:	602f      	str	r7, [r5, #0]
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d0c9      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bc1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc22:	4299      	cmp	r1, r3
 800bc24:	d002      	beq.n	800bc2c <__sflush_r+0x94>
 800bc26:	4628      	mov	r0, r5
 800bc28:	f7ff ff6a 	bl	800bb00 <_free_r>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	6360      	str	r0, [r4, #52]	; 0x34
 800bc30:	e7c0      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc32:	2301      	movs	r3, #1
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b0      	blx	r6
 800bc38:	1c41      	adds	r1, r0, #1
 800bc3a:	d1c8      	bne.n	800bbce <__sflush_r+0x36>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0c5      	beq.n	800bbce <__sflush_r+0x36>
 800bc42:	2b1d      	cmp	r3, #29
 800bc44:	d001      	beq.n	800bc4a <__sflush_r+0xb2>
 800bc46:	2b16      	cmp	r3, #22
 800bc48:	d101      	bne.n	800bc4e <__sflush_r+0xb6>
 800bc4a:	602f      	str	r7, [r5, #0]
 800bc4c:	e7b1      	b.n	800bbb2 <__sflush_r+0x1a>
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	e7ad      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc58:	690f      	ldr	r7, [r1, #16]
 800bc5a:	2f00      	cmp	r7, #0
 800bc5c:	d0a9      	beq.n	800bbb2 <__sflush_r+0x1a>
 800bc5e:	0793      	lsls	r3, r2, #30
 800bc60:	680e      	ldr	r6, [r1, #0]
 800bc62:	bf08      	it	eq
 800bc64:	694b      	ldreq	r3, [r1, #20]
 800bc66:	600f      	str	r7, [r1, #0]
 800bc68:	bf18      	it	ne
 800bc6a:	2300      	movne	r3, #0
 800bc6c:	eba6 0807 	sub.w	r8, r6, r7
 800bc70:	608b      	str	r3, [r1, #8]
 800bc72:	f1b8 0f00 	cmp.w	r8, #0
 800bc76:	dd9c      	ble.n	800bbb2 <__sflush_r+0x1a>
 800bc78:	6a21      	ldr	r1, [r4, #32]
 800bc7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc7c:	4643      	mov	r3, r8
 800bc7e:	463a      	mov	r2, r7
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b0      	blx	r6
 800bc84:	2800      	cmp	r0, #0
 800bc86:	dc06      	bgt.n	800bc96 <__sflush_r+0xfe>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8e:	81a3      	strh	r3, [r4, #12]
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc94:	e78e      	b.n	800bbb4 <__sflush_r+0x1c>
 800bc96:	4407      	add	r7, r0
 800bc98:	eba8 0800 	sub.w	r8, r8, r0
 800bc9c:	e7e9      	b.n	800bc72 <__sflush_r+0xda>
 800bc9e:	bf00      	nop
 800bca0:	dfbffffe 	.word	0xdfbffffe

0800bca4 <_fflush_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	690b      	ldr	r3, [r1, #16]
 800bca8:	4605      	mov	r5, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	b913      	cbnz	r3, 800bcb4 <_fflush_r+0x10>
 800bcae:	2500      	movs	r5, #0
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	b118      	cbz	r0, 800bcbe <_fflush_r+0x1a>
 800bcb6:	6a03      	ldr	r3, [r0, #32]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <_fflush_r+0x1a>
 800bcba:	f7ff fe4d 	bl	800b958 <__sinit>
 800bcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0f3      	beq.n	800bcae <_fflush_r+0xa>
 800bcc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcc8:	07d0      	lsls	r0, r2, #31
 800bcca:	d404      	bmi.n	800bcd6 <_fflush_r+0x32>
 800bccc:	0599      	lsls	r1, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_fflush_r+0x32>
 800bcd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcd2:	f7ff fee6 	bl	800baa2 <__retarget_lock_acquire_recursive>
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	4621      	mov	r1, r4
 800bcda:	f7ff ff5d 	bl	800bb98 <__sflush_r>
 800bcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bce0:	07da      	lsls	r2, r3, #31
 800bce2:	4605      	mov	r5, r0
 800bce4:	d4e4      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	059b      	lsls	r3, r3, #22
 800bcea:	d4e1      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcee:	f7ff fed9 	bl	800baa4 <__retarget_lock_release_recursive>
 800bcf2:	e7dd      	b.n	800bcb0 <_fflush_r+0xc>

0800bcf4 <__sread>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	f000 f872 	bl	800bde4 <_read_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	bfab      	itete	ge
 800bd04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd06:	89a3      	ldrhlt	r3, [r4, #12]
 800bd08:	181b      	addge	r3, r3, r0
 800bd0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd0e:	bfac      	ite	ge
 800bd10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd12:	81a3      	strhlt	r3, [r4, #12]
 800bd14:	bd10      	pop	{r4, pc}

0800bd16 <__swrite>:
 800bd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	898b      	ldrh	r3, [r1, #12]
 800bd1e:	05db      	lsls	r3, r3, #23
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	4616      	mov	r6, r2
 800bd26:	d505      	bpl.n	800bd34 <__swrite+0x1e>
 800bd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f000 f846 	bl	800bdc0 <_lseek_r>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	4632      	mov	r2, r6
 800bd42:	463b      	mov	r3, r7
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	f000 b85d 	b.w	800be08 <_write_r>

0800bd4e <__sseek>:
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd56:	f000 f833 	bl	800bdc0 <_lseek_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	bf15      	itete	ne
 800bd60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd6a:	81a3      	strheq	r3, [r4, #12]
 800bd6c:	bf18      	it	ne
 800bd6e:	81a3      	strhne	r3, [r4, #12]
 800bd70:	bd10      	pop	{r4, pc}

0800bd72 <__sclose>:
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 b813 	b.w	800bda0 <_close_r>
	...

0800bd7c <fiprintf>:
 800bd7c:	b40e      	push	{r1, r2, r3}
 800bd7e:	b503      	push	{r0, r1, lr}
 800bd80:	4601      	mov	r1, r0
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	4805      	ldr	r0, [pc, #20]	; (800bd9c <fiprintf+0x20>)
 800bd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	f000 f87d 	bl	800be8c <_vfiprintf_r>
 800bd92:	b002      	add	sp, #8
 800bd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd98:	b003      	add	sp, #12
 800bd9a:	4770      	bx	lr
 800bd9c:	200002d0 	.word	0x200002d0

0800bda0 <_close_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d06      	ldr	r5, [pc, #24]	; (800bdbc <_close_r+0x1c>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f7ff fb2d 	bl	800b40a <_close>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_close_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_close_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	2000300c 	.word	0x2000300c

0800bdc0 <_lseek_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4d07      	ldr	r5, [pc, #28]	; (800bde0 <_lseek_r+0x20>)
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	4611      	mov	r1, r2
 800bdca:	2200      	movs	r2, #0
 800bdcc:	602a      	str	r2, [r5, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f7ff fb42 	bl	800b458 <_lseek>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d102      	bne.n	800bdde <_lseek_r+0x1e>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	b103      	cbz	r3, 800bdde <_lseek_r+0x1e>
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	2000300c 	.word	0x2000300c

0800bde4 <_read_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4d07      	ldr	r5, [pc, #28]	; (800be04 <_read_r+0x20>)
 800bde8:	4604      	mov	r4, r0
 800bdea:	4608      	mov	r0, r1
 800bdec:	4611      	mov	r1, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	602a      	str	r2, [r5, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f7ff fad0 	bl	800b398 <_read>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_read_r+0x1e>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_read_r+0x1e>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	2000300c 	.word	0x2000300c

0800be08 <_write_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d07      	ldr	r5, [pc, #28]	; (800be28 <_write_r+0x20>)
 800be0c:	4604      	mov	r4, r0
 800be0e:	4608      	mov	r0, r1
 800be10:	4611      	mov	r1, r2
 800be12:	2200      	movs	r2, #0
 800be14:	602a      	str	r2, [r5, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	f7ff fadb 	bl	800b3d2 <_write>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_write_r+0x1e>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	b103      	cbz	r3, 800be26 <_write_r+0x1e>
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	2000300c 	.word	0x2000300c

0800be2c <abort>:
 800be2c:	b508      	push	{r3, lr}
 800be2e:	2006      	movs	r0, #6
 800be30:	f000 fc18 	bl	800c664 <raise>
 800be34:	2001      	movs	r0, #1
 800be36:	f7ff faa5 	bl	800b384 <_exit>

0800be3a <__sfputc_r>:
 800be3a:	6893      	ldr	r3, [r2, #8]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	b410      	push	{r4}
 800be42:	6093      	str	r3, [r2, #8]
 800be44:	da08      	bge.n	800be58 <__sfputc_r+0x1e>
 800be46:	6994      	ldr	r4, [r2, #24]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	db01      	blt.n	800be50 <__sfputc_r+0x16>
 800be4c:	290a      	cmp	r1, #10
 800be4e:	d103      	bne.n	800be58 <__sfputc_r+0x1e>
 800be50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be54:	f000 bac4 	b.w	800c3e0 <__swbuf_r>
 800be58:	6813      	ldr	r3, [r2, #0]
 800be5a:	1c58      	adds	r0, r3, #1
 800be5c:	6010      	str	r0, [r2, #0]
 800be5e:	7019      	strb	r1, [r3, #0]
 800be60:	4608      	mov	r0, r1
 800be62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <__sfputs_r>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	4614      	mov	r4, r2
 800be70:	18d5      	adds	r5, r2, r3
 800be72:	42ac      	cmp	r4, r5
 800be74:	d101      	bne.n	800be7a <__sfputs_r+0x12>
 800be76:	2000      	movs	r0, #0
 800be78:	e007      	b.n	800be8a <__sfputs_r+0x22>
 800be7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7e:	463a      	mov	r2, r7
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff ffda 	bl	800be3a <__sfputc_r>
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	d1f3      	bne.n	800be72 <__sfputs_r+0xa>
 800be8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be8c <_vfiprintf_r>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	460d      	mov	r5, r1
 800be92:	b09d      	sub	sp, #116	; 0x74
 800be94:	4614      	mov	r4, r2
 800be96:	4698      	mov	r8, r3
 800be98:	4606      	mov	r6, r0
 800be9a:	b118      	cbz	r0, 800bea4 <_vfiprintf_r+0x18>
 800be9c:	6a03      	ldr	r3, [r0, #32]
 800be9e:	b90b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x18>
 800bea0:	f7ff fd5a 	bl	800b958 <__sinit>
 800bea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bea6:	07d9      	lsls	r1, r3, #31
 800bea8:	d405      	bmi.n	800beb6 <_vfiprintf_r+0x2a>
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	059a      	lsls	r2, r3, #22
 800beae:	d402      	bmi.n	800beb6 <_vfiprintf_r+0x2a>
 800beb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb2:	f7ff fdf6 	bl	800baa2 <__retarget_lock_acquire_recursive>
 800beb6:	89ab      	ldrh	r3, [r5, #12]
 800beb8:	071b      	lsls	r3, r3, #28
 800beba:	d501      	bpl.n	800bec0 <_vfiprintf_r+0x34>
 800bebc:	692b      	ldr	r3, [r5, #16]
 800bebe:	b99b      	cbnz	r3, 800bee8 <_vfiprintf_r+0x5c>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f000 faca 	bl	800c45c <__swsetup_r>
 800bec8:	b170      	cbz	r0, 800bee8 <_vfiprintf_r+0x5c>
 800beca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800becc:	07dc      	lsls	r4, r3, #31
 800bece:	d504      	bpl.n	800beda <_vfiprintf_r+0x4e>
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bed4:	b01d      	add	sp, #116	; 0x74
 800bed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beda:	89ab      	ldrh	r3, [r5, #12]
 800bedc:	0598      	lsls	r0, r3, #22
 800bede:	d4f7      	bmi.n	800bed0 <_vfiprintf_r+0x44>
 800bee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bee2:	f7ff fddf 	bl	800baa4 <__retarget_lock_release_recursive>
 800bee6:	e7f3      	b.n	800bed0 <_vfiprintf_r+0x44>
 800bee8:	2300      	movs	r3, #0
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	2320      	movs	r3, #32
 800beee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bef2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bef6:	2330      	movs	r3, #48	; 0x30
 800bef8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0ac <_vfiprintf_r+0x220>
 800befc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf00:	f04f 0901 	mov.w	r9, #1
 800bf04:	4623      	mov	r3, r4
 800bf06:	469a      	mov	sl, r3
 800bf08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0c:	b10a      	cbz	r2, 800bf12 <_vfiprintf_r+0x86>
 800bf0e:	2a25      	cmp	r2, #37	; 0x25
 800bf10:	d1f9      	bne.n	800bf06 <_vfiprintf_r+0x7a>
 800bf12:	ebba 0b04 	subs.w	fp, sl, r4
 800bf16:	d00b      	beq.n	800bf30 <_vfiprintf_r+0xa4>
 800bf18:	465b      	mov	r3, fp
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff ffa2 	bl	800be68 <__sfputs_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	f000 80a9 	beq.w	800c07c <_vfiprintf_r+0x1f0>
 800bf2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf2c:	445a      	add	r2, fp
 800bf2e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf30:	f89a 3000 	ldrb.w	r3, [sl]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80a1 	beq.w	800c07c <_vfiprintf_r+0x1f0>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf44:	f10a 0a01 	add.w	sl, sl, #1
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf50:	931a      	str	r3, [sp, #104]	; 0x68
 800bf52:	4654      	mov	r4, sl
 800bf54:	2205      	movs	r2, #5
 800bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5a:	4854      	ldr	r0, [pc, #336]	; (800c0ac <_vfiprintf_r+0x220>)
 800bf5c:	f7f4 f938 	bl	80001d0 <memchr>
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	b9d8      	cbnz	r0, 800bf9c <_vfiprintf_r+0x110>
 800bf64:	06d1      	lsls	r1, r2, #27
 800bf66:	bf44      	itt	mi
 800bf68:	2320      	movmi	r3, #32
 800bf6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf6e:	0713      	lsls	r3, r2, #28
 800bf70:	bf44      	itt	mi
 800bf72:	232b      	movmi	r3, #43	; 0x2b
 800bf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf78:	f89a 3000 	ldrb.w	r3, [sl]
 800bf7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7e:	d015      	beq.n	800bfac <_vfiprintf_r+0x120>
 800bf80:	9a07      	ldr	r2, [sp, #28]
 800bf82:	4654      	mov	r4, sl
 800bf84:	2000      	movs	r0, #0
 800bf86:	f04f 0c0a 	mov.w	ip, #10
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf90:	3b30      	subs	r3, #48	; 0x30
 800bf92:	2b09      	cmp	r3, #9
 800bf94:	d94d      	bls.n	800c032 <_vfiprintf_r+0x1a6>
 800bf96:	b1b0      	cbz	r0, 800bfc6 <_vfiprintf_r+0x13a>
 800bf98:	9207      	str	r2, [sp, #28]
 800bf9a:	e014      	b.n	800bfc6 <_vfiprintf_r+0x13a>
 800bf9c:	eba0 0308 	sub.w	r3, r0, r8
 800bfa0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	46a2      	mov	sl, r4
 800bfaa:	e7d2      	b.n	800bf52 <_vfiprintf_r+0xc6>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	1d19      	adds	r1, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	9103      	str	r1, [sp, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfbb      	ittet	lt
 800bfb8:	425b      	neglt	r3, r3
 800bfba:	f042 0202 	orrlt.w	r2, r2, #2
 800bfbe:	9307      	strge	r3, [sp, #28]
 800bfc0:	9307      	strlt	r3, [sp, #28]
 800bfc2:	bfb8      	it	lt
 800bfc4:	9204      	strlt	r2, [sp, #16]
 800bfc6:	7823      	ldrb	r3, [r4, #0]
 800bfc8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfca:	d10c      	bne.n	800bfe6 <_vfiprintf_r+0x15a>
 800bfcc:	7863      	ldrb	r3, [r4, #1]
 800bfce:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd0:	d134      	bne.n	800c03c <_vfiprintf_r+0x1b0>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	1d1a      	adds	r2, r3, #4
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	9203      	str	r2, [sp, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfe2:	3402      	adds	r4, #2
 800bfe4:	9305      	str	r3, [sp, #20]
 800bfe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0bc <_vfiprintf_r+0x230>
 800bfea:	7821      	ldrb	r1, [r4, #0]
 800bfec:	2203      	movs	r2, #3
 800bfee:	4650      	mov	r0, sl
 800bff0:	f7f4 f8ee 	bl	80001d0 <memchr>
 800bff4:	b138      	cbz	r0, 800c006 <_vfiprintf_r+0x17a>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	eba0 000a 	sub.w	r0, r0, sl
 800bffc:	2240      	movs	r2, #64	; 0x40
 800bffe:	4082      	lsls	r2, r0
 800c000:	4313      	orrs	r3, r2
 800c002:	3401      	adds	r4, #1
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00a:	4829      	ldr	r0, [pc, #164]	; (800c0b0 <_vfiprintf_r+0x224>)
 800c00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c010:	2206      	movs	r2, #6
 800c012:	f7f4 f8dd 	bl	80001d0 <memchr>
 800c016:	2800      	cmp	r0, #0
 800c018:	d03f      	beq.n	800c09a <_vfiprintf_r+0x20e>
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <_vfiprintf_r+0x228>)
 800c01c:	bb1b      	cbnz	r3, 800c066 <_vfiprintf_r+0x1da>
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	3307      	adds	r3, #7
 800c022:	f023 0307 	bic.w	r3, r3, #7
 800c026:	3308      	adds	r3, #8
 800c028:	9303      	str	r3, [sp, #12]
 800c02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02c:	443b      	add	r3, r7
 800c02e:	9309      	str	r3, [sp, #36]	; 0x24
 800c030:	e768      	b.n	800bf04 <_vfiprintf_r+0x78>
 800c032:	fb0c 3202 	mla	r2, ip, r2, r3
 800c036:	460c      	mov	r4, r1
 800c038:	2001      	movs	r0, #1
 800c03a:	e7a6      	b.n	800bf8a <_vfiprintf_r+0xfe>
 800c03c:	2300      	movs	r3, #0
 800c03e:	3401      	adds	r4, #1
 800c040:	9305      	str	r3, [sp, #20]
 800c042:	4619      	mov	r1, r3
 800c044:	f04f 0c0a 	mov.w	ip, #10
 800c048:	4620      	mov	r0, r4
 800c04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c04e:	3a30      	subs	r2, #48	; 0x30
 800c050:	2a09      	cmp	r2, #9
 800c052:	d903      	bls.n	800c05c <_vfiprintf_r+0x1d0>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0c6      	beq.n	800bfe6 <_vfiprintf_r+0x15a>
 800c058:	9105      	str	r1, [sp, #20]
 800c05a:	e7c4      	b.n	800bfe6 <_vfiprintf_r+0x15a>
 800c05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c060:	4604      	mov	r4, r0
 800c062:	2301      	movs	r3, #1
 800c064:	e7f0      	b.n	800c048 <_vfiprintf_r+0x1bc>
 800c066:	ab03      	add	r3, sp, #12
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	462a      	mov	r2, r5
 800c06c:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <_vfiprintf_r+0x22c>)
 800c06e:	a904      	add	r1, sp, #16
 800c070:	4630      	mov	r0, r6
 800c072:	f3af 8000 	nop.w
 800c076:	4607      	mov	r7, r0
 800c078:	1c78      	adds	r0, r7, #1
 800c07a:	d1d6      	bne.n	800c02a <_vfiprintf_r+0x19e>
 800c07c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c07e:	07d9      	lsls	r1, r3, #31
 800c080:	d405      	bmi.n	800c08e <_vfiprintf_r+0x202>
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	059a      	lsls	r2, r3, #22
 800c086:	d402      	bmi.n	800c08e <_vfiprintf_r+0x202>
 800c088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c08a:	f7ff fd0b 	bl	800baa4 <__retarget_lock_release_recursive>
 800c08e:	89ab      	ldrh	r3, [r5, #12]
 800c090:	065b      	lsls	r3, r3, #25
 800c092:	f53f af1d 	bmi.w	800bed0 <_vfiprintf_r+0x44>
 800c096:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c098:	e71c      	b.n	800bed4 <_vfiprintf_r+0x48>
 800c09a:	ab03      	add	r3, sp, #12
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	462a      	mov	r2, r5
 800c0a0:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <_vfiprintf_r+0x22c>)
 800c0a2:	a904      	add	r1, sp, #16
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f000 f879 	bl	800c19c <_printf_i>
 800c0aa:	e7e4      	b.n	800c076 <_vfiprintf_r+0x1ea>
 800c0ac:	0800cd4b 	.word	0x0800cd4b
 800c0b0:	0800cd55 	.word	0x0800cd55
 800c0b4:	00000000 	.word	0x00000000
 800c0b8:	0800be69 	.word	0x0800be69
 800c0bc:	0800cd51 	.word	0x0800cd51

0800c0c0 <_printf_common>:
 800c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c4:	4616      	mov	r6, r2
 800c0c6:	4699      	mov	r9, r3
 800c0c8:	688a      	ldr	r2, [r1, #8]
 800c0ca:	690b      	ldr	r3, [r1, #16]
 800c0cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	bfb8      	it	lt
 800c0d4:	4613      	movlt	r3, r2
 800c0d6:	6033      	str	r3, [r6, #0]
 800c0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0dc:	4607      	mov	r7, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	b10a      	cbz	r2, 800c0e6 <_printf_common+0x26>
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	6033      	str	r3, [r6, #0]
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	0699      	lsls	r1, r3, #26
 800c0ea:	bf42      	ittt	mi
 800c0ec:	6833      	ldrmi	r3, [r6, #0]
 800c0ee:	3302      	addmi	r3, #2
 800c0f0:	6033      	strmi	r3, [r6, #0]
 800c0f2:	6825      	ldr	r5, [r4, #0]
 800c0f4:	f015 0506 	ands.w	r5, r5, #6
 800c0f8:	d106      	bne.n	800c108 <_printf_common+0x48>
 800c0fa:	f104 0a19 	add.w	sl, r4, #25
 800c0fe:	68e3      	ldr	r3, [r4, #12]
 800c100:	6832      	ldr	r2, [r6, #0]
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	42ab      	cmp	r3, r5
 800c106:	dc26      	bgt.n	800c156 <_printf_common+0x96>
 800c108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c10c:	1e13      	subs	r3, r2, #0
 800c10e:	6822      	ldr	r2, [r4, #0]
 800c110:	bf18      	it	ne
 800c112:	2301      	movne	r3, #1
 800c114:	0692      	lsls	r2, r2, #26
 800c116:	d42b      	bmi.n	800c170 <_printf_common+0xb0>
 800c118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c11c:	4649      	mov	r1, r9
 800c11e:	4638      	mov	r0, r7
 800c120:	47c0      	blx	r8
 800c122:	3001      	adds	r0, #1
 800c124:	d01e      	beq.n	800c164 <_printf_common+0xa4>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	6922      	ldr	r2, [r4, #16]
 800c12a:	f003 0306 	and.w	r3, r3, #6
 800c12e:	2b04      	cmp	r3, #4
 800c130:	bf02      	ittt	eq
 800c132:	68e5      	ldreq	r5, [r4, #12]
 800c134:	6833      	ldreq	r3, [r6, #0]
 800c136:	1aed      	subeq	r5, r5, r3
 800c138:	68a3      	ldr	r3, [r4, #8]
 800c13a:	bf0c      	ite	eq
 800c13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c140:	2500      	movne	r5, #0
 800c142:	4293      	cmp	r3, r2
 800c144:	bfc4      	itt	gt
 800c146:	1a9b      	subgt	r3, r3, r2
 800c148:	18ed      	addgt	r5, r5, r3
 800c14a:	2600      	movs	r6, #0
 800c14c:	341a      	adds	r4, #26
 800c14e:	42b5      	cmp	r5, r6
 800c150:	d11a      	bne.n	800c188 <_printf_common+0xc8>
 800c152:	2000      	movs	r0, #0
 800c154:	e008      	b.n	800c168 <_printf_common+0xa8>
 800c156:	2301      	movs	r3, #1
 800c158:	4652      	mov	r2, sl
 800c15a:	4649      	mov	r1, r9
 800c15c:	4638      	mov	r0, r7
 800c15e:	47c0      	blx	r8
 800c160:	3001      	adds	r0, #1
 800c162:	d103      	bne.n	800c16c <_printf_common+0xac>
 800c164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16c:	3501      	adds	r5, #1
 800c16e:	e7c6      	b.n	800c0fe <_printf_common+0x3e>
 800c170:	18e1      	adds	r1, r4, r3
 800c172:	1c5a      	adds	r2, r3, #1
 800c174:	2030      	movs	r0, #48	; 0x30
 800c176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c17a:	4422      	add	r2, r4
 800c17c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c184:	3302      	adds	r3, #2
 800c186:	e7c7      	b.n	800c118 <_printf_common+0x58>
 800c188:	2301      	movs	r3, #1
 800c18a:	4622      	mov	r2, r4
 800c18c:	4649      	mov	r1, r9
 800c18e:	4638      	mov	r0, r7
 800c190:	47c0      	blx	r8
 800c192:	3001      	adds	r0, #1
 800c194:	d0e6      	beq.n	800c164 <_printf_common+0xa4>
 800c196:	3601      	adds	r6, #1
 800c198:	e7d9      	b.n	800c14e <_printf_common+0x8e>
	...

0800c19c <_printf_i>:
 800c19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	7e0f      	ldrb	r7, [r1, #24]
 800c1a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1a4:	2f78      	cmp	r7, #120	; 0x78
 800c1a6:	4691      	mov	r9, r2
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	469a      	mov	sl, r3
 800c1ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1b2:	d807      	bhi.n	800c1c4 <_printf_i+0x28>
 800c1b4:	2f62      	cmp	r7, #98	; 0x62
 800c1b6:	d80a      	bhi.n	800c1ce <_printf_i+0x32>
 800c1b8:	2f00      	cmp	r7, #0
 800c1ba:	f000 80d4 	beq.w	800c366 <_printf_i+0x1ca>
 800c1be:	2f58      	cmp	r7, #88	; 0x58
 800c1c0:	f000 80c0 	beq.w	800c344 <_printf_i+0x1a8>
 800c1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1cc:	e03a      	b.n	800c244 <_printf_i+0xa8>
 800c1ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1d2:	2b15      	cmp	r3, #21
 800c1d4:	d8f6      	bhi.n	800c1c4 <_printf_i+0x28>
 800c1d6:	a101      	add	r1, pc, #4	; (adr r1, 800c1dc <_printf_i+0x40>)
 800c1d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1dc:	0800c235 	.word	0x0800c235
 800c1e0:	0800c249 	.word	0x0800c249
 800c1e4:	0800c1c5 	.word	0x0800c1c5
 800c1e8:	0800c1c5 	.word	0x0800c1c5
 800c1ec:	0800c1c5 	.word	0x0800c1c5
 800c1f0:	0800c1c5 	.word	0x0800c1c5
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c1c5 	.word	0x0800c1c5
 800c1fc:	0800c1c5 	.word	0x0800c1c5
 800c200:	0800c1c5 	.word	0x0800c1c5
 800c204:	0800c1c5 	.word	0x0800c1c5
 800c208:	0800c34d 	.word	0x0800c34d
 800c20c:	0800c275 	.word	0x0800c275
 800c210:	0800c307 	.word	0x0800c307
 800c214:	0800c1c5 	.word	0x0800c1c5
 800c218:	0800c1c5 	.word	0x0800c1c5
 800c21c:	0800c36f 	.word	0x0800c36f
 800c220:	0800c1c5 	.word	0x0800c1c5
 800c224:	0800c275 	.word	0x0800c275
 800c228:	0800c1c5 	.word	0x0800c1c5
 800c22c:	0800c1c5 	.word	0x0800c1c5
 800c230:	0800c30f 	.word	0x0800c30f
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	1d1a      	adds	r2, r3, #4
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	602a      	str	r2, [r5, #0]
 800c23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c244:	2301      	movs	r3, #1
 800c246:	e09f      	b.n	800c388 <_printf_i+0x1ec>
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	0607      	lsls	r7, r0, #24
 800c24e:	f103 0104 	add.w	r1, r3, #4
 800c252:	6029      	str	r1, [r5, #0]
 800c254:	d501      	bpl.n	800c25a <_printf_i+0xbe>
 800c256:	681e      	ldr	r6, [r3, #0]
 800c258:	e003      	b.n	800c262 <_printf_i+0xc6>
 800c25a:	0646      	lsls	r6, r0, #25
 800c25c:	d5fb      	bpl.n	800c256 <_printf_i+0xba>
 800c25e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c262:	2e00      	cmp	r6, #0
 800c264:	da03      	bge.n	800c26e <_printf_i+0xd2>
 800c266:	232d      	movs	r3, #45	; 0x2d
 800c268:	4276      	negs	r6, r6
 800c26a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c26e:	485a      	ldr	r0, [pc, #360]	; (800c3d8 <_printf_i+0x23c>)
 800c270:	230a      	movs	r3, #10
 800c272:	e012      	b.n	800c29a <_printf_i+0xfe>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	1d19      	adds	r1, r3, #4
 800c27a:	6029      	str	r1, [r5, #0]
 800c27c:	0605      	lsls	r5, r0, #24
 800c27e:	d501      	bpl.n	800c284 <_printf_i+0xe8>
 800c280:	681e      	ldr	r6, [r3, #0]
 800c282:	e002      	b.n	800c28a <_printf_i+0xee>
 800c284:	0641      	lsls	r1, r0, #25
 800c286:	d5fb      	bpl.n	800c280 <_printf_i+0xe4>
 800c288:	881e      	ldrh	r6, [r3, #0]
 800c28a:	4853      	ldr	r0, [pc, #332]	; (800c3d8 <_printf_i+0x23c>)
 800c28c:	2f6f      	cmp	r7, #111	; 0x6f
 800c28e:	bf0c      	ite	eq
 800c290:	2308      	moveq	r3, #8
 800c292:	230a      	movne	r3, #10
 800c294:	2100      	movs	r1, #0
 800c296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c29a:	6865      	ldr	r5, [r4, #4]
 800c29c:	60a5      	str	r5, [r4, #8]
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	bfa2      	ittt	ge
 800c2a2:	6821      	ldrge	r1, [r4, #0]
 800c2a4:	f021 0104 	bicge.w	r1, r1, #4
 800c2a8:	6021      	strge	r1, [r4, #0]
 800c2aa:	b90e      	cbnz	r6, 800c2b0 <_printf_i+0x114>
 800c2ac:	2d00      	cmp	r5, #0
 800c2ae:	d04b      	beq.n	800c348 <_printf_i+0x1ac>
 800c2b0:	4615      	mov	r5, r2
 800c2b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2b6:	fb03 6711 	mls	r7, r3, r1, r6
 800c2ba:	5dc7      	ldrb	r7, [r0, r7]
 800c2bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2c0:	4637      	mov	r7, r6
 800c2c2:	42bb      	cmp	r3, r7
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	d9f4      	bls.n	800c2b2 <_printf_i+0x116>
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d10b      	bne.n	800c2e4 <_printf_i+0x148>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	07de      	lsls	r6, r3, #31
 800c2d0:	d508      	bpl.n	800c2e4 <_printf_i+0x148>
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6861      	ldr	r1, [r4, #4]
 800c2d6:	4299      	cmp	r1, r3
 800c2d8:	bfde      	ittt	le
 800c2da:	2330      	movle	r3, #48	; 0x30
 800c2dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2e4:	1b52      	subs	r2, r2, r5
 800c2e6:	6122      	str	r2, [r4, #16]
 800c2e8:	f8cd a000 	str.w	sl, [sp]
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	aa03      	add	r2, sp, #12
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7ff fee4 	bl	800c0c0 <_printf_common>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d14a      	bne.n	800c392 <_printf_i+0x1f6>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c300:	b004      	add	sp, #16
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	f043 0320 	orr.w	r3, r3, #32
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	4833      	ldr	r0, [pc, #204]	; (800c3dc <_printf_i+0x240>)
 800c310:	2778      	movs	r7, #120	; 0x78
 800c312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	6829      	ldr	r1, [r5, #0]
 800c31a:	061f      	lsls	r7, r3, #24
 800c31c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c320:	d402      	bmi.n	800c328 <_printf_i+0x18c>
 800c322:	065f      	lsls	r7, r3, #25
 800c324:	bf48      	it	mi
 800c326:	b2b6      	uxthmi	r6, r6
 800c328:	07df      	lsls	r7, r3, #31
 800c32a:	bf48      	it	mi
 800c32c:	f043 0320 	orrmi.w	r3, r3, #32
 800c330:	6029      	str	r1, [r5, #0]
 800c332:	bf48      	it	mi
 800c334:	6023      	strmi	r3, [r4, #0]
 800c336:	b91e      	cbnz	r6, 800c340 <_printf_i+0x1a4>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	f023 0320 	bic.w	r3, r3, #32
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	2310      	movs	r3, #16
 800c342:	e7a7      	b.n	800c294 <_printf_i+0xf8>
 800c344:	4824      	ldr	r0, [pc, #144]	; (800c3d8 <_printf_i+0x23c>)
 800c346:	e7e4      	b.n	800c312 <_printf_i+0x176>
 800c348:	4615      	mov	r5, r2
 800c34a:	e7bd      	b.n	800c2c8 <_printf_i+0x12c>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	6826      	ldr	r6, [r4, #0]
 800c350:	6961      	ldr	r1, [r4, #20]
 800c352:	1d18      	adds	r0, r3, #4
 800c354:	6028      	str	r0, [r5, #0]
 800c356:	0635      	lsls	r5, r6, #24
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	d501      	bpl.n	800c360 <_printf_i+0x1c4>
 800c35c:	6019      	str	r1, [r3, #0]
 800c35e:	e002      	b.n	800c366 <_printf_i+0x1ca>
 800c360:	0670      	lsls	r0, r6, #25
 800c362:	d5fb      	bpl.n	800c35c <_printf_i+0x1c0>
 800c364:	8019      	strh	r1, [r3, #0]
 800c366:	2300      	movs	r3, #0
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	4615      	mov	r5, r2
 800c36c:	e7bc      	b.n	800c2e8 <_printf_i+0x14c>
 800c36e:	682b      	ldr	r3, [r5, #0]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	602a      	str	r2, [r5, #0]
 800c374:	681d      	ldr	r5, [r3, #0]
 800c376:	6862      	ldr	r2, [r4, #4]
 800c378:	2100      	movs	r1, #0
 800c37a:	4628      	mov	r0, r5
 800c37c:	f7f3 ff28 	bl	80001d0 <memchr>
 800c380:	b108      	cbz	r0, 800c386 <_printf_i+0x1ea>
 800c382:	1b40      	subs	r0, r0, r5
 800c384:	6060      	str	r0, [r4, #4]
 800c386:	6863      	ldr	r3, [r4, #4]
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	2300      	movs	r3, #0
 800c38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c390:	e7aa      	b.n	800c2e8 <_printf_i+0x14c>
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	462a      	mov	r2, r5
 800c396:	4649      	mov	r1, r9
 800c398:	4640      	mov	r0, r8
 800c39a:	47d0      	blx	sl
 800c39c:	3001      	adds	r0, #1
 800c39e:	d0ad      	beq.n	800c2fc <_printf_i+0x160>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	079b      	lsls	r3, r3, #30
 800c3a4:	d413      	bmi.n	800c3ce <_printf_i+0x232>
 800c3a6:	68e0      	ldr	r0, [r4, #12]
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	4298      	cmp	r0, r3
 800c3ac:	bfb8      	it	lt
 800c3ae:	4618      	movlt	r0, r3
 800c3b0:	e7a6      	b.n	800c300 <_printf_i+0x164>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	4649      	mov	r1, r9
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	47d0      	blx	sl
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d09d      	beq.n	800c2fc <_printf_i+0x160>
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	68e3      	ldr	r3, [r4, #12]
 800c3c4:	9903      	ldr	r1, [sp, #12]
 800c3c6:	1a5b      	subs	r3, r3, r1
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	dcf2      	bgt.n	800c3b2 <_printf_i+0x216>
 800c3cc:	e7eb      	b.n	800c3a6 <_printf_i+0x20a>
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	f104 0619 	add.w	r6, r4, #25
 800c3d4:	e7f5      	b.n	800c3c2 <_printf_i+0x226>
 800c3d6:	bf00      	nop
 800c3d8:	0800cd5c 	.word	0x0800cd5c
 800c3dc:	0800cd6d 	.word	0x0800cd6d

0800c3e0 <__swbuf_r>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	460e      	mov	r6, r1
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	b118      	cbz	r0, 800c3f2 <__swbuf_r+0x12>
 800c3ea:	6a03      	ldr	r3, [r0, #32]
 800c3ec:	b90b      	cbnz	r3, 800c3f2 <__swbuf_r+0x12>
 800c3ee:	f7ff fab3 	bl	800b958 <__sinit>
 800c3f2:	69a3      	ldr	r3, [r4, #24]
 800c3f4:	60a3      	str	r3, [r4, #8]
 800c3f6:	89a3      	ldrh	r3, [r4, #12]
 800c3f8:	071a      	lsls	r2, r3, #28
 800c3fa:	d525      	bpl.n	800c448 <__swbuf_r+0x68>
 800c3fc:	6923      	ldr	r3, [r4, #16]
 800c3fe:	b31b      	cbz	r3, 800c448 <__swbuf_r+0x68>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	6922      	ldr	r2, [r4, #16]
 800c404:	1a98      	subs	r0, r3, r2
 800c406:	6963      	ldr	r3, [r4, #20]
 800c408:	b2f6      	uxtb	r6, r6
 800c40a:	4283      	cmp	r3, r0
 800c40c:	4637      	mov	r7, r6
 800c40e:	dc04      	bgt.n	800c41a <__swbuf_r+0x3a>
 800c410:	4621      	mov	r1, r4
 800c412:	4628      	mov	r0, r5
 800c414:	f7ff fc46 	bl	800bca4 <_fflush_r>
 800c418:	b9e0      	cbnz	r0, 800c454 <__swbuf_r+0x74>
 800c41a:	68a3      	ldr	r3, [r4, #8]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	60a3      	str	r3, [r4, #8]
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	701e      	strb	r6, [r3, #0]
 800c428:	6962      	ldr	r2, [r4, #20]
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d004      	beq.n	800c43a <__swbuf_r+0x5a>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d506      	bpl.n	800c444 <__swbuf_r+0x64>
 800c436:	2e0a      	cmp	r6, #10
 800c438:	d104      	bne.n	800c444 <__swbuf_r+0x64>
 800c43a:	4621      	mov	r1, r4
 800c43c:	4628      	mov	r0, r5
 800c43e:	f7ff fc31 	bl	800bca4 <_fflush_r>
 800c442:	b938      	cbnz	r0, 800c454 <__swbuf_r+0x74>
 800c444:	4638      	mov	r0, r7
 800c446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c448:	4621      	mov	r1, r4
 800c44a:	4628      	mov	r0, r5
 800c44c:	f000 f806 	bl	800c45c <__swsetup_r>
 800c450:	2800      	cmp	r0, #0
 800c452:	d0d5      	beq.n	800c400 <__swbuf_r+0x20>
 800c454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c458:	e7f4      	b.n	800c444 <__swbuf_r+0x64>
	...

0800c45c <__swsetup_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4b2a      	ldr	r3, [pc, #168]	; (800c508 <__swsetup_r+0xac>)
 800c460:	4605      	mov	r5, r0
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	460c      	mov	r4, r1
 800c466:	b118      	cbz	r0, 800c470 <__swsetup_r+0x14>
 800c468:	6a03      	ldr	r3, [r0, #32]
 800c46a:	b90b      	cbnz	r3, 800c470 <__swsetup_r+0x14>
 800c46c:	f7ff fa74 	bl	800b958 <__sinit>
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c476:	0718      	lsls	r0, r3, #28
 800c478:	d422      	bmi.n	800c4c0 <__swsetup_r+0x64>
 800c47a:	06d9      	lsls	r1, r3, #27
 800c47c:	d407      	bmi.n	800c48e <__swsetup_r+0x32>
 800c47e:	2309      	movs	r3, #9
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c486:	81a3      	strh	r3, [r4, #12]
 800c488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c48c:	e034      	b.n	800c4f8 <__swsetup_r+0x9c>
 800c48e:	0758      	lsls	r0, r3, #29
 800c490:	d512      	bpl.n	800c4b8 <__swsetup_r+0x5c>
 800c492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c494:	b141      	cbz	r1, 800c4a8 <__swsetup_r+0x4c>
 800c496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c49a:	4299      	cmp	r1, r3
 800c49c:	d002      	beq.n	800c4a4 <__swsetup_r+0x48>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f7ff fb2e 	bl	800bb00 <_free_r>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	6363      	str	r3, [r4, #52]	; 0x34
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4ae:	81a3      	strh	r3, [r4, #12]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	6063      	str	r3, [r4, #4]
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	f043 0308 	orr.w	r3, r3, #8
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	b94b      	cbnz	r3, 800c4d8 <__swsetup_r+0x7c>
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ce:	d003      	beq.n	800c4d8 <__swsetup_r+0x7c>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f000 f840 	bl	800c558 <__smakebuf_r>
 800c4d8:	89a0      	ldrh	r0, [r4, #12]
 800c4da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4de:	f010 0301 	ands.w	r3, r0, #1
 800c4e2:	d00a      	beq.n	800c4fa <__swsetup_r+0x9e>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60a3      	str	r3, [r4, #8]
 800c4e8:	6963      	ldr	r3, [r4, #20]
 800c4ea:	425b      	negs	r3, r3
 800c4ec:	61a3      	str	r3, [r4, #24]
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	b943      	cbnz	r3, 800c504 <__swsetup_r+0xa8>
 800c4f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4f6:	d1c4      	bne.n	800c482 <__swsetup_r+0x26>
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	0781      	lsls	r1, r0, #30
 800c4fc:	bf58      	it	pl
 800c4fe:	6963      	ldrpl	r3, [r4, #20]
 800c500:	60a3      	str	r3, [r4, #8]
 800c502:	e7f4      	b.n	800c4ee <__swsetup_r+0x92>
 800c504:	2000      	movs	r0, #0
 800c506:	e7f7      	b.n	800c4f8 <__swsetup_r+0x9c>
 800c508:	200002d0 	.word	0x200002d0

0800c50c <__swhatbuf_r>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	460c      	mov	r4, r1
 800c510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c514:	2900      	cmp	r1, #0
 800c516:	b096      	sub	sp, #88	; 0x58
 800c518:	4615      	mov	r5, r2
 800c51a:	461e      	mov	r6, r3
 800c51c:	da0d      	bge.n	800c53a <__swhatbuf_r+0x2e>
 800c51e:	89a3      	ldrh	r3, [r4, #12]
 800c520:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	bf0c      	ite	eq
 800c52a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c52e:	2340      	movne	r3, #64	; 0x40
 800c530:	2000      	movs	r0, #0
 800c532:	6031      	str	r1, [r6, #0]
 800c534:	602b      	str	r3, [r5, #0]
 800c536:	b016      	add	sp, #88	; 0x58
 800c538:	bd70      	pop	{r4, r5, r6, pc}
 800c53a:	466a      	mov	r2, sp
 800c53c:	f000 f848 	bl	800c5d0 <_fstat_r>
 800c540:	2800      	cmp	r0, #0
 800c542:	dbec      	blt.n	800c51e <__swhatbuf_r+0x12>
 800c544:	9901      	ldr	r1, [sp, #4]
 800c546:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c54a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c54e:	4259      	negs	r1, r3
 800c550:	4159      	adcs	r1, r3
 800c552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c556:	e7eb      	b.n	800c530 <__swhatbuf_r+0x24>

0800c558 <__smakebuf_r>:
 800c558:	898b      	ldrh	r3, [r1, #12]
 800c55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c55c:	079d      	lsls	r5, r3, #30
 800c55e:	4606      	mov	r6, r0
 800c560:	460c      	mov	r4, r1
 800c562:	d507      	bpl.n	800c574 <__smakebuf_r+0x1c>
 800c564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	2301      	movs	r3, #1
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	b002      	add	sp, #8
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	ab01      	add	r3, sp, #4
 800c576:	466a      	mov	r2, sp
 800c578:	f7ff ffc8 	bl	800c50c <__swhatbuf_r>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	4605      	mov	r5, r0
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff f865 	bl	800b650 <_malloc_r>
 800c586:	b948      	cbnz	r0, 800c59c <__smakebuf_r+0x44>
 800c588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58c:	059a      	lsls	r2, r3, #22
 800c58e:	d4ef      	bmi.n	800c570 <__smakebuf_r+0x18>
 800c590:	f023 0303 	bic.w	r3, r3, #3
 800c594:	f043 0302 	orr.w	r3, r3, #2
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	e7e3      	b.n	800c564 <__smakebuf_r+0xc>
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	6020      	str	r0, [r4, #0]
 800c5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	6163      	str	r3, [r4, #20]
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	6120      	str	r0, [r4, #16]
 800c5ae:	b15b      	cbz	r3, 800c5c8 <__smakebuf_r+0x70>
 800c5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f000 f81d 	bl	800c5f4 <_isatty_r>
 800c5ba:	b128      	cbz	r0, 800c5c8 <__smakebuf_r+0x70>
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	81a3      	strh	r3, [r4, #12]
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	431d      	orrs	r5, r3
 800c5cc:	81a5      	strh	r5, [r4, #12]
 800c5ce:	e7cf      	b.n	800c570 <__smakebuf_r+0x18>

0800c5d0 <_fstat_r>:
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4d07      	ldr	r5, [pc, #28]	; (800c5f0 <_fstat_r+0x20>)
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	4608      	mov	r0, r1
 800c5da:	4611      	mov	r1, r2
 800c5dc:	602b      	str	r3, [r5, #0]
 800c5de:	f7fe ff20 	bl	800b422 <_fstat>
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d102      	bne.n	800c5ec <_fstat_r+0x1c>
 800c5e6:	682b      	ldr	r3, [r5, #0]
 800c5e8:	b103      	cbz	r3, 800c5ec <_fstat_r+0x1c>
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	bd38      	pop	{r3, r4, r5, pc}
 800c5ee:	bf00      	nop
 800c5f0:	2000300c 	.word	0x2000300c

0800c5f4 <_isatty_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4d06      	ldr	r5, [pc, #24]	; (800c610 <_isatty_r+0x1c>)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	602b      	str	r3, [r5, #0]
 800c600:	f7fe ff1f 	bl	800b442 <_isatty>
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	d102      	bne.n	800c60e <_isatty_r+0x1a>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	b103      	cbz	r3, 800c60e <_isatty_r+0x1a>
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	2000300c 	.word	0x2000300c

0800c614 <_raise_r>:
 800c614:	291f      	cmp	r1, #31
 800c616:	b538      	push	{r3, r4, r5, lr}
 800c618:	4604      	mov	r4, r0
 800c61a:	460d      	mov	r5, r1
 800c61c:	d904      	bls.n	800c628 <_raise_r+0x14>
 800c61e:	2316      	movs	r3, #22
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c62a:	b112      	cbz	r2, 800c632 <_raise_r+0x1e>
 800c62c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c630:	b94b      	cbnz	r3, 800c646 <_raise_r+0x32>
 800c632:	4620      	mov	r0, r4
 800c634:	f000 f830 	bl	800c698 <_getpid_r>
 800c638:	462a      	mov	r2, r5
 800c63a:	4601      	mov	r1, r0
 800c63c:	4620      	mov	r0, r4
 800c63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c642:	f000 b817 	b.w	800c674 <_kill_r>
 800c646:	2b01      	cmp	r3, #1
 800c648:	d00a      	beq.n	800c660 <_raise_r+0x4c>
 800c64a:	1c59      	adds	r1, r3, #1
 800c64c:	d103      	bne.n	800c656 <_raise_r+0x42>
 800c64e:	2316      	movs	r3, #22
 800c650:	6003      	str	r3, [r0, #0]
 800c652:	2001      	movs	r0, #1
 800c654:	e7e7      	b.n	800c626 <_raise_r+0x12>
 800c656:	2400      	movs	r4, #0
 800c658:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c65c:	4628      	mov	r0, r5
 800c65e:	4798      	blx	r3
 800c660:	2000      	movs	r0, #0
 800c662:	e7e0      	b.n	800c626 <_raise_r+0x12>

0800c664 <raise>:
 800c664:	4b02      	ldr	r3, [pc, #8]	; (800c670 <raise+0xc>)
 800c666:	4601      	mov	r1, r0
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	f7ff bfd3 	b.w	800c614 <_raise_r>
 800c66e:	bf00      	nop
 800c670:	200002d0 	.word	0x200002d0

0800c674 <_kill_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d07      	ldr	r5, [pc, #28]	; (800c694 <_kill_r+0x20>)
 800c678:	2300      	movs	r3, #0
 800c67a:	4604      	mov	r4, r0
 800c67c:	4608      	mov	r0, r1
 800c67e:	4611      	mov	r1, r2
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	f7fe fe6f 	bl	800b364 <_kill>
 800c686:	1c43      	adds	r3, r0, #1
 800c688:	d102      	bne.n	800c690 <_kill_r+0x1c>
 800c68a:	682b      	ldr	r3, [r5, #0]
 800c68c:	b103      	cbz	r3, 800c690 <_kill_r+0x1c>
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	bd38      	pop	{r3, r4, r5, pc}
 800c692:	bf00      	nop
 800c694:	2000300c 	.word	0x2000300c

0800c698 <_getpid_r>:
 800c698:	f7fe be5c 	b.w	800b354 <_getpid>

0800c69c <_gettimeofday>:
 800c69c:	4b02      	ldr	r3, [pc, #8]	; (800c6a8 <_gettimeofday+0xc>)
 800c69e:	2258      	movs	r2, #88	; 0x58
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6a6:	4770      	bx	lr
 800c6a8:	2000300c 	.word	0x2000300c

0800c6ac <_init>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	bf00      	nop
 800c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b2:	bc08      	pop	{r3}
 800c6b4:	469e      	mov	lr, r3
 800c6b6:	4770      	bx	lr

0800c6b8 <_fini>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr
