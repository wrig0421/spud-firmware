
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b858  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800b9e8  0800b9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbec  0800bbec  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbec  0800bbec  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbec  0800bbec  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbec  0800bbec  0001bbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bbf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cec  200000d0  0800bcc4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003dbc  0800bcc4  00023dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e351  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cbd  00000000  00000000  0003e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd8  00000000  00000000  00043158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001606  00000000  00000000  00044d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029809  00000000  00000000  00046336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023476  00000000  00000000  0006fb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f82ef  00000000  00000000  00092fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eb0  00000000  00000000  0018b2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00193154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9d0 	.word	0x0800b9d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800b9d0 	.word	0x0800b9d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d503      	bpl.n	8000ad2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <current_monitor_set+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000ad0:	e003      	b.n	8000ada <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <current_monitor_set+0x40>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000ec 	.word	0x200000ec
 8000aec:	20000000 	.word	0x20000000

08000af0 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <current_monitor_ratio+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <current_monitor_init>:


void current_monitor_init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b10:	e009      	b.n	8000b26 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <current_monitor_init+0x64>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b74 <current_monitor_init+0x68>
 8000b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <current_monitor_init+0x64>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <current_monitor_init+0x64>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b78 <current_monitor_init+0x6c>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000b7c <current_monitor_init+0x70>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dce3      	bgt.n	8000b12 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <current_monitor_init+0x64>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d800      	bhi.n	8000b5c <current_monitor_init+0x50>
 8000b5a:	e7fe      	b.n	8000b5a <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <current_monitor_init+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <current_monitor_init+0x74>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	3d4ccccd 	.word	0x3d4ccccd
 8000b78:	3d23d70a 	.word	0x3d23d70a
 8000b7c:	44160000 	.word	0x44160000
 8000b80:	200000ec 	.word	0x200000ec

08000b84 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000b98:	f001 fd88 	bl	80026ac <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d11c      	bne.n	8000c02 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e015      	b.n	8000bfa <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fbc7 	bl	8002368 <ws2812_pixel_is_in_strip_range>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <animate_led_set_pixel+0x50>
 8000be0:	78bc      	ldrb	r4, [r7, #2]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	7bf8      	ldrb	r0, [r7, #15]
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	f001 fbd4 	bl	800239c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d9e6      	bls.n	8000bce <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000c00:	e020      	b.n	8000c44 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c02:	2301      	movs	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	e01a      	b.n	8000c3e <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d012      	beq.n	8000c38 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fba5 	bl	8002368 <ws2812_pixel_is_in_strip_range>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d009      	beq.n	8000c38 <animate_led_set_pixel+0x94>
 8000c24:	78bc      	ldrb	r4, [r7, #2]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	88b9      	ldrh	r1, [r7, #4]
 8000c2a:	7bb8      	ldrb	r0, [r7, #14]
 8000c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f001 fbb2 	bl	800239c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73bb      	strb	r3, [r7, #14]
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d9e1      	bls.n	8000c08 <animate_led_set_pixel+0x64>
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <animate_led_set_pixels_in_range>:

// TODO function to set pixels in range...

void animate_led_set_pixels_in_range(const strip_mask_t mask, const uint16_t pixel_start,
		const uint16_t pixel_stop, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	707b      	strb	r3, [r7, #1]
    if (STRIP_BIT_ALL_SET == mask)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d127      	bne.n	8000cc0 <animate_led_set_pixels_in_range+0x74>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e020      	b.n	8000cb8 <animate_led_set_pixels_in_range+0x6c>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
        	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	e016      	b.n	8000caa <animate_led_set_pixels_in_range+0x5e>
        	{
                if (ws2812_pixel_is_in_strip_range(strip_bit, iii)) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000c7c:	89ba      	ldrh	r2, [r7, #12]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fb70 	bl	8002368 <ws2812_pixel_is_in_strip_range>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00a      	beq.n	8000ca4 <animate_led_set_pixels_in_range+0x58>
 8000c8e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000c92:	787a      	ldrb	r2, [r7, #1]
 8000c94:	89b9      	ldrh	r1, [r7, #12]
 8000c96:	7bf8      	ldrb	r0, [r7, #15]
 8000c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	f001 fb7c 	bl	800239c <ws2812b_set_led>
        	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	81bb      	strh	r3, [r7, #12]
 8000caa:	89ba      	ldrh	r2, [r7, #12]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d9e4      	bls.n	8000c7c <animate_led_set_pixels_in_range+0x30>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d9db      	bls.n	8000c76 <animate_led_set_pixels_in_range+0x2a>
            	}
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000cbe:	e02b      	b.n	8000d18 <animate_led_set_pixels_in_range+0xcc>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	72fb      	strb	r3, [r7, #11]
 8000cc4:	e025      	b.n	8000d12 <animate_led_set_pixels_in_range+0xc6>
            if (mask & strip_bit)
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d01d      	beq.n	8000d0c <animate_led_set_pixels_in_range+0xc0>
            	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	813b      	strh	r3, [r7, #8]
 8000cd4:	e016      	b.n	8000d04 <animate_led_set_pixels_in_range+0xb8>
            		if (ws2812_pixel_is_in_strip_range(strip_bit, iii)) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000cd6:	893a      	ldrh	r2, [r7, #8]
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fb43 	bl	8002368 <ws2812_pixel_is_in_strip_range>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <animate_led_set_pixels_in_range+0xb2>
 8000ce8:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000cec:	787a      	ldrb	r2, [r7, #1]
 8000cee:	8939      	ldrh	r1, [r7, #8]
 8000cf0:	7af8      	ldrb	r0, [r7, #11]
 8000cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	f001 fb4f 	bl	800239c <ws2812b_set_led>
            	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000cfe:	893b      	ldrh	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	813b      	strh	r3, [r7, #8]
 8000d04:	893a      	ldrh	r2, [r7, #8]
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d9e4      	bls.n	8000cd6 <animate_led_set_pixels_in_range+0x8a>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	72fb      	strb	r3, [r7, #11]
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d9d6      	bls.n	8000cc6 <animate_led_set_pixels_in_range+0x7a>
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}

08000d20 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4604      	mov	r4, r0
 8000d28:	4608      	mov	r0, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4623      	mov	r3, r4
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	4603      	mov	r3, r0
 8000d34:	717b      	strb	r3, [r7, #5]
 8000d36:	460b      	mov	r3, r1
 8000d38:	713b      	strb	r3, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <animate_led_set_all_pixels+0xd0>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	88fa      	ldrh	r2, [r7, #6]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d122      	bne.n	8000d92 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	75fb      	strb	r3, [r7, #23]
 8000d50:	e01b      	b.n	8000d8a <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fa9f 	bl	8002298 <ws2812_get_strip_size>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	82bb      	strh	r3, [r7, #20]
 8000d62:	e00b      	b.n	8000d7c <animate_led_set_all_pixels+0x5c>
 8000d64:	793c      	ldrb	r4, [r7, #4]
 8000d66:	797a      	ldrb	r2, [r7, #5]
 8000d68:	8ab9      	ldrh	r1, [r7, #20]
 8000d6a:	7df8      	ldrb	r0, [r7, #23]
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4623      	mov	r3, r4
 8000d72:	f001 fb13 	bl	800239c <ws2812b_set_led>
 8000d76:	8abb      	ldrh	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	82bb      	strh	r3, [r7, #20]
 8000d7c:	8aba      	ldrh	r2, [r7, #20]
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3ef      	bcc.n	8000d64 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	3301      	adds	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d9e0      	bls.n	8000d52 <animate_led_set_all_pixels+0x32>
 8000d90:	e026      	b.n	8000de0 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d92:	2301      	movs	r3, #1
 8000d94:	74fb      	strb	r3, [r7, #19]
 8000d96:	e020      	b.n	8000dda <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d018      	beq.n	8000dd4 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fa77 	bl	8002298 <ws2812_get_strip_size>
 8000daa:	4603      	mov	r3, r0
 8000dac:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000dae:	2300      	movs	r3, #0
 8000db0:	823b      	strh	r3, [r7, #16]
 8000db2:	e00b      	b.n	8000dcc <animate_led_set_all_pixels+0xac>
 8000db4:	793c      	ldrb	r4, [r7, #4]
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	8a39      	ldrh	r1, [r7, #16]
 8000dba:	7cf8      	ldrb	r0, [r7, #19]
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	f001 faeb 	bl	800239c <ws2812b_set_led>
 8000dc6:	8a3b      	ldrh	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	823b      	strh	r3, [r7, #16]
 8000dcc:	8a3a      	ldrh	r2, [r7, #16]
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3ef      	bcc.n	8000db4 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000dd4:	7cfb      	ldrb	r3, [r7, #19]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	74fb      	strb	r3, [r7, #19]
 8000dda:	7cfb      	ldrb	r3, [r7, #19]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d9db      	bls.n	8000d98 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fece 	bl	8000b84 <animate_led_show_strip>
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	200007fe 	.word	0x200007fe

08000df4 <animate_led_custom_solid_custom_color>:
	}
}


void animate_led_custom_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid, const uint16_t led_start, const uint16_t led_stop)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	81fb      	strh	r3, [r7, #14]
 8000e04:	460b      	mov	r3, r1
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <animate_led_custom_solid_custom_color+0x58>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	82bb      	strh	r3, [r7, #20]
 8000e12:	2300      	movs	r3, #0
 8000e14:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f001 f9b5 	bl	800218c <color_led_hex_to_rgb>
    animate_led_set_pixels_in_range(mask_solid, led_start, led_stop, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000e22:	7d3d      	ldrb	r5, [r7, #20]
 8000e24:	7d7b      	ldrb	r3, [r7, #21]
 8000e26:	7dba      	ldrb	r2, [r7, #22]
 8000e28:	88fc      	ldrh	r4, [r7, #6]
 8000e2a:	89b9      	ldrh	r1, [r7, #12]
 8000e2c:	89f8      	ldrh	r0, [r7, #14]
 8000e2e:	9201      	str	r2, [sp, #4]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	462b      	mov	r3, r5
 8000e34:	4622      	mov	r2, r4
 8000e36:	f7ff ff09 	bl	8000c4c <animate_led_set_pixels_in_range>
            color_solid_rgb[offsetof(ws2812b_led_t, green)],
            color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fea1 	bl	8000b84 <animate_led_show_strip>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800b9e8 	.word	0x0800b9e8

08000e50 <animate_led_solid_custom_color>:


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <animate_led_solid_custom_color+0x40>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	81bb      	strh	r3, [r7, #12]
 8000e62:	2300      	movs	r3, #0
 8000e64:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f001 f98d 	bl	800218c <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000e72:	7b39      	ldrb	r1, [r7, #12]
 8000e74:	7b7a      	ldrb	r2, [r7, #13]
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	88f8      	ldrh	r0, [r7, #6]
 8000e7a:	f7ff ff51 	bl	8000d20 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe7f 	bl	8000b84 <animate_led_show_strip>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	0800b9e8 	.word	0x0800b9e8

08000e94 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff ff3e 	bl	8000d20 <animate_led_set_all_pixels>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <animate_led_custom_only_spell_word>:
}


void animate_led_custom_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms, const uint16_t led_start, const uint16_t led_stop)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	ed2d 8b02 	vpush	{d8}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	81fb      	strh	r3, [r7, #14]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	81bb      	strh	r3, [r7, #12]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <animate_led_custom_only_spell_word+0xb8>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	823b      	strh	r3, [r7, #16]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68b8      	ldr	r0, [r7, #8]
 8000ed6:	f001 f959 	bl	800218c <color_led_hex_to_rgb>
	for (int i = led_start; i <= led_stop; i++)
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e034      	b.n	8000f4a <animate_led_custom_only_spell_word+0xa2>
	{
        if (task_button_press_interrupt_occurred())
 8000ee0:	f001 fbea 	bl	80026b8 <task_button_press_interrupt_occurred>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00d      	beq.n	8000f06 <animate_led_custom_only_spell_word+0x5e>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	1c9a      	adds	r2, r3, #2
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	1c59      	adds	r1, r3, #1
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fc40 	bl	8002780 <task_button_press_check_interrupts>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d126      	bne.n	8000f54 <animate_led_custom_only_spell_word+0xac>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7c3a      	ldrb	r2, [r7, #16]
 8000f0c:	7c7c      	ldrb	r4, [r7, #17]
 8000f0e:	7cbb      	ldrb	r3, [r7, #18]
 8000f10:	89f8      	ldrh	r0, [r7, #14]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f7ff fe45 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe31 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000f2c:	f002 f8fa 	bl	8003124 <task_led_ctrl_speed>
 8000f30:	eeb0 7a40 	vmov.f32	s14, s0
 8000f34:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3c:	ee17 0a90 	vmov	r0, s15
 8000f40:	f001 ff8a 	bl	8002e58 <task_led_ctrl_delay>
	for (int i = led_start; i <= led_stop; i++)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	ddc6      	ble.n	8000ee0 <animate_led_custom_only_spell_word+0x38>
 8000f52:	e000      	b.n	8000f56 <animate_led_custom_only_spell_word+0xae>
                return;
 8000f54:	bf00      	nop
	}
}
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	ecbd 8b02 	vpop	{d8}
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	0800b9e8 	.word	0x0800b9e8

08000f64 <animate_led_only_spell_word>:


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	ed2d 8b02 	vpush	{d8}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
 8000f74:	4613      	mov	r3, r2
 8000f76:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f9d0 	bl	8002320 <ws2812_led_get_max_strip_size>
 8000f80:	4603      	mov	r3, r0
 8000f82:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <animate_led_only_spell_word+0xbc>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	81bb      	strh	r3, [r7, #12]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f001 f8f9 	bl	800218c <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e034      	b.n	800100a <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000fa0:	f001 fb8a 	bl	80026b8 <task_button_press_interrupt_occurred>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00d      	beq.n	8000fc6 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	1c9a      	adds	r2, r3, #2
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	1c59      	adds	r1, r3, #1
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fbe0 	bl	8002780 <task_button_press_check_interrupts>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d126      	bne.n	8001014 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	7b3a      	ldrb	r2, [r7, #12]
 8000fcc:	7b7c      	ldrb	r4, [r7, #13]
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	88f8      	ldrh	r0, [r7, #6]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	f7ff fde5 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdd1 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fec:	f002 f89a 	bl	8003124 <task_led_ctrl_speed>
 8000ff0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ff4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffc:	ee17 0a90 	vmov	r0, s15
 8001000:	f001 ff2a 	bl	8002e58 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	8a7b      	ldrh	r3, [r7, #18]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbc6      	blt.n	8000fa0 <animate_led_only_spell_word+0x3c>
 8001012:	e000      	b.n	8001016 <animate_led_only_spell_word+0xb2>
                return;
 8001014:	bf00      	nop
	}
}
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	ecbd 8b02 	vpop	{d8}
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	0800b9e8 	.word	0x0800b9e8

08001024 <animate_led_custom_fade_in_fade_out>:
    }
}


void animate_led_custom_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade, const uint16_t led_start, const uint16_t led_stop)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af02      	add	r7, sp, #8
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	4611      	mov	r1, r2
 800102e:	461a      	mov	r2, r3
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	460b      	mov	r3, r1
 8001036:	81bb      	strh	r3, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 800103c:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <animate_led_custom_fade_in_fade_out+0x2ac>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	823b      	strh	r3, [r7, #16]
 8001042:	2300      	movs	r3, #0
 8001044:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	68b8      	ldr	r0, [r7, #8]
 800104e:	f001 f89d 	bl	800218c <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	e094      	b.n	8001182 <animate_led_custom_fade_in_fade_out+0x15e>
    {
        if (task_button_press_interrupt_occurred())
 8001058:	f001 fb2e 	bl	80026b8 <task_button_press_interrupt_occurred>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00e      	beq.n	8001080 <animate_led_custom_fade_in_fade_out+0x5c>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	1c9a      	adds	r2, r3, #2
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fb84 	bl	8002780 <task_button_press_check_interrupts>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 8122 	bne.w	80012c4 <animate_led_custom_fade_in_fade_out+0x2a0>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001082:	f7ff fa47 	bl	8000514 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 800108c:	f7ff fbd6 	bl	800083c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	7c3b      	ldrb	r3, [r7, #16]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa3a 	bl	8000514 <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff fa9e 	bl	80005e8 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fcaa 	bl	8000a0c <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80010bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010be:	f7ff fa29 	bl	8000514 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 80010c8:	f7ff fbb8 	bl	800083c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	7c7b      	ldrb	r3, [r7, #17]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa1c 	bl	8000514 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff fa80 	bl	80005e8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fc8c 	bl	8000a0c <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80010f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fa:	f7ff fa0b 	bl	8000514 <__aeabi_i2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 8001104:	f7ff fb9a 	bl	800083c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4614      	mov	r4, r2
 800110e:	461d      	mov	r5, r3
 8001110:	7cbb      	ldrb	r3, [r7, #18]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f9fe 	bl	8000514 <__aeabi_i2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff fa62 	bl	80005e8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc6e 	bl	8000a0c <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	617b      	str	r3, [r7, #20]
        animate_led_set_pixels_in_range(mask_fade, led_start, led_stop, r, g, b);
 8001134:	edd7 7a07 	vldr	s15, [r7, #28]
 8001138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113c:	edc7 7a00 	vstr	s15, [r7]
 8001140:	783b      	ldrb	r3, [r7, #0]
 8001142:	b2dd      	uxtb	r5, r3
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114c:	edc7 7a00 	vstr	s15, [r7]
 8001150:	783b      	ldrb	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	edd7 7a05 	vldr	s15, [r7, #20]
 8001158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115c:	edc7 7a00 	vstr	s15, [r7]
 8001160:	783a      	ldrb	r2, [r7, #0]
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	88fc      	ldrh	r4, [r7, #6]
 8001166:	89b9      	ldrh	r1, [r7, #12]
 8001168:	89f8      	ldrh	r0, [r7, #14]
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	462b      	mov	r3, r5
 8001170:	4622      	mov	r2, r4
 8001172:	f7ff fd6b 	bl	8000c4c <animate_led_set_pixels_in_range>
        animate_led_show_strip(STRIP_BIT_1);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fd04 	bl	8000b84 <animate_led_show_strip>
    for (int iii = 0; iii < 256; iii++)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3301      	adds	r3, #1
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	f77f af67 	ble.w	8001058 <animate_led_custom_fade_in_fade_out+0x34>
        //animate_led_set_all_pixels(mask_fade, r, g, b);
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e094      	b.n	80012ba <animate_led_custom_fade_in_fade_out+0x296>
    {
        if (task_button_press_interrupt_occurred())
 8001190:	f001 fa92 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00e      	beq.n	80011b8 <animate_led_custom_fade_in_fade_out+0x194>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	1c9a      	adds	r2, r3, #2
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	1c59      	adds	r1, r3, #1
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fae8 	bl	8002780 <task_button_press_check_interrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8088 	bne.w	80012c8 <animate_led_custom_fade_in_fade_out+0x2a4>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f7ff f9ab 	bl	8000514 <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 80011c4:	f7ff fb3a 	bl	800083c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	7c3b      	ldrb	r3, [r7, #16]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f99e 	bl	8000514 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fa02 	bl	80005e8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc0e 	bl	8000a0c <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff f98d 	bl	8000514 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 8001200:	f7ff fb1c 	bl	800083c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	461d      	mov	r5, r3
 800120c:	7c7b      	ldrb	r3, [r7, #17]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f980 	bl	8000514 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f9e4 	bl	80005e8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fbf0 	bl	8000a0c <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f7ff f96f 	bl	8000514 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 800123c:	f7ff fafe 	bl	800083c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	7cbb      	ldrb	r3, [r7, #18]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f962 	bl	8000514 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9c6 	bl	80005e8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fbd2 	bl	8000a0c <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	617b      	str	r3, [r7, #20]
        animate_led_set_pixels_in_range(mask_fade, led_start, led_stop, r, g, b);
 800126c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001274:	edc7 7a00 	vstr	s15, [r7]
 8001278:	783b      	ldrb	r3, [r7, #0]
 800127a:	b2dd      	uxtb	r5, r3
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	edc7 7a00 	vstr	s15, [r7]
 8001288:	783b      	ldrb	r3, [r7, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001294:	edc7 7a00 	vstr	s15, [r7]
 8001298:	783a      	ldrb	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	88fc      	ldrh	r4, [r7, #6]
 800129e:	89b9      	ldrh	r1, [r7, #12]
 80012a0:	89f8      	ldrh	r0, [r7, #14]
 80012a2:	9201      	str	r2, [sp, #4]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	462b      	mov	r3, r5
 80012a8:	4622      	mov	r2, r4
 80012aa:	f7ff fccf 	bl	8000c4c <animate_led_set_pixels_in_range>
        animate_led_show_strip(STRIP_BIT_1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fc68 	bl	8000b84 <animate_led_show_strip>
    for (int iii = 255; iii >= 0; iii = iii-2)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3b02      	subs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f6bf af67 	bge.w	8001190 <animate_led_custom_fade_in_fade_out+0x16c>
 80012c2:	e002      	b.n	80012ca <animate_led_custom_fade_in_fade_out+0x2a6>
                return;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <animate_led_custom_fade_in_fade_out+0x2a6>
                return;
 80012c8:	bf00      	nop
    }
}
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	0800b9e8 	.word	0x0800b9e8
 80012d4:	40700000 	.word	0x40700000

080012d8 <animate_led_fade_in_fade_out>:



void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 80012e4:	4b9b      	ldr	r3, [pc, #620]	; (8001554 <animate_led_fade_in_fade_out+0x27c>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	823b      	strh	r3, [r7, #16]
 80012ea:	2300      	movs	r3, #0
 80012ec:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f000 ff49 	bl	800218c <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	e08b      	b.n	8001418 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8001300:	f001 f9da 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	1c9a      	adds	r2, r3, #2
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	1c59      	adds	r1, r3, #1
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fa30 	bl	8002780 <task_button_press_check_interrupts>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 810f 	bne.w	8001546 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800132a:	f7ff f8f3 	bl	8000514 <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001334:	f7ff fa82 	bl	800083c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4614      	mov	r4, r2
 800133e:	461d      	mov	r5, r3
 8001340:	7c3b      	ldrb	r3, [r7, #16]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8e6 	bl	8000514 <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f94a 	bl	80005e8 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb56 	bl	8000a0c <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001366:	f7ff f8d5 	bl	8000514 <__aeabi_i2d>
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001370:	f7ff fa64 	bl	800083c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	7c7b      	ldrb	r3, [r7, #17]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8c8 	bl	8000514 <__aeabi_i2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff f92c 	bl	80005e8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb38 	bl	8000a0c <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80013a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a2:	f7ff f8b7 	bl	8000514 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 80013ac:	f7ff fa46 	bl	800083c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4614      	mov	r4, r2
 80013b6:	461d      	mov	r5, r3
 80013b8:	7cbb      	ldrb	r3, [r7, #18]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8aa 	bl	8000514 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7ff f90e 	bl	80005e8 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fb1a 	bl	8000a0c <__aeabi_d2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80013dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	b2d9      	uxtb	r1, r3
 80013ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013f8:	793b      	ldrb	r3, [r7, #4]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001404:	edc7 7a01 	vstr	s15, [r7, #4]
 8001408:	793b      	ldrb	r3, [r7, #4]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	89f8      	ldrh	r0, [r7, #14]
 800140e:	f7ff fc87 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	f77f af70 	ble.w	8001300 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	e08a      	b.n	800153c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001426:	f001 f947 	bl	80026b8 <task_button_press_interrupt_occurred>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	1c9a      	adds	r2, r3, #2
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f001 f99d 	bl	8002780 <task_button_press_check_interrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d17e      	bne.n	800154a <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 800144c:	6a38      	ldr	r0, [r7, #32]
 800144e:	f7ff f861 	bl	8000514 <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001458:	f7ff f9f0 	bl	800083c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	7c3b      	ldrb	r3, [r7, #16]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f854 	bl	8000514 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7ff f8b8 	bl	80005e8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fac4 	bl	8000a0c <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f7ff f843 	bl	8000514 <__aeabi_i2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001494:	f7ff f9d2 	bl	800083c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	7c7b      	ldrb	r3, [r7, #17]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f836 	bl	8000514 <__aeabi_i2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7ff f89a 	bl	80005e8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff faa6 	bl	8000a0c <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80014c4:	6a38      	ldr	r0, [r7, #32]
 80014c6:	f7ff f825 	bl	8000514 <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 80014d0:	f7ff f9b4 	bl	800083c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	7cbb      	ldrb	r3, [r7, #18]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f818 	bl	8000514 <__aeabi_i2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff f87c 	bl	80005e8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fa88 	bl	8000a0c <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001500:	edd7 7a07 	vldr	s15, [r7, #28]
 8001504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001508:	edc7 7a01 	vstr	s15, [r7, #4]
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	b2d9      	uxtb	r1, r3
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001518:	edc7 7a01 	vstr	s15, [r7, #4]
 800151c:	793b      	ldrb	r3, [r7, #4]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	edd7 7a05 	vldr	s15, [r7, #20]
 8001524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001528:	edc7 7a01 	vstr	s15, [r7, #4]
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	89f8      	ldrh	r0, [r7, #14]
 8001532:	f7ff fbf5 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	3b02      	subs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f6bf af71 	bge.w	8001426 <animate_led_fade_in_fade_out+0x14e>
 8001544:	e002      	b.n	800154c <animate_led_fade_in_fade_out+0x274>
                return;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <animate_led_fade_in_fade_out+0x274>
                return;
 800154a:	bf00      	nop
    }
}
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	0800b9e8 	.word	0x0800b9e8
 8001558:	40700000 	.word	0x40700000

0800155c <animate_led_custom_twinkle>:
}


void animate_led_custom_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one, const uint16_t led_start, const uint16_t led_stop)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	ed2d 8b02 	vpush	{d8}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af02      	add	r7, sp, #8
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	81fb      	strh	r3, [r7, #14]
 8001570:	460b      	mov	r3, r1
 8001572:	81bb      	strh	r3, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <animate_led_custom_twinkle+0xd8>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	2300      	movs	r3, #0
 8001580:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 fdff 	bl	800218c <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e044      	b.n	800161e <animate_led_custom_twinkle+0xc2>
    {
        if (task_button_press_interrupt_occurred())
 8001594:	f001 f890 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <animate_led_custom_twinkle+0x5e>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	1c9a      	adds	r2, r3, #2
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	1c59      	adds	r1, r3, #1
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f8e6 	bl	8002780 <task_button_press_check_interrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d136      	bne.n	8001628 <animate_led_custom_twinkle+0xcc>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(led_start, led_stop),
 80015ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f009 f96d 	bl	800a8a0 <random_num>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b299      	uxth	r1, r3
 80015ca:	7c3a      	ldrb	r2, [r7, #16]
 80015cc:	7c7c      	ldrb	r4, [r7, #17]
 80015ce:	7cbb      	ldrb	r3, [r7, #18]
 80015d0:	89f8      	ldrh	r0, [r7, #14]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7ff fae5 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fad1 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80015ec:	f001 fd9a 	bl	8003124 <task_led_ctrl_speed>
 80015f0:	eeb0 7a40 	vmov.f32	s14, s0
 80015f4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f001 fc2a 	bl	8002e58 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 8001604:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <animate_led_custom_twinkle+0xbc>
 800160c:	89f8      	ldrh	r0, [r7, #14]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	f7ff fb84 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	89bb      	ldrh	r3, [r7, #12]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbb6      	blt.n	8001594 <animate_led_custom_twinkle+0x38>
 8001626:	e000      	b.n	800162a <animate_led_custom_twinkle+0xce>
                return;
 8001628:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	ecbd 8b02 	vpop	{d8}
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	0800b9e8 	.word	0x0800b9e8

08001638 <animate_led_twinkle>:



void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	ed2d 8b02 	vpush	{d8}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af02      	add	r7, sp, #8
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4603      	mov	r3, r0
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	460b      	mov	r3, r1
 800164e:	81bb      	strh	r3, [r7, #12]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fe62 	bl	8002320 <ws2812_led_get_max_strip_size>
 800165c:	4603      	mov	r3, r0
 800165e:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <animate_led_twinkle+0xe4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 fd8b 	bl	800218c <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e043      	b.n	8001704 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 800167c:	f001 f81c 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00d      	beq.n	80016a2 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	1c9a      	adds	r2, r3, #2
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4618      	mov	r0, r3
 8001698:	f001 f872 	bl	8002780 <task_button_press_check_interrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d135      	bne.n	800170e <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 80016a2:	8b7b      	ldrh	r3, [r7, #26]
 80016a4:	4619      	mov	r1, r3
 80016a6:	2000      	movs	r0, #0
 80016a8:	f009 f8fa 	bl	800a8a0 <random_num>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b299      	uxth	r1, r3
 80016b0:	7d3a      	ldrb	r2, [r7, #20]
 80016b2:	7d7c      	ldrb	r4, [r7, #21]
 80016b4:	7dbb      	ldrb	r3, [r7, #22]
 80016b6:	89f8      	ldrh	r0, [r7, #14]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff fa72 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa5e 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016d2:	f001 fd27 	bl	8003124 <task_led_ctrl_speed>
 80016d6:	eeb0 7a40 	vmov.f32	s14, s0
 80016da:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 0a90 	vmov	r0, s15
 80016e6:	f001 fbb7 	bl	8002e58 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 80016ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <animate_led_twinkle+0xc6>
 80016f2:	89f8      	ldrh	r0, [r7, #14]
 80016f4:	2300      	movs	r3, #0
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	f7ff fb11 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbb7      	blt.n	800167c <animate_led_twinkle+0x44>
 800170c:	e000      	b.n	8001710 <animate_led_twinkle+0xd8>
                return;
 800170e:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	ecbd 8b02 	vpop	{d8}
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop
 800171c:	0800b9e8 	.word	0x0800b9e8

08001720 <animate_led_custom_sparkle_only_random_color>:
}


void animate_led_custom_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	ed2d 8b02 	vpush	{d8}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	717b      	strb	r3, [r7, #5]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
	float percent_to_fill = 0.7;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <animate_led_custom_sparkle_only_random_color+0x11c>)
 8001744:	613b      	str	r3, [r7, #16]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)(led_stop - led_start)); iii++)
 8001746:	2300      	movs	r3, #0
 8001748:	82fb      	strh	r3, [r7, #22]
 800174a:	e05a      	b.n	8001802 <animate_led_custom_sparkle_only_random_color+0xe2>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800174c:	f000 ffb4 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <animate_led_custom_sparkle_only_random_color+0x4e>
 8001756:	f107 0209 	add.w	r2, r7, #9
 800175a:	f107 010a 	add.w	r1, r7, #10
 800175e:	f107 030b 	add.w	r3, r7, #11
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f80c 	bl	8002780 <task_button_press_check_interrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d15f      	bne.n	800182e <animate_led_custom_sparkle_only_random_color+0x10e>
		int pix = random_num(led_start, led_stop);
 800176e:	883b      	ldrh	r3, [r7, #0]
 8001770:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f009 f893 	bl	800a8a0 <random_num>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	b29c      	uxth	r4, r3
 8001782:	21ff      	movs	r1, #255	; 0xff
 8001784:	2000      	movs	r0, #0
 8001786:	f009 f88b 	bl	800a8a0 <random_num>
 800178a:	4603      	mov	r3, r0
 800178c:	b2dd      	uxtb	r5, r3
 800178e:	21ff      	movs	r1, #255	; 0xff
 8001790:	2000      	movs	r0, #0
 8001792:	f009 f885 	bl	800a8a0 <random_num>
 8001796:	4603      	mov	r3, r0
 8001798:	b2de      	uxtb	r6, r3
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	2000      	movs	r0, #0
 800179e:	f009 f87f 	bl	800a8a0 <random_num>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	88f8      	ldrh	r0, [r7, #6]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4633      	mov	r3, r6
 80017ac:	462a      	mov	r2, r5
 80017ae:	4621      	mov	r1, r4
 80017b0:	f7ff f9f8 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f9e4 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017c6:	f001 fcad 	bl	8003124 <task_led_ctrl_speed>
 80017ca:	eeb0 7a40 	vmov.f32	s14, s0
 80017ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 0a90 	vmov	r0, s15
 80017da:	f001 fb3d 	bl	8002e58 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 80017de:	797b      	ldrb	r3, [r7, #5]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <animate_led_custom_sparkle_only_random_color+0xdc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b299      	uxth	r1, r3
 80017ee:	88f8      	ldrh	r0, [r7, #6]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	f7ff f9d4 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)(led_stop - led_start)); iii++)
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	3301      	adds	r3, #1
 8001800:	82fb      	strh	r3, [r7, #22]
 8001802:	8afb      	ldrh	r3, [r7, #22]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800180e:	883b      	ldrh	r3, [r7, #0]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181a:	edd7 7a04 	vldr	s15, [r7, #16]
 800181e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d48f      	bmi.n	800174c <animate_led_custom_sparkle_only_random_color+0x2c>
 800182c:	e000      	b.n	8001830 <animate_led_custom_sparkle_only_random_color+0x110>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800182e:	bf00      	nop
	}
}
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	ecbd 8b02 	vpop	{d8}
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183a:	bf00      	nop
 800183c:	3f333333 	.word	0x3f333333

08001840 <animate_led_sparkle_only_random_color>:

void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	717b      	strb	r3, [r7, #5]
 8001852:	4613      	mov	r3, r2
 8001854:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <animate_led_sparkle_only_random_color+0x120>)
 8001858:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fd5f 	bl	8002320 <ws2812_led_get_max_strip_size>
 8001862:	4603      	mov	r3, r0
 8001864:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fd37 	bl	80022dc <ws2812_get_num_active_animation_leds>
 800186e:	4603      	mov	r3, r0
 8001870:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001872:	2300      	movs	r3, #0
 8001874:	83fb      	strh	r3, [r7, #30]
 8001876:	e059      	b.n	800192c <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001878:	f000 ff1e 	bl	80026b8 <task_button_press_interrupt_occurred>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <animate_led_sparkle_only_random_color+0x5a>
 8001882:	f107 020d 	add.w	r2, r7, #13
 8001886:	f107 010e 	add.w	r1, r7, #14
 800188a:	f107 030f 	add.w	r3, r7, #15
 800188e:	4618      	mov	r0, r3
 8001890:	f000 ff76 	bl	8002780 <task_button_press_check_interrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d15c      	bne.n	8001954 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 800189a:	8afb      	ldrh	r3, [r7, #22]
 800189c:	4619      	mov	r1, r3
 800189e:	2000      	movs	r0, #0
 80018a0:	f008 fffe 	bl	800a8a0 <random_num>
 80018a4:	4603      	mov	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	21ff      	movs	r1, #255	; 0xff
 80018ae:	2000      	movs	r0, #0
 80018b0:	f008 fff6 	bl	800a8a0 <random_num>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2dd      	uxtb	r5, r3
 80018b8:	21ff      	movs	r1, #255	; 0xff
 80018ba:	2000      	movs	r0, #0
 80018bc:	f008 fff0 	bl	800a8a0 <random_num>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b2de      	uxtb	r6, r3
 80018c4:	21ff      	movs	r1, #255	; 0xff
 80018c6:	2000      	movs	r0, #0
 80018c8:	f008 ffea 	bl	800a8a0 <random_num>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	88f8      	ldrh	r0, [r7, #6]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4633      	mov	r3, r6
 80018d6:	462a      	mov	r2, r5
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f963 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f94f 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80018f0:	f001 fc18 	bl	8003124 <task_led_ctrl_speed>
 80018f4:	eeb0 7a40 	vmov.f32	s14, s0
 80018f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f001 faa8 	bl	8002e58 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <animate_led_sparkle_only_random_color+0xe6>
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	b299      	uxth	r1, r3
 8001918:	88f8      	ldrh	r0, [r7, #6]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	f7ff f93f 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001926:	8bfb      	ldrh	r3, [r7, #30]
 8001928:	3301      	adds	r3, #1
 800192a:	83fb      	strh	r3, [r7, #30]
 800192c:	8bfb      	ldrh	r3, [r7, #30]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	8abb      	ldrh	r3, [r7, #20]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001940:	edd7 7a06 	vldr	s15, [r7, #24]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	d492      	bmi.n	8001878 <animate_led_sparkle_only_random_color+0x38>
 8001952:	e000      	b.n	8001956 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001954:	bf00      	nop
	}
}
 8001956:	3724      	adds	r7, #36	; 0x24
 8001958:	46bd      	mov	sp, r7
 800195a:	ecbd 8b02 	vpop	{d8}
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001960:	3f333333 	.word	0x3f333333

08001964 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	ed2d 8b02 	vpush	{d8}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fcd0 	bl	8002320 <ws2812_led_get_max_strip_size>
 8001980:	4603      	mov	r3, r0
 8001982:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001984:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001988:	82bb      	strh	r3, [r7, #20]
 800198a:	e06c      	b.n	8001a66 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800198c:	f000 fe94 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <animate_led_rainbow_cycle+0x4a>
 8001996:	f107 0209 	add.w	r2, r7, #9
 800199a:	f107 010a 	add.w	r1, r7, #10
 800199e:	f107 030b 	add.w	r3, r7, #11
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 feec 	bl	8002780 <task_button_press_check_interrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d15f      	bne.n	8001a6e <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	e02f      	b.n	8001a14 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019b4:	f000 fe80 	bl	80026b8 <task_button_press_interrupt_occurred>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <animate_led_rainbow_cycle+0x72>
 80019be:	f107 0209 	add.w	r2, r7, #9
 80019c2:	f107 010a 	add.w	r1, r7, #10
 80019c6:	f107 030b 	add.w	r3, r7, #11
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fed8 	bl	8002780 <task_button_press_check_interrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d14d      	bne.n	8001a72 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 80019d6:	8afb      	ldrh	r3, [r7, #22]
 80019d8:	021a      	lsls	r2, r3, #8
 80019da:	8a7b      	ldrh	r3, [r7, #18]
 80019dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8abb      	ldrh	r3, [r7, #20]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f8d8 	bl	8001ba0 <animate_led_wheel>
 80019f0:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	781c      	ldrb	r4, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3302      	adds	r3, #2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	8af9      	ldrh	r1, [r7, #22]
 8001a04:	88f8      	ldrh	r0, [r7, #6]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4623      	mov	r3, r4
 8001a0a:	f7ff f8cb 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001a0e:	8afb      	ldrh	r3, [r7, #22]
 8001a10:	3301      	adds	r3, #1
 8001a12:	82fb      	strh	r3, [r7, #22]
 8001a14:	8afa      	ldrh	r2, [r7, #22]
 8001a16:	8a7b      	ldrh	r3, [r7, #18]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3cb      	bcc.n	80019b4 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f8b0 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001a24:	f001 fb7e 	bl	8003124 <task_led_ctrl_speed>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d103      	bne.n	8001a3e <animate_led_rainbow_cycle+0xda>
 8001a36:	2000      	movs	r0, #0
 8001a38:	f001 fa0e 	bl	8002e58 <task_led_ctrl_delay>
 8001a3c:	e010      	b.n	8001a60 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001a48:	f001 fb6c 	bl	8003124 <task_led_ctrl_speed>
 8001a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a50:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f001 f9fc 	bl	8002e58 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001a60:	8abb      	ldrh	r3, [r7, #20]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	82bb      	strh	r3, [r7, #20]
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d18f      	bne.n	800198c <animate_led_rainbow_cycle+0x28>
 8001a6c:	e002      	b.n	8001a74 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a72:	bf00      	nop
    }
}
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	ecbd 8b02 	vpop	{d8}
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <animate_led_custom_rainbow_cycle>:


void animate_led_custom_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	ed2d 8b02 	vpush	{d8}
 8001a84:	b089      	sub	sp, #36	; 0x24
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	4604      	mov	r4, r0
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4623      	mov	r3, r4
 8001a92:	80fb      	strh	r3, [r7, #6]
 8001a94:	4603      	mov	r3, r0
 8001a96:	80bb      	strh	r3, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	803b      	strh	r3, [r7, #0]
	uint8_t dummy_red, dummy_green, dummy_blue;
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	82bb      	strh	r3, [r7, #20]
 8001aa4:	e06e      	b.n	8001b84 <animate_led_custom_rainbow_cycle+0x106>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001aa6:	f000 fe07 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <animate_led_custom_rainbow_cycle+0x4a>
 8001ab0:	f107 020d 	add.w	r2, r7, #13
 8001ab4:	f107 010e 	add.w	r1, r7, #14
 8001ab8:	f107 030f 	add.w	r3, r7, #15
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fe5f 	bl	8002780 <task_button_press_check_interrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d162      	bne.n	8001b8e <animate_led_custom_rainbow_cycle+0x110>
        for (iii = led_start; iii <= led_stop; iii++)
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	82fb      	strh	r3, [r7, #22]
 8001acc:	e031      	b.n	8001b32 <animate_led_custom_rainbow_cycle+0xb4>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001ace:	f000 fdf3 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <animate_led_custom_rainbow_cycle+0x72>
 8001ad8:	f107 020d 	add.w	r2, r7, #13
 8001adc:	f107 010e 	add.w	r1, r7, #14
 8001ae0:	f107 030f 	add.w	r3, r7, #15
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fe4b 	bl	8002780 <task_button_press_check_interrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d150      	bne.n	8001b92 <animate_led_custom_rainbow_cycle+0x114>
            c = animate_led_wheel(((iii * 256 / (led_start - led_stop)) + jjj) & 255);
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	021a      	lsls	r2, r3, #8
 8001af4:	8879      	ldrh	r1, [r7, #2]
 8001af6:	883b      	ldrh	r3, [r7, #0]
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	8abb      	ldrh	r3, [r7, #20]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f849 	bl	8001ba0 <animate_led_wheel>
 8001b0e:	6138      	str	r0, [r7, #16]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3301      	adds	r3, #1
 8001b18:	781c      	ldrb	r4, [r3, #0]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	8af9      	ldrh	r1, [r7, #22]
 8001b22:	88f8      	ldrh	r0, [r7, #6]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4623      	mov	r3, r4
 8001b28:	f7ff f83c 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = led_start; iii <= led_stop; iii++)
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	82fb      	strh	r3, [r7, #22]
 8001b32:	8afa      	ldrh	r2, [r7, #22]
 8001b34:	883b      	ldrh	r3, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d9c9      	bls.n	8001ace <animate_led_custom_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f821 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001b42:	f001 faef 	bl	8003124 <task_led_ctrl_speed>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d103      	bne.n	8001b5c <animate_led_custom_rainbow_cycle+0xde>
 8001b54:	2000      	movs	r0, #0
 8001b56:	f001 f97f 	bl	8002e58 <task_led_ctrl_delay>
 8001b5a:	e010      	b.n	8001b7e <animate_led_custom_rainbow_cycle+0x100>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001b66:	f001 fadd 	bl	8003124 <task_led_ctrl_speed>
 8001b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b6e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f001 f96d 	bl	8002e58 <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001b7e:	8abb      	ldrh	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	82bb      	strh	r3, [r7, #20]
 8001b84:	8abb      	ldrh	r3, [r7, #20]
 8001b86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b8a:	d38c      	bcc.n	8001aa6 <animate_led_custom_rainbow_cycle+0x28>
 8001b8c:	e002      	b.n	8001b94 <animate_led_custom_rainbow_cycle+0x116>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <animate_led_custom_rainbow_cycle+0x116>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001b92:	bf00      	nop
    }
}
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	ecbd 8b02 	vpop	{d8}
 8001b9c:	bd90      	pop	{r4, r7, pc}
	...

08001ba0 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b54      	cmp	r3, #84	; 0x54
 8001bae:	d813      	bhi.n	8001bd8 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bbc:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bce:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	709a      	strb	r2, [r3, #2]
 8001bd6:	e02f      	b.n	8001c38 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2ba9      	cmp	r3, #169	; 0xa9
 8001bdc:	d816      	bhi.n	8001c0c <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b55      	subs	r3, #85	; 0x55
 8001be2:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	461a      	mov	r2, r3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bf4:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	0052      	lsls	r2, r2, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c08:	709a      	strb	r2, [r3, #2]
 8001c0a:	e015      	b.n	8001c38 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3356      	adds	r3, #86	; 0x56
 8001c10:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c24:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c36:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <animate_led_wheel+0xa8>)
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200000f0 	.word	0x200000f0

08001c4c <animate_led_custom_theater_chase>:
}


void animate_led_custom_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	ed2d 8b02 	vpush	{d8}
 8001c52:	b08d      	sub	sp, #52	; 0x34
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	460b      	mov	r3, r1
 8001c62:	81bb      	strh	r3, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	80fb      	strh	r3, [r7, #6]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <animate_led_custom_theater_chase+0x140>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	82bb      	strh	r3, [r7, #20]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f000 fa87 	bl	800218c <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e077      	b.n	8001d74 <animate_led_custom_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	e06e      	b.n	8001d68 <animate_led_custom_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001c8a:	f000 fd15 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <animate_led_custom_theater_chase+0x64>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	1c9a      	adds	r2, r3, #2
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd6b 	bl	8002780 <task_button_press_check_interrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d165      	bne.n	8001d7c <animate_led_custom_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = led_start; iii < led_stop; iii += 3)
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	e010      	b.n	8001cd8 <animate_led_custom_theater_chase+0x8c>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	7d3a      	ldrb	r2, [r7, #20]
 8001cc4:	7d7c      	ldrb	r4, [r7, #21]
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	89f8      	ldrh	r0, [r7, #14]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4623      	mov	r3, r4
 8001cce:	f7fe ff69 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = led_start; iii < led_stop; iii += 3)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbe9      	blt.n	8001cb6 <animate_led_custom_theater_chase+0x6a>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff4d 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001cea:	f000 fce5 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <animate_led_custom_theater_chase+0xc4>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fd3b 	bl	8002780 <task_button_press_check_interrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d137      	bne.n	8001d80 <animate_led_custom_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001d1a:	f001 fa03 	bl	8003124 <task_led_ctrl_speed>
 8001d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d22:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2a:	ee17 0a90 	vmov	r0, s15
 8001d2e:	f001 f893 	bl	8002e58 <task_led_ctrl_delay>
            for (int iii = led_start; iii < led_stop; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e00f      	b.n	8001d58 <animate_led_custom_theater_chase+0x10c>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b299      	uxth	r1, r3
 8001d44:	89f8      	ldrh	r0, [r7, #14]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f7fe ff29 	bl	8000ba4 <animate_led_set_pixel>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3303      	adds	r3, #3
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbea      	blt.n	8001d38 <animate_led_custom_theater_chase+0xec>
        for (int qqq = 0; qqq < 3; qqq++)
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	3301      	adds	r3, #1
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	dd8d      	ble.n	8001c8a <animate_led_custom_theater_chase+0x3e>
    for (int jjj = 0; jjj < 10; jjj++)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	dd84      	ble.n	8001c84 <animate_led_custom_theater_chase+0x38>
 8001d7a:	e002      	b.n	8001d82 <animate_led_custom_theater_chase+0x136>
                    return;
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <animate_led_custom_theater_chase+0x136>
                    return;
 8001d80:	bf00      	nop
        }
    }
}
 8001d82:	372c      	adds	r7, #44	; 0x2c
 8001d84:	46bd      	mov	sp, r7
 8001d86:	ecbd 8b02 	vpop	{d8}
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	0800b9e8 	.word	0x0800b9e8

08001d90 <animate_led_theater_chase>:


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	ed2d 8b02 	vpush	{d8}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4613      	mov	r3, r2
 8001da2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 faba 	bl	8002320 <ws2812_led_get_max_strip_size>
 8001dac:	4603      	mov	r3, r0
 8001dae:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <animate_led_theater_chase+0x140>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f000 f9e3 	bl	800218c <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e075      	b.n	8001eb8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e06c      	b.n	8001eac <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001dd2:	f000 fc71 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fcc7 	bl	8002780 <task_button_press_check_interrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d163      	bne.n	8001ec0 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e010      	b.n	8001e20 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	7a3a      	ldrb	r2, [r7, #8]
 8001e0c:	7a7c      	ldrb	r4, [r7, #9]
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	88f8      	ldrh	r0, [r7, #6]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7fe fec5 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbea      	blt.n	8001dfe <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe feaa 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001e30:	f000 fc42 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	1c59      	adds	r1, r3, #1
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fc98 	bl	8002780 <task_button_press_check_interrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d136      	bne.n	8001ec4 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001e60:	f001 f960 	bl	8003124 <task_led_ctrl_speed>
 8001e64:	eeb0 7a40 	vmov.f32	s14, s0
 8001e68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e70:	ee17 0a90 	vmov	r0, s15
 8001e74:	f000 fff0 	bl	8002e58 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e00f      	b.n	8001e9e <animate_led_theater_chase+0x10e>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	88f8      	ldrh	r0, [r7, #6]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2300      	movs	r3, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	f7fe fe86 	bl	8000ba4 <animate_led_set_pixel>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbeb      	blt.n	8001e7e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	dd8f      	ble.n	8001dd2 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	dd86      	ble.n	8001dcc <animate_led_theater_chase+0x3c>
 8001ebe:	e002      	b.n	8001ec6 <animate_led_theater_chase+0x136>
                    return;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <animate_led_theater_chase+0x136>
                    return;
 8001ec4:	bf00      	nop
        }
    }
}
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	ecbd 8b02 	vpop	{d8}
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	0800b9e8 	.word	0x0800b9e8

08001ed4 <animate_led_custom_theater_chase_rainbow>:


void animate_led_custom_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	ed2d 8b02 	vpush	{d8}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	80fb      	strh	r3, [r7, #6]
 8001eea:	4603      	mov	r3, r0
 8001eec:	80bb      	strh	r3, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	807b      	strh	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	803b      	strh	r3, [r7, #0]
	uint8_t dummy_red, dummy_green, dummy_blue;
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycle all 256 colors in the animate_led_wheel
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e08a      	b.n	8002012 <animate_led_custom_theater_chase_rainbow+0x13e>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e080      	b.n	8002004 <animate_led_custom_theater_chase_rainbow+0x130>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001f02:	f000 fbd9 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <animate_led_custom_theater_chase_rainbow+0x50>
 8001f0c:	f107 0209 	add.w	r2, r7, #9
 8001f10:	f107 010a 	add.w	r1, r7, #10
 8001f14:	f107 030b 	add.w	r3, r7, #11
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fc31 	bl	8002780 <task_button_press_check_interrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d17b      	bne.n	800201c <animate_led_custom_theater_chase_rainbow+0x148>
            for (int iii = led_start; iii <= led_stop; iii += 3)
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e039      	b.n	8001f9e <animate_led_custom_theater_chase_rainbow+0xca>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001f2a:	f000 fbc5 	bl	80026b8 <task_button_press_interrupt_occurred>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <animate_led_custom_theater_chase_rainbow+0x78>
 8001f34:	f107 0209 	add.w	r2, r7, #9
 8001f38:	f107 010a 	add.w	r1, r7, #10
 8001f3c:	f107 030b 	add.w	r3, r7, #11
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fc1d 	bl	8002780 <task_button_press_check_interrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d169      	bne.n	8002020 <animate_led_custom_theater_chase_rainbow+0x14c>
                c = animate_led_wheel((iii + jjj) % 255);
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	441a      	add	r2, r3
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <animate_led_custom_theater_chase_rainbow+0x158>)
 8001f54:	fb83 1302 	smull	r1, r3, r3, r2
 8001f58:	4413      	add	r3, r2
 8001f5a:	11d9      	asrs	r1, r3, #7
 8001f5c:	17d3      	asrs	r3, r2, #31
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	1a5b      	subs	r3, r3, r1
 8001f66:	1ad1      	subs	r1, r2, r3
 8001f68:	b2cb      	uxtb	r3, r1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe18 	bl	8001ba0 <animate_led_wheel>
 8001f70:	60f8      	str	r0, [r7, #12]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781c      	ldrb	r4, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	88f8      	ldrh	r0, [r7, #6]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	f7fe fe06 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = led_start; iii <= led_stop; iii += 3)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	ddc1      	ble.n	8001f2a <animate_led_custom_theater_chase_rainbow+0x56>
            }
            animate_led_show_strip(mask_theater_chase);
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fdeb 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fb8:	f001 f8b4 	bl	8003124 <task_led_ctrl_speed>
 8001fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 0a90 	vmov	r0, s15
 8001fcc:	f000 ff44 	bl	8002e58 <task_led_ctrl_delay>
            for (int iii = led_start; iii <= led_stop; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e00f      	b.n	8001ff6 <animate_led_custom_theater_chase_rainbow+0x122>
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	88f8      	ldrh	r0, [r7, #6]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	f7fe fdda 	bl	8000ba4 <animate_led_set_pixel>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	883b      	ldrh	r3, [r7, #0]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	ddeb      	ble.n	8001fd6 <animate_led_custom_theater_chase_rainbow+0x102>
        for (int qqq = 0; qqq < 3; qqq++)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	f77f af7b 	ble.w	8001f02 <animate_led_custom_theater_chase_rainbow+0x2e>
    for (int jjj = 0; jjj < 256; jjj++) // cycle all 256 colors in the animate_led_wheel
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	f77f af71 	ble.w	8001efc <animate_led_custom_theater_chase_rainbow+0x28>
 800201a:	e002      	b.n	8002022 <animate_led_custom_theater_chase_rainbow+0x14e>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800201c:	bf00      	nop
 800201e:	e000      	b.n	8002022 <animate_led_custom_theater_chase_rainbow+0x14e>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002020:	bf00      	nop
        }
    }
}
 8002022:	3724      	adds	r7, #36	; 0x24
 8002024:	46bd      	mov	sp, r7
 8002026:	ecbd 8b02 	vpop	{d8}
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	80808081 	.word	0x80808081

08002030 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	ed2d 8b02 	vpush	{d8}
 8002036:	b08d      	sub	sp, #52	; 0x34
 8002038:	af02      	add	r7, sp, #8
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	80fb      	strh	r3, [r7, #6]
 8002040:	4613      	mov	r3, r2
 8002042:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f96a 	bl	8002320 <ws2812_led_get_max_strip_size>
 800204c:	4603      	mov	r3, r0
 800204e:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	e08a      	b.n	800216c <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e080      	b.n	800215e <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800205c:	f000 fb2c 	bl	80026b8 <task_button_press_interrupt_occurred>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <animate_led_theater_chase_rainbow+0x4e>
 8002066:	f107 020d 	add.w	r2, r7, #13
 800206a:	f107 010e 	add.w	r1, r7, #14
 800206e:	f107 030f 	add.w	r3, r7, #15
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fb84 	bl	8002780 <task_button_press_check_interrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d17b      	bne.n	8002176 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e039      	b.n	80020f8 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002084:	f000 fb18 	bl	80026b8 <task_button_press_interrupt_occurred>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <animate_led_theater_chase_rainbow+0x76>
 800208e:	f107 020d 	add.w	r2, r7, #13
 8002092:	f107 010e 	add.w	r1, r7, #14
 8002096:	f107 030f 	add.w	r3, r7, #15
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fb70 	bl	8002780 <task_button_press_check_interrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d169      	bne.n	800217a <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	441a      	add	r2, r3
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <animate_led_theater_chase_rainbow+0x158>)
 80020ae:	fb83 1302 	smull	r1, r3, r3, r2
 80020b2:	4413      	add	r3, r2
 80020b4:	11d9      	asrs	r1, r3, #7
 80020b6:	17d3      	asrs	r3, r2, #31
 80020b8:	1ac9      	subs	r1, r1, r3
 80020ba:	460b      	mov	r3, r1
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	1a5b      	subs	r3, r3, r1
 80020c0:	1ad1      	subs	r1, r2, r3
 80020c2:	b2cb      	uxtb	r3, r1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fd6b 	bl	8001ba0 <animate_led_wheel>
 80020ca:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	b299      	uxth	r1, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	3301      	adds	r3, #1
 80020e0:	781c      	ldrb	r4, [r3, #0]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	3302      	adds	r3, #2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	88f8      	ldrh	r0, [r7, #6]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4623      	mov	r3, r4
 80020ee:	f7fe fd59 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3303      	adds	r3, #3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbc1      	blt.n	8002084 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd3e 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8002108:	88bb      	ldrh	r3, [r7, #4]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002112:	f001 f807 	bl	8003124 <task_led_ctrl_speed>
 8002116:	eeb0 7a40 	vmov.f32	s14, s0
 800211a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800211e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002122:	ee17 0a90 	vmov	r0, s15
 8002126:	f000 fe97 	bl	8002e58 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e00f      	b.n	8002150 <animate_led_theater_chase_rainbow+0x120>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	b29a      	uxth	r2, r3
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b299      	uxth	r1, r3
 800213c:	88f8      	ldrh	r0, [r7, #6]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	f7fe fd2d 	bl	8000ba4 <animate_led_set_pixel>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3303      	adds	r3, #3
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	8afb      	ldrh	r3, [r7, #22]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbeb      	blt.n	8002130 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	3301      	adds	r3, #1
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f77f af7b 	ble.w	800205c <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	f77f af71 	ble.w	8002056 <animate_led_theater_chase_rainbow+0x26>
 8002174:	e002      	b.n	800217c <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800217a:	bf00      	nop
        }
    }
}
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	ecbd 8b02 	vpop	{d8}
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	80808081 	.word	0x80808081

0800218c <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	b2da      	uxtb	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0a1a      	lsrs	r2, r3, #8
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3302      	adds	r3, #2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80021c8:	2364      	movs	r3, #100	; 0x64
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <reset_ws2812b+0x2c>)
 80021cc:	2100      	movs	r1, #0
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <reset_ws2812b+0x30>)
 80021d0:	f006 f8f8 	bl	80083c4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80021d4:	2364      	movs	r3, #100	; 0x64
 80021d6:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <reset_ws2812b+0x2c>)
 80021d8:	2104      	movs	r1, #4
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <reset_ws2812b+0x30>)
 80021dc:	f006 f8f2 	bl	80083c4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80021e0:	2364      	movs	r3, #100	; 0x64
 80021e2:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <reset_ws2812b+0x2c>)
 80021e4:	2108      	movs	r1, #8
 80021e6:	4803      	ldr	r0, [pc, #12]	; (80021f4 <reset_ws2812b+0x30>)
 80021e8:	f006 f8ec 	bl	80083c4 <HAL_TIM_PWM_Start_DMA>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000080c 	.word	0x2000080c
 80021f4:	20002348 	.word	0x20002348

080021f8 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	3301      	adds	r3, #1
 8002206:	b2db      	uxtb	r3, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3b01      	subs	r3, #1
 8002222:	b2db      	uxtb	r3, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d104      	bne.n	8002252 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	737b      	strb	r3, [r7, #13]
        break;
 8002250:	e000      	b.n	8002254 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8002252:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8002254:	89fa      	ldrh	r2, [r7, #14]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002266:	7b7b      	ldrb	r3, [r7, #13]
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002294 <ws2812_get_pwm_strip_offset+0x64>
 8002274:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002280:	ee17 3a90 	vmov	r3, s15
 8002284:	b29b      	uxth	r3, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	453b8000 	.word	0x453b8000

08002298 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d103      	bne.n	80022b4 <ws2812_get_strip_size+0x1c>
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <ws2812_get_strip_size+0x3c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	81fb      	strh	r3, [r7, #14]
 80022b2:	e009      	b.n	80022c8 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff9e 	bl	80021f8 <ws2812_convert_strip_num_to_strip_bit>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <ws2812_get_strip_size+0x40>)
 80022c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022c6:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80022c8:	89fb      	ldrh	r3, [r7, #14]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000800 	.word	0x20000800
 80022d8:	2000005c 	.word	0x2000005c

080022dc <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d103      	bne.n	80022f8 <ws2812_get_num_active_animation_leds+0x1c>
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <ws2812_get_num_active_animation_leds+0x40>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	81fb      	strh	r3, [r7, #14]
 80022f6:	e009      	b.n	800230c <ws2812_get_num_active_animation_leds+0x30>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <ws2812_get_num_active_animation_leds+0x30>
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800230a:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 800230c:	89fb      	ldrh	r3, [r7, #14]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200007fc 	.word	0x200007fc

08002320 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d103      	bne.n	800233c <ws2812_led_get_max_strip_size+0x1c>
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <ws2812_led_get_max_strip_size+0x44>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	81fb      	strh	r3, [r7, #14]
 800233a:	e00c      	b.n	8002356 <ws2812_led_get_max_strip_size+0x36>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <ws2812_led_get_max_strip_size+0x36>
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800234e:	d202      	bcs.n	8002356 <ws2812_led_get_max_strip_size+0x36>
 8002350:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002354:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8002356:	89fb      	ldrh	r3, [r7, #14]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	20000800 	.word	0x20000800

08002368 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <ws2812_pixel_is_in_strip_range+0x26>
 8002382:	88bb      	ldrh	r3, [r7, #4]
 8002384:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002388:	d201      	bcs.n	800238e <ws2812_pixel_is_in_strip_range+0x26>
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	4603      	mov	r3, r0
 80023b0:	81bb      	strh	r3, [r7, #12]
 80023b2:	460b      	mov	r3, r1
 80023b4:	73bb      	strb	r3, [r7, #14]
 80023b6:	4613      	mov	r3, r2
 80023b8:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff29 	bl	8002214 <ws2812_convert_strip_bit_to_strip_num>
 80023c2:	4603      	mov	r3, r0
 80023c4:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <ws2812b_set_led+0xd0>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <ws2812b_set_led+0xd4>)
 80023de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023e2:	89ba      	ldrh	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80023f4:	793a      	ldrb	r2, [r7, #4]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <ws2812b_set_led+0xd0>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <ws2812b_set_led+0xd4>)
 8002412:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002416:	89ba      	ldrh	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	440b      	add	r3, r1
 8002420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002424:	edc7 7a01 	vstr	s15, [r7, #4]
 8002428:	793a      	ldrb	r2, [r7, #4]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 800242e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <ws2812b_set_led+0xd0>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <ws2812b_set_led+0xd4>)
 8002448:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800244c:	89ba      	ldrh	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	440b      	add	r3, r1
 8002456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245a:	edc7 7a01 	vstr	s15, [r7, #4]
 800245e:	793a      	ldrb	r2, [r7, #4]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	709a      	strb	r2, [r3, #2]
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	20000000 	.word	0x20000000
 8002470:	20000808 	.word	0x20000808

08002474 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 800247e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002482:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff fed3 	bl	8002230 <ws2812_get_pwm_strip_offset>
 800248a:	4603      	mov	r3, r0
 800248c:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 800248e:	e002      	b.n	8002496 <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 8002490:	2001      	movs	r0, #1
 8002492:	f001 f819 	bl	80034c8 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f5      	bne.n	8002490 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	82fb      	strh	r3, [r7, #22]
 80024a8:	e046      	b.n	8002538 <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80024aa:	4b40      	ldr	r3, [pc, #256]	; (80025ac <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	8afa      	ldrh	r2, [r7, #22]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80024bc:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	8afa      	ldrh	r2, [r7, #22]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	4403      	add	r3, r0
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80024ce:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	8afa      	ldrh	r2, [r7, #22]
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	4403      	add	r3, r0
 80024de:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80024e0:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80024e2:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	757b      	strb	r3, [r7, #21]
 80024e8:	e020      	b.n	800252c <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80024ea:	7d7b      	ldrb	r3, [r7, #21]
 80024ec:	f1c3 0317 	rsb	r3, r3, #23
 80024f0:	2201      	movs	r2, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8002500:	2028      	movs	r0, #40	; 0x28
 8002502:	e000      	b.n	8002506 <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8002504:	2014      	movs	r0, #20
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	8afa      	ldrh	r2, [r7, #22]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	441a      	add	r2, r3
 800251a:	7d7b      	ldrb	r3, [r7, #21]
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	440b      	add	r3, r1
 8002522:	4602      	mov	r2, r0
 8002524:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8002526:	7d7b      	ldrb	r3, [r7, #21]
 8002528:	3301      	adds	r3, #1
 800252a:	757b      	strb	r3, [r7, #21]
 800252c:	7d7b      	ldrb	r3, [r7, #21]
 800252e:	2b17      	cmp	r3, #23
 8002530:	d9db      	bls.n	80024ea <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8002532:	8afb      	ldrh	r3, [r7, #22]
 8002534:	3301      	adds	r3, #1
 8002536:	82fb      	strh	r3, [r7, #22]
 8002538:	8afb      	ldrh	r3, [r7, #22]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8b4      	bhi.n	80024aa <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8002540:	2300      	movs	r3, #0
 8002542:	827b      	strh	r3, [r7, #18]
 8002544:	e012      	b.n	800256c <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	461a      	mov	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	441a      	add	r2, r3
 800255a:	8a7b      	ldrh	r3, [r7, #18]
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	440b      	add	r3, r1
 8002562:	2200      	movs	r2, #0
 8002564:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8002566:	8a7b      	ldrh	r3, [r7, #18]
 8002568:	3301      	adds	r3, #1
 800256a:	827b      	strh	r3, [r7, #18]
 800256c:	8a7b      	ldrh	r3, [r7, #18]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80025b4 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d4e0      	bmi.n	8002546 <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	441a      	add	r2, r3
 8002594:	f244 33f8 	movw	r3, #17400	; 0x43f8
 8002598:	2100      	movs	r1, #0
 800259a:	4808      	ldr	r0, [pc, #32]	; (80025bc <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 800259c:	f005 ff12 	bl	80083c4 <HAL_TIM_PWM_Start_DMA>
}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000006e 	.word	0x2000006e
 80025ac:	20000808 	.word	0x20000808
 80025b0:	20000804 	.word	0x20000804
 80025b4:	453b8000 	.word	0x453b8000
 80025b8:	2000006d 	.word	0x2000006d
 80025bc:	20002348 	.word	0x20002348

080025c0 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <ws2812b_init+0xcc>)
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <ws2812b_init+0xd0>)
 80025ca:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 80025cc:	2301      	movs	r3, #1
 80025ce:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 80025d0:	2300      	movs	r3, #0
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	e00f      	b.n	80025f6 <ws2812b_init+0x36>
 80025d6:	2201      	movs	r2, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	b21a      	sxth	r2, r3
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <ws2812b_init+0xd4>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <ws2812b_init+0xd4>)
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3301      	adds	r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	ddec      	ble.n	80025d6 <ws2812b_init+0x16>
	switch (num_strips)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d110      	bne.n	8002624 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <ws2812b_init+0xd8>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800260a:	b29a      	uxth	r2, r3
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <ws2812b_init+0xd8>)
 800260e:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <ws2812b_init+0xdc>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002618:	d203      	bcs.n	8002622 <ws2812b_init+0x62>
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <ws2812b_init+0xdc>)
 800261c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002620:	801a      	strh	r2, [r3, #0]
		break;
 8002622:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <ws2812b_init+0xd8>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80026a0 <ws2812b_init+0xe0>
 800263e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002646:	ee17 0a90 	vmov	r0, s15
 800264a:	f008 f96b 	bl	800a924 <malloc>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <ws2812b_init+0xe4>)
 8002654:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <ws2812b_init+0xd8>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026a0 <ws2812b_init+0xe0>
 8002670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002678:	ee17 2a90 	vmov	r2, s15
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <ws2812b_init+0xe8>)
 800267e:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8002680:	f7fe fa44 	bl	8000b0c <current_monitor_init>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000808 	.word	0x20000808
 8002690:	200000f4 	.word	0x200000f4
 8002694:	200007fe 	.word	0x200007fe
 8002698:	200007fc 	.word	0x200007fc
 800269c:	20000800 	.word	0x20000800
 80026a0:	453b8000 	.word	0x453b8000
 80026a4:	20000804 	.word	0x20000804
 80026a8:	20000870 	.word	0x20000870

080026ac <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 80026b0:	f7ff fee0 	bl	8002474 <ws2812b_fill_pwm_buffer_strip_one>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <task_button_press_interrupt_occurred+0x14>)
 80026be:	781b      	ldrb	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000897 	.word	0x20000897

080026d0 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d817      	bhi.n	8002710 <task_led_ctrl_button_to_isr+0x40>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <task_led_ctrl_button_to_isr+0x18>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	080026ff 	.word	0x080026ff
 80026f0:	08002705 	.word	0x08002705
 80026f4:	0800270b 	.word	0x0800270b
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
        break;
 80026fc:	e009      	b.n	8002712 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
        break;
 8002702:	e006      	b.n	8002712 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8002704:	2302      	movs	r3, #2
 8002706:	73fb      	strb	r3, [r7, #15]
        break;
 8002708:	e003      	b.n	8002712 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
        break;
 800270e:	e000      	b.n	8002712 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8002710:	bf00      	nop
    }
    return return_val;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8002734:	2101      	movs	r1, #1
 8002736:	54d1      	strb	r1, [r2, r3]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	20000897 	.word	0x20000897
 8002748:	20000898 	.word	0x20000898

0800274c <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4a08      	ldr	r2, [pc, #32]	; (800277c <task_button_press_ctrl_interrupt_flag+0x30>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <task_button_press_ctrl_interrupt_flag+0x20>
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <task_button_press_ctrl_interrupt_flag+0x30>)
 8002768:	2100      	movs	r1, #0
 800276a:	54d1      	strb	r1, [r2, r3]
    return return_val;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000898 	.word	0x20000898

08002780 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 800278c:	2300      	movs	r3, #0
 800278e:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8002790:	f000 f85a 	bl	8002848 <task_button_press_major_state_change>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 800279a:	f000 f849 	bl	8002830 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 80027a2:	2100      	movs	r1, #0
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7fe fb53 	bl	8000e50 <animate_led_solid_custom_color>
 80027aa:	e039      	b.n	8002820 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff ffcd 	bl	800274c <task_button_press_ctrl_interrupt_flag>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 80027b8:	f000 f83a 	bl	8002830 <task_button_press_interrupt_flag_clear>
        return_val = true;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 80027c0:	2100      	movs	r1, #0
 80027c2:	2001      	movs	r0, #1
 80027c4:	f7fe fb44 	bl	8000e50 <animate_led_solid_custom_color>
 80027c8:	e02a      	b.n	8002820 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 80027ca:	2003      	movs	r0, #3
 80027cc:	f7ff ffbe 	bl	800274c <task_button_press_ctrl_interrupt_flag>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 80027d6:	f000 f82b 	bl	8002830 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 80027da:	e002      	b.n	80027e2 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 80027dc:	200a      	movs	r0, #10
 80027de:	f000 fe73 	bl	80034c8 <osDelay>
        while (g_animate_led_pause_flag)
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <task_button_press_check_interrupts+0xac>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f8      	bne.n	80027dc <task_button_press_check_interrupts+0x5c>
 80027ea:	e019      	b.n	8002820 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80027ec:	2002      	movs	r0, #2
 80027ee:	f7ff ffad 	bl	800274c <task_button_press_ctrl_interrupt_flag>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 80027f8:	f000 f81a 	bl	8002830 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80027fc:	f000 fbf6 	bl	8002fec <task_led_ctrl_color_red_hex>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8002808:	f000 fc18 	bl	800303c <task_led_ctrl_color_green_hex>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8002814:	f000 fc3a 	bl	800308c <task_led_ctrl_color_blue_hex>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000896 	.word	0x20000896

08002830 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <task_button_press_interrupt_flag_clear+0x14>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	20000897 	.word	0x20000897

08002848 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <task_button_press_major_state_change+0x14>)
 800284e:	781b      	ldrb	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000895 	.word	0x20000895

08002860 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	f107 0208 	add.w	r2, r7, #8
 800287e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002882:	2000      	movs	r0, #0
 8002884:	f002 facc 	bl	8004e20 <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	488b      	ldr	r0, [pc, #556]	; (8002abc <task_button_press+0x25c>)
 800288e:	f004 f9bb 	bl	8006c08 <HAL_GPIO_WritePin>
        osDelay(700);
 8002892:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002896:	f000 fe17 	bl	80034c8 <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 800289a:	2201      	movs	r2, #1
 800289c:	2101      	movs	r1, #1
 800289e:	4887      	ldr	r0, [pc, #540]	; (8002abc <task_button_press+0x25c>)
 80028a0:	f004 f9b2 	bl	8006c08 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <task_button_press+0x260>)
 80028ac:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4982      	ldr	r1, [pc, #520]	; (8002ac0 <task_button_press+0x260>)
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c6:	d206      	bcs.n	80028d6 <task_button_press+0x76>
 80028c8:	4b7e      	ldr	r3, [pc, #504]	; (8002ac4 <task_button_press+0x264>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <task_button_press+0x264>)
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e002      	b.n	80028dc <task_button_press+0x7c>
        else fast_press_count = 0;
 80028d6:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <task_button_press+0x264>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fef5 	bl	80026d0 <task_led_ctrl_button_to_isr>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff19 	bl	8002720 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 80028ee:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <task_button_press+0x264>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d975      	bls.n	80029e2 <task_button_press+0x182>
        {
            task_button_press_major_change = true;
 80028f6:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <task_button_press+0x268>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 80028fc:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <task_button_press+0x264>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b03      	cmp	r3, #3
 8002908:	d841      	bhi.n	800298e <task_button_press+0x12e>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <task_button_press+0xb0>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002921 	.word	0x08002921
 8002914:	0800293b 	.word	0x0800293b
 8002918:	08002957 	.word	0x08002957
 800291c:	08002971 	.word	0x08002971
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <task_button_press+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a69      	ldr	r2, [pc, #420]	; (8002acc <task_button_press+0x26c>)
 8002928:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 800292a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292e:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8002930:	2308      	movs	r3, #8
 8002932:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_draw_all_toggle();
 8002934:	f000 f8d2 	bl	8002adc <task_led_ctrl_draw_all_toggle>
                    //task_led_ctrl_speed_reset();
                break;
 8002938:	e02a      	b.n	8002990 <task_button_press+0x130>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <task_button_press+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <task_button_press+0x270>)
 8002942:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002944:	23ff      	movs	r3, #255	; 0xff
 8002946:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002948:	2328      	movs	r3, #40	; 0x28
 800294a:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 800294c:	f000 fc3e 	bl	80031cc <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8002950:	f000 fc66 	bl	8003220 <task_led_ctrl_animate_state_demo>
                break;
 8002954:	e01c      	b.n	8002990 <task_button_press+0x130>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <task_button_press+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <task_button_press+0x274>)
 800295e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8002960:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002964:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002966:	2317      	movs	r3, #23
 8002968:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 800296a:	f000 faf1 	bl	8002f50 <task_led_ctrl_color_state_demo>
                break;
 800296e:	e00f      	b.n	8002990 <task_button_press+0x130>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8002970:	f000 fa88 	bl	8002e84 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002974:	f000 fab6 	bl	8002ee4 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <task_button_press+0x278>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <task_button_press+0x278>)
 8002980:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8002982:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002986:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002988:	2306      	movs	r3, #6
 800298a:	74fb      	strb	r3, [r7, #19]
                break;
 800298c:	e000      	b.n	8002990 <task_button_press+0x130>
                default:
                break;
 800298e:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8002990:	2300      	movs	r3, #0
 8002992:	74bb      	strb	r3, [r7, #18]
 8002994:	e012      	b.n	80029bc <task_button_press+0x15c>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	2001      	movs	r0, #1
 800299a:	f7fe fa59 	bl	8000e50 <animate_led_solid_custom_color>
                osDelay(500);
 800299e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029a2:	f000 fd91 	bl	80034c8 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 80029a6:	2100      	movs	r1, #0
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7fe fa51 	bl	8000e50 <animate_led_solid_custom_color>
                osDelay(500);
 80029ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029b2:	f000 fd89 	bl	80034c8 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 80029b6:	7cbb      	ldrb	r3, [r7, #18]
 80029b8:	3301      	adds	r3, #1
 80029ba:	74bb      	strb	r3, [r7, #18]
 80029bc:	7cbb      	ldrb	r3, [r7, #18]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d9e9      	bls.n	8002996 <task_button_press+0x136>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 80029c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2118      	movs	r1, #24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fcdd 	bl	800638a <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 80029d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fcf4 	bl	80063c2 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <task_button_press+0x268>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e74a      	b.n	8002878 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe72 	bl	80026d0 <task_led_ctrl_button_to_isr>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fe96 	bl	8002720 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d85d      	bhi.n	8002ab8 <task_button_press+0x258>
 80029fc:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <task_button_press+0x1a4>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002a69 	.word	0x08002a69
 8002a10:	08002a99 	.word	0x08002a99
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <task_button_press+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <task_button_press+0x26c>)
 8002a1c:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8002a1e:	f000 fbbd 	bl	800319c <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2118      	movs	r1, #24
 8002a26:	2008      	movs	r0, #8
 8002a28:	f003 fcaf 	bl	800638a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8002a2c:	2008      	movs	r0, #8
 8002a2e:	f003 fcc8 	bl	80063c2 <HAL_NVIC_EnableIRQ>
                break;
 8002a32:	e042      	b.n	8002aba <task_button_press+0x25a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <task_button_press+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <task_button_press+0x270>)
 8002a3c:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8002a3e:	f000 fc17 	bl	8003270 <task_led_ctrl_animate_state>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <task_button_press+0x1ee>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002a48:	f000 fbfc 	bl	8003244 <task_led_ctrl_animate_state_fixed>
 8002a4c:	e003      	b.n	8002a56 <task_button_press+0x1f6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8002a4e:	f000 fbbd 	bl	80031cc <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8002a52:	f000 fbc7 	bl	80031e4 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2118      	movs	r1, #24
 8002a5a:	2028      	movs	r0, #40	; 0x28
 8002a5c:	f003 fc95 	bl	800638a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002a60:	2028      	movs	r0, #40	; 0x28
 8002a62:	f003 fcae 	bl	80063c2 <HAL_NVIC_EnableIRQ>
                break;
 8002a66:	e028      	b.n	8002aba <task_button_press+0x25a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <task_button_press+0x274>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <task_button_press+0x274>)
 8002a70:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8002a72:	f000 fa61 	bl	8002f38 <task_led_ctrl_color_state>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <task_button_press+0x222>
                    {
                        task_led_ctrl_color_state_fixed();
 8002a7c:	f000 fa74 	bl	8002f68 <task_led_ctrl_color_state_fixed>
 8002a80:	e001      	b.n	8002a86 <task_button_press+0x226>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002a82:	f000 fa83 	bl	8002f8c <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2118      	movs	r1, #24
 8002a8a:	2017      	movs	r0, #23
 8002a8c:	f003 fc7d 	bl	800638a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002a90:	2017      	movs	r0, #23
 8002a92:	f003 fc96 	bl	80063c2 <HAL_NVIC_EnableIRQ>

                break;
 8002a96:	e010      	b.n	8002aba <task_button_press+0x25a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <task_button_press+0x278>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <task_button_press+0x278>)
 8002aa0:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002aa2:	f000 fa2b 	bl	8002efc <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2118      	movs	r1, #24
 8002aaa:	2006      	movs	r0, #6
 8002aac:	f003 fc6d 	bl	800638a <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002ab0:	2006      	movs	r0, #6
 8002ab2:	f003 fc86 	bl	80063c2 <HAL_NVIC_EnableIRQ>
                break;
 8002ab6:	e000      	b.n	8002aba <task_button_press+0x25a>
                default:
                break;
 8002ab8:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002aba:	e6dd      	b.n	8002878 <task_button_press+0x18>
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	20000874 	.word	0x20000874
 8002ac4:	20000894 	.word	0x20000894
 8002ac8:	20000895 	.word	0x20000895
 8002acc:	2000089c 	.word	0x2000089c
 8002ad0:	200008a0 	.word	0x200008a0
 8002ad4:	200008a4 	.word	0x200008a4
 8002ad8:	200008a8 	.word	0x200008a8

08002adc <task_led_ctrl_draw_all_toggle>:
extern bool             task_button_press_major_change;
bool g_draw_all = true;


void task_led_ctrl_draw_all_toggle(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	animate_led_turn_all_pixels_off();
 8002ae0:	f7fe f9d8 	bl	8000e94 <animate_led_turn_all_pixels_off>
	if (g_draw_all) g_draw_all = false;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <task_led_ctrl_draw_all_toggle+0x24>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <task_led_ctrl_draw_all_toggle+0x18>
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <task_led_ctrl_draw_all_toggle+0x24>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
	else g_draw_all = true;
}
 8002af2:	e002      	b.n	8002afa <task_led_ctrl_draw_all_toggle+0x1e>
	else g_draw_all = true;
 8002af4:	4b02      	ldr	r3, [pc, #8]	; (8002b00 <task_led_ctrl_draw_all_toggle+0x24>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000061 	.word	0x20000061

08002b04 <task_led_ctrl_adjust_parameters>:


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <task_led_ctrl_adjust_parameters+0x74>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <task_led_ctrl_adjust_parameters+0x74>)
 8002b1e:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <task_led_ctrl_adjust_parameters+0x78>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11b      	bne.n	8002b60 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8002b28:	88bb      	ldrh	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <task_led_ctrl_adjust_parameters+0x32>
 8002b2e:	88bb      	ldrh	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f991 	bl	8002e58 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <task_led_ctrl_adjust_parameters+0x74>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	79fa      	ldrb	r2, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10f      	bne.n	8002b60 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <task_led_ctrl_adjust_parameters+0x7c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <task_led_ctrl_adjust_parameters+0x7c>)
 8002b4a:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <task_led_ctrl_adjust_parameters+0x7c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b0a      	cmp	r3, #10
 8002b52:	d102      	bne.n	8002b5a <task_led_ctrl_adjust_parameters+0x56>
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <task_led_ctrl_adjust_parameters+0x7c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <task_led_ctrl_adjust_parameters+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002b60:	f000 f9ea 	bl	8002f38 <task_led_ctrl_color_state>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <task_led_ctrl_adjust_parameters+0x6a>
 8002b6a:	f000 fab5 	bl	80030d8 <task_led_ctrl_color_random>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200008af 	.word	0x200008af
 8002b7c:	200008ac 	.word	0x200008ac
 8002b80:	2000005e 	.word	0x2000005e

08002b84 <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af04      	add	r7, sp, #16
 8002b8a:	6078      	str	r0, [r7, #4]
    osDelay(10);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f000 fc9b 	bl	80034c8 <osDelay>
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 8002b92:	e002      	b.n	8002b9a <task_led_ctrl_strip_one+0x16>
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	f000 fc97 	bl	80034c8 <osDelay>
 8002b9a:	f7ff fe55 	bl	8002848 <task_button_press_major_state_change>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f7      	bne.n	8002b94 <task_led_ctrl_strip_one+0x10>
//        	{
//        		animate_led_custom_function_print_shotgun();
//        		animate_led_custom_function_print_mallord();
//        		//animate_led_show_strip(STRIP_BIT_1);
//        	}
            switch(g_led_state)
 8002ba4:	4ba9      	ldr	r3, [pc, #676]	; (8002e4c <task_led_ctrl_strip_one+0x2c8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	f200 814c 	bhi.w	8002e46 <task_led_ctrl_strip_one+0x2c2>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <task_led_ctrl_strip_one+0x30>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002e0f 	.word	0x08002e0f
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002c0b 	.word	0x08002c0b
 8002bc0:	08002c69 	.word	0x08002c69
 8002bc4:	08002ca7 	.word	0x08002ca7
 8002bc8:	08002cd5 	.word	0x08002cd5
 8002bcc:	08002cfd 	.word	0x08002cfd
 8002bd0:	08002d43 	.word	0x08002d43
 8002bd4:	08002d6b 	.word	0x08002d6b
 8002bd8:	08002dab 	.word	0x08002dab
//            	case LED_STATE_CUSTOM:
//            		//animate_led_custom_state(g_custom_led_state);
//                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
//            	break;
                case LED_STATE_WHITE_COLOR:
                	if (g_draw_all)
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <task_led_ctrl_strip_one+0x6c>
                	{
                		animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 8002be4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7fe f931 	bl	8000e50 <animate_led_solid_custom_color>
 8002bee:	e006      	b.n	8002bfe <task_led_ctrl_strip_one+0x7a>
                	}
                	else
                	{
                		animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE, 0, 178);
 8002bf0:	23b2      	movs	r3, #178	; 0xb2
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7fe f8fb 	bl	8000df4 <animate_led_custom_solid_custom_color>
                	}
                	task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 8002bfe:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff ff7e 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002c08:	e11e      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_SOLID_COLOR:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8002c0a:	f000 f9dd 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <task_led_ctrl_strip_one+0x94>
					{
						task_led_ctrl_color_adjust();
 8002c14:	f000 f9ba 	bl	8002f8c <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8002c18:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <task_led_ctrl_strip_one+0xac>
                	{
                		animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002c20:	f000 f9d2 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7fe f911 	bl	8000e50 <animate_led_solid_custom_color>
 8002c2e:	e007      	b.n	8002c40 <task_led_ctrl_strip_one+0xbc>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex(), 0 , 178);
 8002c30:	f000 f9ca 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002c34:	4601      	mov	r1, r0
 8002c36:	23b2      	movs	r3, #178	; 0xb2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7fe f8da 	bl	8000df4 <animate_led_custom_solid_custom_color>
                	}
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002c40:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <task_led_ctrl_strip_one+0x2d0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d109      	bne.n	8002c5c <task_led_ctrl_strip_one+0xd8>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c4c:	2005      	movs	r0, #5
 8002c4e:	f7ff ff59 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 8002c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c56:	f000 f8ff 	bl	8002e58 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 8002c5a:	e0f5      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8002c5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c60:	2005      	movs	r0, #5
 8002c62:	f7ff ff4f 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002c66:	e0ef      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_SPARKLE_NO_FILL:
                	if (g_draw_all)
 8002c68:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <task_led_ctrl_strip_one+0xfc>
                	{
                		animate_led_turn_all_pixels_off();
 8002c70:	f7fe f910 	bl	8000e94 <animate_led_turn_all_pixels_off>
                		animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 8002c74:	2264      	movs	r2, #100	; 0x64
 8002c76:	2100      	movs	r1, #0
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7fe fde1 	bl	8001840 <animate_led_sparkle_only_random_color>
 8002c7e:	e00d      	b.n	8002c9c <task_led_ctrl_strip_one+0x118>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLACK, 0 , 178);
 8002c80:	23b2      	movs	r3, #178	; 0xb2
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7fe f8b4 	bl	8000df4 <animate_led_custom_solid_custom_color>
                        animate_led_custom_sparkle_only_random_color(STRIP_BIT_1, false, 100, 0, 178);//random(0, 50));
 8002c8c:	23b2      	movs	r3, #178	; 0xb2
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	2264      	movs	r2, #100	; 0x64
 8002c94:	2100      	movs	r1, #0
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fe fd42 	bl	8001720 <animate_led_custom_sparkle_only_random_color>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2005      	movs	r0, #5
 8002ca0:	f7ff ff30 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002ca4:	e0d0      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_SPARKLE_FILL:
                	if (g_draw_all)
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <task_led_ctrl_strip_one+0x136>
                	{
                		animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 8002cae:	2264      	movs	r2, #100	; 0x64
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7fe fdc4 	bl	8001840 <animate_led_sparkle_only_random_color>
 8002cb8:	e007      	b.n	8002cca <task_led_ctrl_strip_one+0x146>
                	}
                	else
                	{
                    	animate_led_custom_sparkle_only_random_color(STRIP_BIT_1, true, 100, 0, 178);//random(0, 50));
 8002cba:	23b2      	movs	r3, #178	; 0xb2
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fe fd2b 	bl	8001720 <animate_led_custom_sparkle_only_random_color>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f7ff ff19 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002cd2:	e0b9      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_RAINBOW_CYCLE:
                	if (g_draw_all)
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <task_led_ctrl_strip_one+0x162>
                	{
                        animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 8002cdc:	210a      	movs	r1, #10
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fe fe40 	bl	8001964 <animate_led_rainbow_cycle>
 8002ce4:	e005      	b.n	8002cf2 <task_led_ctrl_strip_one+0x16e>
                	}
                	else
                	{
                        animate_led_custom_rainbow_cycle(STRIP_BIT_1, 10, 0, 178);
 8002ce6:	23b2      	movs	r3, #178	; 0xb2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	210a      	movs	r1, #10
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7fe fec6 	bl	8001a7e <animate_led_custom_rainbow_cycle>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2005      	movs	r0, #5
 8002cf6:	f7ff ff05 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002cfa:	e0a5      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_THEATER_CHASE:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8002cfc:	f000 f964 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <task_led_ctrl_strip_one+0x186>
					{
						task_led_ctrl_color_adjust();
 8002d06:	f000 f941 	bl	8002f8c <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <task_led_ctrl_strip_one+0x1a0>
                	{
                        animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002d12:	f000 f959 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2214      	movs	r2, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7ff f837 	bl	8001d90 <animate_led_theater_chase>
 8002d22:	e009      	b.n	8002d38 <task_led_ctrl_strip_one+0x1b4>
                	}
                	else
                	{
                        animate_led_custom_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20, 0, 178);
 8002d24:	f000 f950 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d28:	4601      	mov	r1, r0
 8002d2a:	23b2      	movs	r3, #178	; 0xb2
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2214      	movs	r2, #20
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe ff8a 	bl	8001c4c <animate_led_custom_theater_chase>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	200a      	movs	r0, #10
 8002d3c:	f7ff fee2 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002d40:	e082      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_THEATER_CHASE_RAINBOW:
                	if (g_draw_all)
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <task_led_ctrl_strip_one+0x1d0>
                	{
                		animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7ff f96f 	bl	8002030 <animate_led_theater_chase_rainbow>
 8002d52:	e005      	b.n	8002d60 <task_led_ctrl_strip_one+0x1dc>
                	}
                	else
                	{
                        animate_led_custom_theater_chase_rainbow(STRIP_BIT_1, 20, 0, 178);
 8002d54:	23b2      	movs	r3, #178	; 0xb2
 8002d56:	2200      	movs	r2, #0
 8002d58:	2114      	movs	r1, #20
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f7ff f8ba 	bl	8001ed4 <animate_led_custom_theater_chase_rainbow>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7ff fece 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002d68:	e06e      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_FADE_IN_AND_OUT:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8002d6a:	f000 f92d 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <task_led_ctrl_strip_one+0x1f4>
					{
						task_led_ctrl_color_adjust();
 8002d74:	f000 f90a 	bl	8002f8c <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <task_led_ctrl_strip_one+0x20c>
                	{
                        animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002d80:	f000 f922 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7fe faa5 	bl	80012d8 <animate_led_fade_in_fade_out>
 8002d8e:	e007      	b.n	8002da0 <task_led_ctrl_strip_one+0x21c>
                	}
                	else
                	{
                        animate_led_custom_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex(), 0, 178);
 8002d90:	f000 f91a 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002d94:	4601      	mov	r1, r0
 8002d96:	23b2      	movs	r3, #178	; 0xb2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7fe f942 	bl	8001024 <animate_led_custom_fade_in_fade_out>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	200a      	movs	r0, #10
 8002da4:	f7ff feae 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002da8:	e04e      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_TWINKLE:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8002daa:	f000 f90d 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <task_led_ctrl_strip_one+0x234>
					{
						task_led_ctrl_color_adjust();
 8002db4:	f000 f8ea 	bl	8002f8c <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <task_led_ctrl_strip_one+0x258>
                	{
                		animate_led_turn_all_pixels_off();
 8002dc0:	f7fe f868 	bl	8000e94 <animate_led_turn_all_pixels_off>
						animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 8002dc4:	f000 f900 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2314      	movs	r3, #20
 8002dd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7fe fc2f 	bl	8001638 <animate_led_twinkle>
 8002dda:	e013      	b.n	8002e04 <task_led_ctrl_strip_one+0x280>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLACK, 0 , 178);
 8002ddc:	23b2      	movs	r3, #178	; 0xb2
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fe f806 	bl	8000df4 <animate_led_custom_solid_custom_color>
                        animate_led_custom_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)178 * (float)0.9), 20, false, 0, 178);
 8002de8:	f000 f8ee 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002dec:	4601      	mov	r1, r0
 8002dee:	23b2      	movs	r3, #178	; 0xb2
 8002df0:	9302      	str	r3, [sp, #8]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2314      	movs	r3, #20
 8002dfc:	22a0      	movs	r2, #160	; 0xa0
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f7fe fbac 	bl	800155c <animate_led_custom_twinkle>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002e04:	2100      	movs	r1, #0
 8002e06:	2005      	movs	r0, #5
 8002e08:	f7ff fe7c 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002e0c:	e01c      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                case LED_STATE_SPELL:
                	if (g_draw_all)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <task_led_ctrl_strip_one+0x2cc>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <task_led_ctrl_strip_one+0x2a4>
                	{
                		animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002e16:	f000 f8d7 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2214      	movs	r2, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7fe f89f 	bl	8000f64 <animate_led_only_spell_word>
 8002e26:	e009      	b.n	8002e3c <task_led_ctrl_strip_one+0x2b8>
                	}
                	else
                	{
                    	animate_led_custom_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20, 0, 178);
 8002e28:	f000 f8ce 	bl	8002fc8 <task_led_ctrl_color_hex>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	23b2      	movs	r3, #178	; 0xb2
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2214      	movs	r2, #20
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7fe f836 	bl	8000ea8 <animate_led_custom_only_spell_word>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	200a      	movs	r0, #10
 8002e40:	f7ff fe60 	bl	8002b04 <task_led_ctrl_adjust_parameters>
                break;
 8002e44:	e000      	b.n	8002e48 <task_led_ctrl_strip_one+0x2c4>
                default:
                break;
 8002e46:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 8002e48:	e6a7      	b.n	8002b9a <task_led_ctrl_strip_one+0x16>
 8002e4a:	bf00      	nop
 8002e4c:	2000005e 	.word	0x2000005e
 8002e50:	20000061 	.word	0x20000061
 8002e54:	200008ac 	.word	0x200008ac

08002e58 <task_led_ctrl_delay>:
//    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002e64:	e002      	b.n	8002e6c <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f000 fb2e 	bl	80034c8 <osDelay>
    while (ms_count++ < time_ms)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	60fa      	str	r2, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d8f6      	bhi.n	8002e66 <task_led_ctrl_delay+0xe>
    }
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <task_led_ctrl_brightness_adjust+0x58>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d103      	bne.n	8002e98 <task_led_ctrl_brightness_adjust+0x14>
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <task_led_ctrl_brightness_adjust+0x58>)
 8002e92:	2202      	movs	r2, #2
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e005      	b.n	8002ea4 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <task_led_ctrl_brightness_adjust+0x58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <task_led_ctrl_brightness_adjust+0x58>)
 8002ea2:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <task_led_ctrl_brightness_adjust+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d010      	beq.n	8002ece <task_led_ctrl_brightness_adjust+0x4a>
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	dc13      	bgt.n	8002ed8 <task_led_ctrl_brightness_adjust+0x54>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <task_led_ctrl_brightness_adjust+0x36>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8002eb8:	e00e      	b.n	8002ed8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 8002eba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ebe:	f7fd fdf5 	bl	8000aac <current_monitor_set>
        break;
 8002ec2:	e009      	b.n	8002ed8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8002ec4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002ec8:	f7fd fdf0 	bl	8000aac <current_monitor_set>
        break;
 8002ecc:	e004      	b.n	8002ed8 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8002ece:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002ee0 <task_led_ctrl_brightness_adjust+0x5c>
 8002ed2:	f7fd fdeb 	bl	8000aac <current_monitor_set>
        break;
 8002ed6:	bf00      	nop
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200008ad 	.word	0x200008ad
 8002ee0:	3c23d70a 	.word	0x3c23d70a

08002ee4 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <task_led_ctrl_clear_pause+0x14>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	20000896 	.word	0x20000896

08002efc <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <task_led_ctrl_pause+0x34>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <task_led_ctrl_pause+0x14>
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <task_led_ctrl_pause+0x38>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e002      	b.n	8002f16 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <task_led_ctrl_pause+0x38>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <task_led_ctrl_pause+0x34>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <task_led_ctrl_pause+0x34>)
 8002f22:	701a      	strb	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000062 	.word	0x20000062
 8002f34:	20000896 	.word	0x20000896

08002f38 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <task_led_ctrl_color_state+0x14>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	200008ae 	.word	0x200008ae

08002f50 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <task_led_ctrl_color_state_demo+0x14>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	200008ae 	.word	0x200008ae

08002f68 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <task_led_ctrl_color_state_fixed+0x1c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <task_led_ctrl_color_state_fixed+0x20>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	200008ae 	.word	0x200008ae
 8002f88:	20000060 	.word	0x20000060

08002f8c <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002f92:	2300      	movs	r3, #0
 8002f94:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <task_led_ctrl_color_adjust+0x38>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b15      	cmp	r3, #21
 8002f9c:	d105      	bne.n	8002faa <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <task_led_ctrl_color_adjust+0x38>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	e005      	b.n	8002fb6 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <task_led_ctrl_color_adjust+0x38>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <task_led_ctrl_color_adjust+0x38>)
 8002fb4:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20000060 	.word	0x20000060

08002fc8 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <task_led_ctrl_color_hex+0x1c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <task_led_ctrl_color_hex+0x20>)
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000060 	.word	0x20000060
 8002fe8:	20000004 	.word	0x20000004

08002fec <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	ed2d 8b02 	vpush	{d8}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <task_led_ctrl_color_red_hex+0x48>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <task_led_ctrl_color_red_hex+0x4c>)
 8002ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800300e:	f7fd fd6f 	bl	8000af0 <current_monitor_ratio>
 8003012:	eeb0 7a40 	vmov.f32	s14, s0
 8003016:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800301a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003022:	793b      	ldrb	r3, [r7, #4]
 8003024:	b2db      	uxtb	r3, r3
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	ecbd 8b02 	vpop	{d8}
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000060 	.word	0x20000060
 8003038:	20000004 	.word	0x20000004

0800303c <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	ed2d 8b02 	vpush	{d8}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <task_led_ctrl_color_green_hex+0x48>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <task_led_ctrl_color_green_hex+0x4c>)
 800304e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b2db      	uxtb	r3, r3
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800305e:	f7fd fd47 	bl	8000af0 <current_monitor_ratio>
 8003062:	eeb0 7a40 	vmov.f32	s14, s0
 8003066:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003072:	793b      	ldrb	r3, [r7, #4]
 8003074:	b2db      	uxtb	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	ecbd 8b02 	vpop	{d8}
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000060 	.word	0x20000060
 8003088:	20000004 	.word	0x20000004

0800308c <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	ed2d 8b02 	vpush	{d8}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <task_led_ctrl_color_blue_hex+0x44>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <task_led_ctrl_color_blue_hex+0x48>)
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80030ac:	f7fd fd20 	bl	8000af0 <current_monitor_ratio>
 80030b0:	eeb0 7a40 	vmov.f32	s14, s0
 80030b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80030b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80030c0:	793b      	ldrb	r3, [r7, #4]
 80030c2:	b2db      	uxtb	r3, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	ecbd 8b02 	vpop	{d8}
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000060 	.word	0x20000060
 80030d4:	20000004 	.word	0x20000004

080030d8 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 80030de:	2116      	movs	r1, #22
 80030e0:	2000      	movs	r0, #0
 80030e2:	f007 fbdd 	bl	800a8a0 <random_num>
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <task_led_ctrl_color_random+0x48>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	79fa      	ldrb	r2, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d10e      	bne.n	8003112 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2b15      	cmp	r3, #21
 80030f8:	d105      	bne.n	8003106 <task_led_ctrl_color_random+0x2e>
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <task_led_ctrl_color_random+0x48>)
 8003102:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8003104:	e008      	b.n	8003118 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	3301      	adds	r3, #1
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <task_led_ctrl_color_random+0x48>)
 800310e:	701a      	strb	r2, [r3, #0]
}
 8003110:	e002      	b.n	8003118 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 8003112:	4a03      	ldr	r2, [pc, #12]	; (8003120 <task_led_ctrl_color_random+0x48>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	7013      	strb	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000060 	.word	0x20000060

08003124 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <task_led_ctrl_speed+0x6c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d81f      	bhi.n	8003178 <task_led_ctrl_speed+0x54>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <task_led_ctrl_speed+0x1c>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003155 	.word	0x08003155
 8003144:	0800315b 	.word	0x0800315b
 8003148:	08003161 	.word	0x08003161
 800314c:	08003169 	.word	0x08003169
 8003150:	08003171 	.word	0x08003171
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <task_led_ctrl_speed+0x70>)
 8003156:	607b      	str	r3, [r7, #4]
        break;
 8003158:	e00f      	b.n	800317a <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <task_led_ctrl_speed+0x74>)
 800315c:	607b      	str	r3, [r7, #4]
        break;
 800315e:	e00c      	b.n	800317a <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8003160:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003164:	607b      	str	r3, [r7, #4]
        break;
 8003166:	e008      	b.n	800317a <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8003168:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800316c:	607b      	str	r3, [r7, #4]
        break;
 800316e:	e004      	b.n	800317a <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 8003170:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003174:	607b      	str	r3, [r7, #4]
        break;
 8003176:	e000      	b.n	800317a <task_led_ctrl_speed+0x56>
        default:
        break;
 8003178:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	ee07 3a90 	vmov	s15, r3
}
 8003180:	eeb0 0a67 	vmov.f32	s0, s15
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2000005f 	.word	0x2000005f
 8003194:	41200000 	.word	0x41200000
 8003198:	40a00000 	.word	0x40a00000

0800319c <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <task_led_ctrl_speed_adjust+0x2c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <task_led_ctrl_speed_adjust+0x14>
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <task_led_ctrl_speed_adjust+0x2c>)
 80031aa:	2204      	movs	r2, #4
 80031ac:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80031ae:	e005      	b.n	80031bc <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <task_led_ctrl_speed_adjust+0x2c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <task_led_ctrl_speed_adjust+0x2c>)
 80031ba:	701a      	strb	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	2000005f 	.word	0x2000005f

080031cc <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <task_led_ctrl_animate_iteration_reset+0x14>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	200008af 	.word	0x200008af

080031e4 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
    bool return_val = false;
 80031ea:	2300      	movs	r3, #0
 80031ec:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <task_led_ctrl_animate_adjust_state+0x38>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d105      	bne.n	8003202 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <task_led_ctrl_animate_adjust_state+0x38>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80031fc:	2301      	movs	r3, #1
 80031fe:	71fb      	strb	r3, [r7, #7]
 8003200:	e005      	b.n	800320e <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <task_led_ctrl_animate_adjust_state+0x38>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <task_led_ctrl_animate_adjust_state+0x38>)
 800320c:	701a      	strb	r2, [r3, #0]
    return return_val;
 800320e:	79fb      	ldrb	r3, [r7, #7]
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	2000005e 	.word	0x2000005e

08003220 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <task_led_ctrl_animate_state_demo+0x1c>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <task_led_ctrl_animate_state_demo+0x20>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	200008ac 	.word	0x200008ac
 8003240:	200008af 	.word	0x200008af

08003244 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <task_led_ctrl_animate_state_fixed+0x20>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <task_led_ctrl_animate_state_fixed+0x24>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <task_led_ctrl_animate_state_fixed+0x28>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	200008ac 	.word	0x200008ac
 8003268:	2000005e 	.word	0x2000005e
 800326c:	200008af 	.word	0x200008af

08003270 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <task_led_ctrl_animate_state+0x14>)
 8003276:	781b      	ldrb	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200008ac 	.word	0x200008ac

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <SysTick_Handler+0x1c>)
 80032e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032e4:	f001 fd10 	bl	8004d08 <xTaskGetSchedulerState>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032ee:	f002 fc2b 	bl	8005b48 <xPortSysTickHandler>
  }
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000e010 	.word	0xe000e010

080032fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003300:	2100      	movs	r1, #0
 8003302:	f06f 0004 	mvn.w	r0, #4
 8003306:	f7ff ffbf 	bl	8003288 <__NVIC_SetPriority>
#endif
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003316:	f3ef 8305 	mrs	r3, IPSR
 800331a:	603b      	str	r3, [r7, #0]
  return(result);
 800331c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003322:	f06f 0305 	mvn.w	r3, #5
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e00c      	b.n	8003344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <osKernelInitialize+0x44>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <osKernelInitialize+0x44>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e002      	b.n	8003344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200008b0 	.word	0x200008b0

08003358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335e:	f3ef 8305 	mrs	r3, IPSR
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e010      	b.n	8003394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <osKernelStart+0x48>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800337a:	f7ff ffbf 	bl	80032fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <osKernelStart+0x48>)
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003384:	f001 f866 	bl	8004454 <vTaskStartScheduler>
      stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	e002      	b.n	8003394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200008b0 	.word	0x200008b0

080033a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	; 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b4:	f3ef 8305 	mrs	r3, IPSR
 80033b8:	617b      	str	r3, [r7, #20]
  return(result);
 80033ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17e      	bne.n	80034be <osThreadNew+0x11a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07b      	beq.n	80034be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033ca:	2318      	movs	r3, #24
 80033cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d045      	beq.n	800346a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0x48>
        name = attr->name;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <osThreadNew+0x6e>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b38      	cmp	r3, #56	; 0x38
 8003404:	d805      	bhi.n	8003412 <osThreadNew+0x6e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <osThreadNew+0x72>
        return (NULL);
 8003412:	2300      	movs	r3, #0
 8003414:	e054      	b.n	80034c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <osThreadNew+0xa8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b5b      	cmp	r3, #91	; 0x5b
 8003434:	d90a      	bls.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <osThreadNew+0xa8>
        mem = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e010      	b.n	800346e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <osThreadNew+0xca>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <osThreadNew+0xca>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <osThreadNew+0xca>
          mem = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e001      	b.n	800346e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d110      	bne.n	8003496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800347c:	9202      	str	r2, [sp, #8]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fe0c 	bl	80040a8 <xTaskCreateStatic>
 8003490:	4603      	mov	r3, r0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e013      	b.n	80034be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe57 	bl	8004162 <xTaskCreate>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <osThreadNew+0x11a>
            hTask = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <osDelay+0x1c>
    stat = osErrorISR;
 80034dc:	f06f 0305 	mvn.w	r3, #5
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e007      	b.n	80034f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff7c 	bl	80043ec <vTaskDelay>
    }
  }

  return (stat);
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <vApplicationGetIdleTaskMemory+0x2c>)
 8003510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <vApplicationGetIdleTaskMemory+0x30>)
 8003516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200008b4 	.word	0x200008b4
 8003530:	20000910 	.word	0x20000910

08003534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <vApplicationGetTimerTaskMemory+0x2c>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <vApplicationGetTimerTaskMemory+0x30>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000b10 	.word	0x20000b10
 8003564:	20000b6c 	.word	0x20000b6c

08003568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003620:	d103      	bne.n	800362a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e00c      	b.n	8003644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e002      	b.n	8003638 <vListInsert+0x2e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d2f6      	bcs.n	8003632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036fa:	f002 f993 	bl	8005a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	3b01      	subs	r3, #1
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d114      	bne.n	800377a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f915 	bl	800498c <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <xQueueGenericReset+0xcc>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	e009      	b.n	800378e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3310      	adds	r3, #16
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fef2 	bl	8003568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff feed 	bl	8003568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800378e:	f002 f979 	bl	8005a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <xQueueGenericCreateStatic+0x52>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <xQueueGenericCreateStatic+0x56>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericCreateStatic+0x58>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xQueueGenericCreateStatic+0x7e>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericCreateStatic+0x82>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericCreateStatic+0x84>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61fb      	str	r3, [r7, #28]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800383e:	2350      	movs	r3, #80	; 0x50
 8003840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d00a      	beq.n	800385e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	61bb      	str	r3, [r7, #24]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800385e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003872:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f805 	bl	8003890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e002      	b.n	80038b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038be:	2101      	movs	r1, #1
 80038c0:	69b8      	ldr	r0, [r7, #24]
 80038c2:	f7ff ff05 	bl	80036d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xQueueGenericSend+0x32>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <xQueueGenericSend+0x40>
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <xQueueGenericSend+0x44>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <xQueueGenericSend+0x46>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <xQueueGenericSend+0x60>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d103      	bne.n	8003946 <xQueueGenericSend+0x6e>
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <xQueueGenericSend+0x72>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <xQueueGenericSend+0x74>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xQueueGenericSend+0x8e>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	623b      	str	r3, [r7, #32]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003966:	f001 f9cf 	bl	8004d08 <xTaskGetSchedulerState>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <xQueueGenericSend+0x9e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueGenericSend+0xa2>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGenericSend+0xa4>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xQueueGenericSend+0xbe>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61fb      	str	r3, [r7, #28]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003996:	f002 f845 	bl	8005a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xQueueGenericSend+0xd4>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d129      	bne.n	8003a00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b2:	f000 fa0b 	bl	8003dcc <prvCopyDataToQueue>
 80039b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	3324      	adds	r3, #36	; 0x24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ffe1 	bl	800498c <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	e00a      	b.n	80039f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f8:	f002 f844 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e063      	b.n	8003ac8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a06:	f002 f83d 	bl	8005a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e05c      	b.n	8003ac8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f81b 	bl	8004a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a22:	f002 f82f 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a26:	f000 fd7b 	bl	8004520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2a:	f001 fffb 	bl	8005a24 <vPortEnterCritical>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d103      	bne.n	8003a44 <xQueueGenericSend+0x16c>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x182>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5a:	f002 f813 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5e:	1d3a      	adds	r2, r7, #4
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f80a 	bl	8004a80 <xTaskCheckForTimeOut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d124      	bne.n	8003abc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a74:	f000 faa2 	bl	8003fbc <prvIsQueueFull>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3310      	adds	r3, #16
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 ff30 	bl	80048ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa2d 	bl	8003eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a92:	f000 fd53 	bl	800453c <xTaskResumeAll>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af7c 	bne.w	8003996 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xQueueGenericSend+0x1f8>)
 8003aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	e772      	b.n	8003996 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab2:	f000 fa1b 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab6:	f000 fd41 	bl	800453c <xTaskResumeAll>
 8003aba:	e76c      	b.n	8003996 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003abe:	f000 fa15 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac2:	f000 fd3b 	bl	800453c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3738      	adds	r7, #56	; 0x38
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b090      	sub	sp, #64	; 0x40
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueGenericSendFromISR+0x3c>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <xQueueGenericSendFromISR+0x40>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <xQueueGenericSendFromISR+0x42>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSendFromISR+0x6a>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSendFromISR+0x6e>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSendFromISR+0x70>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b5e:	f002 f843 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b62:	f3ef 8211 	mrs	r2, BASEPRI
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <xQueueGenericSendFromISR+0xbc>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d12f      	bne.n	8003bf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba6:	f000 f911 	bl	8003dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003baa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb2:	d112      	bne.n	8003bda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d016      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fee3 	bl	800498c <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	b25a      	sxtb	r2, r3
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bea:	2301      	movs	r3, #1
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003bee:	e001      	b.n	8003bf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3740      	adds	r7, #64	; 0x40
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <xQueueReceive+0x30>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	623b      	str	r3, [r7, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <xQueueReceive+0x3e>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <xQueueReceive+0x42>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueReceive+0x44>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueReceive+0x5e>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	61fb      	str	r3, [r7, #28]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c6a:	f001 f84d 	bl	8004d08 <xTaskGetSchedulerState>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <xQueueReceive+0x6e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueReceive+0x72>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueReceive+0x74>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueReceive+0x8e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61bb      	str	r3, [r7, #24]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9a:	f001 fec3 	bl	8005a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01f      	beq.n	8003cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cae:	f000 f8f7 	bl	8003ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fe60 	bl	800498c <xTaskRemoveFromEventList>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ce2:	f001 fecf 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e069      	b.n	8003dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cf0:	f001 fec8 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e062      	b.n	8003dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fea6 	bl	8004a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d0c:	f001 feba 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d10:	f000 fc06 	bl	8004520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d14:	f001 fe86 	bl	8005a24 <vPortEnterCritical>
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0x122>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d103      	bne.n	8003d44 <xQueueReceive+0x138>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	f001 fe9e 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d48:	1d3a      	adds	r2, r7, #4
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fe95 	bl	8004a80 <xTaskCheckForTimeOut>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d123      	bne.n	8003da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5e:	f000 f917 	bl	8003f90 <prvIsQueueEmpty>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fdbb 	bl	80048ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d78:	f000 f8b8 	bl	8003eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d7c:	f000 fbde 	bl	800453c <xTaskResumeAll>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d189      	bne.n	8003c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <xQueueReceive+0x1bc>)
 8003d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	e780      	b.n	8003c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f8a7 	bl	8003eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d9e:	f000 fbcd 	bl	800453c <xTaskResumeAll>
 8003da2:	e77a      	b.n	8003c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da6:	f000 f8a1 	bl	8003eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003daa:	f000 fbc7 	bl	800453c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db0:	f000 f8ee 	bl	8003f90 <prvIsQueueEmpty>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f43f af6f 	beq.w	8003c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	; 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d14d      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ffa4 	bl	8004d44 <xTaskPriorityDisinherit>
 8003dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e043      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d119      	bne.n	8003e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6858      	ldr	r0, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	f006 ffd7 	bl	800adca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d32b      	bcc.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e026      	b.n	8003e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68d8      	ldr	r0, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	f006 ffbd 	bl	800adca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d207      	bcs.n	8003e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d105      	bne.n	8003e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d303      	bcc.n	8003ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	461a      	mov	r2, r3
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f006 ff73 	bl	800adca <memcpy>
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f001 fd96 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f00:	e011      	b.n	8003f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd3c 	bl	800498c <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f1a:	f000 fe13 	bl	8004b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dce9      	bgt.n	8003f02 <prvUnlockQueue+0x16>
 8003f2e:	e000      	b.n	8003f32 <prvUnlockQueue+0x46>
					break;
 8003f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fda3 	bl	8005a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f3e:	f001 fd71 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4a:	e011      	b.n	8003f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3310      	adds	r3, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fd17 	bl	800498c <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f64:	f000 fdee 	bl	8004b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dce9      	bgt.n	8003f4c <prvUnlockQueue+0x60>
 8003f78:	e000      	b.n	8003f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f84:	f001 fd7e 	bl	8005a84 <vPortExitCritical>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f98:	f001 fd44 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e001      	b.n	8003fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f001 fd69 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fc4:	f001 fd2e 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d102      	bne.n	8003fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f001 fd51 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e014      	b.n	8004026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <vQueueAddToRegistry+0x50>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004008:	490c      	ldr	r1, [pc, #48]	; (800403c <vQueueAddToRegistry+0x50>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <vQueueAddToRegistry+0x50>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800401e:	e006      	b.n	800402e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9e7      	bls.n	8003ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000f6c 	.word	0x20000f6c

08004040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004050:	f001 fce8 	bl	8005a24 <vPortEnterCritical>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004060:	d103      	bne.n	800406a <vQueueWaitForMessageRestricted+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d103      	bne.n	8004080 <vQueueWaitForMessageRestricted+0x40>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004080:	f001 fd00 	bl	8005a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc4d 	bl	8004934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff26 	bl	8003eec <prvUnlockQueue>
	}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08e      	sub	sp, #56	; 0x38
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	623b      	str	r3, [r7, #32]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTaskCreateStatic+0x46>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61fb      	str	r3, [r7, #28]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040ee:	235c      	movs	r3, #92	; 0x5c
 80040f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b5c      	cmp	r3, #92	; 0x5c
 80040f6:	d00a      	beq.n	800410e <xTaskCreateStatic+0x66>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61bb      	str	r3, [r7, #24]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800410e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01e      	beq.n	8004154 <xTaskCreateStatic+0xac>
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800412e:	2300      	movs	r3, #0
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	9302      	str	r3, [sp, #8]
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f850 	bl	80041ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800414c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414e:	f000 f8dd 	bl	800430c <prvAddNewTaskToReadyList>
 8004152:	e001      	b.n	8004158 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004158:	697b      	ldr	r3, [r7, #20]
	}
 800415a:	4618      	mov	r0, r3
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004162:	b580      	push	{r7, lr}
 8004164:	b08c      	sub	sp, #48	; 0x30
 8004166:	af04      	add	r7, sp, #16
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fd76 	bl	8005c68 <pvPortMalloc>
 800417c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004184:	205c      	movs	r0, #92	; 0x5c
 8004186:	f001 fd6f 	bl	8005c68 <pvPortMalloc>
 800418a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
 8004198:	e005      	b.n	80041a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f001 fe30 	bl	8005e00 <vPortFree>
 80041a0:	e001      	b.n	80041a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9303      	str	r3, [sp, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f80e 	bl	80041ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041d0:	69f8      	ldr	r0, [r7, #28]
 80041d2:	f000 f89b 	bl	800430c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e002      	b.n	80041e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041e2:	69bb      	ldr	r3, [r7, #24]
	}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	21a5      	movs	r1, #165	; 0xa5
 8004206:	f006 fd6f 	bl	800ace8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004214:	3b01      	subs	r3, #1
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <prvInitialiseNewTask+0x58>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	617b      	str	r3, [r7, #20]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e012      	b.n	8004276 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	7819      	ldrb	r1, [r3, #0]
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	3334      	adds	r3, #52	; 0x34
 8004260:	460a      	mov	r2, r1
 8004262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d9e9      	bls.n	8004250 <prvInitialiseNewTask+0x64>
 800427c:	e000      	b.n	8004280 <prvInitialiseNewTask+0x94>
			{
				break;
 800427e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004288:	e003      	b.n	8004292 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	2b37      	cmp	r3, #55	; 0x37
 8004296:	d901      	bls.n	800429c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004298:	2337      	movs	r3, #55	; 0x37
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f978 	bl	80035a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	3318      	adds	r3, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f973 	bl	80035a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	69b8      	ldr	r0, [r7, #24]
 80042ec:	f001 fa70 	bl	80057d0 <pxPortInitialiseStack>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004314:	f001 fb86 	bl	8005a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004318:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d110      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f000 fc28 	bl	8004b8c <prvInitialiseTaskLists>
 800433c:	e00d      	b.n	800435a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	429a      	cmp	r2, r3
 8004352:	d802      	bhi.n	800435a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <prvAddNewTaskToReadyList+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <prvAddNewTaskToReadyList+0xd8>)
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7ff f913 	bl	80035c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439c:	f001 fb72 	bl	8005a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d207      	bcs.n	80043c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvAddNewTaskToReadyList+0xdc>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20001480 	.word	0x20001480
 80043d4:	20000fac 	.word	0x20000fac
 80043d8:	2000148c 	.word	0x2000148c
 80043dc:	2000149c 	.word	0x2000149c
 80043e0:	20001488 	.word	0x20001488
 80043e4:	20000fb0 	.word	0x20000fb0
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <vTaskDelay+0x60>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <vTaskDelay+0x30>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60bb      	str	r3, [r7, #8]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800441c:	f000 f880 	bl	8004520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004420:	2100      	movs	r1, #0
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fe32 	bl	800508c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004428:	f000 f888 	bl	800453c <xTaskResumeAll>
 800442c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d107      	bne.n	8004444 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <vTaskDelay+0x64>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200014a8 	.word	0x200014a8
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004462:	463a      	mov	r2, r7
 8004464:	1d39      	adds	r1, r7, #4
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff f848 	bl	8003500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	9202      	str	r2, [sp, #8]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	460a      	mov	r2, r1
 8004482:	4921      	ldr	r1, [pc, #132]	; (8004508 <vTaskStartScheduler+0xb4>)
 8004484:	4821      	ldr	r0, [pc, #132]	; (800450c <vTaskStartScheduler+0xb8>)
 8004486:	f7ff fe0f 	bl	80040a8 <xTaskCreateStatic>
 800448a:	4603      	mov	r3, r0
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <vTaskStartScheduler+0xbc>)
 800448e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004490:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <vTaskStartScheduler+0xbc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e001      	b.n	80044a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044a8:	f000 fe44 	bl	8005134 <xTimerCreateTimerTask>
 80044ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d116      	bne.n	80044e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <vTaskStartScheduler+0xc0>)
 80044ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <vTaskStartScheduler+0xc4>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <vTaskStartScheduler+0xc8>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044dc:	f001 fa00 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044e0:	e00e      	b.n	8004500 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e8:	d10a      	bne.n	8004500 <vTaskStartScheduler+0xac>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vTaskStartScheduler+0xaa>
}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	0800b9ec 	.word	0x0800b9ec
 800450c:	08004b5d 	.word	0x08004b5d
 8004510:	200014a4 	.word	0x200014a4
 8004514:	200014a0 	.word	0x200014a0
 8004518:	2000148c 	.word	0x2000148c
 800451c:	20001484 	.word	0x20001484

08004520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <vTaskSuspendAll+0x18>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a03      	ldr	r2, [pc, #12]	; (8004538 <vTaskSuspendAll+0x18>)
 800452c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800452e:	bf00      	nop
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	200014a8 	.word	0x200014a8

0800453c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800454a:	4b42      	ldr	r3, [pc, #264]	; (8004654 <xTaskResumeAll+0x118>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <xTaskResumeAll+0x2c>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	603b      	str	r3, [r7, #0]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004568:	f001 fa5c 	bl	8005a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800456c:	4b39      	ldr	r3, [pc, #228]	; (8004654 <xTaskResumeAll+0x118>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3b01      	subs	r3, #1
 8004572:	4a38      	ldr	r2, [pc, #224]	; (8004654 <xTaskResumeAll+0x118>)
 8004574:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <xTaskResumeAll+0x118>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d162      	bne.n	8004644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800457e:	4b36      	ldr	r3, [pc, #216]	; (8004658 <xTaskResumeAll+0x11c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d05e      	beq.n	8004644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004586:	e02f      	b.n	80045e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <xTaskResumeAll+0x120>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3318      	adds	r3, #24
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f871 	bl	800367c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3304      	adds	r3, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f86c 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <xTaskResumeAll+0x124>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d903      	bls.n	80045b8 <xTaskResumeAll+0x7c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <xTaskResumeAll+0x124>)
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4a27      	ldr	r2, [pc, #156]	; (8004664 <xTaskResumeAll+0x128>)
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f7fe fff7 	bl	80035c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <xTaskResumeAll+0x12c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <xTaskResumeAll+0x130>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <xTaskResumeAll+0x120>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1cb      	bne.n	8004588 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045f6:	f000 fb67 	bl	8004cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <xTaskResumeAll+0x134>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d010      	beq.n	8004628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004606:	f000 f859 	bl	80046bc <xTaskIncrementTick>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <xTaskResumeAll+0x130>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f1      	bne.n	8004606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <xTaskResumeAll+0x134>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <xTaskResumeAll+0x130>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <xTaskResumeAll+0x138>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004644:	f001 fa1e 	bl	8005a84 <vPortExitCritical>

	return xAlreadyYielded;
 8004648:	68bb      	ldr	r3, [r7, #8]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200014a8 	.word	0x200014a8
 8004658:	20001480 	.word	0x20001480
 800465c:	20001440 	.word	0x20001440
 8004660:	20001488 	.word	0x20001488
 8004664:	20000fb0 	.word	0x20000fb0
 8004668:	20000fac 	.word	0x20000fac
 800466c:	20001494 	.word	0x20001494
 8004670:	20001490 	.word	0x20001490
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <xTaskGetTickCount+0x1c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004684:	687b      	ldr	r3, [r7, #4]
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20001484 	.word	0x20001484

08004698 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800469e:	f001 faa3 	bl	8005be8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80046a6:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <xTaskGetTickCountFromISR+0x20>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046ac:	683b      	ldr	r3, [r7, #0]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20001484 	.word	0x20001484

080046bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c6:	4b4f      	ldr	r3, [pc, #316]	; (8004804 <xTaskIncrementTick+0x148>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 808f 	bne.w	80047ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046d0:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <xTaskIncrementTick+0x14c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046d8:	4a4b      	ldr	r2, [pc, #300]	; (8004808 <xTaskIncrementTick+0x14c>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d120      	bne.n	8004726 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046e4:	4b49      	ldr	r3, [pc, #292]	; (800480c <xTaskIncrementTick+0x150>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <xTaskIncrementTick+0x48>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	603b      	str	r3, [r7, #0]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <xTaskIncrementTick+0x46>
 8004704:	4b41      	ldr	r3, [pc, #260]	; (800480c <xTaskIncrementTick+0x150>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <xTaskIncrementTick+0x154>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <xTaskIncrementTick+0x150>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4a3f      	ldr	r2, [pc, #252]	; (8004810 <xTaskIncrementTick+0x154>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <xTaskIncrementTick+0x158>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	4a3d      	ldr	r2, [pc, #244]	; (8004814 <xTaskIncrementTick+0x158>)
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	f000 fad1 	bl	8004cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004726:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <xTaskIncrementTick+0x15c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d349      	bcc.n	80047c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <xTaskIncrementTick+0x150>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <xTaskIncrementTick+0x15c>)
 800473c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004740:	601a      	str	r2, [r3, #0]
					break;
 8004742:	e03f      	b.n	80047c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b31      	ldr	r3, [pc, #196]	; (800480c <xTaskIncrementTick+0x150>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d203      	bcs.n	8004764 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800475c:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <xTaskIncrementTick+0x15c>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004762:	e02f      	b.n	80047c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe ff87 	bl	800367c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3318      	adds	r3, #24
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe ff7e 	bl	800367c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <xTaskIncrementTick+0x160>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <xTaskIncrementTick+0xd8>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a22      	ldr	r2, [pc, #136]	; (800481c <xTaskIncrementTick+0x160>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <xTaskIncrementTick+0x164>)
 80047a2:	441a      	add	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fe ff09 	bl	80035c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <xTaskIncrementTick+0x168>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b8      	bcc.n	8004730 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c2:	e7b5      	b.n	8004730 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <xTaskIncrementTick+0x168>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	4915      	ldr	r1, [pc, #84]	; (8004820 <xTaskIncrementTick+0x164>)
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d901      	bls.n	80047e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <xTaskIncrementTick+0x16c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e004      	b.n	80047f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <xTaskIncrementTick+0x170>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <xTaskIncrementTick+0x170>)
 80047f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047f8:	697b      	ldr	r3, [r7, #20]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200014a8 	.word	0x200014a8
 8004808:	20001484 	.word	0x20001484
 800480c:	20001438 	.word	0x20001438
 8004810:	2000143c 	.word	0x2000143c
 8004814:	20001498 	.word	0x20001498
 8004818:	200014a0 	.word	0x200014a0
 800481c:	20001488 	.word	0x20001488
 8004820:	20000fb0 	.word	0x20000fb0
 8004824:	20000fac 	.word	0x20000fac
 8004828:	20001494 	.word	0x20001494
 800482c:	20001490 	.word	0x20001490

08004830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004836:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <vTaskSwitchContext+0xa8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <vTaskSwitchContext+0xac>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004844:	e041      	b.n	80048ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <vTaskSwitchContext+0xac>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <vTaskSwitchContext+0xb0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e010      	b.n	8004876 <vTaskSwitchContext+0x46>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <vTaskSwitchContext+0x40>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vTaskSwitchContext+0x3e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b01      	subs	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	491b      	ldr	r1, [pc, #108]	; (80048e4 <vTaskSwitchContext+0xb4>)
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0e4      	beq.n	8004854 <vTaskSwitchContext+0x24>
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <vTaskSwitchContext+0xb4>)
 8004896:	4413      	add	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	3308      	adds	r3, #8
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d104      	bne.n	80048ba <vTaskSwitchContext+0x8a>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <vTaskSwitchContext+0xb8>)
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <vTaskSwitchContext+0xb0>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6013      	str	r3, [r2, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	200014a8 	.word	0x200014a8
 80048dc:	20001494 	.word	0x20001494
 80048e0:	20001488 	.word	0x20001488
 80048e4:	20000fb0 	.word	0x20000fb0
 80048e8:	20000fac 	.word	0x20000fac

080048ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	60fb      	str	r3, [r7, #12]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <vTaskPlaceOnEventList+0x44>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3318      	adds	r3, #24
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fe fe75 	bl	800360a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004920:	2101      	movs	r1, #1
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f000 fbb2 	bl	800508c <prvAddCurrentTaskToDelayedList>
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000fac 	.word	0x20000fac

08004934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	617b      	str	r3, [r7, #20]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vTaskPlaceOnEventListRestricted+0x54>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3318      	adds	r3, #24
 8004962:	4619      	mov	r1, r3
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7fe fe2c 	bl	80035c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004974:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f000 fb87 	bl	800508c <prvAddCurrentTaskToDelayedList>
	}
 800497e:	bf00      	nop
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000fac 	.word	0x20000fac

0800498c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	60fb      	str	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fe5d 	bl	800367c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <xTaskRemoveFromEventList+0xb0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11d      	bne.n	8004a06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe54 	bl	800367c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <xTaskRemoveFromEventList+0xb4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <xTaskRemoveFromEventList+0x5c>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <xTaskRemoveFromEventList+0xb4>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <xTaskRemoveFromEventList+0xb8>)
 80049f6:	441a      	add	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7fe fddf 	bl	80035c2 <vListInsertEnd>
 8004a04:	e005      	b.n	8004a12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3318      	adds	r3, #24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	480e      	ldr	r0, [pc, #56]	; (8004a48 <xTaskRemoveFromEventList+0xbc>)
 8004a0e:	f7fe fdd8 	bl	80035c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <xTaskRemoveFromEventList+0xc0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d905      	bls.n	8004a2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <xTaskRemoveFromEventList+0xc4>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e001      	b.n	8004a30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a30:	697b      	ldr	r3, [r7, #20]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200014a8 	.word	0x200014a8
 8004a40:	20001488 	.word	0x20001488
 8004a44:	20000fb0 	.word	0x20000fb0
 8004a48:	20001440 	.word	0x20001440
 8004a4c:	20000fac 	.word	0x20000fac
 8004a50:	20001494 	.word	0x20001494

08004a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <vTaskInternalSetTimeOutState+0x24>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <vTaskInternalSetTimeOutState+0x28>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20001498 	.word	0x20001498
 8004a7c:	20001484 	.word	0x20001484

08004a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	613b      	str	r3, [r7, #16]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	60fb      	str	r3, [r7, #12]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ac2:	f000 ffaf 	bl	8005a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <xTaskCheckForTimeOut+0xbc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ade:	d102      	bne.n	8004ae6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e023      	b.n	8004b2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <xTaskCheckForTimeOut+0xc0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d007      	beq.n	8004b02 <xTaskCheckForTimeOut+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e015      	b.n	8004b2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d20b      	bcs.n	8004b24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff9b 	bl	8004a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e004      	b.n	8004b2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b2e:	f000 ffa9 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8004b32:	69fb      	ldr	r3, [r7, #28]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20001484 	.word	0x20001484
 8004b40:	20001498 	.word	0x20001498

08004b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <vTaskMissedYield+0x14>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20001494 	.word	0x20001494

08004b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b64:	f000 f852 	bl	8004c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <prvIdleTask+0x28>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d9f9      	bls.n	8004b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <prvIdleTask+0x2c>)
 8004b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b80:	e7f0      	b.n	8004b64 <prvIdleTask+0x8>
 8004b82:	bf00      	nop
 8004b84:	20000fb0 	.word	0x20000fb0
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	e00c      	b.n	8004bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <prvInitialiseTaskLists+0x60>)
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fcde 	bl	8003568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b37      	cmp	r3, #55	; 0x37
 8004bb6:	d9ef      	bls.n	8004b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bb8:	480d      	ldr	r0, [pc, #52]	; (8004bf0 <prvInitialiseTaskLists+0x64>)
 8004bba:	f7fe fcd5 	bl	8003568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bbe:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <prvInitialiseTaskLists+0x68>)
 8004bc0:	f7fe fcd2 	bl	8003568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bc4:	480c      	ldr	r0, [pc, #48]	; (8004bf8 <prvInitialiseTaskLists+0x6c>)
 8004bc6:	f7fe fccf 	bl	8003568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bca:	480c      	ldr	r0, [pc, #48]	; (8004bfc <prvInitialiseTaskLists+0x70>)
 8004bcc:	f7fe fccc 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bd0:	480b      	ldr	r0, [pc, #44]	; (8004c00 <prvInitialiseTaskLists+0x74>)
 8004bd2:	f7fe fcc9 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <prvInitialiseTaskLists+0x78>)
 8004bd8:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <prvInitialiseTaskLists+0x64>)
 8004bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <prvInitialiseTaskLists+0x7c>)
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <prvInitialiseTaskLists+0x68>)
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000fb0 	.word	0x20000fb0
 8004bf0:	20001410 	.word	0x20001410
 8004bf4:	20001424 	.word	0x20001424
 8004bf8:	20001440 	.word	0x20001440
 8004bfc:	20001454 	.word	0x20001454
 8004c00:	2000146c 	.word	0x2000146c
 8004c04:	20001438 	.word	0x20001438
 8004c08:	2000143c 	.word	0x2000143c

08004c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c12:	e019      	b.n	8004c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c14:	f000 ff06 	bl	8005a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <prvCheckTasksWaitingTermination+0x50>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fd29 	bl	800367c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <prvCheckTasksWaitingTermination+0x54>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <prvCheckTasksWaitingTermination+0x54>)
 8004c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <prvCheckTasksWaitingTermination+0x58>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <prvCheckTasksWaitingTermination+0x58>)
 8004c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c3e:	f000 ff21 	bl	8005a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f810 	bl	8004c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvCheckTasksWaitingTermination+0x58>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e1      	bne.n	8004c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20001454 	.word	0x20001454
 8004c60:	20001480 	.word	0x20001480
 8004c64:	20001468 	.word	0x20001468

08004c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f8be 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 f8bb 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c8a:	e018      	b.n	8004cbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d103      	bne.n	8004c9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f001 f8b2 	bl	8005e00 <vPortFree>
	}
 8004c9c:	e00f      	b.n	8004cbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d00a      	beq.n	8004cbe <prvDeleteTCB+0x56>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <prvDeleteTCB+0x54>
	}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <prvResetNextTaskUnblockTime+0x38>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvResetNextTaskUnblockTime+0x3c>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ce0:	e008      	b.n	8004cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <prvResetNextTaskUnblockTime+0x38>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <prvResetNextTaskUnblockTime+0x3c>)
 8004cf2:	6013      	str	r3, [r2, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20001438 	.word	0x20001438
 8004d04:	200014a0 	.word	0x200014a0

08004d08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <xTaskGetSchedulerState+0x34>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d16:	2301      	movs	r3, #1
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	e008      	b.n	8004d2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <xTaskGetSchedulerState+0x38>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d24:	2302      	movs	r3, #2
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e001      	b.n	8004d2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d2e:	687b      	ldr	r3, [r7, #4]
	}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	2000148c 	.word	0x2000148c
 8004d40:	200014a8 	.word	0x200014a8

08004d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d056      	beq.n	8004e08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <xTaskPriorityDisinherit+0xd0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d00a      	beq.n	8004d7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d02c      	beq.n	8004e08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d128      	bne.n	8004e08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fc5e 	bl	800367c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xTaskPriorityDisinherit+0xd4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d903      	bls.n	8004de8 <xTaskPriorityDisinherit+0xa4>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <xTaskPriorityDisinherit+0xd4>)
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <xTaskPriorityDisinherit+0xd8>)
 8004df6:	441a      	add	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f7fe fbdf 	bl	80035c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e08:	697b      	ldr	r3, [r7, #20]
	}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000fac 	.word	0x20000fac
 8004e18:	20001488 	.word	0x20001488
 8004e1c:	20000fb0 	.word	0x20000fb0

08004e20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004e2e:	f000 fdf9 	bl	8005a24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004e32:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d01a      	beq.n	8004e76 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	43d2      	mvns	r2, r2
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e5e:	2101      	movs	r1, #1
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f000 f913 	bl	800508c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <xTaskNotifyWait+0xb0>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e76:	f000 fe05 	bl	8005a84 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004e7a:	f000 fdd3 	bl	8005a24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d002      	beq.n	8004ea2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e008      	b.n	8004eb4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	43d2      	mvns	r2, r2
 8004eac:	400a      	ands	r2, r1
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <xTaskNotifyWait+0xac>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004ebe:	f000 fde1 	bl	8005a84 <vPortExitCritical>

		return xReturn;
 8004ec2:	697b      	ldr	r3, [r7, #20]
	}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000fac 	.word	0x20000fac
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f04:	f000 fe70 	bl	8005be8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004f0c:	f3ef 8211 	mrs	r2, BASEPRI
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	623a      	str	r2, [r7, #32]
 8004f22:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004f24:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d828      	bhi.n	8004fa0 <xTaskGenericNotifyFromISR+0xcc>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <xTaskGenericNotifyFromISR+0x80>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004fc1 	.word	0x08004fc1
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004f77 	.word	0x08004f77
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004f8b 	.word	0x08004f8b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f74:	e027      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f80:	e021      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004f88:	e01d      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d003      	beq.n	8004f9a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004f98:	e015      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004f9e:	e012      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa8:	d00c      	beq.n	8004fc4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	61bb      	str	r3, [r7, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xTaskGenericNotifyFromISR+0xea>
					break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004fc4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d146      	bne.n	800505c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	617b      	str	r3, [r7, #20]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fec:	4b21      	ldr	r3, [pc, #132]	; (8005074 <xTaskGenericNotifyFromISR+0x1a0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11d      	bne.n	8005030 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe fb3f 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005002:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <xTaskGenericNotifyFromISR+0x1a4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d903      	bls.n	8005012 <xTaskGenericNotifyFromISR+0x13e>
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <xTaskGenericNotifyFromISR+0x1a4>)
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <xTaskGenericNotifyFromISR+0x1a8>)
 8005020:	441a      	add	r2, r3
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7fe faca 	bl	80035c2 <vListInsertEnd>
 800502e:	e005      	b.n	800503c <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	3318      	adds	r3, #24
 8005034:	4619      	mov	r1, r3
 8005036:	4812      	ldr	r0, [pc, #72]	; (8005080 <xTaskGenericNotifyFromISR+0x1ac>)
 8005038:	f7fe fac3 	bl	80035c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4b10      	ldr	r3, [pc, #64]	; (8005084 <xTaskGenericNotifyFromISR+0x1b0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	429a      	cmp	r2, r3
 8005048:	d908      	bls.n	800505c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800504a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <xTaskGenericNotifyFromISR+0x1b4>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f383 8811 	msr	BASEPRI, r3
}
 8005066:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800506a:	4618      	mov	r0, r3
 800506c:	3738      	adds	r7, #56	; 0x38
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200014a8 	.word	0x200014a8
 8005078:	20001488 	.word	0x20001488
 800507c:	20000fb0 	.word	0x20000fb0
 8005080:	20001440 	.word	0x20001440
 8005084:	20000fac 	.word	0x20000fac
 8005088:	20001494 	.word	0x20001494

0800508c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <prvAddCurrentTaskToDelayedList+0x90>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe faea 	bl	800367c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ae:	d10a      	bne.n	80050c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4819      	ldr	r0, [pc, #100]	; (8005124 <prvAddCurrentTaskToDelayedList+0x98>)
 80050c0:	f7fe fa7f 	bl	80035c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c4:	e026      	b.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d209      	bcs.n	80050f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe fa8d 	bl	800360a <vListInsert>
}
 80050f0:	e010      	b.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fe fa83 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d202      	bcs.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20001484 	.word	0x20001484
 8005120:	20000fac 	.word	0x20000fac
 8005124:	2000146c 	.word	0x2000146c
 8005128:	2000143c 	.word	0x2000143c
 800512c:	20001438 	.word	0x20001438
 8005130:	200014a0 	.word	0x200014a0

08005134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800513e:	f000 fb07 	bl	8005750 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xTimerCreateTimerTask+0x80>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d021      	beq.n	800518e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005152:	1d3a      	adds	r2, r7, #4
 8005154:	f107 0108 	add.w	r1, r7, #8
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe f9e9 	bl	8003534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	9202      	str	r2, [sp, #8]
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	2302      	movs	r3, #2
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	460a      	mov	r2, r1
 8005174:	4910      	ldr	r1, [pc, #64]	; (80051b8 <xTimerCreateTimerTask+0x84>)
 8005176:	4811      	ldr	r0, [pc, #68]	; (80051bc <xTimerCreateTimerTask+0x88>)
 8005178:	f7fe ff96 	bl	80040a8 <xTaskCreateStatic>
 800517c:	4603      	mov	r3, r0
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <xTimerCreateTimerTask+0x8c>)
 8005180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <xTimerCreateTimerTask+0x8c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200014dc 	.word	0x200014dc
 80051b8:	0800b9f4 	.word	0x0800b9f4
 80051bc:	080052f9 	.word	0x080052f9
 80051c0:	200014e0 	.word	0x200014e0

080051c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <xTimerGenericCommand+0x98>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02a      	beq.n	8005250 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b05      	cmp	r3, #5
 800520a:	dc18      	bgt.n	800523e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800520c:	f7ff fd7c 	bl	8004d08 <xTaskGetSchedulerState>
 8005210:	4603      	mov	r3, r0
 8005212:	2b02      	cmp	r3, #2
 8005214:	d109      	bne.n	800522a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <xTimerGenericCommand+0x98>)
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f107 0110 	add.w	r1, r7, #16
 800521e:	2300      	movs	r3, #0
 8005220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005222:	f7fe fb59 	bl	80038d8 <xQueueGenericSend>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24
 8005228:	e012      	b.n	8005250 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <xTimerGenericCommand+0x98>)
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f107 0110 	add.w	r1, r7, #16
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	f7fe fb4f 	bl	80038d8 <xQueueGenericSend>
 800523a:	6278      	str	r0, [r7, #36]	; 0x24
 800523c:	e008      	b.n	8005250 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <xTimerGenericCommand+0x98>)
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f107 0110 	add.w	r1, r7, #16
 8005246:	2300      	movs	r3, #0
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	f7fe fc43 	bl	8003ad4 <xQueueGenericSendFromISR>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200014dc 	.word	0x200014dc

08005260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <prvProcessExpiredTimer+0x94>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe f9ff 	bl	800367c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d022      	beq.n	80052d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	18d1      	adds	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f000 f8d1 	bl	8005440 <prvInsertTimerInActiveList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01f      	beq.n	80052e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff ff88 	bl	80051c4 <xTimerGenericCommand>
 80052b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60fb      	str	r3, [r7, #12]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	4798      	blx	r3
}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	200014d4 	.word	0x200014d4

080052f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f857 	bl	80053b8 <prvGetNextExpireTime>
 800530a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f803 	bl	800531c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005316:	f000 f8d5 	bl	80054c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531a:	e7f1      	b.n	8005300 <prvTimerTask+0x8>

0800531c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005326:	f7ff f8fb 	bl	8004520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532a:	f107 0308 	add.w	r3, r7, #8
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f866 	bl	8005400 <prvSampleTimeNow>
 8005334:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d130      	bne.n	800539e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <prvProcessTimerOrBlockTask+0x3c>
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d806      	bhi.n	8005358 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800534a:	f7ff f8f7 	bl	800453c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff85 	bl	8005260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005356:	e024      	b.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <prvProcessTimerOrBlockTask+0x90>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <prvProcessTimerOrBlockTask+0x50>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <prvProcessTimerOrBlockTask+0x52>
 800536c:	2300      	movs	r3, #0
 800536e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <prvProcessTimerOrBlockTask+0x94>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	4619      	mov	r1, r3
 800537e:	f7fe fe5f 	bl	8004040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005382:	f7ff f8db 	bl	800453c <xTaskResumeAll>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <prvProcessTimerOrBlockTask+0x98>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
}
 800539c:	e001      	b.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800539e:	f7ff f8cd 	bl	800453c <xTaskResumeAll>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	200014d8 	.word	0x200014d8
 80053b0:	200014dc 	.word	0x200014dc
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <prvGetNextExpireTime+0x44>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <prvGetNextExpireTime+0x16>
 80053ca:	2201      	movs	r2, #1
 80053cc:	e000      	b.n	80053d0 <prvGetNextExpireTime+0x18>
 80053ce:	2200      	movs	r2, #0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <prvGetNextExpireTime+0x44>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e001      	b.n	80053ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	200014d4 	.word	0x200014d4

08005400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005408:	f7ff f936 	bl	8004678 <xTaskGetTickCount>
 800540c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <prvSampleTimeNow+0x3c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d205      	bcs.n	8005424 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005418:	f000 f936 	bl	8005688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e002      	b.n	800542a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800542a:	4a04      	ldr	r2, [pc, #16]	; (800543c <prvSampleTimeNow+0x3c>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200014e4 	.word	0x200014e4

08005440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d812      	bhi.n	800548c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e01b      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <prvInsertTimerInActiveList+0x7c>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fe f8c0 	bl	800360a <vListInsert>
 800548a:	e012      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d206      	bcs.n	80054a2 <prvInsertTimerInActiveList+0x62>
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d302      	bcc.n	80054a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e007      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <prvInsertTimerInActiveList+0x80>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7fe f8ac 	bl	800360a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054b2:	697b      	ldr	r3, [r7, #20]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	200014d8 	.word	0x200014d8
 80054c0:	200014d4 	.word	0x200014d4

080054c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ca:	e0ca      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da18      	bge.n	8005504 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	3304      	adds	r3, #4
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	61fb      	str	r3, [r7, #28]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	6850      	ldr	r0, [r2, #4]
 80054fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	4611      	mov	r1, r2
 8005502:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f2c0 80ab 	blt.w	8005662 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe f8ad 	bl	800367c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005522:	463b      	mov	r3, r7
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff6b 	bl	8005400 <prvSampleTimeNow>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b09      	cmp	r3, #9
 8005530:	f200 8096 	bhi.w	8005660 <prvProcessReceivedCommands+0x19c>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <prvProcessReceivedCommands+0x78>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005565 	.word	0x08005565
 8005540:	08005565 	.word	0x08005565
 8005544:	08005565 	.word	0x08005565
 8005548:	080055d9 	.word	0x080055d9
 800554c:	080055ed 	.word	0x080055ed
 8005550:	08005637 	.word	0x08005637
 8005554:	08005565 	.word	0x08005565
 8005558:	08005565 	.word	0x08005565
 800555c:	080055d9 	.word	0x080055d9
 8005560:	080055ed 	.word	0x080055ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	18d1      	adds	r1, r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005584:	f7ff ff5c 	bl	8005440 <prvInsertTimerInActiveList>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d069      	beq.n	8005662 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05e      	beq.n	8005662 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	441a      	add	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b6:	f7ff fe05 	bl	80051c4 <xTimerGenericCommand>
 80055ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14f      	bne.n	8005662 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61bb      	str	r3, [r7, #24]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055ea:	e03a      	b.n	8005662 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	617b      	str	r3, [r7, #20]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	18d1      	adds	r1, r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005630:	f7ff ff06 	bl	8005440 <prvInsertTimerInActiveList>
					break;
 8005634:	e015      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 fbdb 	bl	8005e00 <vPortFree>
 800564a:	e00a      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800565e:	e000      	b.n	8005662 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <prvProcessReceivedCommands+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1d39      	adds	r1, r7, #4
 8005668:	2200      	movs	r2, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe face 	bl	8003c0c <xQueueReceive>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	f47f af2a 	bne.w	80054cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3730      	adds	r7, #48	; 0x30
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200014dc 	.word	0x200014dc

08005688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800568e:	e048      	b.n	8005722 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	4b2b      	ldr	r3, [pc, #172]	; (8005748 <prvSwitchTimerLists+0xc0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fd ffe7 	bl	800367c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02e      	beq.n	8005722 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d90e      	bls.n	80056f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056e2:	4b19      	ldr	r3, [pc, #100]	; (8005748 <prvSwitchTimerLists+0xc0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fd ff8c 	bl	800360a <vListInsert>
 80056f2:	e016      	b.n	8005722 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056f4:	2300      	movs	r3, #0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2300      	movs	r3, #0
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fd60 	bl	80051c4 <xTimerGenericCommand>
 8005704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	603b      	str	r3, [r7, #0]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1b1      	bne.n	8005690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <prvSwitchTimerLists+0xc0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <prvSwitchTimerLists+0xc4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a04      	ldr	r2, [pc, #16]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <prvSwitchTimerLists+0xc4>)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200014d4 	.word	0x200014d4
 800574c:	200014d8 	.word	0x200014d8

08005750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005756:	f000 f965 	bl	8005a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d120      	bne.n	80057a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005762:	4814      	ldr	r0, [pc, #80]	; (80057b4 <prvCheckForValidListAndQueue+0x64>)
 8005764:	f7fd ff00 	bl	8003568 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005768:	4813      	ldr	r0, [pc, #76]	; (80057b8 <prvCheckForValidListAndQueue+0x68>)
 800576a:	f7fd fefd 	bl	8003568 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <prvCheckForValidListAndQueue+0x6c>)
 8005770:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <prvCheckForValidListAndQueue+0x64>)
 8005772:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <prvCheckForValidListAndQueue+0x70>)
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <prvCheckForValidListAndQueue+0x68>)
 8005778:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <prvCheckForValidListAndQueue+0x74>)
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <prvCheckForValidListAndQueue+0x78>)
 8005782:	2110      	movs	r1, #16
 8005784:	200a      	movs	r0, #10
 8005786:	f7fe f80b 	bl	80037a0 <xQueueGenericCreateStatic>
 800578a:	4603      	mov	r3, r0
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800578e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	490b      	ldr	r1, [pc, #44]	; (80057cc <prvCheckForValidListAndQueue+0x7c>)
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fc24 	bl	8003fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a4:	f000 f96e 	bl	8005a84 <vPortExitCritical>
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200014dc 	.word	0x200014dc
 80057b4:	200014ac 	.word	0x200014ac
 80057b8:	200014c0 	.word	0x200014c0
 80057bc:	200014d4 	.word	0x200014d4
 80057c0:	200014d8 	.word	0x200014d8
 80057c4:	20001588 	.word	0x20001588
 80057c8:	200014e8 	.word	0x200014e8
 80057cc:	0800b9fc 	.word	0x0800b9fc

080057d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3b04      	subs	r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b04      	subs	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <pxPortInitialiseStack+0x64>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b14      	subs	r3, #20
 800580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b04      	subs	r3, #4
 8005816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f06f 0202 	mvn.w	r2, #2
 800581e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b20      	subs	r3, #32
 8005824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	08005839 	.word	0x08005839

08005838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvTaskExitError+0x54>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800584a:	d00a      	beq.n	8005862 <prvTaskExitError+0x2a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <prvTaskExitError+0x28>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60bb      	str	r3, [r7, #8]
}
 8005874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005876:	bf00      	nop
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0fc      	beq.n	8005878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000064 	.word	0x20000064

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	20000fac 	.word	0x20000fac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ec:	f7fe ff20 	bl	8004830 <vTaskSwitchContext>
	prvTaskExitError();
 80059f0:	f7ff ff22 	bl	8005838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	200015d8 	.word	0x200015d8
 8005a14:	200015dc 	.word	0x200015dc
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	20000064 	.word	0x20000064
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
	}
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20000064 	.word	0x20000064
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000064 	.word	0x20000064
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe fe8e 	bl	8004830 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	20000fac 	.word	0x20000fac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7fe fdab 	bl	80046bc <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xPortSysTickHandler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000070 	.word	0x20000070
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	200015d8 	.word	0x200015d8
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	200015dc 	.word	0x200015dc

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7fe fc54 	bl	8004520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7fe fbc0 	bl	800453c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200021a0 	.word	0x200021a0
 8005dec:	200021b4 	.word	0x200021b4
 8005df0:	200021a4 	.word	0x200021a4
 8005df4:	20002198 	.word	0x20002198
 8005df8:	200021a8 	.word	0x200021a8
 8005dfc:	200021ac 	.word	0x200021ac

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7fe fb4a 	bl	8004520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7fe fb47 	bl	800453c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200021b4 	.word	0x200021b4
 8005ebc:	200021a4 	.word	0x200021a4
 8005ec0:	200021b0 	.word	0x200021b0

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200015e0 	.word	0x200015e0
 8005f74:	20002198 	.word	0x20002198
 8005f78:	200021a0 	.word	0x200021a0
 8005f7c:	200021a8 	.word	0x200021a8
 8005f80:	200021a4 	.word	0x200021a4
 8005f84:	200021b4 	.word	0x200021b4

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20002198 	.word	0x20002198
 8006038:	200021a0 	.word	0x200021a0

0800603c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006046:	2003      	movs	r0, #3
 8006048:	f000 f994 	bl	8006374 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800604c:	2000      	movs	r0, #0
 800604e:	f000 f80d 	bl	800606c <HAL_InitTick>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	71fb      	strb	r3, [r7, #7]
 800605c:	e001      	b.n	8006062 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800605e:	f003 ff0f 	bl	8009e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006062:	79fb      	ldrb	r3, [r7, #7]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <HAL_InitTick+0x6c>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d023      	beq.n	80060c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006080:	4b16      	ldr	r3, [pc, #88]	; (80060dc <HAL_InitTick+0x70>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <HAL_InitTick+0x6c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	4619      	mov	r1, r3
 800608a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800608e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f9af 	bl	80063fa <HAL_SYSTICK_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10f      	bne.n	80060c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d809      	bhi.n	80060bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060a8:	2200      	movs	r2, #0
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060b0:	f000 f96b 	bl	800638a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060b4:	4a0a      	ldr	r2, [pc, #40]	; (80060e0 <HAL_InitTick+0x74>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	e007      	b.n	80060cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	e004      	b.n	80060cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e001      	b.n	80060cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000006c 	.word	0x2000006c
 80060dc:	20000070 	.word	0x20000070
 80060e0:	20000068 	.word	0x20000068

080060e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <HAL_GetTick+0x14>)
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	200021b8 	.word	0x200021b8

080060fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006104:	f7ff ffee 	bl	80060e4 <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006114:	d005      	beq.n	8006122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_Delay+0x44>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006122:	bf00      	nop
 8006124:	f7ff ffde 	bl	80060e4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d8f7      	bhi.n	8006124 <HAL_Delay+0x28>
  {
  }
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000006c 	.word	0x2000006c

08006144 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8006148:	4b03      	ldr	r3, [pc, #12]	; (8006158 <HAL_GetUIDw0+0x14>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	1fff7590 	.word	0x1fff7590

0800615c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <HAL_GetUIDw1+0x14>)
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	1fff7594 	.word	0x1fff7594

08006174 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006178:	4b03      	ldr	r3, [pc, #12]	; (8006188 <HAL_GetUIDw2+0x14>)
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	1fff7598 	.word	0x1fff7598

0800618c <__NVIC_SetPriorityGrouping>:
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <__NVIC_SetPriorityGrouping+0x44>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061a8:	4013      	ands	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061be:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <__NVIC_SetPriorityGrouping+0x44>)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	60d3      	str	r3, [r2, #12]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	e000ed00 	.word	0xe000ed00

080061d4 <__NVIC_GetPriorityGrouping>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <__NVIC_GetPriorityGrouping+0x18>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	f003 0307 	and.w	r3, r3, #7
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <__NVIC_EnableIRQ>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db0b      	blt.n	800621a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	f003 021f 	and.w	r2, r3, #31
 8006208:	4907      	ldr	r1, [pc, #28]	; (8006228 <__NVIC_EnableIRQ+0x38>)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2001      	movs	r0, #1
 8006212:	fa00 f202 	lsl.w	r2, r0, r2
 8006216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	e000e100 	.word	0xe000e100

0800622c <__NVIC_DisableIRQ>:
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623a:	2b00      	cmp	r3, #0
 800623c:	db12      	blt.n	8006264 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	f003 021f 	and.w	r2, r3, #31
 8006244:	490a      	ldr	r1, [pc, #40]	; (8006270 <__NVIC_DisableIRQ+0x44>)
 8006246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2001      	movs	r0, #1
 800624e:	fa00 f202 	lsl.w	r2, r0, r2
 8006252:	3320      	adds	r3, #32
 8006254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006258:	f3bf 8f4f 	dsb	sy
}
 800625c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800625e:	f3bf 8f6f 	isb	sy
}
 8006262:	bf00      	nop
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	e000e100 	.word	0xe000e100

08006274 <__NVIC_SetPriority>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006284:	2b00      	cmp	r3, #0
 8006286:	db0a      	blt.n	800629e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	490c      	ldr	r1, [pc, #48]	; (80062c0 <__NVIC_SetPriority+0x4c>)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	0112      	lsls	r2, r2, #4
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	440b      	add	r3, r1
 8006298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800629c:	e00a      	b.n	80062b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	4908      	ldr	r1, [pc, #32]	; (80062c4 <__NVIC_SetPriority+0x50>)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	3b04      	subs	r3, #4
 80062ac:	0112      	lsls	r2, r2, #4
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	440b      	add	r3, r1
 80062b2:	761a      	strb	r2, [r3, #24]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000e100 	.word	0xe000e100
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b089      	sub	sp, #36	; 0x24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f1c3 0307 	rsb	r3, r3, #7
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	bf28      	it	cs
 80062e6:	2304      	movcs	r3, #4
 80062e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d902      	bls.n	80062f8 <NVIC_EncodePriority+0x30>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3b03      	subs	r3, #3
 80062f6:	e000      	b.n	80062fa <NVIC_EncodePriority+0x32>
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43da      	mvns	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	401a      	ands	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	43d9      	mvns	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006320:	4313      	orrs	r3, r2
         );
}
 8006322:	4618      	mov	r0, r3
 8006324:	3724      	adds	r7, #36	; 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006340:	d301      	bcc.n	8006346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006342:	2301      	movs	r3, #1
 8006344:	e00f      	b.n	8006366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006346:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <SysTick_Config+0x40>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3b01      	subs	r3, #1
 800634c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800634e:	210f      	movs	r1, #15
 8006350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006354:	f7ff ff8e 	bl	8006274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <SysTick_Config+0x40>)
 800635a:	2200      	movs	r2, #0
 800635c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <SysTick_Config+0x40>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000e010 	.word	0xe000e010

08006374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff05 	bl	800618c <__NVIC_SetPriorityGrouping>
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	4603      	mov	r3, r0
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800639c:	f7ff ff1a 	bl	80061d4 <__NVIC_GetPriorityGrouping>
 80063a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	6978      	ldr	r0, [r7, #20]
 80063a8:	f7ff ff8e 	bl	80062c8 <NVIC_EncodePriority>
 80063ac:	4602      	mov	r2, r0
 80063ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b2:	4611      	mov	r1, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff5d 	bl	8006274 <__NVIC_SetPriority>
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	4603      	mov	r3, r0
 80063ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff ff0d 	bl	80061f0 <__NVIC_EnableIRQ>
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	4603      	mov	r3, r0
 80063e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff ff1d 	bl	800622c <__NVIC_DisableIRQ>
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ff94 	bl	8006330 <SysTick_Config>
 8006408:	4603      	mov	r3, r0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e098      	b.n	8006558 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	4b4d      	ldr	r3, [pc, #308]	; (8006564 <HAL_DMA_Init+0x150>)
 800642e:	429a      	cmp	r2, r3
 8006430:	d80f      	bhi.n	8006452 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	4b4b      	ldr	r3, [pc, #300]	; (8006568 <HAL_DMA_Init+0x154>)
 800643a:	4413      	add	r3, r2
 800643c:	4a4b      	ldr	r2, [pc, #300]	; (800656c <HAL_DMA_Init+0x158>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	009a      	lsls	r2, r3, #2
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a48      	ldr	r2, [pc, #288]	; (8006570 <HAL_DMA_Init+0x15c>)
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
 8006450:	e00e      	b.n	8006470 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	4b46      	ldr	r3, [pc, #280]	; (8006574 <HAL_DMA_Init+0x160>)
 800645a:	4413      	add	r3, r2
 800645c:	4a43      	ldr	r2, [pc, #268]	; (800656c <HAL_DMA_Init+0x158>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	009a      	lsls	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a42      	ldr	r2, [pc, #264]	; (8006578 <HAL_DMA_Init+0x164>)
 800646e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ca:	d039      	beq.n	8006540 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	4a27      	ldr	r2, [pc, #156]	; (8006570 <HAL_DMA_Init+0x15c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d11a      	bne.n	800650c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <HAL_DMA_Init+0x168>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	f003 031c 	and.w	r3, r3, #28
 80064e2:	210f      	movs	r1, #15
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	4924      	ldr	r1, [pc, #144]	; (800657c <HAL_DMA_Init+0x168>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_DMA_Init+0x168>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6859      	ldr	r1, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	f003 031c 	and.w	r3, r3, #28
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	491d      	ldr	r1, [pc, #116]	; (800657c <HAL_DMA_Init+0x168>)
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]
 800650a:	e019      	b.n	8006540 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_DMA_Init+0x16c>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	f003 031c 	and.w	r3, r3, #28
 8006518:	210f      	movs	r1, #15
 800651a:	fa01 f303 	lsl.w	r3, r1, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	4917      	ldr	r1, [pc, #92]	; (8006580 <HAL_DMA_Init+0x16c>)
 8006522:	4013      	ands	r3, r2
 8006524:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006526:	4b16      	ldr	r3, [pc, #88]	; (8006580 <HAL_DMA_Init+0x16c>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6859      	ldr	r1, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f003 031c 	and.w	r3, r3, #28
 8006536:	fa01 f303 	lsl.w	r3, r1, r3
 800653a:	4911      	ldr	r1, [pc, #68]	; (8006580 <HAL_DMA_Init+0x16c>)
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40020407 	.word	0x40020407
 8006568:	bffdfff8 	.word	0xbffdfff8
 800656c:	cccccccd 	.word	0xcccccccd
 8006570:	40020000 	.word	0x40020000
 8006574:	bffdfbf8 	.word	0xbffdfbf8
 8006578:	40020400 	.word	0x40020400
 800657c:	400200a8 	.word	0x400200a8
 8006580:	400204a8 	.word	0x400204a8

08006584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_DMA_Start_IT+0x20>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e04b      	b.n	800663c <HAL_DMA_Start_IT+0xb8>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d13a      	bne.n	800662e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f969 	bl	80068b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 020e 	orr.w	r2, r2, #14
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e00f      	b.n	800661c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 020a 	orr.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e005      	b.n	800663a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d005      	beq.n	8006668 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	e029      	b.n	80066bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 020e 	bic.w	r2, r2, #14
 8006676:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0201 	bic.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f003 021c 	and.w	r2, r3, #28
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f202 	lsl.w	r2, r1, r2
 800669a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
    }
  }
  return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	f003 031c 	and.w	r3, r3, #28
 80066e6:	2204      	movs	r2, #4
 80066e8:	409a      	lsls	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d026      	beq.n	8006740 <HAL_DMA_IRQHandler+0x7a>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d021      	beq.n	8006740 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0204 	bic.w	r2, r2, #4
 8006718:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	f003 021c 	and.w	r2, r3, #28
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2104      	movs	r1, #4
 8006728:	fa01 f202 	lsl.w	r2, r1, r2
 800672c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	2b00      	cmp	r3, #0
 8006734:	d071      	beq.n	800681a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800673e:	e06c      	b.n	800681a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	f003 031c 	and.w	r3, r3, #28
 8006748:	2202      	movs	r2, #2
 800674a:	409a      	lsls	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d02e      	beq.n	80067b2 <HAL_DMA_IRQHandler+0xec>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d029      	beq.n	80067b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 020a 	bic.w	r2, r2, #10
 800677a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	f003 021c 	and.w	r2, r3, #28
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2102      	movs	r1, #2
 8006792:	fa01 f202 	lsl.w	r2, r1, r2
 8006796:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d038      	beq.n	800681a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80067b0:	e033      	b.n	800681a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f003 031c 	and.w	r3, r3, #28
 80067ba:	2208      	movs	r2, #8
 80067bc:	409a      	lsls	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d02a      	beq.n	800681c <HAL_DMA_IRQHandler+0x156>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d025      	beq.n	800681c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 020e 	bic.w	r2, r2, #14
 80067de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	f003 021c 	and.w	r2, r3, #28
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	2101      	movs	r1, #1
 80067ee:	fa01 f202 	lsl.w	r2, r1, r2
 80067f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	2b00      	cmp	r3, #0
 8006810:	d004      	beq.n	800681c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800681a:	bf00      	nop
 800681c:	bf00      	nop
}
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	460b      	mov	r3, r1
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_DMA_RegisterCallback+0x20>
 8006840:	2302      	movs	r3, #2
 8006842:	e031      	b.n	80068a8 <HAL_DMA_RegisterCallback+0x84>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d120      	bne.n	800689a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d81a      	bhi.n	8006894 <HAL_DMA_RegisterCallback+0x70>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_DMA_RegisterCallback+0x40>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006875 	.word	0x08006875
 8006868:	0800687d 	.word	0x0800687d
 800686c:	08006885 	.word	0x08006885
 8006870:	0800688d 	.word	0x0800688d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800687a:	e010      	b.n	800689e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8006882:	e00c      	b.n	800689e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800688a:	e008      	b.n	800689e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8006892:	e004      	b.n	800689e <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
           break;
 8006898:	e001      	b.n	800689e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 021c 	and.w	r2, r3, #28
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2101      	movs	r1, #1
 80068d0:	fa01 f202 	lsl.w	r2, r1, r2
 80068d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d108      	bne.n	80068f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068f6:	e007      	b.n	8006908 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006922:	e154      	b.n	8006bce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	2101      	movs	r1, #1
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8146 	beq.w	8006bc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d005      	beq.n	8006954 <HAL_GPIO_Init+0x40>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d130      	bne.n	80069b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	2203      	movs	r2, #3
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800698a:	2201      	movs	r2, #1
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4013      	ands	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 0201 	and.w	r2, r3, #1
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d017      	beq.n	80069f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	2203      	movs	r2, #3
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d123      	bne.n	8006a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	08da      	lsrs	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3208      	adds	r2, #8
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	220f      	movs	r2, #15
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	08da      	lsrs	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	6939      	ldr	r1, [r7, #16]
 8006a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	2203      	movs	r2, #3
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0203 	and.w	r2, r3, #3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80a0 	beq.w	8006bc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a88:	4b58      	ldr	r3, [pc, #352]	; (8006bec <HAL_GPIO_Init+0x2d8>)
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	4a57      	ldr	r2, [pc, #348]	; (8006bec <HAL_GPIO_Init+0x2d8>)
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	6613      	str	r3, [r2, #96]	; 0x60
 8006a94:	4b55      	ldr	r3, [pc, #340]	; (8006bec <HAL_GPIO_Init+0x2d8>)
 8006a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006aa0:	4a53      	ldr	r2, [pc, #332]	; (8006bf0 <HAL_GPIO_Init+0x2dc>)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	089b      	lsrs	r3, r3, #2
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	220f      	movs	r2, #15
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006aca:	d019      	beq.n	8006b00 <HAL_GPIO_Init+0x1ec>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a49      	ldr	r2, [pc, #292]	; (8006bf4 <HAL_GPIO_Init+0x2e0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <HAL_GPIO_Init+0x1e8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a48      	ldr	r2, [pc, #288]	; (8006bf8 <HAL_GPIO_Init+0x2e4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00d      	beq.n	8006af8 <HAL_GPIO_Init+0x1e4>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a47      	ldr	r2, [pc, #284]	; (8006bfc <HAL_GPIO_Init+0x2e8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <HAL_GPIO_Init+0x1e0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a46      	ldr	r2, [pc, #280]	; (8006c00 <HAL_GPIO_Init+0x2ec>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d101      	bne.n	8006af0 <HAL_GPIO_Init+0x1dc>
 8006aec:	2304      	movs	r3, #4
 8006aee:	e008      	b.n	8006b02 <HAL_GPIO_Init+0x1ee>
 8006af0:	2307      	movs	r3, #7
 8006af2:	e006      	b.n	8006b02 <HAL_GPIO_Init+0x1ee>
 8006af4:	2303      	movs	r3, #3
 8006af6:	e004      	b.n	8006b02 <HAL_GPIO_Init+0x1ee>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e002      	b.n	8006b02 <HAL_GPIO_Init+0x1ee>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <HAL_GPIO_Init+0x1ee>
 8006b00:	2300      	movs	r3, #0
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	f002 0203 	and.w	r2, r2, #3
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4093      	lsls	r3, r2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b12:	4937      	ldr	r1, [pc, #220]	; (8006bf0 <HAL_GPIO_Init+0x2dc>)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	3302      	adds	r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b20:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b44:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b4a:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	43db      	mvns	r3, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b6e:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006b74:	4b23      	ldr	r3, [pc, #140]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4013      	ands	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b98:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006b9e:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4013      	ands	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bc2:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <HAL_GPIO_Init+0x2f0>)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f aea3 	bne.w	8006924 <HAL_GPIO_Init+0x10>
  }
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	48000400 	.word	0x48000400
 8006bf8:	48000800 	.word	0x48000800
 8006bfc:	48000c00 	.word	0x48000c00
 8006c00:	48001000 	.word	0x48001000
 8006c04:	40010400 	.word	0x40010400

08006c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
 8006c14:	4613      	mov	r3, r2
 8006c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c18:	787b      	ldrb	r3, [r7, #1]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c1e:	887a      	ldrh	r2, [r7, #2]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c24:	e002      	b.n	8006c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c26:	887a      	ldrh	r2, [r7, #2]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c4e:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f003 fc10 	bl	800a47c <HAL_GPIO_EXTI_Callback>
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40010400 	.word	0x40010400

08006c68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40007000 	.word	0x40007000

08006c88 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <HAL_PWR_ConfigPVD+0xb8>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f023 020e 	bic.w	r2, r3, #14
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4928      	ldr	r1, [pc, #160]	; (8006d40 <HAL_PWR_ConfigPVD+0xb8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006ca2:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cac:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006cae:	4b25      	ldr	r3, [pc, #148]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a24      	ldr	r2, [pc, #144]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006cba:	4b22      	ldr	r3, [pc, #136]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006cc6:	4b1f      	ldr	r3, [pc, #124]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd0:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8006cde:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce8:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4a12      	ldr	r2, [pc, #72]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d00:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d18:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4a06      	ldr	r2, [pc, #24]	; (8006d44 <HAL_PWR_ConfigPVD+0xbc>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d30:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	40007000 	.word	0x40007000
 8006d44:	40010400 	.word	0x40010400

08006d48 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_PWR_EnablePVD+0x1c>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <HAL_PWR_EnablePVD+0x1c>)
 8006d52:	f043 0301 	orr.w	r3, r3, #1
 8006d56:	6053      	str	r3, [r2, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000

08006d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d6c:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40007000 	.word	0x40007000

08006d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d92:	d130      	bne.n	8006df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d94:	4b23      	ldr	r3, [pc, #140]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da0:	d038      	beq.n	8006e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da2:	4b20      	ldr	r3, [pc, #128]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006db2:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2232      	movs	r2, #50	; 0x32
 8006db8:	fb02 f303 	mul.w	r3, r2, r3
 8006dbc:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc2:	0c9b      	lsrs	r3, r3, #18
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc8:	e002      	b.n	8006dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d102      	bne.n	8006de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f2      	bne.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d110      	bne.n	8006e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e00f      	b.n	8006e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e02:	d007      	beq.n	8006e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e0c:	4a05      	ldr	r2, [pc, #20]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40007000 	.word	0x40007000
 8006e28:	20000070 	.word	0x20000070
 8006e2c:	431bde83 	.word	0x431bde83

08006e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f000 bc02 	b.w	8007648 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e44:	4b96      	ldr	r3, [pc, #600]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
 8006e4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e4e:	4b94      	ldr	r3, [pc, #592]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80e4 	beq.w	800702e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <HAL_RCC_OscConfig+0x4c>
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b0c      	cmp	r3, #12
 8006e70:	f040 808b 	bne.w	8006f8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	f040 8087 	bne.w	8006f8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e7c:	4b88      	ldr	r3, [pc, #544]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_OscConfig+0x64>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e3d9      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	4b81      	ldr	r3, [pc, #516]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <HAL_RCC_OscConfig+0x7e>
 8006ea4:	4b7e      	ldr	r3, [pc, #504]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eac:	e005      	b.n	8006eba <HAL_RCC_OscConfig+0x8a>
 8006eae:	4b7c      	ldr	r3, [pc, #496]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d223      	bcs.n	8006f06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fd54 	bl	8007970 <RCC_SetFlashLatencyFromMSIRange>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e3ba      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ed2:	4b73      	ldr	r3, [pc, #460]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a72      	ldr	r2, [pc, #456]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ed8:	f043 0308 	orr.w	r3, r3, #8
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b70      	ldr	r3, [pc, #448]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	496d      	ldr	r1, [pc, #436]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ef0:	4b6b      	ldr	r3, [pc, #428]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	4968      	ldr	r1, [pc, #416]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	e025      	b.n	8006f52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f06:	4b66      	ldr	r3, [pc, #408]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a65      	ldr	r2, [pc, #404]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f0c:	f043 0308 	orr.w	r3, r3, #8
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b63      	ldr	r3, [pc, #396]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	4960      	ldr	r1, [pc, #384]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f24:	4b5e      	ldr	r3, [pc, #376]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	495b      	ldr	r1, [pc, #364]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fd14 	bl	8007970 <RCC_SetFlashLatencyFromMSIRange>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e37a      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f52:	f000 fc81 	bl	8007858 <HAL_RCC_GetSysClockFreq>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b51      	ldr	r3, [pc, #324]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	4950      	ldr	r1, [pc, #320]	; (80070a4 <HAL_RCC_OscConfig+0x274>)
 8006f64:	5ccb      	ldrb	r3, [r1, r3]
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a4e      	ldr	r2, [pc, #312]	; (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f72:	4b4e      	ldr	r3, [pc, #312]	; (80070ac <HAL_RCC_OscConfig+0x27c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff f878 	bl	800606c <HAL_InitTick>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d052      	beq.n	800702c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	e35e      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d032      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f92:	4b43      	ldr	r3, [pc, #268]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a42      	ldr	r2, [pc, #264]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006f98:	f043 0301 	orr.w	r3, r3, #1
 8006f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f9e:	f7ff f8a1 	bl	80060e4 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fa6:	f7ff f89d 	bl	80060e4 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e347      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fb8:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fc4:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a35      	ldr	r2, [pc, #212]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fca:	f043 0308 	orr.w	r3, r3, #8
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4930      	ldr	r1, [pc, #192]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fe2:	4b2f      	ldr	r3, [pc, #188]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	492b      	ldr	r1, [pc, #172]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
 8006ff6:	e01a      	b.n	800702e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006ff8:	4b29      	ldr	r3, [pc, #164]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007004:	f7ff f86e 	bl	80060e4 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800700c:	f7ff f86a 	bl	80060e4 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e314      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800701e:	4b20      	ldr	r3, [pc, #128]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x1dc>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d073      	beq.n	8007122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d005      	beq.n	800704c <HAL_RCC_OscConfig+0x21c>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b0c      	cmp	r3, #12
 8007044:	d10e      	bne.n	8007064 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d10b      	bne.n	8007064 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d063      	beq.n	8007120 <HAL_RCC_OscConfig+0x2f0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d15f      	bne.n	8007120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e2f1      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706c:	d106      	bne.n	800707c <HAL_RCC_OscConfig+0x24c>
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e025      	b.n	80070c8 <HAL_RCC_OscConfig+0x298>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007084:	d114      	bne.n	80070b0 <HAL_RCC_OscConfig+0x280>
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a05      	ldr	r2, [pc, #20]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 800708c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a02      	ldr	r2, [pc, #8]	; (80070a0 <HAL_RCC_OscConfig+0x270>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e013      	b.n	80070c8 <HAL_RCC_OscConfig+0x298>
 80070a0:	40021000 	.word	0x40021000
 80070a4:	0800ba84 	.word	0x0800ba84
 80070a8:	20000070 	.word	0x20000070
 80070ac:	20000068 	.word	0x20000068
 80070b0:	4ba0      	ldr	r3, [pc, #640]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a9f      	ldr	r2, [pc, #636]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80070b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	4b9d      	ldr	r3, [pc, #628]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a9c      	ldr	r2, [pc, #624]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80070c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d013      	beq.n	80070f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d0:	f7ff f808 	bl	80060e4 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d8:	f7ff f804 	bl	80060e4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b64      	cmp	r3, #100	; 0x64
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e2ae      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ea:	4b92      	ldr	r3, [pc, #584]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0f0      	beq.n	80070d8 <HAL_RCC_OscConfig+0x2a8>
 80070f6:	e014      	b.n	8007122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fe fff4 	bl	80060e4 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007100:	f7fe fff0 	bl	80060e4 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b64      	cmp	r3, #100	; 0x64
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e29a      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007112:	4b88      	ldr	r3, [pc, #544]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f0      	bne.n	8007100 <HAL_RCC_OscConfig+0x2d0>
 800711e:	e000      	b.n	8007122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d060      	beq.n	80071f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d005      	beq.n	8007140 <HAL_RCC_OscConfig+0x310>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b0c      	cmp	r3, #12
 8007138:	d119      	bne.n	800716e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d116      	bne.n	800716e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007140:	4b7c      	ldr	r3, [pc, #496]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RCC_OscConfig+0x328>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e277      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007158:	4b76      	ldr	r3, [pc, #472]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	061b      	lsls	r3, r3, #24
 8007166:	4973      	ldr	r1, [pc, #460]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007168:	4313      	orrs	r3, r2
 800716a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800716c:	e040      	b.n	80071f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d023      	beq.n	80071be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007176:	4b6f      	ldr	r3, [pc, #444]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a6e      	ldr	r2, [pc, #440]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fe ffaf 	bl	80060e4 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718a:	f7fe ffab 	bl	80060e4 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e255      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800719c:	4b65      	ldr	r3, [pc, #404]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a8:	4b62      	ldr	r3, [pc, #392]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	495f      	ldr	r1, [pc, #380]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]
 80071bc:	e018      	b.n	80071f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071be:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a5c      	ldr	r2, [pc, #368]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ca:	f7fe ff8b 	bl	80060e4 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d2:	f7fe ff87 	bl	80060e4 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e231      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f0      	bne.n	80071d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d03c      	beq.n	8007276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01c      	beq.n	800723e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007204:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800720a:	4a4a      	ldr	r2, [pc, #296]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007214:	f7fe ff66 	bl	80060e4 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800721c:	f7fe ff62 	bl	80060e4 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e20c      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0ef      	beq.n	800721c <HAL_RCC_OscConfig+0x3ec>
 800723c:	e01b      	b.n	8007276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007244:	4a3b      	ldr	r2, [pc, #236]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724e:	f7fe ff49 	bl	80060e4 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007256:	f7fe ff45 	bl	80060e4 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e1ef      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007268:	4b32      	ldr	r3, [pc, #200]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800726a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1ef      	bne.n	8007256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80a6 	beq.w	80073d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007284:	2300      	movs	r3, #0
 8007286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007288:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800728a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007294:	4b27      	ldr	r3, [pc, #156]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	4a26      	ldr	r2, [pc, #152]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 800729a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729e:	6593      	str	r3, [r2, #88]	; 0x58
 80072a0:	4b24      	ldr	r3, [pc, #144]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ac:	2301      	movs	r3, #1
 80072ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b0:	4b21      	ldr	r3, [pc, #132]	; (8007338 <HAL_RCC_OscConfig+0x508>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d118      	bne.n	80072ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072bc:	4b1e      	ldr	r3, [pc, #120]	; (8007338 <HAL_RCC_OscConfig+0x508>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <HAL_RCC_OscConfig+0x508>)
 80072c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c8:	f7fe ff0c 	bl	80060e4 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d0:	f7fe ff08 	bl	80060e4 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e1b2      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <HAL_RCC_OscConfig+0x508>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d108      	bne.n	8007308 <HAL_RCC_OscConfig+0x4d8>
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fc:	4a0d      	ldr	r2, [pc, #52]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007306:	e029      	b.n	800735c <HAL_RCC_OscConfig+0x52c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b05      	cmp	r3, #5
 800730e:	d115      	bne.n	800733c <HAL_RCC_OscConfig+0x50c>
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007316:	4a07      	ldr	r2, [pc, #28]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007318:	f043 0304 	orr.w	r3, r3, #4
 800731c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007320:	4b04      	ldr	r3, [pc, #16]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	4a03      	ldr	r2, [pc, #12]	; (8007334 <HAL_RCC_OscConfig+0x504>)
 8007328:	f043 0301 	orr.w	r3, r3, #1
 800732c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007330:	e014      	b.n	800735c <HAL_RCC_OscConfig+0x52c>
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	40007000 	.word	0x40007000
 800733c:	4b9a      	ldr	r3, [pc, #616]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007342:	4a99      	ldr	r2, [pc, #612]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800734c:	4b96      	ldr	r3, [pc, #600]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007352:	4a95      	ldr	r2, [pc, #596]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007354:	f023 0304 	bic.w	r3, r3, #4
 8007358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007364:	f7fe febe 	bl	80060e4 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800736a:	e00a      	b.n	8007382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736c:	f7fe feba 	bl	80060e4 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	f241 3288 	movw	r2, #5000	; 0x1388
 800737a:	4293      	cmp	r3, r2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e162      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007382:	4b89      	ldr	r3, [pc, #548]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0ed      	beq.n	800736c <HAL_RCC_OscConfig+0x53c>
 8007390:	e015      	b.n	80073be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007392:	f7fe fea7 	bl	80060e4 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007398:	e00a      	b.n	80073b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739a:	f7fe fea3 	bl	80060e4 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e14b      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073b0:	4b7d      	ldr	r3, [pc, #500]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1ed      	bne.n	800739a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073be:	7ffb      	ldrb	r3, [r7, #31]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d105      	bne.n	80073d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c4:	4b78      	ldr	r3, [pc, #480]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c8:	4a77      	ldr	r2, [pc, #476]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80073ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d03c      	beq.n	8007456 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01c      	beq.n	800741e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e4:	4b70      	ldr	r3, [pc, #448]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80073e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ea:	4a6f      	ldr	r2, [pc, #444]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fe fe76 	bl	80060e4 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073fc:	f7fe fe72 	bl	80060e4 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e11c      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800740e:	4b66      	ldr	r3, [pc, #408]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ef      	beq.n	80073fc <HAL_RCC_OscConfig+0x5cc>
 800741c:	e01b      	b.n	8007456 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800741e:	4b62      	ldr	r3, [pc, #392]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007424:	4a60      	ldr	r2, [pc, #384]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742e:	f7fe fe59 	bl	80060e4 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007436:	f7fe fe55 	bl	80060e4 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0ff      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007448:	4b57      	ldr	r3, [pc, #348]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 800744a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ef      	bne.n	8007436 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80f3 	beq.w	8007646 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2b02      	cmp	r3, #2
 8007466:	f040 80c9 	bne.w	80075fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800746a:	4b4f      	ldr	r3, [pc, #316]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f003 0203 	and.w	r2, r3, #3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	429a      	cmp	r2, r3
 800747c:	d12c      	bne.n	80074d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	3b01      	subs	r3, #1
 800748a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d123      	bne.n	80074d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d11b      	bne.n	80074d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d113      	bne.n	80074d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	3b01      	subs	r3, #1
 80074be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d109      	bne.n	80074d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	3b01      	subs	r3, #1
 80074d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d06b      	beq.n	80075b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d062      	beq.n	80075a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074de:	4b32      	ldr	r3, [pc, #200]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0ac      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a2d      	ldr	r2, [pc, #180]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 80074f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074fa:	f7fe fdf3 	bl	80060e4 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007502:	f7fe fdef 	bl	80060e4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e099      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f0      	bne.n	8007502 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	4b21      	ldr	r3, [pc, #132]	; (80075ac <HAL_RCC_OscConfig+0x77c>)
 8007526:	4013      	ands	r3, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007530:	3a01      	subs	r2, #1
 8007532:	0112      	lsls	r2, r2, #4
 8007534:	4311      	orrs	r1, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800753a:	0212      	lsls	r2, r2, #8
 800753c:	4311      	orrs	r1, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007542:	0852      	lsrs	r2, r2, #1
 8007544:	3a01      	subs	r2, #1
 8007546:	0552      	lsls	r2, r2, #21
 8007548:	4311      	orrs	r1, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800754e:	0852      	lsrs	r2, r2, #1
 8007550:	3a01      	subs	r2, #1
 8007552:	0652      	lsls	r2, r2, #25
 8007554:	4311      	orrs	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800755a:	06d2      	lsls	r2, r2, #27
 800755c:	430a      	orrs	r2, r1
 800755e:	4912      	ldr	r1, [pc, #72]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007560:	4313      	orrs	r3, r2
 8007562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a0f      	ldr	r2, [pc, #60]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 800756a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800756e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800757a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800757c:	f7fe fdb2 	bl	80060e4 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007584:	f7fe fdae 	bl	80060e4 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e058      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007596:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <HAL_RCC_OscConfig+0x778>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f0      	beq.n	8007584 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075a2:	e050      	b.n	8007646 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e04f      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
 80075a8:	40021000 	.word	0x40021000
 80075ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b0:	4b27      	ldr	r3, [pc, #156]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d144      	bne.n	8007646 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075bc:	4b24      	ldr	r3, [pc, #144]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a23      	ldr	r2, [pc, #140]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c8:	4b21      	ldr	r3, [pc, #132]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075d4:	f7fe fd86 	bl	80060e4 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fe fd82 	bl	80060e4 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e02c      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ee:	4b18      	ldr	r3, [pc, #96]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0x7ac>
 80075fa:	e024      	b.n	8007646 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d01f      	beq.n	8007642 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a12      	ldr	r2, [pc, #72]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 8007608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760e:	f7fe fd69 	bl	80060e4 <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007616:	f7fe fd65 	bl	80060e4 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e00f      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f0      	bne.n	8007616 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	4905      	ldr	r1, [pc, #20]	; (8007650 <HAL_RCC_OscConfig+0x820>)
 800763a:	4b06      	ldr	r3, [pc, #24]	; (8007654 <HAL_RCC_OscConfig+0x824>)
 800763c:	4013      	ands	r3, r2
 800763e:	60cb      	str	r3, [r1, #12]
 8007640:	e001      	b.n	8007646 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40021000 	.word	0x40021000
 8007654:	feeefffc 	.word	0xfeeefffc

08007658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0e7      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800766c:	4b75      	ldr	r3, [pc, #468]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d910      	bls.n	800769c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800767a:	4b72      	ldr	r3, [pc, #456]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f023 0207 	bic.w	r2, r3, #7
 8007682:	4970      	ldr	r1, [pc, #448]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800768a:	4b6e      	ldr	r3, [pc, #440]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d001      	beq.n	800769c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0cf      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d010      	beq.n	80076ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	4b66      	ldr	r3, [pc, #408]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d908      	bls.n	80076ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b8:	4b63      	ldr	r3, [pc, #396]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4960      	ldr	r1, [pc, #384]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d04c      	beq.n	8007770 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d107      	bne.n	80076ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076de:	4b5a      	ldr	r3, [pc, #360]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d121      	bne.n	800772e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e0a6      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d107      	bne.n	8007706 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076f6:	4b54      	ldr	r3, [pc, #336]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d115      	bne.n	800772e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e09a      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d107      	bne.n	800771e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800770e:	4b4e      	ldr	r3, [pc, #312]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e08e      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800771e:	4b4a      	ldr	r3, [pc, #296]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e086      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800772e:	4b46      	ldr	r3, [pc, #280]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f023 0203 	bic.w	r2, r3, #3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4943      	ldr	r1, [pc, #268]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 800773c:	4313      	orrs	r3, r2
 800773e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007740:	f7fe fcd0 	bl	80060e4 <HAL_GetTick>
 8007744:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007746:	e00a      	b.n	800775e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007748:	f7fe fccc 	bl	80060e4 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	f241 3288 	movw	r2, #5000	; 0x1388
 8007756:	4293      	cmp	r3, r2
 8007758:	d901      	bls.n	800775e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e06e      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800775e:	4b3a      	ldr	r3, [pc, #232]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 020c 	and.w	r2, r3, #12
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	429a      	cmp	r2, r3
 800776e:	d1eb      	bne.n	8007748 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	4b31      	ldr	r3, [pc, #196]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007788:	429a      	cmp	r2, r3
 800778a:	d208      	bcs.n	800779e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800778c:	4b2e      	ldr	r3, [pc, #184]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	492b      	ldr	r1, [pc, #172]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800779e:	4b29      	ldr	r3, [pc, #164]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d210      	bcs.n	80077ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ac:	4b25      	ldr	r3, [pc, #148]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f023 0207 	bic.w	r2, r3, #7
 80077b4:	4923      	ldr	r1, [pc, #140]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077bc:	4b21      	ldr	r3, [pc, #132]	; (8007844 <HAL_RCC_ClockConfig+0x1ec>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d001      	beq.n	80077ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e036      	b.n	800783c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d008      	beq.n	80077ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	4918      	ldr	r1, [pc, #96]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077f8:	4b13      	ldr	r3, [pc, #76]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4910      	ldr	r1, [pc, #64]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007808:	4313      	orrs	r3, r2
 800780a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800780c:	f000 f824 	bl	8007858 <HAL_RCC_GetSysClockFreq>
 8007810:	4602      	mov	r2, r0
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <HAL_RCC_ClockConfig+0x1f0>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	490b      	ldr	r1, [pc, #44]	; (800784c <HAL_RCC_ClockConfig+0x1f4>)
 800781e:	5ccb      	ldrb	r3, [r1, r3]
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <HAL_RCC_ClockConfig+0x1f8>)
 800782a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800782c:	4b09      	ldr	r3, [pc, #36]	; (8007854 <HAL_RCC_ClockConfig+0x1fc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fc1b 	bl	800606c <HAL_InitTick>
 8007836:	4603      	mov	r3, r0
 8007838:	72fb      	strb	r3, [r7, #11]

  return status;
 800783a:	7afb      	ldrb	r3, [r7, #11]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40022000 	.word	0x40022000
 8007848:	40021000 	.word	0x40021000
 800784c:	0800ba84 	.word	0x0800ba84
 8007850:	20000070 	.word	0x20000070
 8007854:	20000068 	.word	0x20000068

08007858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007858:	b480      	push	{r7}
 800785a:	b089      	sub	sp, #36	; 0x24
 800785c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007866:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007870:	4b3b      	ldr	r3, [pc, #236]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_RCC_GetSysClockFreq+0x34>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d121      	bne.n	80078ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d11e      	bne.n	80078ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800788c:	4b34      	ldr	r3, [pc, #208]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007898:	4b31      	ldr	r3, [pc, #196]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 800789a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	e005      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078a8:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078b4:	4a2b      	ldr	r2, [pc, #172]	; (8007964 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10d      	bne.n	80078e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d102      	bne.n	80078d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <HAL_RCC_GetSysClockFreq+0x110>)
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	e004      	b.n	80078e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d101      	bne.n	80078e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <HAL_RCC_GetSysClockFreq+0x114>)
 80078de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b0c      	cmp	r3, #12
 80078e4:	d134      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078e6:	4b1e      	ldr	r3, [pc, #120]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d003      	beq.n	80078fe <HAL_RCC_GetSysClockFreq+0xa6>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d003      	beq.n	8007904 <HAL_RCC_GetSysClockFreq+0xac>
 80078fc:	e005      	b.n	800790a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078fe:	4b1a      	ldr	r3, [pc, #104]	; (8007968 <HAL_RCC_GetSysClockFreq+0x110>)
 8007900:	617b      	str	r3, [r7, #20]
      break;
 8007902:	e005      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <HAL_RCC_GetSysClockFreq+0x114>)
 8007906:	617b      	str	r3, [r7, #20]
      break;
 8007908:	e002      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	617b      	str	r3, [r7, #20]
      break;
 800790e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007910:	4b13      	ldr	r3, [pc, #76]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	091b      	lsrs	r3, r3, #4
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	3301      	adds	r3, #1
 800791c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800791e:	4b10      	ldr	r3, [pc, #64]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	fb03 f202 	mul.w	r2, r3, r2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <HAL_RCC_GetSysClockFreq+0x108>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	0e5b      	lsrs	r3, r3, #25
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	3301      	adds	r3, #1
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007950:	69bb      	ldr	r3, [r7, #24]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3724      	adds	r7, #36	; 0x24
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40021000 	.word	0x40021000
 8007964:	0800ba94 	.word	0x0800ba94
 8007968:	00f42400 	.word	0x00f42400
 800796c:	02dc6c00 	.word	0x02dc6c00

08007970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800797c:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007988:	f7ff f9ee 	bl	8006d68 <HAL_PWREx_GetVoltageRange>
 800798c:	6178      	str	r0, [r7, #20]
 800798e:	e014      	b.n	80079ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	4a24      	ldr	r2, [pc, #144]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799a:	6593      	str	r3, [r2, #88]	; 0x58
 800799c:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800799e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079a8:	f7ff f9de 	bl	8006d68 <HAL_PWREx_GetVoltageRange>
 80079ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d10b      	bne.n	80079da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d919      	bls.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2ba0      	cmp	r3, #160	; 0xa0
 80079cc:	d902      	bls.n	80079d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079ce:	2302      	movs	r3, #2
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e013      	b.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079d4:	2301      	movs	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	e010      	b.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d902      	bls.n	80079e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80079e0:	2303      	movs	r3, #3
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	e00a      	b.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b80      	cmp	r3, #128	; 0x80
 80079ea:	d102      	bne.n	80079f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079ec:	2302      	movs	r3, #2
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	e004      	b.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b70      	cmp	r3, #112	; 0x70
 80079f6:	d101      	bne.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079f8:	2301      	movs	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f023 0207 	bic.w	r2, r3, #7
 8007a04:	4909      	ldr	r1, [pc, #36]	; (8007a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a0c:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d001      	beq.n	8007a1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	40022000 	.word	0x40022000

08007a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a38:	2300      	movs	r3, #0
 8007a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d031      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a54:	d01a      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a5a:	d814      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a64:	d10f      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007a66:	4b5d      	ldr	r3, [pc, #372]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	4a5c      	ldr	r2, [pc, #368]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a72:	e00c      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f9f0 	bl	8007e60 <RCCEx_PLLSAI1_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	74fb      	strb	r3, [r7, #19]
      break;
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8e:	7cfb      	ldrb	r3, [r7, #19]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a94:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa2:	494e      	ldr	r1, [pc, #312]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007aaa:	e001      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	7cfb      	ldrb	r3, [r7, #19]
 8007aae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 809e 	beq.w	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ac2:	4b46      	ldr	r3, [pc, #280]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007adc:	4a3f      	ldr	r2, [pc, #252]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ae4:	4b3d      	ldr	r3, [pc, #244]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007af0:	2301      	movs	r3, #1
 8007af2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007af4:	4b3a      	ldr	r3, [pc, #232]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a39      	ldr	r2, [pc, #228]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b00:	f7fe faf0 	bl	80060e4 <HAL_GetTick>
 8007b04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b06:	e009      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b08:	f7fe faec 	bl	80060e4 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d902      	bls.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	74fb      	strb	r3, [r7, #19]
        break;
 8007b1a:	e005      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b1c:	4b30      	ldr	r3, [pc, #192]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ef      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007b28:	7cfb      	ldrb	r3, [r7, #19]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d15a      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b2e:	4b2b      	ldr	r3, [pc, #172]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01e      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d019      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b4a:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b66:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b76:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d016      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fe faac 	bl	80060e4 <HAL_GetTick>
 8007b8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b90:	f7fe faa8 	bl	80060e4 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d902      	bls.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	74fb      	strb	r3, [r7, #19]
            break;
 8007ba6:	e006      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0ec      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007bb6:	7cfb      	ldrb	r3, [r7, #19]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bbc:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	4904      	ldr	r1, [pc, #16]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007bd2:	e009      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bd4:	7cfb      	ldrb	r3, [r7, #19]
 8007bd6:	74bb      	strb	r3, [r7, #18]
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007bda:	bf00      	nop
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007be8:	7c7b      	ldrb	r3, [r7, #17]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d105      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bee:	4b9b      	ldr	r3, [pc, #620]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	4a9a      	ldr	r2, [pc, #616]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c06:	4b95      	ldr	r3, [pc, #596]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f023 0203 	bic.w	r2, r3, #3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	4991      	ldr	r1, [pc, #580]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c28:	4b8c      	ldr	r3, [pc, #560]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2e:	f023 020c 	bic.w	r2, r3, #12
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	4989      	ldr	r1, [pc, #548]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c4a:	4b84      	ldr	r3, [pc, #528]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	4980      	ldr	r1, [pc, #512]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c6c:	4b7b      	ldr	r3, [pc, #492]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4978      	ldr	r1, [pc, #480]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c8e:	4b73      	ldr	r3, [pc, #460]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	496f      	ldr	r1, [pc, #444]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cb0:	4b6a      	ldr	r3, [pc, #424]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	4967      	ldr	r1, [pc, #412]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cd2:	4b62      	ldr	r3, [pc, #392]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	495e      	ldr	r1, [pc, #376]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007cf4:	4b59      	ldr	r3, [pc, #356]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	4956      	ldr	r1, [pc, #344]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d16:	4b51      	ldr	r3, [pc, #324]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	494d      	ldr	r1, [pc, #308]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d028      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d38:	4b48      	ldr	r3, [pc, #288]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d46:	4945      	ldr	r1, [pc, #276]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d56:	d106      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d58:	4b40      	ldr	r3, [pc, #256]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	4a3f      	ldr	r2, [pc, #252]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d62:	60d3      	str	r3, [r2, #12]
 8007d64:	e011      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d6e:	d10c      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	2101      	movs	r1, #1
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f872 	bl	8007e60 <RCCEx_PLLSAI1_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d80:	7cfb      	ldrb	r3, [r7, #19]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007d86:	7cfb      	ldrb	r3, [r7, #19]
 8007d88:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d028      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d96:	4b31      	ldr	r3, [pc, #196]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da4:	492d      	ldr	r1, [pc, #180]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db4:	d106      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007db6:	4b29      	ldr	r3, [pc, #164]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	4a28      	ldr	r2, [pc, #160]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dc0:	60d3      	str	r3, [r2, #12]
 8007dc2:	e011      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dcc:	d10c      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f843 	bl	8007e60 <RCCEx_PLLSAI1_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dde:	7cfb      	ldrb	r3, [r7, #19]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01c      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007df4:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e02:	4916      	ldr	r1, [pc, #88]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e12:	d10c      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	2102      	movs	r1, #2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f820 	bl	8007e60 <RCCEx_PLLSAI1_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e24:	7cfb      	ldrb	r3, [r7, #19]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007e2a:	7cfb      	ldrb	r3, [r7, #19]
 8007e2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	4904      	ldr	r1, [pc, #16]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40021000 	.word	0x40021000

08007e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e6e:	4b74      	ldr	r3, [pc, #464]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e7a:	4b71      	ldr	r3, [pc, #452]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f003 0203 	and.w	r2, r3, #3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d10d      	bne.n	8007ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007e92:	4b6b      	ldr	r3, [pc, #428]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d047      	beq.n	8007f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	73fb      	strb	r3, [r7, #15]
 8007eaa:	e044      	b.n	8007f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d018      	beq.n	8007ee6 <RCCEx_PLLSAI1_Config+0x86>
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d825      	bhi.n	8007f04 <RCCEx_PLLSAI1_Config+0xa4>
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d002      	beq.n	8007ec2 <RCCEx_PLLSAI1_Config+0x62>
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d009      	beq.n	8007ed4 <RCCEx_PLLSAI1_Config+0x74>
 8007ec0:	e020      	b.n	8007f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d11d      	bne.n	8007f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ed2:	e01a      	b.n	8007f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ed4:	4b5a      	ldr	r3, [pc, #360]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d116      	bne.n	8007f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ee4:	e013      	b.n	8007f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ee6:	4b56      	ldr	r3, [pc, #344]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10f      	bne.n	8007f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ef2:	4b53      	ldr	r3, [pc, #332]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f02:	e006      	b.n	8007f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
      break;
 8007f08:	e004      	b.n	8007f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f1a:	4b49      	ldr	r3, [pc, #292]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	4943      	ldr	r1, [pc, #268]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d17c      	bne.n	8008036 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f3c:	4b40      	ldr	r3, [pc, #256]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a3f      	ldr	r2, [pc, #252]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f48:	f7fe f8cc 	bl	80060e4 <HAL_GetTick>
 8007f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f4e:	e009      	b.n	8007f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f50:	f7fe f8c8 	bl	80060e4 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d902      	bls.n	8007f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	73fb      	strb	r3, [r7, #15]
        break;
 8007f62:	e005      	b.n	8007f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f64:	4b36      	ldr	r3, [pc, #216]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1ef      	bne.n	8007f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d15f      	bne.n	8008036 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d110      	bne.n	8007f9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f7c:	4b30      	ldr	r3, [pc, #192]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6892      	ldr	r2, [r2, #8]
 8007f8c:	0211      	lsls	r1, r2, #8
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	68d2      	ldr	r2, [r2, #12]
 8007f92:	06d2      	lsls	r2, r2, #27
 8007f94:	430a      	orrs	r2, r1
 8007f96:	492a      	ldr	r1, [pc, #168]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	610b      	str	r3, [r1, #16]
 8007f9c:	e027      	b.n	8007fee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d112      	bne.n	8007fca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fa4:	4b26      	ldr	r3, [pc, #152]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6892      	ldr	r2, [r2, #8]
 8007fb4:	0211      	lsls	r1, r2, #8
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6912      	ldr	r2, [r2, #16]
 8007fba:	0852      	lsrs	r2, r2, #1
 8007fbc:	3a01      	subs	r2, #1
 8007fbe:	0552      	lsls	r2, r2, #21
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	491f      	ldr	r1, [pc, #124]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	610b      	str	r3, [r1, #16]
 8007fc8:	e011      	b.n	8007fee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fca:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007fd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6892      	ldr	r2, [r2, #8]
 8007fda:	0211      	lsls	r1, r2, #8
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6952      	ldr	r2, [r2, #20]
 8007fe0:	0852      	lsrs	r2, r2, #1
 8007fe2:	3a01      	subs	r2, #1
 8007fe4:	0652      	lsls	r2, r2, #25
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	4915      	ldr	r1, [pc, #84]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007fee:	4b14      	ldr	r3, [pc, #80]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a13      	ldr	r2, [pc, #76]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ff8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffa:	f7fe f873 	bl	80060e4 <HAL_GetTick>
 8007ffe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008000:	e009      	b.n	8008016 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008002:	f7fe f86f 	bl	80060e4 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d902      	bls.n	8008016 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
          break;
 8008014:	e005      	b.n	8008022 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ef      	beq.n	8008002 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4903      	ldr	r1, [pc, #12]	; (8008040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008032:	4313      	orrs	r3, r2
 8008034:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40021000 	.word	0x40021000

08008044 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d06c      	beq.n	8008130 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 ff3a 	bl	8009ee4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	22ca      	movs	r2, #202	; 0xca
 800807e:	625a      	str	r2, [r3, #36]	; 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2253      	movs	r2, #83	; 0x53
 8008086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f87c 	bl	8008186 <RTC_EnterInitMode>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d14b      	bne.n	8008130 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080aa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6899      	ldr	r1, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	68d2      	ldr	r2, [r2, #12]
 80080d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6919      	ldr	r1, [r3, #16]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	041a      	lsls	r2, r3, #16
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f87f 	bl	80081ec <RTC_ExitInitMode>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11b      	bne.n	8008130 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0203 	bic.w	r2, r2, #3
 8008106:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008150:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008152:	f7fd ffc7 	bl	80060e4 <HAL_GetTick>
 8008156:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008158:	e009      	b.n	800816e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800815a:	f7fd ffc3 	bl	80060e4 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008168:	d901      	bls.n	800816e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e007      	b.n	800817e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0ee      	beq.n	800815a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d120      	bne.n	80081e2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081aa:	f7fd ff9b 	bl	80060e4 <HAL_GetTick>
 80081ae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80081b0:	e00d      	b.n	80081ce <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80081b2:	f7fd ff97 	bl	80060e4 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c0:	d905      	bls.n	80081ce <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2203      	movs	r2, #3
 80081ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d102      	bne.n	80081e2 <RTC_EnterInitMode+0x5c>
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d1e7      	bne.n	80081b2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <RTC_ExitInitMode+0x78>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4a19      	ldr	r2, [pc, #100]	; (8008264 <RTC_ExitInitMode+0x78>)
 80081fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008202:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008204:	4b17      	ldr	r3, [pc, #92]	; (8008264 <RTC_ExitInitMode+0x78>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10c      	bne.n	800822a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ff92 	bl	800813a <HAL_RTC_WaitForSynchro>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01e      	beq.n	800825a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2203      	movs	r2, #3
 8008220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	73fb      	strb	r3, [r7, #15]
 8008228:	e017      	b.n	800825a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800822a:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <RTC_ExitInitMode+0x78>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4a0d      	ldr	r2, [pc, #52]	; (8008264 <RTC_ExitInitMode+0x78>)
 8008230:	f023 0320 	bic.w	r3, r3, #32
 8008234:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff ff7f 	bl	800813a <HAL_RTC_WaitForSynchro>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2203      	movs	r2, #3
 8008246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <RTC_ExitInitMode+0x78>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	4a04      	ldr	r2, [pc, #16]	; (8008264 <RTC_ExitInitMode+0x78>)
 8008254:	f043 0320 	orr.w	r3, r3, #32
 8008258:	6093      	str	r3, [r2, #8]
  }

  return status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40002800 	.word	0x40002800

08008268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e049      	b.n	800830e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fe44 	bl	8009f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f000 fe2e 	bl	8008f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e049      	b.n	80083bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fee7 	bl	800a110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3304      	adds	r3, #4
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f000 fdd7 	bl	8008f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e03c      	b.n	800846a <HAL_TIM_PWM_Start_DMA+0xa6>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d109      	bne.n	800840a <HAL_TIM_PWM_Start_DMA+0x46>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	bf0c      	ite	eq
 8008402:	2301      	moveq	r3, #1
 8008404:	2300      	movne	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	e02f      	b.n	800846a <HAL_TIM_PWM_Start_DMA+0xa6>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b08      	cmp	r3, #8
 800840e:	d109      	bne.n	8008424 <HAL_TIM_PWM_Start_DMA+0x60>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	bf0c      	ite	eq
 800841c:	2301      	moveq	r3, #1
 800841e:	2300      	movne	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	e022      	b.n	800846a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b0c      	cmp	r3, #12
 8008428:	d109      	bne.n	800843e <HAL_TIM_PWM_Start_DMA+0x7a>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	bf0c      	ite	eq
 8008436:	2301      	moveq	r3, #1
 8008438:	2300      	movne	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	e015      	b.n	800846a <HAL_TIM_PWM_Start_DMA+0xa6>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b10      	cmp	r3, #16
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start_DMA+0x94>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e008      	b.n	800846a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	bf0c      	ite	eq
 8008464:	2301      	moveq	r3, #1
 8008466:	2300      	movne	r3, #0
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
 8008470:	e18d      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e03c      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x142>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d109      	bne.n	80084a6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b01      	cmp	r3, #1
 800849c:	bf0c      	ite	eq
 800849e:	2301      	moveq	r3, #1
 80084a0:	2300      	movne	r3, #0
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	e02f      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x142>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d109      	bne.n	80084c0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	e022      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x142>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b0c      	cmp	r3, #12
 80084c4:	d109      	bne.n	80084da <HAL_TIM_PWM_Start_DMA+0x116>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	bf0c      	ite	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	2300      	movne	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	e015      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x142>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d109      	bne.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x130>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf0c      	ite	eq
 80084ec:	2301      	moveq	r3, #1
 80084ee:	2300      	movne	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e008      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x142>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d034      	beq.n	8008574 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_TIM_PWM_Start_DMA+0x152>
 8008510:	887b      	ldrh	r3, [r7, #2]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e139      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <HAL_TIM_PWM_Start_DMA+0x166>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008528:	e026      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b04      	cmp	r3, #4
 800852e:	d104      	bne.n	800853a <HAL_TIM_PWM_Start_DMA+0x176>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008538:	e01e      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d104      	bne.n	800854a <HAL_TIM_PWM_Start_DMA+0x186>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008548:	e016      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b0c      	cmp	r3, #12
 800854e:	d104      	bne.n	800855a <HAL_TIM_PWM_Start_DMA+0x196>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008558:	e00e      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b10      	cmp	r3, #16
 800855e:	d104      	bne.n	800856a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008568:	e006      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2202      	movs	r2, #2
 800856e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008572:	e001      	b.n	8008578 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e10a      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b0c      	cmp	r3, #12
 800857c:	f200 80ae 	bhi.w	80086dc <HAL_TIM_PWM_Start_DMA+0x318>
 8008580:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008586:	bf00      	nop
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080086dd 	.word	0x080086dd
 8008590:	080086dd 	.word	0x080086dd
 8008594:	080086dd 	.word	0x080086dd
 8008598:	08008605 	.word	0x08008605
 800859c:	080086dd 	.word	0x080086dd
 80085a0:	080086dd 	.word	0x080086dd
 80085a4:	080086dd 	.word	0x080086dd
 80085a8:	0800864d 	.word	0x0800864d
 80085ac:	080086dd 	.word	0x080086dd
 80085b0:	080086dd 	.word	0x080086dd
 80085b4:	080086dd 	.word	0x080086dd
 80085b8:	08008695 	.word	0x08008695
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	4a75      	ldr	r2, [pc, #468]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	4a74      	ldr	r2, [pc, #464]	; (800879c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	4a73      	ldr	r2, [pc, #460]	; (80087a0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80085d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3334      	adds	r3, #52	; 0x34
 80085e0:	461a      	mov	r2, r3
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	f7fd ffce 	bl	8006584 <HAL_DMA_Start_IT>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e0cd      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008600:	60da      	str	r2, [r3, #12]
      break;
 8008602:	e06e      	b.n	80086e2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	4a63      	ldr	r2, [pc, #396]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800860a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	4a62      	ldr	r2, [pc, #392]	; (800879c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008612:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	4a61      	ldr	r2, [pc, #388]	; (80087a0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800861a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3338      	adds	r3, #56	; 0x38
 8008628:	461a      	mov	r2, r3
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	f7fd ffaa 	bl	8006584 <HAL_DMA_Start_IT>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0a9      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008648:	60da      	str	r2, [r3, #12]
      break;
 800864a:	e04a      	b.n	80086e2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a51      	ldr	r2, [pc, #324]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008652:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	4a50      	ldr	r2, [pc, #320]	; (800879c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800865a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	4a4f      	ldr	r2, [pc, #316]	; (80087a0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	333c      	adds	r3, #60	; 0x3c
 8008670:	461a      	mov	r2, r3
 8008672:	887b      	ldrh	r3, [r7, #2]
 8008674:	f7fd ff86 	bl	8006584 <HAL_DMA_Start_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e085      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008690:	60da      	str	r2, [r3, #12]
      break;
 8008692:	e026      	b.n	80086e2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	4a3f      	ldr	r2, [pc, #252]	; (8008798 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	4a3e      	ldr	r2, [pc, #248]	; (800879c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3340      	adds	r3, #64	; 0x40
 80086b8:	461a      	mov	r2, r3
 80086ba:	887b      	ldrh	r3, [r7, #2]
 80086bc:	f7fd ff62 	bl	8006584 <HAL_DMA_Start_IT>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e061      	b.n	800878e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086d8:	60da      	str	r2, [r3, #12]
      break;
 80086da:	e002      	b.n	80086e2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]
      break;
 80086e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d151      	bne.n	800878c <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2201      	movs	r2, #1
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 ff85 	bl	8009600 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_TIM_PWM_Start_DMA+0x350>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a28      	ldr	r2, [pc, #160]	; (80087a8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_TIM_PWM_Start_DMA+0x350>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a27      	ldr	r2, [pc, #156]	; (80087ac <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d101      	bne.n	8008718 <HAL_TIM_PWM_Start_DMA+0x354>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <HAL_TIM_PWM_Start_DMA+0x356>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800872c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_TIM_PWM_Start_DMA+0x388>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008740:	d004      	beq.n	800874c <HAL_TIM_PWM_Start_DMA+0x388>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a18      	ldr	r2, [pc, #96]	; (80087a8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d115      	bne.n	8008778 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8008754:	4013      	ands	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b06      	cmp	r3, #6
 800875c:	d015      	beq.n	800878a <HAL_TIM_PWM_Start_DMA+0x3c6>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008764:	d011      	beq.n	800878a <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008776:	e008      	b.n	800878a <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e000      	b.n	800878c <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	08008df9 	.word	0x08008df9
 800879c:	08008ea1 	.word	0x08008ea1
 80087a0:	08008d67 	.word	0x08008d67
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	00010007 	.word	0x00010007

080087b4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b0c      	cmp	r3, #12
 80087c6:	d855      	bhi.n	8008874 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	08008805 	.word	0x08008805
 80087d4:	08008875 	.word	0x08008875
 80087d8:	08008875 	.word	0x08008875
 80087dc:	08008875 	.word	0x08008875
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008875 	.word	0x08008875
 80087ec:	08008875 	.word	0x08008875
 80087f0:	0800883d 	.word	0x0800883d
 80087f4:	08008875 	.word	0x08008875
 80087f8:	08008875 	.word	0x08008875
 80087fc:	08008875 	.word	0x08008875
 8008800:	08008859 	.word	0x08008859
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008812:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	4618      	mov	r0, r3
 800881a:	f7fd ff13 	bl	8006644 <HAL_DMA_Abort_IT>
      break;
 800881e:	e02c      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800882e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	4618      	mov	r0, r3
 8008836:	f7fd ff05 	bl	8006644 <HAL_DMA_Abort_IT>
      break;
 800883a:	e01e      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800884a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4618      	mov	r0, r3
 8008852:	f7fd fef7 	bl	8006644 <HAL_DMA_Abort_IT>
      break;
 8008856:	e010      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008866:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd fee9 	bl	8006644 <HAL_DMA_Abort_IT>
      break;
 8008872:	e002      	b.n	800887a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	bf00      	nop
  }

  if (status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d176      	bne.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 feb9 	bl	8009600 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a39      	ldr	r2, [pc, #228]	; (8008978 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d009      	beq.n	80088ac <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a37      	ldr	r2, [pc, #220]	; (800897c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d004      	beq.n	80088ac <HAL_TIM_PWM_Stop_DMA+0xf8>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a36      	ldr	r2, [pc, #216]	; (8008980 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d101      	bne.n	80088b0 <HAL_TIM_PWM_Stop_DMA+0xfc>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80088b0:	2300      	movs	r3, #0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d017      	beq.n	80088e6 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80088c0:	4013      	ands	r3, r2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_TIM_PWM_Stop_DMA+0x132>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	f240 4344 	movw	r3, #1092	; 0x444
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <HAL_TIM_PWM_Stop_DMA+0x132>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6a1a      	ldr	r2, [r3, #32]
 80088ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80088f0:	4013      	ands	r3, r2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10f      	bne.n	8008916 <HAL_TIM_PWM_Stop_DMA+0x162>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6a1a      	ldr	r2, [r3, #32]
 80088fc:	f240 4344 	movw	r3, #1092	; 0x444
 8008900:	4013      	ands	r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d107      	bne.n	8008916 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0201 	bic.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d104      	bne.n	8008926 <HAL_TIM_PWM_Stop_DMA+0x172>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008924:	e023      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b04      	cmp	r3, #4
 800892a:	d104      	bne.n	8008936 <HAL_TIM_PWM_Stop_DMA+0x182>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008934:	e01b      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b08      	cmp	r3, #8
 800893a:	d104      	bne.n	8008946 <HAL_TIM_PWM_Stop_DMA+0x192>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008944:	e013      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b0c      	cmp	r3, #12
 800894a:	d104      	bne.n	8008956 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008954:	e00b      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b10      	cmp	r3, #16
 800895a:	d104      	bne.n	8008966 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008964:	e003      	b.n	800896e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400

08008984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800899e:	2302      	movs	r3, #2
 80089a0:	e0ff      	b.n	8008ba2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b14      	cmp	r3, #20
 80089ae:	f200 80f0 	bhi.w	8008b92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089b2:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008b93 	.word	0x08008b93
 80089c0:	08008b93 	.word	0x08008b93
 80089c4:	08008b93 	.word	0x08008b93
 80089c8:	08008a4d 	.word	0x08008a4d
 80089cc:	08008b93 	.word	0x08008b93
 80089d0:	08008b93 	.word	0x08008b93
 80089d4:	08008b93 	.word	0x08008b93
 80089d8:	08008a8f 	.word	0x08008a8f
 80089dc:	08008b93 	.word	0x08008b93
 80089e0:	08008b93 	.word	0x08008b93
 80089e4:	08008b93 	.word	0x08008b93
 80089e8:	08008acf 	.word	0x08008acf
 80089ec:	08008b93 	.word	0x08008b93
 80089f0:	08008b93 	.word	0x08008b93
 80089f4:	08008b93 	.word	0x08008b93
 80089f8:	08008b11 	.word	0x08008b11
 80089fc:	08008b93 	.word	0x08008b93
 8008a00:	08008b93 	.word	0x08008b93
 8008a04:	08008b93 	.word	0x08008b93
 8008a08:	08008b51 	.word	0x08008b51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fadc 	bl	8008fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0204 	bic.w	r2, r2, #4
 8008a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6999      	ldr	r1, [r3, #24]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	619a      	str	r2, [r3, #24]
      break;
 8008a4a:	e0a5      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fb38 	bl	80090c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	699a      	ldr	r2, [r3, #24]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6999      	ldr	r1, [r3, #24]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	021a      	lsls	r2, r3, #8
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	619a      	str	r2, [r3, #24]
      break;
 8008a8c:	e084      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fb91 	bl	80091bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0208 	orr.w	r2, r2, #8
 8008aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0204 	bic.w	r2, r2, #4
 8008ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69d9      	ldr	r1, [r3, #28]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	61da      	str	r2, [r3, #28]
      break;
 8008acc:	e064      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fbe9 	bl	80092ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69da      	ldr	r2, [r3, #28]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69d9      	ldr	r1, [r3, #28]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	021a      	lsls	r2, r3, #8
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	61da      	str	r2, [r3, #28]
      break;
 8008b0e:	e043      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fc26 	bl	8009368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0208 	orr.w	r2, r2, #8
 8008b2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0204 	bic.w	r2, r2, #4
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b4e:	e023      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fc5e 	bl	8009418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	021a      	lsls	r2, r3, #8
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b90:	e002      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
      break;
 8008b96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e0b6      	b.n	8008d36 <HAL_TIM_ConfigClockSource+0x18a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c04:	d03e      	beq.n	8008c84 <HAL_TIM_ConfigClockSource+0xd8>
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	f200 8087 	bhi.w	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	f000 8086 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x176>
 8008c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1a:	d87f      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c1c:	2b70      	cmp	r3, #112	; 0x70
 8008c1e:	d01a      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0xaa>
 8008c20:	2b70      	cmp	r3, #112	; 0x70
 8008c22:	d87b      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c24:	2b60      	cmp	r3, #96	; 0x60
 8008c26:	d050      	beq.n	8008cca <HAL_TIM_ConfigClockSource+0x11e>
 8008c28:	2b60      	cmp	r3, #96	; 0x60
 8008c2a:	d877      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c2c:	2b50      	cmp	r3, #80	; 0x50
 8008c2e:	d03c      	beq.n	8008caa <HAL_TIM_ConfigClockSource+0xfe>
 8008c30:	2b50      	cmp	r3, #80	; 0x50
 8008c32:	d873      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d058      	beq.n	8008cea <HAL_TIM_ConfigClockSource+0x13e>
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d86f      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c3c:	2b30      	cmp	r3, #48	; 0x30
 8008c3e:	d064      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x15e>
 8008c40:	2b30      	cmp	r3, #48	; 0x30
 8008c42:	d86b      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d060      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x15e>
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d867      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d05c      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x15e>
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d05a      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x15e>
 8008c54:	e062      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c66:	f000 fcab 	bl	80095c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	609a      	str	r2, [r3, #8]
      break;
 8008c82:	e04f      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c94:	f000 fc94 	bl	80095c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689a      	ldr	r2, [r3, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ca6:	609a      	str	r2, [r3, #8]
      break;
 8008ca8:	e03c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f000 fc08 	bl	80094cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2150      	movs	r1, #80	; 0x50
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fc61 	bl	800958a <TIM_ITRx_SetConfig>
      break;
 8008cc8:	e02c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f000 fc27 	bl	800952a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2160      	movs	r1, #96	; 0x60
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fc51 	bl	800958a <TIM_ITRx_SetConfig>
      break;
 8008ce8:	e01c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f000 fbe8 	bl	80094cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2140      	movs	r1, #64	; 0x40
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fc41 	bl	800958a <TIM_ITRx_SetConfig>
      break;
 8008d08:	e00c      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f000 fc38 	bl	800958a <TIM_ITRx_SetConfig>
      break;
 8008d1a:	e003      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d20:	e000      	b.n	8008d24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d107      	bne.n	8008d8e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d8c:	e02a      	b.n	8008de4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d107      	bne.n	8008da8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008da6:	e01d      	b.n	8008de4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d107      	bne.n	8008dc2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2204      	movs	r2, #4
 8008db6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc0:	e010      	b.n	8008de4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d107      	bne.n	8008ddc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2208      	movs	r2, #8
 8008dd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dda:	e003      	b.n	8008de4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff ffb4 	bl	8008d52 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d10b      	bne.n	8008e28 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d136      	bne.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e26:	e031      	b.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d10b      	bne.n	8008e4a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2202      	movs	r2, #2
 8008e36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d125      	bne.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e48:	e020      	b.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d10b      	bne.n	8008e6c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2204      	movs	r2, #4
 8008e58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d114      	bne.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e6a:	e00f      	b.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d10a      	bne.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2208      	movs	r2, #8
 8008e7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 fb05 	bl	800a49c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d103      	bne.n	8008ec0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	771a      	strb	r2, [r3, #28]
 8008ebe:	e019      	b.n	8008ef4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d103      	bne.n	8008ed2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	771a      	strb	r2, [r3, #28]
 8008ed0:	e010      	b.n	8008ef4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d103      	bne.n	8008ee4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	771a      	strb	r2, [r3, #28]
 8008ee2:	e007      	b.n	8008ef4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d102      	bne.n	8008ef4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff ff22 	bl	8008d3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a2a      	ldr	r2, [pc, #168]	; (8008fc4 <TIM_Base_SetConfig+0xbc>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_Base_SetConfig+0x20>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f26:	d108      	bne.n	8008f3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a21      	ldr	r2, [pc, #132]	; (8008fc4 <TIM_Base_SetConfig+0xbc>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00b      	beq.n	8008f5a <TIM_Base_SetConfig+0x52>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f48:	d007      	beq.n	8008f5a <TIM_Base_SetConfig+0x52>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <TIM_Base_SetConfig+0xc0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d003      	beq.n	8008f5a <TIM_Base_SetConfig+0x52>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a1d      	ldr	r2, [pc, #116]	; (8008fcc <TIM_Base_SetConfig+0xc4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d108      	bne.n	8008f6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a0c      	ldr	r2, [pc, #48]	; (8008fc4 <TIM_Base_SetConfig+0xbc>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_Base_SetConfig+0xa0>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a0b      	ldr	r2, [pc, #44]	; (8008fc8 <TIM_Base_SetConfig+0xc0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_Base_SetConfig+0xa0>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <TIM_Base_SetConfig+0xc4>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d103      	bne.n	8008fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	615a      	str	r2, [r3, #20]
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40012c00 	.word	0x40012c00
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400

08008fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0201 	bic.w	r2, r3, #1
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f023 0302 	bic.w	r3, r3, #2
 800901c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a24      	ldr	r2, [pc, #144]	; (80090bc <TIM_OC1_SetConfig+0xec>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d007      	beq.n	8009040 <TIM_OC1_SetConfig+0x70>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a23      	ldr	r2, [pc, #140]	; (80090c0 <TIM_OC1_SetConfig+0xf0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d003      	beq.n	8009040 <TIM_OC1_SetConfig+0x70>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a22      	ldr	r2, [pc, #136]	; (80090c4 <TIM_OC1_SetConfig+0xf4>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d10c      	bne.n	800905a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0308 	bic.w	r3, r3, #8
 8009046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 0304 	bic.w	r3, r3, #4
 8009058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a17      	ldr	r2, [pc, #92]	; (80090bc <TIM_OC1_SetConfig+0xec>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d007      	beq.n	8009072 <TIM_OC1_SetConfig+0xa2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a16      	ldr	r2, [pc, #88]	; (80090c0 <TIM_OC1_SetConfig+0xf0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d003      	beq.n	8009072 <TIM_OC1_SetConfig+0xa2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a15      	ldr	r2, [pc, #84]	; (80090c4 <TIM_OC1_SetConfig+0xf4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d111      	bne.n	8009096 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	4313      	orrs	r3, r2
 8009094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	621a      	str	r2, [r3, #32]
}
 80090b0:	bf00      	nop
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400

080090c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f023 0210 	bic.w	r2, r3, #16
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f023 0320 	bic.w	r3, r3, #32
 8009116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a22      	ldr	r2, [pc, #136]	; (80091b0 <TIM_OC2_SetConfig+0xe8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d10d      	bne.n	8009148 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a19      	ldr	r2, [pc, #100]	; (80091b0 <TIM_OC2_SetConfig+0xe8>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_OC2_SetConfig+0x98>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a18      	ldr	r2, [pc, #96]	; (80091b4 <TIM_OC2_SetConfig+0xec>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_OC2_SetConfig+0x98>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a17      	ldr	r2, [pc, #92]	; (80091b8 <TIM_OC2_SetConfig+0xf0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d113      	bne.n	8009188 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	bf00      	nop
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400

080091bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a21      	ldr	r2, [pc, #132]	; (80092a0 <TIM_OC3_SetConfig+0xe4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d10d      	bne.n	800923a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <TIM_OC3_SetConfig+0xe4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <TIM_OC3_SetConfig+0x96>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <TIM_OC3_SetConfig+0xe8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_OC3_SetConfig+0x96>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a16      	ldr	r2, [pc, #88]	; (80092a8 <TIM_OC3_SetConfig+0xec>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d113      	bne.n	800927a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	621a      	str	r2, [r3, #32]
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	40014000 	.word	0x40014000
 80092a8:	40014400 	.word	0x40014400

080092ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	031b      	lsls	r3, r3, #12
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4313      	orrs	r3, r2
 8009306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a14      	ldr	r2, [pc, #80]	; (800935c <TIM_OC4_SetConfig+0xb0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d007      	beq.n	8009320 <TIM_OC4_SetConfig+0x74>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a13      	ldr	r2, [pc, #76]	; (8009360 <TIM_OC4_SetConfig+0xb4>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d003      	beq.n	8009320 <TIM_OC4_SetConfig+0x74>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a12      	ldr	r2, [pc, #72]	; (8009364 <TIM_OC4_SetConfig+0xb8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d109      	bne.n	8009334 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	019b      	lsls	r3, r3, #6
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400

08009368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	041b      	lsls	r3, r3, #16
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a13      	ldr	r2, [pc, #76]	; (800940c <TIM_OC5_SetConfig+0xa4>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d007      	beq.n	80093d2 <TIM_OC5_SetConfig+0x6a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a12      	ldr	r2, [pc, #72]	; (8009410 <TIM_OC5_SetConfig+0xa8>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_OC5_SetConfig+0x6a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a11      	ldr	r2, [pc, #68]	; (8009414 <TIM_OC5_SetConfig+0xac>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d109      	bne.n	80093e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	40012c00 	.word	0x40012c00
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400

08009418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800945e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	051b      	lsls	r3, r3, #20
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4313      	orrs	r3, r2
 800946a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <TIM_OC6_SetConfig+0xa8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d007      	beq.n	8009484 <TIM_OC6_SetConfig+0x6c>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <TIM_OC6_SetConfig+0xac>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <TIM_OC6_SetConfig+0x6c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <TIM_OC6_SetConfig+0xb0>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d109      	bne.n	8009498 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800948a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	029b      	lsls	r3, r3, #10
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	4313      	orrs	r3, r2
 8009496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40014400 	.word	0x40014400

080094cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	f023 0201 	bic.w	r2, r3, #1
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f023 030a 	bic.w	r3, r3, #10
 8009508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	621a      	str	r2, [r3, #32]
}
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800952a:	b480      	push	{r7}
 800952c:	b087      	sub	sp, #28
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0210 	bic.w	r2, r3, #16
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	031b      	lsls	r3, r3, #12
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f043 0307 	orr.w	r3, r3, #7
 80095ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	609a      	str	r2, [r3, #8]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	021a      	lsls	r2, r3, #8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 031f 	and.w	r3, r3, #31
 8009612:	2201      	movs	r2, #1
 8009614:	fa02 f303 	lsl.w	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1a      	ldr	r2, [r3, #32]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	43db      	mvns	r3, r3
 8009622:	401a      	ands	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 031f 	and.w	r3, r3, #31
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
 8009638:	431a      	orrs	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
	...

0800964c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800965c:	2b01      	cmp	r3, #1
 800965e:	d101      	bne.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009660:	2302      	movs	r3, #2
 8009662:	e04f      	b.n	8009704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a21      	ldr	r2, [pc, #132]	; (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d108      	bne.n	80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a14      	ldr	r2, [pc, #80]	; (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d009      	beq.n	80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d004      	beq.n	80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a10      	ldr	r2, [pc, #64]	; (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d10c      	bne.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	40012c00 	.word	0x40012c00
 8009714:	40014000 	.word	0x40014000

08009718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009730:	2302      	movs	r3, #2
 8009732:	e060      	b.n	80097f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	041b      	lsls	r3, r3, #16
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a14      	ldr	r2, [pc, #80]	; (8009804 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d115      	bne.n	80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	051b      	lsls	r3, r3, #20
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40012c00 	.word	0x40012c00

08009808 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <board_init_common_rtc_init+0x48>)
 800980e:	4a11      	ldr	r2, [pc, #68]	; (8009854 <board_init_common_rtc_init+0x4c>)
 8009810:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <board_init_common_rtc_init+0x48>)
 8009814:	2200      	movs	r2, #0
 8009816:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8009818:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <board_init_common_rtc_init+0x48>)
 800981a:	227f      	movs	r2, #127	; 0x7f
 800981c:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <board_init_common_rtc_init+0x48>)
 8009820:	22ff      	movs	r2, #255	; 0xff
 8009822:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009824:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <board_init_common_rtc_init+0x48>)
 8009826:	2200      	movs	r2, #0
 8009828:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <board_init_common_rtc_init+0x48>)
 800982c:	2200      	movs	r2, #0
 800982e:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009830:	4b07      	ldr	r3, [pc, #28]	; (8009850 <board_init_common_rtc_init+0x48>)
 8009832:	2200      	movs	r2, #0
 8009834:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009836:	4b06      	ldr	r3, [pc, #24]	; (8009850 <board_init_common_rtc_init+0x48>)
 8009838:	2200      	movs	r2, #0
 800983a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800983c:	4804      	ldr	r0, [pc, #16]	; (8009850 <board_init_common_rtc_init+0x48>)
 800983e:	f7fe fc01 	bl	8008044 <HAL_RTC_Init>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <board_init_common_rtc_init+0x44>
 8009848:	f000 fa4b 	bl	8009ce2 <Error_Handler>
}
 800984c:	bf00      	nop
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20002324 	.word	0x20002324
 8009854:	40002800 	.word	0x40002800

08009858 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b0ae      	sub	sp, #184	; 0xb8
 800985c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800985e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009862:	2244      	movs	r2, #68	; 0x44
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fa3e 	bl	800ace8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800986c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	605a      	str	r2, [r3, #4]
 8009876:	609a      	str	r2, [r3, #8]
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	225c      	movs	r2, #92	; 0x5c
 8009880:	2100      	movs	r1, #0
 8009882:	4618      	mov	r0, r3
 8009884:	f001 fa30 	bl	800ace8 <memset>

    HAL_PWR_EnableBkUpAccess();
 8009888:	f7fd f9ee 	bl	8006c68 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800988c:	4b25      	ldr	r3, [pc, #148]	; (8009924 <SystemClock_Config+0xcc>)
 800988e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009892:	4a24      	ldr	r2, [pc, #144]	; (8009924 <SystemClock_Config+0xcc>)
 8009894:	f023 0318 	bic.w	r3, r3, #24
 8009898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800989c:	2305      	movs	r3, #5
 800989e:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80098a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a4:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80098a6:	2301      	movs	r3, #1
 80098a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 80098b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fd fabb 	bl	8006e30 <HAL_RCC_OscConfig>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d000      	beq.n	80098c2 <SystemClock_Config+0x6a>
 80098c0:	e7fe      	b.n	80098c0 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098c2:	230f      	movs	r3, #15
 80098c4:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80098c6:	2302      	movs	r3, #2
 80098c8:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098ca:	2300      	movs	r3, #0
 80098cc:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80098ce:	2300      	movs	r3, #0
 80098d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80098d2:	2300      	movs	r3, #0
 80098d4:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 80098d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80098da:	2102      	movs	r1, #2
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd febb 	bl	8007658 <HAL_RCC_ClockConfig>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d000      	beq.n	80098ea <SystemClock_Config+0x92>
 80098e8:	e7fe      	b.n	80098e8 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80098ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098ee:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80098f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80098f6:	1d3b      	adds	r3, r7, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f899 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <SystemClock_Config+0xb0>
 8009904:	f000 f9ed 	bl	8009ce2 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8009908:	f44f 7000 	mov.w	r0, #512	; 0x200
 800990c:	f7fd fa3a 	bl	8006d84 <HAL_PWREx_ControlVoltageScaling>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <SystemClock_Config+0xc2>
 8009916:	f000 f9e4 	bl	8009ce2 <Error_Handler>
}
 800991a:	bf00      	nop
 800991c:	37b8      	adds	r7, #184	; 0xb8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40021000 	.word	0x40021000

08009928 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b09e      	sub	sp, #120	; 0x78
 800992c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800992e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	605a      	str	r2, [r3, #4]
 8009938:	609a      	str	r2, [r3, #8]
 800993a:	60da      	str	r2, [r3, #12]
 800993c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800993e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	605a      	str	r2, [r3, #4]
 8009948:	609a      	str	r2, [r3, #8]
 800994a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800994c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	609a      	str	r2, [r3, #8]
 8009964:	60da      	str	r2, [r3, #12]
 8009966:	611a      	str	r2, [r3, #16]
 8009968:	615a      	str	r2, [r3, #20]
 800996a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800996c:	463b      	mov	r3, r7
 800996e:	222c      	movs	r2, #44	; 0x2c
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f001 f9b8 	bl	800ace8 <memset>
    g_tim1_handle.Instance = TIM1;
 8009978:	4b5c      	ldr	r3, [pc, #368]	; (8009aec <board_init_common_timer_init+0x1c4>)
 800997a:	4a5d      	ldr	r2, [pc, #372]	; (8009af0 <board_init_common_timer_init+0x1c8>)
 800997c:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800997e:	4b5b      	ldr	r3, [pc, #364]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009980:	2200      	movs	r2, #0
 8009982:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009984:	4b59      	ldr	r3, [pc, #356]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009986:	2200      	movs	r2, #0
 8009988:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800998a:	4b58      	ldr	r3, [pc, #352]	; (8009aec <board_init_common_timer_init+0x1c4>)
 800998c:	223b      	movs	r2, #59	; 0x3b
 800998e:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009990:	4b56      	ldr	r3, [pc, #344]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009992:	2200      	movs	r2, #0
 8009994:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009996:	4b55      	ldr	r3, [pc, #340]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009998:	2200      	movs	r2, #0
 800999a:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800999c:	4b53      	ldr	r3, [pc, #332]	; (8009aec <board_init_common_timer_init+0x1c4>)
 800999e:	2200      	movs	r2, #0
 80099a0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80099a2:	4852      	ldr	r0, [pc, #328]	; (8009aec <board_init_common_timer_init+0x1c4>)
 80099a4:	f7fe fc60 	bl	8008268 <HAL_TIM_Base_Init>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <board_init_common_timer_init+0x8a>
 80099ae:	f000 f998 	bl	8009ce2 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 80099b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80099bc:	4619      	mov	r1, r3
 80099be:	484b      	ldr	r0, [pc, #300]	; (8009aec <board_init_common_timer_init+0x1c4>)
 80099c0:	f7ff f8f4 	bl	8008bac <HAL_TIM_ConfigClockSource>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <board_init_common_timer_init+0xa6>
 80099ca:	f000 f98a 	bl	8009ce2 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80099ce:	4847      	ldr	r0, [pc, #284]	; (8009aec <board_init_common_timer_init+0x1c4>)
 80099d0:	f7fe fca1 	bl	8008316 <HAL_TIM_PWM_Init>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <board_init_common_timer_init+0xb6>
 80099da:	f000 f982 	bl	8009ce2 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099de:	2300      	movs	r3, #0
 80099e0:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80099e2:	2300      	movs	r3, #0
 80099e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80099ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099ee:	4619      	mov	r1, r3
 80099f0:	483e      	ldr	r0, [pc, #248]	; (8009aec <board_init_common_timer_init+0x1c4>)
 80099f2:	f7ff fe2b 	bl	800964c <HAL_TIMEx_MasterConfigSynchronization>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <board_init_common_timer_init+0xd8>
 80099fc:	f000 f971 	bl	8009ce2 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a00:	2360      	movs	r3, #96	; 0x60
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009a14:	2300      	movs	r3, #0
 8009a16:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8009a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a20:	2200      	movs	r2, #0
 8009a22:	4619      	mov	r1, r3
 8009a24:	4831      	ldr	r0, [pc, #196]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009a26:	f7fe ffad 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <board_init_common_timer_init+0x10c>
 8009a30:	f000 f957 	bl	8009ce2 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8009a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a38:	2204      	movs	r2, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	482b      	ldr	r0, [pc, #172]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009a3e:	f7fe ffa1 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <board_init_common_timer_init+0x124>
 8009a48:	f000 f94b 	bl	8009ce2 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8009a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a50:	2208      	movs	r2, #8
 8009a52:	4619      	mov	r1, r3
 8009a54:	4825      	ldr	r0, [pc, #148]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009a56:	f7fe ff95 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <board_init_common_timer_init+0x13c>
 8009a60:	f000 f93f 	bl	8009ce2 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a7c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a8a:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009a94:	463b      	mov	r3, r7
 8009a96:	4619      	mov	r1, r3
 8009a98:	4814      	ldr	r0, [pc, #80]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009a9a:	f7ff fe3d 	bl	8009718 <HAL_TIMEx_ConfigBreakDeadTime>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <board_init_common_timer_init+0x180>
 8009aa4:	f000 f91d 	bl	8009ce2 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4810      	ldr	r0, [pc, #64]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009aac:	f7fe fe82 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009ab0:	2104      	movs	r1, #4
 8009ab2:	480e      	ldr	r0, [pc, #56]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009ab4:	f7fe fe7e 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009ab8:	2108      	movs	r1, #8
 8009aba:	480c      	ldr	r0, [pc, #48]	; (8009aec <board_init_common_timer_init+0x1c4>)
 8009abc:	f7fe fe7a 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8009ac0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009ac4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ad6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009ada:	4619      	mov	r1, r3
 8009adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ae0:	f7fc ff18 	bl	8006914 <HAL_GPIO_Init>
}
 8009ae4:	bf00      	nop
 8009ae6:	3778      	adds	r7, #120	; 0x78
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	20002348 	.word	0x20002348
 8009af0:	40012c00 	.word	0x40012c00

08009af4 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009af8:	4b30      	ldr	r3, [pc, #192]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009afa:	2206      	movs	r2, #6
 8009afc:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009afe:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b00:	2208      	movs	r2, #8
 8009b02:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009b04:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b06:	2217      	movs	r2, #23
 8009b08:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009b0a:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b0c:	2228      	movs	r2, #40	; 0x28
 8009b0e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8009b10:	2200      	movs	r2, #0
 8009b12:	2118      	movs	r1, #24
 8009b14:	2006      	movs	r0, #6
 8009b16:	f7fc fc38 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009b1a:	2006      	movs	r0, #6
 8009b1c:	f7fc fc51 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8009b20:	2200      	movs	r2, #0
 8009b22:	2118      	movs	r1, #24
 8009b24:	2008      	movs	r0, #8
 8009b26:	f7fc fc30 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009b2a:	2008      	movs	r0, #8
 8009b2c:	f7fc fc49 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8009b30:	2200      	movs	r2, #0
 8009b32:	2118      	movs	r1, #24
 8009b34:	2017      	movs	r0, #23
 8009b36:	f7fc fc28 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009b3a:	2017      	movs	r0, #23
 8009b3c:	f7fc fc41 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8009b40:	2200      	movs	r2, #0
 8009b42:	2118      	movs	r1, #24
 8009b44:	2028      	movs	r0, #40	; 0x28
 8009b46:	f7fc fc20 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009b4a:	2028      	movs	r0, #40	; 0x28
 8009b4c:	f7fc fc39 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b52:	2206      	movs	r2, #6
 8009b54:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b58:	2208      	movs	r2, #8
 8009b5a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009b5c:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b5e:	2217      	movs	r2, #23
 8009b60:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009b62:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <board_init_common_nvic_setup_interrupts+0xc8>)
 8009b64:	2228      	movs	r2, #40	; 0x28
 8009b66:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	200c      	movs	r0, #12
 8009b6e:	f7fc fc0c 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009b72:	200c      	movs	r0, #12
 8009b74:	f7fc fc25 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	200d      	movs	r0, #13
 8009b7e:	f7fc fc04 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009b82:	200d      	movs	r0, #13
 8009b84:	f7fc fc1d 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	200f      	movs	r0, #15
 8009b8e:	f7fc fbfc 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009b92:	200f      	movs	r0, #15
 8009b94:	f7fc fc15 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	2010      	movs	r0, #16
 8009b9e:	f7fc fbf4 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009ba2:	2010      	movs	r0, #16
 8009ba4:	f7fc fc0d 	bl	80063c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	2011      	movs	r0, #17
 8009bae:	f7fc fbec 	bl	800638a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009bb2:	2011      	movs	r0, #17
 8009bb4:	f7fc fc05 	bl	80063c2 <HAL_NVIC_EnableIRQ>
}
 8009bb8:	bf00      	nop
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	40010400 	.word	0x40010400

08009bc0 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	60da      	str	r2, [r3, #12]
 8009bd2:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009bd4:	2305      	movs	r3, #5
 8009bd6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009bd8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009bde:	2301      	movs	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009be2:	1d3b      	adds	r3, r7, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bea:	f7fc fe93 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8009bee:	f242 0320 	movw	r3, #8224	; 0x2020
 8009bf2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009bf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009bf8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009bfe:	1d3b      	adds	r3, r7, #4
 8009c00:	4619      	mov	r1, r3
 8009c02:	4804      	ldr	r0, [pc, #16]	; (8009c14 <board_init_common_setup_wakeups+0x54>)
 8009c04:	f7fc fe86 	bl	8006914 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8009c08:	f7ff ff74 	bl	8009af4 <board_init_common_nvic_setup_interrupts>
}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	48000800 	.word	0x48000800

08009c18 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c1e:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	4a20      	ldr	r2, [pc, #128]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c24:	f043 0301 	orr.w	r3, r3, #1
 8009c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c36:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c3c:	f043 0302 	orr.w	r3, r3, #2
 8009c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c42:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c4e:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c52:	4a14      	ldr	r2, [pc, #80]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c54:	f043 0304 	orr.w	r3, r3, #4
 8009c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c5a:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009c66:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6a:	4a0e      	ldr	r2, [pc, #56]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c72:	4b0c      	ldr	r3, [pc, #48]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7a:	60bb      	str	r3, [r7, #8]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8009c7e:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c82:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c84:	f043 0301 	orr.w	r3, r3, #1
 8009c88:	6493      	str	r3, [r2, #72]	; 0x48
 8009c8a:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <board_init_port_wakeup+0x8c>)
 8009c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	607b      	str	r3, [r7, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
}
 8009c96:	bf00      	nop
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	40021000 	.word	0x40021000

08009ca8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
    srand(time(0));
 8009cac:	2000      	movs	r0, #0
 8009cae:	f001 f823 	bl	800acf8 <time>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fee7 	bl	800aa8c <srand>
    HAL_Init();
 8009cbe:	f7fc f9bd 	bl	800603c <HAL_Init>
    SystemClock_Config();
 8009cc2:	f7ff fdc9 	bl	8009858 <SystemClock_Config>

    board_init_port_wakeup();
 8009cc6:	f7ff ffa7 	bl	8009c18 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 8009cca:	f7ff ff79 	bl	8009bc0 <board_init_common_setup_wakeups>
    board_init_specific();
 8009cce:	f000 f80d 	bl	8009cec <board_init_specific>

    board_init_common_timer_init();
 8009cd2:	f7ff fe29 	bl	8009928 <board_init_common_timer_init>

    ws2812b_init();
 8009cd6:	f7f8 fc73 	bl	80025c0 <ws2812b_init>

    board_init_common_rtc_init();
 8009cda:	f7ff fd95 	bl	8009808 <board_init_common_rtc_init>
}
 8009cde:	bf00      	nop
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce6:	b672      	cpsid	i
}
 8009ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009cea:	e7fe      	b.n	8009cea <Error_Handler+0x8>

08009cec <board_init_specific>:
}
#endif


void board_init_specific(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cf2:	1d3b      	adds	r3, r7, #4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
 8009cfc:	60da      	str	r2, [r3, #12]
 8009cfe:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8009d00:	2301      	movs	r3, #1
 8009d02:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d04:	2301      	movs	r3, #1
 8009d06:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009d0c:	1d3b      	adds	r3, r7, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4844      	ldr	r0, [pc, #272]	; (8009e24 <board_init_specific+0x138>)
 8009d12:	f7fc fdff 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8009d16:	2201      	movs	r2, #1
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4842      	ldr	r0, [pc, #264]	; (8009e24 <board_init_specific+0x138>)
 8009d1c:	f7fc ff74 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009d20:	2380      	movs	r3, #128	; 0x80
 8009d22:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d24:	2301      	movs	r3, #1
 8009d26:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009d2c:	1d3b      	adds	r3, r7, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	483d      	ldr	r0, [pc, #244]	; (8009e28 <board_init_specific+0x13c>)
 8009d32:	f7fc fdef 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8009d36:	2200      	movs	r2, #0
 8009d38:	2180      	movs	r1, #128	; 0x80
 8009d3a:	483b      	ldr	r0, [pc, #236]	; (8009e28 <board_init_specific+0x13c>)
 8009d3c:	f7fc ff64 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d44:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d46:	2301      	movs	r3, #1
 8009d48:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009d4e:	1d3b      	adds	r3, r7, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4835      	ldr	r0, [pc, #212]	; (8009e28 <board_init_specific+0x13c>)
 8009d54:	f7fc fdde 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d5e:	4832      	ldr	r0, [pc, #200]	; (8009e28 <board_init_specific+0x13c>)
 8009d60:	f7fc ff52 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 8009d64:	23e0      	movs	r3, #224	; 0xe0
 8009d66:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009d70:	1d3b      	adds	r3, r7, #4
 8009d72:	4619      	mov	r1, r3
 8009d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d78:	f7fc fdcc 	bl	8006914 <HAL_GPIO_Init>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 8009d7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009d80:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009d8a:	1d3b      	adds	r3, r7, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4825      	ldr	r0, [pc, #148]	; (8009e24 <board_init_specific+0x138>)
 8009d90:	f7fc fdc0 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_BLUE_LED;
 8009d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d98:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	481f      	ldr	r0, [pc, #124]	; (8009e24 <board_init_specific+0x138>)
 8009da8:	f7fc fdb4 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_RESET);
 8009dac:	2200      	movs	r2, #0
 8009dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009db2:	481c      	ldr	r0, [pc, #112]	; (8009e24 <board_init_specific+0x138>)
 8009db4:	f7fc ff28 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_ORANGE_LED;
 8009db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dbc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009dc6:	1d3b      	adds	r3, r7, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4816      	ldr	r0, [pc, #88]	; (8009e24 <board_init_specific+0x138>)
 8009dcc:	f7fc fda2 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_RESET);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009dd6:	4813      	ldr	r0, [pc, #76]	; (8009e24 <board_init_specific+0x138>)
 8009dd8:	f7fc ff16 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 8009ddc:	2304      	movs	r3, #4
 8009dde:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009de0:	2301      	movs	r3, #1
 8009de2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009de8:	1d3b      	adds	r3, r7, #4
 8009dea:	4619      	mov	r1, r3
 8009dec:	480e      	ldr	r0, [pc, #56]	; (8009e28 <board_init_specific+0x13c>)
 8009dee:	f7fc fd91 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2104      	movs	r1, #4
 8009df6:	480c      	ldr	r0, [pc, #48]	; (8009e28 <board_init_specific+0x13c>)
 8009df8:	f7fc ff06 	bl	8006c08 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 8009dfc:	2308      	movs	r3, #8
 8009dfe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e00:	2301      	movs	r3, #1
 8009e02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009e08:	1d3b      	adds	r3, r7, #4
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4806      	ldr	r0, [pc, #24]	; (8009e28 <board_init_specific+0x13c>)
 8009e0e:	f7fc fd81 	bl	8006914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2108      	movs	r1, #8
 8009e16:	4804      	ldr	r0, [pc, #16]	; (8009e28 <board_init_specific+0x13c>)
 8009e18:	f7fc fef6 	bl	8006c08 <HAL_GPIO_WritePin>

#if defined(BOARD_SPUD_GLO_V4P2)
    board_init_peripheral_setup();
#endif
}
 8009e1c:	bf00      	nop
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	48000400 	.word	0x48000400
 8009e28:	48000800 	.word	0x48000800

08009e2c <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009e30:	4a0d      	ldr	r2, [pc, #52]	; (8009e68 <HAL_Set_DMA_Callbacks+0x3c>)
 8009e32:	2100      	movs	r1, #0
 8009e34:	480d      	ldr	r0, [pc, #52]	; (8009e6c <HAL_Set_DMA_Callbacks+0x40>)
 8009e36:	f7fc fcf5 	bl	8006824 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009e3a:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <HAL_Set_DMA_Callbacks+0x3c>)
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	480c      	ldr	r0, [pc, #48]	; (8009e70 <HAL_Set_DMA_Callbacks+0x44>)
 8009e40:	f7fc fcf0 	bl	8006824 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009e44:	4a08      	ldr	r2, [pc, #32]	; (8009e68 <HAL_Set_DMA_Callbacks+0x3c>)
 8009e46:	2100      	movs	r1, #0
 8009e48:	480a      	ldr	r0, [pc, #40]	; (8009e74 <HAL_Set_DMA_Callbacks+0x48>)
 8009e4a:	f7fc fceb 	bl	8006824 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009e4e:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <HAL_Set_DMA_Callbacks+0x3c>)
 8009e50:	2100      	movs	r1, #0
 8009e52:	4809      	ldr	r0, [pc, #36]	; (8009e78 <HAL_Set_DMA_Callbacks+0x4c>)
 8009e54:	f7fc fce6 	bl	8006824 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009e58:	4a03      	ldr	r2, [pc, #12]	; (8009e68 <HAL_Set_DMA_Callbacks+0x3c>)
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4807      	ldr	r0, [pc, #28]	; (8009e7c <HAL_Set_DMA_Callbacks+0x50>)
 8009e5e:	f7fc fce1 	bl	8006824 <HAL_DMA_RegisterCallback>
}
 8009e62:	bf00      	nop
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	0800a493 	.word	0x0800a493
 8009e6c:	200021bc 	.word	0x200021bc
 8009e70:	20002204 	.word	0x20002204
 8009e74:	2000224c 	.word	0x2000224c
 8009e78:	20002294 	.word	0x20002294
 8009e7c:	200022dc 	.word	0x200022dc

08009e80 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8009e86:	f107 0308 	add.w	r3, r7, #8
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e90:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <HAL_MspInit+0x60>)
 8009e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e94:	4a12      	ldr	r2, [pc, #72]	; (8009ee0 <HAL_MspInit+0x60>)
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8009e9c:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <HAL_MspInit+0x60>)
 8009e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <HAL_MspInit+0x60>)
 8009eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eac:	4a0c      	ldr	r2, [pc, #48]	; (8009ee0 <HAL_MspInit+0x60>)
 8009eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <HAL_MspInit+0x60>)
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fc fedb 	bl	8006c88 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009ed2:	f7fc ff39 	bl	8006d48 <HAL_PWR_EnablePVD>
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40021000 	.word	0x40021000

08009ee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <HAL_RTC_MspInit+0x30>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d107      	bne.n	8009f06 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <HAL_RTC_MspInit+0x34>)
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	4a06      	ldr	r2, [pc, #24]	; (8009f18 <HAL_RTC_MspInit+0x34>)
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40002800 	.word	0x40002800
 8009f18:	40021000 	.word	0x40021000

08009f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a6e      	ldr	r2, [pc, #440]	; (800a0e4 <HAL_TIM_Base_MspInit+0x1c8>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	f040 8091 	bne.w	800a052 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009f30:	4b6d      	ldr	r3, [pc, #436]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f34:	4a6c      	ldr	r2, [pc, #432]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8009f3c:	4b6a      	ldr	r3, [pc, #424]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009f48:	4b68      	ldr	r3, [pc, #416]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f4a:	4a69      	ldr	r2, [pc, #420]	; (800a0f0 <HAL_TIM_Base_MspInit+0x1d4>)
 8009f4c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8009f4e:	4b67      	ldr	r3, [pc, #412]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f54:	4b65      	ldr	r3, [pc, #404]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f56:	2210      	movs	r2, #16
 8009f58:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f5a:	4b64      	ldr	r3, [pc, #400]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009f60:	4b62      	ldr	r3, [pc, #392]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f62:	2280      	movs	r2, #128	; 0x80
 8009f64:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f66:	4b61      	ldr	r3, [pc, #388]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f6e:	4b5f      	ldr	r3, [pc, #380]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f74:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8009f76:	4b5d      	ldr	r3, [pc, #372]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f7c:	4b5b      	ldr	r3, [pc, #364]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f7e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8009f84:	4859      	ldr	r0, [pc, #356]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f86:	f7fc fa45 	bl	8006414 <HAL_DMA_Init>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8009f90:	f7ff fea7 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a55      	ldr	r2, [pc, #340]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f98:	625a      	str	r2, [r3, #36]	; 0x24
 8009f9a:	4a54      	ldr	r2, [pc, #336]	; (800a0ec <HAL_TIM_Base_MspInit+0x1d0>)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009fa0:	4b54      	ldr	r3, [pc, #336]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fa2:	4a55      	ldr	r2, [pc, #340]	; (800a0f8 <HAL_TIM_Base_MspInit+0x1dc>)
 8009fa4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8009fa6:	4b53      	ldr	r3, [pc, #332]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fa8:	2207      	movs	r2, #7
 8009faa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fac:	4b51      	ldr	r3, [pc, #324]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fae:	2210      	movs	r2, #16
 8009fb0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fb2:	4b50      	ldr	r3, [pc, #320]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009fb8:	4b4e      	ldr	r3, [pc, #312]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fba:	2280      	movs	r2, #128	; 0x80
 8009fbc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009fbe:	4b4d      	ldr	r3, [pc, #308]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009fc6:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fcc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8009fce:	4b49      	ldr	r3, [pc, #292]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009fd4:	4b47      	ldr	r3, [pc, #284]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fd6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009fdc:	4845      	ldr	r0, [pc, #276]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009fde:	f7fc fa19 	bl	8006414 <HAL_DMA_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009fe8:	f7ff fe7b 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a41      	ldr	r2, [pc, #260]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8009ff2:	4a40      	ldr	r2, [pc, #256]	; (800a0f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009ff8:	4b40      	ldr	r3, [pc, #256]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 8009ffa:	4a41      	ldr	r2, [pc, #260]	; (800a100 <HAL_TIM_Base_MspInit+0x1e4>)
 8009ffc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8009ffe:	4b3f      	ldr	r3, [pc, #252]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a000:	2207      	movs	r2, #7
 800a002:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a004:	4b3d      	ldr	r3, [pc, #244]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a006:	2210      	movs	r2, #16
 800a008:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a00a:	4b3c      	ldr	r3, [pc, #240]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800a010:	4b3a      	ldr	r3, [pc, #232]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a012:	2280      	movs	r2, #128	; 0x80
 800a014:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a016:	4b39      	ldr	r3, [pc, #228]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a01c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a01e:	4b37      	ldr	r3, [pc, #220]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a024:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800a026:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a028:	2200      	movs	r2, #0
 800a02a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a02c:	4b33      	ldr	r3, [pc, #204]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a02e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800a034:	4831      	ldr	r0, [pc, #196]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a036:	f7fc f9ed 	bl	8006414 <HAL_DMA_Init>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800a040:	f7ff fe4f 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a2d      	ldr	r2, [pc, #180]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a048:	62da      	str	r2, [r3, #44]	; 0x2c
 800a04a:	4a2c      	ldr	r2, [pc, #176]	; (800a0fc <HAL_TIM_Base_MspInit+0x1e0>)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6293      	str	r3, [r2, #40]	; 0x28
 800a050:	e041      	b.n	800a0d6 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a2b      	ldr	r2, [pc, #172]	; (800a104 <HAL_TIM_Base_MspInit+0x1e8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d13c      	bne.n	800a0d6 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a05c:	4b22      	ldr	r3, [pc, #136]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800a05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a060:	4a21      	ldr	r2, [pc, #132]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	6613      	str	r3, [r2, #96]	; 0x60
 800a068:	4b1f      	ldr	r3, [pc, #124]	; (800a0e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800a06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a070:	60bb      	str	r3, [r7, #8]
 800a072:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800a074:	4b24      	ldr	r3, [pc, #144]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a076:	4a25      	ldr	r2, [pc, #148]	; (800a10c <HAL_TIM_Base_MspInit+0x1f0>)
 800a078:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800a07a:	4b23      	ldr	r3, [pc, #140]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a07c:	2204      	movs	r2, #4
 800a07e:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a080:	4b21      	ldr	r3, [pc, #132]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a082:	2210      	movs	r2, #16
 800a084:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a086:	4b20      	ldr	r3, [pc, #128]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a088:	2200      	movs	r2, #0
 800a08a:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800a08c:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a08e:	2280      	movs	r2, #128	; 0x80
 800a090:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a092:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a094:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a098:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a09a:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a09c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0a0:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800a0a2:	4b19      	ldr	r3, [pc, #100]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800a0a8:	4b17      	ldr	r3, [pc, #92]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800a0ae:	4816      	ldr	r0, [pc, #88]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0b0:	f7fc f9b0 	bl	8006414 <HAL_DMA_Init>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800a0ba:	f7ff fe12 	bl	8009ce2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a11      	ldr	r2, [pc, #68]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24
 800a0c4:	4a10      	ldr	r2, [pc, #64]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0ce:	621a      	str	r2, [r3, #32]
 800a0d0:	4a0d      	ldr	r2, [pc, #52]	; (800a108 <HAL_TIM_Base_MspInit+0x1ec>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800a0d6:	f7ff fea9 	bl	8009e2c <HAL_Set_DMA_Callbacks>
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	40012c00 	.word	0x40012c00
 800a0e8:	40021000 	.word	0x40021000
 800a0ec:	200021bc 	.word	0x200021bc
 800a0f0:	4002001c 	.word	0x4002001c
 800a0f4:	20002204 	.word	0x20002204
 800a0f8:	40020030 	.word	0x40020030
 800a0fc:	2000224c 	.word	0x2000224c
 800a100:	40020080 	.word	0x40020080
 800a104:	40014400 	.word	0x40014400
 800a108:	200022dc 	.word	0x200022dc
 800a10c:	4002006c 	.word	0x4002006c

0800a110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a28      	ldr	r2, [pc, #160]	; (800a1c0 <HAL_TIM_PWM_MspInit+0xb0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d149      	bne.n	800a1b6 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a122:	4b28      	ldr	r3, [pc, #160]	; (800a1c4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a126:	4a27      	ldr	r2, [pc, #156]	; (800a1c4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a12c:	6613      	str	r3, [r2, #96]	; 0x60
 800a12e:	4b25      	ldr	r3, [pc, #148]	; (800a1c4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a13a:	4b23      	ldr	r3, [pc, #140]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a13c:	4a23      	ldr	r2, [pc, #140]	; (800a1cc <HAL_TIM_PWM_MspInit+0xbc>)
 800a13e:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a140:	4b21      	ldr	r3, [pc, #132]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a142:	2207      	movs	r2, #7
 800a144:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a148:	2210      	movs	r2, #16
 800a14a:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a14c:	4b1e      	ldr	r3, [pc, #120]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a152:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a154:	2280      	movs	r2, #128	; 0x80
 800a156:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a158:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a15a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a15e:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a160:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a166:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a168:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a16e:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a170:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a174:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a176:	4814      	ldr	r0, [pc, #80]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a178:	f7fc f94c 	bl	8006414 <HAL_DMA_Init>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a182:	f7ff fdae 	bl	8009ce2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a0f      	ldr	r2, [pc, #60]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a18a:	625a      	str	r2, [r3, #36]	; 0x24
 800a18c:	4a0e      	ldr	r2, [pc, #56]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a196:	621a      	str	r2, [r3, #32]
 800a198:	4a0b      	ldr	r2, [pc, #44]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a09      	ldr	r2, [pc, #36]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
 800a1a4:	4a08      	ldr	r2, [pc, #32]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a06      	ldr	r2, [pc, #24]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a1ae:	635a      	str	r2, [r3, #52]	; 0x34
 800a1b0:	4a05      	ldr	r2, [pc, #20]	; (800a1c8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	20002294 	.word	0x20002294
 800a1cc:	40020058 	.word	0x40020058

0800a1d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	71fb      	strb	r3, [r7, #7]
 800a1da:	e005      	b.n	800a1e8 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a1dc:	2064      	movs	r0, #100	; 0x64
 800a1de:	f7fb ff8d 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	71fb      	strb	r3, [r7, #7]
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f6      	beq.n	800a1dc <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a1ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a1f2:	f7fb ff83 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a1f6:	e7ee      	b.n	800a1d6 <NMI_Handler+0x6>

0800a1f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800a1fe:	2300      	movs	r3, #0
 800a200:	71fb      	strb	r3, [r7, #7]
 800a202:	e005      	b.n	800a210 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a204:	2064      	movs	r0, #100	; 0x64
 800a206:	f7fb ff79 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	3301      	adds	r3, #1
 800a20e:	71fb      	strb	r3, [r7, #7]
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d9f6      	bls.n	800a204 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a216:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a21a:	f7fb ff6f 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a21e:	e7ee      	b.n	800a1fe <HardFault_Handler+0x6>

0800a220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800a226:	2300      	movs	r3, #0
 800a228:	71fb      	strb	r3, [r7, #7]
 800a22a:	e005      	b.n	800a238 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a22c:	2064      	movs	r0, #100	; 0x64
 800a22e:	f7fb ff65 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	3301      	adds	r3, #1
 800a236:	71fb      	strb	r3, [r7, #7]
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d9f6      	bls.n	800a22c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a23e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a242:	f7fb ff5b 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a246:	e7ee      	b.n	800a226 <MemManage_Handler+0x6>

0800a248 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a24e:	2300      	movs	r3, #0
 800a250:	71fb      	strb	r3, [r7, #7]
 800a252:	e005      	b.n	800a260 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a254:	2064      	movs	r0, #100	; 0x64
 800a256:	f7fb ff51 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	3301      	adds	r3, #1
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d9f6      	bls.n	800a254 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a266:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a26a:	f7fb ff47 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a26e:	e7ee      	b.n	800a24e <BusFault_Handler+0x6>

0800a270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a276:	2300      	movs	r3, #0
 800a278:	71fb      	strb	r3, [r7, #7]
 800a27a:	e005      	b.n	800a288 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a27c:	2064      	movs	r0, #100	; 0x64
 800a27e:	f7fb ff3d 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	3301      	adds	r3, #1
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d9f6      	bls.n	800a27c <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a28e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a292:	f7fb ff33 	bl	80060fc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a296:	e7ee      	b.n	800a276 <UsageFault_Handler+0x6>

0800a298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
	...

0800a2a8 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a2a8:	b590      	push	{r4, r7, lr}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800a2b6:	2306      	movs	r3, #6
 800a2b8:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <EXTI0_IRQHandler+0x68>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	4a13      	ldr	r2, [pc, #76]	; (800a310 <EXTI0_IRQHandler+0x68>)
 800a2c2:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fc fcb6 	bl	8006c38 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a2cc:	797a      	ldrb	r2, [r7, #5]
 800a2ce:	797b      	ldrb	r3, [r7, #5]
 800a2d0:	4910      	ldr	r1, [pc, #64]	; (800a314 <EXTI0_IRQHandler+0x6c>)
 800a2d2:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a2d6:	490f      	ldr	r1, [pc, #60]	; (800a314 <EXTI0_IRQHandler+0x6c>)
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	440b      	add	r3, r1
 800a2dc:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a2de:	797c      	ldrb	r4, [r7, #5]
 800a2e0:	f7fa f9da 	bl	8004698 <xTaskGetTickCountFromISR>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4a0b      	ldr	r2, [pc, #44]	; (800a314 <EXTI0_IRQHandler+0x6c>)
 800a2e8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a2ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fc f874 	bl	80063de <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a2f6:	4b08      	ldr	r3, [pc, #32]	; (800a318 <EXTI0_IRQHandler+0x70>)
 800a2f8:	6818      	ldr	r0, [r3, #0]
 800a2fa:	7979      	ldrb	r1, [r7, #5]
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	2300      	movs	r3, #0
 800a302:	2203      	movs	r2, #3
 800a304:	f7fa fde6 	bl	8004ed4 <xTaskGenericNotifyFromISR>
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd90      	pop	{r4, r7, pc}
 800a310:	20002394 	.word	0x20002394
 800a314:	20000874 	.word	0x20000874
 800a318:	20002bb0 	.word	0x20002bb0

0800a31c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b085      	sub	sp, #20
 800a320:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800a322:	2304      	movs	r3, #4
 800a324:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800a326:	2300      	movs	r3, #0
 800a328:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800a32a:	2308      	movs	r3, #8
 800a32c:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800a32e:	4b15      	ldr	r3, [pc, #84]	; (800a384 <EXTI2_IRQHandler+0x68>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	4a13      	ldr	r2, [pc, #76]	; (800a384 <EXTI2_IRQHandler+0x68>)
 800a336:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fc fc7c 	bl	8006c38 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a340:	797a      	ldrb	r2, [r7, #5]
 800a342:	797b      	ldrb	r3, [r7, #5]
 800a344:	4910      	ldr	r1, [pc, #64]	; (800a388 <EXTI2_IRQHandler+0x6c>)
 800a346:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a34a:	490f      	ldr	r1, [pc, #60]	; (800a388 <EXTI2_IRQHandler+0x6c>)
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	440b      	add	r3, r1
 800a350:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a352:	797c      	ldrb	r4, [r7, #5]
 800a354:	f7fa f9a0 	bl	8004698 <xTaskGetTickCountFromISR>
 800a358:	4603      	mov	r3, r0
 800a35a:	4a0b      	ldr	r2, [pc, #44]	; (800a388 <EXTI2_IRQHandler+0x6c>)
 800a35c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a360:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a364:	4618      	mov	r0, r3
 800a366:	f7fc f83a 	bl	80063de <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a36a:	4b08      	ldr	r3, [pc, #32]	; (800a38c <EXTI2_IRQHandler+0x70>)
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	7979      	ldrb	r1, [r7, #5]
 800a370:	463b      	mov	r3, r7
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	2300      	movs	r3, #0
 800a376:	2203      	movs	r2, #3
 800a378:	f7fa fdac 	bl	8004ed4 <xTaskGenericNotifyFromISR>
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	bd90      	pop	{r4, r7, pc}
 800a384:	20002398 	.word	0x20002398
 800a388:	20000874 	.word	0x20000874
 800a38c:	20002bb0 	.word	0x20002bb0

0800a390 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a390:	b590      	push	{r4, r7, lr}
 800a392:	b085      	sub	sp, #20
 800a394:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800a396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a39a:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800a39c:	2301      	movs	r3, #1
 800a39e:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800a3a0:	2328      	movs	r3, #40	; 0x28
 800a3a2:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800a3a4:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <EXTI15_10_IRQHandler+0x6c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	4a14      	ldr	r2, [pc, #80]	; (800a3fc <EXTI15_10_IRQHandler+0x6c>)
 800a3ac:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fc fc41 	bl	8006c38 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a3b6:	797a      	ldrb	r2, [r7, #5]
 800a3b8:	797b      	ldrb	r3, [r7, #5]
 800a3ba:	4911      	ldr	r1, [pc, #68]	; (800a400 <EXTI15_10_IRQHandler+0x70>)
 800a3bc:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a3c0:	490f      	ldr	r1, [pc, #60]	; (800a400 <EXTI15_10_IRQHandler+0x70>)
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	440b      	add	r3, r1
 800a3c6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a3c8:	797c      	ldrb	r4, [r7, #5]
 800a3ca:	f7fa f965 	bl	8004698 <xTaskGetTickCountFromISR>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4a0b      	ldr	r2, [pc, #44]	; (800a400 <EXTI15_10_IRQHandler+0x70>)
 800a3d2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a3d6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fb ffff 	bl	80063de <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a3e0:	4b08      	ldr	r3, [pc, #32]	; (800a404 <EXTI15_10_IRQHandler+0x74>)
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	7979      	ldrb	r1, [r7, #5]
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	f7fa fd71 	bl	8004ed4 <xTaskGenericNotifyFromISR>
}
 800a3f2:	bf00      	nop
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd90      	pop	{r4, r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2000239c 	.word	0x2000239c
 800a400:	20000874 	.word	0x20000874
 800a404:	20002bb0 	.word	0x20002bb0

0800a408 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800a40e:	2320      	movs	r3, #32
 800a410:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800a412:	2302      	movs	r3, #2
 800a414:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800a416:	2317      	movs	r3, #23
 800a418:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <EXTI9_5_IRQHandler+0x68>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3301      	adds	r3, #1
 800a420:	4a13      	ldr	r2, [pc, #76]	; (800a470 <EXTI9_5_IRQHandler+0x68>)
 800a422:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fc fc06 	bl	8006c38 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a42c:	797a      	ldrb	r2, [r7, #5]
 800a42e:	797b      	ldrb	r3, [r7, #5]
 800a430:	4910      	ldr	r1, [pc, #64]	; (800a474 <EXTI9_5_IRQHandler+0x6c>)
 800a432:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a436:	490f      	ldr	r1, [pc, #60]	; (800a474 <EXTI9_5_IRQHandler+0x6c>)
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	440b      	add	r3, r1
 800a43c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a43e:	797c      	ldrb	r4, [r7, #5]
 800a440:	f7fa f92a 	bl	8004698 <xTaskGetTickCountFromISR>
 800a444:	4603      	mov	r3, r0
 800a446:	4a0b      	ldr	r2, [pc, #44]	; (800a474 <EXTI9_5_IRQHandler+0x6c>)
 800a448:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a44c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	f7fb ffc4 	bl	80063de <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a456:	4b08      	ldr	r3, [pc, #32]	; (800a478 <EXTI9_5_IRQHandler+0x70>)
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	7979      	ldrb	r1, [r7, #5]
 800a45c:	463b      	mov	r3, r7
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2300      	movs	r3, #0
 800a462:	2203      	movs	r2, #3
 800a464:	f7fa fd36 	bl	8004ed4 <xTaskGenericNotifyFromISR>
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd90      	pop	{r4, r7, pc}
 800a470:	200023a0 	.word	0x200023a0
 800a474:	20000874 	.word	0x20000874
 800a478:	20002bb0 	.word	0x20002bb0

0800a47c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	80fb      	strh	r3, [r7, #6]

}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
    while(1);
 800a49a:	e7fe      	b.n	800a49a <HAL_DMA_CMPLT_CALLBACK+0x8>

0800a49c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7f1b      	ldrb	r3, [r3, #28]
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d016      	beq.n	800a4da <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	dc1c      	bgt.n	800a4ea <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d002      	beq.n	800a4ba <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d008      	beq.n	800a4ca <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800a4b8:	e017      	b.n	800a4ea <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7fe f979 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	701a      	strb	r2, [r3, #0]
        break;
 800a4c8:	e010      	b.n	800a4ec <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a4ca:	2104      	movs	r1, #4
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7fe f971 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	701a      	strb	r2, [r3, #0]
        break;
 800a4d8:	e008      	b.n	800a4ec <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a4da:	2108      	movs	r1, #8
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7fe f969 	bl	80087b4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800a4e2:	4b06      	ldr	r3, [pc, #24]	; (800a4fc <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
        break;
 800a4e8:	e000      	b.n	800a4ec <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800a4ea:	bf00      	nop
    }
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	2000006d 	.word	0x2000006d
 800a4f8:	2000006e 	.word	0x2000006e
 800a4fc:	2000006f 	.word	0x2000006f

0800a500 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a504:	4802      	ldr	r0, [pc, #8]	; (800a510 <DMA1_Channel2_IRQHandler+0x10>)
 800a506:	f7fc f8de 	bl	80066c6 <HAL_DMA_IRQHandler>
}
 800a50a:	bf00      	nop
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200021bc 	.word	0x200021bc

0800a514 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a518:	4802      	ldr	r0, [pc, #8]	; (800a524 <DMA1_Channel3_IRQHandler+0x10>)
 800a51a:	f7fc f8d4 	bl	80066c6 <HAL_DMA_IRQHandler>
}
 800a51e:	bf00      	nop
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20002204 	.word	0x20002204

0800a528 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a52c:	4802      	ldr	r0, [pc, #8]	; (800a538 <DMA1_Channel5_IRQHandler+0x10>)
 800a52e:	f7fc f8ca 	bl	80066c6 <HAL_DMA_IRQHandler>
}
 800a532:	bf00      	nop
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20002294 	.word	0x20002294

0800a53c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a540:	4802      	ldr	r0, [pc, #8]	; (800a54c <DMA1_Channel6_IRQHandler+0x10>)
 800a542:	f7fc f8c0 	bl	80066c6 <HAL_DMA_IRQHandler>
}
 800a546:	bf00      	nop
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	200022dc 	.word	0x200022dc

0800a550 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a554:	4802      	ldr	r0, [pc, #8]	; (800a560 <DMA1_Channel7_IRQHandler+0x10>)
 800a556:	f7fc f8b6 	bl	80066c6 <HAL_DMA_IRQHandler>
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	2000224c 	.word	0x2000224c

0800a564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
	return 1;
 800a568:	2301      	movs	r3, #1
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <_kill>:

int _kill(int pid, int sig)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a57e:	f000 fbf7 	bl	800ad70 <__errno>
 800a582:	4603      	mov	r3, r0
 800a584:	2216      	movs	r2, #22
 800a586:	601a      	str	r2, [r3, #0]
	return -1;
 800a588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <_exit>:

void _exit (int status)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a59c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ffe7 	bl	800a574 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a5a6:	e7fe      	b.n	800a5a6 <_exit+0x12>

0800a5a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	e00a      	b.n	800a5d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a5ba:	f3af 8000 	nop.w
 800a5be:	4601      	mov	r1, r0
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	60ba      	str	r2, [r7, #8]
 800a5c6:	b2ca      	uxtb	r2, r1
 800a5c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	dbf0      	blt.n	800a5ba <_read+0x12>
	}

return len;
 800a5d8:	687b      	ldr	r3, [r7, #4]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e009      	b.n	800a608 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	60ba      	str	r2, [r7, #8]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3301      	adds	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	dbf1      	blt.n	800a5f4 <_write+0x12>
	}
	return len;
 800a610:	687b      	ldr	r3, [r7, #4]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_close>:

int _close(int file)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
	return -1;
 800a622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a642:	605a      	str	r2, [r3, #4]
	return 0;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <_isatty>:

int _isatty(int file)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
	return 1;
 800a65a:	2301      	movs	r3, #1
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
	return 0;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a68c:	4a14      	ldr	r2, [pc, #80]	; (800a6e0 <_sbrk+0x5c>)
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <_sbrk+0x60>)
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a698:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <_sbrk+0x64>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d102      	bne.n	800a6a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a6a0:	4b11      	ldr	r3, [pc, #68]	; (800a6e8 <_sbrk+0x64>)
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <_sbrk+0x68>)
 800a6a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <_sbrk+0x64>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d207      	bcs.n	800a6c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a6b4:	f000 fb5c 	bl	800ad70 <__errno>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	220c      	movs	r2, #12
 800a6bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6c2:	e009      	b.n	800a6d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <_sbrk+0x64>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <_sbrk+0x64>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	4a05      	ldr	r2, [pc, #20]	; (800a6e8 <_sbrk+0x64>)
 800a6d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20010000 	.word	0x20010000
 800a6e4:	00000400 	.word	0x00000400
 800a6e8:	200023a4 	.word	0x200023a4
 800a6ec:	20003dc0 	.word	0x20003dc0

0800a6f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a6f4:	4b06      	ldr	r3, [pc, #24]	; (800a710 <SystemInit+0x20>)
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	4a05      	ldr	r2, [pc, #20]	; (800a710 <SystemInit+0x20>)
 800a6fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a704:	bf00      	nop
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	e000ed00 	.word	0xe000ed00

0800a714 <flash_info_block_init>:
    return return_val;
}


void flash_info_block_init(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 800a718:	f7fb fd14 	bl	8006144 <HAL_GetUIDw0>
 800a71c:	4603      	mov	r3, r0
 800a71e:	4a32      	ldr	r2, [pc, #200]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a720:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 800a724:	f7fb fd1a 	bl	800615c <HAL_GetUIDw1>
 800a728:	4603      	mov	r3, r0
 800a72a:	4a2f      	ldr	r2, [pc, #188]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a72c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800a730:	f7fb fd20 	bl	8006174 <HAL_GetUIDw2>
 800a734:	4603      	mov	r3, r0
 800a736:	4a2c      	ldr	r2, [pc, #176]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a738:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800a73c:	4b2a      	ldr	r3, [pc, #168]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a73e:	2201      	movs	r2, #1
 800a740:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 800a742:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a744:	2201      	movs	r2, #1
 800a746:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 800a748:	4b27      	ldr	r3, [pc, #156]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a74a:	2201      	movs	r2, #1
 800a74c:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 800a74e:	4b26      	ldr	r3, [pc, #152]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a750:	2201      	movs	r2, #1
 800a752:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 800a754:	4b24      	ldr	r3, [pc, #144]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a756:	2201      	movs	r2, #1
 800a758:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a75c:	2201      	movs	r2, #1
 800a75e:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800a760:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a762:	2201      	movs	r2, #1
 800a764:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800a766:	4b20      	ldr	r3, [pc, #128]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a768:	2201      	movs	r2, #1
 800a76a:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800a76c:	4b1e      	ldr	r3, [pc, #120]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a76e:	2201      	movs	r2, #1
 800a770:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800a772:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a774:	2201      	movs	r2, #1
 800a776:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800a778:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 800a77e:	4a1a      	ldr	r2, [pc, #104]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a780:	7ad3      	ldrb	r3, [r2, #11]
 800a782:	f043 0301 	orr.w	r3, r3, #1
 800a786:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 800a788:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a78a:	7ad3      	ldrb	r3, [r2, #11]
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 800a792:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a794:	7ad3      	ldrb	r3, [r2, #11]
 800a796:	f043 0304 	orr.w	r3, r3, #4
 800a79a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 800a79c:	4a12      	ldr	r2, [pc, #72]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a79e:	7ad3      	ldrb	r3, [r2, #11]
 800a7a0:	f043 0308 	orr.w	r3, r3, #8
 800a7a4:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 800a7a6:	4a10      	ldr	r2, [pc, #64]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7a8:	7ad3      	ldrb	r3, [r2, #11]
 800a7aa:	f043 0310 	orr.w	r3, r3, #16
 800a7ae:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 800a7b0:	4a0d      	ldr	r2, [pc, #52]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7b2:	7ad3      	ldrb	r3, [r2, #11]
 800a7b4:	f043 0320 	orr.w	r3, r3, #32
 800a7b8:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 800a7ba:	4a0b      	ldr	r2, [pc, #44]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7bc:	7ad3      	ldrb	r3, [r2, #11]
 800a7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c2:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 800a7c4:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7c6:	7ad3      	ldrb	r3, [r2, #11]
 800a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7cc:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 800a7ce:	4a06      	ldr	r2, [pc, #24]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7d0:	7b13      	ldrb	r3, [r2, #12]
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 800a7d8:	4a03      	ldr	r2, [pc, #12]	; (800a7e8 <flash_info_block_init+0xd4>)
 800a7da:	7b13      	ldrb	r3, [r2, #12]
 800a7dc:	f043 0302 	orr.w	r3, r3, #2
 800a7e0:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 800a7e2:	bf00      	nop
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200023a8 	.word	0x200023a8

0800a7ec <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800a7f0:	4b0d      	ldr	r3, [pc, #52]	; (800a828 <flash_info_init+0x3c>)
 800a7f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a7f6:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 800a7f8:	f7ff ff8c 	bl	800a714 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a7fc:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <flash_info_init+0x40>)
 800a7fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a806:	d10d      	bne.n	800a824 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a808:	4b08      	ldr	r3, [pc, #32]	; (800a82c <flash_info_init+0x40>)
 800a80a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a812:	d107      	bne.n	800a824 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 800a814:	4b05      	ldr	r3, [pc, #20]	; (800a82c <flash_info_init+0x40>)
 800a816:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a81e:	d101      	bne.n	800a824 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800a820:	f7ff ff78 	bl	800a714 <flash_info_block_init>
    }
}
 800a824:	bf00      	nop
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20002ba8 	.word	0x20002ba8
 800a82c:	200023a8 	.word	0x200023a8

0800a830 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800a834:	f7ff fa38 	bl	8009ca8 <board_init_common_board_init>
    flash_info_init();
 800a838:	f7ff ffd8 	bl	800a7ec <flash_info_init>
    task_create();
 800a83c:	f000 f808 	bl	800a850 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800a840:	f7f7 fcc0 	bl	80021c4 <reset_ws2812b>
	osKernelStart();
 800a844:	f7f8 fd88 	bl	8003358 <osKernelStart>
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	bd80      	pop	{r7, pc}
	...

0800a850 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800a854:	f7f8 fd5c 	bl	8003310 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800a858:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <task_create+0x34>)
 800a85a:	2100      	movs	r1, #0
 800a85c:	480a      	ldr	r0, [pc, #40]	; (800a888 <task_create+0x38>)
 800a85e:	f7f8 fda1 	bl	80033a4 <osThreadNew>
 800a862:	4603      	mov	r3, r0
 800a864:	4a09      	ldr	r2, [pc, #36]	; (800a88c <task_create+0x3c>)
 800a866:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <task_create+0x40>)
 800a86a:	2100      	movs	r1, #0
 800a86c:	4809      	ldr	r0, [pc, #36]	; (800a894 <task_create+0x44>)
 800a86e:	f7f8 fd99 	bl	80033a4 <osThreadNew>
 800a872:	4603      	mov	r3, r0
 800a874:	4a08      	ldr	r2, [pc, #32]	; (800a898 <task_create+0x48>)
 800a876:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <task_create+0x4c>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
}
 800a87e:	bf00      	nop
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	0800bac4 	.word	0x0800bac4
 800a888:	08002861 	.word	0x08002861
 800a88c:	20002bb0 	.word	0x20002bb0
 800a890:	0800bae8 	.word	0x0800bae8
 800a894:	08002b85 	.word	0x08002b85
 800a898:	20002bac 	.word	0x20002bac
 800a89c:	20003c6c 	.word	0x20003c6c

0800a8a0 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800a8aa:	f000 f91d 	bl	800aae8 <rand>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	1acb      	subs	r3, r1, r3
 800a8b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8bc:	fb01 f303 	mul.w	r3, r1, r3
 800a8c0:	1ad2      	subs	r2, r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4413      	add	r3, r2
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a8d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a8d4:	f7ff ff0c 	bl	800a6f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a8d8:	480c      	ldr	r0, [pc, #48]	; (800a90c <LoopForever+0x6>)
  ldr r1, =_edata
 800a8da:	490d      	ldr	r1, [pc, #52]	; (800a910 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a8dc:	4a0d      	ldr	r2, [pc, #52]	; (800a914 <LoopForever+0xe>)
  movs r3, #0
 800a8de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8e0:	e002      	b.n	800a8e8 <LoopCopyDataInit>

0800a8e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8e6:	3304      	adds	r3, #4

0800a8e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8ec:	d3f9      	bcc.n	800a8e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8ee:	4a0a      	ldr	r2, [pc, #40]	; (800a918 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a8f0:	4c0a      	ldr	r4, [pc, #40]	; (800a91c <LoopForever+0x16>)
  movs r3, #0
 800a8f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8f4:	e001      	b.n	800a8fa <LoopFillZerobss>

0800a8f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8f8:	3204      	adds	r2, #4

0800a8fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a8fc:	d3fb      	bcc.n	800a8f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a8fe:	f000 fa3d 	bl	800ad7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a902:	f7ff ff95 	bl	800a830 <main>

0800a906 <LoopForever>:

LoopForever:
    b LoopForever
 800a906:	e7fe      	b.n	800a906 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a908:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a90c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a910:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800a914:	0800bbf4 	.word	0x0800bbf4
  ldr r2, =_sbss
 800a918:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800a91c:	20003dbc 	.word	0x20003dbc

0800a920 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a920:	e7fe      	b.n	800a920 <ADC1_IRQHandler>
	...

0800a924 <malloc>:
 800a924:	4b02      	ldr	r3, [pc, #8]	; (800a930 <malloc+0xc>)
 800a926:	4601      	mov	r1, r0
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	f000 b823 	b.w	800a974 <_malloc_r>
 800a92e:	bf00      	nop
 800a930:	200000cc 	.word	0x200000cc

0800a934 <sbrk_aligned>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	4e0e      	ldr	r6, [pc, #56]	; (800a970 <sbrk_aligned+0x3c>)
 800a938:	460c      	mov	r4, r1
 800a93a:	6831      	ldr	r1, [r6, #0]
 800a93c:	4605      	mov	r5, r0
 800a93e:	b911      	cbnz	r1, 800a946 <sbrk_aligned+0x12>
 800a940:	f000 fa06 	bl	800ad50 <_sbrk_r>
 800a944:	6030      	str	r0, [r6, #0]
 800a946:	4621      	mov	r1, r4
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 fa01 	bl	800ad50 <_sbrk_r>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d00a      	beq.n	800a968 <sbrk_aligned+0x34>
 800a952:	1cc4      	adds	r4, r0, #3
 800a954:	f024 0403 	bic.w	r4, r4, #3
 800a958:	42a0      	cmp	r0, r4
 800a95a:	d007      	beq.n	800a96c <sbrk_aligned+0x38>
 800a95c:	1a21      	subs	r1, r4, r0
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 f9f6 	bl	800ad50 <_sbrk_r>
 800a964:	3001      	adds	r0, #1
 800a966:	d101      	bne.n	800a96c <sbrk_aligned+0x38>
 800a968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a96c:	4620      	mov	r0, r4
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	20003c74 	.word	0x20003c74

0800a974 <_malloc_r>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	1ccd      	adds	r5, r1, #3
 800a97a:	f025 0503 	bic.w	r5, r5, #3
 800a97e:	3508      	adds	r5, #8
 800a980:	2d0c      	cmp	r5, #12
 800a982:	bf38      	it	cc
 800a984:	250c      	movcc	r5, #12
 800a986:	2d00      	cmp	r5, #0
 800a988:	4607      	mov	r7, r0
 800a98a:	db01      	blt.n	800a990 <_malloc_r+0x1c>
 800a98c:	42a9      	cmp	r1, r5
 800a98e:	d905      	bls.n	800a99c <_malloc_r+0x28>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	2600      	movs	r6, #0
 800a996:	4630      	mov	r0, r6
 800a998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a99c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa70 <_malloc_r+0xfc>
 800a9a0:	f000 f868 	bl	800aa74 <__malloc_lock>
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	461c      	mov	r4, r3
 800a9aa:	bb5c      	cbnz	r4, 800aa04 <_malloc_r+0x90>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	f7ff ffc0 	bl	800a934 <sbrk_aligned>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	d155      	bne.n	800aa66 <_malloc_r+0xf2>
 800a9ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a9be:	4626      	mov	r6, r4
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	d145      	bne.n	800aa50 <_malloc_r+0xdc>
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d048      	beq.n	800aa5a <_malloc_r+0xe6>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	eb04 0903 	add.w	r9, r4, r3
 800a9d2:	f000 f9bd 	bl	800ad50 <_sbrk_r>
 800a9d6:	4581      	cmp	r9, r0
 800a9d8:	d13f      	bne.n	800aa5a <_malloc_r+0xe6>
 800a9da:	6821      	ldr	r1, [r4, #0]
 800a9dc:	1a6d      	subs	r5, r5, r1
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff ffa7 	bl	800a934 <sbrk_aligned>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d037      	beq.n	800aa5a <_malloc_r+0xe6>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	442b      	add	r3, r5
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d038      	beq.n	800aa6a <_malloc_r+0xf6>
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	42a2      	cmp	r2, r4
 800a9fc:	d12b      	bne.n	800aa56 <_malloc_r+0xe2>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	e00f      	b.n	800aa24 <_malloc_r+0xb0>
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	1b52      	subs	r2, r2, r5
 800aa08:	d41f      	bmi.n	800aa4a <_malloc_r+0xd6>
 800aa0a:	2a0b      	cmp	r2, #11
 800aa0c:	d917      	bls.n	800aa3e <_malloc_r+0xca>
 800aa0e:	1961      	adds	r1, r4, r5
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	6059      	strne	r1, [r3, #4]
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	bf08      	it	eq
 800aa1c:	f8c8 1000 	streq.w	r1, [r8]
 800aa20:	5162      	str	r2, [r4, r5]
 800aa22:	604b      	str	r3, [r1, #4]
 800aa24:	4638      	mov	r0, r7
 800aa26:	f104 060b 	add.w	r6, r4, #11
 800aa2a:	f000 f829 	bl	800aa80 <__malloc_unlock>
 800aa2e:	f026 0607 	bic.w	r6, r6, #7
 800aa32:	1d23      	adds	r3, r4, #4
 800aa34:	1af2      	subs	r2, r6, r3
 800aa36:	d0ae      	beq.n	800a996 <_malloc_r+0x22>
 800aa38:	1b9b      	subs	r3, r3, r6
 800aa3a:	50a3      	str	r3, [r4, r2]
 800aa3c:	e7ab      	b.n	800a996 <_malloc_r+0x22>
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	6862      	ldr	r2, [r4, #4]
 800aa42:	d1dd      	bne.n	800aa00 <_malloc_r+0x8c>
 800aa44:	f8c8 2000 	str.w	r2, [r8]
 800aa48:	e7ec      	b.n	800aa24 <_malloc_r+0xb0>
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	6864      	ldr	r4, [r4, #4]
 800aa4e:	e7ac      	b.n	800a9aa <_malloc_r+0x36>
 800aa50:	4634      	mov	r4, r6
 800aa52:	6876      	ldr	r6, [r6, #4]
 800aa54:	e7b4      	b.n	800a9c0 <_malloc_r+0x4c>
 800aa56:	4613      	mov	r3, r2
 800aa58:	e7cc      	b.n	800a9f4 <_malloc_r+0x80>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f000 f80e 	bl	800aa80 <__malloc_unlock>
 800aa64:	e797      	b.n	800a996 <_malloc_r+0x22>
 800aa66:	6025      	str	r5, [r4, #0]
 800aa68:	e7dc      	b.n	800aa24 <_malloc_r+0xb0>
 800aa6a:	605b      	str	r3, [r3, #4]
 800aa6c:	deff      	udf	#255	; 0xff
 800aa6e:	bf00      	nop
 800aa70:	20003c70 	.word	0x20003c70

0800aa74 <__malloc_lock>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__malloc_lock+0x8>)
 800aa76:	f000 b9a6 	b.w	800adc6 <__retarget_lock_acquire_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	20003db4 	.word	0x20003db4

0800aa80 <__malloc_unlock>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__malloc_unlock+0x8>)
 800aa82:	f000 b9a1 	b.w	800adc8 <__retarget_lock_release_recursive>
 800aa86:	bf00      	nop
 800aa88:	20003db4 	.word	0x20003db4

0800aa8c <srand>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <srand+0x44>)
 800aa90:	681d      	ldr	r5, [r3, #0]
 800aa92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800aa94:	4604      	mov	r4, r0
 800aa96:	b9b3      	cbnz	r3, 800aac6 <srand+0x3a>
 800aa98:	2018      	movs	r0, #24
 800aa9a:	f7ff ff43 	bl	800a924 <malloc>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	6328      	str	r0, [r5, #48]	; 0x30
 800aaa2:	b920      	cbnz	r0, 800aaae <srand+0x22>
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <srand+0x48>)
 800aaa6:	480c      	ldr	r0, [pc, #48]	; (800aad8 <srand+0x4c>)
 800aaa8:	2146      	movs	r1, #70	; 0x46
 800aaaa:	f000 f99d 	bl	800ade8 <__assert_func>
 800aaae:	490b      	ldr	r1, [pc, #44]	; (800aadc <srand+0x50>)
 800aab0:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <srand+0x54>)
 800aab2:	e9c0 1300 	strd	r1, r3, [r0]
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <srand+0x58>)
 800aab8:	6083      	str	r3, [r0, #8]
 800aaba:	230b      	movs	r3, #11
 800aabc:	8183      	strh	r3, [r0, #12]
 800aabe:	2100      	movs	r1, #0
 800aac0:	2001      	movs	r0, #1
 800aac2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aac6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800aac8:	2200      	movs	r2, #0
 800aaca:	611c      	str	r4, [r3, #16]
 800aacc:	615a      	str	r2, [r3, #20]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	200000cc 	.word	0x200000cc
 800aad4:	0800bb0c 	.word	0x0800bb0c
 800aad8:	0800bb23 	.word	0x0800bb23
 800aadc:	abcd330e 	.word	0xabcd330e
 800aae0:	e66d1234 	.word	0xe66d1234
 800aae4:	0005deec 	.word	0x0005deec

0800aae8 <rand>:
 800aae8:	4b16      	ldr	r3, [pc, #88]	; (800ab44 <rand+0x5c>)
 800aaea:	b510      	push	{r4, lr}
 800aaec:	681c      	ldr	r4, [r3, #0]
 800aaee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aaf0:	b9b3      	cbnz	r3, 800ab20 <rand+0x38>
 800aaf2:	2018      	movs	r0, #24
 800aaf4:	f7ff ff16 	bl	800a924 <malloc>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6320      	str	r0, [r4, #48]	; 0x30
 800aafc:	b920      	cbnz	r0, 800ab08 <rand+0x20>
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <rand+0x60>)
 800ab00:	4812      	ldr	r0, [pc, #72]	; (800ab4c <rand+0x64>)
 800ab02:	2152      	movs	r1, #82	; 0x52
 800ab04:	f000 f970 	bl	800ade8 <__assert_func>
 800ab08:	4911      	ldr	r1, [pc, #68]	; (800ab50 <rand+0x68>)
 800ab0a:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <rand+0x6c>)
 800ab0c:	e9c0 1300 	strd	r1, r3, [r0]
 800ab10:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <rand+0x70>)
 800ab12:	6083      	str	r3, [r0, #8]
 800ab14:	230b      	movs	r3, #11
 800ab16:	8183      	strh	r3, [r0, #12]
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ab22:	480e      	ldr	r0, [pc, #56]	; (800ab5c <rand+0x74>)
 800ab24:	690b      	ldr	r3, [r1, #16]
 800ab26:	694c      	ldr	r4, [r1, #20]
 800ab28:	4a0d      	ldr	r2, [pc, #52]	; (800ab60 <rand+0x78>)
 800ab2a:	4358      	muls	r0, r3
 800ab2c:	fb02 0004 	mla	r0, r2, r4, r0
 800ab30:	fba3 3202 	umull	r3, r2, r3, r2
 800ab34:	3301      	adds	r3, #1
 800ab36:	eb40 0002 	adc.w	r0, r0, r2
 800ab3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ab3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	200000cc 	.word	0x200000cc
 800ab48:	0800bb0c 	.word	0x0800bb0c
 800ab4c:	0800bb23 	.word	0x0800bb23
 800ab50:	abcd330e 	.word	0xabcd330e
 800ab54:	e66d1234 	.word	0xe66d1234
 800ab58:	0005deec 	.word	0x0005deec
 800ab5c:	5851f42d 	.word	0x5851f42d
 800ab60:	4c957f2d 	.word	0x4c957f2d

0800ab64 <std>:
 800ab64:	2300      	movs	r3, #0
 800ab66:	b510      	push	{r4, lr}
 800ab68:	4604      	mov	r4, r0
 800ab6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab72:	6083      	str	r3, [r0, #8]
 800ab74:	8181      	strh	r1, [r0, #12]
 800ab76:	6643      	str	r3, [r0, #100]	; 0x64
 800ab78:	81c2      	strh	r2, [r0, #14]
 800ab7a:	6183      	str	r3, [r0, #24]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	2208      	movs	r2, #8
 800ab80:	305c      	adds	r0, #92	; 0x5c
 800ab82:	f000 f8b1 	bl	800ace8 <memset>
 800ab86:	4b0d      	ldr	r3, [pc, #52]	; (800abbc <std+0x58>)
 800ab88:	6263      	str	r3, [r4, #36]	; 0x24
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <std+0x5c>)
 800ab8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <std+0x60>)
 800ab90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab92:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <std+0x64>)
 800ab94:	6323      	str	r3, [r4, #48]	; 0x30
 800ab96:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <std+0x68>)
 800ab98:	6224      	str	r4, [r4, #32]
 800ab9a:	429c      	cmp	r4, r3
 800ab9c:	d006      	beq.n	800abac <std+0x48>
 800ab9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aba2:	4294      	cmp	r4, r2
 800aba4:	d002      	beq.n	800abac <std+0x48>
 800aba6:	33d0      	adds	r3, #208	; 0xd0
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d105      	bne.n	800abb8 <std+0x54>
 800abac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f000 b906 	b.w	800adc4 <__retarget_lock_init_recursive>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	0800b019 	.word	0x0800b019
 800abc0:	0800b03b 	.word	0x0800b03b
 800abc4:	0800b073 	.word	0x0800b073
 800abc8:	0800b097 	.word	0x0800b097
 800abcc:	20003c78 	.word	0x20003c78

0800abd0 <stdio_exit_handler>:
 800abd0:	4a02      	ldr	r2, [pc, #8]	; (800abdc <stdio_exit_handler+0xc>)
 800abd2:	4903      	ldr	r1, [pc, #12]	; (800abe0 <stdio_exit_handler+0x10>)
 800abd4:	4803      	ldr	r0, [pc, #12]	; (800abe4 <stdio_exit_handler+0x14>)
 800abd6:	f000 b869 	b.w	800acac <_fwalk_sglue>
 800abda:	bf00      	nop
 800abdc:	20000074 	.word	0x20000074
 800abe0:	0800afc9 	.word	0x0800afc9
 800abe4:	20000080 	.word	0x20000080

0800abe8 <cleanup_stdio>:
 800abe8:	6841      	ldr	r1, [r0, #4]
 800abea:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <cleanup_stdio+0x34>)
 800abec:	4299      	cmp	r1, r3
 800abee:	b510      	push	{r4, lr}
 800abf0:	4604      	mov	r4, r0
 800abf2:	d001      	beq.n	800abf8 <cleanup_stdio+0x10>
 800abf4:	f000 f9e8 	bl	800afc8 <_fflush_r>
 800abf8:	68a1      	ldr	r1, [r4, #8]
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <cleanup_stdio+0x38>)
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d002      	beq.n	800ac06 <cleanup_stdio+0x1e>
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 f9e1 	bl	800afc8 <_fflush_r>
 800ac06:	68e1      	ldr	r1, [r4, #12]
 800ac08:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <cleanup_stdio+0x3c>)
 800ac0a:	4299      	cmp	r1, r3
 800ac0c:	d004      	beq.n	800ac18 <cleanup_stdio+0x30>
 800ac0e:	4620      	mov	r0, r4
 800ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac14:	f000 b9d8 	b.w	800afc8 <_fflush_r>
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20003c78 	.word	0x20003c78
 800ac20:	20003ce0 	.word	0x20003ce0
 800ac24:	20003d48 	.word	0x20003d48

0800ac28 <global_stdio_init.part.0>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	; (800ac58 <global_stdio_init.part.0+0x30>)
 800ac2c:	4c0b      	ldr	r4, [pc, #44]	; (800ac5c <global_stdio_init.part.0+0x34>)
 800ac2e:	4a0c      	ldr	r2, [pc, #48]	; (800ac60 <global_stdio_init.part.0+0x38>)
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	4620      	mov	r0, r4
 800ac34:	2200      	movs	r2, #0
 800ac36:	2104      	movs	r1, #4
 800ac38:	f7ff ff94 	bl	800ab64 <std>
 800ac3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ac40:	2201      	movs	r2, #1
 800ac42:	2109      	movs	r1, #9
 800ac44:	f7ff ff8e 	bl	800ab64 <std>
 800ac48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac52:	2112      	movs	r1, #18
 800ac54:	f7ff bf86 	b.w	800ab64 <std>
 800ac58:	20003db0 	.word	0x20003db0
 800ac5c:	20003c78 	.word	0x20003c78
 800ac60:	0800abd1 	.word	0x0800abd1

0800ac64 <__sfp_lock_acquire>:
 800ac64:	4801      	ldr	r0, [pc, #4]	; (800ac6c <__sfp_lock_acquire+0x8>)
 800ac66:	f000 b8ae 	b.w	800adc6 <__retarget_lock_acquire_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20003db5 	.word	0x20003db5

0800ac70 <__sfp_lock_release>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__sfp_lock_release+0x8>)
 800ac72:	f000 b8a9 	b.w	800adc8 <__retarget_lock_release_recursive>
 800ac76:	bf00      	nop
 800ac78:	20003db5 	.word	0x20003db5

0800ac7c <__sinit>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	4604      	mov	r4, r0
 800ac80:	f7ff fff0 	bl	800ac64 <__sfp_lock_acquire>
 800ac84:	6a23      	ldr	r3, [r4, #32]
 800ac86:	b11b      	cbz	r3, 800ac90 <__sinit+0x14>
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac8c:	f7ff bff0 	b.w	800ac70 <__sfp_lock_release>
 800ac90:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <__sinit+0x28>)
 800ac92:	6223      	str	r3, [r4, #32]
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <__sinit+0x2c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f5      	bne.n	800ac88 <__sinit+0xc>
 800ac9c:	f7ff ffc4 	bl	800ac28 <global_stdio_init.part.0>
 800aca0:	e7f2      	b.n	800ac88 <__sinit+0xc>
 800aca2:	bf00      	nop
 800aca4:	0800abe9 	.word	0x0800abe9
 800aca8:	20003db0 	.word	0x20003db0

0800acac <_fwalk_sglue>:
 800acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb0:	4607      	mov	r7, r0
 800acb2:	4688      	mov	r8, r1
 800acb4:	4614      	mov	r4, r2
 800acb6:	2600      	movs	r6, #0
 800acb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acbc:	f1b9 0901 	subs.w	r9, r9, #1
 800acc0:	d505      	bpl.n	800acce <_fwalk_sglue+0x22>
 800acc2:	6824      	ldr	r4, [r4, #0]
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	d1f7      	bne.n	800acb8 <_fwalk_sglue+0xc>
 800acc8:	4630      	mov	r0, r6
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	89ab      	ldrh	r3, [r5, #12]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d907      	bls.n	800ace4 <_fwalk_sglue+0x38>
 800acd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acd8:	3301      	adds	r3, #1
 800acda:	d003      	beq.n	800ace4 <_fwalk_sglue+0x38>
 800acdc:	4629      	mov	r1, r5
 800acde:	4638      	mov	r0, r7
 800ace0:	47c0      	blx	r8
 800ace2:	4306      	orrs	r6, r0
 800ace4:	3568      	adds	r5, #104	; 0x68
 800ace6:	e7e9      	b.n	800acbc <_fwalk_sglue+0x10>

0800ace8 <memset>:
 800ace8:	4402      	add	r2, r0
 800acea:	4603      	mov	r3, r0
 800acec:	4293      	cmp	r3, r2
 800acee:	d100      	bne.n	800acf2 <memset+0xa>
 800acf0:	4770      	bx	lr
 800acf2:	f803 1b01 	strb.w	r1, [r3], #1
 800acf6:	e7f9      	b.n	800acec <memset+0x4>

0800acf8 <time>:
 800acf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfa:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <time+0x30>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	4669      	mov	r1, sp
 800ad00:	4604      	mov	r4, r0
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	f000 f812 	bl	800ad2c <_gettimeofday_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	bfbe      	ittt	lt
 800ad0c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800ad10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad14:	e9cd 2300 	strdlt	r2, r3, [sp]
 800ad18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad1c:	b10c      	cbz	r4, 800ad22 <time+0x2a>
 800ad1e:	e9c4 0100 	strd	r0, r1, [r4]
 800ad22:	b004      	add	sp, #16
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	bf00      	nop
 800ad28:	200000cc 	.word	0x200000cc

0800ad2c <_gettimeofday_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d07      	ldr	r5, [pc, #28]	; (800ad4c <_gettimeofday_r+0x20>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	4611      	mov	r1, r2
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	f000 fe41 	bl	800b9c0 <_gettimeofday>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d102      	bne.n	800ad48 <_gettimeofday_r+0x1c>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	b103      	cbz	r3, 800ad48 <_gettimeofday_r+0x1c>
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20003db8 	.word	0x20003db8

0800ad50 <_sbrk_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	; (800ad6c <_sbrk_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7ff fc92 	bl	800a684 <_sbrk>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_sbrk_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_sbrk_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20003db8 	.word	0x20003db8

0800ad70 <__errno>:
 800ad70:	4b01      	ldr	r3, [pc, #4]	; (800ad78 <__errno+0x8>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	200000cc 	.word	0x200000cc

0800ad7c <__libc_init_array>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4d0d      	ldr	r5, [pc, #52]	; (800adb4 <__libc_init_array+0x38>)
 800ad80:	4c0d      	ldr	r4, [pc, #52]	; (800adb8 <__libc_init_array+0x3c>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	2600      	movs	r6, #0
 800ad88:	42a6      	cmp	r6, r4
 800ad8a:	d109      	bne.n	800ada0 <__libc_init_array+0x24>
 800ad8c:	4d0b      	ldr	r5, [pc, #44]	; (800adbc <__libc_init_array+0x40>)
 800ad8e:	4c0c      	ldr	r4, [pc, #48]	; (800adc0 <__libc_init_array+0x44>)
 800ad90:	f000 fe1e 	bl	800b9d0 <_init>
 800ad94:	1b64      	subs	r4, r4, r5
 800ad96:	10a4      	asrs	r4, r4, #2
 800ad98:	2600      	movs	r6, #0
 800ad9a:	42a6      	cmp	r6, r4
 800ad9c:	d105      	bne.n	800adaa <__libc_init_array+0x2e>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada4:	4798      	blx	r3
 800ada6:	3601      	adds	r6, #1
 800ada8:	e7ee      	b.n	800ad88 <__libc_init_array+0xc>
 800adaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800adae:	4798      	blx	r3
 800adb0:	3601      	adds	r6, #1
 800adb2:	e7f2      	b.n	800ad9a <__libc_init_array+0x1e>
 800adb4:	0800bbec 	.word	0x0800bbec
 800adb8:	0800bbec 	.word	0x0800bbec
 800adbc:	0800bbec 	.word	0x0800bbec
 800adc0:	0800bbf0 	.word	0x0800bbf0

0800adc4 <__retarget_lock_init_recursive>:
 800adc4:	4770      	bx	lr

0800adc6 <__retarget_lock_acquire_recursive>:
 800adc6:	4770      	bx	lr

0800adc8 <__retarget_lock_release_recursive>:
 800adc8:	4770      	bx	lr

0800adca <memcpy>:
 800adca:	440a      	add	r2, r1
 800adcc:	4291      	cmp	r1, r2
 800adce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800add2:	d100      	bne.n	800add6 <memcpy+0xc>
 800add4:	4770      	bx	lr
 800add6:	b510      	push	{r4, lr}
 800add8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800addc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ade0:	4291      	cmp	r1, r2
 800ade2:	d1f9      	bne.n	800add8 <memcpy+0xe>
 800ade4:	bd10      	pop	{r4, pc}
	...

0800ade8 <__assert_func>:
 800ade8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adea:	4614      	mov	r4, r2
 800adec:	461a      	mov	r2, r3
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <__assert_func+0x2c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4605      	mov	r5, r0
 800adf4:	68d8      	ldr	r0, [r3, #12]
 800adf6:	b14c      	cbz	r4, 800ae0c <__assert_func+0x24>
 800adf8:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <__assert_func+0x30>)
 800adfa:	9100      	str	r1, [sp, #0]
 800adfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae00:	4906      	ldr	r1, [pc, #24]	; (800ae1c <__assert_func+0x34>)
 800ae02:	462b      	mov	r3, r5
 800ae04:	f000 f94c 	bl	800b0a0 <fiprintf>
 800ae08:	f000 f9a2 	bl	800b150 <abort>
 800ae0c:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <__assert_func+0x38>)
 800ae0e:	461c      	mov	r4, r3
 800ae10:	e7f3      	b.n	800adfa <__assert_func+0x12>
 800ae12:	bf00      	nop
 800ae14:	200000cc 	.word	0x200000cc
 800ae18:	0800bb7b 	.word	0x0800bb7b
 800ae1c:	0800bb88 	.word	0x0800bb88
 800ae20:	0800bbb6 	.word	0x0800bbb6

0800ae24 <_free_r>:
 800ae24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae26:	2900      	cmp	r1, #0
 800ae28:	d044      	beq.n	800aeb4 <_free_r+0x90>
 800ae2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2e:	9001      	str	r0, [sp, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f1a1 0404 	sub.w	r4, r1, #4
 800ae36:	bfb8      	it	lt
 800ae38:	18e4      	addlt	r4, r4, r3
 800ae3a:	f7ff fe1b 	bl	800aa74 <__malloc_lock>
 800ae3e:	4a1e      	ldr	r2, [pc, #120]	; (800aeb8 <_free_r+0x94>)
 800ae40:	9801      	ldr	r0, [sp, #4]
 800ae42:	6813      	ldr	r3, [r2, #0]
 800ae44:	b933      	cbnz	r3, 800ae54 <_free_r+0x30>
 800ae46:	6063      	str	r3, [r4, #4]
 800ae48:	6014      	str	r4, [r2, #0]
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae50:	f7ff be16 	b.w	800aa80 <__malloc_unlock>
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	d908      	bls.n	800ae6a <_free_r+0x46>
 800ae58:	6825      	ldr	r5, [r4, #0]
 800ae5a:	1961      	adds	r1, r4, r5
 800ae5c:	428b      	cmp	r3, r1
 800ae5e:	bf01      	itttt	eq
 800ae60:	6819      	ldreq	r1, [r3, #0]
 800ae62:	685b      	ldreq	r3, [r3, #4]
 800ae64:	1949      	addeq	r1, r1, r5
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	e7ed      	b.n	800ae46 <_free_r+0x22>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	b10b      	cbz	r3, 800ae74 <_free_r+0x50>
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d9fa      	bls.n	800ae6a <_free_r+0x46>
 800ae74:	6811      	ldr	r1, [r2, #0]
 800ae76:	1855      	adds	r5, r2, r1
 800ae78:	42a5      	cmp	r5, r4
 800ae7a:	d10b      	bne.n	800ae94 <_free_r+0x70>
 800ae7c:	6824      	ldr	r4, [r4, #0]
 800ae7e:	4421      	add	r1, r4
 800ae80:	1854      	adds	r4, r2, r1
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	6011      	str	r1, [r2, #0]
 800ae86:	d1e0      	bne.n	800ae4a <_free_r+0x26>
 800ae88:	681c      	ldr	r4, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	6053      	str	r3, [r2, #4]
 800ae8e:	440c      	add	r4, r1
 800ae90:	6014      	str	r4, [r2, #0]
 800ae92:	e7da      	b.n	800ae4a <_free_r+0x26>
 800ae94:	d902      	bls.n	800ae9c <_free_r+0x78>
 800ae96:	230c      	movs	r3, #12
 800ae98:	6003      	str	r3, [r0, #0]
 800ae9a:	e7d6      	b.n	800ae4a <_free_r+0x26>
 800ae9c:	6825      	ldr	r5, [r4, #0]
 800ae9e:	1961      	adds	r1, r4, r5
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf04      	itt	eq
 800aea4:	6819      	ldreq	r1, [r3, #0]
 800aea6:	685b      	ldreq	r3, [r3, #4]
 800aea8:	6063      	str	r3, [r4, #4]
 800aeaa:	bf04      	itt	eq
 800aeac:	1949      	addeq	r1, r1, r5
 800aeae:	6021      	streq	r1, [r4, #0]
 800aeb0:	6054      	str	r4, [r2, #4]
 800aeb2:	e7ca      	b.n	800ae4a <_free_r+0x26>
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bd30      	pop	{r4, r5, pc}
 800aeb8:	20003c70 	.word	0x20003c70

0800aebc <__sflush_r>:
 800aebc:	898a      	ldrh	r2, [r1, #12]
 800aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	4605      	mov	r5, r0
 800aec4:	0710      	lsls	r0, r2, #28
 800aec6:	460c      	mov	r4, r1
 800aec8:	d458      	bmi.n	800af7c <__sflush_r+0xc0>
 800aeca:	684b      	ldr	r3, [r1, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc05      	bgt.n	800aedc <__sflush_r+0x20>
 800aed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dc02      	bgt.n	800aedc <__sflush_r+0x20>
 800aed6:	2000      	movs	r0, #0
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aede:	2e00      	cmp	r6, #0
 800aee0:	d0f9      	beq.n	800aed6 <__sflush_r+0x1a>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aee8:	682f      	ldr	r7, [r5, #0]
 800aeea:	6a21      	ldr	r1, [r4, #32]
 800aeec:	602b      	str	r3, [r5, #0]
 800aeee:	d032      	beq.n	800af56 <__sflush_r+0x9a>
 800aef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	075a      	lsls	r2, r3, #29
 800aef6:	d505      	bpl.n	800af04 <__sflush_r+0x48>
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	1ac0      	subs	r0, r0, r3
 800aefc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aefe:	b10b      	cbz	r3, 800af04 <__sflush_r+0x48>
 800af00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af02:	1ac0      	subs	r0, r0, r3
 800af04:	2300      	movs	r3, #0
 800af06:	4602      	mov	r2, r0
 800af08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af0a:	6a21      	ldr	r1, [r4, #32]
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b0      	blx	r6
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	d106      	bne.n	800af24 <__sflush_r+0x68>
 800af16:	6829      	ldr	r1, [r5, #0]
 800af18:	291d      	cmp	r1, #29
 800af1a:	d82b      	bhi.n	800af74 <__sflush_r+0xb8>
 800af1c:	4a29      	ldr	r2, [pc, #164]	; (800afc4 <__sflush_r+0x108>)
 800af1e:	410a      	asrs	r2, r1
 800af20:	07d6      	lsls	r6, r2, #31
 800af22:	d427      	bmi.n	800af74 <__sflush_r+0xb8>
 800af24:	2200      	movs	r2, #0
 800af26:	6062      	str	r2, [r4, #4]
 800af28:	04d9      	lsls	r1, r3, #19
 800af2a:	6922      	ldr	r2, [r4, #16]
 800af2c:	6022      	str	r2, [r4, #0]
 800af2e:	d504      	bpl.n	800af3a <__sflush_r+0x7e>
 800af30:	1c42      	adds	r2, r0, #1
 800af32:	d101      	bne.n	800af38 <__sflush_r+0x7c>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b903      	cbnz	r3, 800af3a <__sflush_r+0x7e>
 800af38:	6560      	str	r0, [r4, #84]	; 0x54
 800af3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af3c:	602f      	str	r7, [r5, #0]
 800af3e:	2900      	cmp	r1, #0
 800af40:	d0c9      	beq.n	800aed6 <__sflush_r+0x1a>
 800af42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af46:	4299      	cmp	r1, r3
 800af48:	d002      	beq.n	800af50 <__sflush_r+0x94>
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7ff ff6a 	bl	800ae24 <_free_r>
 800af50:	2000      	movs	r0, #0
 800af52:	6360      	str	r0, [r4, #52]	; 0x34
 800af54:	e7c0      	b.n	800aed8 <__sflush_r+0x1c>
 800af56:	2301      	movs	r3, #1
 800af58:	4628      	mov	r0, r5
 800af5a:	47b0      	blx	r6
 800af5c:	1c41      	adds	r1, r0, #1
 800af5e:	d1c8      	bne.n	800aef2 <__sflush_r+0x36>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0c5      	beq.n	800aef2 <__sflush_r+0x36>
 800af66:	2b1d      	cmp	r3, #29
 800af68:	d001      	beq.n	800af6e <__sflush_r+0xb2>
 800af6a:	2b16      	cmp	r3, #22
 800af6c:	d101      	bne.n	800af72 <__sflush_r+0xb6>
 800af6e:	602f      	str	r7, [r5, #0]
 800af70:	e7b1      	b.n	800aed6 <__sflush_r+0x1a>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	e7ad      	b.n	800aed8 <__sflush_r+0x1c>
 800af7c:	690f      	ldr	r7, [r1, #16]
 800af7e:	2f00      	cmp	r7, #0
 800af80:	d0a9      	beq.n	800aed6 <__sflush_r+0x1a>
 800af82:	0793      	lsls	r3, r2, #30
 800af84:	680e      	ldr	r6, [r1, #0]
 800af86:	bf08      	it	eq
 800af88:	694b      	ldreq	r3, [r1, #20]
 800af8a:	600f      	str	r7, [r1, #0]
 800af8c:	bf18      	it	ne
 800af8e:	2300      	movne	r3, #0
 800af90:	eba6 0807 	sub.w	r8, r6, r7
 800af94:	608b      	str	r3, [r1, #8]
 800af96:	f1b8 0f00 	cmp.w	r8, #0
 800af9a:	dd9c      	ble.n	800aed6 <__sflush_r+0x1a>
 800af9c:	6a21      	ldr	r1, [r4, #32]
 800af9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afa0:	4643      	mov	r3, r8
 800afa2:	463a      	mov	r2, r7
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b0      	blx	r6
 800afa8:	2800      	cmp	r0, #0
 800afaa:	dc06      	bgt.n	800afba <__sflush_r+0xfe>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb2:	81a3      	strh	r3, [r4, #12]
 800afb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb8:	e78e      	b.n	800aed8 <__sflush_r+0x1c>
 800afba:	4407      	add	r7, r0
 800afbc:	eba8 0800 	sub.w	r8, r8, r0
 800afc0:	e7e9      	b.n	800af96 <__sflush_r+0xda>
 800afc2:	bf00      	nop
 800afc4:	dfbffffe 	.word	0xdfbffffe

0800afc8 <_fflush_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	690b      	ldr	r3, [r1, #16]
 800afcc:	4605      	mov	r5, r0
 800afce:	460c      	mov	r4, r1
 800afd0:	b913      	cbnz	r3, 800afd8 <_fflush_r+0x10>
 800afd2:	2500      	movs	r5, #0
 800afd4:	4628      	mov	r0, r5
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	b118      	cbz	r0, 800afe2 <_fflush_r+0x1a>
 800afda:	6a03      	ldr	r3, [r0, #32]
 800afdc:	b90b      	cbnz	r3, 800afe2 <_fflush_r+0x1a>
 800afde:	f7ff fe4d 	bl	800ac7c <__sinit>
 800afe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0f3      	beq.n	800afd2 <_fflush_r+0xa>
 800afea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afec:	07d0      	lsls	r0, r2, #31
 800afee:	d404      	bmi.n	800affa <_fflush_r+0x32>
 800aff0:	0599      	lsls	r1, r3, #22
 800aff2:	d402      	bmi.n	800affa <_fflush_r+0x32>
 800aff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff6:	f7ff fee6 	bl	800adc6 <__retarget_lock_acquire_recursive>
 800affa:	4628      	mov	r0, r5
 800affc:	4621      	mov	r1, r4
 800affe:	f7ff ff5d 	bl	800aebc <__sflush_r>
 800b002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b004:	07da      	lsls	r2, r3, #31
 800b006:	4605      	mov	r5, r0
 800b008:	d4e4      	bmi.n	800afd4 <_fflush_r+0xc>
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	059b      	lsls	r3, r3, #22
 800b00e:	d4e1      	bmi.n	800afd4 <_fflush_r+0xc>
 800b010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b012:	f7ff fed9 	bl	800adc8 <__retarget_lock_release_recursive>
 800b016:	e7dd      	b.n	800afd4 <_fflush_r+0xc>

0800b018 <__sread>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b020:	f000 f872 	bl	800b108 <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	bfab      	itete	ge
 800b028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b02a:	89a3      	ldrhlt	r3, [r4, #12]
 800b02c:	181b      	addge	r3, r3, r0
 800b02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b032:	bfac      	ite	ge
 800b034:	6563      	strge	r3, [r4, #84]	; 0x54
 800b036:	81a3      	strhlt	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__swrite>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	461f      	mov	r7, r3
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	05db      	lsls	r3, r3, #23
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d505      	bpl.n	800b058 <__swrite+0x1e>
 800b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b050:	2302      	movs	r3, #2
 800b052:	2200      	movs	r2, #0
 800b054:	f000 f846 	bl	800b0e4 <_lseek_r>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	f000 b85d 	b.w	800b12c <_write_r>

0800b072 <__sseek>:
 800b072:	b510      	push	{r4, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 f833 	bl	800b0e4 <_lseek_r>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	bf15      	itete	ne
 800b084:	6560      	strne	r0, [r4, #84]	; 0x54
 800b086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b08e:	81a3      	strheq	r3, [r4, #12]
 800b090:	bf18      	it	ne
 800b092:	81a3      	strhne	r3, [r4, #12]
 800b094:	bd10      	pop	{r4, pc}

0800b096 <__sclose>:
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 b813 	b.w	800b0c4 <_close_r>
	...

0800b0a0 <fiprintf>:
 800b0a0:	b40e      	push	{r1, r2, r3}
 800b0a2:	b503      	push	{r0, r1, lr}
 800b0a4:	4601      	mov	r1, r0
 800b0a6:	ab03      	add	r3, sp, #12
 800b0a8:	4805      	ldr	r0, [pc, #20]	; (800b0c0 <fiprintf+0x20>)
 800b0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ae:	6800      	ldr	r0, [r0, #0]
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	f000 f87d 	bl	800b1b0 <_vfiprintf_r>
 800b0b6:	b002      	add	sp, #8
 800b0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0bc:	b003      	add	sp, #12
 800b0be:	4770      	bx	lr
 800b0c0:	200000cc 	.word	0x200000cc

0800b0c4 <_close_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d06      	ldr	r5, [pc, #24]	; (800b0e0 <_close_r+0x1c>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	602b      	str	r3, [r5, #0]
 800b0d0:	f7ff faa3 	bl	800a61a <_close>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_close_r+0x1a>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_close_r+0x1a>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	20003db8 	.word	0x20003db8

0800b0e4 <_lseek_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_lseek_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7ff fab8 	bl	800a668 <_lseek>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_lseek_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_lseek_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20003db8 	.word	0x20003db8

0800b108 <_read_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	; (800b128 <_read_r+0x20>)
 800b10c:	4604      	mov	r4, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7ff fa46 	bl	800a5a8 <_read>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_read_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_read_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20003db8 	.word	0x20003db8

0800b12c <_write_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	; (800b14c <_write_r+0x20>)
 800b130:	4604      	mov	r4, r0
 800b132:	4608      	mov	r0, r1
 800b134:	4611      	mov	r1, r2
 800b136:	2200      	movs	r2, #0
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f7ff fa51 	bl	800a5e2 <_write>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_write_r+0x1e>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_write_r+0x1e>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	20003db8 	.word	0x20003db8

0800b150 <abort>:
 800b150:	b508      	push	{r3, lr}
 800b152:	2006      	movs	r0, #6
 800b154:	f000 fc18 	bl	800b988 <raise>
 800b158:	2001      	movs	r0, #1
 800b15a:	f7ff fa1b 	bl	800a594 <_exit>

0800b15e <__sfputc_r>:
 800b15e:	6893      	ldr	r3, [r2, #8]
 800b160:	3b01      	subs	r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	b410      	push	{r4}
 800b166:	6093      	str	r3, [r2, #8]
 800b168:	da08      	bge.n	800b17c <__sfputc_r+0x1e>
 800b16a:	6994      	ldr	r4, [r2, #24]
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	db01      	blt.n	800b174 <__sfputc_r+0x16>
 800b170:	290a      	cmp	r1, #10
 800b172:	d103      	bne.n	800b17c <__sfputc_r+0x1e>
 800b174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b178:	f000 bac4 	b.w	800b704 <__swbuf_r>
 800b17c:	6813      	ldr	r3, [r2, #0]
 800b17e:	1c58      	adds	r0, r3, #1
 800b180:	6010      	str	r0, [r2, #0]
 800b182:	7019      	strb	r1, [r3, #0]
 800b184:	4608      	mov	r0, r1
 800b186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <__sfputs_r>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	4606      	mov	r6, r0
 800b190:	460f      	mov	r7, r1
 800b192:	4614      	mov	r4, r2
 800b194:	18d5      	adds	r5, r2, r3
 800b196:	42ac      	cmp	r4, r5
 800b198:	d101      	bne.n	800b19e <__sfputs_r+0x12>
 800b19a:	2000      	movs	r0, #0
 800b19c:	e007      	b.n	800b1ae <__sfputs_r+0x22>
 800b19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff ffda 	bl	800b15e <__sfputc_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d1f3      	bne.n	800b196 <__sfputs_r+0xa>
 800b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1b0 <_vfiprintf_r>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	b09d      	sub	sp, #116	; 0x74
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	4698      	mov	r8, r3
 800b1bc:	4606      	mov	r6, r0
 800b1be:	b118      	cbz	r0, 800b1c8 <_vfiprintf_r+0x18>
 800b1c0:	6a03      	ldr	r3, [r0, #32]
 800b1c2:	b90b      	cbnz	r3, 800b1c8 <_vfiprintf_r+0x18>
 800b1c4:	f7ff fd5a 	bl	800ac7c <__sinit>
 800b1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d405      	bmi.n	800b1da <_vfiprintf_r+0x2a>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	059a      	lsls	r2, r3, #22
 800b1d2:	d402      	bmi.n	800b1da <_vfiprintf_r+0x2a>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff fdf6 	bl	800adc6 <__retarget_lock_acquire_recursive>
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	071b      	lsls	r3, r3, #28
 800b1de:	d501      	bpl.n	800b1e4 <_vfiprintf_r+0x34>
 800b1e0:	692b      	ldr	r3, [r5, #16]
 800b1e2:	b99b      	cbnz	r3, 800b20c <_vfiprintf_r+0x5c>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f000 faca 	bl	800b780 <__swsetup_r>
 800b1ec:	b170      	cbz	r0, 800b20c <_vfiprintf_r+0x5c>
 800b1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f0:	07dc      	lsls	r4, r3, #31
 800b1f2:	d504      	bpl.n	800b1fe <_vfiprintf_r+0x4e>
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1f8:	b01d      	add	sp, #116	; 0x74
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	89ab      	ldrh	r3, [r5, #12]
 800b200:	0598      	lsls	r0, r3, #22
 800b202:	d4f7      	bmi.n	800b1f4 <_vfiprintf_r+0x44>
 800b204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b206:	f7ff fddf 	bl	800adc8 <__retarget_lock_release_recursive>
 800b20a:	e7f3      	b.n	800b1f4 <_vfiprintf_r+0x44>
 800b20c:	2300      	movs	r3, #0
 800b20e:	9309      	str	r3, [sp, #36]	; 0x24
 800b210:	2320      	movs	r3, #32
 800b212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b216:	f8cd 800c 	str.w	r8, [sp, #12]
 800b21a:	2330      	movs	r3, #48	; 0x30
 800b21c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b3d0 <_vfiprintf_r+0x220>
 800b220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b224:	f04f 0901 	mov.w	r9, #1
 800b228:	4623      	mov	r3, r4
 800b22a:	469a      	mov	sl, r3
 800b22c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b230:	b10a      	cbz	r2, 800b236 <_vfiprintf_r+0x86>
 800b232:	2a25      	cmp	r2, #37	; 0x25
 800b234:	d1f9      	bne.n	800b22a <_vfiprintf_r+0x7a>
 800b236:	ebba 0b04 	subs.w	fp, sl, r4
 800b23a:	d00b      	beq.n	800b254 <_vfiprintf_r+0xa4>
 800b23c:	465b      	mov	r3, fp
 800b23e:	4622      	mov	r2, r4
 800b240:	4629      	mov	r1, r5
 800b242:	4630      	mov	r0, r6
 800b244:	f7ff ffa2 	bl	800b18c <__sfputs_r>
 800b248:	3001      	adds	r0, #1
 800b24a:	f000 80a9 	beq.w	800b3a0 <_vfiprintf_r+0x1f0>
 800b24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b250:	445a      	add	r2, fp
 800b252:	9209      	str	r2, [sp, #36]	; 0x24
 800b254:	f89a 3000 	ldrb.w	r3, [sl]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 80a1 	beq.w	800b3a0 <_vfiprintf_r+0x1f0>
 800b25e:	2300      	movs	r3, #0
 800b260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b268:	f10a 0a01 	add.w	sl, sl, #1
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	9307      	str	r3, [sp, #28]
 800b270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b274:	931a      	str	r3, [sp, #104]	; 0x68
 800b276:	4654      	mov	r4, sl
 800b278:	2205      	movs	r2, #5
 800b27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27e:	4854      	ldr	r0, [pc, #336]	; (800b3d0 <_vfiprintf_r+0x220>)
 800b280:	f7f4 ffa6 	bl	80001d0 <memchr>
 800b284:	9a04      	ldr	r2, [sp, #16]
 800b286:	b9d8      	cbnz	r0, 800b2c0 <_vfiprintf_r+0x110>
 800b288:	06d1      	lsls	r1, r2, #27
 800b28a:	bf44      	itt	mi
 800b28c:	2320      	movmi	r3, #32
 800b28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b292:	0713      	lsls	r3, r2, #28
 800b294:	bf44      	itt	mi
 800b296:	232b      	movmi	r3, #43	; 0x2b
 800b298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29c:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a2:	d015      	beq.n	800b2d0 <_vfiprintf_r+0x120>
 800b2a4:	9a07      	ldr	r2, [sp, #28]
 800b2a6:	4654      	mov	r4, sl
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f04f 0c0a 	mov.w	ip, #10
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b4:	3b30      	subs	r3, #48	; 0x30
 800b2b6:	2b09      	cmp	r3, #9
 800b2b8:	d94d      	bls.n	800b356 <_vfiprintf_r+0x1a6>
 800b2ba:	b1b0      	cbz	r0, 800b2ea <_vfiprintf_r+0x13a>
 800b2bc:	9207      	str	r2, [sp, #28]
 800b2be:	e014      	b.n	800b2ea <_vfiprintf_r+0x13a>
 800b2c0:	eba0 0308 	sub.w	r3, r0, r8
 800b2c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	46a2      	mov	sl, r4
 800b2ce:	e7d2      	b.n	800b276 <_vfiprintf_r+0xc6>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	1d19      	adds	r1, r3, #4
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	9103      	str	r1, [sp, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	bfbb      	ittet	lt
 800b2dc:	425b      	neglt	r3, r3
 800b2de:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e2:	9307      	strge	r3, [sp, #28]
 800b2e4:	9307      	strlt	r3, [sp, #28]
 800b2e6:	bfb8      	it	lt
 800b2e8:	9204      	strlt	r2, [sp, #16]
 800b2ea:	7823      	ldrb	r3, [r4, #0]
 800b2ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ee:	d10c      	bne.n	800b30a <_vfiprintf_r+0x15a>
 800b2f0:	7863      	ldrb	r3, [r4, #1]
 800b2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f4:	d134      	bne.n	800b360 <_vfiprintf_r+0x1b0>
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	1d1a      	adds	r2, r3, #4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	9203      	str	r2, [sp, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bfb8      	it	lt
 800b302:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b306:	3402      	adds	r4, #2
 800b308:	9305      	str	r3, [sp, #20]
 800b30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b3e0 <_vfiprintf_r+0x230>
 800b30e:	7821      	ldrb	r1, [r4, #0]
 800b310:	2203      	movs	r2, #3
 800b312:	4650      	mov	r0, sl
 800b314:	f7f4 ff5c 	bl	80001d0 <memchr>
 800b318:	b138      	cbz	r0, 800b32a <_vfiprintf_r+0x17a>
 800b31a:	9b04      	ldr	r3, [sp, #16]
 800b31c:	eba0 000a 	sub.w	r0, r0, sl
 800b320:	2240      	movs	r2, #64	; 0x40
 800b322:	4082      	lsls	r2, r0
 800b324:	4313      	orrs	r3, r2
 800b326:	3401      	adds	r4, #1
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	4829      	ldr	r0, [pc, #164]	; (800b3d4 <_vfiprintf_r+0x224>)
 800b330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b334:	2206      	movs	r2, #6
 800b336:	f7f4 ff4b 	bl	80001d0 <memchr>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d03f      	beq.n	800b3be <_vfiprintf_r+0x20e>
 800b33e:	4b26      	ldr	r3, [pc, #152]	; (800b3d8 <_vfiprintf_r+0x228>)
 800b340:	bb1b      	cbnz	r3, 800b38a <_vfiprintf_r+0x1da>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	3307      	adds	r3, #7
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	3308      	adds	r3, #8
 800b34c:	9303      	str	r3, [sp, #12]
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	443b      	add	r3, r7
 800b352:	9309      	str	r3, [sp, #36]	; 0x24
 800b354:	e768      	b.n	800b228 <_vfiprintf_r+0x78>
 800b356:	fb0c 3202 	mla	r2, ip, r2, r3
 800b35a:	460c      	mov	r4, r1
 800b35c:	2001      	movs	r0, #1
 800b35e:	e7a6      	b.n	800b2ae <_vfiprintf_r+0xfe>
 800b360:	2300      	movs	r3, #0
 800b362:	3401      	adds	r4, #1
 800b364:	9305      	str	r3, [sp, #20]
 800b366:	4619      	mov	r1, r3
 800b368:	f04f 0c0a 	mov.w	ip, #10
 800b36c:	4620      	mov	r0, r4
 800b36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b372:	3a30      	subs	r2, #48	; 0x30
 800b374:	2a09      	cmp	r2, #9
 800b376:	d903      	bls.n	800b380 <_vfiprintf_r+0x1d0>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0c6      	beq.n	800b30a <_vfiprintf_r+0x15a>
 800b37c:	9105      	str	r1, [sp, #20]
 800b37e:	e7c4      	b.n	800b30a <_vfiprintf_r+0x15a>
 800b380:	fb0c 2101 	mla	r1, ip, r1, r2
 800b384:	4604      	mov	r4, r0
 800b386:	2301      	movs	r3, #1
 800b388:	e7f0      	b.n	800b36c <_vfiprintf_r+0x1bc>
 800b38a:	ab03      	add	r3, sp, #12
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462a      	mov	r2, r5
 800b390:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <_vfiprintf_r+0x22c>)
 800b392:	a904      	add	r1, sp, #16
 800b394:	4630      	mov	r0, r6
 800b396:	f3af 8000 	nop.w
 800b39a:	4607      	mov	r7, r0
 800b39c:	1c78      	adds	r0, r7, #1
 800b39e:	d1d6      	bne.n	800b34e <_vfiprintf_r+0x19e>
 800b3a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a2:	07d9      	lsls	r1, r3, #31
 800b3a4:	d405      	bmi.n	800b3b2 <_vfiprintf_r+0x202>
 800b3a6:	89ab      	ldrh	r3, [r5, #12]
 800b3a8:	059a      	lsls	r2, r3, #22
 800b3aa:	d402      	bmi.n	800b3b2 <_vfiprintf_r+0x202>
 800b3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ae:	f7ff fd0b 	bl	800adc8 <__retarget_lock_release_recursive>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	065b      	lsls	r3, r3, #25
 800b3b6:	f53f af1d 	bmi.w	800b1f4 <_vfiprintf_r+0x44>
 800b3ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3bc:	e71c      	b.n	800b1f8 <_vfiprintf_r+0x48>
 800b3be:	ab03      	add	r3, sp, #12
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	462a      	mov	r2, r5
 800b3c4:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <_vfiprintf_r+0x22c>)
 800b3c6:	a904      	add	r1, sp, #16
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 f879 	bl	800b4c0 <_printf_i>
 800b3ce:	e7e4      	b.n	800b39a <_vfiprintf_r+0x1ea>
 800b3d0:	0800bbb7 	.word	0x0800bbb7
 800b3d4:	0800bbc1 	.word	0x0800bbc1
 800b3d8:	00000000 	.word	0x00000000
 800b3dc:	0800b18d 	.word	0x0800b18d
 800b3e0:	0800bbbd 	.word	0x0800bbbd

0800b3e4 <_printf_common>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	4699      	mov	r9, r3
 800b3ec:	688a      	ldr	r2, [r1, #8]
 800b3ee:	690b      	ldr	r3, [r1, #16]
 800b3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	bfb8      	it	lt
 800b3f8:	4613      	movlt	r3, r2
 800b3fa:	6033      	str	r3, [r6, #0]
 800b3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b400:	4607      	mov	r7, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b10a      	cbz	r2, 800b40a <_printf_common+0x26>
 800b406:	3301      	adds	r3, #1
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	0699      	lsls	r1, r3, #26
 800b40e:	bf42      	ittt	mi
 800b410:	6833      	ldrmi	r3, [r6, #0]
 800b412:	3302      	addmi	r3, #2
 800b414:	6033      	strmi	r3, [r6, #0]
 800b416:	6825      	ldr	r5, [r4, #0]
 800b418:	f015 0506 	ands.w	r5, r5, #6
 800b41c:	d106      	bne.n	800b42c <_printf_common+0x48>
 800b41e:	f104 0a19 	add.w	sl, r4, #25
 800b422:	68e3      	ldr	r3, [r4, #12]
 800b424:	6832      	ldr	r2, [r6, #0]
 800b426:	1a9b      	subs	r3, r3, r2
 800b428:	42ab      	cmp	r3, r5
 800b42a:	dc26      	bgt.n	800b47a <_printf_common+0x96>
 800b42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b430:	1e13      	subs	r3, r2, #0
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	bf18      	it	ne
 800b436:	2301      	movne	r3, #1
 800b438:	0692      	lsls	r2, r2, #26
 800b43a:	d42b      	bmi.n	800b494 <_printf_common+0xb0>
 800b43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b440:	4649      	mov	r1, r9
 800b442:	4638      	mov	r0, r7
 800b444:	47c0      	blx	r8
 800b446:	3001      	adds	r0, #1
 800b448:	d01e      	beq.n	800b488 <_printf_common+0xa4>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	6922      	ldr	r2, [r4, #16]
 800b44e:	f003 0306 	and.w	r3, r3, #6
 800b452:	2b04      	cmp	r3, #4
 800b454:	bf02      	ittt	eq
 800b456:	68e5      	ldreq	r5, [r4, #12]
 800b458:	6833      	ldreq	r3, [r6, #0]
 800b45a:	1aed      	subeq	r5, r5, r3
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	bf0c      	ite	eq
 800b460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b464:	2500      	movne	r5, #0
 800b466:	4293      	cmp	r3, r2
 800b468:	bfc4      	itt	gt
 800b46a:	1a9b      	subgt	r3, r3, r2
 800b46c:	18ed      	addgt	r5, r5, r3
 800b46e:	2600      	movs	r6, #0
 800b470:	341a      	adds	r4, #26
 800b472:	42b5      	cmp	r5, r6
 800b474:	d11a      	bne.n	800b4ac <_printf_common+0xc8>
 800b476:	2000      	movs	r0, #0
 800b478:	e008      	b.n	800b48c <_printf_common+0xa8>
 800b47a:	2301      	movs	r3, #1
 800b47c:	4652      	mov	r2, sl
 800b47e:	4649      	mov	r1, r9
 800b480:	4638      	mov	r0, r7
 800b482:	47c0      	blx	r8
 800b484:	3001      	adds	r0, #1
 800b486:	d103      	bne.n	800b490 <_printf_common+0xac>
 800b488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b490:	3501      	adds	r5, #1
 800b492:	e7c6      	b.n	800b422 <_printf_common+0x3e>
 800b494:	18e1      	adds	r1, r4, r3
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	2030      	movs	r0, #48	; 0x30
 800b49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b49e:	4422      	add	r2, r4
 800b4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	e7c7      	b.n	800b43c <_printf_common+0x58>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	47c0      	blx	r8
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d0e6      	beq.n	800b488 <_printf_common+0xa4>
 800b4ba:	3601      	adds	r6, #1
 800b4bc:	e7d9      	b.n	800b472 <_printf_common+0x8e>
	...

0800b4c0 <_printf_i>:
 800b4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c4:	7e0f      	ldrb	r7, [r1, #24]
 800b4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4c8:	2f78      	cmp	r7, #120	; 0x78
 800b4ca:	4691      	mov	r9, r2
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	469a      	mov	sl, r3
 800b4d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4d6:	d807      	bhi.n	800b4e8 <_printf_i+0x28>
 800b4d8:	2f62      	cmp	r7, #98	; 0x62
 800b4da:	d80a      	bhi.n	800b4f2 <_printf_i+0x32>
 800b4dc:	2f00      	cmp	r7, #0
 800b4de:	f000 80d4 	beq.w	800b68a <_printf_i+0x1ca>
 800b4e2:	2f58      	cmp	r7, #88	; 0x58
 800b4e4:	f000 80c0 	beq.w	800b668 <_printf_i+0x1a8>
 800b4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4f0:	e03a      	b.n	800b568 <_printf_i+0xa8>
 800b4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4f6:	2b15      	cmp	r3, #21
 800b4f8:	d8f6      	bhi.n	800b4e8 <_printf_i+0x28>
 800b4fa:	a101      	add	r1, pc, #4	; (adr r1, 800b500 <_printf_i+0x40>)
 800b4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b500:	0800b559 	.word	0x0800b559
 800b504:	0800b56d 	.word	0x0800b56d
 800b508:	0800b4e9 	.word	0x0800b4e9
 800b50c:	0800b4e9 	.word	0x0800b4e9
 800b510:	0800b4e9 	.word	0x0800b4e9
 800b514:	0800b4e9 	.word	0x0800b4e9
 800b518:	0800b56d 	.word	0x0800b56d
 800b51c:	0800b4e9 	.word	0x0800b4e9
 800b520:	0800b4e9 	.word	0x0800b4e9
 800b524:	0800b4e9 	.word	0x0800b4e9
 800b528:	0800b4e9 	.word	0x0800b4e9
 800b52c:	0800b671 	.word	0x0800b671
 800b530:	0800b599 	.word	0x0800b599
 800b534:	0800b62b 	.word	0x0800b62b
 800b538:	0800b4e9 	.word	0x0800b4e9
 800b53c:	0800b4e9 	.word	0x0800b4e9
 800b540:	0800b693 	.word	0x0800b693
 800b544:	0800b4e9 	.word	0x0800b4e9
 800b548:	0800b599 	.word	0x0800b599
 800b54c:	0800b4e9 	.word	0x0800b4e9
 800b550:	0800b4e9 	.word	0x0800b4e9
 800b554:	0800b633 	.word	0x0800b633
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	602a      	str	r2, [r5, #0]
 800b560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b568:	2301      	movs	r3, #1
 800b56a:	e09f      	b.n	800b6ac <_printf_i+0x1ec>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	0607      	lsls	r7, r0, #24
 800b572:	f103 0104 	add.w	r1, r3, #4
 800b576:	6029      	str	r1, [r5, #0]
 800b578:	d501      	bpl.n	800b57e <_printf_i+0xbe>
 800b57a:	681e      	ldr	r6, [r3, #0]
 800b57c:	e003      	b.n	800b586 <_printf_i+0xc6>
 800b57e:	0646      	lsls	r6, r0, #25
 800b580:	d5fb      	bpl.n	800b57a <_printf_i+0xba>
 800b582:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b586:	2e00      	cmp	r6, #0
 800b588:	da03      	bge.n	800b592 <_printf_i+0xd2>
 800b58a:	232d      	movs	r3, #45	; 0x2d
 800b58c:	4276      	negs	r6, r6
 800b58e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b592:	485a      	ldr	r0, [pc, #360]	; (800b6fc <_printf_i+0x23c>)
 800b594:	230a      	movs	r3, #10
 800b596:	e012      	b.n	800b5be <_printf_i+0xfe>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	6820      	ldr	r0, [r4, #0]
 800b59c:	1d19      	adds	r1, r3, #4
 800b59e:	6029      	str	r1, [r5, #0]
 800b5a0:	0605      	lsls	r5, r0, #24
 800b5a2:	d501      	bpl.n	800b5a8 <_printf_i+0xe8>
 800b5a4:	681e      	ldr	r6, [r3, #0]
 800b5a6:	e002      	b.n	800b5ae <_printf_i+0xee>
 800b5a8:	0641      	lsls	r1, r0, #25
 800b5aa:	d5fb      	bpl.n	800b5a4 <_printf_i+0xe4>
 800b5ac:	881e      	ldrh	r6, [r3, #0]
 800b5ae:	4853      	ldr	r0, [pc, #332]	; (800b6fc <_printf_i+0x23c>)
 800b5b0:	2f6f      	cmp	r7, #111	; 0x6f
 800b5b2:	bf0c      	ite	eq
 800b5b4:	2308      	moveq	r3, #8
 800b5b6:	230a      	movne	r3, #10
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5be:	6865      	ldr	r5, [r4, #4]
 800b5c0:	60a5      	str	r5, [r4, #8]
 800b5c2:	2d00      	cmp	r5, #0
 800b5c4:	bfa2      	ittt	ge
 800b5c6:	6821      	ldrge	r1, [r4, #0]
 800b5c8:	f021 0104 	bicge.w	r1, r1, #4
 800b5cc:	6021      	strge	r1, [r4, #0]
 800b5ce:	b90e      	cbnz	r6, 800b5d4 <_printf_i+0x114>
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	d04b      	beq.n	800b66c <_printf_i+0x1ac>
 800b5d4:	4615      	mov	r5, r2
 800b5d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5da:	fb03 6711 	mls	r7, r3, r1, r6
 800b5de:	5dc7      	ldrb	r7, [r0, r7]
 800b5e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5e4:	4637      	mov	r7, r6
 800b5e6:	42bb      	cmp	r3, r7
 800b5e8:	460e      	mov	r6, r1
 800b5ea:	d9f4      	bls.n	800b5d6 <_printf_i+0x116>
 800b5ec:	2b08      	cmp	r3, #8
 800b5ee:	d10b      	bne.n	800b608 <_printf_i+0x148>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	07de      	lsls	r6, r3, #31
 800b5f4:	d508      	bpl.n	800b608 <_printf_i+0x148>
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	6861      	ldr	r1, [r4, #4]
 800b5fa:	4299      	cmp	r1, r3
 800b5fc:	bfde      	ittt	le
 800b5fe:	2330      	movle	r3, #48	; 0x30
 800b600:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b604:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b608:	1b52      	subs	r2, r2, r5
 800b60a:	6122      	str	r2, [r4, #16]
 800b60c:	f8cd a000 	str.w	sl, [sp]
 800b610:	464b      	mov	r3, r9
 800b612:	aa03      	add	r2, sp, #12
 800b614:	4621      	mov	r1, r4
 800b616:	4640      	mov	r0, r8
 800b618:	f7ff fee4 	bl	800b3e4 <_printf_common>
 800b61c:	3001      	adds	r0, #1
 800b61e:	d14a      	bne.n	800b6b6 <_printf_i+0x1f6>
 800b620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b624:	b004      	add	sp, #16
 800b626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	f043 0320 	orr.w	r3, r3, #32
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	4833      	ldr	r0, [pc, #204]	; (800b700 <_printf_i+0x240>)
 800b634:	2778      	movs	r7, #120	; 0x78
 800b636:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	6829      	ldr	r1, [r5, #0]
 800b63e:	061f      	lsls	r7, r3, #24
 800b640:	f851 6b04 	ldr.w	r6, [r1], #4
 800b644:	d402      	bmi.n	800b64c <_printf_i+0x18c>
 800b646:	065f      	lsls	r7, r3, #25
 800b648:	bf48      	it	mi
 800b64a:	b2b6      	uxthmi	r6, r6
 800b64c:	07df      	lsls	r7, r3, #31
 800b64e:	bf48      	it	mi
 800b650:	f043 0320 	orrmi.w	r3, r3, #32
 800b654:	6029      	str	r1, [r5, #0]
 800b656:	bf48      	it	mi
 800b658:	6023      	strmi	r3, [r4, #0]
 800b65a:	b91e      	cbnz	r6, 800b664 <_printf_i+0x1a4>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	f023 0320 	bic.w	r3, r3, #32
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	2310      	movs	r3, #16
 800b666:	e7a7      	b.n	800b5b8 <_printf_i+0xf8>
 800b668:	4824      	ldr	r0, [pc, #144]	; (800b6fc <_printf_i+0x23c>)
 800b66a:	e7e4      	b.n	800b636 <_printf_i+0x176>
 800b66c:	4615      	mov	r5, r2
 800b66e:	e7bd      	b.n	800b5ec <_printf_i+0x12c>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	6826      	ldr	r6, [r4, #0]
 800b674:	6961      	ldr	r1, [r4, #20]
 800b676:	1d18      	adds	r0, r3, #4
 800b678:	6028      	str	r0, [r5, #0]
 800b67a:	0635      	lsls	r5, r6, #24
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	d501      	bpl.n	800b684 <_printf_i+0x1c4>
 800b680:	6019      	str	r1, [r3, #0]
 800b682:	e002      	b.n	800b68a <_printf_i+0x1ca>
 800b684:	0670      	lsls	r0, r6, #25
 800b686:	d5fb      	bpl.n	800b680 <_printf_i+0x1c0>
 800b688:	8019      	strh	r1, [r3, #0]
 800b68a:	2300      	movs	r3, #0
 800b68c:	6123      	str	r3, [r4, #16]
 800b68e:	4615      	mov	r5, r2
 800b690:	e7bc      	b.n	800b60c <_printf_i+0x14c>
 800b692:	682b      	ldr	r3, [r5, #0]
 800b694:	1d1a      	adds	r2, r3, #4
 800b696:	602a      	str	r2, [r5, #0]
 800b698:	681d      	ldr	r5, [r3, #0]
 800b69a:	6862      	ldr	r2, [r4, #4]
 800b69c:	2100      	movs	r1, #0
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7f4 fd96 	bl	80001d0 <memchr>
 800b6a4:	b108      	cbz	r0, 800b6aa <_printf_i+0x1ea>
 800b6a6:	1b40      	subs	r0, r0, r5
 800b6a8:	6060      	str	r0, [r4, #4]
 800b6aa:	6863      	ldr	r3, [r4, #4]
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6b4:	e7aa      	b.n	800b60c <_printf_i+0x14c>
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	462a      	mov	r2, r5
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	4640      	mov	r0, r8
 800b6be:	47d0      	blx	sl
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d0ad      	beq.n	800b620 <_printf_i+0x160>
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	079b      	lsls	r3, r3, #30
 800b6c8:	d413      	bmi.n	800b6f2 <_printf_i+0x232>
 800b6ca:	68e0      	ldr	r0, [r4, #12]
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	4298      	cmp	r0, r3
 800b6d0:	bfb8      	it	lt
 800b6d2:	4618      	movlt	r0, r3
 800b6d4:	e7a6      	b.n	800b624 <_printf_i+0x164>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4632      	mov	r2, r6
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4640      	mov	r0, r8
 800b6de:	47d0      	blx	sl
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d09d      	beq.n	800b620 <_printf_i+0x160>
 800b6e4:	3501      	adds	r5, #1
 800b6e6:	68e3      	ldr	r3, [r4, #12]
 800b6e8:	9903      	ldr	r1, [sp, #12]
 800b6ea:	1a5b      	subs	r3, r3, r1
 800b6ec:	42ab      	cmp	r3, r5
 800b6ee:	dcf2      	bgt.n	800b6d6 <_printf_i+0x216>
 800b6f0:	e7eb      	b.n	800b6ca <_printf_i+0x20a>
 800b6f2:	2500      	movs	r5, #0
 800b6f4:	f104 0619 	add.w	r6, r4, #25
 800b6f8:	e7f5      	b.n	800b6e6 <_printf_i+0x226>
 800b6fa:	bf00      	nop
 800b6fc:	0800bbc8 	.word	0x0800bbc8
 800b700:	0800bbd9 	.word	0x0800bbd9

0800b704 <__swbuf_r>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	460e      	mov	r6, r1
 800b708:	4614      	mov	r4, r2
 800b70a:	4605      	mov	r5, r0
 800b70c:	b118      	cbz	r0, 800b716 <__swbuf_r+0x12>
 800b70e:	6a03      	ldr	r3, [r0, #32]
 800b710:	b90b      	cbnz	r3, 800b716 <__swbuf_r+0x12>
 800b712:	f7ff fab3 	bl	800ac7c <__sinit>
 800b716:	69a3      	ldr	r3, [r4, #24]
 800b718:	60a3      	str	r3, [r4, #8]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	071a      	lsls	r2, r3, #28
 800b71e:	d525      	bpl.n	800b76c <__swbuf_r+0x68>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	b31b      	cbz	r3, 800b76c <__swbuf_r+0x68>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	6922      	ldr	r2, [r4, #16]
 800b728:	1a98      	subs	r0, r3, r2
 800b72a:	6963      	ldr	r3, [r4, #20]
 800b72c:	b2f6      	uxtb	r6, r6
 800b72e:	4283      	cmp	r3, r0
 800b730:	4637      	mov	r7, r6
 800b732:	dc04      	bgt.n	800b73e <__swbuf_r+0x3a>
 800b734:	4621      	mov	r1, r4
 800b736:	4628      	mov	r0, r5
 800b738:	f7ff fc46 	bl	800afc8 <_fflush_r>
 800b73c:	b9e0      	cbnz	r0, 800b778 <__swbuf_r+0x74>
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	3b01      	subs	r3, #1
 800b742:	60a3      	str	r3, [r4, #8]
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	6022      	str	r2, [r4, #0]
 800b74a:	701e      	strb	r6, [r3, #0]
 800b74c:	6962      	ldr	r2, [r4, #20]
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	429a      	cmp	r2, r3
 800b752:	d004      	beq.n	800b75e <__swbuf_r+0x5a>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	07db      	lsls	r3, r3, #31
 800b758:	d506      	bpl.n	800b768 <__swbuf_r+0x64>
 800b75a:	2e0a      	cmp	r6, #10
 800b75c:	d104      	bne.n	800b768 <__swbuf_r+0x64>
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff fc31 	bl	800afc8 <_fflush_r>
 800b766:	b938      	cbnz	r0, 800b778 <__swbuf_r+0x74>
 800b768:	4638      	mov	r0, r7
 800b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76c:	4621      	mov	r1, r4
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 f806 	bl	800b780 <__swsetup_r>
 800b774:	2800      	cmp	r0, #0
 800b776:	d0d5      	beq.n	800b724 <__swbuf_r+0x20>
 800b778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b77c:	e7f4      	b.n	800b768 <__swbuf_r+0x64>
	...

0800b780 <__swsetup_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4b2a      	ldr	r3, [pc, #168]	; (800b82c <__swsetup_r+0xac>)
 800b784:	4605      	mov	r5, r0
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	460c      	mov	r4, r1
 800b78a:	b118      	cbz	r0, 800b794 <__swsetup_r+0x14>
 800b78c:	6a03      	ldr	r3, [r0, #32]
 800b78e:	b90b      	cbnz	r3, 800b794 <__swsetup_r+0x14>
 800b790:	f7ff fa74 	bl	800ac7c <__sinit>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b79a:	0718      	lsls	r0, r3, #28
 800b79c:	d422      	bmi.n	800b7e4 <__swsetup_r+0x64>
 800b79e:	06d9      	lsls	r1, r3, #27
 800b7a0:	d407      	bmi.n	800b7b2 <__swsetup_r+0x32>
 800b7a2:	2309      	movs	r3, #9
 800b7a4:	602b      	str	r3, [r5, #0]
 800b7a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b0:	e034      	b.n	800b81c <__swsetup_r+0x9c>
 800b7b2:	0758      	lsls	r0, r3, #29
 800b7b4:	d512      	bpl.n	800b7dc <__swsetup_r+0x5c>
 800b7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7b8:	b141      	cbz	r1, 800b7cc <__swsetup_r+0x4c>
 800b7ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d002      	beq.n	800b7c8 <__swsetup_r+0x48>
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7ff fb2e 	bl	800ae24 <_free_r>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6363      	str	r3, [r4, #52]	; 0x34
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	6063      	str	r3, [r4, #4]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f043 0308 	orr.w	r3, r3, #8
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	b94b      	cbnz	r3, 800b7fc <__swsetup_r+0x7c>
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7f2:	d003      	beq.n	800b7fc <__swsetup_r+0x7c>
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f000 f840 	bl	800b87c <__smakebuf_r>
 800b7fc:	89a0      	ldrh	r0, [r4, #12]
 800b7fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b802:	f010 0301 	ands.w	r3, r0, #1
 800b806:	d00a      	beq.n	800b81e <__swsetup_r+0x9e>
 800b808:	2300      	movs	r3, #0
 800b80a:	60a3      	str	r3, [r4, #8]
 800b80c:	6963      	ldr	r3, [r4, #20]
 800b80e:	425b      	negs	r3, r3
 800b810:	61a3      	str	r3, [r4, #24]
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	b943      	cbnz	r3, 800b828 <__swsetup_r+0xa8>
 800b816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b81a:	d1c4      	bne.n	800b7a6 <__swsetup_r+0x26>
 800b81c:	bd38      	pop	{r3, r4, r5, pc}
 800b81e:	0781      	lsls	r1, r0, #30
 800b820:	bf58      	it	pl
 800b822:	6963      	ldrpl	r3, [r4, #20]
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	e7f4      	b.n	800b812 <__swsetup_r+0x92>
 800b828:	2000      	movs	r0, #0
 800b82a:	e7f7      	b.n	800b81c <__swsetup_r+0x9c>
 800b82c:	200000cc 	.word	0x200000cc

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2900      	cmp	r1, #0
 800b83a:	b096      	sub	sp, #88	; 0x58
 800b83c:	4615      	mov	r5, r2
 800b83e:	461e      	mov	r6, r3
 800b840:	da0d      	bge.n	800b85e <__swhatbuf_r+0x2e>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	bf0c      	ite	eq
 800b84e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b852:	2340      	movne	r3, #64	; 0x40
 800b854:	2000      	movs	r0, #0
 800b856:	6031      	str	r1, [r6, #0]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	b016      	add	sp, #88	; 0x58
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	466a      	mov	r2, sp
 800b860:	f000 f848 	bl	800b8f4 <_fstat_r>
 800b864:	2800      	cmp	r0, #0
 800b866:	dbec      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b868:	9901      	ldr	r1, [sp, #4]
 800b86a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b86e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b872:	4259      	negs	r1, r3
 800b874:	4159      	adcs	r1, r3
 800b876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b87a:	e7eb      	b.n	800b854 <__swhatbuf_r+0x24>

0800b87c <__smakebuf_r>:
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b880:	079d      	lsls	r5, r3, #30
 800b882:	4606      	mov	r6, r0
 800b884:	460c      	mov	r4, r1
 800b886:	d507      	bpl.n	800b898 <__smakebuf_r+0x1c>
 800b888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	2301      	movs	r3, #1
 800b892:	6163      	str	r3, [r4, #20]
 800b894:	b002      	add	sp, #8
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	ab01      	add	r3, sp, #4
 800b89a:	466a      	mov	r2, sp
 800b89c:	f7ff ffc8 	bl	800b830 <__swhatbuf_r>
 800b8a0:	9900      	ldr	r1, [sp, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff f865 	bl	800a974 <_malloc_r>
 800b8aa:	b948      	cbnz	r0, 800b8c0 <__smakebuf_r+0x44>
 800b8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b0:	059a      	lsls	r2, r3, #22
 800b8b2:	d4ef      	bmi.n	800b894 <__smakebuf_r+0x18>
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	f043 0302 	orr.w	r3, r3, #2
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	e7e3      	b.n	800b888 <__smakebuf_r+0xc>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	6163      	str	r3, [r4, #20]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	6120      	str	r0, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x70>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f81d 	bl	800b918 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x70>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	431d      	orrs	r5, r3
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cf      	b.n	800b894 <__smakebuf_r+0x18>

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7fe fe96 	bl	800a632 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20003db8 	.word	0x20003db8

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7fe fe95 	bl	800a652 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20003db8 	.word	0x20003db8

0800b938 <_raise_r>:
 800b938:	291f      	cmp	r1, #31
 800b93a:	b538      	push	{r3, r4, r5, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	d904      	bls.n	800b94c <_raise_r+0x14>
 800b942:	2316      	movs	r3, #22
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b94e:	b112      	cbz	r2, 800b956 <_raise_r+0x1e>
 800b950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b954:	b94b      	cbnz	r3, 800b96a <_raise_r+0x32>
 800b956:	4620      	mov	r0, r4
 800b958:	f000 f830 	bl	800b9bc <_getpid_r>
 800b95c:	462a      	mov	r2, r5
 800b95e:	4601      	mov	r1, r0
 800b960:	4620      	mov	r0, r4
 800b962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b966:	f000 b817 	b.w	800b998 <_kill_r>
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d00a      	beq.n	800b984 <_raise_r+0x4c>
 800b96e:	1c59      	adds	r1, r3, #1
 800b970:	d103      	bne.n	800b97a <_raise_r+0x42>
 800b972:	2316      	movs	r3, #22
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	2001      	movs	r0, #1
 800b978:	e7e7      	b.n	800b94a <_raise_r+0x12>
 800b97a:	2400      	movs	r4, #0
 800b97c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b980:	4628      	mov	r0, r5
 800b982:	4798      	blx	r3
 800b984:	2000      	movs	r0, #0
 800b986:	e7e0      	b.n	800b94a <_raise_r+0x12>

0800b988 <raise>:
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <raise+0xc>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	f7ff bfd3 	b.w	800b938 <_raise_r>
 800b992:	bf00      	nop
 800b994:	200000cc 	.word	0x200000cc

0800b998 <_kill_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d07      	ldr	r5, [pc, #28]	; (800b9b8 <_kill_r+0x20>)
 800b99c:	2300      	movs	r3, #0
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	602b      	str	r3, [r5, #0]
 800b9a6:	f7fe fde5 	bl	800a574 <_kill>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	d102      	bne.n	800b9b4 <_kill_r+0x1c>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	b103      	cbz	r3, 800b9b4 <_kill_r+0x1c>
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20003db8 	.word	0x20003db8

0800b9bc <_getpid_r>:
 800b9bc:	f7fe bdd2 	b.w	800a564 <_getpid>

0800b9c0 <_gettimeofday>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <_gettimeofday+0xc>)
 800b9c2:	2258      	movs	r2, #88	; 0x58
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ca:	4770      	bx	lr
 800b9cc:	20003db8 	.word	0x20003db8

0800b9d0 <_init>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr

0800b9dc <_fini>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr
