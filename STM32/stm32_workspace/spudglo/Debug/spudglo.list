
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2dc  0800b2dc  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2dc  0800b2dc  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2dc  0800b2dc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800b2e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d04  200000fc  0800b3e0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e00  0800b3e0  00022e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef4d  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fdd  00000000  00000000  0003f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  000440a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001521  00000000  00000000  00045c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029497  00000000  00000000  00047149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023819  00000000  00000000  000705e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d50  00000000  00000000  00093df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b88  00000000  00000000  0018ab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001926d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac90 	.word	0x0800ac90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	0800ac90 	.word	0x0800ac90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
//p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d503      	bpl.n	8000ad2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <current_monitor_set+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000ad0:	e003      	b.n	8000ada <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <current_monitor_set+0x40>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000118 	.word	0x20000118
 8000aec:	20000000 	.word	0x20000000

08000af0 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <current_monitor_ratio+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <current_monitor_init>:


void current_monitor_init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b10:	e009      	b.n	8000b26 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <current_monitor_init+0x58>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000b68 <current_monitor_init+0x5c>
 8000b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <current_monitor_init+0x58>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <current_monitor_init+0x58>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000b6c <current_monitor_init+0x60>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dce3      	bgt.n	8000b12 <current_monitor_init+0x6>
    }
    //if (g_max_current_ratio <= 0) while(1); // broken..
    g_max_current_ratio = 0.1f;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <current_monitor_init+0x58>)
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <current_monitor_init+0x64>)
 8000b4e:	601a      	str	r2, [r3, #0]
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <current_monitor_init+0x58>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <current_monitor_init+0x68>)
 8000b56:	6013      	str	r3, [r2, #0]

}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	3d4ccccd 	.word	0x3d4ccccd
 8000b6c:	3d23d70a 	.word	0x3d23d70a
 8000b70:	3dcccccd 	.word	0x3dcccccd
 8000b74:	20000118 	.word	0x20000118

08000b78 <animate_led_wheel>:
extern uint32_t g_max_strip_length;
extern uint16_t g_all_strip_mask;


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    // red, green, blue (3 primary colors)
    // 8 bit colors..  Max value is 255
    // make a wheel, split it into 3 primary colors (85 positions per section)
    // increment wheel position.  After 85 steps passed then move to next primary color
    // this creates a rainbow effect. Reset wheel position to the section.
    if (wheel_pos < 85)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b54      	cmp	r3, #84	; 0x54
 8000b86:	d813      	bhi.n	8000bb0 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	0052      	lsls	r2, r2, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <animate_led_wheel+0xa8>)
 8000b94:	701a      	strb	r2, [r3, #0]
        c[1] = UINT8_MAX - (wheel_pos * 3);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <animate_led_wheel+0xa8>)
 8000ba6:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <animate_led_wheel+0xa8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	709a      	strb	r2, [r3, #2]
 8000bae:	e02f      	b.n	8000c10 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2ba9      	cmp	r3, #169	; 0xa9
 8000bb4:	d816      	bhi.n	8000be4 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3b55      	subs	r3, #85	; 0x55
 8000bba:	71fb      	strb	r3, [r7, #7]
        c[0] = UINT8_MAX - (wheel_pos * 3);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <animate_led_wheel+0xa8>)
 8000bcc:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <animate_led_wheel+0xa8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <animate_led_wheel+0xa8>)
 8000be0:	709a      	strb	r2, [r3, #2]
 8000be2:	e015      	b.n	8000c10 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	3356      	adds	r3, #86	; 0x56
 8000be8:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <animate_led_wheel+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	0052      	lsls	r2, r2, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <animate_led_wheel+0xa8>)
 8000bfc:	705a      	strb	r2, [r3, #1]
        c[2] = UINT8_MAX - (wheel_pos * 3);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	461a      	mov	r2, r3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <animate_led_wheel+0xa8>)
 8000c0e:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <animate_led_wheel+0xa8>)
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000011c 	.word	0x2000011c

08000c24 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
    if (STRIP_NUM_1 & strip_mask)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <animate_led_show_strip+0x1a>
    {
        ws2812b_show_strip_one();
 8000c3a:	f000 ffbd 	bl	8001bb8 <ws2812b_show_strip_one>
    }
    if (STRIP_NUM_2 & strip_mask)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <animate_led_show_strip+0x2a>
    {
        ws2812b_show_strip_two();
 8000c4a:	f000 ffbc 	bl	8001bc6 <ws2812b_show_strip_two>
    }
    if (STRIP_NUM_3 & strip_mask)
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <animate_led_show_strip+0x3a>
    {
        ws2812b_show_strip_three();
 8000c5a:	f000 ffbb 	bl	8001bd4 <ws2812b_show_strip_three>
    }
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000c66:	b590      	push	{r4, r7, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af02      	add	r7, sp, #8
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	4611      	mov	r1, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	4623      	mov	r3, r4
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	4603      	mov	r3, r0
 8000c7a:	80bb      	strh	r3, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
    if (STRIP_NUM_1 & mask)
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d010      	beq.n	8000cb2 <animate_led_set_pixel+0x4c>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_1, pixel))
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	4619      	mov	r1, r3
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fe21 	bl	80018dc <ws2812_pixel_is_in_strip_range>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d008      	beq.n	8000cb2 <animate_led_set_pixel+0x4c>
		{
			 ws2812b_set_led(STRIP_NUM_1, pixel, red, green, blue);
 8000ca0:	78b8      	ldrb	r0, [r7, #2]
 8000ca2:	78fa      	ldrb	r2, [r7, #3]
 8000ca4:	88b9      	ldrh	r1, [r7, #4]
 8000ca6:	7e3b      	ldrb	r3, [r7, #24]
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	4603      	mov	r3, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fe49 	bl	8001944 <ws2812b_set_led>
		}
    }
    if (STRIP_NUM_2 & mask)
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d010      	beq.n	8000ce0 <animate_led_set_pixel+0x7a>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_2, pixel))
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 fe0a 	bl	80018dc <ws2812_pixel_is_in_strip_range>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d008      	beq.n	8000ce0 <animate_led_set_pixel+0x7a>
		{
			 ws2812b_set_led(STRIP_NUM_2, pixel, red, green, blue);
 8000cce:	78b8      	ldrb	r0, [r7, #2]
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	88b9      	ldrh	r1, [r7, #4]
 8000cd4:	7e3b      	ldrb	r3, [r7, #24]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f000 fe32 	bl	8001944 <ws2812b_set_led>
		}
    }
    if (STRIP_NUM_3 & mask)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d010      	beq.n	8000d0e <animate_led_set_pixel+0xa8>
    {
		if (ws2812_pixel_is_in_strip_range(STRIP_NUM_3, pixel))
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2004      	movs	r0, #4
 8000cf2:	f000 fdf3 	bl	80018dc <ws2812_pixel_is_in_strip_range>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d008      	beq.n	8000d0e <animate_led_set_pixel+0xa8>
		{
			 ws2812b_set_led(STRIP_NUM_3, pixel, red, green, blue);
 8000cfc:	78b8      	ldrb	r0, [r7, #2]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	88b9      	ldrh	r1, [r7, #4]
 8000d02:	7e3b      	ldrb	r3, [r7, #24]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4603      	mov	r3, r0
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f000 fe1b 	bl	8001944 <ws2812b_set_led>
		}
    }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}

08000d16 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000d16:	b590      	push	{r4, r7, lr}
 8000d18:	b087      	sub	sp, #28
 8000d1a:	af02      	add	r7, sp, #8
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4611      	mov	r1, r2
 8000d22:	461a      	mov	r2, r3
 8000d24:	4623      	mov	r3, r4
 8000d26:	80fb      	strh	r3, [r7, #6]
 8000d28:	4603      	mov	r3, r0
 8000d2a:	717b      	strb	r3, [r7, #5]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	713b      	strb	r3, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	813b      	strh	r3, [r7, #8]

    if (STRIP_NUM_1 & mask)
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d017      	beq.n	8000d74 <animate_led_set_all_pixels+0x5e>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fd4b 	bl	80017e0 <ws2812_get_strip_size>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_1, yyy, red, green, blue);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e00b      	b.n	8000d6c <animate_led_set_all_pixels+0x56>
 8000d54:	7938      	ldrb	r0, [r7, #4]
 8000d56:	797a      	ldrb	r2, [r7, #5]
 8000d58:	89f9      	ldrh	r1, [r7, #14]
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 fdef 	bl	8001944 <ws2812b_set_led>
 8000d66:	89fb      	ldrh	r3, [r7, #14]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	81fb      	strh	r3, [r7, #14]
 8000d6c:	89fa      	ldrh	r2, [r7, #14]
 8000d6e:	893b      	ldrh	r3, [r7, #8]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3ef      	bcc.n	8000d54 <animate_led_set_all_pixels+0x3e>
    }
    if (STRIP_NUM_2 & mask)
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d017      	beq.n	8000db0 <animate_led_set_all_pixels+0x9a>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_2);
 8000d80:	2002      	movs	r0, #2
 8000d82:	f000 fd2d 	bl	80017e0 <ws2812_get_strip_size>
 8000d86:	4603      	mov	r3, r0
 8000d88:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_2, yyy, red, green, blue);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	81bb      	strh	r3, [r7, #12]
 8000d8e:	e00b      	b.n	8000da8 <animate_led_set_all_pixels+0x92>
 8000d90:	7938      	ldrb	r0, [r7, #4]
 8000d92:	797a      	ldrb	r2, [r7, #5]
 8000d94:	89b9      	ldrh	r1, [r7, #12]
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f000 fdd1 	bl	8001944 <ws2812b_set_led>
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	89ba      	ldrh	r2, [r7, #12]
 8000daa:	893b      	ldrh	r3, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3ef      	bcc.n	8000d90 <animate_led_set_all_pixels+0x7a>
    }
    if (STRIP_NUM_3 & mask)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d017      	beq.n	8000dec <animate_led_set_all_pixels+0xd6>
    {
		strip_size = ws2812_get_strip_size(STRIP_NUM_3);
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f000 fd0f 	bl	80017e0 <ws2812_get_strip_size>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	813b      	strh	r3, [r7, #8]
		for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(STRIP_NUM_3, yyy, red, green, blue);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	817b      	strh	r3, [r7, #10]
 8000dca:	e00b      	b.n	8000de4 <animate_led_set_all_pixels+0xce>
 8000dcc:	7938      	ldrb	r0, [r7, #4]
 8000dce:	797a      	ldrb	r2, [r7, #5]
 8000dd0:	8979      	ldrh	r1, [r7, #10]
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f000 fdb3 	bl	8001944 <ws2812b_set_led>
 8000dde:	897b      	ldrh	r3, [r7, #10]
 8000de0:	3301      	adds	r3, #1
 8000de2:	817b      	strh	r3, [r7, #10]
 8000de4:	897a      	ldrh	r2, [r7, #10]
 8000de6:	893b      	ldrh	r3, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3ef      	bcc.n	8000dcc <animate_led_set_all_pixels+0xb6>
    }
    animate_led_show_strip(mask);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff18 	bl	8000c24 <animate_led_show_strip>
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <animate_led_solid_custom_color>:


void animate_led_solid_custom_color(const strip_mask_t mask, const color_hex_code_e color)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <animate_led_solid_custom_color+0x40>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	81bb      	strh	r3, [r7, #12]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f000 fca1 	bl	8001760 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask, color_rgb[offsetof(ws2812b_led_t, red)], \
 8000e1e:	7b39      	ldrb	r1, [r7, #12]
 8000e20:	7b7a      	ldrb	r2, [r7, #13]
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	f7ff ff76 	bl	8000d16 <animate_led_set_all_pixels>
    		color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask);
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fef9 	bl	8000c24 <animate_led_show_strip>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	0800aca8 	.word	0x0800aca8

08000e40 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_ALL_SET, 0, 0, 0);
 8000e44:	2300      	movs	r3, #0
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f7ff ff63 	bl	8000d16 <animate_led_set_all_pixels>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <animate_led_only_spell_word>:


void animate_led_only_spell_word(const strip_mask_t mask, const color_hex_code_e color,
                                 const uint16_t time_ms)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	ed2d 8b02 	vpush	{d8}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	80fb      	strh	r3, [r7, #6]
 8000e64:	4613      	mov	r3, r2
 8000e66:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fcfc 	bl	8001868 <ws2812_led_get_max_strip_size>
 8000e70:	4603      	mov	r3, r0
 8000e72:	827b      	strh	r3, [r7, #18]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <animate_led_only_spell_word+0xbc>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	81bb      	strh	r3, [r7, #12]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f000 fc6b 	bl	8001760 <color_led_hex_to_rgb>
	for (int iii = 0; iii < strip_size; iii++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e034      	b.n	8000efa <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000e90:	f000 fef0 	bl	8001c74 <task_button_press_interrupt_occurred>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00d      	beq.n	8000eb6 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	1c9a      	adds	r2, r3, #2
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	1c59      	adds	r1, r3, #1
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ff42 	bl	8001d34 <task_button_press_check_interrupts>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d126      	bne.n	8000f04 <animate_led_only_spell_word+0xb0>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, iii,
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	7b3a      	ldrb	r2, [r7, #12]
 8000ebc:	7b7c      	ldrb	r4, [r7, #13]
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	88f8      	ldrh	r0, [r7, #6]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4623      	mov	r3, r4
 8000ec6:	f7ff fece 	bl	8000c66 <animate_led_set_pixel>
        		color_rgb[offsetof(ws2812b_led_t, red)],
				color_rgb[offsetof(ws2812b_led_t, green)],
				color_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fea9 	bl	8000c24 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000edc:	f001 fb70 	bl	80025c0 <task_led_ctrl_speed>
 8000ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eec:	ee17 0a90 	vmov	r0, s15
 8000ef0:	f001 fa03 	bl	80022fa <task_led_ctrl_delay>
	for (int iii = 0; iii < strip_size; iii++)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	8a7b      	ldrh	r3, [r7, #18]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbc6      	blt.n	8000e90 <animate_led_only_spell_word+0x3c>
 8000f02:	e000      	b.n	8000f06 <animate_led_only_spell_word+0xb2>
                return;
 8000f04:	bf00      	nop
	}
}
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	ecbd 8b02 	vpop	{d8}
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	0800aca8 	.word	0x0800aca8

08000f14 <animate_led_fade_in_fade_out>:


void animate_led_fade_in_fade_out(const strip_mask_t mask, const color_hex_code_e color)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8000f20:	4b9b      	ldr	r3, [pc, #620]	; (8001190 <animate_led_fade_in_fade_out+0x27c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	823b      	strh	r3, [r7, #16]
 8000f26:	2300      	movs	r3, #0
 8000f28:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color, color_rgb);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f000 fc15 	bl	8001760 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3a:	e08b      	b.n	8001054 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8000f3c:	f000 fe9a 	bl	8001c74 <task_button_press_interrupt_occurred>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00e      	beq.n	8000f64 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	1c9a      	adds	r2, r3, #2
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	1c59      	adds	r1, r3, #1
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 feec 	bl	8001d34 <task_button_press_check_interrupts>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 810f 	bne.w	8001182 <animate_led_fade_in_fade_out+0x26e>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 8000f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f66:	f7ff fad5 	bl	8000514 <__aeabi_i2d>
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 8000f70:	f7ff fc64 	bl	800083c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4614      	mov	r4, r2
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	7c3b      	ldrb	r3, [r7, #16]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fac8 	bl	8000514 <__aeabi_i2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff fb2c 	bl	80005e8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fd38 	bl	8000a0c <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 8000fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa2:	f7ff fab7 	bl	8000514 <__aeabi_i2d>
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 8000fac:	f7ff fc46 	bl	800083c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4614      	mov	r4, r2
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	7c7b      	ldrb	r3, [r7, #17]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff faaa 	bl	8000514 <__aeabi_i2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff fb0e 	bl	80005e8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd1a 	bl	8000a0c <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 8000fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fde:	f7ff fa99 	bl	8000514 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 8000fe8:	f7ff fc28 	bl	800083c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	461d      	mov	r5, r3
 8000ff4:	7cbb      	ldrb	r3, [r7, #18]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa8c 	bl	8000514 <__aeabi_i2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff faf0 	bl	80005e8 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fcfc 	bl	8000a0c <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 8001018:	edd7 7a07 	vldr	s15, [r7, #28]
 800101c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001020:	edc7 7a01 	vstr	s15, [r7, #4]
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	b2d9      	uxtb	r1, r3
 8001028:	edd7 7a06 	vldr	s15, [r7, #24]
 800102c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001030:	edc7 7a01 	vstr	s15, [r7, #4]
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	edd7 7a05 	vldr	s15, [r7, #20]
 800103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	89f8      	ldrh	r0, [r7, #14]
 800104a:	f7ff fe64 	bl	8000d16 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	2bff      	cmp	r3, #255	; 0xff
 8001058:	f77f af70 	ble.w	8000f3c <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 800105c:	23ff      	movs	r3, #255	; 0xff
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	e08a      	b.n	8001178 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001062:	f000 fe07 	bl	8001c74 <task_button_press_interrupt_occurred>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00d      	beq.n	8001088 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	1c9a      	adds	r2, r3, #2
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	1c59      	adds	r1, r3, #1
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe59 	bl	8001d34 <task_button_press_check_interrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d17e      	bne.n	8001186 <animate_led_fade_in_fade_out+0x272>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 8001088:	6a38      	ldr	r0, [r7, #32]
 800108a:	f7ff fa43 	bl	8000514 <__aeabi_i2d>
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 8001094:	f7ff fbd2 	bl	800083c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	7c3b      	ldrb	r3, [r7, #16]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa36 	bl	8000514 <__aeabi_i2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff fa9a 	bl	80005e8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fca6 	bl	8000a0c <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 80010c4:	6a38      	ldr	r0, [r7, #32]
 80010c6:	f7ff fa25 	bl	8000514 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 80010d0:	f7ff fbb4 	bl	800083c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	7c7b      	ldrb	r3, [r7, #17]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa18 	bl	8000514 <__aeabi_i2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff fa7c 	bl	80005e8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fc88 	bl	8000a0c <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 8001100:	6a38      	ldr	r0, [r7, #32]
 8001102:	f7ff fa07 	bl	8000514 <__aeabi_i2d>
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <animate_led_fade_in_fade_out+0x280>)
 800110c:	f7ff fb96 	bl	800083c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	7cbb      	ldrb	r3, [r7, #18]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9fa 	bl	8000514 <__aeabi_i2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff fa5e 	bl	80005e8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fc6a 	bl	8000a0c <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
 8001148:	793b      	ldrb	r3, [r7, #4]
 800114a:	b2d9      	uxtb	r1, r3
 800114c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	edc7 7a01 	vstr	s15, [r7, #4]
 8001158:	793b      	ldrb	r3, [r7, #4]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001164:	edc7 7a01 	vstr	s15, [r7, #4]
 8001168:	793b      	ldrb	r3, [r7, #4]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	89f8      	ldrh	r0, [r7, #14]
 800116e:	f7ff fdd2 	bl	8000d16 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	3b02      	subs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f6bf af71 	bge.w	8001062 <animate_led_fade_in_fade_out+0x14e>
 8001180:	e002      	b.n	8001188 <animate_led_fade_in_fade_out+0x274>
                return;
 8001182:	bf00      	nop
 8001184:	e000      	b.n	8001188 <animate_led_fade_in_fade_out+0x274>
                return;
 8001186:	bf00      	nop
    }
}
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	0800aca8 	.word	0x0800aca8
 8001194:	40700000 	.word	0x40700000

08001198 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t mask, const color_hex_code_e color, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	ed2d 8b02 	vpush	{d8}
 800119e:	b08b      	sub	sp, #44	; 0x2c
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	4611      	mov	r1, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	81fb      	strh	r3, [r7, #14]
 80011ac:	460b      	mov	r3, r1
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fb56 	bl	8001868 <ws2812_led_get_max_strip_size>
 80011bc:	4603      	mov	r3, r0
 80011be:	837b      	strh	r3, [r7, #26]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <animate_led_twinkle+0xe4>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	82bb      	strh	r3, [r7, #20]
 80011c6:	2300      	movs	r3, #0
 80011c8:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color, color_rgb);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f000 fac5 	bl	8001760 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e043      	b.n	8001264 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 80011dc:	f000 fd4a 	bl	8001c74 <task_button_press_interrupt_occurred>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00d      	beq.n	8001202 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	1c9a      	adds	r2, r3, #2
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	1c59      	adds	r1, r3, #1
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd9c 	bl	8001d34 <task_button_press_check_interrupts>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d135      	bne.n	800126e <animate_led_twinkle+0xd6>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, random_num(0, strip_size),
 8001202:	8b7b      	ldrh	r3, [r7, #26]
 8001204:	4619      	mov	r1, r3
 8001206:	2000      	movs	r0, #0
 8001208:	f008 fc76 	bl	8009af8 <random_num>
 800120c:	4603      	mov	r3, r0
 800120e:	b299      	uxth	r1, r3
 8001210:	7d3a      	ldrb	r2, [r7, #20]
 8001212:	7d7c      	ldrb	r4, [r7, #21]
 8001214:	7dbb      	ldrb	r3, [r7, #22]
 8001216:	89f8      	ldrh	r0, [r7, #14]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4623      	mov	r3, r4
 800121c:	f7ff fd23 	bl	8000c66 <animate_led_set_pixel>
                              (color_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(mask);
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fcfe 	bl	8000c24 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001232:	f001 f9c5 	bl	80025c0 <task_led_ctrl_speed>
 8001236:	eeb0 7a40 	vmov.f32	s14, s0
 800123a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f001 f858 	bl	80022fa <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(mask, 0, 0, 0);
 800124a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <animate_led_twinkle+0xc6>
 8001252:	89f8      	ldrh	r0, [r7, #14]
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f7ff fd5c 	bl	8000d16 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	89bb      	ldrh	r3, [r7, #12]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbb7      	blt.n	80011dc <animate_led_twinkle+0x44>
 800126c:	e000      	b.n	8001270 <animate_led_twinkle+0xd8>
                return;
 800126e:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	ecbd 8b02 	vpop	{d8}
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	0800aca8 	.word	0x0800aca8

08001280 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask, const bool fill,
                                           const uint16_t speed_delay)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	ed2d 8b02 	vpush	{d8}
 8001286:	b08b      	sub	sp, #44	; 0x2c
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
 800128e:	460b      	mov	r3, r1
 8001290:	717b      	strb	r3, [r7, #5]
 8001292:	4613      	mov	r3, r2
 8001294:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <animate_led_sparkle_only_random_color+0x120>)
 8001298:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fae3 	bl	8001868 <ws2812_led_get_max_strip_size>
 80012a2:	4603      	mov	r3, r0
 80012a4:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 faab 	bl	8001804 <ws2812_get_num_active_animation_leds>
 80012ae:	4603      	mov	r3, r0
 80012b0:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	83fb      	strh	r3, [r7, #30]
 80012b6:	e059      	b.n	800136c <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012b8:	f000 fcdc 	bl	8001c74 <task_button_press_interrupt_occurred>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <animate_led_sparkle_only_random_color+0x5a>
 80012c2:	f107 020d 	add.w	r2, r7, #13
 80012c6:	f107 010e 	add.w	r1, r7, #14
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd30 	bl	8001d34 <task_button_press_check_interrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d15c      	bne.n	8001394 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80012da:	8afb      	ldrh	r3, [r7, #22]
 80012dc:	4619      	mov	r1, r3
 80012de:	2000      	movs	r0, #0
 80012e0:	f008 fc0a 	bl	8009af8 <random_num>
 80012e4:	4603      	mov	r3, r0
 80012e6:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	b29c      	uxth	r4, r3
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	2000      	movs	r0, #0
 80012f0:	f008 fc02 	bl	8009af8 <random_num>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b2dd      	uxtb	r5, r3
 80012f8:	21ff      	movs	r1, #255	; 0xff
 80012fa:	2000      	movs	r0, #0
 80012fc:	f008 fbfc 	bl	8009af8 <random_num>
 8001300:	4603      	mov	r3, r0
 8001302:	b2de      	uxtb	r6, r3
 8001304:	21ff      	movs	r1, #255	; 0xff
 8001306:	2000      	movs	r0, #0
 8001308:	f008 fbf6 	bl	8009af8 <random_num>
 800130c:	4603      	mov	r3, r0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	88f8      	ldrh	r0, [r7, #6]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4633      	mov	r3, r6
 8001316:	462a      	mov	r2, r5
 8001318:	4621      	mov	r1, r4
 800131a:	f7ff fca4 	bl	8000c66 <animate_led_set_pixel>
		animate_led_show_strip(mask);
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc7f 	bl	8000c24 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001330:	f001 f946 	bl	80025c0 <task_led_ctrl_speed>
 8001334:	eeb0 7a40 	vmov.f32	s14, s0
 8001338:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
 8001344:	f000 ffd9 	bl	80022fa <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask, pix, 0, 0, 0);
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <animate_led_sparkle_only_random_color+0xe6>
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	b299      	uxth	r1, r3
 8001358:	88f8      	ldrh	r0, [r7, #6]
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	2200      	movs	r2, #0
 8001362:	f7ff fc80 	bl	8000c66 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001366:	8bfb      	ldrh	r3, [r7, #30]
 8001368:	3301      	adds	r3, #1
 800136a:	83fb      	strh	r3, [r7, #30]
 800136c:	8bfb      	ldrh	r3, [r7, #30]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001380:	edd7 7a06 	vldr	s15, [r7, #24]
 8001384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d492      	bmi.n	80012b8 <animate_led_sparkle_only_random_color+0x38>
 8001392:	e000      	b.n	8001396 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001394:	bf00      	nop
	}
}
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	ecbd 8b02 	vpop	{d8}
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	3f333333 	.word	0x3f333333

080013a4 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask, const uint16_t speed_delay)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	ed2d 8b02 	vpush	{d8}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	80fb      	strh	r3, [r7, #6]
 80013b4:	4613      	mov	r3, r2
 80013b6:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fa54 	bl	8001868 <ws2812_led_get_max_strip_size>
 80013c0:	4603      	mov	r3, r0
 80013c2:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80013c4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013c8:	82bb      	strh	r3, [r7, #20]
 80013ca:	e06c      	b.n	80014a6 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013cc:	f000 fc52 	bl	8001c74 <task_button_press_interrupt_occurred>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <animate_led_rainbow_cycle+0x4a>
 80013d6:	f107 0209 	add.w	r2, r7, #9
 80013da:	f107 010a 	add.w	r1, r7, #10
 80013de:	f107 030b 	add.w	r3, r7, #11
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fca6 	bl	8001d34 <task_button_press_check_interrupts>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d15f      	bne.n	80014ae <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	82fb      	strh	r3, [r7, #22]
 80013f2:	e02f      	b.n	8001454 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013f4:	f000 fc3e 	bl	8001c74 <task_button_press_interrupt_occurred>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <animate_led_rainbow_cycle+0x72>
 80013fe:	f107 0209 	add.w	r2, r7, #9
 8001402:	f107 010a 	add.w	r1, r7, #10
 8001406:	f107 030b 	add.w	r3, r7, #11
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fc92 	bl	8001d34 <task_button_press_check_interrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d14d      	bne.n	80014b2 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	021a      	lsls	r2, r3, #8
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8abb      	ldrh	r3, [r7, #20]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fba4 	bl	8000b78 <animate_led_wheel>
 8001430:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask, iii, *c, *(c + 1), *(c + 2));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	781c      	ldrb	r4, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3302      	adds	r3, #2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	8af9      	ldrh	r1, [r7, #22]
 8001444:	88f8      	ldrh	r0, [r7, #6]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4623      	mov	r3, r4
 800144a:	f7ff fc0c 	bl	8000c66 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	3301      	adds	r3, #1
 8001452:	82fb      	strh	r3, [r7, #22]
 8001454:	8afa      	ldrh	r2, [r7, #22]
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3cb      	bcc.n	80013f4 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask);
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fbe0 	bl	8000c24 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001464:	f001 f8ac 	bl	80025c0 <task_led_ctrl_speed>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d103      	bne.n	800147e <animate_led_rainbow_cycle+0xda>
 8001476:	2000      	movs	r0, #0
 8001478:	f000 ff3f 	bl	80022fa <task_led_ctrl_delay>
 800147c:	e010      	b.n	80014a0 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001488:	f001 f89a 	bl	80025c0 <task_led_ctrl_speed>
 800148c:	eeb0 7a40 	vmov.f32	s14, s0
 8001490:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001498:	ee17 0a90 	vmov	r0, s15
 800149c:	f000 ff2d 	bl	80022fa <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80014a0:	8abb      	ldrh	r3, [r7, #20]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	82bb      	strh	r3, [r7, #20]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d18f      	bne.n	80013cc <animate_led_rainbow_cycle+0x28>
 80014ac:	e002      	b.n	80014b4 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80014b2:	bf00      	nop
    }
}
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	ecbd 8b02 	vpop	{d8}
 80014bc:	bd90      	pop	{r4, r7, pc}
	...

080014c0 <animate_led_theater_chase>:


void animate_led_theater_chase(const strip_mask_t mask, const color_hex_code_e color,
                               const uint16_t speed_delay)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	ed2d 8b02 	vpush	{d8}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9c6 	bl	8001868 <ws2812_led_get_max_strip_size>
 80014dc:	4603      	mov	r3, r0
 80014de:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <animate_led_theater_chase+0x140>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	2300      	movs	r3, #0
 80014e8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color, color_theater_chase_rgb);
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f000 f935 	bl	8001760 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e075      	b.n	80015e8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	e06c      	b.n	80015dc <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001502:	f000 fbb7 	bl	8001c74 <task_button_press_interrupt_occurred>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00d      	beq.n	8001528 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	1c9a      	adds	r2, r3, #2
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fc09 	bl	8001d34 <task_button_press_check_interrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d163      	bne.n	80015f0 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e010      	b.n	8001550 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask, iii + qqq,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	b29a      	uxth	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b299      	uxth	r1, r3
 800153a:	7a3a      	ldrb	r2, [r7, #8]
 800153c:	7a7c      	ldrb	r4, [r7, #9]
 800153e:	7abb      	ldrb	r3, [r7, #10]
 8001540:	88f8      	ldrh	r0, [r7, #6]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4623      	mov	r3, r4
 8001546:	f7ff fb8e 	bl	8000c66 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3303      	adds	r3, #3
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbea      	blt.n	800152e <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fb62 	bl	8000c24 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001560:	f000 fb88 	bl	8001c74 <task_button_press_interrupt_occurred>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00d      	beq.n	8001586 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	1c9a      	adds	r2, r3, #2
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fbda 	bl	8001d34 <task_button_press_check_interrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d136      	bne.n	80015f4 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001590:	f001 f816 	bl	80025c0 <task_led_ctrl_speed>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a0:	ee17 0a90 	vmov	r0, s15
 80015a4:	f000 fea9 	bl	80022fa <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e00f      	b.n	80015ce <animate_led_theater_chase+0x10e>
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b299      	uxth	r1, r3
 80015ba:	88f8      	ldrh	r0, [r7, #6]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2200      	movs	r2, #0
 80015c4:	f7ff fb4f 	bl	8000c66 <animate_led_set_pixel>
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	3303      	adds	r3, #3
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbeb      	blt.n	80015ae <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	3301      	adds	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	dd8f      	ble.n	8001502 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	dd86      	ble.n	80014fc <animate_led_theater_chase+0x3c>
 80015ee:	e002      	b.n	80015f6 <animate_led_theater_chase+0x136>
                    return;
 80015f0:	bf00      	nop
 80015f2:	e000      	b.n	80015f6 <animate_led_theater_chase+0x136>
                    return;
 80015f4:	bf00      	nop
        }
    }
}
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	ecbd 8b02 	vpop	{d8}
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	0800aca8 	.word	0x0800aca8

08001604 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask, const uint16_t speed_delay)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	ed2d 8b02 	vpush	{d8}
 800160a:	b08d      	sub	sp, #52	; 0x34
 800160c:	af02      	add	r7, sp, #8
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f924 	bl	8001868 <ws2812_led_get_max_strip_size>
 8001620:	4603      	mov	r3, r0
 8001622:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
 8001628:	e08a      	b.n	8001740 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	e080      	b.n	8001732 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001630:	f000 fb20 	bl	8001c74 <task_button_press_interrupt_occurred>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <animate_led_theater_chase_rainbow+0x4e>
 800163a:	f107 020d 	add.w	r2, r7, #13
 800163e:	f107 010e 	add.w	r1, r7, #14
 8001642:	f107 030f 	add.w	r3, r7, #15
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fb74 	bl	8001d34 <task_button_press_check_interrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d17b      	bne.n	800174a <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e039      	b.n	80016cc <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001658:	f000 fb0c 	bl	8001c74 <task_button_press_interrupt_occurred>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <animate_led_theater_chase_rainbow+0x76>
 8001662:	f107 020d 	add.w	r2, r7, #13
 8001666:	f107 010e 	add.w	r1, r7, #14
 800166a:	f107 030f 	add.w	r3, r7, #15
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fb60 	bl	8001d34 <task_button_press_check_interrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d169      	bne.n	800174e <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	441a      	add	r2, r3
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <animate_led_theater_chase_rainbow+0x158>)
 8001682:	fb83 1302 	smull	r1, r3, r3, r2
 8001686:	4413      	add	r3, r2
 8001688:	11d9      	asrs	r1, r3, #7
 800168a:	17d3      	asrs	r3, r2, #31
 800168c:	1ac9      	subs	r1, r1, r3
 800168e:	460b      	mov	r3, r1
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	1a5b      	subs	r3, r3, r1
 8001694:	1ad1      	subs	r1, r2, r3
 8001696:	b2cb      	uxtb	r3, r1
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fa6d 	bl	8000b78 <animate_led_wheel>
 800169e:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b299      	uxth	r1, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781c      	ldrb	r4, [r3, #0]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3302      	adds	r3, #2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	88f8      	ldrh	r0, [r7, #6]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4623      	mov	r3, r4
 80016c2:	f7ff fad0 	bl	8000c66 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3303      	adds	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	8afb      	ldrh	r3, [r7, #22]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbc1      	blt.n	8001658 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff faa4 	bl	8000c24 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016e6:	f000 ff6b 	bl	80025c0 <task_led_ctrl_speed>
 80016ea:	eeb0 7a40 	vmov.f32	s14, s0
 80016ee:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 0a90 	vmov	r0, s15
 80016fa:	f000 fdfe 	bl	80022fa <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	e00f      	b.n	8001724 <animate_led_theater_chase_rainbow+0x120>
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	b29a      	uxth	r2, r3
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4413      	add	r3, r2
 800170e:	b299      	uxth	r1, r3
 8001710:	88f8      	ldrh	r0, [r7, #6]
 8001712:	2300      	movs	r3, #0
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	f7ff faa4 	bl	8000c66 <animate_led_set_pixel>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3303      	adds	r3, #3
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbeb      	blt.n	8001704 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	3301      	adds	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2b02      	cmp	r3, #2
 8001736:	f77f af7b 	ble.w	8001630 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	f77f af71 	ble.w	800162a <animate_led_theater_chase_rainbow+0x26>
 8001748:	e002      	b.n	8001750 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800174a:	bf00      	nop
 800174c:	e000      	b.n	8001750 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800174e:	bf00      	nop
        }
    }
}
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	ecbd 8b02 	vpop	{d8}
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	80808081 	.word	0x80808081

08001760 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	b2da      	uxtb	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	0a1a      	lsrs	r2, r3, #8
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3302      	adds	r3, #2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <reset_ws2812b>:
 * @brief   Reset LED strip >= 50 microseconds of 0
 * @param   void
 * @return  void
 */
void reset_ws2812b(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
	// something needs to change here... This should be 3000
	uint8_t g_pwm_reset[50] = {0}; // 50 bytes on stack...
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 fbfc 	bl	8009fa8 <memset>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 80017b0:	1d3a      	adds	r2, r7, #4
 80017b2:	2332      	movs	r3, #50	; 0x32
 80017b4:	2100      	movs	r1, #0
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <reset_ws2812b+0x44>)
 80017b8:	f006 f850 	bl	800785c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 80017bc:	1d3a      	adds	r2, r7, #4
 80017be:	2332      	movs	r3, #50	; 0x32
 80017c0:	2104      	movs	r1, #4
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <reset_ws2812b+0x44>)
 80017c4:	f006 f84a 	bl	800785c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	2332      	movs	r3, #50	; 0x32
 80017cc:	2108      	movs	r1, #8
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <reset_ws2812b+0x44>)
 80017d0:	f006 f844 	bl	800785c <HAL_TIM_PWM_Start_DMA>
}
 80017d4:	bf00      	nop
 80017d6:	3738      	adds	r7, #56	; 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20001b94 	.word	0x20001b94

080017e0 <ws2812_get_strip_size>:
 * @brief   Return the size of the current strip
 * @param   void
 * @return  void
 */
uint16_t ws2812_get_strip_size(const strip_num_e strip_num)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	return g_ws2812b_info[strip_num].led_strip_length;
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <ws2812_get_strip_size+0x20>)
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	889b      	ldrh	r3, [r3, #4]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	2000005c 	.word	0x2000005c

08001804 <ws2812_get_num_active_animation_leds>:
 * @brief   Get the number of active LEDs in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  Number of active LEDs
 */
uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_1 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <ws2812_get_num_active_animation_leds+0x24>
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <ws2812_get_num_active_animation_leds+0x60>)
 8001820:	899a      	ldrh	r2, [r3, #12]
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	4413      	add	r3, r2
 8001826:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_2 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <ws2812_get_num_active_animation_leds+0x3a>
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <ws2812_get_num_active_animation_leds+0x60>)
 8001836:	8a9a      	ldrh	r2, [r3, #20]
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	4413      	add	r3, r2
 800183c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_3 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <ws2812_get_num_active_animation_leds+0x50>
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <ws2812_get_num_active_animation_leds+0x60>)
 800184c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	4413      	add	r3, r2
 8001852:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001854:	89fb      	ldrh	r3, [r7, #14]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000005c 	.word	0x2000005c

08001868 <ws2812_led_get_max_strip_size>:
 * @brief   Return max strip size in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  The max strip size
 */
uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	uint16_t max_strip_size = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <ws2812_led_get_max_strip_size+0x2a>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) \
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 8001884:	899b      	ldrh	r3, [r3, #12]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001886:	89fa      	ldrh	r2, [r7, #14]
 8001888:	429a      	cmp	r2, r3
 800188a:	d202      	bcs.n	8001892 <ws2812_led_get_max_strip_size+0x2a>
					max_strip_size = g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 800188e:	899b      	ldrh	r3, [r3, #12]
 8001890:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_2 & strip_mask) && \
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	b29b      	uxth	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <ws2812_led_get_max_strip_size+0x46>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) \
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 80018a0:	8a9b      	ldrh	r3, [r3, #20]
	if ((STRIP_NUM_2 & strip_mask) && \
 80018a2:	89fa      	ldrh	r2, [r7, #14]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d202      	bcs.n	80018ae <ws2812_led_get_max_strip_size+0x46>
					max_strip_size = g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 80018aa:	8a9b      	ldrh	r3, [r3, #20]
 80018ac:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_3 & strip_mask) && \
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <ws2812_led_get_max_strip_size+0x62>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) \
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 80018bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	if ((STRIP_NUM_3 & strip_mask) && \
 80018be:	89fa      	ldrh	r2, [r7, #14]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d202      	bcs.n	80018ca <ws2812_led_get_max_strip_size+0x62>
					max_strip_size = g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <ws2812_led_get_max_strip_size+0x70>)
 80018c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018c8:	81fb      	strh	r3, [r7, #14]
	return max_strip_size;
 80018ca:	89fb      	ldrh	r3, [r7, #14]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	2000005c 	.word	0x2000005c

080018dc <ws2812_pixel_is_in_strip_range>:
 * @param   strip_bit: strip to check if pixel is in range
 * @param	pixel: LED # to check
 * @return  true if in range, else false
 */
bool ws2812_pixel_is_in_strip_range(const strip_num_e strip_num, const uint16_t pixel)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
	if ((STRIP_NUM_1 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) return_val = true;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <ws2812_pixel_is_in_strip_range+0x2a>
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <ws2812_pixel_is_in_strip_range+0x64>)
 80018f8:	899b      	ldrh	r3, [r3, #12]
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d202      	bcs.n	8001906 <ws2812_pixel_is_in_strip_range+0x2a>
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e014      	b.n	8001930 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_2 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) return_val = true;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d107      	bne.n	800191c <ws2812_pixel_is_in_strip_range+0x40>
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <ws2812_pixel_is_in_strip_range+0x64>)
 800190e:	8a9b      	ldrh	r3, [r3, #20]
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d202      	bcs.n	800191c <ws2812_pixel_is_in_strip_range+0x40>
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e009      	b.n	8001930 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_3 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) return_val = true;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d106      	bne.n	8001930 <ws2812_pixel_is_in_strip_range+0x54>
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <ws2812_pixel_is_in_strip_range+0x64>)
 8001924:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	d201      	bcs.n	8001930 <ws2812_pixel_is_in_strip_range+0x54>
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
	return return_val;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000005c 	.word	0x2000005c

08001944 <ws2812b_set_led>:
 * @param 	blue: 8 bit blue
 * @return  void
 */
void ws2812b_set_led(const strip_num_e strip_num, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001944:	b490      	push	{r4, r7}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4604      	mov	r4, r0
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	4603      	mov	r3, r0
 8001958:	81bb      	strh	r3, [r7, #12]
 800195a:	460b      	mov	r3, r1
 800195c:	73bb      	strb	r3, [r7, #14]
 800195e:	4613      	mov	r3, r2
 8001960:	72fb      	strb	r3, [r7, #11]
	(g_ws2812b_info[strip_num].led_strip + led_num)->red = red * g_max_current_ratio;
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <ws2812b_set_led+0xc4>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <ws2812b_set_led+0xc8>)
 800197a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800197e:	89ba      	ldrh	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	440b      	add	r3, r1
 8001988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001990:	793a      	ldrb	r2, [r7, #4]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
	(g_ws2812b_info[strip_num].led_strip + led_num)->green = green * g_max_current_ratio;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <ws2812b_set_led+0xc4>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <ws2812b_set_led+0xc8>)
 80019ae:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80019b2:	89ba      	ldrh	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80019c4:	793a      	ldrb	r2, [r7, #4]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	705a      	strb	r2, [r3, #1]
	(g_ws2812b_info[strip_num].led_strip + led_num)->blue = blue * g_max_current_ratio;
 80019ca:	7e3b      	ldrb	r3, [r7, #24]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <ws2812b_set_led+0xc4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <ws2812b_set_led+0xc8>)
 80019e2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80019e6:	89ba      	ldrh	r2, [r7, #12]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80019f8:	793a      	ldrb	r2, [r7, #4]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	709a      	strb	r2, [r3, #2]
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc90      	pop	{r4, r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	2000005c 	.word	0x2000005c

08001a10 <ws2812b_fill_pwm_buffer_strip>:
 * @brief   Fill the PWM buffer for the strip num
 * @param   strip_num: PWM buffer pertaining to strip
 * @return  void
 */
void ws2812b_fill_pwm_buffer_strip(strip_num_e strip_num)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
    uint32_t color = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
    uint32_t timer_channel = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	827b      	strh	r3, [r7, #18]
 8001a26:	e050      	b.n	8001aca <ws2812b_fill_pwm_buffer_strip+0xba>
    {
    	// reconstruct 24 bit color...
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001a2c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001a30:	8a7a      	ldrh	r2, [r7, #18]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	0419      	lsls	r1, r3, #16
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001a42:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a46:	8a7a      	ldrh	r2, [r7, #18]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4403      	add	r3, r0
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001a54:	4319      	orrs	r1, r3
				(((g_ws2812b_info[strip_num].led_strip + iii)->blue));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4a53      	ldr	r2, [pc, #332]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001a5a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a5e:	8a7a      	ldrh	r2, [r7, #18]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	4403      	add	r3, r0
 8001a68:	789b      	ldrb	r3, [r3, #2]
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001a6a:	430b      	orrs	r3, r1
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001a6c:	60bb      	str	r3, [r7, #8]
        // walk over each bit.. starting at msb
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	747b      	strb	r3, [r7, #17]
 8001a72:	e024      	b.n	8001abe <ws2812b_fill_pwm_buffer_strip+0xae>
        {
        	// if bit in color is set then fill w/ WS2812B_BIT_SET_CYCLES else WS2812B_BIT_RESET_CYCLES
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
            		(color & (1 << ((sizeof(ws2812b_led_t) * BITS_PER_BYTE) - 1 - yyy))) ? \
 8001a74:	7c7b      	ldrb	r3, [r7, #17]
 8001a76:	f1c3 0317 	rsb	r3, r3, #23
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <ws2812b_fill_pwm_buffer_strip+0x7e>
 8001a8a:	2028      	movs	r0, #40	; 0x28
 8001a8c:	e000      	b.n	8001a90 <ws2812b_fill_pwm_buffer_strip+0x80>
 8001a8e:	2014      	movs	r0, #20
 8001a90:	4b46      	ldr	r3, [pc, #280]	; (8001bac <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4a44      	ldr	r2, [pc, #272]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	88db      	ldrh	r3, [r3, #6]
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	8a7a      	ldrh	r2, [r7, #18]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	18e2      	adds	r2, r4, r3
 8001aac:	7c7b      	ldrb	r3, [r7, #17]
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	440b      	add	r3, r1
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001ab8:	7c7b      	ldrb	r3, [r7, #17]
 8001aba:	3301      	adds	r3, #1
 8001abc:	747b      	strb	r3, [r7, #17]
 8001abe:	7c7b      	ldrb	r3, [r7, #17]
 8001ac0:	2b17      	cmp	r3, #23
 8001ac2:	d9d7      	bls.n	8001a74 <ws2812b_fill_pwm_buffer_strip+0x64>
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001ac4:	8a7b      	ldrh	r3, [r7, #18]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	827b      	strh	r3, [r7, #18]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	889b      	ldrh	r3, [r3, #4]
 8001ad4:	8a7a      	ldrh	r2, [r7, #18]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3a6      	bcc.n	8001a28 <ws2812b_fill_pwm_buffer_strip+0x18>
            				(uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	e01b      	b.n	8001b18 <ws2812b_fill_pwm_buffer_strip+0x108>
    {
        gp_pwm_data_fill[(g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4930      	ldr	r1, [pc, #192]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	88db      	ldrh	r3, [r3, #6]
 8001aee:	4618      	mov	r0, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	492d      	ldr	r1, [pc, #180]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	889b      	ldrh	r3, [r3, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	440b      	add	r3, r1
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	18c1      	adds	r1, r0, r3
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	3301      	adds	r3, #1
 8001b16:	81fb      	strh	r3, [r7, #14]
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001bb0 <ws2812b_fill_pwm_buffer_strip+0x1a0>
 8001b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	d4d7      	bmi.n	8001ae0 <ws2812b_fill_pwm_buffer_strip+0xd0>
    }
    switch (strip_num)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d00c      	beq.n	8001b50 <ws2812b_fill_pwm_buffer_strip+0x140>
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	dc0d      	bgt.n	8001b56 <ws2812b_fill_pwm_buffer_strip+0x146>
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d002      	beq.n	8001b44 <ws2812b_fill_pwm_buffer_strip+0x134>
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <ws2812b_fill_pwm_buffer_strip+0x13a>
		break;
    	case STRIP_NUM_3:
    		timer_channel = TIM_CHANNEL_3;
		break;
    	default:
    	break;
 8001b42:	e008      	b.n	8001b56 <ws2812b_fill_pwm_buffer_strip+0x146>
    		timer_channel = TIM_CHANNEL_1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
		break;
 8001b48:	e006      	b.n	8001b58 <ws2812b_fill_pwm_buffer_strip+0x148>
    		timer_channel = TIM_CHANNEL_2;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	617b      	str	r3, [r7, #20]
		break;
 8001b4e:	e003      	b.n	8001b58 <ws2812b_fill_pwm_buffer_strip+0x148>
    		timer_channel = TIM_CHANNEL_3;
 8001b50:	2308      	movs	r3, #8
 8001b52:	617b      	str	r3, [r7, #20]
		break;
 8001b54:	e000      	b.n	8001b58 <ws2812b_fill_pwm_buffer_strip+0x148>
    	break;
 8001b56:	bf00      	nop

    }
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, timer_channel, (uint32_t *)(gp_pwm_data_fill + g_ws2812b_info[strip_num].pwm_dma_buffer_index_start), (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <ws2812b_fill_pwm_buffer_strip+0x19c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4912      	ldr	r1, [pc, #72]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	88db      	ldrh	r3, [r3, #6]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	441a      	add	r2, r3
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <ws2812b_fill_pwm_buffer_strip+0x198>)
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	4619      	mov	r1, r3
 8001b76:	460b      	mov	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001bb0 <ws2812b_fill_pwm_buffer_strip+0x1a0>
 8001b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 3a90 	vmov	r3, s15
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <ws2812b_fill_pwm_buffer_strip+0x1a4>)
 8001b9c:	f005 fe5e 	bl	800785c <HAL_TIM_PWM_Start_DMA>
}
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	2000005c 	.word	0x2000005c
 8001bac:	20000120 	.word	0x20000120
 8001bb0:	453b8000 	.word	0x453b8000
 8001bb4:	20001b94 	.word	0x20001b94

08001bb8 <ws2812b_show_strip_one>:
	// call TIM PWM DMA to reset.
}


void ws2812b_show_strip_one(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f000 f810 	bl	8001be2 <ws2812b_show>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ws2812b_show_strip_two>:


void ws2812b_show_strip_two(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_2);
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f000 f809 	bl	8001be2 <ws2812b_show>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <ws2812b_show_strip_three>:


void ws2812b_show_strip_three(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_3);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f000 f802 	bl	8001be2 <ws2812b_show>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ws2812b_show>:
 * @brief   Show the strip(s)
 * @param   strip_mask: bit vector. 1 = show, 0 = don't
 * @return  void
 */
void ws2812b_show(const strip_mask_t strip_mask)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
	if (STRIP_NUM_1 & strip_mask)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <ws2812b_show+0x1c>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_1));
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ff09 	bl	8001a10 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_2 & strip_mask)
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <ws2812b_show+0x2e>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_2));
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7ff ff00 	bl	8001a10 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_3 & strip_mask)
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <ws2812b_show+0x40>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_3));
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff fef7 	bl	8001a10 <ws2812b_fill_pwm_buffer_strip>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <ws2812b_init>:


void ws2812b_init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	uint32_t total_led_bits_in_all_strips = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * NUM_LEDS);
 8001c32:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c36:	607b      	str	r3, [r7, #4]
	//g_all_strip_mask = STRIP_ALL_SET;
    gp_pwm_data_fill = malloc(total_led_bits_in_all_strips + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001c6c <ws2812b_init+0x40>
 8001c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 0a90 	vmov	r0, s15
 8001c52:	f007 ffc7 	bl	8009be4 <malloc>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <ws2812b_init+0x44>)
 8001c5c:	601a      	str	r2, [r3, #0]
	current_monitor_init();
 8001c5e:	f7fe ff55 	bl	8000b0c <current_monitor_init>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	45bb8000 	.word	0x45bb8000
 8001c70:	20000120 	.word	0x20000120

08001c74 <task_button_press_interrupt_occurred>:
uint32_t 	g_c_ok_count = 0;
uint32_t 	g_d_ok_count = 0;


bool task_button_press_interrupt_occurred(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.interrupt_set;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <task_button_press_interrupt_occurred+0x14>)
 8001c7a:	799b      	ldrb	r3, [r3, #6]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000084 	.word	0x20000084

08001c8c <task_led_ctrl_button_to_isr>:
 * @brief   Return the ISR pertaining to the button
 * @param   button: the button of interest
 * @return  isr_e: enumerated type for the interrupt pertaining to the button
 */
isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
    switch (button)
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d813      	bhi.n	8001cc4 <task_led_ctrl_button_to_isr+0x38>
 8001c9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <task_led_ctrl_button_to_isr+0x18>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cb5 	.word	0x08001cb5
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001cc1 	.word	0x08001cc1
    {
        case PUSH_BUTTON_A: return ISR_SPEED;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e006      	b.n	8001cc6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_B: return ISR_STATE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e004      	b.n	8001cc6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_C: return ISR_COLOR;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_D: return ISR_PAUSE;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <task_led_ctrl_button_to_isr+0x3a>
        default: return ISR_INVALID;
 8001cc4:	2305      	movs	r3, #5
    }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <task_button_press_ctrl_set_interrupt_flag>:
 * @brief   Set global flag denoting that src interrupt has occurred
 * @param   src: source of interrupt
 * @return  void
 */
void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
    g_task_led_ctrl.interrupt_set = true;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	719a      	strb	r2, [r3, #6]
    g_interrupt_flag[src] = true;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	54d1      	strb	r1, [r2, r3]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000084 	.word	0x20000084
 8001cfc:	20000174 	.word	0x20000174

08001d00 <task_button_press_ctrl_interrupt_flag>:
 * @return  bool: true if occurred else false
 * @note	This function auto clears the flag.  If set it will
 *  		return true and clear the tracked flag.
 */
bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
 8001d10:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <task_button_press_ctrl_interrupt_flag+0x20>
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000174 	.word	0x20000174

08001d34 <task_button_press_check_interrupts>:
 * @param   *green: pointer to current animation green color (8 bit)
 * @param  	*blue: pointer to current animation blue color (8 bit)
 * @return  bool: true if interrupt occurred since last check, else false
 */
bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8001d44:	f000 f85a 	bl	8001dfc <task_button_press_major_state_change>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8001d4e:	f000 f849 	bl	8001de4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8001d56:	2100      	movs	r1, #0
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f7ff f84f 	bl	8000dfc <animate_led_solid_custom_color>
 8001d5e:	e039      	b.n	8001dd4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff ffcd 	bl	8001d00 <task_button_press_ctrl_interrupt_flag>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8001d6c:	f000 f83a 	bl	8001de4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d70:	2301      	movs	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2007      	movs	r0, #7
 8001d78:	f7ff f840 	bl	8000dfc <animate_led_solid_custom_color>
 8001d7c:	e02a      	b.n	8001dd4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f7ff ffbe 	bl	8001d00 <task_button_press_ctrl_interrupt_flag>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8001d8a:	f000 f82b 	bl	8001de4 <task_button_press_interrupt_flag_clear>
        while (g_task_led_ctrl.pause_set)
 8001d8e:	e002      	b.n	8001d96 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 fdf1 	bl	8002978 <osDelay>
        while (g_task_led_ctrl.pause_set)
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <task_button_press_check_interrupts+0xac>)
 8001d98:	79db      	ldrb	r3, [r3, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f8      	bne.n	8001d90 <task_button_press_check_interrupts+0x5c>
 8001d9e:	e019      	b.n	8001dd4 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff ffad 	bl	8001d00 <task_button_press_ctrl_interrupt_flag>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8001dac:	f000 f81a 	bl	8001de4 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 8001db0:	f000 fb6a 	bl	8002488 <task_led_ctrl_color_red_hex>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8001dbc:	f000 fb8c 	bl	80024d8 <task_led_ctrl_color_green_hex>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8001dc8:	f000 fbae 	bl	8002528 <task_led_ctrl_color_blue_hex>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000084 	.word	0x20000084

08001de4 <task_button_press_interrupt_flag_clear>:
 * @brief  	Clear global flag indicating that an interrupt occurred.
 * @param   void
 * @return  void
 */
void task_button_press_interrupt_flag_clear(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
    g_task_led_ctrl.interrupt_set = false;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <task_button_press_interrupt_flag_clear+0x14>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	719a      	strb	r2, [r3, #6]
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000084 	.word	0x20000084

08001dfc <task_button_press_major_state_change>:
 * @brief  	Check if a major state change was intiated
 * @param   void
 * @return  bool: true if major state change, else false
 */
bool task_button_press_major_state_change(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <task_button_press_major_state_change+0x14>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000170 	.word	0x20000170

08001e14 <task_button_press>:
 * @brief   Task to control all button press action
 * @param   *arguments: UNUSED!!
 * @return  void
 */
void task_button_press(void *argument)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	gpio_specific_pin_e button_pin;
    uint32_t button_pressed_bit = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
    IRQn_Type irq_type = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
    board_init_push_buttons_e pushed_button = NUM_PUSH_BUTTONS;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	737b      	strb	r3, [r7, #13]
    while (1)
    {
    	// wait for task notification from button interrupt.
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	f107 0208 	add.w	r2, r7, #8
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e36:	2000      	movs	r0, #0
 8001e38:	f002 fa4a 	bl	80042d0 <xTaskNotifyWait>
        // button_pressed_bit is passed through notification.  Convert to the button pressed enum.
        pushed_button = (board_init_push_buttons_e) button_pressed_bit;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	737b      	strb	r3, [r7, #13]
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(gpio_config_port_lookup(GPIO_PIOB_INT_LVL_EN), gpio_config_pin_lookup(GPIO_PIOB_INT_LVL_EN), GPIO_PIN_RESET);
 8001e40:	2010      	movs	r0, #16
 8001e42:	f007 f931 	bl	80090a8 <gpio_config_port_lookup>
 8001e46:	4604      	mov	r4, r0
 8001e48:	2010      	movs	r0, #16
 8001e4a:	f007 f93f 	bl	80090cc <gpio_config_pin_lookup>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4620      	mov	r0, r4
 8001e56:	f004 f923 	bl	80060a0 <HAL_GPIO_WritePin>
        osDelay(700);
 8001e5a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001e5e:	f000 fd8b 	bl	8002978 <osDelay>
        HAL_GPIO_WritePin(gpio_config_port_lookup(GPIO_PIOB_INT_LVL_EN), gpio_config_pin_lookup(GPIO_PIOB_INT_LVL_EN), GPIO_PIN_SET);
 8001e62:	2010      	movs	r0, #16
 8001e64:	f007 f920 	bl	80090a8 <gpio_config_port_lookup>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	2010      	movs	r0, #16
 8001e6c:	f007 f92e 	bl	80090cc <gpio_config_pin_lookup>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2201      	movs	r2, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	4620      	mov	r0, r4
 8001e78:	f004 f912 	bl	80060a0 <HAL_GPIO_WritePin>
#endif
        // get the pin for button pressed
        switch (pushed_button)
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d816      	bhi.n	8001eb0 <task_button_press+0x9c>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <task_button_press+0x74>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001e9f 	.word	0x08001e9f
 8001e90:	08001ea5 	.word	0x08001ea5
 8001e94:	08001eab 	.word	0x08001eab
        {
        	case PUSH_BUTTON_A: button_pin = GPIO_PIN_PUSH_BUTTON_A; break;
 8001e98:	2325      	movs	r3, #37	; 0x25
 8001e9a:	75fb      	strb	r3, [r7, #23]
 8001e9c:	e009      	b.n	8001eb2 <task_button_press+0x9e>
        	case PUSH_BUTTON_B: button_pin = GPIO_PIN_PUSH_BUTTON_B; break;
 8001e9e:	232d      	movs	r3, #45	; 0x2d
 8001ea0:	75fb      	strb	r3, [r7, #23]
 8001ea2:	e006      	b.n	8001eb2 <task_button_press+0x9e>
        	case PUSH_BUTTON_C: button_pin = GPIO_PIN_PUSH_BUTTON_C; break;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]
 8001ea8:	e003      	b.n	8001eb2 <task_button_press+0x9e>
			case PUSH_BUTTON_D: button_pin = GPIO_PIN_PUSH_BUTTON_D; break;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	75fb      	strb	r3, [r7, #23]
 8001eae:	e000      	b.n	8001eb2 <task_button_press+0x9e>
			default: break;
 8001eb0:	bf00      	nop
        }
        // wait for push button to be released
		while (gpio_access_hal_input_is_low(button_pin))
 8001eb2:	e009      	b.n	8001ec8 <task_button_press+0xb4>
		{
			// record the current timestamp every 100 ms while waiting for this bitch to go high
    		g_button_press_timestamp[pushed_button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8001eb4:	7b7c      	ldrb	r4, [r7, #13]
 8001eb6:	f001 fe47 	bl	8003b48 <xTaskGetTickCountFromISR>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a7c      	ldr	r2, [pc, #496]	; (80020b0 <task_button_press+0x29c>)
 8001ebe:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    		osDelay(100);
 8001ec2:	2064      	movs	r0, #100	; 0x64
 8001ec4:	f000 fd58 	bl	8002978 <osDelay>
		while (gpio_access_hal_input_is_low(button_pin))
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f007 f8c6 	bl	800905c <gpio_access_hal_input_is_low>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ee      	bne.n	8001eb4 <task_button_press+0xa0>
		}
        // set flag to signal that a button interrupt was received!
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(pushed_button));
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fed7 	bl	8001c8c <task_led_ctrl_button_to_isr>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fef7 	bl	8001cd4 <task_button_press_ctrl_set_interrupt_flag>
        // check if the button was held down longer than SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <task_button_press+0x29c>)
 8001eee:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
        				g_button_press_timestamp[pushed_button][TIMESTAMP_PREVIOUS]))
 8001ef2:	7b7b      	ldrb	r3, [r7, #13]
 8001ef4:	496e      	ldr	r1, [pc, #440]	; (80020b0 <task_button_press+0x29c>)
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	685b      	ldr	r3, [r3, #4]
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001efc:	1ad3      	subs	r3, r2, r3
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d971      	bls.n	8001fea <task_button_press+0x1d6>
        {
        	// major state change initiated. Special action occurs below.
            task_button_press_major_change = true;
 8001f06:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <task_button_press+0x2a0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
            switch (pushed_button)
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d841      	bhi.n	8001f96 <task_button_press+0x182>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <task_button_press+0x104>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f43 	.word	0x08001f43
 8001f20:	08001f5f 	.word	0x08001f5f
 8001f24:	08001f79 	.word	0x08001f79
            {
                case PUSH_BUTTON_A:
                	// `A` button is speed.  Reset the speed to the default value.
                    g_a_ok_count++;
 8001f28:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <task_button_press+0x2a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a62      	ldr	r2, [pc, #392]	; (80020b8 <task_button_press+0x2a4>)
 8001f30:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8001f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f36:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_speed_reset();
 8001f3c:	f000 fb94 	bl	8002668 <task_led_ctrl_speed_reset>
                break;
 8001f40:	e02a      	b.n	8001f98 <task_button_press+0x184>
                case PUSH_BUTTON_B:
                	// `B` button is animation.  Reset the iteration count and also reset the master state to demo!
                    g_b_ok_count++;
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <task_button_press+0x2a8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <task_button_press+0x2a8>)
 8001f4a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8001f4c:	23ff      	movs	r3, #255	; 0xff
 8001f4e:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8001f50:	2328      	movs	r3, #40	; 0x28
 8001f52:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_animate_iteration_reset();
 8001f54:	f000 fb94 	bl	8002680 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8001f58:	f000 fbbc 	bl	80026d4 <task_led_ctrl_animate_state_demo>
                break;
 8001f5c:	e01c      	b.n	8001f98 <task_button_press+0x184>
                case PUSH_BUTTON_C:
                	// `C` button is color.  Reset the color master state back to demo mode.
                    g_c_ok_count++;
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <task_button_press+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a56      	ldr	r2, [pc, #344]	; (80020c0 <task_button_press+0x2ac>)
 8001f66:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8001f68:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001f6c:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8001f6e:	2317      	movs	r3, #23
 8001f70:	73fb      	strb	r3, [r7, #15]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8001f72:	f000 fa3d 	bl	80023f0 <task_led_ctrl_color_state_demo>
                break;
 8001f76:	e00f      	b.n	8001f98 <task_button_press+0x184>
                case PUSH_BUTTON_D:
                	// `D` button is brightness.  Adjust the brightness and also clear pause if for some reason we are paused.
                    task_led_ctrl_brightness_adjust();
 8001f78:	f000 f9d4 	bl	8002324 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8001f7c:	f000 fa02 	bl	8002384 <task_led_ctrl_clear_pause>
                    g_d_ok_count++;
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <task_button_press+0x2b0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a4f      	ldr	r2, [pc, #316]	; (80020c4 <task_button_press+0x2b0>)
 8001f88:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8001f8a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001f8e:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8001f90:	2306      	movs	r3, #6
 8001f92:	73fb      	strb	r3, [r7, #15]
                break;
 8001f94:	e000      	b.n	8001f98 <task_button_press+0x184>
                default:
                break;
 8001f96:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73bb      	strb	r3, [r7, #14]
 8001f9c:	e012      	b.n	8001fc4 <task_button_press+0x1b0>
            {
            	// flash the LEDs on the sign signalling that a master state change was made!
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, color);
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	2007      	movs	r0, #7
 8001fa2:	f7fe ff2b 	bl	8000dfc <animate_led_solid_custom_color>
                osDelay(500);
 8001fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001faa:	f000 fce5 	bl	8002978 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2007      	movs	r0, #7
 8001fb2:	f7fe ff23 	bl	8000dfc <animate_led_solid_custom_color>
                osDelay(500);
 8001fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fba:	f000 fcdd 	bl	8002978 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73bb      	strb	r3, [r7, #14]
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d9e9      	bls.n	8001f9e <task_button_press+0x18a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2118      	movs	r1, #24
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fc0d 	bl	80057f2 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fc24 	bl	800582a <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <task_button_press+0x2a0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e720      	b.n	8001e2c <task_button_press+0x18>
        }
        else
        {
        	// simple button press.  No master state change here!
            switch (pushed_button)
 8001fea:	7b7b      	ldrb	r3, [r7, #13]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d85d      	bhi.n	80020ac <task_button_press+0x298>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <task_button_press+0x1e4>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002009 	.word	0x08002009
 8001ffc:	08002029 	.word	0x08002029
 8002000:	0800205d 	.word	0x0800205d
 8002004:	0800208d 	.word	0x0800208d
            {
                case PUSH_BUTTON_A:
                	// A is speed.  Adjust it!
                    g_a_ok_count++;
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <task_button_press+0x2a4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <task_button_press+0x2a4>)
 8002010:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8002012:	f000 fb11 	bl	8002638 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2118      	movs	r1, #24
 800201a:	2008      	movs	r0, #8
 800201c:	f003 fbe9 	bl	80057f2 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8002020:	2008      	movs	r0, #8
 8002022:	f003 fc02 	bl	800582a <HAL_NVIC_EnableIRQ>
                break;
 8002026:	e042      	b.n	80020ae <task_button_press+0x29a>
                case PUSH_BUTTON_B:
                	// B is state.  Adjust it!
                    g_b_ok_count++;
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <task_button_press+0x2a8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <task_button_press+0x2a8>)
 8002030:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8002032:	f000 fb75 	bl	8002720 <task_led_ctrl_animate_state>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <task_button_press+0x22e>
                    {
                    	// if master state is demo then change to fixed master state!
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 800203c:	f000 fb5c 	bl	80026f8 <task_led_ctrl_animate_state_fixed>
 8002040:	e003      	b.n	800204a <task_button_press+0x236>
                    }
                    else
                    {
                    	// reset animation state count and adjust the state
                        task_led_ctrl_animate_iteration_reset();
 8002042:	f000 fb1d 	bl	8002680 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8002046:	f000 fb27 	bl	8002698 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2118      	movs	r1, #24
 800204e:	2028      	movs	r0, #40	; 0x28
 8002050:	f003 fbcf 	bl	80057f2 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002054:	2028      	movs	r0, #40	; 0x28
 8002056:	f003 fbe8 	bl	800582a <HAL_NVIC_EnableIRQ>
                break;
 800205a:	e028      	b.n	80020ae <task_button_press+0x29a>
                case PUSH_BUTTON_C:
                	// C is color.  Adjust it!
                    g_c_ok_count++;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <task_button_press+0x2ac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <task_button_press+0x2ac>)
 8002064:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8002066:	f000 f9b7 	bl	80023d8 <task_led_ctrl_color_state>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <task_button_press+0x262>
                    {
                    	// if master color state is demo then change to fixed master state!
                        task_led_ctrl_color_state_fixed();
 8002070:	f000 f9ca 	bl	8002408 <task_led_ctrl_color_state_fixed>
 8002074:	e001      	b.n	800207a <task_button_press+0x266>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002076:	f000 f9d7 	bl	8002428 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2118      	movs	r1, #24
 800207e:	2017      	movs	r0, #23
 8002080:	f003 fbb7 	bl	80057f2 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002084:	2017      	movs	r0, #23
 8002086:	f003 fbd0 	bl	800582a <HAL_NVIC_EnableIRQ>
                break;
 800208a:	e010      	b.n	80020ae <task_button_press+0x29a>
                case PUSH_BUTTON_D:
                	// D is pause.
                    g_d_ok_count++;
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <task_button_press+0x2b0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <task_button_press+0x2b0>)
 8002094:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002096:	f000 f981 	bl	800239c <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2118      	movs	r1, #24
 800209e:	2006      	movs	r0, #6
 80020a0:	f003 fba7 	bl	80057f2 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 80020a4:	2006      	movs	r0, #6
 80020a6:	f003 fbc0 	bl	800582a <HAL_NVIC_EnableIRQ>
                break;
 80020aa:	e000      	b.n	80020ae <task_button_press+0x29a>
                default:
                break;
 80020ac:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 80020ae:	e6bd      	b.n	8001e2c <task_button_press+0x18>
 80020b0:	20000150 	.word	0x20000150
 80020b4:	20000170 	.word	0x20000170
 80020b8:	20000178 	.word	0x20000178
 80020bc:	2000017c 	.word	0x2000017c
 80020c0:	20000180 	.word	0x20000180
 80020c4:	20000184 	.word	0x20000184

080020c8 <task_led_ctrl_adjust_parameters>:
uint16_t                g_delay_in_animation_ms = 100; // where applicable of course


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <task_led_ctrl_adjust_parameters+0x74>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <task_led_ctrl_adjust_parameters+0x74>)
 80020e2:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_task_led_ctrl.led_state_master)
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <task_led_ctrl_adjust_parameters+0x78>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11b      	bne.n	8002124 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <task_led_ctrl_adjust_parameters+0x32>
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f900 	bl	80022fa <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <task_led_ctrl_adjust_parameters+0x74>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	429a      	cmp	r2, r3
 8002102:	d10f      	bne.n	8002124 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_task_led_ctrl.led_state = (led_state_e) (g_task_led_ctrl.led_state + 1);
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <task_led_ctrl_adjust_parameters+0x78>)
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	3301      	adds	r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <task_led_ctrl_adjust_parameters+0x78>)
 800210e:	705a      	strb	r2, [r3, #1]
            if (NUM_LED_STATES == g_task_led_ctrl.led_state) g_task_led_ctrl.led_state = LED_STATE_FIRST;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <task_led_ctrl_adjust_parameters+0x78>)
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	2b0a      	cmp	r3, #10
 8002116:	d102      	bne.n	800211e <task_led_ctrl_adjust_parameters+0x56>
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <task_led_ctrl_adjust_parameters+0x78>)
 800211a:	2200      	movs	r2, #0
 800211c:	705a      	strb	r2, [r3, #1]
            g_animation_iterations = 0;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <task_led_ctrl_adjust_parameters+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002124:	f000 f958 	bl	80023d8 <task_led_ctrl_color_state>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <task_led_ctrl_adjust_parameters+0x6a>
 800212e:	f000 fa21 	bl	8002574 <task_led_ctrl_color_random>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000188 	.word	0x20000188
 8002140:	20000084 	.word	0x20000084

08002144 <task_led_ctrl_strip>:
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;


static void task_led_ctrl_strip(strip_num_e strip_num)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af02      	add	r7, sp, #8
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	if (1)//(flash_info_animation_enabled(g_task_led_ctrl.led_state))
	{
		switch(g_task_led_ctrl.led_state)
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <task_led_ctrl_strip+0x180>)
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	2b09      	cmp	r3, #9
 8002154:	f200 80b1 	bhi.w	80022ba <task_led_ctrl_strip+0x176>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <task_led_ctrl_strip+0x1c>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	0800229d 	.word	0x0800229d
 8002164:	08002189 	.word	0x08002189
 8002168:	080021a3 	.word	0x080021a3
 800216c:	080021dd 	.word	0x080021dd
 8002170:	080021f9 	.word	0x080021f9
 8002174:	08002211 	.word	0x08002211
 8002178:	08002227 	.word	0x08002227
 800217c:	08002245 	.word	0x08002245
 8002180:	0800225b 	.word	0x0800225b
 8002184:	08002277 	.word	0x08002277
		{
			case LED_STATE_WHITE_COLOR:

				animate_led_solid_custom_color((uint16_t)strip_num, COLOR_HEX_RED);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fe33 	bl	8000dfc <animate_led_solid_custom_color>
				//animate_led_solid_custom_color((uint16_t)STRIP_NUM_2, COLOR_HEX_WHITE);
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 8002196:	f241 3188 	movw	r1, #5000	; 0x1388
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff94 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 80021a0:	e08c      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_SOLID_COLOR:
				animate_led_solid_custom_color((uint16_t)strip_num, task_led_ctrl_color_hex());
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	b29c      	uxth	r4, r3
 80021a6:	f000 f95d 	bl	8002464 <task_led_ctrl_color_hex>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4619      	mov	r1, r3
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7fe fe24 	bl	8000dfc <animate_led_solid_custom_color>
				if (MASTER_LED_STATE_FIXED == g_task_led_ctrl.led_state_master)
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <task_led_ctrl_strip+0x180>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d109      	bne.n	80021d0 <task_led_ctrl_strip+0x8c>
				{
					task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 80021bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021c0:	2005      	movs	r0, #5
 80021c2:	f7ff ff81 	bl	80020c8 <task_led_ctrl_adjust_parameters>
					task_led_ctrl_delay(1000);
 80021c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ca:	f000 f896 	bl	80022fa <task_led_ctrl_delay>
				}
				else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
			break;
 80021ce:	e075      	b.n	80022bc <task_led_ctrl_strip+0x178>
				else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80021d0:	f241 3188 	movw	r1, #5000	; 0x1388
 80021d4:	2005      	movs	r0, #5
 80021d6:	f7ff ff77 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 80021da:	e06f      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_SPARKLE_NO_FILL:
				animate_led_turn_all_pixels_off();
 80021dc:	f7fe fe30 	bl	8000e40 <animate_led_turn_all_pixels_off>
				animate_led_sparkle_only_random_color(strip_num, false, 100);//random(0, 50));
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2264      	movs	r2, #100	; 0x64
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f849 	bl	8001280 <animate_led_sparkle_only_random_color>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2005      	movs	r0, #5
 80021f2:	f7ff ff69 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 80021f6:	e061      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_SPARKLE_FILL:
				animate_led_sparkle_only_random_color(strip_num, true, 100);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2264      	movs	r2, #100	; 0x64
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f83d 	bl	8001280 <animate_led_sparkle_only_random_color>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002206:	2100      	movs	r1, #0
 8002208:	200a      	movs	r0, #10
 800220a:	f7ff ff5d 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 800220e:	e055      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_RAINBOW_CYCLE:
				animate_led_rainbow_cycle(strip_num, 10);
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	b29b      	uxth	r3, r3
 8002214:	210a      	movs	r1, #10
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f8c4 	bl	80013a4 <animate_led_rainbow_cycle>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800221c:	2100      	movs	r1, #0
 800221e:	2005      	movs	r0, #5
 8002220:	f7ff ff52 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 8002224:	e04a      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_THEATER_CHASE:
				animate_led_theater_chase(strip_num, task_led_ctrl_color_hex(), 20);
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	b29c      	uxth	r4, r3
 800222a:	f000 f91b 	bl	8002464 <task_led_ctrl_color_hex>
 800222e:	4603      	mov	r3, r0
 8002230:	2214      	movs	r2, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff f943 	bl	80014c0 <animate_led_theater_chase>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800223a:	2100      	movs	r1, #0
 800223c:	200a      	movs	r0, #10
 800223e:	f7ff ff43 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 8002242:	e03b      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_THEATER_CHASE_RAINBOW:\
				animate_led_theater_chase_rainbow(strip_num, 20);
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	b29b      	uxth	r3, r3
 8002248:	2114      	movs	r1, #20
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f9da 	bl	8001604 <animate_led_theater_chase_rainbow>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002250:	2100      	movs	r1, #0
 8002252:	2002      	movs	r0, #2
 8002254:	f7ff ff38 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 8002258:	e030      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_FADE_IN_AND_OUT:
				animate_led_fade_in_fade_out((uint16_t)strip_num, task_led_ctrl_color_hex());
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	b29c      	uxth	r4, r3
 800225e:	f000 f901 	bl	8002464 <task_led_ctrl_color_hex>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe fe54 	bl	8000f14 <animate_led_fade_in_fade_out>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800226c:	2100      	movs	r1, #0
 800226e:	200a      	movs	r0, #10
 8002270:	f7ff ff2a 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 8002274:	e022      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_TWINKLE:
				animate_led_turn_all_pixels_off();
 8002276:	f7fe fde3 	bl	8000e40 <animate_led_turn_all_pixels_off>
				animate_led_twinkle(strip_num, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	b29c      	uxth	r4, r3
 800227e:	f000 f8f1 	bl	8002464 <task_led_ctrl_color_hex>
 8002282:	4601      	mov	r1, r0
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2314      	movs	r3, #20
 800228a:	220c      	movs	r2, #12
 800228c:	4620      	mov	r0, r4
 800228e:	f7fe ff83 	bl	8001198 <animate_led_twinkle>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002292:	2100      	movs	r1, #0
 8002294:	2005      	movs	r0, #5
 8002296:	f7ff ff17 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 800229a:	e00f      	b.n	80022bc <task_led_ctrl_strip+0x178>
			case LED_STATE_SPELL:
				animate_led_only_spell_word(strip_num, task_led_ctrl_color_hex(), 20);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	b29c      	uxth	r4, r3
 80022a0:	f000 f8e0 	bl	8002464 <task_led_ctrl_color_hex>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2214      	movs	r2, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7fe fdd2 	bl	8000e54 <animate_led_only_spell_word>
				task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80022b0:	2100      	movs	r1, #0
 80022b2:	200a      	movs	r0, #10
 80022b4:	f7ff ff08 	bl	80020c8 <task_led_ctrl_adjust_parameters>
			break;
 80022b8:	e000      	b.n	80022bc <task_led_ctrl_strip+0x178>
			default:
			break;
 80022ba:	bf00      	nop
		}
	}
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	20000084 	.word	0x20000084

080022c8 <task_led_ctrl>:

}


void task_led_ctrl(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	// need a custom init function to clear all these LEDs..  Right now the funcion
	// below
	animate_led_turn_all_pixels_off();
 80022d0:	f7fe fdb6 	bl	8000e40 <animate_led_turn_all_pixels_off>

	strip_num_e strip_num = STRIP_NONE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
	{
		case 1:
			strip_num = STRIP_NUM_1;
		break;
		case 2:
			strip_num = STRIP_NUM_1 | STRIP_NUM_2;
 80022d8:	2303      	movs	r3, #3
 80022da:	73fb      	strb	r3, [r7, #15]
		break;
 80022dc:	bf00      	nop
		default:
		break;
	}
	while (1)
	{
		while(task_button_press_major_state_change()) osDelay(100);
 80022de:	e002      	b.n	80022e6 <task_led_ctrl+0x1e>
 80022e0:	2064      	movs	r0, #100	; 0x64
 80022e2:	f000 fb49 	bl	8002978 <osDelay>
 80022e6:	f7ff fd89 	bl	8001dfc <task_button_press_major_state_change>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f7      	bne.n	80022e0 <task_led_ctrl+0x18>
		task_led_ctrl_strip(strip_num);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff26 	bl	8002144 <task_led_ctrl_strip>
		while(task_button_press_major_state_change()) osDelay(100);
 80022f8:	e7f5      	b.n	80022e6 <task_led_ctrl+0x1e>

080022fa <task_led_ctrl_delay>:
	}
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002306:	e002      	b.n	800230e <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fb35 	bl	8002978 <osDelay>
    while (ms_count++ < time_ms)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	60fa      	str	r2, [r7, #12]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d8f6      	bhi.n	8002308 <task_led_ctrl_delay+0xe>
    }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_task_led_ctrl.led_brightness) g_task_led_ctrl.led_brightness = LED_BRIGHTNESS_LAST;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <task_led_ctrl_brightness_adjust+0x58>)
 800232a:	78db      	ldrb	r3, [r3, #3]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <task_led_ctrl_brightness_adjust+0x14>
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <task_led_ctrl_brightness_adjust+0x58>)
 8002332:	2202      	movs	r2, #2
 8002334:	70da      	strb	r2, [r3, #3]
 8002336:	e005      	b.n	8002344 <task_led_ctrl_brightness_adjust+0x20>
    else g_task_led_ctrl.led_brightness = (led_brightness_e) (g_task_led_ctrl.led_brightness - 1);
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <task_led_ctrl_brightness_adjust+0x58>)
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	3b01      	subs	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <task_led_ctrl_brightness_adjust+0x58>)
 8002342:	70da      	strb	r2, [r3, #3]
    switch (g_task_led_ctrl.led_brightness)
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <task_led_ctrl_brightness_adjust+0x58>)
 8002346:	78db      	ldrb	r3, [r3, #3]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d010      	beq.n	800236e <task_led_ctrl_brightness_adjust+0x4a>
 800234c:	2b02      	cmp	r3, #2
 800234e:	dc13      	bgt.n	8002378 <task_led_ctrl_brightness_adjust+0x54>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <task_led_ctrl_brightness_adjust+0x36>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8002358:	e00e      	b.n	8002378 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 800235a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800235e:	f7fe fba5 	bl	8000aac <current_monitor_set>
        break;
 8002362:	e009      	b.n	8002378 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8002364:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002368:	f7fe fba0 	bl	8000aac <current_monitor_set>
        break;
 800236c:	e004      	b.n	8002378 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 800236e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002380 <task_led_ctrl_brightness_adjust+0x5c>
 8002372:	f7fe fb9b 	bl	8000aac <current_monitor_set>
        break;
 8002376:	bf00      	nop
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000084 	.word	0x20000084
 8002380:	3c23d70a 	.word	0x3c23d70a

08002384 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
    g_task_led_ctrl.pause_set = false;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <task_led_ctrl_clear_pause+0x14>)
 800238a:	2200      	movs	r2, #0
 800238c:	71da      	strb	r2, [r3, #7]
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20000084 	.word	0x20000084

0800239c <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_task_led_ctrl.pause_set = true;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <task_led_ctrl_pause+0x34>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <task_led_ctrl_pause+0x14>
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <task_led_ctrl_pause+0x38>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	71da      	strb	r2, [r3, #7]
 80023ae:	e002      	b.n	80023b6 <task_led_ctrl_pause+0x1a>
    else g_task_led_ctrl.pause_set = false;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <task_led_ctrl_pause+0x38>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	71da      	strb	r2, [r3, #7]
    flip_or_flop ^= 1;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <task_led_ctrl_pause+0x34>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f083 0301 	eor.w	r3, r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <task_led_ctrl_pause+0x34>)
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000008c 	.word	0x2000008c
 80023d4:	20000084 	.word	0x20000084

080023d8 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.led_color_master;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <task_led_ctrl_color_state+0x14>)
 80023de:	791b      	ldrb	r3, [r3, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000084 	.word	0x20000084

080023f0 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_color_master = MASTER_COLOR_STATE_DEMO;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <task_led_ctrl_color_state_demo+0x14>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	711a      	strb	r2, [r3, #4]
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000084 	.word	0x20000084

08002408 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_color_master = MASTER_COLOR_STATE_FIXED;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <task_led_ctrl_color_state_fixed+0x1c>)
 800240e:	2201      	movs	r2, #1
 8002410:	711a      	strb	r2, [r3, #4]
    g_task_led_ctrl.led_color = COLORS_FIRST;
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <task_led_ctrl_color_state_fixed+0x1c>)
 8002414:	2200      	movs	r2, #0
 8002416:	715a      	strb	r2, [r3, #5]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000084 	.word	0x20000084

08002428 <task_led_ctrl_color_adjust>:
    g_task_led_ctrl.led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
    bool return_val = false;
 800242e:	2300      	movs	r3, #0
 8002430:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_task_led_ctrl.led_color)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <task_led_ctrl_color_adjust+0x38>)
 8002434:	795b      	ldrb	r3, [r3, #5]
 8002436:	2b15      	cmp	r3, #21
 8002438:	d105      	bne.n	8002446 <task_led_ctrl_color_adjust+0x1e>
    {
        g_task_led_ctrl.led_color = COLORS_FIRST;
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <task_led_ctrl_color_adjust+0x38>)
 800243c:	2200      	movs	r2, #0
 800243e:	715a      	strb	r2, [r3, #5]
        return_val = true;
 8002440:	2301      	movs	r3, #1
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	e005      	b.n	8002452 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_task_led_ctrl.led_color = (all_colors_e) (g_task_led_ctrl.led_color + 1);
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <task_led_ctrl_color_adjust+0x38>)
 8002448:	795b      	ldrb	r3, [r3, #5]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <task_led_ctrl_color_adjust+0x38>)
 8002450:	715a      	strb	r2, [r3, #5]
    return return_val;
 8002452:	79fb      	ldrb	r3, [r7, #7]
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000084 	.word	0x20000084

08002464 <task_led_ctrl_color_hex>:
    return g_task_led_ctrl.led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_task_led_ctrl.led_color];
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <task_led_ctrl_color_hex+0x1c>)
 800246a:	795b      	ldrb	r3, [r3, #5]
 800246c:	461a      	mov	r2, r3
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <task_led_ctrl_color_hex+0x20>)
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000084 	.word	0x20000084
 8002484:	20000004 	.word	0x20000004

08002488 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	ed2d 8b02 	vpush	{d8}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_task_led_ctrl.led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <task_led_ctrl_color_red_hex+0x48>)
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	461a      	mov	r2, r3
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <task_led_ctrl_color_red_hex+0x4c>)
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80024aa:	f7fe fb21 	bl	8000af0 <current_monitor_ratio>
 80024ae:	eeb0 7a40 	vmov.f32	s14, s0
 80024b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80024be:	793b      	ldrb	r3, [r7, #4]
 80024c0:	b2db      	uxtb	r3, r3
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	ecbd 8b02 	vpop	{d8}
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000084 	.word	0x20000084
 80024d4:	20000004 	.word	0x20000004

080024d8 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	ed2d 8b02 	vpush	{d8}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_task_led_ctrl.led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <task_led_ctrl_color_green_hex+0x48>)
 80024e4:	795b      	ldrb	r3, [r3, #5]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <task_led_ctrl_color_green_hex+0x4c>)
 80024ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80024fa:	f7fe faf9 	bl	8000af0 <current_monitor_ratio>
 80024fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002502:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	edc7 7a01 	vstr	s15, [r7, #4]
 800250e:	793b      	ldrb	r3, [r7, #4]
 8002510:	b2db      	uxtb	r3, r3
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	ecbd 8b02 	vpop	{d8}
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000084 	.word	0x20000084
 8002524:	20000004 	.word	0x20000004

08002528 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	ed2d 8b02 	vpush	{d8}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_task_led_ctrl.led_color] & 0x0000FF) / current_monitor_ratio());
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <task_led_ctrl_color_blue_hex+0x44>)
 8002534:	795b      	ldrb	r3, [r3, #5]
 8002536:	461a      	mov	r2, r3
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <task_led_ctrl_color_blue_hex+0x48>)
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002548:	f7fe fad2 	bl	8000af0 <current_monitor_ratio>
 800254c:	eeb0 7a40 	vmov.f32	s14, s0
 8002550:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	edc7 7a01 	vstr	s15, [r7, #4]
 800255c:	793b      	ldrb	r3, [r7, #4]
 800255e:	b2db      	uxtb	r3, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	ecbd 8b02 	vpop	{d8}
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000084 	.word	0x20000084
 8002570:	20000004 	.word	0x20000004

08002574 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800257a:	2116      	movs	r1, #22
 800257c:	2000      	movs	r0, #0
 800257e:	f007 fabb 	bl	8009af8 <random_num>
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
    if (g_task_led_ctrl.led_color == color)
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <task_led_ctrl_color_random+0x48>)
 8002588:	795b      	ldrb	r3, [r3, #5]
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	429a      	cmp	r2, r3
 800258e:	d10e      	bne.n	80025ae <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_task_led_ctrl.led_color = (all_colors_e)(color - 1);
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2b15      	cmp	r3, #21
 8002594:	d105      	bne.n	80025a2 <task_led_ctrl_color_random+0x2e>
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	3b01      	subs	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <task_led_ctrl_color_random+0x48>)
 800259e:	715a      	strb	r2, [r3, #5]
    }
    else
    {
        g_task_led_ctrl.led_color = color;
    }
}
 80025a0:	e008      	b.n	80025b4 <task_led_ctrl_color_random+0x40>
        else g_task_led_ctrl.led_color = (all_colors_e)(color + 1);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	3301      	adds	r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <task_led_ctrl_color_random+0x48>)
 80025aa:	715a      	strb	r2, [r3, #5]
}
 80025ac:	e002      	b.n	80025b4 <task_led_ctrl_color_random+0x40>
        g_task_led_ctrl.led_color = color;
 80025ae:	4a03      	ldr	r2, [pc, #12]	; (80025bc <task_led_ctrl_color_random+0x48>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	7153      	strb	r3, [r2, #5]
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000084 	.word	0x20000084

080025c0 <task_led_ctrl_speed>:
    g_task_led_ctrl.led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
    switch(g_task_led_ctrl.led_speed)
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <task_led_ctrl_speed+0x6c>)
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d81f      	bhi.n	8002614 <task_led_ctrl_speed+0x54>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <task_led_ctrl_speed+0x1c>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080025f1 	.word	0x080025f1
 80025e0:	080025f7 	.word	0x080025f7
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	08002605 	.word	0x08002605
 80025ec:	0800260d 	.word	0x0800260d
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <task_led_ctrl_speed+0x70>)
 80025f2:	607b      	str	r3, [r7, #4]
        break;
 80025f4:	e00f      	b.n	8002616 <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <task_led_ctrl_speed+0x74>)
 80025f8:	607b      	str	r3, [r7, #4]
        break;
 80025fa:	e00c      	b.n	8002616 <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 80025fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002600:	607b      	str	r3, [r7, #4]
        break;
 8002602:	e008      	b.n	8002616 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8002604:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002608:	607b      	str	r3, [r7, #4]
        break;
 800260a:	e004      	b.n	8002616 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 800260c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002610:	607b      	str	r3, [r7, #4]
        break;
 8002612:	e000      	b.n	8002616 <task_led_ctrl_speed+0x56>
        default:
        break;
 8002614:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	ee07 3a90 	vmov	s15, r3
}
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000084 	.word	0x20000084
 8002630:	41200000 	.word	0x41200000
 8002634:	40a00000 	.word	0x40a00000

08002638 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_task_led_ctrl.led_speed) g_task_led_ctrl.led_speed = LED_SPEED_LAST;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <task_led_ctrl_speed_adjust+0x2c>)
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <task_led_ctrl_speed_adjust+0x14>
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <task_led_ctrl_speed_adjust+0x2c>)
 8002646:	2204      	movs	r2, #4
 8002648:	709a      	strb	r2, [r3, #2]
    else g_task_led_ctrl.led_speed = (led_speed_e) (g_task_led_ctrl.led_speed - 1);
}
 800264a:	e005      	b.n	8002658 <task_led_ctrl_speed_adjust+0x20>
    else g_task_led_ctrl.led_speed = (led_speed_e) (g_task_led_ctrl.led_speed - 1);
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <task_led_ctrl_speed_adjust+0x2c>)
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	3b01      	subs	r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <task_led_ctrl_speed_adjust+0x2c>)
 8002656:	709a      	strb	r2, [r3, #2]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000084 	.word	0x20000084

08002668 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_speed = LED_SPEED_1X;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <task_led_ctrl_speed_reset+0x14>)
 800266e:	2202      	movs	r2, #2
 8002670:	709a      	strb	r2, [r3, #2]
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	20000084 	.word	0x20000084

08002680 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <task_led_ctrl_animate_iteration_reset+0x14>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000188 	.word	0x20000188

08002698 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
    bool return_val = false;
 800269e:	2300      	movs	r3, #0
 80026a0:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_task_led_ctrl.led_state)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <task_led_ctrl_animate_adjust_state+0x38>)
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d105      	bne.n	80026b6 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_task_led_ctrl.led_state = LED_STATE_FIRST;
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <task_led_ctrl_animate_adjust_state+0x38>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	705a      	strb	r2, [r3, #1]
        return_val = true;
 80026b0:	2301      	movs	r3, #1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	e005      	b.n	80026c2 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_task_led_ctrl.led_state = (led_state_e) (g_task_led_ctrl.led_state + 1);
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <task_led_ctrl_animate_adjust_state+0x38>)
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <task_led_ctrl_animate_adjust_state+0x38>)
 80026c0:	705a      	strb	r2, [r3, #1]
    return return_val;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	20000084 	.word	0x20000084

080026d4 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_state_master = MASTER_LED_STATE_DEMO;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <task_led_ctrl_animate_state_demo+0x1c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <task_led_ctrl_animate_state_demo+0x20>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000084 	.word	0x20000084
 80026f4:	20000188 	.word	0x20000188

080026f8 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
    g_task_led_ctrl.led_state_master = MASTER_LED_STATE_FIXED;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <task_led_ctrl_animate_state_fixed+0x20>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    g_task_led_ctrl.led_state = LED_STATE_FIRST; // set first state
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <task_led_ctrl_animate_state_fixed+0x20>)
 8002704:	2200      	movs	r2, #0
 8002706:	705a      	strb	r2, [r3, #1]
    g_animation_iterations = 0;
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <task_led_ctrl_animate_state_fixed+0x24>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000084 	.word	0x20000084
 800271c:	20000188 	.word	0x20000188

08002720 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
    return g_task_led_ctrl.led_state_master;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <task_led_ctrl_animate_state+0x14>)
 8002726:	781b      	ldrb	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000084 	.word	0x20000084

08002738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	db0a      	blt.n	8002762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	490c      	ldr	r1, [pc, #48]	; (8002784 <__NVIC_SetPriority+0x4c>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	440b      	add	r3, r1
 800275c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002760:	e00a      	b.n	8002778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4908      	ldr	r1, [pc, #32]	; (8002788 <__NVIC_SetPriority+0x50>)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3b04      	subs	r3, #4
 8002770:	0112      	lsls	r2, r2, #4
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	440b      	add	r3, r1
 8002776:	761a      	strb	r2, [r3, #24]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Handler+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002794:	f001 fd10 	bl	80041b8 <xTaskGetSchedulerState>
 8002798:	4603      	mov	r3, r0
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800279e:	f002 fc2b 	bl	8004ff8 <xPortSysTickHandler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80027b0:	2100      	movs	r1, #0
 80027b2:	f06f 0004 	mvn.w	r0, #4
 80027b6:	f7ff ffbf 	bl	8002738 <__NVIC_SetPriority>
#endif
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c6:	f3ef 8305 	mrs	r3, IPSR
 80027ca:	603b      	str	r3, [r7, #0]
  return(result);
 80027cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027d2:	f06f 0305 	mvn.w	r3, #5
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	e00c      	b.n	80027f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <osKernelInitialize+0x44>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <osKernelInitialize+0x44>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	e002      	b.n	80027f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000018c 	.word	0x2000018c

08002808 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800280e:	f3ef 8305 	mrs	r3, IPSR
 8002812:	603b      	str	r3, [r7, #0]
  return(result);
 8002814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <osKernelStart+0x1a>
    stat = osErrorISR;
 800281a:	f06f 0305 	mvn.w	r3, #5
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	e010      	b.n	8002844 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <osKernelStart+0x48>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d109      	bne.n	800283e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800282a:	f7ff ffbf 	bl	80027ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <osKernelStart+0x48>)
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002834:	f001 f866 	bl	8003904 <vTaskStartScheduler>
      stat = osOK;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e002      	b.n	8002844 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002842:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000018c 	.word	0x2000018c

08002854 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b08e      	sub	sp, #56	; 0x38
 8002858:	af04      	add	r7, sp, #16
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002864:	f3ef 8305 	mrs	r3, IPSR
 8002868:	617b      	str	r3, [r7, #20]
  return(result);
 800286a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800286c:	2b00      	cmp	r3, #0
 800286e:	d17e      	bne.n	800296e <osThreadNew+0x11a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07b      	beq.n	800296e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800287a:	2318      	movs	r3, #24
 800287c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d045      	beq.n	800291a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <osThreadNew+0x48>
        name = attr->name;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <osThreadNew+0x6e>
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b38      	cmp	r3, #56	; 0x38
 80028b4:	d805      	bhi.n	80028c2 <osThreadNew+0x6e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <osThreadNew+0x72>
        return (NULL);
 80028c2:	2300      	movs	r3, #0
 80028c4:	e054      	b.n	8002970 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00e      	beq.n	80028fc <osThreadNew+0xa8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b5b      	cmp	r3, #91	; 0x5b
 80028e4:	d90a      	bls.n	80028fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <osThreadNew+0xa8>
        mem = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e010      	b.n	800291e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <osThreadNew+0xca>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <osThreadNew+0xca>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <osThreadNew+0xca>
          mem = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e001      	b.n	800291e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d110      	bne.n	8002946 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800292c:	9202      	str	r2, [sp, #8]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fe0c 	bl	8003558 <xTaskCreateStatic>
 8002940:	4603      	mov	r3, r0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e013      	b.n	800296e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d110      	bne.n	800296e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	b29a      	uxth	r2, r3
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fe57 	bl	8003612 <xTaskCreate>
 8002964:	4603      	mov	r3, r0
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <osThreadNew+0x11a>
            hTask = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800296e:	693b      	ldr	r3, [r7, #16]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002980:	f3ef 8305 	mrs	r3, IPSR
 8002984:	60bb      	str	r3, [r7, #8]
  return(result);
 8002986:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <osDelay+0x1c>
    stat = osErrorISR;
 800298c:	f06f 0305 	mvn.w	r3, #5
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e007      	b.n	80029a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 ff7c 	bl	800389c <vTaskDelay>
    }
  }

  return (stat);
 80029a4:	68fb      	ldr	r3, [r7, #12]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <vApplicationGetIdleTaskMemory+0x2c>)
 80029c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <vApplicationGetIdleTaskMemory+0x30>)
 80029c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000190 	.word	0x20000190
 80029e0:	200001ec 	.word	0x200001ec

080029e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80029f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <vApplicationGetTimerTaskMemory+0x30>)
 80029fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	200003ec 	.word	0x200003ec
 8002a14:	20000448 	.word	0x20000448

08002a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0208 	add.w	r2, r3, #8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0208 	add.w	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d103      	bne.n	8002ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e00c      	b.n	8002af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3308      	adds	r3, #8
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e002      	b.n	8002ae8 <vListInsert+0x2e>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d2f6      	bcs.n	8002ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6852      	ldr	r2, [r2, #4]
 8002b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d103      	bne.n	8002b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1e5a      	subs	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002baa:	f002 f993 	bl	8004ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	441a      	add	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d114      	bne.n	8002c2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01a      	beq.n	8002c3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 f915 	bl	8003e3c <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <xQueueGenericReset+0xcc>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	e009      	b.n	8002c3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3310      	adds	r3, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fef2 	bl	8002a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff feed 	bl	8002a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c3e:	f002 f979 	bl	8004f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <xQueueGenericCreateStatic+0x52>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <xQueueGenericCreateStatic+0x56>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueGenericCreateStatic+0x58>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	623b      	str	r3, [r7, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <xQueueGenericCreateStatic+0x7e>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x82>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <xQueueGenericCreateStatic+0x84>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	61fb      	str	r3, [r7, #28]
}
 8002cea:	bf00      	nop
 8002cec:	e7fe      	b.n	8002cec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cee:	2350      	movs	r3, #80	; 0x50
 8002cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b50      	cmp	r3, #80	; 0x50
 8002cf6:	d00a      	beq.n	8002d0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61bb      	str	r3, [r7, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f805 	bl	8002d40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e002      	b.n	8002d62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d6e:	2101      	movs	r1, #1
 8002d70:	69b8      	ldr	r0, [r7, #24]
 8002d72:	f7ff ff05 	bl	8002b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d96:	2300      	movs	r3, #0
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueGenericSend+0x32>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <xQueueGenericSend+0x40>
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <xQueueGenericSend+0x44>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <xQueueGenericSend+0x46>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <xQueueGenericSend+0x60>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002de4:	bf00      	nop
 8002de6:	e7fe      	b.n	8002de6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d103      	bne.n	8002df6 <xQueueGenericSend+0x6e>
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <xQueueGenericSend+0x72>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <xQueueGenericSend+0x74>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	623b      	str	r3, [r7, #32]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e16:	f001 f9cf 	bl	80041b8 <xTaskGetSchedulerState>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <xQueueGenericSend+0x9e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <xQueueGenericSend+0xa2>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueGenericSend+0xa4>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61fb      	str	r3, [r7, #28]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e46:	f002 f845 	bl	8004ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <xQueueGenericSend+0xd4>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d129      	bne.n	8002eb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e62:	f000 fa0b 	bl	800327c <prvCopyDataToQueue>
 8002e66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ffe1 	bl	8003e3c <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <xQueueGenericSend+0x1f8>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	e00a      	b.n	8002ea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <xQueueGenericSend+0x1f8>)
 8002e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ea8:	f002 f844 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e063      	b.n	8002f78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb6:	f002 f83d 	bl	8004f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e05c      	b.n	8002f78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f81b 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed2:	f002 f82f 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed6:	f000 fd7b 	bl	80039d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eda:	f001 fffb 	bl	8004ed4 <vPortEnterCritical>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eea:	d103      	bne.n	8002ef4 <xQueueGenericSend+0x16c>
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f00:	d103      	bne.n	8002f0a <xQueueGenericSend+0x182>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0a:	f002 f813 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0e:	1d3a      	adds	r2, r7, #4
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 f80a 	bl	8003f30 <xTaskCheckForTimeOut>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d124      	bne.n	8002f6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f24:	f000 faa2 	bl	800346c <prvIsQueueFull>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	3310      	adds	r3, #16
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff30 	bl	8003d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3e:	f000 fa2d 	bl	800339c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f42:	f000 fd53 	bl	80039ec <xTaskResumeAll>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f af7c 	bne.w	8002e46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <xQueueGenericSend+0x1f8>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	e772      	b.n	8002e46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f62:	f000 fa1b 	bl	800339c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f66:	f000 fd41 	bl	80039ec <xTaskResumeAll>
 8002f6a:	e76c      	b.n	8002e46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 fa15 	bl	800339c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f72:	f000 fd3b 	bl	80039ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3738      	adds	r7, #56	; 0x38
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b090      	sub	sp, #64	; 0x40
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGenericSendFromISR+0x3c>
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGenericSendFromISR+0x40>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGenericSendFromISR+0x42>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d103      	bne.n	8002fee <xQueueGenericSendFromISR+0x6a>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <xQueueGenericSendFromISR+0x6e>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueGenericSendFromISR+0x70>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	623b      	str	r3, [r7, #32]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800300e:	f002 f843 	bl	8005098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003012:	f3ef 8211 	mrs	r2, BASEPRI
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	61fa      	str	r2, [r7, #28]
 8003028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800302a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <xQueueGenericSendFromISR+0xbc>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d12f      	bne.n	80030a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003056:	f000 f911 	bl	800327c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800305a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003062:	d112      	bne.n	800308a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d016      	beq.n	800309a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	3324      	adds	r3, #36	; 0x24
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fee3 	bl	8003e3c <xTaskRemoveFromEventList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e007      	b.n	800309a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800308a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800308e:	3301      	adds	r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	b25a      	sxtb	r2, r3
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800309a:	2301      	movs	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800309e:	e001      	b.n	80030a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3740      	adds	r7, #64	; 0x40
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xQueueReceive+0x30>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	623b      	str	r3, [r7, #32]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <xQueueReceive+0x3e>
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <xQueueReceive+0x42>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueReceive+0x44>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueReceive+0x5e>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61fb      	str	r3, [r7, #28]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311a:	f001 f84d 	bl	80041b8 <xTaskGetSchedulerState>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <xQueueReceive+0x6e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <xQueueReceive+0x72>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <xQueueReceive+0x74>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <xQueueReceive+0x8e>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61bb      	str	r3, [r7, #24]
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800314a:	f001 fec3 	bl	8004ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01f      	beq.n	800319a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f8f7 	bl	8003350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	3310      	adds	r3, #16
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fe60 	bl	8003e3c <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <xQueueReceive+0x1bc>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003192:	f001 fecf 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 8003196:	2301      	movs	r3, #1
 8003198:	e069      	b.n	800326e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031a0:	f001 fec8 	bl	8004f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e062      	b.n	800326e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fea6 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031bc:	f001 feba 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c0:	f000 fc06 	bl	80039d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031c4:	f001 fe86 	bl	8004ed4 <vPortEnterCritical>
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d4:	d103      	bne.n	80031de <xQueueReceive+0x122>
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ea:	d103      	bne.n	80031f4 <xQueueReceive+0x138>
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f4:	f001 fe9e 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f8:	1d3a      	adds	r2, r7, #4
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe95 	bl	8003f30 <xTaskCheckForTimeOut>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d123      	bne.n	8003254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320e:	f000 f917 	bl	8003440 <prvIsQueueEmpty>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fdbb 	bl	8003d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003228:	f000 f8b8 	bl	800339c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800322c:	f000 fbde 	bl	80039ec <xTaskResumeAll>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d189      	bne.n	800314a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <xQueueReceive+0x1bc>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e780      	b.n	800314a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324a:	f000 f8a7 	bl	800339c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324e:	f000 fbcd 	bl	80039ec <xTaskResumeAll>
 8003252:	e77a      	b.n	800314a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003256:	f000 f8a1 	bl	800339c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800325a:	f000 fbc7 	bl	80039ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003260:	f000 f8ee 	bl	8003440 <prvIsQueueEmpty>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f43f af6f 	beq.w	800314a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800326c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800326e:	4618      	mov	r0, r3
 8003270:	3730      	adds	r7, #48	; 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d14d      	bne.n	800333e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ffa4 	bl	80041f4 <xTaskPriorityDisinherit>
 80032ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e043      	b.n	800333e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d119      	bne.n	80032f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6858      	ldr	r0, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f006 fedf 	bl	800a08a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	441a      	add	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d32b      	bcc.n	800333e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e026      	b.n	800333e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68d8      	ldr	r0, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	461a      	mov	r2, r3
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f006 fec5 	bl	800a08a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	425b      	negs	r3, r3
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	425b      	negs	r3, r3
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d105      	bne.n	800333e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3b01      	subs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d303      	bcc.n	8003384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	461a      	mov	r2, r3
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f006 fe7b 	bl	800a08a <memcpy>
	}
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033a4:	f001 fd96 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033b0:	e011      	b.n	80033d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3324      	adds	r3, #36	; 0x24
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd3c 	bl	8003e3c <xTaskRemoveFromEventList>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033ca:	f000 fe13 	bl	8003ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	dce9      	bgt.n	80033b2 <prvUnlockQueue+0x16>
 80033de:	e000      	b.n	80033e2 <prvUnlockQueue+0x46>
					break;
 80033e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fda3 	bl	8004f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ee:	f001 fd71 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033fa:	e011      	b.n	8003420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3310      	adds	r3, #16
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd17 	bl	8003e3c <xTaskRemoveFromEventList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003414:	f000 fdee 	bl	8003ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	3b01      	subs	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dce9      	bgt.n	80033fc <prvUnlockQueue+0x60>
 8003428:	e000      	b.n	800342c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800342a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003434:	f001 fd7e 	bl	8004f34 <vPortExitCritical>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003448:	f001 fd44 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e001      	b.n	800345e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800345e:	f001 fd69 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003474:	f001 fd2e 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	429a      	cmp	r2, r3
 8003482:	d102      	bne.n	800348a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e001      	b.n	800348e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800348e:	f001 fd51 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e014      	b.n	80034d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <vQueueAddToRegistry+0x50>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034b8:	490c      	ldr	r1, [pc, #48]	; (80034ec <vQueueAddToRegistry+0x50>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <vQueueAddToRegistry+0x50>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034ce:	e006      	b.n	80034de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	d9e7      	bls.n	80034ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000848 	.word	0x20000848

080034f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003500:	f001 fce8 	bl	8004ed4 <vPortEnterCritical>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350a:	b25b      	sxtb	r3, r3
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003510:	d103      	bne.n	800351a <vQueueWaitForMessageRestricted+0x2a>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003520:	b25b      	sxtb	r3, r3
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003526:	d103      	bne.n	8003530 <vQueueWaitForMessageRestricted+0x40>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003530:	f001 fd00 	bl	8004f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3324      	adds	r3, #36	; 0x24
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fc4d 	bl	8003de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff26 	bl	800339c <prvUnlockQueue>
	}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af04      	add	r7, sp, #16
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xTaskCreateStatic+0x2a>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	623b      	str	r3, [r7, #32]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xTaskCreateStatic+0x46>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61fb      	str	r3, [r7, #28]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800359e:	235c      	movs	r3, #92	; 0x5c
 80035a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b5c      	cmp	r3, #92	; 0x5c
 80035a6:	d00a      	beq.n	80035be <xTaskCreateStatic+0x66>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	61bb      	str	r3, [r7, #24]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01e      	beq.n	8003604 <xTaskCreateStatic+0xac>
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2202      	movs	r2, #2
 80035da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035de:	2300      	movs	r3, #0
 80035e0:	9303      	str	r3, [sp, #12]
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	9302      	str	r3, [sp, #8]
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f850 	bl	800369c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035fe:	f000 f8dd 	bl	80037bc <prvAddNewTaskToReadyList>
 8003602:	e001      	b.n	8003608 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003608:	697b      	ldr	r3, [r7, #20]
	}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003612:	b580      	push	{r7, lr}
 8003614:	b08c      	sub	sp, #48	; 0x30
 8003616:	af04      	add	r7, sp, #16
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fd76 	bl	8005118 <pvPortMalloc>
 800362c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003634:	205c      	movs	r0, #92	; 0x5c
 8003636:	f001 fd6f 	bl	8005118 <pvPortMalloc>
 800363a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
 8003648:	e005      	b.n	8003656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	f001 fe30 	bl	80052b0 <vPortFree>
 8003650:	e001      	b.n	8003656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d017      	beq.n	800368c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003664:	88fa      	ldrh	r2, [r7, #6]
 8003666:	2300      	movs	r3, #0
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	9302      	str	r3, [sp, #8]
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f80e 	bl	800369c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003680:	69f8      	ldr	r0, [r7, #28]
 8003682:	f000 f89b 	bl	80037bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e002      	b.n	8003692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003692:	69bb      	ldr	r3, [r7, #24]
	}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	461a      	mov	r2, r3
 80036b4:	21a5      	movs	r1, #165	; 0xa5
 80036b6:	f006 fc77 	bl	8009fa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036c4:	3b01      	subs	r3, #1
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f023 0307 	bic.w	r3, r3, #7
 80036d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	617b      	str	r3, [r7, #20]
}
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01f      	beq.n	800373a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e012      	b.n	8003726 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	7819      	ldrb	r1, [r3, #0]
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	3334      	adds	r3, #52	; 0x34
 8003710:	460a      	mov	r2, r1
 8003712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3301      	adds	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d9e9      	bls.n	8003700 <prvInitialiseNewTask+0x64>
 800372c:	e000      	b.n	8003730 <prvInitialiseNewTask+0x94>
			{
				break;
 800372e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	e003      	b.n	8003742 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b37      	cmp	r3, #55	; 0x37
 8003746:	d901      	bls.n	800374c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003748:	2337      	movs	r3, #55	; 0x37
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003756:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	2200      	movs	r2, #0
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f978 	bl	8002a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	3318      	adds	r3, #24
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff f973 	bl	8002a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	2200      	movs	r2, #0
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	69b8      	ldr	r0, [r7, #24]
 800379c:	f001 fa70 	bl	8004c80 <pxPortInitialiseStack>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c4:	f001 fb86 	bl	8004ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	4a2c      	ldr	r2, [pc, #176]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037da:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d110      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e8:	f000 fc28 	bl	800403c <prvInitialiseTaskLists>
 80037ec:	e00d      	b.n	800380a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d802      	bhi.n	800380a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 8003812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <prvAddNewTaskToReadyList+0xd4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d903      	bls.n	8003830 <prvAddNewTaskToReadyList+0x74>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <prvAddNewTaskToReadyList+0xd4>)
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <prvAddNewTaskToReadyList+0xd8>)
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7ff f913 	bl	8002a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800384c:	f001 fb72 	bl	8004f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	429a      	cmp	r2, r3
 8003864:	d207      	bcs.n	8003876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <prvAddNewTaskToReadyList+0xdc>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000d5c 	.word	0x20000d5c
 8003884:	20000888 	.word	0x20000888
 8003888:	20000d68 	.word	0x20000d68
 800388c:	20000d78 	.word	0x20000d78
 8003890:	20000d64 	.word	0x20000d64
 8003894:	2000088c 	.word	0x2000088c
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <vTaskDelay+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <vTaskDelay+0x30>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	60bb      	str	r3, [r7, #8]
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038cc:	f000 f880 	bl	80039d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fe32 	bl	800453c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d8:	f000 f888 	bl	80039ec <xTaskResumeAll>
 80038dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <vTaskDelay+0x64>)
 80038e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000d84 	.word	0x20000d84
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003912:	463a      	mov	r2, r7
 8003914:	1d39      	adds	r1, r7, #4
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f848 	bl	80029b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	460a      	mov	r2, r1
 8003932:	4921      	ldr	r1, [pc, #132]	; (80039b8 <vTaskStartScheduler+0xb4>)
 8003934:	4821      	ldr	r0, [pc, #132]	; (80039bc <vTaskStartScheduler+0xb8>)
 8003936:	f7ff fe0f 	bl	8003558 <xTaskCreateStatic>
 800393a:	4603      	mov	r3, r0
 800393c:	4a20      	ldr	r2, [pc, #128]	; (80039c0 <vTaskStartScheduler+0xbc>)
 800393e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003940:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <vTaskStartScheduler+0xbc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e001      	b.n	8003952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003958:	f000 fe44 	bl	80045e4 <xTimerCreateTimerTask>
 800395c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d116      	bne.n	8003992 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	613b      	str	r3, [r7, #16]
}
 8003976:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <vTaskStartScheduler+0xc0>)
 800397a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800397e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <vTaskStartScheduler+0xc4>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <vTaskStartScheduler+0xc8>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800398c:	f001 fa00 	bl	8004d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003990:	e00e      	b.n	80039b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003998:	d10a      	bne.n	80039b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <vTaskStartScheduler+0xaa>
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	0800acac 	.word	0x0800acac
 80039bc:	0800400d 	.word	0x0800400d
 80039c0:	20000d80 	.word	0x20000d80
 80039c4:	20000d7c 	.word	0x20000d7c
 80039c8:	20000d68 	.word	0x20000d68
 80039cc:	20000d60 	.word	0x20000d60

080039d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <vTaskSuspendAll+0x18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <vTaskSuspendAll+0x18>)
 80039dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000d84 	.word	0x20000d84

080039ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039fa:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <xTaskResumeAll+0x118>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	603b      	str	r3, [r7, #0]
}
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a18:	f001 fa5c 	bl	8004ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <xTaskResumeAll+0x118>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <xTaskResumeAll+0x118>)
 8003a24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <xTaskResumeAll+0x118>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d162      	bne.n	8003af4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a2e:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <xTaskResumeAll+0x11c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d05e      	beq.n	8003af4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a36:	e02f      	b.n	8003a98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <xTaskResumeAll+0x120>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3318      	adds	r3, #24
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f871 	bl	8002b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f86c 	bl	8002b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <xTaskResumeAll+0x124>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d903      	bls.n	8003a68 <xTaskResumeAll+0x7c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <xTaskResumeAll+0x124>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <xTaskResumeAll+0x128>)
 8003a76:	441a      	add	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f7fe fff7 	bl	8002a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <xTaskResumeAll+0x12c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <xTaskResumeAll+0x130>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a98:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <xTaskResumeAll+0x120>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1cb      	bne.n	8003a38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aa6:	f000 fb67 	bl	8004178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <xTaskResumeAll+0x134>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d010      	beq.n	8003ad8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ab6:	f000 f859 	bl	8003b6c <xTaskIncrementTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <xTaskResumeAll+0x130>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f1      	bne.n	8003ab6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <xTaskResumeAll+0x134>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <xTaskResumeAll+0x130>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <xTaskResumeAll+0x138>)
 8003ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003af4:	f001 fa1e 	bl	8004f34 <vPortExitCritical>

	return xAlreadyYielded;
 8003af8:	68bb      	ldr	r3, [r7, #8]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000d84 	.word	0x20000d84
 8003b08:	20000d5c 	.word	0x20000d5c
 8003b0c:	20000d1c 	.word	0x20000d1c
 8003b10:	20000d64 	.word	0x20000d64
 8003b14:	2000088c 	.word	0x2000088c
 8003b18:	20000888 	.word	0x20000888
 8003b1c:	20000d70 	.word	0x20000d70
 8003b20:	20000d6c 	.word	0x20000d6c
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <xTaskGetTickCount+0x1c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b34:	687b      	ldr	r3, [r7, #4]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000d60 	.word	0x20000d60

08003b48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b4e:	f001 faa3 	bl	8005098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <xTaskGetTickCountFromISR+0x20>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b5c:	683b      	ldr	r3, [r7, #0]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000d60 	.word	0x20000d60

08003b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b76:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <xTaskIncrementTick+0x148>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 808f 	bne.w	8003c9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <xTaskIncrementTick+0x14c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <xTaskIncrementTick+0x14c>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d120      	bne.n	8003bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b94:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <xTaskIncrementTick+0x150>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	603b      	str	r3, [r7, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <xTaskIncrementTick+0x46>
 8003bb4:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <xTaskIncrementTick+0x150>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <xTaskIncrementTick+0x154>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <xTaskIncrementTick+0x150>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4a3f      	ldr	r2, [pc, #252]	; (8003cc0 <xTaskIncrementTick+0x154>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <xTaskIncrementTick+0x158>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a3d      	ldr	r2, [pc, #244]	; (8003cc4 <xTaskIncrementTick+0x158>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	f000 fad1 	bl	8004178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd6:	4b3c      	ldr	r3, [pc, #240]	; (8003cc8 <xTaskIncrementTick+0x15c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d349      	bcc.n	8003c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <xTaskIncrementTick+0x150>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <xTaskIncrementTick+0x15c>)
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bf0:	601a      	str	r2, [r3, #0]
					break;
 8003bf2:	e03f      	b.n	8003c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf4:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <xTaskIncrementTick+0x150>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d203      	bcs.n	8003c14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <xTaskIncrementTick+0x15c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c12:	e02f      	b.n	8003c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe ff87 	bl	8002b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe ff7e 	bl	8002b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <xTaskIncrementTick+0x160>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d903      	bls.n	8003c44 <xTaskIncrementTick+0xd8>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a22      	ldr	r2, [pc, #136]	; (8003ccc <xTaskIncrementTick+0x160>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <xTaskIncrementTick+0x164>)
 8003c52:	441a      	add	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7fe ff09 	bl	8002a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <xTaskIncrementTick+0x168>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3b8      	bcc.n	8003be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c72:	e7b5      	b.n	8003be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <xTaskIncrementTick+0x168>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	4915      	ldr	r1, [pc, #84]	; (8003cd0 <xTaskIncrementTick+0x164>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d901      	bls.n	8003c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <xTaskIncrementTick+0x16c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e004      	b.n	8003ca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <xTaskIncrementTick+0x170>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <xTaskIncrementTick+0x170>)
 8003ca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ca8:	697b      	ldr	r3, [r7, #20]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000d84 	.word	0x20000d84
 8003cb8:	20000d60 	.word	0x20000d60
 8003cbc:	20000d14 	.word	0x20000d14
 8003cc0:	20000d18 	.word	0x20000d18
 8003cc4:	20000d74 	.word	0x20000d74
 8003cc8:	20000d7c 	.word	0x20000d7c
 8003ccc:	20000d64 	.word	0x20000d64
 8003cd0:	2000088c 	.word	0x2000088c
 8003cd4:	20000888 	.word	0x20000888
 8003cd8:	20000d70 	.word	0x20000d70
 8003cdc:	20000d6c 	.word	0x20000d6c

08003ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <vTaskSwitchContext+0xa8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <vTaskSwitchContext+0xac>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cf4:	e041      	b.n	8003d7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <vTaskSwitchContext+0xac>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <vTaskSwitchContext+0xb0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e010      	b.n	8003d26 <vTaskSwitchContext+0x46>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	607b      	str	r3, [r7, #4]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <vTaskSwitchContext+0x3e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	491b      	ldr	r1, [pc, #108]	; (8003d94 <vTaskSwitchContext+0xb4>)
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0e4      	beq.n	8003d04 <vTaskSwitchContext+0x24>
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <vTaskSwitchContext+0xb4>)
 8003d46:	4413      	add	r3, r2
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d104      	bne.n	8003d6a <vTaskSwitchContext+0x8a>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <vTaskSwitchContext+0xb8>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <vTaskSwitchContext+0xb0>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000d84 	.word	0x20000d84
 8003d8c:	20000d70 	.word	0x20000d70
 8003d90:	20000d64 	.word	0x20000d64
 8003d94:	2000088c 	.word	0x2000088c
 8003d98:	20000888 	.word	0x20000888

08003d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <vTaskPlaceOnEventList+0x44>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fe75 	bl	8002aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	6838      	ldr	r0, [r7, #0]
 8003dd4:	f000 fbb2 	bl	800453c <prvAddCurrentTaskToDelayedList>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000888 	.word	0x20000888

08003de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3318      	adds	r3, #24
 8003e12:	4619      	mov	r1, r3
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7fe fe2c 	bl	8002a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f000 fb87 	bl	800453c <prvAddCurrentTaskToDelayedList>
	}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000888 	.word	0x20000888

08003e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fe5d 	bl	8002b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <xTaskRemoveFromEventList+0xb0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fe54 	bl	8002b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <xTaskRemoveFromEventList+0x5c>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <xTaskRemoveFromEventList+0xb8>)
 8003ea6:	441a      	add	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7fe fddf 	bl	8002a72 <vListInsertEnd>
 8003eb4:	e005      	b.n	8003ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	4619      	mov	r1, r3
 8003ebc:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <xTaskRemoveFromEventList+0xbc>)
 8003ebe:	f7fe fdd8 	bl	8002a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <xTaskRemoveFromEventList+0xc0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d905      	bls.n	8003edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <xTaskRemoveFromEventList+0xc4>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e001      	b.n	8003ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ee0:	697b      	ldr	r3, [r7, #20]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000d84 	.word	0x20000d84
 8003ef0:	20000d64 	.word	0x20000d64
 8003ef4:	2000088c 	.word	0x2000088c
 8003ef8:	20000d1c 	.word	0x20000d1c
 8003efc:	20000888 	.word	0x20000888
 8003f00:	20000d70 	.word	0x20000d70

08003f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <vTaskInternalSetTimeOutState+0x24>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <vTaskInternalSetTimeOutState+0x28>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20000d74 	.word	0x20000d74
 8003f2c:	20000d60 	.word	0x20000d60

08003f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	613b      	str	r3, [r7, #16]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	60fb      	str	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f72:	f000 ffaf 	bl	8004ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <xTaskCheckForTimeOut+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d102      	bne.n	8003f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e023      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <xTaskCheckForTimeOut+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d007      	beq.n	8003fb2 <xTaskCheckForTimeOut+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e015      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d20b      	bcs.n	8003fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff9b 	bl	8003f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e004      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f000 ffa9 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000d60 	.word	0x20000d60
 8003ff0:	20000d74 	.word	0x20000d74

08003ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <vTaskMissedYield+0x14>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	20000d70 	.word	0x20000d70

0800400c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004014:	f000 f852 	bl	80040bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <prvIdleTask+0x28>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d9f9      	bls.n	8004014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvIdleTask+0x2c>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004030:	e7f0      	b.n	8004014 <prvIdleTask+0x8>
 8004032:	bf00      	nop
 8004034:	2000088c 	.word	0x2000088c
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e00c      	b.n	8004062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <prvInitialiseTaskLists+0x60>)
 8004054:	4413      	add	r3, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fcde 	bl	8002a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b37      	cmp	r3, #55	; 0x37
 8004066:	d9ef      	bls.n	8004048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800406a:	f7fe fcd5 	bl	8002a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004070:	f7fe fcd2 	bl	8002a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x6c>)
 8004076:	f7fe fccf 	bl	8002a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <prvInitialiseTaskLists+0x70>)
 800407c:	f7fe fccc 	bl	8002a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x74>)
 8004082:	f7fe fcc9 	bl	8002a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvInitialiseTaskLists+0x78>)
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800408a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvInitialiseTaskLists+0x7c>)
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000088c 	.word	0x2000088c
 80040a0:	20000cec 	.word	0x20000cec
 80040a4:	20000d00 	.word	0x20000d00
 80040a8:	20000d1c 	.word	0x20000d1c
 80040ac:	20000d30 	.word	0x20000d30
 80040b0:	20000d48 	.word	0x20000d48
 80040b4:	20000d14 	.word	0x20000d14
 80040b8:	20000d18 	.word	0x20000d18

080040bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c2:	e019      	b.n	80040f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c4:	f000 ff06 	bl	8004ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <prvCheckTasksWaitingTermination+0x50>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fd29 	bl	8002b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ee:	f000 ff21 	bl	8004f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f810 	bl	8004118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e1      	bne.n	80040c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000d30 	.word	0x20000d30
 8004110:	20000d5c 	.word	0x20000d5c
 8004114:	20000d44 	.word	0x20000d44

08004118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004126:	2b00      	cmp	r3, #0
 8004128:	d108      	bne.n	800413c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f8be 	bl	80052b0 <vPortFree>
				vPortFree( pxTCB );
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f001 f8bb 	bl	80052b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800413a:	e018      	b.n	800416e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004142:	2b01      	cmp	r3, #1
 8004144:	d103      	bne.n	800414e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 f8b2 	bl	80052b0 <vPortFree>
	}
 800414c:	e00f      	b.n	800416e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004154:	2b02      	cmp	r3, #2
 8004156:	d00a      	beq.n	800416e <prvDeleteTCB+0x56>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <prvDeleteTCB+0x54>
	}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <prvResetNextTaskUnblockTime+0x38>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvResetNextTaskUnblockTime+0x3c>)
 800418a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800418e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004190:	e008      	b.n	80041a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <prvResetNextTaskUnblockTime+0x38>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <prvResetNextTaskUnblockTime+0x3c>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	20000d14 	.word	0x20000d14
 80041b4:	20000d7c 	.word	0x20000d7c

080041b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <xTaskGetSchedulerState+0x34>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041c6:	2301      	movs	r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	e008      	b.n	80041de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <xTaskGetSchedulerState+0x38>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041d4:	2302      	movs	r3, #2
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e001      	b.n	80041de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041de:	687b      	ldr	r3, [r7, #4]
	}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000d68 	.word	0x20000d68
 80041f0:	20000d84 	.word	0x20000d84

080041f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d056      	beq.n	80042b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <xTaskPriorityDisinherit+0xd0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d00a      	beq.n	800422a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	60bb      	str	r3, [r7, #8]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	1e5a      	subs	r2, r3, #1
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	429a      	cmp	r2, r3
 800425c:	d02c      	beq.n	80042b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d128      	bne.n	80042b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fc5e 	bl	8002b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <xTaskPriorityDisinherit+0xd4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d903      	bls.n	8004298 <xTaskPriorityDisinherit+0xa4>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <xTaskPriorityDisinherit+0xd4>)
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <xTaskPriorityDisinherit+0xd8>)
 80042a6:	441a      	add	r2, r3
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7fe fbdf 	bl	8002a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042b8:	697b      	ldr	r3, [r7, #20]
	}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000888 	.word	0x20000888
 80042c8:	20000d64 	.word	0x20000d64
 80042cc:	2000088c 	.word	0x2000088c

080042d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80042de:	f000 fdf9 	bl	8004ed4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <xTaskNotifyWait+0xac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d01a      	beq.n	8004326 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <xTaskNotifyWait+0xac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	43d2      	mvns	r2, r2
 80042fa:	400a      	ands	r2, r1
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80042fe:	4b1f      	ldr	r3, [pc, #124]	; (800437c <xTaskNotifyWait+0xac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800430e:	2101      	movs	r1, #1
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	f000 f913 	bl	800453c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <xTaskNotifyWait+0xb0>)
 8004318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004326:	f000 fe05 	bl	8004f34 <vPortExitCritical>

		taskENTER_CRITICAL();
 800432a:	f000 fdd3 	bl	8004ed4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <xTaskNotifyWait+0xac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xTaskNotifyWait+0xac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d002      	beq.n	8004352 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e008      	b.n	8004364 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <xTaskNotifyWait+0xac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	43d2      	mvns	r2, r2
 800435c:	400a      	ands	r2, r1
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004360:	2301      	movs	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <xTaskNotifyWait+0xac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800436e:	f000 fde1 	bl	8004f34 <vPortExitCritical>

		return xReturn;
 8004372:	697b      	ldr	r3, [r7, #20]
	}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000888 	.word	0x20000888
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004394:	2301      	movs	r3, #1
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b4:	f000 fe70 	bl	8005098 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80043bc:	f3ef 8211 	mrs	r2, BASEPRI
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	623a      	str	r2, [r7, #32]
 80043d2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80043d4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d828      	bhi.n	8004450 <xTaskGenericNotifyFromISR+0xcc>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <xTaskGenericNotifyFromISR+0x80>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004471 	.word	0x08004471
 8004408:	08004419 	.word	0x08004419
 800440c:	08004427 	.word	0x08004427
 8004410:	08004433 	.word	0x08004433
 8004414:	0800443b 	.word	0x0800443b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	431a      	orrs	r2, r3
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004424:	e027      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004430:	e021      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004438:	e01d      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800443a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800443e:	2b02      	cmp	r3, #2
 8004440:	d003      	beq.n	800444a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004448:	e015      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800444e:	e012      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d00c      	beq.n	8004474 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61bb      	str	r3, [r7, #24]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xTaskGenericNotifyFromISR+0xea>
					break;
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004474:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800447a:	2b01      	cmp	r3, #1
 800447c:	d146      	bne.n	800450c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	617b      	str	r3, [r7, #20]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <xTaskGenericNotifyFromISR+0x1a0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11d      	bne.n	80044e0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	3304      	adds	r3, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fb3f 	bl	8002b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <xTaskGenericNotifyFromISR+0x1a4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d903      	bls.n	80044c2 <xTaskGenericNotifyFromISR+0x13e>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <xTaskGenericNotifyFromISR+0x1a4>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a17      	ldr	r2, [pc, #92]	; (800452c <xTaskGenericNotifyFromISR+0x1a8>)
 80044d0:	441a      	add	r2, r3
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7fe faca 	bl	8002a72 <vListInsertEnd>
 80044de:	e005      	b.n	80044ec <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	3318      	adds	r3, #24
 80044e4:	4619      	mov	r1, r3
 80044e6:	4812      	ldr	r0, [pc, #72]	; (8004530 <xTaskGenericNotifyFromISR+0x1ac>)
 80044e8:	f7fe fac3 	bl	8002a72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <xTaskGenericNotifyFromISR+0x1b0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d908      	bls.n	800450c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <xTaskGenericNotifyFromISR+0x1b4>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f383 8811 	msr	BASEPRI, r3
}
 8004516:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800451a:	4618      	mov	r0, r3
 800451c:	3738      	adds	r7, #56	; 0x38
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000d84 	.word	0x20000d84
 8004528:	20000d64 	.word	0x20000d64
 800452c:	2000088c 	.word	0x2000088c
 8004530:	20000d1c 	.word	0x20000d1c
 8004534:	20000888 	.word	0x20000888
 8004538:	20000d70 	.word	0x20000d70

0800453c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe faea 	bl	8002b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455e:	d10a      	bne.n	8004576 <prvAddCurrentTaskToDelayedList+0x3a>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4819      	ldr	r0, [pc, #100]	; (80045d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004570:	f7fe fa7f 	bl	8002a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004574:	e026      	b.n	80045c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	429a      	cmp	r2, r3
 800458c:	d209      	bcs.n	80045a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fe fa8d 	bl	8002aba <vListInsert>
}
 80045a0:	e010      	b.n	80045c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f7fe fa83 	bl	8002aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d202      	bcs.n	80045c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000d60 	.word	0x20000d60
 80045d0:	20000888 	.word	0x20000888
 80045d4:	20000d48 	.word	0x20000d48
 80045d8:	20000d18 	.word	0x20000d18
 80045dc:	20000d14 	.word	0x20000d14
 80045e0:	20000d7c 	.word	0x20000d7c

080045e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045ee:	f000 fb07 	bl	8004c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <xTimerCreateTimerTask+0x80>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004602:	1d3a      	adds	r2, r7, #4
 8004604:	f107 0108 	add.w	r1, r7, #8
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f9e9 	bl	80029e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	9202      	str	r2, [sp, #8]
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	2302      	movs	r3, #2
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	460a      	mov	r2, r1
 8004624:	4910      	ldr	r1, [pc, #64]	; (8004668 <xTimerCreateTimerTask+0x84>)
 8004626:	4811      	ldr	r0, [pc, #68]	; (800466c <xTimerCreateTimerTask+0x88>)
 8004628:	f7fe ff96 	bl	8003558 <xTaskCreateStatic>
 800462c:	4603      	mov	r3, r0
 800462e:	4a10      	ldr	r2, [pc, #64]	; (8004670 <xTimerCreateTimerTask+0x8c>)
 8004630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <xTimerCreateTimerTask+0x8c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	613b      	str	r3, [r7, #16]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000db8 	.word	0x20000db8
 8004668:	0800acb4 	.word	0x0800acb4
 800466c:	080047a9 	.word	0x080047a9
 8004670:	20000dbc 	.word	0x20000dbc

08004674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <xTimerGenericCommand+0x98>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02a      	beq.n	8004700 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	dc18      	bgt.n	80046ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046bc:	f7ff fd7c 	bl	80041b8 <xTaskGetSchedulerState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d109      	bne.n	80046da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <xTimerGenericCommand+0x98>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f107 0110 	add.w	r1, r7, #16
 80046ce:	2300      	movs	r3, #0
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	f7fe fb59 	bl	8002d88 <xQueueGenericSend>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24
 80046d8:	e012      	b.n	8004700 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <xTimerGenericCommand+0x98>)
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f107 0110 	add.w	r1, r7, #16
 80046e2:	2300      	movs	r3, #0
 80046e4:	2200      	movs	r2, #0
 80046e6:	f7fe fb4f 	bl	8002d88 <xQueueGenericSend>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24
 80046ec:	e008      	b.n	8004700 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <xTimerGenericCommand+0x98>)
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f107 0110 	add.w	r1, r7, #16
 80046f6:	2300      	movs	r3, #0
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	f7fe fc43 	bl	8002f84 <xQueueGenericSendFromISR>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004702:	4618      	mov	r0, r3
 8004704:	3728      	adds	r7, #40	; 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000db8 	.word	0x20000db8

08004710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <prvProcessExpiredTimer+0x94>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe f9ff 	bl	8002b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d022      	beq.n	8004782 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	18d1      	adds	r1, r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	f000 f8d1 	bl	80048f0 <prvInsertTimerInActiveList>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	2100      	movs	r1, #0
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff88 	bl	8004674 <xTimerGenericCommand>
 8004764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d113      	bne.n	8004794 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	b2da      	uxtb	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	4798      	blx	r3
}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000db0 	.word	0x20000db0

080047a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047b0:	f107 0308 	add.w	r3, r7, #8
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f857 	bl	8004868 <prvGetNextExpireTime>
 80047ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4619      	mov	r1, r3
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f803 	bl	80047cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047c6:	f000 f8d5 	bl	8004974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ca:	e7f1      	b.n	80047b0 <prvTimerTask+0x8>

080047cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047d6:	f7ff f8fb 	bl	80039d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f866 	bl	80048b0 <prvSampleTimeNow>
 80047e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d130      	bne.n	800484e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <prvProcessTimerOrBlockTask+0x3c>
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d806      	bhi.n	8004808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047fa:	f7ff f8f7 	bl	80039ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff85 	bl	8004710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004806:	e024      	b.n	8004852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <prvProcessTimerOrBlockTask+0x90>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <prvProcessTimerOrBlockTask+0x50>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <prvProcessTimerOrBlockTask+0x52>
 800481c:	2300      	movs	r3, #0
 800481e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <prvProcessTimerOrBlockTask+0x94>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4619      	mov	r1, r3
 800482e:	f7fe fe5f 	bl	80034f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004832:	f7ff f8db 	bl	80039ec <xTaskResumeAll>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <prvProcessTimerOrBlockTask+0x98>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
}
 800484c:	e001      	b.n	8004852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800484e:	f7ff f8cd 	bl	80039ec <xTaskResumeAll>
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000db4 	.word	0x20000db4
 8004860:	20000db8 	.word	0x20000db8
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <prvGetNextExpireTime+0x44>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <prvGetNextExpireTime+0x16>
 800487a:	2201      	movs	r2, #1
 800487c:	e000      	b.n	8004880 <prvGetNextExpireTime+0x18>
 800487e:	2200      	movs	r2, #0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <prvGetNextExpireTime+0x44>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e001      	b.n	800489c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800489c:	68fb      	ldr	r3, [r7, #12]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000db0 	.word	0x20000db0

080048b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048b8:	f7ff f936 	bl	8003b28 <xTaskGetTickCount>
 80048bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <prvSampleTimeNow+0x3c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d205      	bcs.n	80048d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048c8:	f000 f936 	bl	8004b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e002      	b.n	80048da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <prvSampleTimeNow+0x3c>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048e0:	68fb      	ldr	r3, [r7, #12]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000dc0 	.word	0x20000dc0

080048f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d812      	bhi.n	800493c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	429a      	cmp	r2, r3
 8004922:	d302      	bcc.n	800492a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e01b      	b.n	8004962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <prvInsertTimerInActiveList+0x7c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fe f8c0 	bl	8002aba <vListInsert>
 800493a:	e012      	b.n	8004962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d206      	bcs.n	8004952 <prvInsertTimerInActiveList+0x62>
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e007      	b.n	8004962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <prvInsertTimerInActiveList+0x80>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fe f8ac 	bl	8002aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004962:	697b      	ldr	r3, [r7, #20]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000db4 	.word	0x20000db4
 8004970:	20000db0 	.word	0x20000db0

08004974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	; 0x38
 8004978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800497a:	e0ca      	b.n	8004b12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	da18      	bge.n	80049b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	3304      	adds	r3, #4
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	61fb      	str	r3, [r7, #28]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049aa:	6850      	ldr	r0, [r2, #4]
 80049ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ae:	6892      	ldr	r2, [r2, #8]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f2c0 80ab 	blt.w	8004b12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe f8ad 	bl	8002b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049d2:	463b      	mov	r3, r7
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff6b 	bl	80048b0 <prvSampleTimeNow>
 80049da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b09      	cmp	r3, #9
 80049e0:	f200 8096 	bhi.w	8004b10 <prvProcessReceivedCommands+0x19c>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <prvProcessReceivedCommands+0x78>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004a89 	.word	0x08004a89
 80049fc:	08004a9d 	.word	0x08004a9d
 8004a00:	08004ae7 	.word	0x08004ae7
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a15 	.word	0x08004a15
 8004a0c:	08004a89 	.word	0x08004a89
 8004a10:	08004a9d 	.word	0x08004a9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	18d1      	adds	r1, r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a34:	f7ff ff5c 	bl	80048f0 <prvInsertTimerInActiveList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d069      	beq.n	8004b12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05e      	beq.n	8004b12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	441a      	add	r2, r3
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	2100      	movs	r1, #0
 8004a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a66:	f7ff fe05 	bl	8004674 <xTimerGenericCommand>
 8004a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d14f      	bne.n	8004b12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	61bb      	str	r3, [r7, #24]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a9a:	e03a      	b.n	8004b12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	617b      	str	r3, [r7, #20]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	18d1      	adds	r1, r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae0:	f7ff ff06 	bl	80048f0 <prvInsertTimerInActiveList>
					break;
 8004ae4:	e015      	b.n	8004b12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d103      	bne.n	8004afc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f000 fbdb 	bl	80052b0 <vPortFree>
 8004afa:	e00a      	b.n	8004b12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b0e:	e000      	b.n	8004b12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <prvProcessReceivedCommands+0x1c0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1d39      	adds	r1, r7, #4
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe face 	bl	80030bc <xQueueReceive>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f af2a 	bne.w	800497c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3730      	adds	r7, #48	; 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000db8 	.word	0x20000db8

08004b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3e:	e048      	b.n	8004bd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd ffe7 	bl	8002b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02e      	beq.n	8004bd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d90e      	bls.n	8004ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b92:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fd ff8c 	bl	8002aba <vListInsert>
 8004ba2:	e016      	b.n	8004bd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	2100      	movs	r1, #0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fd60 	bl	8004674 <xTimerGenericCommand>
 8004bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	603b      	str	r3, [r7, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1b1      	bne.n	8004b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <prvSwitchTimerLists+0xc4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvSwitchTimerLists+0xc0>)
 8004be8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <prvSwitchTimerLists+0xc4>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000db0 	.word	0x20000db0
 8004bfc:	20000db4 	.word	0x20000db4

08004c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c06:	f000 f965 	bl	8004ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d120      	bne.n	8004c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c12:	4814      	ldr	r0, [pc, #80]	; (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c14:	f7fd ff00 	bl	8002a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c18:	4813      	ldr	r0, [pc, #76]	; (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c1a:	f7fd fefd 	bl	8002a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <prvCheckForValidListAndQueue+0x6c>)
 8004c20:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <prvCheckForValidListAndQueue+0x70>)
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <prvCheckForValidListAndQueue+0x74>)
 8004c30:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <prvCheckForValidListAndQueue+0x78>)
 8004c32:	2110      	movs	r1, #16
 8004c34:	200a      	movs	r0, #10
 8004c36:	f7fe f80b 	bl	8002c50 <xQueueGenericCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	490b      	ldr	r1, [pc, #44]	; (8004c7c <prvCheckForValidListAndQueue+0x7c>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fc24 	bl	800349c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c54:	f000 f96e 	bl	8004f34 <vPortExitCritical>
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000db8 	.word	0x20000db8
 8004c64:	20000d88 	.word	0x20000d88
 8004c68:	20000d9c 	.word	0x20000d9c
 8004c6c:	20000db0 	.word	0x20000db0
 8004c70:	20000db4 	.word	0x20000db4
 8004c74:	20000e64 	.word	0x20000e64
 8004c78:	20000dc4 	.word	0x20000dc4
 8004c7c:	0800acbc 	.word	0x0800acbc

08004c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b04      	subs	r3, #4
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <pxPortInitialiseStack+0x64>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b14      	subs	r3, #20
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f06f 0202 	mvn.w	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b20      	subs	r3, #32
 8004cd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	08004ce9 	.word	0x08004ce9

08004ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <prvTaskExitError+0x54>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfa:	d00a      	beq.n	8004d12 <prvTaskExitError+0x2a>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60fb      	str	r3, [r7, #12]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <prvTaskExitError+0x28>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
}
 8004d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d26:	bf00      	nop
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0fc      	beq.n	8004d28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20000090 	.word	0x20000090

08004d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	4770      	bx	lr
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst2>:
 8004d60:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d68:	4808      	ldr	r0, [pc, #32]	; (8004d8c <prvPortStartFirstTask+0x24>)
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f380 8808 	msr	MSP, r0
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8814 	msr	CONTROL, r0
 8004d7a:	b662      	cpsie	i
 8004d7c:	b661      	cpsie	f
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	df00      	svc	0
 8004d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d8a:	bf00      	nop
 8004d8c:	e000ed08 	.word	0xe000ed08

08004d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d96:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <xPortStartScheduler+0x120>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <xPortStartScheduler+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10a      	bne.n	8004db6 <xPortStartScheduler+0x26>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004db6:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <xPortStartScheduler+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <xPortStartScheduler+0x128>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10a      	bne.n	8004dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <xPortStartScheduler+0x12c>)
 8004dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <xPortStartScheduler+0x130>)
 8004dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e04:	e009      	b.n	8004e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d0ef      	beq.n	8004e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e26:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1c3 0307 	rsb	r3, r3, #7
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00a      	beq.n	8004e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60bb      	str	r3, [r7, #8]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <xPortStartScheduler+0x134>)
 8004e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <xPortStartScheduler+0x138>)
 8004e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e7e:	f000 f8dd 	bl	800503c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <xPortStartScheduler+0x13c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e88:	f000 f8fc 	bl	8005084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <xPortStartScheduler+0x140>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <xPortStartScheduler+0x140>)
 8004e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e98:	f7ff ff66 	bl	8004d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e9c:	f7fe ff20 	bl	8003ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8004ea0:	f7ff ff22 	bl	8004ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	410fc271 	.word	0x410fc271
 8004eb8:	410fc270 	.word	0x410fc270
 8004ebc:	e000e400 	.word	0xe000e400
 8004ec0:	20000eb4 	.word	0x20000eb4
 8004ec4:	20000eb8 	.word	0x20000eb8
 8004ec8:	e000ed20 	.word	0xe000ed20
 8004ecc:	20000090 	.word	0x20000090
 8004ed0:	e000ef34 	.word	0xe000ef34

08004ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
}
 8004eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <vPortEnterCritical+0x58>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10f      	bne.n	8004f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortEnterCritical+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	603b      	str	r3, [r7, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <vPortEnterCritical+0x4a>
	}
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000090 	.word	0x20000090
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <vPortExitCritical+0x50>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <vPortExitCritical+0x24>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <vPortExitCritical+0x50>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <vPortExitCritical+0x50>)
 8004f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <vPortExitCritical+0x50>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <vPortExitCritical+0x42>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f383 8811 	msr	BASEPRI, r3
}
 8004f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000090 	.word	0x20000090
	...

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f01e 0f10 	tst.w	lr, #16
 8004fa0:	bf08      	it	eq
 8004fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fb4:	f380 8811 	msr	BASEPRI, r0
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f7fe fe8e 	bl	8003ce0 <vTaskSwitchContext>
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f380 8811 	msr	BASEPRI, r0
 8004fcc:	bc09      	pop	{r0, r3}
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	f01e 0f10 	tst.w	lr, #16
 8004fda:	bf08      	it	eq
 8004fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fe0:	f380 8809 	msr	PSP, r0
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7fe fdab 	bl	8003b6c <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <xPortSysTickHandler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortSetupTimerInterrupt+0x38>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <vPortSetupTimerInterrupt+0x3c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <vPortSetupTimerInterrupt+0x40>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vPortSetupTimerInterrupt+0x44>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e010 	.word	0xe000e010
 8005074:	e000e018 	.word	0xe000e018
 8005078:	2000009c 	.word	0x2000009c
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	e000e014 	.word	0xe000e014

08005084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005094 <vPortEnableVFP+0x10>
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005092:	bf00      	nop
 8005094:	e000ed88 	.word	0xe000ed88

08005098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d914      	bls.n	80050d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <vPortValidateInterruptPriority+0x70>)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <vPortValidateInterruptPriority+0x74>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	7afa      	ldrb	r2, [r7, #11]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d20a      	bcs.n	80050d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <vPortValidateInterruptPriority+0x78>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <vPortValidateInterruptPriority+0x7c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d90a      	bls.n	80050fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	603b      	str	r3, [r7, #0]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <vPortValidateInterruptPriority+0x60>
	}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000e3f0 	.word	0xe000e3f0
 800510c:	20000eb4 	.word	0x20000eb4
 8005110:	e000ed0c 	.word	0xe000ed0c
 8005114:	20000eb8 	.word	0x20000eb8

08005118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005124:	f7fe fc54 	bl	80039d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005128:	4b5b      	ldr	r3, [pc, #364]	; (8005298 <pvPortMalloc+0x180>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005130:	f000 f920 	bl	8005374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005134:	4b59      	ldr	r3, [pc, #356]	; (800529c <pvPortMalloc+0x184>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 8093 	bne.w	8005268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01d      	beq.n	8005184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <pvPortMalloc+0x6c>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06e      	beq.n	8005268 <pvPortMalloc+0x150>
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <pvPortMalloc+0x188>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d869      	bhi.n	8005268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005194:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <pvPortMalloc+0x18c>)
 8005196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005198:	4b42      	ldr	r3, [pc, #264]	; (80052a4 <pvPortMalloc+0x18c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519e:	e004      	b.n	80051aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <pvPortMalloc+0xa4>
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f1      	bne.n	80051a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051bc:	4b36      	ldr	r3, [pc, #216]	; (8005298 <pvPortMalloc+0x180>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d050      	beq.n	8005268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2308      	movs	r3, #8
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d91f      	bls.n	8005228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <pvPortMalloc+0xf8>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	613b      	str	r3, [r7, #16]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f000 f908 	bl	8005438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <pvPortMalloc+0x188>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <pvPortMalloc+0x188>)
 8005234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <pvPortMalloc+0x188>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <pvPortMalloc+0x190>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d203      	bcs.n	800524a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <pvPortMalloc+0x188>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <pvPortMalloc+0x190>)
 8005248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <pvPortMalloc+0x184>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	431a      	orrs	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <pvPortMalloc+0x194>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a11      	ldr	r2, [pc, #68]	; (80052ac <pvPortMalloc+0x194>)
 8005266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005268:	f7fe fbc0 	bl	80039ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <pvPortMalloc+0x174>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <pvPortMalloc+0x172>
	return pvReturn;
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3728      	adds	r7, #40	; 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20001a7c 	.word	0x20001a7c
 800529c:	20001a90 	.word	0x20001a90
 80052a0:	20001a80 	.word	0x20001a80
 80052a4:	20001a74 	.word	0x20001a74
 80052a8:	20001a84 	.word	0x20001a84
 80052ac:	20001a88 	.word	0x20001a88

080052b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04d      	beq.n	800535e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052c2:	2308      	movs	r3, #8
 80052c4:	425b      	negs	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <vPortFree+0xb8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <vPortFree+0x44>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	60fb      	str	r3, [r7, #12]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <vPortFree+0x62>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60bb      	str	r3, [r7, #8]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <vPortFree+0xb8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01e      	beq.n	800535e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11a      	bne.n	800535e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <vPortFree+0xb8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005338:	f7fe fb4a 	bl	80039d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <vPortFree+0xbc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4413      	add	r3, r2
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <vPortFree+0xbc>)
 8005348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800534a:	6938      	ldr	r0, [r7, #16]
 800534c:	f000 f874 	bl	8005438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <vPortFree+0xc0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a06      	ldr	r2, [pc, #24]	; (8005370 <vPortFree+0xc0>)
 8005358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800535a:	f7fe fb47 	bl	80039ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20001a90 	.word	0x20001a90
 800536c:	20001a80 	.word	0x20001a80
 8005370:	20001a8c 	.word	0x20001a8c

08005374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800537a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800537e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005380:	4b27      	ldr	r3, [pc, #156]	; (8005420 <prvHeapInit+0xac>)
 8005382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3307      	adds	r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <prvHeapInit+0xac>)
 80053a4:	4413      	add	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <prvHeapInit+0xb0>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <prvHeapInit+0xb0>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053c0:	2208      	movs	r2, #8
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <prvHeapInit+0xb4>)
 80053d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <prvHeapInit+0xb4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <prvHeapInit+0xb4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvHeapInit+0xb4>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a0a      	ldr	r2, [pc, #40]	; (800542c <prvHeapInit+0xb8>)
 8005402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <prvHeapInit+0xbc>)
 800540a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <prvHeapInit+0xc0>)
 800540e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	20000ebc 	.word	0x20000ebc
 8005424:	20001a74 	.word	0x20001a74
 8005428:	20001a7c 	.word	0x20001a7c
 800542c:	20001a84 	.word	0x20001a84
 8005430:	20001a80 	.word	0x20001a80
 8005434:	20001a90 	.word	0x20001a90

08005438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005440:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <prvInsertBlockIntoFreeList+0xac>)
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e002      	b.n	800544c <prvInsertBlockIntoFreeList+0x14>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d8f7      	bhi.n	8005446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d108      	bne.n	800547a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d118      	bne.n	80054c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d00d      	beq.n	80054b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e008      	b.n	80054c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvInsertBlockIntoFreeList+0xb0>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e003      	b.n	80054c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d002      	beq.n	80054d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20001a74 	.word	0x20001a74
 80054e8:	20001a7c 	.word	0x20001a7c

080054ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f6:	2003      	movs	r0, #3
 80054f8:	f000 f970 	bl	80057dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054fc:	2000      	movs	r0, #0
 80054fe:	f000 f80d 	bl	800551c <HAL_InitTick>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	71fb      	strb	r3, [r7, #7]
 800550c:	e001      	b.n	8005512 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800550e:	f003 ff55 	bl	80093bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005512:	79fb      	ldrb	r3, [r7, #7]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005528:	4b17      	ldr	r3, [pc, #92]	; (8005588 <HAL_InitTick+0x6c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d023      	beq.n	8005578 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005530:	4b16      	ldr	r3, [pc, #88]	; (800558c <HAL_InitTick+0x70>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b14      	ldr	r3, [pc, #80]	; (8005588 <HAL_InitTick+0x6c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f98b 	bl	8005862 <HAL_SYSTICK_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d809      	bhi.n	800556c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005558:	2200      	movs	r2, #0
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005560:	f000 f947 	bl	80057f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <HAL_InitTick+0x74>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e007      	b.n	800557c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e004      	b.n	800557c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
 8005576:	e001      	b.n	800557c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000098 	.word	0x20000098
 800558c:	2000009c 	.word	0x2000009c
 8005590:	20000094 	.word	0x20000094

08005594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_GetTick+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20001a94 	.word	0x20001a94

080055ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055b4:	f7ff ffee 	bl	8005594 <HAL_GetTick>
 80055b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c4:	d005      	beq.n	80055d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_Delay+0x44>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055d2:	bf00      	nop
 80055d4:	f7ff ffde 	bl	8005594 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d8f7      	bhi.n	80055d4 <HAL_Delay+0x28>
  {
  }
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000098 	.word	0x20000098

080055f4 <__NVIC_SetPriorityGrouping>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <__NVIC_SetPriorityGrouping+0x44>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800561c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005626:	4a04      	ldr	r2, [pc, #16]	; (8005638 <__NVIC_SetPriorityGrouping+0x44>)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	60d3      	str	r3, [r2, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <__NVIC_GetPriorityGrouping>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <__NVIC_GetPriorityGrouping+0x18>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f003 0307 	and.w	r3, r3, #7
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000ed00 	.word	0xe000ed00

08005658 <__NVIC_EnableIRQ>:
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	db0b      	blt.n	8005682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f003 021f 	and.w	r2, r3, #31
 8005670:	4907      	ldr	r1, [pc, #28]	; (8005690 <__NVIC_EnableIRQ+0x38>)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	2001      	movs	r0, #1
 800567a:	fa00 f202 	lsl.w	r2, r0, r2
 800567e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000e100 	.word	0xe000e100

08005694 <__NVIC_DisableIRQ>:
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800569e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db12      	blt.n	80056cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	490a      	ldr	r1, [pc, #40]	; (80056d8 <__NVIC_DisableIRQ+0x44>)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2001      	movs	r0, #1
 80056b6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ba:	3320      	adds	r3, #32
 80056bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056c0:	f3bf 8f4f 	dsb	sy
}
 80056c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056c6:	f3bf 8f6f 	isb	sy
}
 80056ca:	bf00      	nop
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	e000e100 	.word	0xe000e100

080056dc <__NVIC_SetPriority>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	db0a      	blt.n	8005706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	490c      	ldr	r1, [pc, #48]	; (8005728 <__NVIC_SetPriority+0x4c>)
 80056f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	440b      	add	r3, r1
 8005700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005704:	e00a      	b.n	800571c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4908      	ldr	r1, [pc, #32]	; (800572c <__NVIC_SetPriority+0x50>)
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	3b04      	subs	r3, #4
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	440b      	add	r3, r1
 800571a:	761a      	strb	r2, [r3, #24]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000e100 	.word	0xe000e100
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f1c3 0307 	rsb	r3, r3, #7
 800574a:	2b04      	cmp	r3, #4
 800574c:	bf28      	it	cs
 800574e:	2304      	movcs	r3, #4
 8005750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3304      	adds	r3, #4
 8005756:	2b06      	cmp	r3, #6
 8005758:	d902      	bls.n	8005760 <NVIC_EncodePriority+0x30>
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3b03      	subs	r3, #3
 800575e:	e000      	b.n	8005762 <NVIC_EncodePriority+0x32>
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43da      	mvns	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	401a      	ands	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	fa01 f303 	lsl.w	r3, r1, r3
 8005782:	43d9      	mvns	r1, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	4313      	orrs	r3, r2
         );
}
 800578a:	4618      	mov	r0, r3
 800578c:	3724      	adds	r7, #36	; 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057a8:	d301      	bcc.n	80057ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057aa:	2301      	movs	r3, #1
 80057ac:	e00f      	b.n	80057ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <SysTick_Config+0x40>)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057b6:	210f      	movs	r1, #15
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057bc:	f7ff ff8e 	bl	80056dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <SysTick_Config+0x40>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <SysTick_Config+0x40>)
 80057c8:	2207      	movs	r2, #7
 80057ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	e000e010 	.word	0xe000e010

080057dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff05 	bl	80055f4 <__NVIC_SetPriorityGrouping>
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4603      	mov	r3, r0
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005804:	f7ff ff1a 	bl	800563c <__NVIC_GetPriorityGrouping>
 8005808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff ff8e 	bl	8005730 <NVIC_EncodePriority>
 8005814:	4602      	mov	r2, r0
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ff5d 	bl	80056dc <__NVIC_SetPriority>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff0d 	bl	8005658 <__NVIC_EnableIRQ>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff1d 	bl	8005694 <__NVIC_DisableIRQ>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff94 	bl	8005798 <SysTick_Config>
 8005870:	4603      	mov	r3, r0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e098      	b.n	80059c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <HAL_DMA_Init+0x150>)
 8005896:	429a      	cmp	r2, r3
 8005898:	d80f      	bhi.n	80058ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <HAL_DMA_Init+0x154>)
 80058a2:	4413      	add	r3, r2
 80058a4:	4a4b      	ldr	r2, [pc, #300]	; (80059d4 <HAL_DMA_Init+0x158>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	009a      	lsls	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a48      	ldr	r2, [pc, #288]	; (80059d8 <HAL_DMA_Init+0x15c>)
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
 80058b8:	e00e      	b.n	80058d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	4b46      	ldr	r3, [pc, #280]	; (80059dc <HAL_DMA_Init+0x160>)
 80058c2:	4413      	add	r3, r2
 80058c4:	4a43      	ldr	r2, [pc, #268]	; (80059d4 <HAL_DMA_Init+0x158>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	009a      	lsls	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a42      	ldr	r2, [pc, #264]	; (80059e0 <HAL_DMA_Init+0x164>)
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005932:	d039      	beq.n	80059a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <HAL_DMA_Init+0x15c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d11a      	bne.n	8005974 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <HAL_DMA_Init+0x168>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f003 031c 	and.w	r3, r3, #28
 800594a:	210f      	movs	r1, #15
 800594c:	fa01 f303 	lsl.w	r3, r1, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	4924      	ldr	r1, [pc, #144]	; (80059e4 <HAL_DMA_Init+0x168>)
 8005954:	4013      	ands	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005958:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <HAL_DMA_Init+0x168>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005964:	f003 031c 	and.w	r3, r3, #28
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	491d      	ldr	r1, [pc, #116]	; (80059e4 <HAL_DMA_Init+0x168>)
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]
 8005972:	e019      	b.n	80059a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <HAL_DMA_Init+0x16c>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f003 031c 	and.w	r3, r3, #28
 8005980:	210f      	movs	r1, #15
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	4917      	ldr	r1, [pc, #92]	; (80059e8 <HAL_DMA_Init+0x16c>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_DMA_Init+0x16c>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f003 031c 	and.w	r3, r3, #28
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	4911      	ldr	r1, [pc, #68]	; (80059e8 <HAL_DMA_Init+0x16c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40020407 	.word	0x40020407
 80059d0:	bffdfff8 	.word	0xbffdfff8
 80059d4:	cccccccd 	.word	0xcccccccd
 80059d8:	40020000 	.word	0x40020000
 80059dc:	bffdfbf8 	.word	0xbffdfbf8
 80059e0:	40020400 	.word	0x40020400
 80059e4:	400200a8 	.word	0x400200a8
 80059e8:	400204a8 	.word	0x400204a8

080059ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA_Start_IT+0x20>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e04b      	b.n	8005aa4 <HAL_DMA_Start_IT+0xb8>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d13a      	bne.n	8005a96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f969 	bl	8005d1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d008      	beq.n	8005a64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 020e 	orr.w	r2, r2, #14
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e00f      	b.n	8005a84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 020a 	orr.w	r2, r2, #10
 8005a82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e005      	b.n	8005aa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d005      	beq.n	8005ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
 8005ace:	e029      	b.n	8005b24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 020e 	bic.w	r2, r2, #14
 8005ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	f003 021c 	and.w	r2, r3, #28
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
    }
  }
  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f003 031c 	and.w	r3, r3, #28
 8005b4e:	2204      	movs	r2, #4
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d026      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x7a>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d021      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d107      	bne.n	8005b82 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0204 	bic.w	r2, r2, #4
 8005b80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f003 021c 	and.w	r2, r3, #28
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2104      	movs	r1, #4
 8005b90:	fa01 f202 	lsl.w	r2, r1, r2
 8005b94:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d071      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005ba6:	e06c      	b.n	8005c82 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	f003 031c 	and.w	r3, r3, #28
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02e      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xec>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d029      	beq.n	8005c1a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 020a 	bic.w	r2, r2, #10
 8005be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	f003 021c 	and.w	r2, r3, #28
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005bfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d038      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c18:	e033      	b.n	8005c82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f003 031c 	and.w	r3, r3, #28
 8005c22:	2208      	movs	r2, #8
 8005c24:	409a      	lsls	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02a      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x156>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d025      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 020e 	bic.w	r2, r2, #14
 8005c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f003 021c 	and.w	r2, r3, #28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
}
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	460b      	mov	r3, r1
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_DMA_RegisterCallback+0x20>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e031      	b.n	8005d10 <HAL_DMA_RegisterCallback+0x84>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d120      	bne.n	8005d02 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d81a      	bhi.n	8005cfc <HAL_DMA_RegisterCallback+0x70>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HAL_DMA_RegisterCallback+0x40>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ce5 	.word	0x08005ce5
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005cf5 	.word	0x08005cf5
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005ce2:	e010      	b.n	8005d06 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005cea:	e00c      	b.n	8005d06 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005cf2:	e008      	b.n	8005d06 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005cfa:	e004      	b.n	8005d06 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
           break;
 8005d00:	e001      	b.n	8005d06 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f003 021c 	and.w	r2, r3, #28
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2101      	movs	r1, #1
 8005d38:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d108      	bne.n	8005d60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d5e:	e007      	b.n	8005d70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d8a:	e154      	b.n	8006036 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8146 	beq.w	8006030 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d005      	beq.n	8005dbc <HAL_GPIO_Init+0x40>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d130      	bne.n	8005e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005df2:	2201      	movs	r2, #1
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f003 0201 	and.w	r2, r3, #1
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d017      	beq.n	8005e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	2203      	movs	r2, #3
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d123      	bne.n	8005eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	08da      	lsrs	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3208      	adds	r2, #8
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	220f      	movs	r2, #15
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	08da      	lsrs	r2, r3, #3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3208      	adds	r2, #8
 8005ea8:	6939      	ldr	r1, [r7, #16]
 8005eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0203 	and.w	r2, r3, #3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80a0 	beq.w	8006030 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ef0:	4b58      	ldr	r3, [pc, #352]	; (8006054 <HAL_GPIO_Init+0x2d8>)
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	4a57      	ldr	r2, [pc, #348]	; (8006054 <HAL_GPIO_Init+0x2d8>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6613      	str	r3, [r2, #96]	; 0x60
 8005efc:	4b55      	ldr	r3, [pc, #340]	; (8006054 <HAL_GPIO_Init+0x2d8>)
 8005efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f08:	4a53      	ldr	r2, [pc, #332]	; (8006058 <HAL_GPIO_Init+0x2dc>)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	3302      	adds	r3, #2
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	220f      	movs	r2, #15
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f32:	d019      	beq.n	8005f68 <HAL_GPIO_Init+0x1ec>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a49      	ldr	r2, [pc, #292]	; (800605c <HAL_GPIO_Init+0x2e0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_GPIO_Init+0x1e8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a48      	ldr	r2, [pc, #288]	; (8006060 <HAL_GPIO_Init+0x2e4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00d      	beq.n	8005f60 <HAL_GPIO_Init+0x1e4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a47      	ldr	r2, [pc, #284]	; (8006064 <HAL_GPIO_Init+0x2e8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <HAL_GPIO_Init+0x1e0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a46      	ldr	r2, [pc, #280]	; (8006068 <HAL_GPIO_Init+0x2ec>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_GPIO_Init+0x1dc>
 8005f54:	2304      	movs	r3, #4
 8005f56:	e008      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f58:	2307      	movs	r3, #7
 8005f5a:	e006      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e004      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e002      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_GPIO_Init+0x1ee>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	f002 0203 	and.w	r2, r2, #3
 8005f70:	0092      	lsls	r2, r2, #2
 8005f72:	4093      	lsls	r3, r2
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f7a:	4937      	ldr	r1, [pc, #220]	; (8006058 <HAL_GPIO_Init+0x2dc>)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	3302      	adds	r3, #2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f88:	4b38      	ldr	r3, [pc, #224]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fd6:	4a25      	ldr	r2, [pc, #148]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fdc:	4b23      	ldr	r3, [pc, #140]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006000:	4a1a      	ldr	r2, [pc, #104]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <HAL_GPIO_Init+0x2f0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	43db      	mvns	r3, r3
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4013      	ands	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <HAL_GPIO_Init+0x2f0>)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3301      	adds	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f aea3 	bne.w	8005d8c <HAL_GPIO_Init+0x10>
  }
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	40021000 	.word	0x40021000
 8006058:	40010000 	.word	0x40010000
 800605c:	48000400 	.word	0x48000400
 8006060:	48000800 	.word	0x48000800
 8006064:	48000c00 	.word	0x48000c00
 8006068:	48001000 	.word	0x48001000
 800606c:	40010400 	.word	0x40010400

08006070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	4013      	ands	r3, r2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
 800608c:	e001      	b.n	8006092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	807b      	strh	r3, [r7, #2]
 80060ac:	4613      	mov	r3, r2
 80060ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060b0:	787b      	ldrb	r3, [r7, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060bc:	e002      	b.n	80060c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060e6:	4a05      	ldr	r2, [pc, #20]	; (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f003 fbbc 	bl	800986c <HAL_GPIO_EXTI_Callback>
  }
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40010400 	.word	0x40010400

08006100 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a04      	ldr	r2, [pc, #16]	; (800611c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40007000 	.word	0x40007000

08006120 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006128:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <HAL_PWR_ConfigPVD+0xb8>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f023 020e 	bic.w	r2, r3, #14
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4928      	ldr	r1, [pc, #160]	; (80061d8 <HAL_PWR_ConfigPVD+0xb8>)
 8006136:	4313      	orrs	r3, r2
 8006138:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800613a:	4b28      	ldr	r3, [pc, #160]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4a27      	ldr	r2, [pc, #156]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006146:	4b25      	ldr	r3, [pc, #148]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a24      	ldr	r2, [pc, #144]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 800614c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006150:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4a21      	ldr	r2, [pc, #132]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800615e:	4b1f      	ldr	r3, [pc, #124]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8006176:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a18      	ldr	r2, [pc, #96]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006198:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4a06      	ldr	r2, [pc, #24]	; (80061dc <HAL_PWR_ConfigPVD+0xbc>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40007000 	.word	0x40007000
 80061dc:	40010400 	.word	0x40010400

080061e0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_PWR_EnablePVD+0x1c>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a04      	ldr	r2, [pc, #16]	; (80061fc <HAL_PWR_EnablePVD+0x1c>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	6053      	str	r3, [r2, #4]
}
 80061f0:	bf00      	nop
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40007000 	.word	0x40007000

08006200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <HAL_PWREx_GetVoltageRange+0x18>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800620c:	4618      	mov	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40007000 	.word	0x40007000

0800621c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622a:	d130      	bne.n	800628e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800622c:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006238:	d038      	beq.n	80062ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800623a:	4b20      	ldr	r3, [pc, #128]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006242:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2232      	movs	r2, #50	; 0x32
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	0c9b      	lsrs	r3, r3, #18
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006260:	e002      	b.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b01      	subs	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d102      	bne.n	800627c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f2      	bne.n	8006262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006288:	d110      	bne.n	80062ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e00f      	b.n	80062ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d007      	beq.n	80062ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062a4:	4a05      	ldr	r2, [pc, #20]	; (80062bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40007000 	.word	0x40007000
 80062c0:	2000009c 	.word	0x2000009c
 80062c4:	431bde83 	.word	0x431bde83

080062c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f000 bc02 	b.w	8006ae0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062dc:	4b96      	ldr	r3, [pc, #600]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062e6:	4b94      	ldr	r3, [pc, #592]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80e4 	beq.w	80064c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <HAL_RCC_OscConfig+0x4c>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b0c      	cmp	r3, #12
 8006308:	f040 808b 	bne.w	8006422 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b01      	cmp	r3, #1
 8006310:	f040 8087 	bne.w	8006422 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006314:	4b88      	ldr	r3, [pc, #544]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_OscConfig+0x64>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e3d9      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	4b81      	ldr	r3, [pc, #516]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <HAL_RCC_OscConfig+0x7e>
 800633c:	4b7e      	ldr	r3, [pc, #504]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006344:	e005      	b.n	8006352 <HAL_RCC_OscConfig+0x8a>
 8006346:	4b7c      	ldr	r3, [pc, #496]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006352:	4293      	cmp	r3, r2
 8006354:	d223      	bcs.n	800639e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fd54 	bl	8006e08 <RCC_SetFlashLatencyFromMSIRange>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e3ba      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800636a:	4b73      	ldr	r3, [pc, #460]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a72      	ldr	r2, [pc, #456]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006370:	f043 0308 	orr.w	r3, r3, #8
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4b70      	ldr	r3, [pc, #448]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	496d      	ldr	r1, [pc, #436]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006388:	4b6b      	ldr	r3, [pc, #428]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4968      	ldr	r1, [pc, #416]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006398:	4313      	orrs	r3, r2
 800639a:	604b      	str	r3, [r1, #4]
 800639c:	e025      	b.n	80063ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800639e:	4b66      	ldr	r3, [pc, #408]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a65      	ldr	r2, [pc, #404]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063a4:	f043 0308 	orr.w	r3, r3, #8
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b63      	ldr	r3, [pc, #396]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	4960      	ldr	r1, [pc, #384]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063bc:	4b5e      	ldr	r3, [pc, #376]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	495b      	ldr	r1, [pc, #364]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fd14 	bl	8006e08 <RCC_SetFlashLatencyFromMSIRange>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e37a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063ea:	f000 fc81 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b51      	ldr	r3, [pc, #324]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	4950      	ldr	r1, [pc, #320]	; (800653c <HAL_RCC_OscConfig+0x274>)
 80063fc:	5ccb      	ldrb	r3, [r1, r3]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a4e      	ldr	r2, [pc, #312]	; (8006540 <HAL_RCC_OscConfig+0x278>)
 8006408:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800640a:	4b4e      	ldr	r3, [pc, #312]	; (8006544 <HAL_RCC_OscConfig+0x27c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff f884 	bl	800551c <HAL_InitTick>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d052      	beq.n	80064c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	e35e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d032      	beq.n	8006490 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a42      	ldr	r2, [pc, #264]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006436:	f7ff f8ad 	bl	8005594 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800643e:	f7ff f8a9 	bl	8005594 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e347      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006450:	4b39      	ldr	r3, [pc, #228]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a35      	ldr	r2, [pc, #212]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006462:	f043 0308 	orr.w	r3, r3, #8
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b33      	ldr	r3, [pc, #204]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4930      	ldr	r1, [pc, #192]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	492b      	ldr	r1, [pc, #172]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
 800648e:	e01a      	b.n	80064c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006490:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a28      	ldr	r2, [pc, #160]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800649c:	f7ff f87a 	bl	8005594 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064a4:	f7ff f876 	bl	8005594 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e314      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064b6:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x1dc>
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d073      	beq.n	80065ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_OscConfig+0x21c>
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b0c      	cmp	r3, #12
 80064dc:	d10e      	bne.n	80064fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d10b      	bne.n	80064fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	4b14      	ldr	r3, [pc, #80]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d063      	beq.n	80065b8 <HAL_RCC_OscConfig+0x2f0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d15f      	bne.n	80065b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e2f1      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006504:	d106      	bne.n	8006514 <HAL_RCC_OscConfig+0x24c>
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e025      	b.n	8006560 <HAL_RCC_OscConfig+0x298>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800651c:	d114      	bne.n	8006548 <HAL_RCC_OscConfig+0x280>
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a05      	ldr	r2, [pc, #20]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a02      	ldr	r2, [pc, #8]	; (8006538 <HAL_RCC_OscConfig+0x270>)
 8006530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e013      	b.n	8006560 <HAL_RCC_OscConfig+0x298>
 8006538:	40021000 	.word	0x40021000
 800653c:	0800ae34 	.word	0x0800ae34
 8006540:	2000009c 	.word	0x2000009c
 8006544:	20000094 	.word	0x20000094
 8006548:	4ba0      	ldr	r3, [pc, #640]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a9f      	ldr	r2, [pc, #636]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b9d      	ldr	r3, [pc, #628]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a9c      	ldr	r2, [pc, #624]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7ff f814 	bl	8005594 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7ff f810 	bl	8005594 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e2ae      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006582:	4b92      	ldr	r3, [pc, #584]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x2a8>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7ff f800 	bl	8005594 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fe fffc 	bl	8005594 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e29a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065aa:	4b88      	ldr	r3, [pc, #544]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x2d0>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d060      	beq.n	8006688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d005      	beq.n	80065d8 <HAL_RCC_OscConfig+0x310>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b0c      	cmp	r3, #12
 80065d0:	d119      	bne.n	8006606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d116      	bne.n	8006606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d8:	4b7c      	ldr	r3, [pc, #496]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_RCC_OscConfig+0x328>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e277      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f0:	4b76      	ldr	r3, [pc, #472]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	4973      	ldr	r1, [pc, #460]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006600:	4313      	orrs	r3, r2
 8006602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006604:	e040      	b.n	8006688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d023      	beq.n	8006656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800660e:	4b6f      	ldr	r3, [pc, #444]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6e      	ldr	r2, [pc, #440]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fe ffbb 	bl	8005594 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006622:	f7fe ffb7 	bl	8005594 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e255      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006634:	4b65      	ldr	r3, [pc, #404]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006640:	4b62      	ldr	r3, [pc, #392]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	495f      	ldr	r1, [pc, #380]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006650:	4313      	orrs	r3, r2
 8006652:	604b      	str	r3, [r1, #4]
 8006654:	e018      	b.n	8006688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006656:	4b5d      	ldr	r3, [pc, #372]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5c      	ldr	r2, [pc, #368]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800665c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006662:	f7fe ff97 	bl	8005594 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666a:	f7fe ff93 	bl	8005594 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e231      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800667c:	4b53      	ldr	r3, [pc, #332]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d03c      	beq.n	800670e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01c      	beq.n	80066d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669c:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800669e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ac:	f7fe ff72 	bl	8005594 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b4:	f7fe ff6e 	bl	8005594 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e20c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80066c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0ef      	beq.n	80066b4 <HAL_RCC_OscConfig+0x3ec>
 80066d4:	e01b      	b.n	800670e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d6:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80066d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066dc:	4a3b      	ldr	r2, [pc, #236]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80066de:	f023 0301 	bic.w	r3, r3, #1
 80066e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e6:	f7fe ff55 	bl	8005594 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ee:	f7fe ff51 	bl	8005594 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e1ef      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006700:	4b32      	ldr	r3, [pc, #200]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1ef      	bne.n	80066ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80a6 	beq.w	8006868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800671c:	2300      	movs	r3, #0
 800671e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10d      	bne.n	8006748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800672c:	4b27      	ldr	r3, [pc, #156]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800672e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006730:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006736:	6593      	str	r3, [r2, #88]	; 0x58
 8006738:	4b24      	ldr	r3, [pc, #144]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 800673a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006744:	2301      	movs	r3, #1
 8006746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <HAL_RCC_OscConfig+0x508>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d118      	bne.n	8006786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_RCC_OscConfig+0x508>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_RCC_OscConfig+0x508>)
 800675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006760:	f7fe ff18 	bl	8005594 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006768:	f7fe ff14 	bl	8005594 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1b2      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <HAL_RCC_OscConfig+0x508>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d108      	bne.n	80067a0 <HAL_RCC_OscConfig+0x4d8>
 800678e:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	4a0d      	ldr	r2, [pc, #52]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800679e:	e029      	b.n	80067f4 <HAL_RCC_OscConfig+0x52c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d115      	bne.n	80067d4 <HAL_RCC_OscConfig+0x50c>
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ae:	4a07      	ldr	r2, [pc, #28]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80067b0:	f043 0304 	orr.w	r3, r3, #4
 80067b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	4a03      	ldr	r2, [pc, #12]	; (80067cc <HAL_RCC_OscConfig+0x504>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067c8:	e014      	b.n	80067f4 <HAL_RCC_OscConfig+0x52c>
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40007000 	.word	0x40007000
 80067d4:	4b9a      	ldr	r3, [pc, #616]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067da:	4a99      	ldr	r2, [pc, #612]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067e4:	4b96      	ldr	r3, [pc, #600]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	4a95      	ldr	r2, [pc, #596]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80067ec:	f023 0304 	bic.w	r3, r3, #4
 80067f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d016      	beq.n	800682a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fc:	f7fe feca 	bl	8005594 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006802:	e00a      	b.n	800681a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006804:	f7fe fec6 	bl	8005594 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e162      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681a:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ed      	beq.n	8006804 <HAL_RCC_OscConfig+0x53c>
 8006828:	e015      	b.n	8006856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682a:	f7fe feb3 	bl	8005594 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006830:	e00a      	b.n	8006848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006832:	f7fe feaf 	bl	8005594 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	4293      	cmp	r3, r2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e14b      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006848:	4b7d      	ldr	r3, [pc, #500]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ed      	bne.n	8006832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006856:	7ffb      	ldrb	r3, [r7, #31]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d105      	bne.n	8006868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685c:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	4a77      	ldr	r2, [pc, #476]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b00      	cmp	r3, #0
 8006872:	d03c      	beq.n	80068ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01c      	beq.n	80068b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800687c:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 800687e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006882:	4a6f      	ldr	r2, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fe fe82 	bl	8005594 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006894:	f7fe fe7e 	bl	8005594 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e11c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80068a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0ef      	beq.n	8006894 <HAL_RCC_OscConfig+0x5cc>
 80068b4:	e01b      	b.n	80068ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068b6:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80068b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068bc:	4a60      	ldr	r2, [pc, #384]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fe fe65 	bl	8005594 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ce:	f7fe fe61 	bl	8005594 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0ff      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068e0:	4b57      	ldr	r3, [pc, #348]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80068e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ef      	bne.n	80068ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80f3 	beq.w	8006ade <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f040 80c9 	bne.w	8006a94 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006902:	4b4f      	ldr	r3, [pc, #316]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f003 0203 	and.w	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	429a      	cmp	r2, r3
 8006914:	d12c      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	3b01      	subs	r3, #1
 8006922:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006924:	429a      	cmp	r2, r3
 8006926:	d123      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d11b      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d113      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	3b01      	subs	r3, #1
 8006956:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006958:	429a      	cmp	r2, r3
 800695a:	d109      	bne.n	8006970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	085b      	lsrs	r3, r3, #1
 8006968:	3b01      	subs	r3, #1
 800696a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d06b      	beq.n	8006a48 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b0c      	cmp	r3, #12
 8006974:	d062      	beq.n	8006a3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006976:	4b32      	ldr	r3, [pc, #200]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e0ac      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 800698c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006990:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006992:	f7fe fdff 	bl	8005594 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699a:	f7fe fdfb 	bl	8005594 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e099      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ac:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b8:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <HAL_RCC_OscConfig+0x77c>)
 80069be:	4013      	ands	r3, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069c8:	3a01      	subs	r2, #1
 80069ca:	0112      	lsls	r2, r2, #4
 80069cc:	4311      	orrs	r1, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069d2:	0212      	lsls	r2, r2, #8
 80069d4:	4311      	orrs	r1, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069da:	0852      	lsrs	r2, r2, #1
 80069dc:	3a01      	subs	r2, #1
 80069de:	0552      	lsls	r2, r2, #21
 80069e0:	4311      	orrs	r1, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069e6:	0852      	lsrs	r2, r2, #1
 80069e8:	3a01      	subs	r2, #1
 80069ea:	0652      	lsls	r2, r2, #25
 80069ec:	4311      	orrs	r1, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069f2:	06d2      	lsls	r2, r2, #27
 80069f4:	430a      	orrs	r2, r1
 80069f6:	4912      	ldr	r1, [pc, #72]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a08:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a14:	f7fe fdbe 	bl	8005594 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fe fdba 	bl	8005594 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e058      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_RCC_OscConfig+0x778>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a3a:	e050      	b.n	8006ade <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e04f      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
 8006a40:	40021000 	.word	0x40021000
 8006a44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a48:	4b27      	ldr	r3, [pc, #156]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d144      	bne.n	8006ade <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a54:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a6c:	f7fe fd92 	bl	8005594 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fe fd8e 	bl	8005594 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e02c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0f0      	beq.n	8006a74 <HAL_RCC_OscConfig+0x7ac>
 8006a92:	e024      	b.n	8006ade <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	d01f      	beq.n	8006ada <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9a:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fe fd75 	bl	8005594 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fe fd71 	bl	8005594 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e00f      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	4905      	ldr	r1, [pc, #20]	; (8006ae8 <HAL_RCC_OscConfig+0x820>)
 8006ad2:	4b06      	ldr	r3, [pc, #24]	; (8006aec <HAL_RCC_OscConfig+0x824>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60cb      	str	r3, [r1, #12]
 8006ad8:	e001      	b.n	8006ade <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	feeefffc 	.word	0xfeeefffc

08006af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0e7      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b04:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d910      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b72      	ldr	r3, [pc, #456]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 0207 	bic.w	r2, r3, #7
 8006b1a:	4970      	ldr	r1, [pc, #448]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b6e      	ldr	r3, [pc, #440]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0cf      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	4b66      	ldr	r3, [pc, #408]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b50:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4960      	ldr	r1, [pc, #384]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d04c      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b76:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d121      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0a6      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8e:	4b54      	ldr	r3, [pc, #336]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d115      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e09a      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ba6:	4b4e      	ldr	r3, [pc, #312]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e08e      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bb6:	4b4a      	ldr	r3, [pc, #296]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e086      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bc6:	4b46      	ldr	r3, [pc, #280]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 0203 	bic.w	r2, r3, #3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4943      	ldr	r1, [pc, #268]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd8:	f7fe fcdc 	bl	8005594 <HAL_GetTick>
 8006bdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be0:	f7fe fcd8 	bl	8005594 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e06e      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	4b3a      	ldr	r3, [pc, #232]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 020c 	and.w	r2, r3, #12
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d1eb      	bne.n	8006be0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d208      	bcs.n	8006c36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	492b      	ldr	r1, [pc, #172]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d210      	bcs.n	8006c66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f023 0207 	bic.w	r2, r3, #7
 8006c4c:	4923      	ldr	r1, [pc, #140]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c54:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <HAL_RCC_ClockConfig+0x1ec>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e036      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c72:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4918      	ldr	r1, [pc, #96]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c90:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4910      	ldr	r1, [pc, #64]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ca4:	f000 f824 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	490b      	ldr	r1, [pc, #44]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8006cb6:	5ccb      	ldrb	r3, [r1, r3]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc0:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cc4:	4b09      	ldr	r3, [pc, #36]	; (8006cec <HAL_RCC_ClockConfig+0x1fc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fe fc27 	bl	800551c <HAL_InitTick>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40022000 	.word	0x40022000
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	0800ae34 	.word	0x0800ae34
 8006ce8:	2000009c 	.word	0x2000009c
 8006cec:	20000094 	.word	0x20000094

08006cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b089      	sub	sp, #36	; 0x24
 8006cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d08:	4b3b      	ldr	r3, [pc, #236]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x34>
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b0c      	cmp	r3, #12
 8006d1c:	d121      	bne.n	8006d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d11e      	bne.n	8006d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d24:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d30:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e005      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d40:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d102      	bne.n	8006d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	e004      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d101      	bne.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d74:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b0c      	cmp	r3, #12
 8006d7c:	d134      	bne.n	8006de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d003      	beq.n	8006d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d003      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0xac>
 8006d94:	e005      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d98:	617b      	str	r3, [r7, #20]
      break;
 8006d9a:	e005      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d9e:	617b      	str	r3, [r7, #20]
      break;
 8006da0:	e002      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	617b      	str	r3, [r7, #20]
      break;
 8006da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	fb03 f202 	mul.w	r2, r3, r2
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	0e5b      	lsrs	r3, r3, #25
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	3301      	adds	r3, #1
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006de8:	69bb      	ldr	r3, [r7, #24]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3724      	adds	r7, #36	; 0x24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	0800ae44 	.word	0x0800ae44
 8006e00:	00f42400 	.word	0x00f42400
 8006e04:	02dc6c00 	.word	0x02dc6c00

08006e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e14:	4b2a      	ldr	r3, [pc, #168]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e20:	f7ff f9ee 	bl	8006200 <HAL_PWREx_GetVoltageRange>
 8006e24:	6178      	str	r0, [r7, #20]
 8006e26:	e014      	b.n	8006e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e32:	6593      	str	r3, [r2, #88]	; 0x58
 8006e34:	4b22      	ldr	r3, [pc, #136]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e40:	f7ff f9de 	bl	8006200 <HAL_PWREx_GetVoltageRange>
 8006e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e46:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e58:	d10b      	bne.n	8006e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b80      	cmp	r3, #128	; 0x80
 8006e5e:	d919      	bls.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2ba0      	cmp	r3, #160	; 0xa0
 8006e64:	d902      	bls.n	8006e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e66:	2302      	movs	r3, #2
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	e013      	b.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e010      	b.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b80      	cmp	r3, #128	; 0x80
 8006e76:	d902      	bls.n	8006e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e78:	2303      	movs	r3, #3
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	e00a      	b.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d102      	bne.n	8006e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e84:	2302      	movs	r3, #2
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	e004      	b.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b70      	cmp	r3, #112	; 0x70
 8006e8e:	d101      	bne.n	8006e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e90:	2301      	movs	r3, #1
 8006e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f023 0207 	bic.w	r2, r3, #7
 8006e9c:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ea4:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d001      	beq.n	8006eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40022000 	.word	0x40022000

08006ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d031      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eec:	d01a      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ef2:	d814      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006efc:	d10f      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006efe:	4b5d      	ldr	r3, [pc, #372]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f0a:	e00c      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f9f0 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f1c:	e003      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	74fb      	strb	r3, [r7, #19]
      break;
 8006f22:	e000      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f26:	7cfb      	ldrb	r3, [r7, #19]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f2c:	4b51      	ldr	r3, [pc, #324]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	494e      	ldr	r1, [pc, #312]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f42:	e001      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	7cfb      	ldrb	r3, [r7, #19]
 8006f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 809e 	beq.w	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f56:	2300      	movs	r3, #0
 8006f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f5a:	4b46      	ldr	r3, [pc, #280]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00d      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f70:	4b40      	ldr	r3, [pc, #256]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f74:	4a3f      	ldr	r2, [pc, #252]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f7c:	4b3d      	ldr	r3, [pc, #244]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a39      	ldr	r2, [pc, #228]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f98:	f7fe fafc 	bl	8005594 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f9e:	e009      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa0:	f7fe faf8 	bl	8005594 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d902      	bls.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8006fb2:	e005      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fb4:	4b30      	ldr	r3, [pc, #192]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ef      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006fc0:	7cfb      	ldrb	r3, [r7, #19]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d15a      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01e      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d019      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800700e:	4a19      	ldr	r2, [pc, #100]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d016      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fe fab8 	bl	8005594 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007026:	e00b      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007028:	f7fe fab4 	bl	8005594 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	f241 3288 	movw	r2, #5000	; 0x1388
 8007036:	4293      	cmp	r3, r2
 8007038:	d902      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	74fb      	strb	r3, [r7, #19]
            break;
 800703e:	e006      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ec      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800704e:	7cfb      	ldrb	r3, [r7, #19]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	4904      	ldr	r1, [pc, #16]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800706a:	e009      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	74bb      	strb	r3, [r7, #18]
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000
 8007078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007080:	7c7b      	ldrb	r3, [r7, #17]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d105      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007086:	4b9b      	ldr	r3, [pc, #620]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	4a9a      	ldr	r2, [pc, #616]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800708c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007090:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800709e:	4b95      	ldr	r3, [pc, #596]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	f023 0203 	bic.w	r2, r3, #3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	4991      	ldr	r1, [pc, #580]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070c0:	4b8c      	ldr	r3, [pc, #560]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	f023 020c 	bic.w	r2, r3, #12
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	4989      	ldr	r1, [pc, #548]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070e2:	4b84      	ldr	r3, [pc, #528]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	4980      	ldr	r1, [pc, #512]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007104:	4b7b      	ldr	r3, [pc, #492]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	4978      	ldr	r1, [pc, #480]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007126:	4b73      	ldr	r3, [pc, #460]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	496f      	ldr	r1, [pc, #444]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007148:	4b6a      	ldr	r3, [pc, #424]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800714a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4967      	ldr	r1, [pc, #412]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800716a:	4b62      	ldr	r3, [pc, #392]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	495e      	ldr	r1, [pc, #376]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800718c:	4b59      	ldr	r3, [pc, #356]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	4956      	ldr	r1, [pc, #344]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ae:	4b51      	ldr	r3, [pc, #324]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	494d      	ldr	r1, [pc, #308]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d028      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071d0:	4b48      	ldr	r3, [pc, #288]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071de:	4945      	ldr	r1, [pc, #276]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ee:	d106      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f0:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4a3f      	ldr	r2, [pc, #252]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071fa:	60d3      	str	r3, [r2, #12]
 80071fc:	e011      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007206:	d10c      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3304      	adds	r3, #4
 800720c:	2101      	movs	r1, #1
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f872 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007218:	7cfb      	ldrb	r3, [r7, #19]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d028      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723c:	492d      	ldr	r1, [pc, #180]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724c:	d106      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800724e:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007258:	60d3      	str	r3, [r2, #12]
 800725a:	e011      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007264:	d10c      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f843 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007276:	7cfb      	ldrb	r3, [r7, #19]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800727c:	7cfb      	ldrb	r3, [r7, #19]
 800727e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01c      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800728c:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729a:	4916      	ldr	r1, [pc, #88]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072aa:	d10c      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	2102      	movs	r1, #2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f820 	bl	80072f8 <RCCEx_PLLSAI1_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072bc:	7cfb      	ldrb	r3, [r7, #19]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80072c2:	7cfb      	ldrb	r3, [r7, #19]
 80072c4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000

080072f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007306:	4b74      	ldr	r3, [pc, #464]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d018      	beq.n	8007344 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007312:	4b71      	ldr	r3, [pc, #452]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0203 	and.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d10d      	bne.n	800733e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
       ||
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800732a:	4b6b      	ldr	r3, [pc, #428]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
       ||
 800733a:	429a      	cmp	r2, r3
 800733c:	d047      	beq.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	e044      	b.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d018      	beq.n	800737e <RCCEx_PLLSAI1_Config+0x86>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d825      	bhi.n	800739c <RCCEx_PLLSAI1_Config+0xa4>
 8007350:	2b01      	cmp	r3, #1
 8007352:	d002      	beq.n	800735a <RCCEx_PLLSAI1_Config+0x62>
 8007354:	2b02      	cmp	r3, #2
 8007356:	d009      	beq.n	800736c <RCCEx_PLLSAI1_Config+0x74>
 8007358:	e020      	b.n	800739c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800735a:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11d      	bne.n	80073a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800736a:	e01a      	b.n	80073a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800736c:	4b5a      	ldr	r3, [pc, #360]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	2b00      	cmp	r3, #0
 8007376:	d116      	bne.n	80073a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800737c:	e013      	b.n	80073a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800737e:	4b56      	ldr	r3, [pc, #344]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800738a:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800739a:	e006      	b.n	80073aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      break;
 80073a0:	e004      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073b2:	4b49      	ldr	r3, [pc, #292]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	430b      	orrs	r3, r1
 80073c8:	4943      	ldr	r1, [pc, #268]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d17c      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073d4:	4b40      	ldr	r3, [pc, #256]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e0:	f7fe f8d8 	bl	8005594 <HAL_GetTick>
 80073e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073e6:	e009      	b.n	80073fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073e8:	f7fe f8d4 	bl	8005594 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d902      	bls.n	80073fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	73fb      	strb	r3, [r7, #15]
        break;
 80073fa:	e005      	b.n	8007408 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ef      	bne.n	80073e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d15f      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d110      	bne.n	8007436 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007414:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800741c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6892      	ldr	r2, [r2, #8]
 8007424:	0211      	lsls	r1, r2, #8
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	68d2      	ldr	r2, [r2, #12]
 800742a:	06d2      	lsls	r2, r2, #27
 800742c:	430a      	orrs	r2, r1
 800742e:	492a      	ldr	r1, [pc, #168]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	4313      	orrs	r3, r2
 8007432:	610b      	str	r3, [r1, #16]
 8007434:	e027      	b.n	8007486 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d112      	bne.n	8007462 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800743c:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6892      	ldr	r2, [r2, #8]
 800744c:	0211      	lsls	r1, r2, #8
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6912      	ldr	r2, [r2, #16]
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	3a01      	subs	r2, #1
 8007456:	0552      	lsls	r2, r2, #21
 8007458:	430a      	orrs	r2, r1
 800745a:	491f      	ldr	r1, [pc, #124]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800745c:	4313      	orrs	r3, r2
 800745e:	610b      	str	r3, [r1, #16]
 8007460:	e011      	b.n	8007486 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800746a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6892      	ldr	r2, [r2, #8]
 8007472:	0211      	lsls	r1, r2, #8
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6952      	ldr	r2, [r2, #20]
 8007478:	0852      	lsrs	r2, r2, #1
 800747a:	3a01      	subs	r2, #1
 800747c:	0652      	lsls	r2, r2, #25
 800747e:	430a      	orrs	r2, r1
 8007480:	4915      	ldr	r1, [pc, #84]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800748c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007490:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fe f87f 	bl	8005594 <HAL_GetTick>
 8007496:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007498:	e009      	b.n	80074ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800749a:	f7fe f87b 	bl	8005594 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d902      	bls.n	80074ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
          break;
 80074ac:	e005      	b.n	80074ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ef      	beq.n	800749a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	4903      	ldr	r1, [pc, #12]	; (80074d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40021000 	.word	0x40021000

080074dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d06c      	beq.n	80075c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 ff8c 	bl	8009420 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	22ca      	movs	r2, #202	; 0xca
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2253      	movs	r2, #83	; 0x53
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f87c 	bl	800761e <RTC_EnterInitMode>
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d14b      	bne.n	80075c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007542:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6899      	ldr	r1, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68d2      	ldr	r2, [r2, #12]
 800756a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6919      	ldr	r1, [r3, #16]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	041a      	lsls	r2, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f87f 	bl	8007684 <RTC_ExitInitMode>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11b      	bne.n	80075c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0203 	bic.w	r2, r2, #3
 800759e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075e8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80075ea:	f7fd ffd3 	bl	8005594 <HAL_GetTick>
 80075ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075f0:	e009      	b.n	8007606 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075f2:	f7fd ffcf 	bl	8005594 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007600:	d901      	bls.n	8007606 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e007      	b.n	8007616 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0ee      	beq.n	80075f2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d120      	bne.n	800767a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007640:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007642:	f7fd ffa7 	bl	8005594 <HAL_GetTick>
 8007646:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007648:	e00d      	b.n	8007666 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800764a:	f7fd ffa3 	bl	8005594 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007658:	d905      	bls.n	8007666 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2203      	movs	r2, #3
 8007662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <RTC_EnterInitMode+0x5c>
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d1e7      	bne.n	800764a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <RTC_ExitInitMode+0x78>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4a19      	ldr	r2, [pc, #100]	; (80076fc <RTC_ExitInitMode+0x78>)
 8007696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800769a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <RTC_ExitInitMode+0x78>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10c      	bne.n	80076c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff92 	bl	80075d2 <HAL_RTC_WaitForSynchro>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01e      	beq.n	80076f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	e017      	b.n	80076f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <RTC_ExitInitMode+0x78>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <RTC_ExitInitMode+0x78>)
 80076c8:	f023 0320 	bic.w	r3, r3, #32
 80076cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff ff7f 	bl	80075d2 <HAL_RTC_WaitForSynchro>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2203      	movs	r2, #3
 80076de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <RTC_ExitInitMode+0x78>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4a04      	ldr	r2, [pc, #16]	; (80076fc <RTC_ExitInitMode+0x78>)
 80076ec:	f043 0320 	orr.w	r3, r3, #32
 80076f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40002800 	.word	0x40002800

08007700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e049      	b.n	80077a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fe96 	bl	8009458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f000 fe2e 	bl	80083a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e049      	b.n	8007854 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 feef 	bl	80095b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f000 fdd7 	bl	80083a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e03c      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d109      	bne.n	80078a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	bf0c      	ite	eq
 800789a:	2301      	moveq	r3, #1
 800789c:	2300      	movne	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	e02f      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0xa6>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d109      	bne.n	80078bc <HAL_TIM_PWM_Start_DMA+0x60>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	e022      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0xa6>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	d109      	bne.n	80078d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	e015      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0xa6>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d109      	bne.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e008      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0xa6>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007906:	2302      	movs	r3, #2
 8007908:	e18d      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	e03c      	b.n	800799e <HAL_TIM_PWM_Start_DMA+0x142>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b04      	cmp	r3, #4
 8007928:	d109      	bne.n	800793e <HAL_TIM_PWM_Start_DMA+0xe2>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	e02f      	b.n	800799e <HAL_TIM_PWM_Start_DMA+0x142>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d109      	bne.n	8007958 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e022      	b.n	800799e <HAL_TIM_PWM_Start_DMA+0x142>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b0c      	cmp	r3, #12
 800795c:	d109      	bne.n	8007972 <HAL_TIM_PWM_Start_DMA+0x116>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	bf0c      	ite	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	2300      	movne	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	e015      	b.n	800799e <HAL_TIM_PWM_Start_DMA+0x142>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b10      	cmp	r3, #16
 8007976:	d109      	bne.n	800798c <HAL_TIM_PWM_Start_DMA+0x130>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e008      	b.n	800799e <HAL_TIM_PWM_Start_DMA+0x142>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d034      	beq.n	8007a0c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_TIM_PWM_Start_DMA+0x152>
 80079a8:	887b      	ldrh	r3, [r7, #2]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e139      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_PWM_Start_DMA+0x166>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079c0:	e026      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_PWM_Start_DMA+0x176>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d0:	e01e      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_PWM_Start_DMA+0x186>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e0:	e016      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d104      	bne.n	80079f2 <HAL_TIM_PWM_Start_DMA+0x196>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079f0:	e00e      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b10      	cmp	r3, #16
 80079f6:	d104      	bne.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a00:	e006      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a0a:	e001      	b.n	8007a10 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e10a      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b0c      	cmp	r3, #12
 8007a14:	f200 80ae 	bhi.w	8007b74 <HAL_TIM_PWM_Start_DMA+0x318>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a55 	.word	0x08007a55
 8007a24:	08007b75 	.word	0x08007b75
 8007a28:	08007b75 	.word	0x08007b75
 8007a2c:	08007b75 	.word	0x08007b75
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007b75 	.word	0x08007b75
 8007a38:	08007b75 	.word	0x08007b75
 8007a3c:	08007b75 	.word	0x08007b75
 8007a40:	08007ae5 	.word	0x08007ae5
 8007a44:	08007b75 	.word	0x08007b75
 8007a48:	08007b75 	.word	0x08007b75
 8007a4c:	08007b75 	.word	0x08007b75
 8007a50:	08007b2d 	.word	0x08007b2d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	4a75      	ldr	r2, [pc, #468]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	4a74      	ldr	r2, [pc, #464]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	4a73      	ldr	r2, [pc, #460]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3334      	adds	r3, #52	; 0x34
 8007a78:	461a      	mov	r2, r3
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	f7fd ffb6 	bl	80059ec <HAL_DMA_Start_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0cd      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a98:	60da      	str	r2, [r3, #12]
      break;
 8007a9a:	e06e      	b.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	4a63      	ldr	r2, [pc, #396]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	4a62      	ldr	r2, [pc, #392]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	4a61      	ldr	r2, [pc, #388]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3338      	adds	r3, #56	; 0x38
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	f7fd ff92 	bl	80059ec <HAL_DMA_Start_IT>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0a9      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ae0:	60da      	str	r2, [r3, #12]
      break;
 8007ae2:	e04a      	b.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a51      	ldr	r2, [pc, #324]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	4a50      	ldr	r2, [pc, #320]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4a4f      	ldr	r2, [pc, #316]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	333c      	adds	r3, #60	; 0x3c
 8007b08:	461a      	mov	r2, r3
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	f7fd ff6e 	bl	80059ec <HAL_DMA_Start_IT>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e085      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b28:	60da      	str	r2, [r3, #12]
      break;
 8007b2a:	e026      	b.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	4a3f      	ldr	r2, [pc, #252]	; (8007c30 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007b32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	4a3e      	ldr	r2, [pc, #248]	; (8007c34 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	4a3d      	ldr	r2, [pc, #244]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007b42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3340      	adds	r3, #64	; 0x40
 8007b50:	461a      	mov	r2, r3
 8007b52:	887b      	ldrh	r3, [r7, #2]
 8007b54:	f7fd ff4a 	bl	80059ec <HAL_DMA_Start_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e061      	b.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b70:	60da      	str	r2, [r3, #12]
      break;
 8007b72:	e002      	b.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
      break;
 8007b78:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d151      	bne.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 ff85 	bl	8008a98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d009      	beq.n	8007bac <HAL_TIM_PWM_Start_DMA+0x350>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d004      	beq.n	8007bac <HAL_TIM_PWM_Start_DMA+0x350>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIM_PWM_Start_DMA+0x354>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <HAL_TIM_PWM_Start_DMA+0x356>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d009      	beq.n	8007be4 <HAL_TIM_PWM_Start_DMA+0x388>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d004      	beq.n	8007be4 <HAL_TIM_PWM_Start_DMA+0x388>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d115      	bne.n	8007c10 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b06      	cmp	r3, #6
 8007bf4:	d015      	beq.n	8007c22 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d011      	beq.n	8007c22 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	e008      	b.n	8007c22 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e000      	b.n	8007c24 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c22:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	08008291 	.word	0x08008291
 8007c34:	08008339 	.word	0x08008339
 8007c38:	080081ff 	.word	0x080081ff
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	00010007 	.word	0x00010007

08007c4c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b0c      	cmp	r3, #12
 8007c5e:	d855      	bhi.n	8007d0c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c9d 	.word	0x08007c9d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007cb9 	.word	0x08007cb9
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007cd5 	.word	0x08007cd5
 8007c8c:	08007d0d 	.word	0x08007d0d
 8007c90:	08007d0d 	.word	0x08007d0d
 8007c94:	08007d0d 	.word	0x08007d0d
 8007c98:	08007cf1 	.word	0x08007cf1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007caa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd fefb 	bl	8005aac <HAL_DMA_Abort_IT>
      break;
 8007cb6:	e02c      	b.n	8007d12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd feed 	bl	8005aac <HAL_DMA_Abort_IT>
      break;
 8007cd2:	e01e      	b.n	8007d12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ce2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fedf 	bl	8005aac <HAL_DMA_Abort_IT>
      break;
 8007cee:	e010      	b.n	8007d12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fd fed1 	bl	8005aac <HAL_DMA_Abort_IT>
      break;
 8007d0a:	e002      	b.n	8007d12 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d10:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d176      	bne.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 feb9 	bl	8008a98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a39      	ldr	r2, [pc, #228]	; (8007e10 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d009      	beq.n	8007d44 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a37      	ldr	r2, [pc, #220]	; (8007e14 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a36      	ldr	r2, [pc, #216]	; (8007e18 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d101      	bne.n	8007d48 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d017      	beq.n	8007d7e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a1a      	ldr	r2, [r3, #32]
 8007d54:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10f      	bne.n	8007d7e <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	f240 4344 	movw	r3, #1092	; 0x444
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d107      	bne.n	8007d7e <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6a1a      	ldr	r2, [r3, #32]
 8007d84:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10f      	bne.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	f240 4344 	movw	r3, #1092	; 0x444
 8007d98:	4013      	ands	r3, r2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x172>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dbc:	e023      	b.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d104      	bne.n	8007dce <HAL_TIM_PWM_Stop_DMA+0x182>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dcc:	e01b      	b.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d104      	bne.n	8007dde <HAL_TIM_PWM_Stop_DMA+0x192>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ddc:	e013      	b.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d104      	bne.n	8007dee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dec:	e00b      	b.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dfc:	e003      	b.n	8007e06 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40012c00 	.word	0x40012c00
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40014400 	.word	0x40014400

08007e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e0ff      	b.n	800803a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b14      	cmp	r3, #20
 8007e46:	f200 80f0 	bhi.w	800802a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	0800802b 	.word	0x0800802b
 8007e58:	0800802b 	.word	0x0800802b
 8007e5c:	0800802b 	.word	0x0800802b
 8007e60:	08007ee5 	.word	0x08007ee5
 8007e64:	0800802b 	.word	0x0800802b
 8007e68:	0800802b 	.word	0x0800802b
 8007e6c:	0800802b 	.word	0x0800802b
 8007e70:	08007f27 	.word	0x08007f27
 8007e74:	0800802b 	.word	0x0800802b
 8007e78:	0800802b 	.word	0x0800802b
 8007e7c:	0800802b 	.word	0x0800802b
 8007e80:	08007f67 	.word	0x08007f67
 8007e84:	0800802b 	.word	0x0800802b
 8007e88:	0800802b 	.word	0x0800802b
 8007e8c:	0800802b 	.word	0x0800802b
 8007e90:	08007fa9 	.word	0x08007fa9
 8007e94:	0800802b 	.word	0x0800802b
 8007e98:	0800802b 	.word	0x0800802b
 8007e9c:	0800802b 	.word	0x0800802b
 8007ea0:	08007fe9 	.word	0x08007fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fadc 	bl	8008468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0204 	bic.w	r2, r2, #4
 8007ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6999      	ldr	r1, [r3, #24]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	619a      	str	r2, [r3, #24]
      break;
 8007ee2:	e0a5      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fb38 	bl	8008560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6999      	ldr	r1, [r3, #24]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	021a      	lsls	r2, r3, #8
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	619a      	str	r2, [r3, #24]
      break;
 8007f24:	e084      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fb91 	bl	8008654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0208 	orr.w	r2, r2, #8
 8007f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0204 	bic.w	r2, r2, #4
 8007f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69d9      	ldr	r1, [r3, #28]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	61da      	str	r2, [r3, #28]
      break;
 8007f64:	e064      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fbe9 	bl	8008744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69da      	ldr	r2, [r3, #28]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69d9      	ldr	r1, [r3, #28]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	021a      	lsls	r2, r3, #8
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	61da      	str	r2, [r3, #28]
      break;
 8007fa6:	e043      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fc26 	bl	8008800 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0208 	orr.w	r2, r2, #8
 8007fc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0204 	bic.w	r2, r2, #4
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fe6:	e023      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fc5e 	bl	80088b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	021a      	lsls	r2, r3, #8
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008028:	e002      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
      break;
 800802e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop

08008044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIM_ConfigClockSource+0x1c>
 800805c:	2302      	movs	r3, #2
 800805e:	e0b6      	b.n	80081ce <HAL_TIM_ConfigClockSource+0x18a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800807e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800808a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809c:	d03e      	beq.n	800811c <HAL_TIM_ConfigClockSource+0xd8>
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a2:	f200 8087 	bhi.w	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	f000 8086 	beq.w	80081ba <HAL_TIM_ConfigClockSource+0x176>
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d87f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080b4:	2b70      	cmp	r3, #112	; 0x70
 80080b6:	d01a      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xaa>
 80080b8:	2b70      	cmp	r3, #112	; 0x70
 80080ba:	d87b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080bc:	2b60      	cmp	r3, #96	; 0x60
 80080be:	d050      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x11e>
 80080c0:	2b60      	cmp	r3, #96	; 0x60
 80080c2:	d877      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080c4:	2b50      	cmp	r3, #80	; 0x50
 80080c6:	d03c      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xfe>
 80080c8:	2b50      	cmp	r3, #80	; 0x50
 80080ca:	d873      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d058      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x13e>
 80080d0:	2b40      	cmp	r3, #64	; 0x40
 80080d2:	d86f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080d4:	2b30      	cmp	r3, #48	; 0x30
 80080d6:	d064      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15e>
 80080d8:	2b30      	cmp	r3, #48	; 0x30
 80080da:	d86b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d060      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15e>
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d867      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05c      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15e>
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	d05a      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15e>
 80080ec:	e062      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080fe:	f000 fcab 	bl	8008a58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	609a      	str	r2, [r3, #8]
      break;
 800811a:	e04f      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800812c:	f000 fc94 	bl	8008a58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800813e:	609a      	str	r2, [r3, #8]
      break;
 8008140:	e03c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	461a      	mov	r2, r3
 8008150:	f000 fc08 	bl	8008964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2150      	movs	r1, #80	; 0x50
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fc61 	bl	8008a22 <TIM_ITRx_SetConfig>
      break;
 8008160:	e02c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800816e:	461a      	mov	r2, r3
 8008170:	f000 fc27 	bl	80089c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2160      	movs	r1, #96	; 0x60
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fc51 	bl	8008a22 <TIM_ITRx_SetConfig>
      break;
 8008180:	e01c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	461a      	mov	r2, r3
 8008190:	f000 fbe8 	bl	8008964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2140      	movs	r1, #64	; 0x40
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fc41 	bl	8008a22 <TIM_ITRx_SetConfig>
      break;
 80081a0:	e00c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f000 fc38 	bl	8008a22 <TIM_ITRx_SetConfig>
      break;
 80081b2:	e003      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e000      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80081ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d107      	bne.n	8008226 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008224:	e02a      	b.n	800827c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d107      	bne.n	8008240 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2202      	movs	r2, #2
 8008234:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823e:	e01d      	b.n	800827c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	d107      	bne.n	800825a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2204      	movs	r2, #4
 800824e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008258:	e010      	b.n	800827c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d107      	bne.n	8008274 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2208      	movs	r2, #8
 8008268:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008272:	e003      	b.n	800827c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff ffb4 	bl	80081ea <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	771a      	strb	r2, [r3, #28]
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d10b      	bne.n	80082c0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d136      	bne.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082be:	e031      	b.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d10b      	bne.n	80082e2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2202      	movs	r2, #2
 80082ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d125      	bne.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e0:	e020      	b.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d10b      	bne.n	8008304 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2204      	movs	r2, #4
 80082f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d114      	bne.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008302:	e00f      	b.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d10a      	bne.n	8008324 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2208      	movs	r2, #8
 8008312:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f001 fab1 	bl	800988c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d103      	bne.n	8008358 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	771a      	strb	r2, [r3, #28]
 8008356:	e019      	b.n	800838c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d103      	bne.n	800836a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2202      	movs	r2, #2
 8008366:	771a      	strb	r2, [r3, #28]
 8008368:	e010      	b.n	800838c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d103      	bne.n	800837c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2204      	movs	r2, #4
 8008378:	771a      	strb	r2, [r3, #28]
 800837a:	e007      	b.n	800838c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d102      	bne.n	800838c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2208      	movs	r2, #8
 800838a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff ff22 	bl	80081d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a2a      	ldr	r2, [pc, #168]	; (800845c <TIM_Base_SetConfig+0xbc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0x20>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083be:	d108      	bne.n	80083d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a21      	ldr	r2, [pc, #132]	; (800845c <TIM_Base_SetConfig+0xbc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00b      	beq.n	80083f2 <TIM_Base_SetConfig+0x52>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d007      	beq.n	80083f2 <TIM_Base_SetConfig+0x52>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <TIM_Base_SetConfig+0xc0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_Base_SetConfig+0x52>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <TIM_Base_SetConfig+0xc4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d108      	bne.n	8008404 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a0c      	ldr	r2, [pc, #48]	; (800845c <TIM_Base_SetConfig+0xbc>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_Base_SetConfig+0xa0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a0b      	ldr	r2, [pc, #44]	; (8008460 <TIM_Base_SetConfig+0xc0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0xa0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a0a      	ldr	r2, [pc, #40]	; (8008464 <TIM_Base_SetConfig+0xc4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40014000 	.word	0x40014000
 8008464:	40014400 	.word	0x40014400

08008468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f023 0201 	bic.w	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f023 0302 	bic.w	r3, r3, #2
 80084b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a24      	ldr	r2, [pc, #144]	; (8008554 <TIM_OC1_SetConfig+0xec>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d007      	beq.n	80084d8 <TIM_OC1_SetConfig+0x70>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a23      	ldr	r2, [pc, #140]	; (8008558 <TIM_OC1_SetConfig+0xf0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_OC1_SetConfig+0x70>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a22      	ldr	r2, [pc, #136]	; (800855c <TIM_OC1_SetConfig+0xf4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d10c      	bne.n	80084f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f023 0308 	bic.w	r3, r3, #8
 80084de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f023 0304 	bic.w	r3, r3, #4
 80084f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a17      	ldr	r2, [pc, #92]	; (8008554 <TIM_OC1_SetConfig+0xec>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_OC1_SetConfig+0xa2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a16      	ldr	r2, [pc, #88]	; (8008558 <TIM_OC1_SetConfig+0xf0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC1_SetConfig+0xa2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a15      	ldr	r2, [pc, #84]	; (800855c <TIM_OC1_SetConfig+0xf4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d111      	bne.n	800852e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	40012c00 	.word	0x40012c00
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400

08008560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f023 0210 	bic.w	r2, r3, #16
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f023 0320 	bic.w	r3, r3, #32
 80085ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a22      	ldr	r2, [pc, #136]	; (8008648 <TIM_OC2_SetConfig+0xe8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10d      	bne.n	80085e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a19      	ldr	r2, [pc, #100]	; (8008648 <TIM_OC2_SetConfig+0xe8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_OC2_SetConfig+0x98>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a18      	ldr	r2, [pc, #96]	; (800864c <TIM_OC2_SetConfig+0xec>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_OC2_SetConfig+0x98>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a17      	ldr	r2, [pc, #92]	; (8008650 <TIM_OC2_SetConfig+0xf0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d113      	bne.n	8008620 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40012c00 	.word	0x40012c00
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400

08008654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a21      	ldr	r2, [pc, #132]	; (8008738 <TIM_OC3_SetConfig+0xe4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d10d      	bne.n	80086d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a18      	ldr	r2, [pc, #96]	; (8008738 <TIM_OC3_SetConfig+0xe4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <TIM_OC3_SetConfig+0x96>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a17      	ldr	r2, [pc, #92]	; (800873c <TIM_OC3_SetConfig+0xe8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_OC3_SetConfig+0x96>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a16      	ldr	r2, [pc, #88]	; (8008740 <TIM_OC3_SetConfig+0xec>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d113      	bne.n	8008712 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4313      	orrs	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	621a      	str	r2, [r3, #32]
}
 800872c:	bf00      	nop
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40012c00 	.word	0x40012c00
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400

08008744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	031b      	lsls	r3, r3, #12
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a14      	ldr	r2, [pc, #80]	; (80087f4 <TIM_OC4_SetConfig+0xb0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d007      	beq.n	80087b8 <TIM_OC4_SetConfig+0x74>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <TIM_OC4_SetConfig+0xb4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d003      	beq.n	80087b8 <TIM_OC4_SetConfig+0x74>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a12      	ldr	r2, [pc, #72]	; (80087fc <TIM_OC4_SetConfig+0xb8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d109      	bne.n	80087cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	621a      	str	r2, [r3, #32]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400

08008800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	4313      	orrs	r3, r2
 8008850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <TIM_OC5_SetConfig+0xa4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d007      	beq.n	800886a <TIM_OC5_SetConfig+0x6a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a12      	ldr	r2, [pc, #72]	; (80088a8 <TIM_OC5_SetConfig+0xa8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_OC5_SetConfig+0x6a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <TIM_OC5_SetConfig+0xac>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d109      	bne.n	800887e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008870:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	621a      	str	r2, [r3, #32]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400

080088b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	051b      	lsls	r3, r3, #20
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <TIM_OC6_SetConfig+0xa8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d007      	beq.n	800891c <TIM_OC6_SetConfig+0x6c>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a13      	ldr	r2, [pc, #76]	; (800895c <TIM_OC6_SetConfig+0xac>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_OC6_SetConfig+0x6c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a12      	ldr	r2, [pc, #72]	; (8008960 <TIM_OC6_SetConfig+0xb0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d109      	bne.n	8008930 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	029b      	lsls	r3, r3, #10
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	621a      	str	r2, [r3, #32]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40014000 	.word	0x40014000
 8008960:	40014400 	.word	0x40014400

08008964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0201 	bic.w	r2, r3, #1
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800898e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f023 030a 	bic.w	r3, r3, #10
 80089a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	621a      	str	r2, [r3, #32]
}
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b087      	sub	sp, #28
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	f023 0210 	bic.w	r2, r3, #16
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	031b      	lsls	r3, r3, #12
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f043 0307 	orr.w	r3, r3, #7
 8008a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	609a      	str	r2, [r3, #8]
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	021a      	lsls	r2, r3, #8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	609a      	str	r2, [r3, #8]
}
 8008a8c:	bf00      	nop
 8008a8e:	371c      	adds	r7, #28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	2201      	movs	r2, #1
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1a      	ldr	r2, [r3, #32]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	401a      	ands	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1a      	ldr	r2, [r3, #32]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e04f      	b.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a21      	ldr	r2, [pc, #132]	; (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d108      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b64:	d004      	beq.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a10      	ldr	r2, [pc, #64]	; (8008bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10c      	bne.n	8008b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40014000 	.word	0x40014000

08008bb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e060      	b.n	8008c8e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d115      	bne.n	8008c7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40012c00 	.word	0x40012c00

08008ca0 <board_init_common_rtc_init>:
bool 				g_button_press_state[NUM_PUSH_BUTTONS] 	= {false};

extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8008ca4:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008ca6:	4a11      	ldr	r2, [pc, #68]	; (8008cec <board_init_common_rtc_init+0x4c>)
 8008ca8:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008caa:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cb2:	227f      	movs	r2, #127	; 0x7f
 8008cb4:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cb8:	22ff      	movs	r2, #255	; 0xff
 8008cba:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008cc8:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8008cd4:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <board_init_common_rtc_init+0x48>)
 8008cd6:	f7fe fc01 	bl	80074dc <HAL_RTC_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <board_init_common_rtc_init+0x44>
 8008ce0:	f000 f9b7 	bl	8009052 <Error_Handler>
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20001b70 	.word	0x20001b70
 8008cec:	40002800 	.word	0x40002800

08008cf0 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b0ae      	sub	sp, #184	; 0xb8
 8008cf4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008cfa:	2244      	movs	r2, #68	; 0x44
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 f952 	bl	8009fa8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
 8008d10:	60da      	str	r2, [r3, #12]
 8008d12:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	225c      	movs	r2, #92	; 0x5c
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f944 	bl	8009fa8 <memset>

    HAL_PWR_EnableBkUpAccess();
 8008d20:	f7fd f9ee 	bl	8006100 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <SystemClock_Config+0xcc>)
 8008d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2a:	4a24      	ldr	r2, [pc, #144]	; (8008dbc <SystemClock_Config+0xcc>)
 8008d2c:	f023 0318 	bic.w	r3, r3, #24
 8008d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008d34:	2305      	movs	r3, #5
 8008d36:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d3c:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8008d48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fd fabb 	bl	80062c8 <HAL_RCC_OscConfig>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d000      	beq.n	8008d5a <SystemClock_Config+0x6a>
 8008d58:	e7fe      	b.n	8008d58 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d5a:	230f      	movs	r3, #15
 8008d5c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d62:	2300      	movs	r3, #0
 8008d64:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d66:	2300      	movs	r3, #0
 8008d68:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8008d6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d72:	2102      	movs	r1, #2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd febb 	bl	8006af0 <HAL_RCC_ClockConfig>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d000      	beq.n	8008d82 <SystemClock_Config+0x92>
 8008d80:	e7fe      	b.n	8008d80 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d86:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8008d8e:	1d3b      	adds	r3, r7, #4
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe f899 	bl	8006ec8 <HAL_RCCEx_PeriphCLKConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <SystemClock_Config+0xb0>
 8008d9c:	f000 f959 	bl	8009052 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008da0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008da4:	f7fd fa3a 	bl	800621c <HAL_PWREx_ControlVoltageScaling>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <SystemClock_Config+0xc2>
 8008dae:	f000 f950 	bl	8009052 <Error_Handler>
}
 8008db2:	bf00      	nop
 8008db4:	37b8      	adds	r7, #184	; 0xb8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	40021000 	.word	0x40021000

08008dc0 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b0a1      	sub	sp, #132	; 0x84
 8008dc4:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE(); // TODO determine a better place for this clock enable call.
 8008dc6:	4b93      	ldr	r3, [pc, #588]	; (8009014 <board_init_common_timer_init+0x254>)
 8008dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dca:	4a92      	ldr	r2, [pc, #584]	; (8009014 <board_init_common_timer_init+0x254>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6493      	str	r3, [r2, #72]	; 0x48
 8008dd2:	4b90      	ldr	r3, [pc, #576]	; (8009014 <board_init_common_timer_init+0x254>)
 8008dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	609a      	str	r2, [r3, #8]
 8008dea:	60da      	str	r2, [r3, #12]
 8008dec:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008dee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	605a      	str	r2, [r3, #4]
 8008df8:	609a      	str	r2, [r3, #8]
 8008dfa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	605a      	str	r2, [r3, #4]
 8008e06:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	609a      	str	r2, [r3, #8]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	611a      	str	r2, [r3, #16]
 8008e18:	615a      	str	r2, [r3, #20]
 8008e1a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	222c      	movs	r2, #44	; 0x2c
 8008e22:	2100      	movs	r1, #0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f001 f8bf 	bl	8009fa8 <memset>
    g_tim1_handle.Instance = TIM1;
 8008e2a:	4b7b      	ldr	r3, [pc, #492]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e2c:	4a7b      	ldr	r2, [pc, #492]	; (800901c <board_init_common_timer_init+0x25c>)
 8008e2e:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8008e30:	4b79      	ldr	r3, [pc, #484]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e36:	4b78      	ldr	r3, [pc, #480]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8008e3c:	4b76      	ldr	r3, [pc, #472]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e3e:	223b      	movs	r2, #59	; 0x3b
 8008e40:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e42:	4b75      	ldr	r3, [pc, #468]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8008e48:	4b73      	ldr	r3, [pc, #460]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e4e:	4b72      	ldr	r3, [pc, #456]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008e54:	4870      	ldr	r0, [pc, #448]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e56:	f7fe fc53 	bl	8007700 <HAL_TIM_Base_Init>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <board_init_common_timer_init+0xa4>
 8008e60:	f000 f8f7 	bl	8009052 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8008e6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4869      	ldr	r0, [pc, #420]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e72:	f7ff f8e7 	bl	8008044 <HAL_TIM_ConfigClockSource>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <board_init_common_timer_init+0xc0>
 8008e7c:	f000 f8e9 	bl	8009052 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008e80:	4865      	ldr	r0, [pc, #404]	; (8009018 <board_init_common_timer_init+0x258>)
 8008e82:	f7fe fc94 	bl	80077ae <HAL_TIM_PWM_Init>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <board_init_common_timer_init+0xd0>
 8008e8c:	f000 f8e1 	bl	8009052 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e90:	2300      	movs	r3, #0
 8008e92:	653b      	str	r3, [r7, #80]	; 0x50
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008e94:	2300      	movs	r3, #0
 8008e96:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008e9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	485d      	ldr	r0, [pc, #372]	; (8009018 <board_init_common_timer_init+0x258>)
 8008ea4:	f7ff fe1e 	bl	8008ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <board_init_common_timer_init+0xf2>
 8008eae:	f000 f8d0 	bl	8009052 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008eb2:	2360      	movs	r3, #96	; 0x60
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.Pulse = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4850      	ldr	r0, [pc, #320]	; (8009018 <board_init_common_timer_init+0x258>)
 8008ed8:	f7fe ffa0 	bl	8007e1c <HAL_TIM_PWM_ConfigChannel>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <board_init_common_timer_init+0x126>
 8008ee2:	f000 f8b6 	bl	8009052 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8008ee6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008eea:	2204      	movs	r2, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	484a      	ldr	r0, [pc, #296]	; (8009018 <board_init_common_timer_init+0x258>)
 8008ef0:	f7fe ff94 	bl	8007e1c <HAL_TIM_PWM_ConfigChannel>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <board_init_common_timer_init+0x13e>
 8008efa:	f000 f8aa 	bl	8009052 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8008efe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f02:	2208      	movs	r2, #8
 8008f04:	4619      	mov	r1, r3
 8008f06:	4844      	ldr	r0, [pc, #272]	; (8009018 <board_init_common_timer_init+0x258>)
 8008f08:	f7fe ff88 	bl	8007e1c <HAL_TIM_PWM_ConfigChannel>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <board_init_common_timer_init+0x156>
 8008f12:	f000 f89e 	bl	8009052 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.DeadTime = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f2e:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    sBreakDeadTimeConfig.Break2Filter = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4832      	ldr	r0, [pc, #200]	; (8009018 <board_init_common_timer_init+0x258>)
 8008f4e:	f7ff fe2f 	bl	8008bb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <board_init_common_timer_init+0x19c>
 8008f58:	f000 f87b 	bl	8009052 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	482e      	ldr	r0, [pc, #184]	; (8009018 <board_init_common_timer_init+0x258>)
 8008f60:	f7fe fe74 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8008f64:	2104      	movs	r1, #4
 8008f66:	482c      	ldr	r0, [pc, #176]	; (8009018 <board_init_common_timer_init+0x258>)
 8008f68:	f7fe fe70 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8008f6c:	2108      	movs	r1, #8
 8008f6e:	482a      	ldr	r0, [pc, #168]	; (8009018 <board_init_common_timer_init+0x258>)
 8008f70:	f7fe fe6c 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = gpio_config_pin_lookup(GPIO_PIN_TIM1_CH1) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH2) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH3);
 8008f74:	2008      	movs	r0, #8
 8008f76:	f000 f8a9 	bl	80090cc <gpio_config_pin_lookup>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	2009      	movs	r0, #9
 8008f80:	f000 f8a4 	bl	80090cc <gpio_config_pin_lookup>
 8008f84:	4603      	mov	r3, r0
 8008f86:	4323      	orrs	r3, r4
 8008f88:	b29c      	uxth	r4, r3
 8008f8a:	200a      	movs	r0, #10
 8008f8c:	f000 f89e 	bl	80090cc <gpio_config_pin_lookup>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4323      	orrs	r3, r4
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(gpio_config_port_lookup(GPIO_PIN_TIM1_CH1), &GPIO_InitStruct); // all timer pins are on the same port!
 8008fa8:	2008      	movs	r0, #8
 8008faa:	f000 f87d 	bl	80090a8 <gpio_config_port_lookup>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fc fee0 	bl	8005d7c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	200c      	movs	r0, #12
 8008fc2:	f7fc fc16 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008fc6:	200c      	movs	r0, #12
 8008fc8:	f7fc fc2f 	bl	800582a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008fcc:	2200      	movs	r2, #0
 8008fce:	2100      	movs	r1, #0
 8008fd0:	200d      	movs	r0, #13
 8008fd2:	f7fc fc0e 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008fd6:	200d      	movs	r0, #13
 8008fd8:	f7fc fc27 	bl	800582a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	200f      	movs	r0, #15
 8008fe2:	f7fc fc06 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008fe6:	200f      	movs	r0, #15
 8008fe8:	f7fc fc1f 	bl	800582a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008fec:	2200      	movs	r2, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7fc fbfe 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008ff6:	2010      	movs	r0, #16
 8008ff8:	f7fc fc17 	bl	800582a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	2011      	movs	r0, #17
 8009002:	f7fc fbf6 	bl	80057f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009006:	2011      	movs	r0, #17
 8009008:	f7fc fc0f 	bl	800582a <HAL_NVIC_EnableIRQ>
}
 800900c:	bf00      	nop
 800900e:	3784      	adds	r7, #132	; 0x84
 8009010:	46bd      	mov	sp, r7
 8009012:	bd90      	pop	{r4, r7, pc}
 8009014:	40021000 	.word	0x40021000
 8009018:	20001b94 	.word	0x20001b94
 800901c:	40012c00 	.word	0x40012c00

08009020 <board_init_common_board_init>:
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
}


void board_init_common_board_init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
    srand(time(0)); // TODO determine a better seed.  Analog input noise would be superb!
 8009024:	2000      	movs	r0, #0
 8009026:	f000 ffc7 	bl	8009fb8 <time>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4613      	mov	r3, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fe8b 	bl	8009d4c <srand>

    HAL_Init();
 8009036:	f7fc fa59 	bl	80054ec <HAL_Init>
    SystemClock_Config(); // 32.768 kHz LSE, 48 MHz HSE enabled by default.
 800903a:	f7ff fe59 	bl	8008cf0 <SystemClock_Config>

    gpio_config_hal_setup();
 800903e:	f000 f857 	bl	80090f0 <gpio_config_hal_setup>
#if defined(BOARD_SPUDGLO_V5)
    board_init_peripheral_setup(); // TODO determine whether to continue supporting boards that don't have peripheral access or not...
#endif
    board_init_common_timer_init(); // TODO determine if timer should be part of a separate config file??
 8009042:	f7ff febd 	bl	8008dc0 <board_init_common_timer_init>
    ws2812b_init();
 8009046:	f7f8 fdf1 	bl	8001c2c <ws2812b_init>
    board_init_common_rtc_init();
 800904a:	f7ff fe29 	bl	8008ca0 <board_init_common_rtc_init>
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}

08009052 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009052:	b480      	push	{r7}
 8009054:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009056:	b672      	cpsid	i
}
 8009058:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800905a:	e7fe      	b.n	800905a <Error_Handler+0x8>

0800905c <gpio_access_hal_input_is_low>:
    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
}


bool gpio_access_hal_input_is_low(gpio_pin_e pin)
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
	return ((GPIO_PIN_RESET == HAL_GPIO_ReadPin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin))) ? true : false);
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	4a0e      	ldr	r2, [pc, #56]	; (80090a4 <gpio_access_hal_input_is_low+0x48>)
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	4413      	add	r3, r2
 800906e:	3304      	adds	r3, #4
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	4a0b      	ldr	r2, [pc, #44]	; (80090a4 <gpio_access_hal_input_is_low+0x48>)
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f824 	bl	80090cc <gpio_config_pin_lookup>
 8009084:	4603      	mov	r3, r0
 8009086:	4619      	mov	r1, r3
 8009088:	4620      	mov	r0, r4
 800908a:	f7fc fff1 	bl	8006070 <HAL_GPIO_ReadPin>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd90      	pop	{r4, r7, pc}
 80090a2:	bf00      	nop
 80090a4:	0800ae74 	.word	0x0800ae74

080090a8 <gpio_config_port_lookup>:
	}
}


port_t gpio_config_port_lookup(gpio_pin_e pin)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
	return g_gpio_port_lookup_table[pin];
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	4a04      	ldr	r2, [pc, #16]	; (80090c8 <gpio_config_port_lookup+0x20>)
 80090b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	0800acfc 	.word	0x0800acfc

080090cc <gpio_config_pin_lookup>:


uint16_t gpio_config_pin_lookup(gpio_pin_e pin)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
	return g_gpio_lookup_table[pin];
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	4a04      	ldr	r2, [pc, #16]	; (80090ec <gpio_config_pin_lookup+0x20>)
 80090da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	0800adcc 	.word	0x0800adcc

080090f0 <gpio_config_hal_setup>:


void gpio_config_hal_setup(void)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b08b      	sub	sp, #44	; 0x2c
 80090f4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090f6:	4b9b      	ldr	r3, [pc, #620]	; (8009364 <gpio_config_hal_setup+0x274>)
 80090f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fa:	4a9a      	ldr	r2, [pc, #616]	; (8009364 <gpio_config_hal_setup+0x274>)
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009102:	4b98      	ldr	r3, [pc, #608]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800910e:	4b95      	ldr	r3, [pc, #596]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009112:	4a94      	ldr	r2, [pc, #592]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009114:	f043 0302 	orr.w	r3, r3, #2
 8009118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800911a:	4b92      	ldr	r3, [pc, #584]	; (8009364 <gpio_config_hal_setup+0x274>)
 800911c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	60bb      	str	r3, [r7, #8]
 8009124:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009126:	4b8f      	ldr	r3, [pc, #572]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912a:	4a8e      	ldr	r2, [pc, #568]	; (8009364 <gpio_config_hal_setup+0x274>)
 800912c:	f043 0304 	orr.w	r3, r3, #4
 8009130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009132:	4b8c      	ldr	r3, [pc, #560]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800913e:	4b89      	ldr	r3, [pc, #548]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009142:	4a88      	ldr	r2, [pc, #544]	; (8009364 <gpio_config_hal_setup+0x274>)
 8009144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800914a:	4b86      	ldr	r3, [pc, #536]	; (8009364 <gpio_config_hal_setup+0x274>)
 800914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	683b      	ldr	r3, [r7, #0]

	bool enable_interrupt = false;
 8009156:	2300      	movs	r3, #0
 8009158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool gpio_setup = false;
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 8009162:	2300      	movs	r3, #0
 8009164:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009168:	e0f2      	b.n	8009350 <gpio_config_hal_setup+0x260>
    {
    	gpio_setup = true;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	GPIO_InitStruct.Pin = g_gpio_lookup_table[pin];
 8009170:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009174:	4a7c      	ldr	r2, [pc, #496]	; (8009368 <gpio_config_hal_setup+0x278>)
 8009176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800917a:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Pull = GPIO_NOPULL; // initially set no pullup here..
 800917c:	2300      	movs	r3, #0
 800917e:	61bb      	str	r3, [r7, #24]
    	if (GPIO_CONFIG_INTERRUPT_MODE_ENABLE == g_gpio_config[pin].interrupt_mode)
 8009180:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009184:	4a79      	ldr	r2, [pc, #484]	; (800936c <gpio_config_hal_setup+0x27c>)
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	4413      	add	r3, r2
 800918a:	330a      	adds	r3, #10
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d103      	bne.n	800919a <gpio_config_hal_setup+0xaa>
    	{
    		enable_interrupt = true;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009198:	e002      	b.n	80091a0 <gpio_config_hal_setup+0xb0>
    	}
    	else
    	{
    		enable_interrupt = false;
 800919a:	2300      	movs	r3, #0
 800919c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	}
		switch (g_gpio_config[pin].mode)
 80091a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80091a4:	4a71      	ldr	r2, [pc, #452]	; (800936c <gpio_config_hal_setup+0x27c>)
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	4413      	add	r3, r2
 80091aa:	3308      	adds	r3, #8
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b06      	cmp	r3, #6
 80091b0:	d829      	bhi.n	8009206 <gpio_config_hal_setup+0x116>
 80091b2:	a201      	add	r2, pc, #4	; (adr r2, 80091b8 <gpio_config_hal_setup+0xc8>)
 80091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091e7 	.word	0x080091e7
 80091c4:	080091f1 	.word	0x080091f1
 80091c8:	080091fb 	.word	0x080091fb
 80091cc:	08009201 	.word	0x08009201
 80091d0:	080091d5 	.word	0x080091d5
    	{
			case GPIO_CONFIG_MODE_ALTERNATE_FUNCTION: // fall through intentionally!!
    		case GPIO_CONFIG_MODE_NO_SETTING: // do nothing!
    			gpio_setup = false;
 80091d4:	2300      	movs	r3, #0
 80091d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    		break;
 80091da:	e015      	b.n	8009208 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_FLOAT:
    			GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
    		    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]
    		break;
 80091e4:	e010      	b.n	8009208 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLDOWN:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80091ea:	2302      	movs	r3, #2
 80091ec:	61bb      	str	r3, [r7, #24]
			break;
 80091ee:	e00b      	b.n	8009208 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLUP:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80091f4:	2301      	movs	r3, #1
 80091f6:	61bb      	str	r3, [r7, #24]
			break;
 80091f8:	e006      	b.n	8009208 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_OUTPUT_PUSHPULL:
    			GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80091fa:	2301      	movs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
    		break;
 80091fe:	e003      	b.n	8009208 <gpio_config_hal_setup+0x118>
			case GPIO_CONFIG_MODE_OUTPUT_OPEN_DRAIN:
				GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8009200:	2311      	movs	r3, #17
 8009202:	617b      	str	r3, [r7, #20]
			break;
 8009204:	e000      	b.n	8009208 <gpio_config_hal_setup+0x118>
				// these alternate function settings are expected to be made in the peripheral setup files
			default:
			break;
 8009206:	bf00      	nop
    	}
		if (enable_interrupt)
 8009208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800920c:	2b00      	cmp	r3, #0
 800920e:	d048      	beq.n	80092a2 <gpio_config_hal_setup+0x1b2>
		{
			switch (g_gpio_config[pin].interrupt_edge)
 8009210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009214:	4a55      	ldr	r2, [pc, #340]	; (800936c <gpio_config_hal_setup+0x27c>)
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	4413      	add	r3, r2
 800921a:	330b      	adds	r3, #11
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d00e      	beq.n	8009240 <gpio_config_hal_setup+0x150>
 8009222:	2b02      	cmp	r3, #2
 8009224:	dc10      	bgt.n	8009248 <gpio_config_hal_setup+0x158>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <gpio_config_hal_setup+0x140>
 800922a:	2b01      	cmp	r3, #1
 800922c:	d004      	beq.n	8009238 <gpio_config_hal_setup+0x148>
				break;
				case GPIO_CONFIG_INTERRUPT_EDGE_RISING_FALLING:
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
				break;
				default:
				break;
 800922e:	e00b      	b.n	8009248 <gpio_config_hal_setup+0x158>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_FALLING;
 8009230:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009234:	617b      	str	r3, [r7, #20]
				break;
 8009236:	e008      	b.n	800924a <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_RISING;
 8009238:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800923c:	617b      	str	r3, [r7, #20]
				break;
 800923e:	e004      	b.n	800924a <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
 8009240:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009244:	617b      	str	r3, [r7, #20]
				break;
 8009246:	e000      	b.n	800924a <gpio_config_hal_setup+0x15a>
				break;
 8009248:	bf00      	nop
			}
			__HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800924a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800924e:	4a47      	ldr	r2, [pc, #284]	; (800936c <gpio_config_hal_setup+0x27c>)
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	4413      	add	r3, r2
 8009254:	330c      	adds	r3, #12
 8009256:	f993 2000 	ldrsb.w	r2, [r3]
 800925a:	4b45      	ldr	r3, [pc, #276]	; (8009370 <gpio_config_hal_setup+0x280>)
 800925c:	615a      	str	r2, [r3, #20]
		    HAL_NVIC_SetPriority(g_gpio_config[pin].irqn, 24, 0);
 800925e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009262:	4a42      	ldr	r2, [pc, #264]	; (800936c <gpio_config_hal_setup+0x27c>)
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	4413      	add	r3, r2
 8009268:	330c      	adds	r3, #12
 800926a:	f993 3000 	ldrsb.w	r3, [r3]
 800926e:	2200      	movs	r2, #0
 8009270:	2118      	movs	r1, #24
 8009272:	4618      	mov	r0, r3
 8009274:	f7fc fabd 	bl	80057f2 <HAL_NVIC_SetPriority>
		    HAL_NVIC_EnableIRQ(g_gpio_config[pin].irqn);
 8009278:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800927c:	4a3b      	ldr	r2, [pc, #236]	; (800936c <gpio_config_hal_setup+0x27c>)
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	4413      	add	r3, r2
 8009282:	330c      	adds	r3, #12
 8009284:	f993 3000 	ldrsb.w	r3, [r3]
 8009288:	4618      	mov	r0, r3
 800928a:	f7fc face 	bl	800582a <HAL_NVIC_EnableIRQ>
		    __HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800928e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009292:	4a36      	ldr	r2, [pc, #216]	; (800936c <gpio_config_hal_setup+0x27c>)
 8009294:	011b      	lsls	r3, r3, #4
 8009296:	4413      	add	r3, r2
 8009298:	330c      	adds	r3, #12
 800929a:	f993 2000 	ldrsb.w	r2, [r3]
 800929e:	4b34      	ldr	r3, [pc, #208]	; (8009370 <gpio_config_hal_setup+0x280>)
 80092a0:	615a      	str	r2, [r3, #20]
		}
		if (gpio_setup)
 80092a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d04d      	beq.n	8009346 <gpio_config_hal_setup+0x256>
		{
		    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
 80092aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092ae:	4a2f      	ldr	r2, [pc, #188]	; (800936c <gpio_config_hal_setup+0x27c>)
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	4413      	add	r3, r2
 80092b4:	3304      	adds	r3, #4
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f107 0210 	add.w	r2, r7, #16
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fc fd5c 	bl	8005d7c <HAL_GPIO_Init>
		    if (GPIO_CONFIG_MODE_OUTPUT_PUSHPULL == g_gpio_config[pin].mode)
 80092c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092c8:	4a28      	ldr	r2, [pc, #160]	; (800936c <gpio_config_hal_setup+0x27c>)
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	4413      	add	r3, r2
 80092ce:	3308      	adds	r3, #8
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d137      	bne.n	8009346 <gpio_config_hal_setup+0x256>
		    {
		    	if (GPIO_CONFIG_OUTPUT_LVL_RESET == g_gpio_config[pin].lvl)
 80092d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092da:	4a24      	ldr	r2, [pc, #144]	; (800936c <gpio_config_hal_setup+0x27c>)
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4413      	add	r3, r2
 80092e0:	3309      	adds	r3, #9
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d117      	bne.n	8009318 <gpio_config_hal_setup+0x228>
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin), GPIO_PIN_RESET);
 80092e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092ec:	4a1f      	ldr	r2, [pc, #124]	; (800936c <gpio_config_hal_setup+0x27c>)
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	4413      	add	r3, r2
 80092f2:	3304      	adds	r3, #4
 80092f4:	681c      	ldr	r4, [r3, #0]
 80092f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80092fa:	4a1c      	ldr	r2, [pc, #112]	; (800936c <gpio_config_hal_setup+0x27c>)
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff fee1 	bl	80090cc <gpio_config_pin_lookup>
 800930a:	4603      	mov	r3, r0
 800930c:	2200      	movs	r2, #0
 800930e:	4619      	mov	r1, r3
 8009310:	4620      	mov	r0, r4
 8009312:	f7fc fec5 	bl	80060a0 <HAL_GPIO_WritePin>
 8009316:	e016      	b.n	8009346 <gpio_config_hal_setup+0x256>
				}
				else
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin), GPIO_PIN_SET);
 8009318:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <gpio_config_hal_setup+0x27c>)
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	681c      	ldr	r4, [r3, #0]
 8009326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800932a:	4a10      	ldr	r2, [pc, #64]	; (800936c <gpio_config_hal_setup+0x27c>)
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	4413      	add	r3, r2
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fec9 	bl	80090cc <gpio_config_pin_lookup>
 800933a:	4603      	mov	r3, r0
 800933c:	2201      	movs	r2, #1
 800933e:	4619      	mov	r1, r3
 8009340:	4620      	mov	r0, r4
 8009342:	f7fc fead 	bl	80060a0 <HAL_GPIO_WritePin>
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 8009346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800934a:	3301      	adds	r3, #1
 800934c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009350:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009354:	2b33      	cmp	r3, #51	; 0x33
 8009356:	f67f af08 	bls.w	800916a <gpio_config_hal_setup+0x7a>
				}
		    }
		}
    }
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	372c      	adds	r7, #44	; 0x2c
 8009360:	46bd      	mov	sp, r7
 8009362:	bd90      	pop	{r4, r7, pc}
 8009364:	40021000 	.word	0x40021000
 8009368:	0800adcc 	.word	0x0800adcc
 800936c:	0800ae74 	.word	0x0800ae74
 8009370:	40010400 	.word	0x40010400

08009374 <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
#if defined (BOARD_SPUDGLO_V5)
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
#endif
}
 8009378:	bf00      	nop
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
	...

08009384 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009388:	4a08      	ldr	r2, [pc, #32]	; (80093ac <HAL_Set_DMA_Callbacks+0x28>)
 800938a:	2100      	movs	r1, #0
 800938c:	4808      	ldr	r0, [pc, #32]	; (80093b0 <HAL_Set_DMA_Callbacks+0x2c>)
 800938e:	f7fc fc7d 	bl	8005c8c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009392:	4a06      	ldr	r2, [pc, #24]	; (80093ac <HAL_Set_DMA_Callbacks+0x28>)
 8009394:	2100      	movs	r1, #0
 8009396:	4807      	ldr	r0, [pc, #28]	; (80093b4 <HAL_Set_DMA_Callbacks+0x30>)
 8009398:	f7fc fc78 	bl	8005c8c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800939c:	4a03      	ldr	r2, [pc, #12]	; (80093ac <HAL_Set_DMA_Callbacks+0x28>)
 800939e:	2100      	movs	r1, #0
 80093a0:	4805      	ldr	r0, [pc, #20]	; (80093b8 <HAL_Set_DMA_Callbacks+0x34>)
 80093a2:	f7fc fc73 	bl	8005c8c <HAL_DMA_RegisterCallback>
}
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	08009883 	.word	0x08009883
 80093b0:	20001a98 	.word	0x20001a98
 80093b4:	20001ae0 	.word	0x20001ae0
 80093b8:	20001b28 	.word	0x20001b28

080093bc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093cc:	4b13      	ldr	r3, [pc, #76]	; (800941c <HAL_MspInit+0x60>)
 80093ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d0:	4a12      	ldr	r2, [pc, #72]	; (800941c <HAL_MspInit+0x60>)
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	6613      	str	r3, [r2, #96]	; 0x60
 80093d8:	4b10      	ldr	r3, [pc, #64]	; (800941c <HAL_MspInit+0x60>)
 80093da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	607b      	str	r3, [r7, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <HAL_MspInit+0x60>)
 80093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e8:	4a0c      	ldr	r2, [pc, #48]	; (800941c <HAL_MspInit+0x60>)
 80093ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ee:	6593      	str	r3, [r2, #88]	; 0x58
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_MspInit+0x60>)
 80093f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4618      	mov	r0, r3
 800940a:	f7fc fe89 	bl	8006120 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800940e:	f7fc fee7 	bl	80061e0 <HAL_PWR_EnablePVD>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40021000 	.word	0x40021000

08009420 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a08      	ldr	r2, [pc, #32]	; (8009450 <HAL_RTC_MspInit+0x30>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d107      	bne.n	8009442 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009432:	4b08      	ldr	r3, [pc, #32]	; (8009454 <HAL_RTC_MspInit+0x34>)
 8009434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009438:	4a06      	ldr	r2, [pc, #24]	; (8009454 <HAL_RTC_MspInit+0x34>)
 800943a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800943e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40002800 	.word	0x40002800
 8009454:	40021000 	.word	0x40021000

08009458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a4c      	ldr	r2, [pc, #304]	; (8009598 <HAL_TIM_Base_MspInit+0x140>)
 8009466:	4293      	cmp	r3, r2
 8009468:	f040 8090 	bne.w	800958c <HAL_TIM_Base_MspInit+0x134>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800946c:	4b4b      	ldr	r3, [pc, #300]	; (800959c <HAL_TIM_Base_MspInit+0x144>)
 800946e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009470:	4a4a      	ldr	r2, [pc, #296]	; (800959c <HAL_TIM_Base_MspInit+0x144>)
 8009472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009476:	6613      	str	r3, [r2, #96]	; 0x60
 8009478:	4b48      	ldr	r3, [pc, #288]	; (800959c <HAL_TIM_Base_MspInit+0x144>)
 800947a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    g_hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009484:	4b46      	ldr	r3, [pc, #280]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 8009486:	4a47      	ldr	r2, [pc, #284]	; (80095a4 <HAL_TIM_Base_MspInit+0x14c>)
 8009488:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800948a:	4b45      	ldr	r3, [pc, #276]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 800948c:	2207      	movs	r2, #7
 800948e:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009490:	4b43      	ldr	r3, [pc, #268]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 8009492:	2210      	movs	r2, #16
 8009494:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009496:	4b42      	ldr	r3, [pc, #264]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 8009498:	2200      	movs	r2, #0
 800949a:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800949c:	4b40      	ldr	r3, [pc, #256]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 800949e:	2280      	movs	r2, #128	; 0x80
 80094a0:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094a2:	4b3f      	ldr	r3, [pc, #252]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094a8:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094aa:	4b3d      	ldr	r3, [pc, #244]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094b0:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80094b2:	4b3b      	ldr	r3, [pc, #236]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80094b8:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80094be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch1) != HAL_OK)
 80094c0:	4837      	ldr	r0, [pc, #220]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094c2:	f7fc f9db 	bl	800587c <HAL_DMA_Init>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 80094cc:	f7ff fdc1 	bl	8009052 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],g_hdma_tim1_ch1);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a33      	ldr	r2, [pc, #204]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094d4:	625a      	str	r2, [r3, #36]	; 0x24
 80094d6:	4a32      	ldr	r2, [pc, #200]	; (80095a0 <HAL_TIM_Base_MspInit+0x148>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    g_hdma_tim1_ch2.Instance = DMA1_Channel3;
 80094dc:	4b32      	ldr	r3, [pc, #200]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094de:	4a33      	ldr	r2, [pc, #204]	; (80095ac <HAL_TIM_Base_MspInit+0x154>)
 80094e0:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 80094e2:	4b31      	ldr	r3, [pc, #196]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094e4:	2207      	movs	r2, #7
 80094e6:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094e8:	4b2f      	ldr	r3, [pc, #188]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094ea:	2210      	movs	r2, #16
 80094ec:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80094ee:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80094f4:	4b2c      	ldr	r3, [pc, #176]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094f6:	2280      	movs	r2, #128	; 0x80
 80094f8:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094fa:	4b2b      	ldr	r3, [pc, #172]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 80094fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009500:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009502:	4b29      	ldr	r3, [pc, #164]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 8009504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009508:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800950a:	4b27      	ldr	r3, [pc, #156]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 800950c:	2200      	movs	r2, #0
 800950e:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009510:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 8009512:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch2) != HAL_OK)
 8009518:	4823      	ldr	r0, [pc, #140]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 800951a:	f7fc f9af 	bl	800587c <HAL_DMA_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009524:	f7ff fd95 	bl	8009052 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],g_hdma_tim1_ch2);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1f      	ldr	r2, [pc, #124]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 800952c:	629a      	str	r2, [r3, #40]	; 0x28
 800952e:	4a1e      	ldr	r2, [pc, #120]	; (80095a8 <HAL_TIM_Base_MspInit+0x150>)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    g_hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009534:	4b1e      	ldr	r3, [pc, #120]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009536:	4a1f      	ldr	r2, [pc, #124]	; (80095b4 <HAL_TIM_Base_MspInit+0x15c>)
 8009538:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800953a:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 800953c:	2207      	movs	r2, #7
 800953e:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009540:	4b1b      	ldr	r3, [pc, #108]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009542:	2210      	movs	r2, #16
 8009544:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009546:	4b1a      	ldr	r3, [pc, #104]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009548:	2200      	movs	r2, #0
 800954a:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800954c:	4b18      	ldr	r3, [pc, #96]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 800954e:	2280      	movs	r2, #128	; 0x80
 8009550:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009552:	4b17      	ldr	r3, [pc, #92]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009558:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800955a:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 800955c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009560:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009564:	2200      	movs	r2, #0
 8009566:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009568:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 800956a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800956e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch3) != HAL_OK)
 8009570:	480f      	ldr	r0, [pc, #60]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009572:	f7fc f983 	bl	800587c <HAL_DMA_Init>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800957c:	f7ff fd69 	bl	8009052 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],g_hdma_tim1_ch3);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a0b      	ldr	r2, [pc, #44]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
 8009586:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <HAL_TIM_Base_MspInit+0x158>)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800958c:	f7ff fefa 	bl	8009384 <HAL_Set_DMA_Callbacks>
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40021000 	.word	0x40021000
 80095a0:	20001a98 	.word	0x20001a98
 80095a4:	4002001c 	.word	0x4002001c
 80095a8:	20001ae0 	.word	0x20001ae0
 80095ac:	40020030 	.word	0x40020030
 80095b0:	20001b28 	.word	0x20001b28
 80095b4:	40020080 	.word	0x40020080

080095b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	71fb      	strb	r3, [r7, #7]
 80095d6:	e005      	b.n	80095e4 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80095d8:	2064      	movs	r0, #100	; 0x64
 80095da:	f7fb ffe7 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	3301      	adds	r3, #1
 80095e2:	71fb      	strb	r3, [r7, #7]
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0f6      	beq.n	80095d8 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80095ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80095ee:	f7fb ffdd 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 80095f2:	e7ee      	b.n	80095d2 <NMI_Handler+0x6>

080095f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	71fb      	strb	r3, [r7, #7]
 80095fe:	e005      	b.n	800960c <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009600:	2064      	movs	r0, #100	; 0x64
 8009602:	f7fb ffd3 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	3301      	adds	r3, #1
 800960a:	71fb      	strb	r3, [r7, #7]
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d9f6      	bls.n	8009600 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009612:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009616:	f7fb ffc9 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800961a:	e7ee      	b.n	80095fa <HardFault_Handler+0x6>

0800961c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8009622:	2300      	movs	r3, #0
 8009624:	71fb      	strb	r3, [r7, #7]
 8009626:	e005      	b.n	8009634 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009628:	2064      	movs	r0, #100	; 0x64
 800962a:	f7fb ffbf 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	3301      	adds	r3, #1
 8009632:	71fb      	strb	r3, [r7, #7]
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d9f6      	bls.n	8009628 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800963a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800963e:	f7fb ffb5 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009642:	e7ee      	b.n	8009622 <MemManage_Handler+0x6>

08009644 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800964a:	2300      	movs	r3, #0
 800964c:	71fb      	strb	r3, [r7, #7]
 800964e:	e005      	b.n	800965c <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009650:	2064      	movs	r0, #100	; 0x64
 8009652:	f7fb ffab 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	3301      	adds	r3, #1
 800965a:	71fb      	strb	r3, [r7, #7]
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d9f6      	bls.n	8009650 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009662:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009666:	f7fb ffa1 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800966a:	e7ee      	b.n	800964a <BusFault_Handler+0x6>

0800966c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 8009672:	2300      	movs	r3, #0
 8009674:	71fb      	strb	r3, [r7, #7]
 8009676:	e005      	b.n	8009684 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009678:	2064      	movs	r0, #100	; 0x64
 800967a:	f7fb ff97 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800967e:	79fb      	ldrb	r3, [r7, #7]
 8009680:	3301      	adds	r3, #1
 8009682:	71fb      	strb	r3, [r7, #7]
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b04      	cmp	r3, #4
 8009688:	d9f6      	bls.n	8009678 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800968a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800968e:	f7fb ff8d 	bl	80055ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8009692:	e7ee      	b.n	8009672 <UsageFault_Handler+0x6>

08009694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
}
 8009698:	bf00      	nop
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af02      	add	r7, sp, #8
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_C;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
#else
    // D is pause
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 80096aa:	2301      	movs	r3, #1
 80096ac:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 80096ae:	2303      	movs	r3, #3
 80096b0:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 80096b2:	2306      	movs	r3, #6
 80096b4:	713b      	strb	r3, [r7, #4]
    //d_passes++;
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fc fd09 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80096be:	797a      	ldrb	r2, [r7, #5]
 80096c0:	797b      	ldrb	r3, [r7, #5]
 80096c2:	4910      	ldr	r1, [pc, #64]	; (8009704 <EXTI0_IRQHandler+0x60>)
 80096c4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80096c8:	490e      	ldr	r1, [pc, #56]	; (8009704 <EXTI0_IRQHandler+0x60>)
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80096d0:	797c      	ldrb	r4, [r7, #5]
 80096d2:	f7fa fa39 	bl	8003b48 <xTaskGetTickCountFromISR>
 80096d6:	4603      	mov	r3, r0
 80096d8:	4a0a      	ldr	r2, [pc, #40]	; (8009704 <EXTI0_IRQHandler+0x60>)
 80096da:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80096de:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fc f8af 	bl	8005846 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <EXTI0_IRQHandler+0x64>)
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	7979      	ldrb	r1, [r7, #5]
 80096ee:	463b      	mov	r3, r7
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	2203      	movs	r2, #3
 80096f6:	f7fa fe45 	bl	8004384 <xTaskGenericNotifyFromISR>
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd90      	pop	{r4, r7, pc}
 8009702:	bf00      	nop
 8009704:	20000150 	.word	0x20000150
 8009708:	20001bf4 	.word	0x20001bf4

0800970c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b085      	sub	sp, #20
 8009710:	af02      	add	r7, sp, #8
	// D is speed!
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_D;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
#else
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 8009712:	2304      	movs	r3, #4
 8009714:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 8009716:	2300      	movs	r3, #0
 8009718:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800971a:	2308      	movs	r3, #8
 800971c:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800971e:	4b15      	ldr	r3, [pc, #84]	; (8009774 <EXTI2_IRQHandler+0x68>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a13      	ldr	r2, [pc, #76]	; (8009774 <EXTI2_IRQHandler+0x68>)
 8009726:	6013      	str	r3, [r2, #0]
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	4618      	mov	r0, r3
 800972c:	f7fc fcd0 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8009730:	797a      	ldrb	r2, [r7, #5]
 8009732:	797b      	ldrb	r3, [r7, #5]
 8009734:	4910      	ldr	r1, [pc, #64]	; (8009778 <EXTI2_IRQHandler+0x6c>)
 8009736:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800973a:	490f      	ldr	r1, [pc, #60]	; (8009778 <EXTI2_IRQHandler+0x6c>)
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	440b      	add	r3, r1
 8009740:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8009742:	797c      	ldrb	r4, [r7, #5]
 8009744:	f7fa fa00 	bl	8003b48 <xTaskGetTickCountFromISR>
 8009748:	4603      	mov	r3, r0
 800974a:	4a0b      	ldr	r2, [pc, #44]	; (8009778 <EXTI2_IRQHandler+0x6c>)
 800974c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009750:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	f7fc f876 	bl	8005846 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <EXTI2_IRQHandler+0x70>)
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	7979      	ldrb	r1, [r7, #5]
 8009760:	463b      	mov	r3, r7
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	2300      	movs	r3, #0
 8009766:	2203      	movs	r2, #3
 8009768:	f7fa fe0c 	bl	8004384 <xTaskGenericNotifyFromISR>
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	bd90      	pop	{r4, r7, pc}
 8009774:	20001be0 	.word	0x20001be0
 8009778:	20000150 	.word	0x20000150
 800977c:	20001bf4 	.word	0x20001bf4

08009780 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b085      	sub	sp, #20
 8009784:	af02      	add	r7, sp, #8
	// B is animation
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 8009786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800978a:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800978c:	2301      	movs	r3, #1
 800978e:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 8009790:	2328      	movs	r3, #40	; 0x28
 8009792:	713b      	strb	r3, [r7, #4]
    b_passes++;
 8009794:	4b15      	ldr	r3, [pc, #84]	; (80097ec <EXTI15_10_IRQHandler+0x6c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	4a14      	ldr	r2, [pc, #80]	; (80097ec <EXTI15_10_IRQHandler+0x6c>)
 800979c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fc fc95 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80097a6:	797a      	ldrb	r2, [r7, #5]
 80097a8:	797b      	ldrb	r3, [r7, #5]
 80097aa:	4911      	ldr	r1, [pc, #68]	; (80097f0 <EXTI15_10_IRQHandler+0x70>)
 80097ac:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80097b0:	490f      	ldr	r1, [pc, #60]	; (80097f0 <EXTI15_10_IRQHandler+0x70>)
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	440b      	add	r3, r1
 80097b6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80097b8:	797c      	ldrb	r4, [r7, #5]
 80097ba:	f7fa f9c5 	bl	8003b48 <xTaskGetTickCountFromISR>
 80097be:	4603      	mov	r3, r0
 80097c0:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <EXTI15_10_IRQHandler+0x70>)
 80097c2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80097c6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fc f83b 	bl	8005846 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80097d0:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <EXTI15_10_IRQHandler+0x74>)
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	7979      	ldrb	r1, [r7, #5]
 80097d6:	463b      	mov	r3, r7
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	2300      	movs	r3, #0
 80097dc:	2203      	movs	r2, #3
 80097de:	f7fa fdd1 	bl	8004384 <xTaskGenericNotifyFromISR>
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20001be4 	.word	0x20001be4
 80097f0:	20000150 	.word	0x20000150
 80097f4:	20001bf4 	.word	0x20001bf4

080097f8 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af02      	add	r7, sp, #8
    board_init_push_buttons_e button = PUSH_BUTTON_A;
    board_init_push_button_irq_e button_irq = gpio_config_irqn_lookup(GPIO_PIN_PUSH_BUTTON_A);
    a_passes++;
#else
    // C is color
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 80097fe:	2320      	movs	r3, #32
 8009800:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 8009802:	2302      	movs	r3, #2
 8009804:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 8009806:	2317      	movs	r3, #23
 8009808:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800980a:	4b15      	ldr	r3, [pc, #84]	; (8009860 <EXTI9_5_IRQHandler+0x68>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3301      	adds	r3, #1
 8009810:	4a13      	ldr	r2, [pc, #76]	; (8009860 <EXTI9_5_IRQHandler+0x68>)
 8009812:	6013      	str	r3, [r2, #0]
#endif
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009814:	88fb      	ldrh	r3, [r7, #6]
 8009816:	4618      	mov	r0, r3
 8009818:	f7fc fc5a 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800981c:	797a      	ldrb	r2, [r7, #5]
 800981e:	797b      	ldrb	r3, [r7, #5]
 8009820:	4910      	ldr	r1, [pc, #64]	; (8009864 <EXTI9_5_IRQHandler+0x6c>)
 8009822:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009826:	490f      	ldr	r1, [pc, #60]	; (8009864 <EXTI9_5_IRQHandler+0x6c>)
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	440b      	add	r3, r1
 800982c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800982e:	797c      	ldrb	r4, [r7, #5]
 8009830:	f7fa f98a 	bl	8003b48 <xTaskGetTickCountFromISR>
 8009834:	4603      	mov	r3, r0
 8009836:	4a0b      	ldr	r2, [pc, #44]	; (8009864 <EXTI9_5_IRQHandler+0x6c>)
 8009838:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800983c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009840:	4618      	mov	r0, r3
 8009842:	f7fc f800 	bl	8005846 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009846:	4b08      	ldr	r3, [pc, #32]	; (8009868 <EXTI9_5_IRQHandler+0x70>)
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	7979      	ldrb	r1, [r7, #5]
 800984c:	463b      	mov	r3, r7
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2300      	movs	r3, #0
 8009852:	2203      	movs	r2, #3
 8009854:	f7fa fd96 	bl	8004384 <xTaskGenericNotifyFromISR>
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	bd90      	pop	{r4, r7, pc}
 8009860:	20001be8 	.word	0x20001be8
 8009864:	20000150 	.word	0x20000150
 8009868:	20001bf4 	.word	0x20001bf4

0800986c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	80fb      	strh	r3, [r7, #6]

}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
    while(1);
 800988a:	e7fe      	b.n	800988a <HAL_DMA_CMPLT_CALLBACK+0x8>

0800988c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7f1b      	ldrb	r3, [r3, #28]
 8009898:	2b04      	cmp	r3, #4
 800989a:	d016      	beq.n	80098ca <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800989c:	2b04      	cmp	r3, #4
 800989e:	dc1c      	bgt.n	80098da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d002      	beq.n	80098aa <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d008      	beq.n	80098ba <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 80098a8:	e017      	b.n	80098da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fe f9cd 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	701a      	strb	r2, [r3, #0]
        break;
 80098b8:	e010      	b.n	80098dc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80098ba:	2104      	movs	r1, #4
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7fe f9c5 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	701a      	strb	r2, [r3, #0]
        break;
 80098c8:	e008      	b.n	80098dc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80098ca:	2108      	movs	r1, #8
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fe f9bd 	bl	8007c4c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 80098d2:	4b06      	ldr	r3, [pc, #24]	; (80098ec <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	701a      	strb	r2, [r3, #0]
        break;
 80098d8:	e000      	b.n	80098dc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 80098da:	bf00      	nop
    }
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000099 	.word	0x20000099
 80098e8:	2000009a 	.word	0x2000009a
 80098ec:	2000009b 	.word	0x2000009b

080098f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch1);
 80098f4:	4802      	ldr	r0, [pc, #8]	; (8009900 <DMA1_Channel2_IRQHandler+0x10>)
 80098f6:	f7fc f91a 	bl	8005b2e <HAL_DMA_IRQHandler>
}
 80098fa:	bf00      	nop
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20001a98 	.word	0x20001a98

08009904 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch2);
 8009908:	4802      	ldr	r0, [pc, #8]	; (8009914 <DMA1_Channel3_IRQHandler+0x10>)
 800990a:	f7fc f910 	bl	8005b2e <HAL_DMA_IRQHandler>
}
 800990e:	bf00      	nop
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20001ae0 	.word	0x20001ae0

08009918 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
}
 800991c:	bf00      	nop
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009926:	b480      	push	{r7}
 8009928:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
}
 800992a:	bf00      	nop
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch3);
 8009938:	4802      	ldr	r0, [pc, #8]	; (8009944 <DMA1_Channel7_IRQHandler+0x10>)
 800993a:	f7fc f8f8 	bl	8005b2e <HAL_DMA_IRQHandler>
}
 800993e:	bf00      	nop
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001b28 	.word	0x20001b28

08009948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
	return 1;
 800994c:	2301      	movs	r3, #1
}
 800994e:	4618      	mov	r0, r3
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <_kill>:

int _kill(int pid, int sig)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009962:	f000 fb65 	bl	800a030 <__errno>
 8009966:	4603      	mov	r3, r0
 8009968:	2216      	movs	r2, #22
 800996a:	601a      	str	r2, [r3, #0]
	return -1;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_exit>:

void _exit (int status)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff ffe7 	bl	8009958 <_kill>
	while (1) {}		/* Make sure we hang here */
 800998a:	e7fe      	b.n	800998a <_exit+0x12>

0800998c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e00a      	b.n	80099b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800999e:	f3af 8000 	nop.w
 80099a2:	4601      	mov	r1, r0
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	60ba      	str	r2, [r7, #8]
 80099aa:	b2ca      	uxtb	r2, r1
 80099ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3301      	adds	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dbf0      	blt.n	800999e <_read+0x12>
	}

return len;
 80099bc:	687b      	ldr	r3, [r7, #4]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e009      	b.n	80099ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	60ba      	str	r2, [r7, #8]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	3301      	adds	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	dbf1      	blt.n	80099d8 <_write+0x12>
	}
	return len;
 80099f4:	687b      	ldr	r3, [r7, #4]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_close>:

int _close(int file)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
	return -1;
 8009a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a26:	605a      	str	r2, [r3, #4]
	return 0;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <_isatty>:

int _isatty(int file)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8009a3e:	2301      	movs	r3, #1
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
	return 0;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009a70:	4a14      	ldr	r2, [pc, #80]	; (8009ac4 <_sbrk+0x5c>)
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <_sbrk+0x60>)
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009a7c:	4b13      	ldr	r3, [pc, #76]	; (8009acc <_sbrk+0x64>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009a84:	4b11      	ldr	r3, [pc, #68]	; (8009acc <_sbrk+0x64>)
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <_sbrk+0x68>)
 8009a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009a8a:	4b10      	ldr	r3, [pc, #64]	; (8009acc <_sbrk+0x64>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4413      	add	r3, r2
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d207      	bcs.n	8009aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009a98:	f000 faca 	bl	800a030 <__errno>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	220c      	movs	r2, #12
 8009aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aa6:	e009      	b.n	8009abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009aa8:	4b08      	ldr	r3, [pc, #32]	; (8009acc <_sbrk+0x64>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009aae:	4b07      	ldr	r3, [pc, #28]	; (8009acc <_sbrk+0x64>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4a05      	ldr	r2, [pc, #20]	; (8009acc <_sbrk+0x64>)
 8009ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009aba:	68fb      	ldr	r3, [r7, #12]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20010000 	.word	0x20010000
 8009ac8:	00000400 	.word	0x00000400
 8009acc:	20001bec 	.word	0x20001bec
 8009ad0:	20002e00 	.word	0x20002e00

08009ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009ad8:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <SystemInit+0x20>)
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ade:	4a05      	ldr	r2, [pc, #20]	; (8009af4 <SystemInit+0x20>)
 8009ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009ae8:	bf00      	nop
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	e000ed00 	.word	0xe000ed00

08009af8 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 8009b02:	f000 f951 	bl	8009da8 <rand>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1acb      	subs	r3, r1, r3
 8009b10:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b14:	fb01 f303 	mul.w	r3, r1, r3
 8009b18:	1ad2      	subs	r2, r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 8009b2a:	f7ff fa79 	bl	8009020 <board_init_common_board_init>
    //flash_info_init();
    task_create();
 8009b2e:	f000 f807 	bl	8009b40 <task_create>
	//semaphore_create();
    reset_ws2812b();
 8009b32:	f7f7 fe31 	bl	8001798 <reset_ws2812b>
	osKernelStart();
 8009b36:	f7f8 fe67 	bl	8002808 <osKernelStart>
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8009b44:	f7f8 fe3c 	bl	80027c0 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 8009b48:	4a0a      	ldr	r2, [pc, #40]	; (8009b74 <task_create+0x34>)
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	480a      	ldr	r0, [pc, #40]	; (8009b78 <task_create+0x38>)
 8009b4e:	f7f8 fe81 	bl	8002854 <osThreadNew>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <task_create+0x3c>)
 8009b56:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
	g_led_strip_ctrl_handle = osThreadNew(task_led_ctrl, NULL, &g_task_led_ctrl_attributes);
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <task_create+0x40>)
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4809      	ldr	r0, [pc, #36]	; (8009b84 <task_create+0x44>)
 8009b5e:	f7f8 fe79 	bl	8002854 <osThreadNew>
 8009b62:	4603      	mov	r3, r0
 8009b64:	4a08      	ldr	r2, [pc, #32]	; (8009b88 <task_create+0x48>)
 8009b66:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8009b68:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <task_create+0x4c>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]



}
 8009b6e:	bf00      	nop
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800b1b4 	.word	0x0800b1b4
 8009b78:	08001e15 	.word	0x08001e15
 8009b7c:	20001bf4 	.word	0x20001bf4
 8009b80:	0800b1d8 	.word	0x0800b1d8
 8009b84:	080022c9 	.word	0x080022c9
 8009b88:	20001bf0 	.word	0x20001bf0
 8009b8c:	20002cb0 	.word	0x20002cb0

08009b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009b94:	f7ff ff9e 	bl	8009ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009b98:	480c      	ldr	r0, [pc, #48]	; (8009bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8009b9a:	490d      	ldr	r1, [pc, #52]	; (8009bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <LoopForever+0xe>)
  movs r3, #0
 8009b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ba0:	e002      	b.n	8009ba8 <LoopCopyDataInit>

08009ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ba6:	3304      	adds	r3, #4

08009ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009bac:	d3f9      	bcc.n	8009ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009bae:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009bb0:	4c0a      	ldr	r4, [pc, #40]	; (8009bdc <LoopForever+0x16>)
  movs r3, #0
 8009bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009bb4:	e001      	b.n	8009bba <LoopFillZerobss>

08009bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009bb8:	3204      	adds	r2, #4

08009bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009bbc:	d3fb      	bcc.n	8009bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009bbe:	f000 fa3d 	bl	800a03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009bc2:	f7ff ffb0 	bl	8009b26 <main>

08009bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8009bc6:	e7fe      	b.n	8009bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009bc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009bd0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8009bd4:	0800b2e4 	.word	0x0800b2e4
  ldr r2, =_sbss
 8009bd8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8009bdc:	20002e00 	.word	0x20002e00

08009be0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009be0:	e7fe      	b.n	8009be0 <ADC1_IRQHandler>
	...

08009be4 <malloc>:
 8009be4:	4b02      	ldr	r3, [pc, #8]	; (8009bf0 <malloc+0xc>)
 8009be6:	4601      	mov	r1, r0
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	f000 b823 	b.w	8009c34 <_malloc_r>
 8009bee:	bf00      	nop
 8009bf0:	200000f8 	.word	0x200000f8

08009bf4 <sbrk_aligned>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	4e0e      	ldr	r6, [pc, #56]	; (8009c30 <sbrk_aligned+0x3c>)
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	6831      	ldr	r1, [r6, #0]
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	b911      	cbnz	r1, 8009c06 <sbrk_aligned+0x12>
 8009c00:	f000 fa06 	bl	800a010 <_sbrk_r>
 8009c04:	6030      	str	r0, [r6, #0]
 8009c06:	4621      	mov	r1, r4
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 fa01 	bl	800a010 <_sbrk_r>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d00a      	beq.n	8009c28 <sbrk_aligned+0x34>
 8009c12:	1cc4      	adds	r4, r0, #3
 8009c14:	f024 0403 	bic.w	r4, r4, #3
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d007      	beq.n	8009c2c <sbrk_aligned+0x38>
 8009c1c:	1a21      	subs	r1, r4, r0
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 f9f6 	bl	800a010 <_sbrk_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d101      	bne.n	8009c2c <sbrk_aligned+0x38>
 8009c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	20002cb8 	.word	0x20002cb8

08009c34 <_malloc_r>:
 8009c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c38:	1ccd      	adds	r5, r1, #3
 8009c3a:	f025 0503 	bic.w	r5, r5, #3
 8009c3e:	3508      	adds	r5, #8
 8009c40:	2d0c      	cmp	r5, #12
 8009c42:	bf38      	it	cc
 8009c44:	250c      	movcc	r5, #12
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	4607      	mov	r7, r0
 8009c4a:	db01      	blt.n	8009c50 <_malloc_r+0x1c>
 8009c4c:	42a9      	cmp	r1, r5
 8009c4e:	d905      	bls.n	8009c5c <_malloc_r+0x28>
 8009c50:	230c      	movs	r3, #12
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	2600      	movs	r6, #0
 8009c56:	4630      	mov	r0, r6
 8009c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d30 <_malloc_r+0xfc>
 8009c60:	f000 f868 	bl	8009d34 <__malloc_lock>
 8009c64:	f8d8 3000 	ldr.w	r3, [r8]
 8009c68:	461c      	mov	r4, r3
 8009c6a:	bb5c      	cbnz	r4, 8009cc4 <_malloc_r+0x90>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4638      	mov	r0, r7
 8009c70:	f7ff ffc0 	bl	8009bf4 <sbrk_aligned>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	4604      	mov	r4, r0
 8009c78:	d155      	bne.n	8009d26 <_malloc_r+0xf2>
 8009c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8009c7e:	4626      	mov	r6, r4
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	d145      	bne.n	8009d10 <_malloc_r+0xdc>
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	d048      	beq.n	8009d1a <_malloc_r+0xe6>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	eb04 0903 	add.w	r9, r4, r3
 8009c92:	f000 f9bd 	bl	800a010 <_sbrk_r>
 8009c96:	4581      	cmp	r9, r0
 8009c98:	d13f      	bne.n	8009d1a <_malloc_r+0xe6>
 8009c9a:	6821      	ldr	r1, [r4, #0]
 8009c9c:	1a6d      	subs	r5, r5, r1
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7ff ffa7 	bl	8009bf4 <sbrk_aligned>
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	d037      	beq.n	8009d1a <_malloc_r+0xe6>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	442b      	add	r3, r5
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d038      	beq.n	8009d2a <_malloc_r+0xf6>
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	42a2      	cmp	r2, r4
 8009cbc:	d12b      	bne.n	8009d16 <_malloc_r+0xe2>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	e00f      	b.n	8009ce4 <_malloc_r+0xb0>
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	1b52      	subs	r2, r2, r5
 8009cc8:	d41f      	bmi.n	8009d0a <_malloc_r+0xd6>
 8009cca:	2a0b      	cmp	r2, #11
 8009ccc:	d917      	bls.n	8009cfe <_malloc_r+0xca>
 8009cce:	1961      	adds	r1, r4, r5
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	6025      	str	r5, [r4, #0]
 8009cd4:	bf18      	it	ne
 8009cd6:	6059      	strne	r1, [r3, #4]
 8009cd8:	6863      	ldr	r3, [r4, #4]
 8009cda:	bf08      	it	eq
 8009cdc:	f8c8 1000 	streq.w	r1, [r8]
 8009ce0:	5162      	str	r2, [r4, r5]
 8009ce2:	604b      	str	r3, [r1, #4]
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f104 060b 	add.w	r6, r4, #11
 8009cea:	f000 f829 	bl	8009d40 <__malloc_unlock>
 8009cee:	f026 0607 	bic.w	r6, r6, #7
 8009cf2:	1d23      	adds	r3, r4, #4
 8009cf4:	1af2      	subs	r2, r6, r3
 8009cf6:	d0ae      	beq.n	8009c56 <_malloc_r+0x22>
 8009cf8:	1b9b      	subs	r3, r3, r6
 8009cfa:	50a3      	str	r3, [r4, r2]
 8009cfc:	e7ab      	b.n	8009c56 <_malloc_r+0x22>
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	6862      	ldr	r2, [r4, #4]
 8009d02:	d1dd      	bne.n	8009cc0 <_malloc_r+0x8c>
 8009d04:	f8c8 2000 	str.w	r2, [r8]
 8009d08:	e7ec      	b.n	8009ce4 <_malloc_r+0xb0>
 8009d0a:	4623      	mov	r3, r4
 8009d0c:	6864      	ldr	r4, [r4, #4]
 8009d0e:	e7ac      	b.n	8009c6a <_malloc_r+0x36>
 8009d10:	4634      	mov	r4, r6
 8009d12:	6876      	ldr	r6, [r6, #4]
 8009d14:	e7b4      	b.n	8009c80 <_malloc_r+0x4c>
 8009d16:	4613      	mov	r3, r2
 8009d18:	e7cc      	b.n	8009cb4 <_malloc_r+0x80>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f000 f80e 	bl	8009d40 <__malloc_unlock>
 8009d24:	e797      	b.n	8009c56 <_malloc_r+0x22>
 8009d26:	6025      	str	r5, [r4, #0]
 8009d28:	e7dc      	b.n	8009ce4 <_malloc_r+0xb0>
 8009d2a:	605b      	str	r3, [r3, #4]
 8009d2c:	deff      	udf	#255	; 0xff
 8009d2e:	bf00      	nop
 8009d30:	20002cb4 	.word	0x20002cb4

08009d34 <__malloc_lock>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__malloc_lock+0x8>)
 8009d36:	f000 b9a6 	b.w	800a086 <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20002df8 	.word	0x20002df8

08009d40 <__malloc_unlock>:
 8009d40:	4801      	ldr	r0, [pc, #4]	; (8009d48 <__malloc_unlock+0x8>)
 8009d42:	f000 b9a1 	b.w	800a088 <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	20002df8 	.word	0x20002df8

08009d4c <srand>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <srand+0x44>)
 8009d50:	681d      	ldr	r5, [r3, #0]
 8009d52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009d54:	4604      	mov	r4, r0
 8009d56:	b9b3      	cbnz	r3, 8009d86 <srand+0x3a>
 8009d58:	2018      	movs	r0, #24
 8009d5a:	f7ff ff43 	bl	8009be4 <malloc>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	6328      	str	r0, [r5, #48]	; 0x30
 8009d62:	b920      	cbnz	r0, 8009d6e <srand+0x22>
 8009d64:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <srand+0x48>)
 8009d66:	480c      	ldr	r0, [pc, #48]	; (8009d98 <srand+0x4c>)
 8009d68:	2146      	movs	r1, #70	; 0x46
 8009d6a:	f000 f99d 	bl	800a0a8 <__assert_func>
 8009d6e:	490b      	ldr	r1, [pc, #44]	; (8009d9c <srand+0x50>)
 8009d70:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <srand+0x54>)
 8009d72:	e9c0 1300 	strd	r1, r3, [r0]
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <srand+0x58>)
 8009d78:	6083      	str	r3, [r0, #8]
 8009d7a:	230b      	movs	r3, #11
 8009d7c:	8183      	strh	r3, [r0, #12]
 8009d7e:	2100      	movs	r1, #0
 8009d80:	2001      	movs	r0, #1
 8009d82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009d86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009d88:	2200      	movs	r2, #0
 8009d8a:	611c      	str	r4, [r3, #16]
 8009d8c:	615a      	str	r2, [r3, #20]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200000f8 	.word	0x200000f8
 8009d94:	0800b1fc 	.word	0x0800b1fc
 8009d98:	0800b213 	.word	0x0800b213
 8009d9c:	abcd330e 	.word	0xabcd330e
 8009da0:	e66d1234 	.word	0xe66d1234
 8009da4:	0005deec 	.word	0x0005deec

08009da8 <rand>:
 8009da8:	4b16      	ldr	r3, [pc, #88]	; (8009e04 <rand+0x5c>)
 8009daa:	b510      	push	{r4, lr}
 8009dac:	681c      	ldr	r4, [r3, #0]
 8009dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009db0:	b9b3      	cbnz	r3, 8009de0 <rand+0x38>
 8009db2:	2018      	movs	r0, #24
 8009db4:	f7ff ff16 	bl	8009be4 <malloc>
 8009db8:	4602      	mov	r2, r0
 8009dba:	6320      	str	r0, [r4, #48]	; 0x30
 8009dbc:	b920      	cbnz	r0, 8009dc8 <rand+0x20>
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <rand+0x60>)
 8009dc0:	4812      	ldr	r0, [pc, #72]	; (8009e0c <rand+0x64>)
 8009dc2:	2152      	movs	r1, #82	; 0x52
 8009dc4:	f000 f970 	bl	800a0a8 <__assert_func>
 8009dc8:	4911      	ldr	r1, [pc, #68]	; (8009e10 <rand+0x68>)
 8009dca:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <rand+0x6c>)
 8009dcc:	e9c0 1300 	strd	r1, r3, [r0]
 8009dd0:	4b11      	ldr	r3, [pc, #68]	; (8009e18 <rand+0x70>)
 8009dd2:	6083      	str	r3, [r0, #8]
 8009dd4:	230b      	movs	r3, #11
 8009dd6:	8183      	strh	r3, [r0, #12]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009de0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009de2:	480e      	ldr	r0, [pc, #56]	; (8009e1c <rand+0x74>)
 8009de4:	690b      	ldr	r3, [r1, #16]
 8009de6:	694c      	ldr	r4, [r1, #20]
 8009de8:	4a0d      	ldr	r2, [pc, #52]	; (8009e20 <rand+0x78>)
 8009dea:	4358      	muls	r0, r3
 8009dec:	fb02 0004 	mla	r0, r2, r4, r0
 8009df0:	fba3 3202 	umull	r3, r2, r3, r2
 8009df4:	3301      	adds	r3, #1
 8009df6:	eb40 0002 	adc.w	r0, r0, r2
 8009dfa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009dfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	200000f8 	.word	0x200000f8
 8009e08:	0800b1fc 	.word	0x0800b1fc
 8009e0c:	0800b213 	.word	0x0800b213
 8009e10:	abcd330e 	.word	0xabcd330e
 8009e14:	e66d1234 	.word	0xe66d1234
 8009e18:	0005deec 	.word	0x0005deec
 8009e1c:	5851f42d 	.word	0x5851f42d
 8009e20:	4c957f2d 	.word	0x4c957f2d

08009e24 <std>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e32:	6083      	str	r3, [r0, #8]
 8009e34:	8181      	strh	r1, [r0, #12]
 8009e36:	6643      	str	r3, [r0, #100]	; 0x64
 8009e38:	81c2      	strh	r2, [r0, #14]
 8009e3a:	6183      	str	r3, [r0, #24]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2208      	movs	r2, #8
 8009e40:	305c      	adds	r0, #92	; 0x5c
 8009e42:	f000 f8b1 	bl	8009fa8 <memset>
 8009e46:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <std+0x58>)
 8009e48:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <std+0x5c>)
 8009e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e4e:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <std+0x60>)
 8009e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e52:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <std+0x64>)
 8009e54:	6323      	str	r3, [r4, #48]	; 0x30
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <std+0x68>)
 8009e58:	6224      	str	r4, [r4, #32]
 8009e5a:	429c      	cmp	r4, r3
 8009e5c:	d006      	beq.n	8009e6c <std+0x48>
 8009e5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e62:	4294      	cmp	r4, r2
 8009e64:	d002      	beq.n	8009e6c <std+0x48>
 8009e66:	33d0      	adds	r3, #208	; 0xd0
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	d105      	bne.n	8009e78 <std+0x54>
 8009e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e74:	f000 b906 	b.w	800a084 <__retarget_lock_init_recursive>
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	bf00      	nop
 8009e7c:	0800a2d9 	.word	0x0800a2d9
 8009e80:	0800a2fb 	.word	0x0800a2fb
 8009e84:	0800a333 	.word	0x0800a333
 8009e88:	0800a357 	.word	0x0800a357
 8009e8c:	20002cbc 	.word	0x20002cbc

08009e90 <stdio_exit_handler>:
 8009e90:	4a02      	ldr	r2, [pc, #8]	; (8009e9c <stdio_exit_handler+0xc>)
 8009e92:	4903      	ldr	r1, [pc, #12]	; (8009ea0 <stdio_exit_handler+0x10>)
 8009e94:	4803      	ldr	r0, [pc, #12]	; (8009ea4 <stdio_exit_handler+0x14>)
 8009e96:	f000 b869 	b.w	8009f6c <_fwalk_sglue>
 8009e9a:	bf00      	nop
 8009e9c:	200000a0 	.word	0x200000a0
 8009ea0:	0800a289 	.word	0x0800a289
 8009ea4:	200000ac 	.word	0x200000ac

08009ea8 <cleanup_stdio>:
 8009ea8:	6841      	ldr	r1, [r0, #4]
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <cleanup_stdio+0x34>)
 8009eac:	4299      	cmp	r1, r3
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	d001      	beq.n	8009eb8 <cleanup_stdio+0x10>
 8009eb4:	f000 f9e8 	bl	800a288 <_fflush_r>
 8009eb8:	68a1      	ldr	r1, [r4, #8]
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <cleanup_stdio+0x38>)
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	d002      	beq.n	8009ec6 <cleanup_stdio+0x1e>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 f9e1 	bl	800a288 <_fflush_r>
 8009ec6:	68e1      	ldr	r1, [r4, #12]
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <cleanup_stdio+0x3c>)
 8009eca:	4299      	cmp	r1, r3
 8009ecc:	d004      	beq.n	8009ed8 <cleanup_stdio+0x30>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ed4:	f000 b9d8 	b.w	800a288 <_fflush_r>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	bf00      	nop
 8009edc:	20002cbc 	.word	0x20002cbc
 8009ee0:	20002d24 	.word	0x20002d24
 8009ee4:	20002d8c 	.word	0x20002d8c

08009ee8 <global_stdio_init.part.0>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <global_stdio_init.part.0+0x30>)
 8009eec:	4c0b      	ldr	r4, [pc, #44]	; (8009f1c <global_stdio_init.part.0+0x34>)
 8009eee:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <global_stdio_init.part.0+0x38>)
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2104      	movs	r1, #4
 8009ef8:	f7ff ff94 	bl	8009e24 <std>
 8009efc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f00:	2201      	movs	r2, #1
 8009f02:	2109      	movs	r1, #9
 8009f04:	f7ff ff8e 	bl	8009e24 <std>
 8009f08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f12:	2112      	movs	r1, #18
 8009f14:	f7ff bf86 	b.w	8009e24 <std>
 8009f18:	20002df4 	.word	0x20002df4
 8009f1c:	20002cbc 	.word	0x20002cbc
 8009f20:	08009e91 	.word	0x08009e91

08009f24 <__sfp_lock_acquire>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sfp_lock_acquire+0x8>)
 8009f26:	f000 b8ae 	b.w	800a086 <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20002df9 	.word	0x20002df9

08009f30 <__sfp_lock_release>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sfp_lock_release+0x8>)
 8009f32:	f000 b8a9 	b.w	800a088 <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	20002df9 	.word	0x20002df9

08009f3c <__sinit>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4604      	mov	r4, r0
 8009f40:	f7ff fff0 	bl	8009f24 <__sfp_lock_acquire>
 8009f44:	6a23      	ldr	r3, [r4, #32]
 8009f46:	b11b      	cbz	r3, 8009f50 <__sinit+0x14>
 8009f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4c:	f7ff bff0 	b.w	8009f30 <__sfp_lock_release>
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <__sinit+0x28>)
 8009f52:	6223      	str	r3, [r4, #32]
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <__sinit+0x2c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f5      	bne.n	8009f48 <__sinit+0xc>
 8009f5c:	f7ff ffc4 	bl	8009ee8 <global_stdio_init.part.0>
 8009f60:	e7f2      	b.n	8009f48 <__sinit+0xc>
 8009f62:	bf00      	nop
 8009f64:	08009ea9 	.word	0x08009ea9
 8009f68:	20002df4 	.word	0x20002df4

08009f6c <_fwalk_sglue>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	4607      	mov	r7, r0
 8009f72:	4688      	mov	r8, r1
 8009f74:	4614      	mov	r4, r2
 8009f76:	2600      	movs	r6, #0
 8009f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009f80:	d505      	bpl.n	8009f8e <_fwalk_sglue+0x22>
 8009f82:	6824      	ldr	r4, [r4, #0]
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d1f7      	bne.n	8009f78 <_fwalk_sglue+0xc>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d907      	bls.n	8009fa4 <_fwalk_sglue+0x38>
 8009f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	d003      	beq.n	8009fa4 <_fwalk_sglue+0x38>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	47c0      	blx	r8
 8009fa2:	4306      	orrs	r6, r0
 8009fa4:	3568      	adds	r5, #104	; 0x68
 8009fa6:	e7e9      	b.n	8009f7c <_fwalk_sglue+0x10>

08009fa8 <memset>:
 8009fa8:	4402      	add	r2, r0
 8009faa:	4603      	mov	r3, r0
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d100      	bne.n	8009fb2 <memset+0xa>
 8009fb0:	4770      	bx	lr
 8009fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb6:	e7f9      	b.n	8009fac <memset+0x4>

08009fb8 <time>:
 8009fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <time+0x30>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4669      	mov	r1, sp
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	f000 f812 	bl	8009fec <_gettimeofday_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	bfbe      	ittt	lt
 8009fcc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8009fd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fd4:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fdc:	b10c      	cbz	r4, 8009fe2 <time+0x2a>
 8009fde:	e9c4 0100 	strd	r0, r1, [r4]
 8009fe2:	b004      	add	sp, #16
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200000f8 	.word	0x200000f8

08009fec <_gettimeofday_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_gettimeofday_r+0x20>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	f000 fe41 	bl	800ac80 <_gettimeofday>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d102      	bne.n	800a008 <_gettimeofday_r+0x1c>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b103      	cbz	r3, 800a008 <_gettimeofday_r+0x1c>
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	20002dfc 	.word	0x20002dfc

0800a010 <_sbrk_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d06      	ldr	r5, [pc, #24]	; (800a02c <_sbrk_r+0x1c>)
 800a014:	2300      	movs	r3, #0
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	f7ff fd24 	bl	8009a68 <_sbrk>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_sbrk_r+0x1a>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_sbrk_r+0x1a>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	20002dfc 	.word	0x20002dfc

0800a030 <__errno>:
 800a030:	4b01      	ldr	r3, [pc, #4]	; (800a038 <__errno+0x8>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	200000f8 	.word	0x200000f8

0800a03c <__libc_init_array>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4d0d      	ldr	r5, [pc, #52]	; (800a074 <__libc_init_array+0x38>)
 800a040:	4c0d      	ldr	r4, [pc, #52]	; (800a078 <__libc_init_array+0x3c>)
 800a042:	1b64      	subs	r4, r4, r5
 800a044:	10a4      	asrs	r4, r4, #2
 800a046:	2600      	movs	r6, #0
 800a048:	42a6      	cmp	r6, r4
 800a04a:	d109      	bne.n	800a060 <__libc_init_array+0x24>
 800a04c:	4d0b      	ldr	r5, [pc, #44]	; (800a07c <__libc_init_array+0x40>)
 800a04e:	4c0c      	ldr	r4, [pc, #48]	; (800a080 <__libc_init_array+0x44>)
 800a050:	f000 fe1e 	bl	800ac90 <_init>
 800a054:	1b64      	subs	r4, r4, r5
 800a056:	10a4      	asrs	r4, r4, #2
 800a058:	2600      	movs	r6, #0
 800a05a:	42a6      	cmp	r6, r4
 800a05c:	d105      	bne.n	800a06a <__libc_init_array+0x2e>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f855 3b04 	ldr.w	r3, [r5], #4
 800a064:	4798      	blx	r3
 800a066:	3601      	adds	r6, #1
 800a068:	e7ee      	b.n	800a048 <__libc_init_array+0xc>
 800a06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06e:	4798      	blx	r3
 800a070:	3601      	adds	r6, #1
 800a072:	e7f2      	b.n	800a05a <__libc_init_array+0x1e>
 800a074:	0800b2dc 	.word	0x0800b2dc
 800a078:	0800b2dc 	.word	0x0800b2dc
 800a07c:	0800b2dc 	.word	0x0800b2dc
 800a080:	0800b2e0 	.word	0x0800b2e0

0800a084 <__retarget_lock_init_recursive>:
 800a084:	4770      	bx	lr

0800a086 <__retarget_lock_acquire_recursive>:
 800a086:	4770      	bx	lr

0800a088 <__retarget_lock_release_recursive>:
 800a088:	4770      	bx	lr

0800a08a <memcpy>:
 800a08a:	440a      	add	r2, r1
 800a08c:	4291      	cmp	r1, r2
 800a08e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a092:	d100      	bne.n	800a096 <memcpy+0xc>
 800a094:	4770      	bx	lr
 800a096:	b510      	push	{r4, lr}
 800a098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a0:	4291      	cmp	r1, r2
 800a0a2:	d1f9      	bne.n	800a098 <memcpy+0xe>
 800a0a4:	bd10      	pop	{r4, pc}
	...

0800a0a8 <__assert_func>:
 800a0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0aa:	4614      	mov	r4, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <__assert_func+0x2c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	68d8      	ldr	r0, [r3, #12]
 800a0b6:	b14c      	cbz	r4, 800a0cc <__assert_func+0x24>
 800a0b8:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <__assert_func+0x30>)
 800a0ba:	9100      	str	r1, [sp, #0]
 800a0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0c0:	4906      	ldr	r1, [pc, #24]	; (800a0dc <__assert_func+0x34>)
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	f000 f94c 	bl	800a360 <fiprintf>
 800a0c8:	f000 f9a2 	bl	800a410 <abort>
 800a0cc:	4b04      	ldr	r3, [pc, #16]	; (800a0e0 <__assert_func+0x38>)
 800a0ce:	461c      	mov	r4, r3
 800a0d0:	e7f3      	b.n	800a0ba <__assert_func+0x12>
 800a0d2:	bf00      	nop
 800a0d4:	200000f8 	.word	0x200000f8
 800a0d8:	0800b26b 	.word	0x0800b26b
 800a0dc:	0800b278 	.word	0x0800b278
 800a0e0:	0800b2a6 	.word	0x0800b2a6

0800a0e4 <_free_r>:
 800a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d044      	beq.n	800a174 <_free_r+0x90>
 800a0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f6:	bfb8      	it	lt
 800a0f8:	18e4      	addlt	r4, r4, r3
 800a0fa:	f7ff fe1b 	bl	8009d34 <__malloc_lock>
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <_free_r+0x94>)
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	b933      	cbnz	r3, 800a114 <_free_r+0x30>
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	6014      	str	r4, [r2, #0]
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a110:	f7ff be16 	b.w	8009d40 <__malloc_unlock>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d908      	bls.n	800a12a <_free_r+0x46>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf01      	itttt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	1949      	addeq	r1, r1, r5
 800a126:	6021      	streq	r1, [r4, #0]
 800a128:	e7ed      	b.n	800a106 <_free_r+0x22>
 800a12a:	461a      	mov	r2, r3
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	b10b      	cbz	r3, 800a134 <_free_r+0x50>
 800a130:	42a3      	cmp	r3, r4
 800a132:	d9fa      	bls.n	800a12a <_free_r+0x46>
 800a134:	6811      	ldr	r1, [r2, #0]
 800a136:	1855      	adds	r5, r2, r1
 800a138:	42a5      	cmp	r5, r4
 800a13a:	d10b      	bne.n	800a154 <_free_r+0x70>
 800a13c:	6824      	ldr	r4, [r4, #0]
 800a13e:	4421      	add	r1, r4
 800a140:	1854      	adds	r4, r2, r1
 800a142:	42a3      	cmp	r3, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	d1e0      	bne.n	800a10a <_free_r+0x26>
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	6053      	str	r3, [r2, #4]
 800a14e:	440c      	add	r4, r1
 800a150:	6014      	str	r4, [r2, #0]
 800a152:	e7da      	b.n	800a10a <_free_r+0x26>
 800a154:	d902      	bls.n	800a15c <_free_r+0x78>
 800a156:	230c      	movs	r3, #12
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	e7d6      	b.n	800a10a <_free_r+0x26>
 800a15c:	6825      	ldr	r5, [r4, #0]
 800a15e:	1961      	adds	r1, r4, r5
 800a160:	428b      	cmp	r3, r1
 800a162:	bf04      	itt	eq
 800a164:	6819      	ldreq	r1, [r3, #0]
 800a166:	685b      	ldreq	r3, [r3, #4]
 800a168:	6063      	str	r3, [r4, #4]
 800a16a:	bf04      	itt	eq
 800a16c:	1949      	addeq	r1, r1, r5
 800a16e:	6021      	streq	r1, [r4, #0]
 800a170:	6054      	str	r4, [r2, #4]
 800a172:	e7ca      	b.n	800a10a <_free_r+0x26>
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	20002cb4 	.word	0x20002cb4

0800a17c <__sflush_r>:
 800a17c:	898a      	ldrh	r2, [r1, #12]
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	4605      	mov	r5, r0
 800a184:	0710      	lsls	r0, r2, #28
 800a186:	460c      	mov	r4, r1
 800a188:	d458      	bmi.n	800a23c <__sflush_r+0xc0>
 800a18a:	684b      	ldr	r3, [r1, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc05      	bgt.n	800a19c <__sflush_r+0x20>
 800a190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc02      	bgt.n	800a19c <__sflush_r+0x20>
 800a196:	2000      	movs	r0, #0
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d0f9      	beq.n	800a196 <__sflush_r+0x1a>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1a8:	682f      	ldr	r7, [r5, #0]
 800a1aa:	6a21      	ldr	r1, [r4, #32]
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	d032      	beq.n	800a216 <__sflush_r+0x9a>
 800a1b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	075a      	lsls	r2, r3, #29
 800a1b6:	d505      	bpl.n	800a1c4 <__sflush_r+0x48>
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	1ac0      	subs	r0, r0, r3
 800a1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1be:	b10b      	cbz	r3, 800a1c4 <__sflush_r+0x48>
 800a1c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c2:	1ac0      	subs	r0, r0, r3
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ca:	6a21      	ldr	r1, [r4, #32]
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b0      	blx	r6
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	d106      	bne.n	800a1e4 <__sflush_r+0x68>
 800a1d6:	6829      	ldr	r1, [r5, #0]
 800a1d8:	291d      	cmp	r1, #29
 800a1da:	d82b      	bhi.n	800a234 <__sflush_r+0xb8>
 800a1dc:	4a29      	ldr	r2, [pc, #164]	; (800a284 <__sflush_r+0x108>)
 800a1de:	410a      	asrs	r2, r1
 800a1e0:	07d6      	lsls	r6, r2, #31
 800a1e2:	d427      	bmi.n	800a234 <__sflush_r+0xb8>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	6062      	str	r2, [r4, #4]
 800a1e8:	04d9      	lsls	r1, r3, #19
 800a1ea:	6922      	ldr	r2, [r4, #16]
 800a1ec:	6022      	str	r2, [r4, #0]
 800a1ee:	d504      	bpl.n	800a1fa <__sflush_r+0x7e>
 800a1f0:	1c42      	adds	r2, r0, #1
 800a1f2:	d101      	bne.n	800a1f8 <__sflush_r+0x7c>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	b903      	cbnz	r3, 800a1fa <__sflush_r+0x7e>
 800a1f8:	6560      	str	r0, [r4, #84]	; 0x54
 800a1fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fc:	602f      	str	r7, [r5, #0]
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d0c9      	beq.n	800a196 <__sflush_r+0x1a>
 800a202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a206:	4299      	cmp	r1, r3
 800a208:	d002      	beq.n	800a210 <__sflush_r+0x94>
 800a20a:	4628      	mov	r0, r5
 800a20c:	f7ff ff6a 	bl	800a0e4 <_free_r>
 800a210:	2000      	movs	r0, #0
 800a212:	6360      	str	r0, [r4, #52]	; 0x34
 800a214:	e7c0      	b.n	800a198 <__sflush_r+0x1c>
 800a216:	2301      	movs	r3, #1
 800a218:	4628      	mov	r0, r5
 800a21a:	47b0      	blx	r6
 800a21c:	1c41      	adds	r1, r0, #1
 800a21e:	d1c8      	bne.n	800a1b2 <__sflush_r+0x36>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c5      	beq.n	800a1b2 <__sflush_r+0x36>
 800a226:	2b1d      	cmp	r3, #29
 800a228:	d001      	beq.n	800a22e <__sflush_r+0xb2>
 800a22a:	2b16      	cmp	r3, #22
 800a22c:	d101      	bne.n	800a232 <__sflush_r+0xb6>
 800a22e:	602f      	str	r7, [r5, #0]
 800a230:	e7b1      	b.n	800a196 <__sflush_r+0x1a>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	e7ad      	b.n	800a198 <__sflush_r+0x1c>
 800a23c:	690f      	ldr	r7, [r1, #16]
 800a23e:	2f00      	cmp	r7, #0
 800a240:	d0a9      	beq.n	800a196 <__sflush_r+0x1a>
 800a242:	0793      	lsls	r3, r2, #30
 800a244:	680e      	ldr	r6, [r1, #0]
 800a246:	bf08      	it	eq
 800a248:	694b      	ldreq	r3, [r1, #20]
 800a24a:	600f      	str	r7, [r1, #0]
 800a24c:	bf18      	it	ne
 800a24e:	2300      	movne	r3, #0
 800a250:	eba6 0807 	sub.w	r8, r6, r7
 800a254:	608b      	str	r3, [r1, #8]
 800a256:	f1b8 0f00 	cmp.w	r8, #0
 800a25a:	dd9c      	ble.n	800a196 <__sflush_r+0x1a>
 800a25c:	6a21      	ldr	r1, [r4, #32]
 800a25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a260:	4643      	mov	r3, r8
 800a262:	463a      	mov	r2, r7
 800a264:	4628      	mov	r0, r5
 800a266:	47b0      	blx	r6
 800a268:	2800      	cmp	r0, #0
 800a26a:	dc06      	bgt.n	800a27a <__sflush_r+0xfe>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a278:	e78e      	b.n	800a198 <__sflush_r+0x1c>
 800a27a:	4407      	add	r7, r0
 800a27c:	eba8 0800 	sub.w	r8, r8, r0
 800a280:	e7e9      	b.n	800a256 <__sflush_r+0xda>
 800a282:	bf00      	nop
 800a284:	dfbffffe 	.word	0xdfbffffe

0800a288 <_fflush_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	690b      	ldr	r3, [r1, #16]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b913      	cbnz	r3, 800a298 <_fflush_r+0x10>
 800a292:	2500      	movs	r5, #0
 800a294:	4628      	mov	r0, r5
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fflush_r+0x1a>
 800a29a:	6a03      	ldr	r3, [r0, #32]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fflush_r+0x1a>
 800a29e:	f7ff fe4d 	bl	8009f3c <__sinit>
 800a2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0f3      	beq.n	800a292 <_fflush_r+0xa>
 800a2aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2ac:	07d0      	lsls	r0, r2, #31
 800a2ae:	d404      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b0:	0599      	lsls	r1, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b6:	f7ff fee6 	bl	800a086 <__retarget_lock_acquire_recursive>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f7ff ff5d 	bl	800a17c <__sflush_r>
 800a2c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2c4:	07da      	lsls	r2, r3, #31
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	d4e4      	bmi.n	800a294 <_fflush_r+0xc>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	059b      	lsls	r3, r3, #22
 800a2ce:	d4e1      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2d2:	f7ff fed9 	bl	800a088 <__retarget_lock_release_recursive>
 800a2d6:	e7dd      	b.n	800a294 <_fflush_r+0xc>

0800a2d8 <__sread>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	460c      	mov	r4, r1
 800a2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e0:	f000 f872 	bl	800a3c8 <_read_r>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	bfab      	itete	ge
 800a2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ec:	181b      	addge	r3, r3, r0
 800a2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2f2:	bfac      	ite	ge
 800a2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2f6:	81a3      	strhlt	r3, [r4, #12]
 800a2f8:	bd10      	pop	{r4, pc}

0800a2fa <__swrite>:
 800a2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fe:	461f      	mov	r7, r3
 800a300:	898b      	ldrh	r3, [r1, #12]
 800a302:	05db      	lsls	r3, r3, #23
 800a304:	4605      	mov	r5, r0
 800a306:	460c      	mov	r4, r1
 800a308:	4616      	mov	r6, r2
 800a30a:	d505      	bpl.n	800a318 <__swrite+0x1e>
 800a30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a310:	2302      	movs	r3, #2
 800a312:	2200      	movs	r2, #0
 800a314:	f000 f846 	bl	800a3a4 <_lseek_r>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a322:	81a3      	strh	r3, [r4, #12]
 800a324:	4632      	mov	r2, r6
 800a326:	463b      	mov	r3, r7
 800a328:	4628      	mov	r0, r5
 800a32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a32e:	f000 b85d 	b.w	800a3ec <_write_r>

0800a332 <__sseek>:
 800a332:	b510      	push	{r4, lr}
 800a334:	460c      	mov	r4, r1
 800a336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33a:	f000 f833 	bl	800a3a4 <_lseek_r>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	bf15      	itete	ne
 800a344:	6560      	strne	r0, [r4, #84]	; 0x54
 800a346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a34e:	81a3      	strheq	r3, [r4, #12]
 800a350:	bf18      	it	ne
 800a352:	81a3      	strhne	r3, [r4, #12]
 800a354:	bd10      	pop	{r4, pc}

0800a356 <__sclose>:
 800a356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35a:	f000 b813 	b.w	800a384 <_close_r>
	...

0800a360 <fiprintf>:
 800a360:	b40e      	push	{r1, r2, r3}
 800a362:	b503      	push	{r0, r1, lr}
 800a364:	4601      	mov	r1, r0
 800a366:	ab03      	add	r3, sp, #12
 800a368:	4805      	ldr	r0, [pc, #20]	; (800a380 <fiprintf+0x20>)
 800a36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a36e:	6800      	ldr	r0, [r0, #0]
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	f000 f87d 	bl	800a470 <_vfiprintf_r>
 800a376:	b002      	add	sp, #8
 800a378:	f85d eb04 	ldr.w	lr, [sp], #4
 800a37c:	b003      	add	sp, #12
 800a37e:	4770      	bx	lr
 800a380:	200000f8 	.word	0x200000f8

0800a384 <_close_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d06      	ldr	r5, [pc, #24]	; (800a3a0 <_close_r+0x1c>)
 800a388:	2300      	movs	r3, #0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4608      	mov	r0, r1
 800a38e:	602b      	str	r3, [r5, #0]
 800a390:	f7ff fb35 	bl	80099fe <_close>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_close_r+0x1a>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_close_r+0x1a>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	20002dfc 	.word	0x20002dfc

0800a3a4 <_lseek_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d07      	ldr	r5, [pc, #28]	; (800a3c4 <_lseek_r+0x20>)
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	602a      	str	r2, [r5, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f7ff fb4a 	bl	8009a4c <_lseek>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_lseek_r+0x1e>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_lseek_r+0x1e>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20002dfc 	.word	0x20002dfc

0800a3c8 <_read_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d07      	ldr	r5, [pc, #28]	; (800a3e8 <_read_r+0x20>)
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	602a      	str	r2, [r5, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f7ff fad8 	bl	800998c <_read>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_read_r+0x1e>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_read_r+0x1e>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	20002dfc 	.word	0x20002dfc

0800a3ec <_write_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4d07      	ldr	r5, [pc, #28]	; (800a40c <_write_r+0x20>)
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	4608      	mov	r0, r1
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	602a      	str	r2, [r5, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f7ff fae3 	bl	80099c6 <_write>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_write_r+0x1e>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_write_r+0x1e>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20002dfc 	.word	0x20002dfc

0800a410 <abort>:
 800a410:	b508      	push	{r3, lr}
 800a412:	2006      	movs	r0, #6
 800a414:	f000 fc18 	bl	800ac48 <raise>
 800a418:	2001      	movs	r0, #1
 800a41a:	f7ff faad 	bl	8009978 <_exit>

0800a41e <__sfputc_r>:
 800a41e:	6893      	ldr	r3, [r2, #8]
 800a420:	3b01      	subs	r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	b410      	push	{r4}
 800a426:	6093      	str	r3, [r2, #8]
 800a428:	da08      	bge.n	800a43c <__sfputc_r+0x1e>
 800a42a:	6994      	ldr	r4, [r2, #24]
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	db01      	blt.n	800a434 <__sfputc_r+0x16>
 800a430:	290a      	cmp	r1, #10
 800a432:	d103      	bne.n	800a43c <__sfputc_r+0x1e>
 800a434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a438:	f000 bac4 	b.w	800a9c4 <__swbuf_r>
 800a43c:	6813      	ldr	r3, [r2, #0]
 800a43e:	1c58      	adds	r0, r3, #1
 800a440:	6010      	str	r0, [r2, #0]
 800a442:	7019      	strb	r1, [r3, #0]
 800a444:	4608      	mov	r0, r1
 800a446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <__sfputs_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	4614      	mov	r4, r2
 800a454:	18d5      	adds	r5, r2, r3
 800a456:	42ac      	cmp	r4, r5
 800a458:	d101      	bne.n	800a45e <__sfputs_r+0x12>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e007      	b.n	800a46e <__sfputs_r+0x22>
 800a45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a462:	463a      	mov	r2, r7
 800a464:	4630      	mov	r0, r6
 800a466:	f7ff ffda 	bl	800a41e <__sfputc_r>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d1f3      	bne.n	800a456 <__sfputs_r+0xa>
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a470 <_vfiprintf_r>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	460d      	mov	r5, r1
 800a476:	b09d      	sub	sp, #116	; 0x74
 800a478:	4614      	mov	r4, r2
 800a47a:	4698      	mov	r8, r3
 800a47c:	4606      	mov	r6, r0
 800a47e:	b118      	cbz	r0, 800a488 <_vfiprintf_r+0x18>
 800a480:	6a03      	ldr	r3, [r0, #32]
 800a482:	b90b      	cbnz	r3, 800a488 <_vfiprintf_r+0x18>
 800a484:	f7ff fd5a 	bl	8009f3c <__sinit>
 800a488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_vfiprintf_r+0x2a>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	059a      	lsls	r2, r3, #22
 800a492:	d402      	bmi.n	800a49a <_vfiprintf_r+0x2a>
 800a494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a496:	f7ff fdf6 	bl	800a086 <__retarget_lock_acquire_recursive>
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	071b      	lsls	r3, r3, #28
 800a49e:	d501      	bpl.n	800a4a4 <_vfiprintf_r+0x34>
 800a4a0:	692b      	ldr	r3, [r5, #16]
 800a4a2:	b99b      	cbnz	r3, 800a4cc <_vfiprintf_r+0x5c>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f000 faca 	bl	800aa40 <__swsetup_r>
 800a4ac:	b170      	cbz	r0, 800a4cc <_vfiprintf_r+0x5c>
 800a4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b0:	07dc      	lsls	r4, r3, #31
 800a4b2:	d504      	bpl.n	800a4be <_vfiprintf_r+0x4e>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4b8:	b01d      	add	sp, #116	; 0x74
 800a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4be:	89ab      	ldrh	r3, [r5, #12]
 800a4c0:	0598      	lsls	r0, r3, #22
 800a4c2:	d4f7      	bmi.n	800a4b4 <_vfiprintf_r+0x44>
 800a4c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c6:	f7ff fddf 	bl	800a088 <__retarget_lock_release_recursive>
 800a4ca:	e7f3      	b.n	800a4b4 <_vfiprintf_r+0x44>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4da:	2330      	movs	r3, #48	; 0x30
 800a4dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a690 <_vfiprintf_r+0x220>
 800a4e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e4:	f04f 0901 	mov.w	r9, #1
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	469a      	mov	sl, r3
 800a4ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f0:	b10a      	cbz	r2, 800a4f6 <_vfiprintf_r+0x86>
 800a4f2:	2a25      	cmp	r2, #37	; 0x25
 800a4f4:	d1f9      	bne.n	800a4ea <_vfiprintf_r+0x7a>
 800a4f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4fa:	d00b      	beq.n	800a514 <_vfiprintf_r+0xa4>
 800a4fc:	465b      	mov	r3, fp
 800a4fe:	4622      	mov	r2, r4
 800a500:	4629      	mov	r1, r5
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff ffa2 	bl	800a44c <__sfputs_r>
 800a508:	3001      	adds	r0, #1
 800a50a:	f000 80a9 	beq.w	800a660 <_vfiprintf_r+0x1f0>
 800a50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a510:	445a      	add	r2, fp
 800a512:	9209      	str	r2, [sp, #36]	; 0x24
 800a514:	f89a 3000 	ldrb.w	r3, [sl]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80a1 	beq.w	800a660 <_vfiprintf_r+0x1f0>
 800a51e:	2300      	movs	r3, #0
 800a520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a528:	f10a 0a01 	add.w	sl, sl, #1
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	9307      	str	r3, [sp, #28]
 800a530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a534:	931a      	str	r3, [sp, #104]	; 0x68
 800a536:	4654      	mov	r4, sl
 800a538:	2205      	movs	r2, #5
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	4854      	ldr	r0, [pc, #336]	; (800a690 <_vfiprintf_r+0x220>)
 800a540:	f7f5 fe46 	bl	80001d0 <memchr>
 800a544:	9a04      	ldr	r2, [sp, #16]
 800a546:	b9d8      	cbnz	r0, 800a580 <_vfiprintf_r+0x110>
 800a548:	06d1      	lsls	r1, r2, #27
 800a54a:	bf44      	itt	mi
 800a54c:	2320      	movmi	r3, #32
 800a54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a552:	0713      	lsls	r3, r2, #28
 800a554:	bf44      	itt	mi
 800a556:	232b      	movmi	r3, #43	; 0x2b
 800a558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55c:	f89a 3000 	ldrb.w	r3, [sl]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d015      	beq.n	800a590 <_vfiprintf_r+0x120>
 800a564:	9a07      	ldr	r2, [sp, #28]
 800a566:	4654      	mov	r4, sl
 800a568:	2000      	movs	r0, #0
 800a56a:	f04f 0c0a 	mov.w	ip, #10
 800a56e:	4621      	mov	r1, r4
 800a570:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a574:	3b30      	subs	r3, #48	; 0x30
 800a576:	2b09      	cmp	r3, #9
 800a578:	d94d      	bls.n	800a616 <_vfiprintf_r+0x1a6>
 800a57a:	b1b0      	cbz	r0, 800a5aa <_vfiprintf_r+0x13a>
 800a57c:	9207      	str	r2, [sp, #28]
 800a57e:	e014      	b.n	800a5aa <_vfiprintf_r+0x13a>
 800a580:	eba0 0308 	sub.w	r3, r0, r8
 800a584:	fa09 f303 	lsl.w	r3, r9, r3
 800a588:	4313      	orrs	r3, r2
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	46a2      	mov	sl, r4
 800a58e:	e7d2      	b.n	800a536 <_vfiprintf_r+0xc6>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	1d19      	adds	r1, r3, #4
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	9103      	str	r1, [sp, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bfbb      	ittet	lt
 800a59c:	425b      	neglt	r3, r3
 800a59e:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a2:	9307      	strge	r3, [sp, #28]
 800a5a4:	9307      	strlt	r3, [sp, #28]
 800a5a6:	bfb8      	it	lt
 800a5a8:	9204      	strlt	r2, [sp, #16]
 800a5aa:	7823      	ldrb	r3, [r4, #0]
 800a5ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ae:	d10c      	bne.n	800a5ca <_vfiprintf_r+0x15a>
 800a5b0:	7863      	ldrb	r3, [r4, #1]
 800a5b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b4:	d134      	bne.n	800a620 <_vfiprintf_r+0x1b0>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	9203      	str	r2, [sp, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfb8      	it	lt
 800a5c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5c6:	3402      	adds	r4, #2
 800a5c8:	9305      	str	r3, [sp, #20]
 800a5ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6a0 <_vfiprintf_r+0x230>
 800a5ce:	7821      	ldrb	r1, [r4, #0]
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f7f5 fdfc 	bl	80001d0 <memchr>
 800a5d8:	b138      	cbz	r0, 800a5ea <_vfiprintf_r+0x17a>
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	eba0 000a 	sub.w	r0, r0, sl
 800a5e0:	2240      	movs	r2, #64	; 0x40
 800a5e2:	4082      	lsls	r2, r0
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	3401      	adds	r4, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4829      	ldr	r0, [pc, #164]	; (800a694 <_vfiprintf_r+0x224>)
 800a5f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	f7f5 fdeb 	bl	80001d0 <memchr>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d03f      	beq.n	800a67e <_vfiprintf_r+0x20e>
 800a5fe:	4b26      	ldr	r3, [pc, #152]	; (800a698 <_vfiprintf_r+0x228>)
 800a600:	bb1b      	cbnz	r3, 800a64a <_vfiprintf_r+0x1da>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	3307      	adds	r3, #7
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	3308      	adds	r3, #8
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a610:	443b      	add	r3, r7
 800a612:	9309      	str	r3, [sp, #36]	; 0x24
 800a614:	e768      	b.n	800a4e8 <_vfiprintf_r+0x78>
 800a616:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61a:	460c      	mov	r4, r1
 800a61c:	2001      	movs	r0, #1
 800a61e:	e7a6      	b.n	800a56e <_vfiprintf_r+0xfe>
 800a620:	2300      	movs	r3, #0
 800a622:	3401      	adds	r4, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	4619      	mov	r1, r3
 800a628:	f04f 0c0a 	mov.w	ip, #10
 800a62c:	4620      	mov	r0, r4
 800a62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a632:	3a30      	subs	r2, #48	; 0x30
 800a634:	2a09      	cmp	r2, #9
 800a636:	d903      	bls.n	800a640 <_vfiprintf_r+0x1d0>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0c6      	beq.n	800a5ca <_vfiprintf_r+0x15a>
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	e7c4      	b.n	800a5ca <_vfiprintf_r+0x15a>
 800a640:	fb0c 2101 	mla	r1, ip, r1, r2
 800a644:	4604      	mov	r4, r0
 800a646:	2301      	movs	r3, #1
 800a648:	e7f0      	b.n	800a62c <_vfiprintf_r+0x1bc>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4b12      	ldr	r3, [pc, #72]	; (800a69c <_vfiprintf_r+0x22c>)
 800a652:	a904      	add	r1, sp, #16
 800a654:	4630      	mov	r0, r6
 800a656:	f3af 8000 	nop.w
 800a65a:	4607      	mov	r7, r0
 800a65c:	1c78      	adds	r0, r7, #1
 800a65e:	d1d6      	bne.n	800a60e <_vfiprintf_r+0x19e>
 800a660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a662:	07d9      	lsls	r1, r3, #31
 800a664:	d405      	bmi.n	800a672 <_vfiprintf_r+0x202>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d402      	bmi.n	800a672 <_vfiprintf_r+0x202>
 800a66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a66e:	f7ff fd0b 	bl	800a088 <__retarget_lock_release_recursive>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	065b      	lsls	r3, r3, #25
 800a676:	f53f af1d 	bmi.w	800a4b4 <_vfiprintf_r+0x44>
 800a67a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a67c:	e71c      	b.n	800a4b8 <_vfiprintf_r+0x48>
 800a67e:	ab03      	add	r3, sp, #12
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	462a      	mov	r2, r5
 800a684:	4b05      	ldr	r3, [pc, #20]	; (800a69c <_vfiprintf_r+0x22c>)
 800a686:	a904      	add	r1, sp, #16
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f879 	bl	800a780 <_printf_i>
 800a68e:	e7e4      	b.n	800a65a <_vfiprintf_r+0x1ea>
 800a690:	0800b2a7 	.word	0x0800b2a7
 800a694:	0800b2b1 	.word	0x0800b2b1
 800a698:	00000000 	.word	0x00000000
 800a69c:	0800a44d 	.word	0x0800a44d
 800a6a0:	0800b2ad 	.word	0x0800b2ad

0800a6a4 <_printf_common>:
 800a6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a8:	4616      	mov	r6, r2
 800a6aa:	4699      	mov	r9, r3
 800a6ac:	688a      	ldr	r2, [r1, #8]
 800a6ae:	690b      	ldr	r3, [r1, #16]
 800a6b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	bfb8      	it	lt
 800a6b8:	4613      	movlt	r3, r2
 800a6ba:	6033      	str	r3, [r6, #0]
 800a6bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	b10a      	cbz	r2, 800a6ca <_printf_common+0x26>
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	6033      	str	r3, [r6, #0]
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	0699      	lsls	r1, r3, #26
 800a6ce:	bf42      	ittt	mi
 800a6d0:	6833      	ldrmi	r3, [r6, #0]
 800a6d2:	3302      	addmi	r3, #2
 800a6d4:	6033      	strmi	r3, [r6, #0]
 800a6d6:	6825      	ldr	r5, [r4, #0]
 800a6d8:	f015 0506 	ands.w	r5, r5, #6
 800a6dc:	d106      	bne.n	800a6ec <_printf_common+0x48>
 800a6de:	f104 0a19 	add.w	sl, r4, #25
 800a6e2:	68e3      	ldr	r3, [r4, #12]
 800a6e4:	6832      	ldr	r2, [r6, #0]
 800a6e6:	1a9b      	subs	r3, r3, r2
 800a6e8:	42ab      	cmp	r3, r5
 800a6ea:	dc26      	bgt.n	800a73a <_printf_common+0x96>
 800a6ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6f0:	1e13      	subs	r3, r2, #0
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	bf18      	it	ne
 800a6f6:	2301      	movne	r3, #1
 800a6f8:	0692      	lsls	r2, r2, #26
 800a6fa:	d42b      	bmi.n	800a754 <_printf_common+0xb0>
 800a6fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a700:	4649      	mov	r1, r9
 800a702:	4638      	mov	r0, r7
 800a704:	47c0      	blx	r8
 800a706:	3001      	adds	r0, #1
 800a708:	d01e      	beq.n	800a748 <_printf_common+0xa4>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	6922      	ldr	r2, [r4, #16]
 800a70e:	f003 0306 	and.w	r3, r3, #6
 800a712:	2b04      	cmp	r3, #4
 800a714:	bf02      	ittt	eq
 800a716:	68e5      	ldreq	r5, [r4, #12]
 800a718:	6833      	ldreq	r3, [r6, #0]
 800a71a:	1aed      	subeq	r5, r5, r3
 800a71c:	68a3      	ldr	r3, [r4, #8]
 800a71e:	bf0c      	ite	eq
 800a720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a724:	2500      	movne	r5, #0
 800a726:	4293      	cmp	r3, r2
 800a728:	bfc4      	itt	gt
 800a72a:	1a9b      	subgt	r3, r3, r2
 800a72c:	18ed      	addgt	r5, r5, r3
 800a72e:	2600      	movs	r6, #0
 800a730:	341a      	adds	r4, #26
 800a732:	42b5      	cmp	r5, r6
 800a734:	d11a      	bne.n	800a76c <_printf_common+0xc8>
 800a736:	2000      	movs	r0, #0
 800a738:	e008      	b.n	800a74c <_printf_common+0xa8>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4652      	mov	r2, sl
 800a73e:	4649      	mov	r1, r9
 800a740:	4638      	mov	r0, r7
 800a742:	47c0      	blx	r8
 800a744:	3001      	adds	r0, #1
 800a746:	d103      	bne.n	800a750 <_printf_common+0xac>
 800a748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a750:	3501      	adds	r5, #1
 800a752:	e7c6      	b.n	800a6e2 <_printf_common+0x3e>
 800a754:	18e1      	adds	r1, r4, r3
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	2030      	movs	r0, #48	; 0x30
 800a75a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a75e:	4422      	add	r2, r4
 800a760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a768:	3302      	adds	r3, #2
 800a76a:	e7c7      	b.n	800a6fc <_printf_common+0x58>
 800a76c:	2301      	movs	r3, #1
 800a76e:	4622      	mov	r2, r4
 800a770:	4649      	mov	r1, r9
 800a772:	4638      	mov	r0, r7
 800a774:	47c0      	blx	r8
 800a776:	3001      	adds	r0, #1
 800a778:	d0e6      	beq.n	800a748 <_printf_common+0xa4>
 800a77a:	3601      	adds	r6, #1
 800a77c:	e7d9      	b.n	800a732 <_printf_common+0x8e>
	...

0800a780 <_printf_i>:
 800a780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	7e0f      	ldrb	r7, [r1, #24]
 800a786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a788:	2f78      	cmp	r7, #120	; 0x78
 800a78a:	4691      	mov	r9, r2
 800a78c:	4680      	mov	r8, r0
 800a78e:	460c      	mov	r4, r1
 800a790:	469a      	mov	sl, r3
 800a792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a796:	d807      	bhi.n	800a7a8 <_printf_i+0x28>
 800a798:	2f62      	cmp	r7, #98	; 0x62
 800a79a:	d80a      	bhi.n	800a7b2 <_printf_i+0x32>
 800a79c:	2f00      	cmp	r7, #0
 800a79e:	f000 80d4 	beq.w	800a94a <_printf_i+0x1ca>
 800a7a2:	2f58      	cmp	r7, #88	; 0x58
 800a7a4:	f000 80c0 	beq.w	800a928 <_printf_i+0x1a8>
 800a7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7b0:	e03a      	b.n	800a828 <_printf_i+0xa8>
 800a7b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7b6:	2b15      	cmp	r3, #21
 800a7b8:	d8f6      	bhi.n	800a7a8 <_printf_i+0x28>
 800a7ba:	a101      	add	r1, pc, #4	; (adr r1, 800a7c0 <_printf_i+0x40>)
 800a7bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7c0:	0800a819 	.word	0x0800a819
 800a7c4:	0800a82d 	.word	0x0800a82d
 800a7c8:	0800a7a9 	.word	0x0800a7a9
 800a7cc:	0800a7a9 	.word	0x0800a7a9
 800a7d0:	0800a7a9 	.word	0x0800a7a9
 800a7d4:	0800a7a9 	.word	0x0800a7a9
 800a7d8:	0800a82d 	.word	0x0800a82d
 800a7dc:	0800a7a9 	.word	0x0800a7a9
 800a7e0:	0800a7a9 	.word	0x0800a7a9
 800a7e4:	0800a7a9 	.word	0x0800a7a9
 800a7e8:	0800a7a9 	.word	0x0800a7a9
 800a7ec:	0800a931 	.word	0x0800a931
 800a7f0:	0800a859 	.word	0x0800a859
 800a7f4:	0800a8eb 	.word	0x0800a8eb
 800a7f8:	0800a7a9 	.word	0x0800a7a9
 800a7fc:	0800a7a9 	.word	0x0800a7a9
 800a800:	0800a953 	.word	0x0800a953
 800a804:	0800a7a9 	.word	0x0800a7a9
 800a808:	0800a859 	.word	0x0800a859
 800a80c:	0800a7a9 	.word	0x0800a7a9
 800a810:	0800a7a9 	.word	0x0800a7a9
 800a814:	0800a8f3 	.word	0x0800a8f3
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	1d1a      	adds	r2, r3, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	602a      	str	r2, [r5, #0]
 800a820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a828:	2301      	movs	r3, #1
 800a82a:	e09f      	b.n	800a96c <_printf_i+0x1ec>
 800a82c:	6820      	ldr	r0, [r4, #0]
 800a82e:	682b      	ldr	r3, [r5, #0]
 800a830:	0607      	lsls	r7, r0, #24
 800a832:	f103 0104 	add.w	r1, r3, #4
 800a836:	6029      	str	r1, [r5, #0]
 800a838:	d501      	bpl.n	800a83e <_printf_i+0xbe>
 800a83a:	681e      	ldr	r6, [r3, #0]
 800a83c:	e003      	b.n	800a846 <_printf_i+0xc6>
 800a83e:	0646      	lsls	r6, r0, #25
 800a840:	d5fb      	bpl.n	800a83a <_printf_i+0xba>
 800a842:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a846:	2e00      	cmp	r6, #0
 800a848:	da03      	bge.n	800a852 <_printf_i+0xd2>
 800a84a:	232d      	movs	r3, #45	; 0x2d
 800a84c:	4276      	negs	r6, r6
 800a84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a852:	485a      	ldr	r0, [pc, #360]	; (800a9bc <_printf_i+0x23c>)
 800a854:	230a      	movs	r3, #10
 800a856:	e012      	b.n	800a87e <_printf_i+0xfe>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	1d19      	adds	r1, r3, #4
 800a85e:	6029      	str	r1, [r5, #0]
 800a860:	0605      	lsls	r5, r0, #24
 800a862:	d501      	bpl.n	800a868 <_printf_i+0xe8>
 800a864:	681e      	ldr	r6, [r3, #0]
 800a866:	e002      	b.n	800a86e <_printf_i+0xee>
 800a868:	0641      	lsls	r1, r0, #25
 800a86a:	d5fb      	bpl.n	800a864 <_printf_i+0xe4>
 800a86c:	881e      	ldrh	r6, [r3, #0]
 800a86e:	4853      	ldr	r0, [pc, #332]	; (800a9bc <_printf_i+0x23c>)
 800a870:	2f6f      	cmp	r7, #111	; 0x6f
 800a872:	bf0c      	ite	eq
 800a874:	2308      	moveq	r3, #8
 800a876:	230a      	movne	r3, #10
 800a878:	2100      	movs	r1, #0
 800a87a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a87e:	6865      	ldr	r5, [r4, #4]
 800a880:	60a5      	str	r5, [r4, #8]
 800a882:	2d00      	cmp	r5, #0
 800a884:	bfa2      	ittt	ge
 800a886:	6821      	ldrge	r1, [r4, #0]
 800a888:	f021 0104 	bicge.w	r1, r1, #4
 800a88c:	6021      	strge	r1, [r4, #0]
 800a88e:	b90e      	cbnz	r6, 800a894 <_printf_i+0x114>
 800a890:	2d00      	cmp	r5, #0
 800a892:	d04b      	beq.n	800a92c <_printf_i+0x1ac>
 800a894:	4615      	mov	r5, r2
 800a896:	fbb6 f1f3 	udiv	r1, r6, r3
 800a89a:	fb03 6711 	mls	r7, r3, r1, r6
 800a89e:	5dc7      	ldrb	r7, [r0, r7]
 800a8a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8a4:	4637      	mov	r7, r6
 800a8a6:	42bb      	cmp	r3, r7
 800a8a8:	460e      	mov	r6, r1
 800a8aa:	d9f4      	bls.n	800a896 <_printf_i+0x116>
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d10b      	bne.n	800a8c8 <_printf_i+0x148>
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	07de      	lsls	r6, r3, #31
 800a8b4:	d508      	bpl.n	800a8c8 <_printf_i+0x148>
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	6861      	ldr	r1, [r4, #4]
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	bfde      	ittt	le
 800a8be:	2330      	movle	r3, #48	; 0x30
 800a8c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a8c8:	1b52      	subs	r2, r2, r5
 800a8ca:	6122      	str	r2, [r4, #16]
 800a8cc:	f8cd a000 	str.w	sl, [sp]
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	aa03      	add	r2, sp, #12
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	f7ff fee4 	bl	800a6a4 <_printf_common>
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d14a      	bne.n	800a976 <_printf_i+0x1f6>
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8e4:	b004      	add	sp, #16
 800a8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	f043 0320 	orr.w	r3, r3, #32
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	4833      	ldr	r0, [pc, #204]	; (800a9c0 <_printf_i+0x240>)
 800a8f4:	2778      	movs	r7, #120	; 0x78
 800a8f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	6829      	ldr	r1, [r5, #0]
 800a8fe:	061f      	lsls	r7, r3, #24
 800a900:	f851 6b04 	ldr.w	r6, [r1], #4
 800a904:	d402      	bmi.n	800a90c <_printf_i+0x18c>
 800a906:	065f      	lsls	r7, r3, #25
 800a908:	bf48      	it	mi
 800a90a:	b2b6      	uxthmi	r6, r6
 800a90c:	07df      	lsls	r7, r3, #31
 800a90e:	bf48      	it	mi
 800a910:	f043 0320 	orrmi.w	r3, r3, #32
 800a914:	6029      	str	r1, [r5, #0]
 800a916:	bf48      	it	mi
 800a918:	6023      	strmi	r3, [r4, #0]
 800a91a:	b91e      	cbnz	r6, 800a924 <_printf_i+0x1a4>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	f023 0320 	bic.w	r3, r3, #32
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	2310      	movs	r3, #16
 800a926:	e7a7      	b.n	800a878 <_printf_i+0xf8>
 800a928:	4824      	ldr	r0, [pc, #144]	; (800a9bc <_printf_i+0x23c>)
 800a92a:	e7e4      	b.n	800a8f6 <_printf_i+0x176>
 800a92c:	4615      	mov	r5, r2
 800a92e:	e7bd      	b.n	800a8ac <_printf_i+0x12c>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	6826      	ldr	r6, [r4, #0]
 800a934:	6961      	ldr	r1, [r4, #20]
 800a936:	1d18      	adds	r0, r3, #4
 800a938:	6028      	str	r0, [r5, #0]
 800a93a:	0635      	lsls	r5, r6, #24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	d501      	bpl.n	800a944 <_printf_i+0x1c4>
 800a940:	6019      	str	r1, [r3, #0]
 800a942:	e002      	b.n	800a94a <_printf_i+0x1ca>
 800a944:	0670      	lsls	r0, r6, #25
 800a946:	d5fb      	bpl.n	800a940 <_printf_i+0x1c0>
 800a948:	8019      	strh	r1, [r3, #0]
 800a94a:	2300      	movs	r3, #0
 800a94c:	6123      	str	r3, [r4, #16]
 800a94e:	4615      	mov	r5, r2
 800a950:	e7bc      	b.n	800a8cc <_printf_i+0x14c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	1d1a      	adds	r2, r3, #4
 800a956:	602a      	str	r2, [r5, #0]
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	6862      	ldr	r2, [r4, #4]
 800a95c:	2100      	movs	r1, #0
 800a95e:	4628      	mov	r0, r5
 800a960:	f7f5 fc36 	bl	80001d0 <memchr>
 800a964:	b108      	cbz	r0, 800a96a <_printf_i+0x1ea>
 800a966:	1b40      	subs	r0, r0, r5
 800a968:	6060      	str	r0, [r4, #4]
 800a96a:	6863      	ldr	r3, [r4, #4]
 800a96c:	6123      	str	r3, [r4, #16]
 800a96e:	2300      	movs	r3, #0
 800a970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a974:	e7aa      	b.n	800a8cc <_printf_i+0x14c>
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	462a      	mov	r2, r5
 800a97a:	4649      	mov	r1, r9
 800a97c:	4640      	mov	r0, r8
 800a97e:	47d0      	blx	sl
 800a980:	3001      	adds	r0, #1
 800a982:	d0ad      	beq.n	800a8e0 <_printf_i+0x160>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	079b      	lsls	r3, r3, #30
 800a988:	d413      	bmi.n	800a9b2 <_printf_i+0x232>
 800a98a:	68e0      	ldr	r0, [r4, #12]
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	4298      	cmp	r0, r3
 800a990:	bfb8      	it	lt
 800a992:	4618      	movlt	r0, r3
 800a994:	e7a6      	b.n	800a8e4 <_printf_i+0x164>
 800a996:	2301      	movs	r3, #1
 800a998:	4632      	mov	r2, r6
 800a99a:	4649      	mov	r1, r9
 800a99c:	4640      	mov	r0, r8
 800a99e:	47d0      	blx	sl
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d09d      	beq.n	800a8e0 <_printf_i+0x160>
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	68e3      	ldr	r3, [r4, #12]
 800a9a8:	9903      	ldr	r1, [sp, #12]
 800a9aa:	1a5b      	subs	r3, r3, r1
 800a9ac:	42ab      	cmp	r3, r5
 800a9ae:	dcf2      	bgt.n	800a996 <_printf_i+0x216>
 800a9b0:	e7eb      	b.n	800a98a <_printf_i+0x20a>
 800a9b2:	2500      	movs	r5, #0
 800a9b4:	f104 0619 	add.w	r6, r4, #25
 800a9b8:	e7f5      	b.n	800a9a6 <_printf_i+0x226>
 800a9ba:	bf00      	nop
 800a9bc:	0800b2b8 	.word	0x0800b2b8
 800a9c0:	0800b2c9 	.word	0x0800b2c9

0800a9c4 <__swbuf_r>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	460e      	mov	r6, r1
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	b118      	cbz	r0, 800a9d6 <__swbuf_r+0x12>
 800a9ce:	6a03      	ldr	r3, [r0, #32]
 800a9d0:	b90b      	cbnz	r3, 800a9d6 <__swbuf_r+0x12>
 800a9d2:	f7ff fab3 	bl	8009f3c <__sinit>
 800a9d6:	69a3      	ldr	r3, [r4, #24]
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	071a      	lsls	r2, r3, #28
 800a9de:	d525      	bpl.n	800aa2c <__swbuf_r+0x68>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	b31b      	cbz	r3, 800aa2c <__swbuf_r+0x68>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	6922      	ldr	r2, [r4, #16]
 800a9e8:	1a98      	subs	r0, r3, r2
 800a9ea:	6963      	ldr	r3, [r4, #20]
 800a9ec:	b2f6      	uxtb	r6, r6
 800a9ee:	4283      	cmp	r3, r0
 800a9f0:	4637      	mov	r7, r6
 800a9f2:	dc04      	bgt.n	800a9fe <__swbuf_r+0x3a>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7ff fc46 	bl	800a288 <_fflush_r>
 800a9fc:	b9e0      	cbnz	r0, 800aa38 <__swbuf_r+0x74>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	6022      	str	r2, [r4, #0]
 800aa0a:	701e      	strb	r6, [r3, #0]
 800aa0c:	6962      	ldr	r2, [r4, #20]
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d004      	beq.n	800aa1e <__swbuf_r+0x5a>
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	07db      	lsls	r3, r3, #31
 800aa18:	d506      	bpl.n	800aa28 <__swbuf_r+0x64>
 800aa1a:	2e0a      	cmp	r6, #10
 800aa1c:	d104      	bne.n	800aa28 <__swbuf_r+0x64>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f7ff fc31 	bl	800a288 <_fflush_r>
 800aa26:	b938      	cbnz	r0, 800aa38 <__swbuf_r+0x74>
 800aa28:	4638      	mov	r0, r7
 800aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f000 f806 	bl	800aa40 <__swsetup_r>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d0d5      	beq.n	800a9e4 <__swbuf_r+0x20>
 800aa38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa3c:	e7f4      	b.n	800aa28 <__swbuf_r+0x64>
	...

0800aa40 <__swsetup_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4b2a      	ldr	r3, [pc, #168]	; (800aaec <__swsetup_r+0xac>)
 800aa44:	4605      	mov	r5, r0
 800aa46:	6818      	ldr	r0, [r3, #0]
 800aa48:	460c      	mov	r4, r1
 800aa4a:	b118      	cbz	r0, 800aa54 <__swsetup_r+0x14>
 800aa4c:	6a03      	ldr	r3, [r0, #32]
 800aa4e:	b90b      	cbnz	r3, 800aa54 <__swsetup_r+0x14>
 800aa50:	f7ff fa74 	bl	8009f3c <__sinit>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa5a:	0718      	lsls	r0, r3, #28
 800aa5c:	d422      	bmi.n	800aaa4 <__swsetup_r+0x64>
 800aa5e:	06d9      	lsls	r1, r3, #27
 800aa60:	d407      	bmi.n	800aa72 <__swsetup_r+0x32>
 800aa62:	2309      	movs	r3, #9
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa70:	e034      	b.n	800aadc <__swsetup_r+0x9c>
 800aa72:	0758      	lsls	r0, r3, #29
 800aa74:	d512      	bpl.n	800aa9c <__swsetup_r+0x5c>
 800aa76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa78:	b141      	cbz	r1, 800aa8c <__swsetup_r+0x4c>
 800aa7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	d002      	beq.n	800aa88 <__swsetup_r+0x48>
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7ff fb2e 	bl	800a0e4 <_free_r>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa92:	81a3      	strh	r3, [r4, #12]
 800aa94:	2300      	movs	r3, #0
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	f043 0308 	orr.w	r3, r3, #8
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	6923      	ldr	r3, [r4, #16]
 800aaa6:	b94b      	cbnz	r3, 800aabc <__swsetup_r+0x7c>
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aaae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab2:	d003      	beq.n	800aabc <__swsetup_r+0x7c>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f840 	bl	800ab3c <__smakebuf_r>
 800aabc:	89a0      	ldrh	r0, [r4, #12]
 800aabe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aac2:	f010 0301 	ands.w	r3, r0, #1
 800aac6:	d00a      	beq.n	800aade <__swsetup_r+0x9e>
 800aac8:	2300      	movs	r3, #0
 800aaca:	60a3      	str	r3, [r4, #8]
 800aacc:	6963      	ldr	r3, [r4, #20]
 800aace:	425b      	negs	r3, r3
 800aad0:	61a3      	str	r3, [r4, #24]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	b943      	cbnz	r3, 800aae8 <__swsetup_r+0xa8>
 800aad6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aada:	d1c4      	bne.n	800aa66 <__swsetup_r+0x26>
 800aadc:	bd38      	pop	{r3, r4, r5, pc}
 800aade:	0781      	lsls	r1, r0, #30
 800aae0:	bf58      	it	pl
 800aae2:	6963      	ldrpl	r3, [r4, #20]
 800aae4:	60a3      	str	r3, [r4, #8]
 800aae6:	e7f4      	b.n	800aad2 <__swsetup_r+0x92>
 800aae8:	2000      	movs	r0, #0
 800aaea:	e7f7      	b.n	800aadc <__swsetup_r+0x9c>
 800aaec:	200000f8 	.word	0x200000f8

0800aaf0 <__swhatbuf_r>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	b096      	sub	sp, #88	; 0x58
 800aafc:	4615      	mov	r5, r2
 800aafe:	461e      	mov	r6, r3
 800ab00:	da0d      	bge.n	800ab1e <__swhatbuf_r+0x2e>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab08:	f04f 0100 	mov.w	r1, #0
 800ab0c:	bf0c      	ite	eq
 800ab0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab12:	2340      	movne	r3, #64	; 0x40
 800ab14:	2000      	movs	r0, #0
 800ab16:	6031      	str	r1, [r6, #0]
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	b016      	add	sp, #88	; 0x58
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	466a      	mov	r2, sp
 800ab20:	f000 f848 	bl	800abb4 <_fstat_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	dbec      	blt.n	800ab02 <__swhatbuf_r+0x12>
 800ab28:	9901      	ldr	r1, [sp, #4]
 800ab2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab32:	4259      	negs	r1, r3
 800ab34:	4159      	adcs	r1, r3
 800ab36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab3a:	e7eb      	b.n	800ab14 <__swhatbuf_r+0x24>

0800ab3c <__smakebuf_r>:
 800ab3c:	898b      	ldrh	r3, [r1, #12]
 800ab3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab40:	079d      	lsls	r5, r3, #30
 800ab42:	4606      	mov	r6, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	d507      	bpl.n	800ab58 <__smakebuf_r+0x1c>
 800ab48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	6123      	str	r3, [r4, #16]
 800ab50:	2301      	movs	r3, #1
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	b002      	add	sp, #8
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	ab01      	add	r3, sp, #4
 800ab5a:	466a      	mov	r2, sp
 800ab5c:	f7ff ffc8 	bl	800aaf0 <__swhatbuf_r>
 800ab60:	9900      	ldr	r1, [sp, #0]
 800ab62:	4605      	mov	r5, r0
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7ff f865 	bl	8009c34 <_malloc_r>
 800ab6a:	b948      	cbnz	r0, 800ab80 <__smakebuf_r+0x44>
 800ab6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab70:	059a      	lsls	r2, r3, #22
 800ab72:	d4ef      	bmi.n	800ab54 <__smakebuf_r+0x18>
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	f043 0302 	orr.w	r3, r3, #2
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	e7e3      	b.n	800ab48 <__smakebuf_r+0xc>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	9b00      	ldr	r3, [sp, #0]
 800ab8c:	6163      	str	r3, [r4, #20]
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	6120      	str	r0, [r4, #16]
 800ab92:	b15b      	cbz	r3, 800abac <__smakebuf_r+0x70>
 800ab94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f81d 	bl	800abd8 <_isatty_r>
 800ab9e:	b128      	cbz	r0, 800abac <__smakebuf_r+0x70>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	431d      	orrs	r5, r3
 800abb0:	81a5      	strh	r5, [r4, #12]
 800abb2:	e7cf      	b.n	800ab54 <__smakebuf_r+0x18>

0800abb4 <_fstat_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_fstat_r+0x20>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	4611      	mov	r1, r2
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	f7fe ff28 	bl	8009a16 <_fstat>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	d102      	bne.n	800abd0 <_fstat_r+0x1c>
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	b103      	cbz	r3, 800abd0 <_fstat_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd38      	pop	{r3, r4, r5, pc}
 800abd2:	bf00      	nop
 800abd4:	20002dfc 	.word	0x20002dfc

0800abd8 <_isatty_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_isatty_r+0x1c>)
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7fe ff27 	bl	8009a36 <_isatty>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_isatty_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_isatty_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20002dfc 	.word	0x20002dfc

0800abf8 <_raise_r>:
 800abf8:	291f      	cmp	r1, #31
 800abfa:	b538      	push	{r3, r4, r5, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	d904      	bls.n	800ac0c <_raise_r+0x14>
 800ac02:	2316      	movs	r3, #22
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac0e:	b112      	cbz	r2, 800ac16 <_raise_r+0x1e>
 800ac10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac14:	b94b      	cbnz	r3, 800ac2a <_raise_r+0x32>
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f830 	bl	800ac7c <_getpid_r>
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4601      	mov	r1, r0
 800ac20:	4620      	mov	r0, r4
 800ac22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac26:	f000 b817 	b.w	800ac58 <_kill_r>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d00a      	beq.n	800ac44 <_raise_r+0x4c>
 800ac2e:	1c59      	adds	r1, r3, #1
 800ac30:	d103      	bne.n	800ac3a <_raise_r+0x42>
 800ac32:	2316      	movs	r3, #22
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7e7      	b.n	800ac0a <_raise_r+0x12>
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac40:	4628      	mov	r0, r5
 800ac42:	4798      	blx	r3
 800ac44:	2000      	movs	r0, #0
 800ac46:	e7e0      	b.n	800ac0a <_raise_r+0x12>

0800ac48 <raise>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <raise+0xc>)
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f7ff bfd3 	b.w	800abf8 <_raise_r>
 800ac52:	bf00      	nop
 800ac54:	200000f8 	.word	0x200000f8

0800ac58 <_kill_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_kill_r+0x20>)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	f7fe fe77 	bl	8009958 <_kill>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d102      	bne.n	800ac74 <_kill_r+0x1c>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b103      	cbz	r3, 800ac74 <_kill_r+0x1c>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	20002dfc 	.word	0x20002dfc

0800ac7c <_getpid_r>:
 800ac7c:	f7fe be64 	b.w	8009948 <_getpid>

0800ac80 <_gettimeofday>:
 800ac80:	4b02      	ldr	r3, [pc, #8]	; (800ac8c <_gettimeofday+0xc>)
 800ac82:	2258      	movs	r2, #88	; 0x58
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac8a:	4770      	bx	lr
 800ac8c:	20002dfc 	.word	0x20002dfc

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
