
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d0  0800b2d0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2d0  0800b2d0  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2d0  0800b2d0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d0  0800b2d0  0001b2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800b2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003660  200000d8  0800b3b0  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003738  0800b3b0  00023738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb7d  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be5  00000000  00000000  0003ec85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00043870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  000453c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002969e  00000000  00000000  00046da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b5f  00000000  00000000  00070446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b6b  00000000  00000000  00092fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ab10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf4  00000000  00000000  0018ab60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00192754  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00192778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b04c 	.word	0x0800b04c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800b04c 	.word	0x0800b04c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d503      	bpl.n	8000ad2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <current_monitor_set+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000ad0:	e003      	b.n	8000ada <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <current_monitor_set+0x40>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4
 8000aec:	20000000 	.word	0x20000000

08000af0 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <current_monitor_ratio+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <current_monitor_init>:


void current_monitor_init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b10:	e009      	b.n	8000b26 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <current_monitor_init+0x64>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b74 <current_monitor_init+0x68>
 8000b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <current_monitor_init+0x64>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <current_monitor_init+0x64>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b78 <current_monitor_init+0x6c>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000b7c <current_monitor_init+0x70>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dce3      	bgt.n	8000b12 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <current_monitor_init+0x64>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d800      	bhi.n	8000b5c <current_monitor_init+0x50>
 8000b5a:	e7fe      	b.n	8000b5a <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <current_monitor_init+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <current_monitor_init+0x74>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	3d4ccccd 	.word	0x3d4ccccd
 8000b78:	3d23d70a 	.word	0x3d23d70a
 8000b7c:	43170000 	.word	0x43170000
 8000b80:	200000f4 	.word	0x200000f4

08000b84 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000b98:	f001 f854 	bl	8001c44 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d11c      	bne.n	8000c02 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e015      	b.n	8000bfa <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fe95 	bl	8001904 <ws2812_pixel_is_in_strip_range>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <animate_led_set_pixel+0x50>
 8000be0:	78bc      	ldrb	r4, [r7, #2]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	7bf8      	ldrb	r0, [r7, #15]
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	f000 fea2 	bl	8001938 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d9e6      	bls.n	8000bce <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000c00:	e020      	b.n	8000c44 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c02:	2301      	movs	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	e01a      	b.n	8000c3e <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d012      	beq.n	8000c38 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fe73 	bl	8001904 <ws2812_pixel_is_in_strip_range>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d009      	beq.n	8000c38 <animate_led_set_pixel+0x94>
 8000c24:	78bc      	ldrb	r4, [r7, #2]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	88b9      	ldrh	r1, [r7, #4]
 8000c2a:	7bb8      	ldrb	r0, [r7, #14]
 8000c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f000 fe80 	bl	8001938 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73bb      	strb	r3, [r7, #14]
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d9e1      	bls.n	8000c08 <animate_led_set_pixel+0x64>
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	717b      	strb	r3, [r7, #5]
 8000c62:	460b      	mov	r3, r1
 8000c64:	713b      	strb	r3, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <animate_led_set_all_pixels+0xd0>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d122      	bne.n	8000cbe <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c78:	2301      	movs	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	e01b      	b.n	8000cb6 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fddb 	bl	800183c <ws2812_get_strip_size>
 8000c86:	4603      	mov	r3, r0
 8000c88:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	82bb      	strh	r3, [r7, #20]
 8000c8e:	e00b      	b.n	8000ca8 <animate_led_set_all_pixels+0x5c>
 8000c90:	793c      	ldrb	r4, [r7, #4]
 8000c92:	797a      	ldrb	r2, [r7, #5]
 8000c94:	8ab9      	ldrh	r1, [r7, #20]
 8000c96:	7df8      	ldrb	r0, [r7, #23]
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	f000 fe4b 	bl	8001938 <ws2812b_set_led>
 8000ca2:	8abb      	ldrh	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	82bb      	strh	r3, [r7, #20]
 8000ca8:	8aba      	ldrh	r2, [r7, #20]
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3ef      	bcc.n	8000c90 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d9e0      	bls.n	8000c7e <animate_led_set_all_pixels+0x32>
 8000cbc:	e026      	b.n	8000d0c <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	74fb      	strb	r3, [r7, #19]
 8000cc2:	e020      	b.n	8000d06 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d018      	beq.n	8000d00 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000cce:	7cfb      	ldrb	r3, [r7, #19]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fdb3 	bl	800183c <ws2812_get_strip_size>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	823b      	strh	r3, [r7, #16]
 8000cde:	e00b      	b.n	8000cf8 <animate_led_set_all_pixels+0xac>
 8000ce0:	793c      	ldrb	r4, [r7, #4]
 8000ce2:	797a      	ldrb	r2, [r7, #5]
 8000ce4:	8a39      	ldrh	r1, [r7, #16]
 8000ce6:	7cf8      	ldrb	r0, [r7, #19]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	f000 fe23 	bl	8001938 <ws2812b_set_led>
 8000cf2:	8a3b      	ldrh	r3, [r7, #16]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	823b      	strh	r3, [r7, #16]
 8000cf8:	8a3a      	ldrh	r2, [r7, #16]
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3ef      	bcc.n	8000ce0 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	3301      	adds	r3, #1
 8000d04:	74fb      	strb	r3, [r7, #19]
 8000d06:	7cfb      	ldrb	r3, [r7, #19]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d9db      	bls.n	8000cc4 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff38 	bl	8000b84 <animate_led_show_strip>
}
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	200002c4 	.word	0x200002c4

08000d20 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <animate_led_solid_custom_color+0x40>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	81bb      	strh	r3, [r7, #12]
 8000d32:	2300      	movs	r3, #0
 8000d34:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fcf7 	bl	8001730 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000d42:	7b39      	ldrb	r1, [r7, #12]
 8000d44:	7b7a      	ldrb	r2, [r7, #13]
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	f7ff ff7f 	bl	8000c4c <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff17 	bl	8000b84 <animate_led_show_strip>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0800b064 	.word	0x0800b064

08000d64 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff ff6c 	bl	8000c4c <animate_led_set_all_pixels>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	80fb      	strh	r3, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd96 	bl	80018c0 <ws2812_led_get_max_strip_size>
 8000d94:	4603      	mov	r3, r0
 8000d96:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <animate_led_only_spell_word+0xbc>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f000 fcc1 	bl	8001730 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e034      	b.n	8000e1e <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000db4:	f000 ff4c 	bl	8001c50 <task_button_press_interrupt_occurred>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00d      	beq.n	8000dda <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	1c9a      	adds	r2, r3, #2
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	1c59      	adds	r1, r3, #1
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 ffa2 	bl	8001d18 <task_button_press_check_interrupts>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d126      	bne.n	8000e28 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	7b3a      	ldrb	r2, [r7, #12]
 8000de0:	7b7c      	ldrb	r4, [r7, #13]
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	88f8      	ldrh	r0, [r7, #6]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4623      	mov	r3, r4
 8000dea:	f7ff fedb 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fec7 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e00:	f001 fba2 	bl	8002548 <task_led_ctrl_speed>
 8000e04:	eeb0 7a40 	vmov.f32	s14, s0
 8000e08:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e10:	ee17 0a90 	vmov	r0, s15
 8000e14:	f001 fa32 	bl	800227c <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	8a7b      	ldrh	r3, [r7, #18]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbc6      	blt.n	8000db4 <animate_led_only_spell_word+0x3c>
 8000e26:	e000      	b.n	8000e2a <animate_led_only_spell_word+0xb2>
                return;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	ecbd 8b02 	vpop	{d8}
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	0800b064 	.word	0x0800b064

08000e38 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e44:	4b9b      	ldr	r3, [pc, #620]	; (80010b4 <animate_led_fade_in_fade_out+0x27c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	823b      	strh	r3, [r7, #16]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f000 fc6b 	bl	8001730 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e08b      	b.n	8000f78 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8000e60:	f000 fef6 	bl	8001c50 <task_button_press_interrupt_occurred>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00e      	beq.n	8000e88 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	1c9a      	adds	r2, r3, #2
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	1c59      	adds	r1, r3, #1
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 ff4c 	bl	8001d18 <task_button_press_check_interrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 810f 	bne.w	80010a6 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e8a:	f7ff fb43 	bl	8000514 <__aeabi_i2d>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000e94:	f7ff fcd2 	bl	800083c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4614      	mov	r4, r2
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	7c3b      	ldrb	r3, [r7, #16]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fb36 	bl	8000514 <__aeabi_i2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4620      	mov	r0, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f7ff fb9a 	bl	80005e8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fda6 	bl	8000a0c <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec6:	f7ff fb25 	bl	8000514 <__aeabi_i2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b7a      	ldr	r3, [pc, #488]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000ed0:	f7ff fcb4 	bl	800083c <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	7c7b      	ldrb	r3, [r7, #17]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb18 	bl	8000514 <__aeabi_i2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff fb7c 	bl	80005e8 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fd88 	bl	8000a0c <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8000f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f02:	f7ff fb07 	bl	8000514 <__aeabi_i2d>
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000f0c:	f7ff fc96 	bl	800083c <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	461d      	mov	r5, r3
 8000f18:	7cbb      	ldrb	r3, [r7, #18]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fafa 	bl	8000514 <__aeabi_i2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff fb5e 	bl	80005e8 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fd6a 	bl	8000a0c <__aeabi_d2f>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8000f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f44:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f48:	793b      	ldrb	r3, [r7, #4]
 8000f4a:	b2d9      	uxtb	r1, r3
 8000f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f54:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f58:	793b      	ldrb	r3, [r7, #4]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f64:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f68:	793b      	ldrb	r3, [r7, #4]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	89f8      	ldrh	r0, [r7, #14]
 8000f6e:	f7ff fe6d 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	f77f af70 	ble.w	8000e60 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	e08a      	b.n	800109c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8000f86:	f000 fe63 	bl	8001c50 <task_button_press_interrupt_occurred>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00d      	beq.n	8000fac <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	1c9a      	adds	r2, r3, #2
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	1c59      	adds	r1, r3, #1
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 feb9 	bl	8001d18 <task_button_press_check_interrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d17e      	bne.n	80010aa <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	f7ff fab1 	bl	8000514 <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000fb8:	f7ff fc40 	bl	800083c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff faa4 	bl	8000514 <__aeabi_i2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fb08 	bl	80005e8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd14 	bl	8000a0c <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000fe8:	6a38      	ldr	r0, [r7, #32]
 8000fea:	f7ff fa93 	bl	8000514 <__aeabi_i2d>
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000ff4:	f7ff fc22 	bl	800083c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	461d      	mov	r5, r3
 8001000:	7c7b      	ldrb	r3, [r7, #17]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa86 	bl	8000514 <__aeabi_i2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff faea 	bl	80005e8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fcf6 	bl	8000a0c <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001024:	6a38      	ldr	r0, [r7, #32]
 8001026:	f7ff fa75 	bl	8000514 <__aeabi_i2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8001030:	f7ff fc04 	bl	800083c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4614      	mov	r4, r2
 800103a:	461d      	mov	r5, r3
 800103c:	7cbb      	ldrb	r3, [r7, #18]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa68 	bl	8000514 <__aeabi_i2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff facc 	bl	80005e8 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fcd8 	bl	8000a0c <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001060:	edd7 7a07 	vldr	s15, [r7, #28]
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	edc7 7a01 	vstr	s15, [r7, #4]
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	edd7 7a06 	vldr	s15, [r7, #24]
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	edc7 7a01 	vstr	s15, [r7, #4]
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	edd7 7a05 	vldr	s15, [r7, #20]
 8001084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001088:	edc7 7a01 	vstr	s15, [r7, #4]
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	89f8      	ldrh	r0, [r7, #14]
 8001092:	f7ff fddb 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	3b02      	subs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f6bf af71 	bge.w	8000f86 <animate_led_fade_in_fade_out+0x14e>
 80010a4:	e002      	b.n	80010ac <animate_led_fade_in_fade_out+0x274>
                return;
 80010a6:	bf00      	nop
 80010a8:	e000      	b.n	80010ac <animate_led_fade_in_fade_out+0x274>
                return;
 80010aa:	bf00      	nop
    }
}
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bdb0      	pop	{r4, r5, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800b064 	.word	0x0800b064
 80010b8:	40700000 	.word	0x40700000

080010bc <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	ed2d 8b02 	vpush	{d8}
 80010c2:	b08b      	sub	sp, #44	; 0x2c
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	81fb      	strh	r3, [r7, #14]
 80010d0:	460b      	mov	r3, r1
 80010d2:	81bb      	strh	r3, [r7, #12]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fbf0 	bl	80018c0 <ws2812_led_get_max_strip_size>
 80010e0:	4603      	mov	r3, r0
 80010e2:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <animate_led_twinkle+0xe4>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	82bb      	strh	r3, [r7, #20]
 80010ea:	2300      	movs	r3, #0
 80010ec:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f000 fb1b 	bl	8001730 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e043      	b.n	8001188 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001100:	f000 fda6 	bl	8001c50 <task_button_press_interrupt_occurred>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00d      	beq.n	8001126 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	1c9a      	adds	r2, r3, #2
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	1c59      	adds	r1, r3, #1
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fdfc 	bl	8001d18 <task_button_press_check_interrupts>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d135      	bne.n	8001192 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 8001126:	8b7b      	ldrh	r3, [r7, #26]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f008 fe72 	bl	8009e14 <random_num>
 8001130:	4603      	mov	r3, r0
 8001132:	b299      	uxth	r1, r3
 8001134:	7d3a      	ldrb	r2, [r7, #20]
 8001136:	7d7c      	ldrb	r4, [r7, #21]
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	89f8      	ldrh	r0, [r7, #14]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff fd30 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd1c 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001156:	f001 f9f7 	bl	8002548 <task_led_ctrl_speed>
 800115a:	eeb0 7a40 	vmov.f32	s14, s0
 800115e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f001 f887 	bl	800227c <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 800116e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <animate_led_twinkle+0xc6>
 8001176:	89f8      	ldrh	r0, [r7, #14]
 8001178:	2300      	movs	r3, #0
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	f7ff fd65 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbb7      	blt.n	8001100 <animate_led_twinkle+0x44>
 8001190:	e000      	b.n	8001194 <animate_led_twinkle+0xd8>
                return;
 8001192:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	ecbd 8b02 	vpop	{d8}
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800b064 	.word	0x0800b064

080011a4 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	ed2d 8b02 	vpush	{d8}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <animate_led_sparkle_only_random_color+0x120>)
 80011bc:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fb7d 	bl	80018c0 <ws2812_led_get_max_strip_size>
 80011c6:	4603      	mov	r3, r0
 80011c8:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fb57 	bl	8001880 <ws2812_get_num_active_animation_leds>
 80011d2:	4603      	mov	r3, r0
 80011d4:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	83fb      	strh	r3, [r7, #30]
 80011da:	e059      	b.n	8001290 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80011dc:	f000 fd38 	bl	8001c50 <task_button_press_interrupt_occurred>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <animate_led_sparkle_only_random_color+0x5a>
 80011e6:	f107 020d 	add.w	r2, r7, #13
 80011ea:	f107 010e 	add.w	r1, r7, #14
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd90 	bl	8001d18 <task_button_press_check_interrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d15c      	bne.n	80012b8 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	4619      	mov	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f008 fe06 	bl	8009e14 <random_num>
 8001208:	4603      	mov	r3, r0
 800120a:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	b29c      	uxth	r4, r3
 8001210:	21ff      	movs	r1, #255	; 0xff
 8001212:	2000      	movs	r0, #0
 8001214:	f008 fdfe 	bl	8009e14 <random_num>
 8001218:	4603      	mov	r3, r0
 800121a:	b2dd      	uxtb	r5, r3
 800121c:	21ff      	movs	r1, #255	; 0xff
 800121e:	2000      	movs	r0, #0
 8001220:	f008 fdf8 	bl	8009e14 <random_num>
 8001224:	4603      	mov	r3, r0
 8001226:	b2de      	uxtb	r6, r3
 8001228:	21ff      	movs	r1, #255	; 0xff
 800122a:	2000      	movs	r0, #0
 800122c:	f008 fdf2 	bl	8009e14 <random_num>
 8001230:	4603      	mov	r3, r0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	88f8      	ldrh	r0, [r7, #6]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4633      	mov	r3, r6
 800123a:	462a      	mov	r2, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fcb1 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fc9d 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001254:	f001 f978 	bl	8002548 <task_led_ctrl_speed>
 8001258:	eeb0 7a40 	vmov.f32	s14, s0
 800125c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f001 f808 	bl	800227c <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <animate_led_sparkle_only_random_color+0xe6>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	b299      	uxth	r1, r3
 800127c:	88f8      	ldrh	r0, [r7, #6]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2200      	movs	r2, #0
 8001286:	f7ff fc8d 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800128a:	8bfb      	ldrh	r3, [r7, #30]
 800128c:	3301      	adds	r3, #1
 800128e:	83fb      	strh	r3, [r7, #30]
 8001290:	8bfb      	ldrh	r3, [r7, #30]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	8abb      	ldrh	r3, [r7, #20]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d492      	bmi.n	80011dc <animate_led_sparkle_only_random_color+0x38>
 80012b6:	e000      	b.n	80012ba <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012b8:	bf00      	nop
	}
}
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	ecbd 8b02 	vpop	{d8}
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	3f333333 	.word	0x3f333333

080012c8 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	ed2d 8b02 	vpush	{d8}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	4613      	mov	r3, r2
 80012da:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 faee 	bl	80018c0 <ws2812_led_get_max_strip_size>
 80012e4:	4603      	mov	r3, r0
 80012e6:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	82bb      	strh	r3, [r7, #20]
 80012ec:	e06c      	b.n	80013c8 <animate_led_rainbow_cycle+0x100>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012ee:	f000 fcaf 	bl	8001c50 <task_button_press_interrupt_occurred>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <animate_led_rainbow_cycle+0x48>
 80012f8:	f107 0209 	add.w	r2, r7, #9
 80012fc:	f107 010a 	add.w	r1, r7, #10
 8001300:	f107 030b 	add.w	r3, r7, #11
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fd07 	bl	8001d18 <task_button_press_check_interrupts>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d160      	bne.n	80013d2 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 8001310:	2300      	movs	r3, #0
 8001312:	82fb      	strh	r3, [r7, #22]
 8001314:	e02f      	b.n	8001376 <animate_led_rainbow_cycle+0xae>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001316:	f000 fc9b 	bl	8001c50 <task_button_press_interrupt_occurred>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <animate_led_rainbow_cycle+0x70>
 8001320:	f107 0209 	add.w	r2, r7, #9
 8001324:	f107 010a 	add.w	r1, r7, #10
 8001328:	f107 030b 	add.w	r3, r7, #11
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fcf3 	bl	8001d18 <task_button_press_check_interrupts>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d14e      	bne.n	80013d6 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 8001338:	8afb      	ldrh	r3, [r7, #22]
 800133a:	021a      	lsls	r2, r3, #8
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	8abb      	ldrh	r3, [r7, #20]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4413      	add	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f849 	bl	80013e4 <animate_led_wheel>
 8001352:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	781c      	ldrb	r4, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3302      	adds	r3, #2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	8af9      	ldrh	r1, [r7, #22]
 8001366:	88f8      	ldrh	r0, [r7, #6]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4623      	mov	r3, r4
 800136c:	f7ff fc1a 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	3301      	adds	r3, #1
 8001374:	82fb      	strh	r3, [r7, #22]
 8001376:	8afa      	ldrh	r2, [r7, #22]
 8001378:	8a7b      	ldrh	r3, [r7, #18]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3cb      	bcc.n	8001316 <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fbff 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001386:	f001 f8df 	bl	8002548 <task_led_ctrl_speed>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d103      	bne.n	80013a0 <animate_led_rainbow_cycle+0xd8>
 8001398:	2000      	movs	r0, #0
 800139a:	f000 ff6f 	bl	800227c <task_led_ctrl_delay>
 800139e:	e010      	b.n	80013c2 <animate_led_rainbow_cycle+0xfa>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013aa:	f001 f8cd 	bl	8002548 <task_led_ctrl_speed>
 80013ae:	eeb0 7a40 	vmov.f32	s14, s0
 80013b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ba:	ee17 0a90 	vmov	r0, s15
 80013be:	f000 ff5d 	bl	800227c <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 80013c2:	8abb      	ldrh	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	82bb      	strh	r3, [r7, #20]
 80013c8:	8abb      	ldrh	r3, [r7, #20]
 80013ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013ce:	d38e      	bcc.n	80012ee <animate_led_rainbow_cycle+0x26>
 80013d0:	e002      	b.n	80013d8 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013d6:	bf00      	nop
    }
}
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	ecbd 8b02 	vpop	{d8}
 80013e0:	bd90      	pop	{r4, r7, pc}
	...

080013e4 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b54      	cmp	r3, #84	; 0x54
 80013f2:	d813      	bhi.n	800141c <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	461a      	mov	r2, r3
 80013f8:	0052      	lsls	r2, r2, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <animate_led_wheel+0xa8>)
 8001400:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	461a      	mov	r2, r3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <animate_led_wheel+0xa8>)
 8001412:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <animate_led_wheel+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	709a      	strb	r2, [r3, #2]
 800141a:	e02f      	b.n	800147c <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2ba9      	cmp	r3, #169	; 0xa9
 8001420:	d816      	bhi.n	8001450 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3b55      	subs	r3, #85	; 0x55
 8001426:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	461a      	mov	r2, r3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <animate_led_wheel+0xa8>)
 8001438:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <animate_led_wheel+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	461a      	mov	r2, r3
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	4413      	add	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <animate_led_wheel+0xa8>)
 800144c:	709a      	strb	r2, [r3, #2]
 800144e:	e015      	b.n	800147c <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3356      	adds	r3, #86	; 0x56
 8001454:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <animate_led_wheel+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	461a      	mov	r2, r3
 8001460:	0052      	lsls	r2, r2, #1
 8001462:	4413      	add	r3, r2
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <animate_led_wheel+0xa8>)
 8001468:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <animate_led_wheel+0xa8>)
 800147a:	709a      	strb	r2, [r3, #2]
    }
    return c;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <animate_led_wheel+0xa8>)
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200000f8 	.word	0x200000f8

08001490 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	ed2d 8b02 	vpush	{d8}
 8001496:	b08b      	sub	sp, #44	; 0x2c
 8001498:	af02      	add	r7, sp, #8
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	4613      	mov	r3, r2
 80014a2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fa0a 	bl	80018c0 <ws2812_led_get_max_strip_size>
 80014ac:	4603      	mov	r3, r0
 80014ae:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <animate_led_theater_chase+0x140>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	2300      	movs	r3, #0
 80014b8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f000 f935 	bl	8001730 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e075      	b.n	80015b8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	e06c      	b.n	80015ac <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 80014d2:	f000 fbbd 	bl	8001c50 <task_button_press_interrupt_occurred>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	1c9a      	adds	r2, r3, #2
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fc13 	bl	8001d18 <task_button_press_check_interrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d163      	bne.n	80015c0 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e010      	b.n	8001520 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	b29a      	uxth	r2, r3
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b299      	uxth	r1, r3
 800150a:	7a3a      	ldrb	r2, [r7, #8]
 800150c:	7a7c      	ldrb	r4, [r7, #9]
 800150e:	7abb      	ldrb	r3, [r7, #10]
 8001510:	88f8      	ldrh	r0, [r7, #6]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff fb45 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3303      	adds	r3, #3
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbea      	blt.n	80014fe <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb2a 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001530:	f000 fb8e 	bl	8001c50 <task_button_press_interrupt_occurred>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00d      	beq.n	8001556 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	1c9a      	adds	r2, r3, #2
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fbe4 	bl	8001d18 <task_button_press_check_interrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d136      	bne.n	80015c4 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001560:	f000 fff2 	bl	8002548 <task_led_ctrl_speed>
 8001564:	eeb0 7a40 	vmov.f32	s14, s0
 8001568:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800156c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f000 fe82 	bl	800227c <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e00f      	b.n	800159e <animate_led_theater_chase+0x10e>
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	b29a      	uxth	r2, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b299      	uxth	r1, r3
 800158a:	88f8      	ldrh	r0, [r7, #6]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	f7ff fb06 	bl	8000ba4 <animate_led_set_pixel>
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3303      	adds	r3, #3
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbeb      	blt.n	800157e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	dd8f      	ble.n	80014d2 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	dd86      	ble.n	80014cc <animate_led_theater_chase+0x3c>
 80015be:	e002      	b.n	80015c6 <animate_led_theater_chase+0x136>
                    return;
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <animate_led_theater_chase+0x136>
                    return;
 80015c4:	bf00      	nop
        }
    }
}
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	ecbd 8b02 	vpop	{d8}
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	0800b064 	.word	0x0800b064

080015d4 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	ed2d 8b02 	vpush	{d8}
 80015da:	b08d      	sub	sp, #52	; 0x34
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f968 	bl	80018c0 <ws2812_led_get_max_strip_size>
 80015f0:	4603      	mov	r3, r0
 80015f2:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	e08a      	b.n	8001710 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	e080      	b.n	8001702 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001600:	f000 fb26 	bl	8001c50 <task_button_press_interrupt_occurred>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <animate_led_theater_chase_rainbow+0x4e>
 800160a:	f107 020d 	add.w	r2, r7, #13
 800160e:	f107 010e 	add.w	r1, r7, #14
 8001612:	f107 030f 	add.w	r3, r7, #15
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fb7e 	bl	8001d18 <task_button_press_check_interrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d17b      	bne.n	800171a <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e039      	b.n	800169c <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001628:	f000 fb12 	bl	8001c50 <task_button_press_interrupt_occurred>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <animate_led_theater_chase_rainbow+0x76>
 8001632:	f107 020d 	add.w	r2, r7, #13
 8001636:	f107 010e 	add.w	r1, r7, #14
 800163a:	f107 030f 	add.w	r3, r7, #15
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb6a 	bl	8001d18 <task_button_press_check_interrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d169      	bne.n	800171e <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	441a      	add	r2, r3
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <animate_led_theater_chase_rainbow+0x158>)
 8001652:	fb83 1302 	smull	r1, r3, r3, r2
 8001656:	4413      	add	r3, r2
 8001658:	11d9      	asrs	r1, r3, #7
 800165a:	17d3      	asrs	r3, r2, #31
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	1a5b      	subs	r3, r3, r1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	b2cb      	uxtb	r3, r1
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff febb 	bl	80013e4 <animate_led_wheel>
 800166e:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	b29a      	uxth	r2, r3
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b299      	uxth	r1, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3301      	adds	r3, #1
 8001684:	781c      	ldrb	r4, [r3, #0]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	88f8      	ldrh	r0, [r7, #6]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4623      	mov	r3, r4
 8001692:	f7ff fa87 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3303      	adds	r3, #3
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbc1      	blt.n	8001628 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fa6c 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016b6:	f000 ff47 	bl	8002548 <task_led_ctrl_speed>
 80016ba:	eeb0 7a40 	vmov.f32	s14, s0
 80016be:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c6:	ee17 0a90 	vmov	r0, s15
 80016ca:	f000 fdd7 	bl	800227c <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e00f      	b.n	80016f4 <animate_led_theater_chase_rainbow+0x120>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b299      	uxth	r1, r3
 80016e0:	88f8      	ldrh	r0, [r7, #6]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	f7ff fa5b 	bl	8000ba4 <animate_led_set_pixel>
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3303      	adds	r3, #3
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbeb      	blt.n	80016d4 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	3301      	adds	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f77f af7b 	ble.w	8001600 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	f77f af71 	ble.w	80015fa <animate_led_theater_chase_rainbow+0x26>
 8001718:	e002      	b.n	8001720 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171a:	bf00      	nop
 800171c:	e000      	b.n	8001720 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171e:	bf00      	nop
        }
    }
}
 8001720:	372c      	adds	r7, #44	; 0x2c
 8001722:	46bd      	mov	sp, r7
 8001724:	ecbd 8b02 	vpop	{d8}
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	80808081 	.word	0x80808081

08001730 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2da      	uxtb	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0a1a      	lsrs	r2, r3, #8
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <reset_ws2812b+0x2c>)
 8001770:	2100      	movs	r1, #0
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <reset_ws2812b+0x30>)
 8001774:	f006 f846 	bl	8007804 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <reset_ws2812b+0x2c>)
 800177c:	2104      	movs	r1, #4
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <reset_ws2812b+0x30>)
 8001780:	f006 f840 	bl	8007804 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <reset_ws2812b+0x2c>)
 8001788:	2108      	movs	r1, #8
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <reset_ws2812b+0x30>)
 800178c:	f006 f83a 	bl	8007804 <HAL_TIM_PWM_Start_DMA>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002d0 	.word	0x200002d0
 8001798:	20001e10 	.word	0x20001e10

0800179c <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d104      	bne.n	80017f6 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	737b      	strb	r3, [r7, #13]
        break;
 80017f4:	e000      	b.n	80017f8 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 80017f6:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 80017f8:	89fa      	ldrh	r2, [r7, #14]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001838 <ws2812_get_pwm_strip_offset+0x64>
 8001818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	b29b      	uxth	r3, r3
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	453b8000 	.word	0x453b8000

0800183c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d103      	bne.n	8001858 <ws2812_get_strip_size+0x1c>
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <ws2812_get_strip_size+0x3c>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	e009      	b.n	800186c <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff9e 	bl	800179c <ws2812_convert_strip_num_to_strip_bit>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <ws2812_get_strip_size+0x40>)
 8001866:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800186a:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 800186c:	89fb      	ldrh	r3, [r7, #14]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002c6 	.word	0x200002c6
 800187c:	2000005c 	.word	0x2000005c

08001880 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d103      	bne.n	800189c <ws2812_get_num_active_animation_leds+0x1c>
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <ws2812_get_num_active_animation_leds+0x3c>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	81fb      	strh	r3, [r7, #14]
 800189a:	e008      	b.n	80018ae <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <ws2812_get_num_active_animation_leds+0x2e>
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	3397      	adds	r3, #151	; 0x97
 80018ac:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80018ae:	89fb      	ldrh	r3, [r7, #14]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	200002c2 	.word	0x200002c2

080018c0 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d103      	bne.n	80018dc <ws2812_led_get_max_strip_size+0x1c>
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <ws2812_led_get_max_strip_size+0x40>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	e00a      	b.n	80018f2 <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <ws2812_led_get_max_strip_size+0x32>
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	2b96      	cmp	r3, #150	; 0x96
 80018ec:	d801      	bhi.n	80018f2 <ws2812_led_get_max_strip_size+0x32>
 80018ee:	2397      	movs	r3, #151	; 0x97
 80018f0:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80018f2:	89fb      	ldrh	r3, [r7, #14]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200002c6 	.word	0x200002c6

08001904 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d104      	bne.n	8001928 <ws2812_pixel_is_in_strip_range+0x24>
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	2b96      	cmp	r3, #150	; 0x96
 8001922:	d801      	bhi.n	8001928 <ws2812_pixel_is_in_strip_range+0x24>
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	4603      	mov	r3, r0
 800194c:	81bb      	strh	r3, [r7, #12]
 800194e:	460b      	mov	r3, r1
 8001950:	73bb      	strb	r3, [r7, #14]
 8001952:	4613      	mov	r3, r2
 8001954:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff2d 	bl	80017b8 <ws2812_convert_strip_bit_to_strip_num>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <ws2812b_set_led+0xd0>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <ws2812b_set_led+0xd4>)
 800197a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800197e:	89ba      	ldrh	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	440b      	add	r3, r1
 8001988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001990:	793a      	ldrb	r2, [r7, #4]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <ws2812b_set_led+0xd0>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <ws2812b_set_led+0xd4>)
 80019ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019b2:	89ba      	ldrh	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80019c4:	793a      	ldrb	r2, [r7, #4]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 80019ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <ws2812b_set_led+0xd0>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <ws2812b_set_led+0xd4>)
 80019e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019e8:	89ba      	ldrh	r2, [r7, #12]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80019fa:	793a      	ldrb	r2, [r7, #4]
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	709a      	strb	r2, [r3, #2]
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	200002cc 	.word	0x200002cc

08001a10 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001a1a:	2397      	movs	r3, #151	; 0x97
 8001a1c:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fed8 	bl	80017d4 <ws2812_get_pwm_strip_offset>
 8001a24:	4603      	mov	r3, r0
 8001a26:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001a28:	e002      	b.n	8001a30 <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 ff6a 	bl	8002904 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f5      	bne.n	8001a2a <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	82fb      	strh	r3, [r7, #22]
 8001a42:	e046      	b.n	8001ad2 <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	8afa      	ldrh	r2, [r7, #22]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	8afa      	ldrh	r2, [r7, #22]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	4403      	add	r3, r0
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a68:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	8afa      	ldrh	r2, [r7, #22]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	4403      	add	r3, r0
 8001a78:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001a7a:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a7c:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	757b      	strb	r3, [r7, #21]
 8001a82:	e020      	b.n	8001ac6 <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001a84:	7d7b      	ldrb	r3, [r7, #21]
 8001a86:	f1c3 0317 	rsb	r3, r3, #23
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 8001a9a:	2028      	movs	r0, #40	; 0x28
 8001a9c:	e000      	b.n	8001aa0 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001a9e:	2014      	movs	r0, #20
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	8afa      	ldrh	r2, [r7, #22]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	7d7b      	ldrb	r3, [r7, #21]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	440b      	add	r3, r1
 8001abc:	4602      	mov	r2, r0
 8001abe:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	757b      	strb	r3, [r7, #21]
 8001ac6:	7d7b      	ldrb	r3, [r7, #21]
 8001ac8:	2b17      	cmp	r3, #23
 8001aca:	d9db      	bls.n	8001a84 <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001acc:	8afb      	ldrh	r3, [r7, #22]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	82fb      	strh	r3, [r7, #22]
 8001ad2:	8afb      	ldrh	r3, [r7, #22]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d8b4      	bhi.n	8001a44 <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	827b      	strh	r3, [r7, #18]
 8001ade:	e012      	b.n	8001b06 <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	441a      	add	r2, r3
 8001af4:	8a7b      	ldrh	r3, [r7, #18]
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001b00:	8a7b      	ldrh	r3, [r7, #18]
 8001b02:	3301      	adds	r3, #1
 8001b04:	827b      	strh	r3, [r7, #18]
 8001b06:	8a7b      	ldrh	r3, [r7, #18]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b50 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d4e0      	bmi.n	8001ae0 <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	441a      	add	r2, r3
 8001b2e:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8001b32:	2100      	movs	r1, #0
 8001b34:	4808      	ldr	r0, [pc, #32]	; (8001b58 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001b36:	f005 fe65 	bl	8007804 <HAL_TIM_PWM_Start_DMA>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000006e 	.word	0x2000006e
 8001b48:	200002cc 	.word	0x200002cc
 8001b4c:	200002c8 	.word	0x200002c8
 8001b50:	453b8000 	.word	0x453b8000
 8001b54:	2000006d 	.word	0x2000006d
 8001b58:	20001e10 	.word	0x20001e10

08001b5c <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <ws2812b_init+0xc8>)
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <ws2812b_init+0xcc>)
 8001b66:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	e00f      	b.n	8001b92 <ws2812b_init+0x36>
 8001b72:	2201      	movs	r2, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <ws2812b_init+0xd0>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <ws2812b_init+0xd0>)
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	ddec      	ble.n	8001b72 <ws2812b_init+0x16>
	switch (num_strips)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10d      	bne.n	8001bba <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <ws2812b_init+0xd4>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3397      	adds	r3, #151	; 0x97
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <ws2812b_init+0xd4>)
 8001ba8:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <ws2812b_init+0xd8>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2b96      	cmp	r3, #150	; 0x96
 8001bb0:	d802      	bhi.n	8001bb8 <ws2812b_init+0x5c>
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <ws2812b_init+0xd8>)
 8001bb4:	2297      	movs	r2, #151	; 0x97
 8001bb6:	801a      	strh	r2, [r3, #0]
		break;
 8001bb8:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <ws2812b_init+0xd4>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c38 <ws2812b_init+0xdc>
 8001bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f008 f984 	bl	8009eec <malloc>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <ws2812b_init+0xe0>)
 8001bea:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <ws2812b_init+0xd4>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c02:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001c38 <ws2812b_init+0xdc>
 8001c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0e:	ee17 2a90 	vmov	r2, s15
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <ws2812b_init+0xe4>)
 8001c14:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001c16:	f7fe ff79 	bl	8000b0c <current_monitor_init>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002cc 	.word	0x200002cc
 8001c28:	200000fc 	.word	0x200000fc
 8001c2c:	200002c4 	.word	0x200002c4
 8001c30:	200002c2 	.word	0x200002c2
 8001c34:	200002c6 	.word	0x200002c6
 8001c38:	453b8000 	.word	0x453b8000
 8001c3c:	200002c8 	.word	0x200002c8
 8001c40:	20000334 	.word	0x20000334

08001c44 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001c48:	f7ff fee2 	bl	8001a10 <ws2812b_fill_pwm_buffer_strip_one>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <task_button_press_interrupt_occurred+0x14>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2000035b 	.word	0x2000035b

08001c68 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d817      	bhi.n	8001ca8 <task_led_ctrl_button_to_isr+0x40>
 8001c78:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <task_led_ctrl_button_to_isr+0x18>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001ca3 	.word	0x08001ca3
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
        break;
 8001c94:	e009      	b.n	8001caa <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
        break;
 8001c9a:	e006      	b.n	8001caa <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8001ca0:	e003      	b.n	8001caa <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8001ca6:	e000      	b.n	8001caa <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001ca8:	bf00      	nop
    }
    return return_val;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	54d1      	strb	r1, [r2, r3]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	2000035b 	.word	0x2000035b
 8001ce0:	2000035c 	.word	0x2000035c

08001ce4 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <task_button_press_ctrl_interrupt_flag+0x20>
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2000035c 	.word	0x2000035c

08001d18 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8001d28:	f000 f85a 	bl	8001de0 <task_button_press_major_state_change>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d008      	beq.n	8001d44 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8001d32:	f000 f849 	bl	8001dc8 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7fe ffef 	bl	8000d20 <animate_led_solid_custom_color>
 8001d42:	e039      	b.n	8001db8 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff ffcd 	bl	8001ce4 <task_button_press_ctrl_interrupt_flag>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8001d50:	f000 f83a 	bl	8001dc8 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d54:	2301      	movs	r3, #1
 8001d56:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7fe ffe0 	bl	8000d20 <animate_led_solid_custom_color>
 8001d60:	e02a      	b.n	8001db8 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8001d62:	2003      	movs	r0, #3
 8001d64:	f7ff ffbe 	bl	8001ce4 <task_button_press_ctrl_interrupt_flag>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8001d6e:	f000 f82b 	bl	8001dc8 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 8001d72:	e002      	b.n	8001d7a <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 8001d74:	200a      	movs	r0, #10
 8001d76:	f000 fdc5 	bl	8002904 <osDelay>
        while (g_animate_led_pause_flag)
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <task_button_press_check_interrupts+0xac>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f8      	bne.n	8001d74 <task_button_press_check_interrupts+0x5c>
 8001d82:	e019      	b.n	8001db8 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff ffad 	bl	8001ce4 <task_button_press_ctrl_interrupt_flag>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8001d90:	f000 f81a 	bl	8001dc8 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 8001d94:	f000 fb3c 	bl	8002410 <task_led_ctrl_color_red_hex>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8001da0:	f000 fb5e 	bl	8002460 <task_led_ctrl_color_green_hex>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8001dac:	f000 fb80 	bl	80024b0 <task_led_ctrl_color_blue_hex>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000035a 	.word	0x2000035a

08001dc8 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <task_button_press_interrupt_flag_clear+0x14>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	2000035b 	.word	0x2000035b

08001de0 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <task_button_press_major_state_change+0x14>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000359 	.word	0x20000359

08001df8 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	f107 0208 	add.w	r2, r7, #8
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f002 fa1e 	bl	800425c <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2101      	movs	r1, #1
 8001e24:	488b      	ldr	r0, [pc, #556]	; (8002054 <task_button_press+0x25c>)
 8001e26:	f004 f90f 	bl	8006048 <HAL_GPIO_WritePin>
        osDelay(700);
 8001e2a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001e2e:	f000 fd69 	bl	8002904 <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2101      	movs	r1, #1
 8001e36:	4887      	ldr	r0, [pc, #540]	; (8002054 <task_button_press+0x25c>)
 8001e38:	f004 f906 	bl	8006048 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b85      	ldr	r3, [pc, #532]	; (8002058 <task_button_press+0x260>)
 8001e44:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4982      	ldr	r1, [pc, #520]	; (8002058 <task_button_press+0x260>)
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e5e:	d206      	bcs.n	8001e6e <task_button_press+0x76>
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <task_button_press+0x264>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <task_button_press+0x264>)
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e002      	b.n	8001e74 <task_button_press+0x7c>
        else fast_press_count = 0;
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <task_button_press+0x264>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fef5 	bl	8001c68 <task_led_ctrl_button_to_isr>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff19 	bl	8001cb8 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8001e86:	4b75      	ldr	r3, [pc, #468]	; (800205c <task_button_press+0x264>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d975      	bls.n	8001f7a <task_button_press+0x182>
        {
            task_button_press_major_change = true;
 8001e8e:	4b74      	ldr	r3, [pc, #464]	; (8002060 <task_button_press+0x268>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8001e94:	4b71      	ldr	r3, [pc, #452]	; (800205c <task_button_press+0x264>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d841      	bhi.n	8001f26 <task_button_press+0x12e>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <task_button_press+0xb0>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	08001ed3 	.word	0x08001ed3
 8001eb0:	08001eef 	.word	0x08001eef
 8001eb4:	08001f09 	.word	0x08001f09
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <task_button_press+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <task_button_press+0x26c>)
 8001ec0:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8001ecc:	f000 fb90 	bl	80025f0 <task_led_ctrl_speed_reset>

                break;
 8001ed0:	e02a      	b.n	8001f28 <task_button_press+0x130>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <task_button_press+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a63      	ldr	r2, [pc, #396]	; (8002068 <task_button_press+0x270>)
 8001eda:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8001edc:	23ff      	movs	r3, #255	; 0xff
 8001ede:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8001ee0:	2328      	movs	r3, #40	; 0x28
 8001ee2:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8001ee4:	f000 fb90 	bl	8002608 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8001ee8:	f000 fbb8 	bl	800265c <task_led_ctrl_animate_state_demo>
                break;
 8001eec:	e01c      	b.n	8001f28 <task_button_press+0x130>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <task_button_press+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <task_button_press+0x274>)
 8001ef6:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8001ef8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001efc:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8001efe:	2317      	movs	r3, #23
 8001f00:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8001f02:	f000 fa37 	bl	8002374 <task_led_ctrl_color_state_demo>
                break;
 8001f06:	e00f      	b.n	8001f28 <task_button_press+0x130>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8001f08:	f000 f9ce 	bl	80022a8 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8001f0c:	f000 f9fc 	bl	8002308 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <task_button_press+0x278>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a56      	ldr	r2, [pc, #344]	; (8002070 <task_button_press+0x278>)
 8001f18:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8001f1a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001f1e:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8001f20:	2306      	movs	r3, #6
 8001f22:	74fb      	strb	r3, [r7, #19]
                break;
 8001f24:	e000      	b.n	8001f28 <task_button_press+0x130>
                default:
                break;
 8001f26:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
 8001f2c:	e012      	b.n	8001f54 <task_button_press+0x15c>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7fe fef5 	bl	8000d20 <animate_led_solid_custom_color>
                osDelay(500);
 8001f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3a:	f000 fce3 	bl	8002904 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2001      	movs	r0, #1
 8001f42:	f7fe feed 	bl	8000d20 <animate_led_solid_custom_color>
                osDelay(500);
 8001f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4a:	f000 fcdb 	bl	8002904 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8001f4e:	7cbb      	ldrb	r3, [r7, #18]
 8001f50:	3301      	adds	r3, #1
 8001f52:	74bb      	strb	r3, [r7, #18]
 8001f54:	7cbb      	ldrb	r3, [r7, #18]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d9e9      	bls.n	8001f2e <task_button_press+0x136>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8001f5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2118      	movs	r1, #24
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fc31 	bl	80057ca <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8001f68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fc48 	bl	8005802 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <task_button_press+0x268>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e74a      	b.n	8001e10 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fe72 	bl	8001c68 <task_led_ctrl_button_to_isr>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe96 	bl	8001cb8 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d85d      	bhi.n	8002050 <task_button_press+0x258>
 8001f94:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <task_button_press+0x1a4>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fcd 	.word	0x08001fcd
 8001fa4:	08002001 	.word	0x08002001
 8001fa8:	08002031 	.word	0x08002031
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <task_button_press+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <task_button_press+0x26c>)
 8001fb4:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8001fb6:	f000 fb03 	bl	80025c0 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2118      	movs	r1, #24
 8001fbe:	2008      	movs	r0, #8
 8001fc0:	f003 fc03 	bl	80057ca <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8001fc4:	2008      	movs	r0, #8
 8001fc6:	f003 fc1c 	bl	8005802 <HAL_NVIC_EnableIRQ>
                break;
 8001fca:	e042      	b.n	8002052 <task_button_press+0x25a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <task_button_press+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a25      	ldr	r2, [pc, #148]	; (8002068 <task_button_press+0x270>)
 8001fd4:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8001fd6:	f000 fb69 	bl	80026ac <task_led_ctrl_animate_state>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <task_button_press+0x1ee>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8001fe0:	f000 fb4e 	bl	8002680 <task_led_ctrl_animate_state_fixed>
 8001fe4:	e003      	b.n	8001fee <task_button_press+0x1f6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8001fe6:	f000 fb0f 	bl	8002608 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8001fea:	f000 fb19 	bl	8002620 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2118      	movs	r1, #24
 8001ff2:	2028      	movs	r0, #40	; 0x28
 8001ff4:	f003 fbe9 	bl	80057ca <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8001ff8:	2028      	movs	r0, #40	; 0x28
 8001ffa:	f003 fc02 	bl	8005802 <HAL_NVIC_EnableIRQ>
                break;
 8001ffe:	e028      	b.n	8002052 <task_button_press+0x25a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <task_button_press+0x274>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <task_button_press+0x274>)
 8002008:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 800200a:	f000 f9a7 	bl	800235c <task_led_ctrl_color_state>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <task_button_press+0x222>
                    {
                        task_led_ctrl_color_state_fixed();
 8002014:	f000 f9ba 	bl	800238c <task_led_ctrl_color_state_fixed>
 8002018:	e001      	b.n	800201e <task_button_press+0x226>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 800201a:	f000 f9c9 	bl	80023b0 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2118      	movs	r1, #24
 8002022:	2017      	movs	r0, #23
 8002024:	f003 fbd1 	bl	80057ca <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002028:	2017      	movs	r0, #23
 800202a:	f003 fbea 	bl	8005802 <HAL_NVIC_EnableIRQ>

                break;
 800202e:	e010      	b.n	8002052 <task_button_press+0x25a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <task_button_press+0x278>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <task_button_press+0x278>)
 8002038:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 800203a:	f000 f971 	bl	8002320 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2118      	movs	r1, #24
 8002042:	2006      	movs	r0, #6
 8002044:	f003 fbc1 	bl	80057ca <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002048:	2006      	movs	r0, #6
 800204a:	f003 fbda 	bl	8005802 <HAL_NVIC_EnableIRQ>
                break;
 800204e:	e000      	b.n	8002052 <task_button_press+0x25a>
                default:
                break;
 8002050:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002052:	e6dd      	b.n	8001e10 <task_button_press+0x18>
 8002054:	48000400 	.word	0x48000400
 8002058:	20000338 	.word	0x20000338
 800205c:	20000358 	.word	0x20000358
 8002060:	20000359 	.word	0x20000359
 8002064:	20000360 	.word	0x20000360
 8002068:	20000364 	.word	0x20000364
 800206c:	20000368 	.word	0x20000368
 8002070:	2000036c 	.word	0x2000036c

08002074 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <task_led_ctrl_adjust_parameters+0x74>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <task_led_ctrl_adjust_parameters+0x74>)
 800208e:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <task_led_ctrl_adjust_parameters+0x78>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11b      	bne.n	80020d0 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8002098:	88bb      	ldrh	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <task_led_ctrl_adjust_parameters+0x32>
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f8eb 	bl	800227c <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <task_led_ctrl_adjust_parameters+0x74>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d10f      	bne.n	80020d0 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <task_led_ctrl_adjust_parameters+0x7c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <task_led_ctrl_adjust_parameters+0x7c>)
 80020ba:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <task_led_ctrl_adjust_parameters+0x7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d102      	bne.n	80020ca <task_led_ctrl_adjust_parameters+0x56>
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <task_led_ctrl_adjust_parameters+0x7c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <task_led_ctrl_adjust_parameters+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80020d0:	f000 f944 	bl	800235c <task_led_ctrl_color_state>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <task_led_ctrl_adjust_parameters+0x6a>
 80020da:	f000 fa0f 	bl	80024fc <task_led_ctrl_color_random>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000374 	.word	0x20000374
 80020ec:	20000370 	.word	0x20000370
 80020f0:	20000371 	.word	0x20000371

080020f4 <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	6078      	str	r0, [r7, #4]
    osDelay(10);
 80020fc:	200a      	movs	r0, #10
 80020fe:	f000 fc01 	bl	8002904 <osDelay>
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 8002102:	e002      	b.n	800210a <task_led_ctrl_strip_one+0x16>
 8002104:	2064      	movs	r0, #100	; 0x64
 8002106:	f000 fbfd 	bl	8002904 <osDelay>
 800210a:	f7ff fe69 	bl	8001de0 <task_button_press_major_state_change>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f7      	bne.n	8002104 <task_led_ctrl_strip_one+0x10>

        if (flash_info_animation_enabled(g_led_state))
 8002114:	4b57      	ldr	r3, [pc, #348]	; (8002274 <task_led_ctrl_strip_one+0x180>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f007 fd01 	bl	8009b20 <flash_info_animation_enabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a2 	beq.w	800226a <task_led_ctrl_strip_one+0x176>
        {
            switch(g_led_state)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <task_led_ctrl_strip_one+0x180>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b09      	cmp	r3, #9
 800212c:	f200 809f 	bhi.w	800226e <task_led_ctrl_strip_one+0x17a>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <task_led_ctrl_strip_one+0x44>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002251 	.word	0x08002251
 800213c:	08002161 	.word	0x08002161
 8002140:	08002177 	.word	0x08002177
 8002144:	080021ad 	.word	0x080021ad
 8002148:	080021c5 	.word	0x080021c5
 800214c:	080021d9 	.word	0x080021d9
 8002150:	080021eb 	.word	0x080021eb
 8002154:	08002205 	.word	0x08002205
 8002158:	08002217 	.word	0x08002217
 800215c:	0800222f 	.word	0x0800222f
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 8002160:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002164:	2001      	movs	r0, #1
 8002166:	f7fe fddb 	bl	8000d20 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 800216a:	f241 3188 	movw	r1, #5000	; 0x1388
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff ff80 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 8002174:	e07c      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002176:	f000 f939 	bl	80023ec <task_led_ctrl_color_hex>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe fdce 	bl	8000d20 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <task_led_ctrl_strip_one+0x184>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d109      	bne.n	80021a0 <task_led_ctrl_strip_one+0xac>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 800218c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002190:	2005      	movs	r0, #5
 8002192:	f7ff ff6f 	bl	8002074 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 8002196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800219a:	f000 f86f 	bl	800227c <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 800219e:	e067      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80021a0:	f241 3188 	movw	r1, #5000	; 0x1388
 80021a4:	2005      	movs	r0, #5
 80021a6:	f7ff ff65 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 80021aa:	e061      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 80021ac:	f7fe fdda 	bl	8000d64 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 80021b0:	2264      	movs	r2, #100	; 0x64
 80021b2:	2100      	movs	r1, #0
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe fff5 	bl	80011a4 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80021ba:	2100      	movs	r1, #0
 80021bc:	2005      	movs	r0, #5
 80021be:	f7ff ff59 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 80021c2:	e055      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 80021c4:	2264      	movs	r2, #100	; 0x64
 80021c6:	2101      	movs	r1, #1
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe ffeb 	bl	80011a4 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80021ce:	2100      	movs	r1, #0
 80021d0:	200a      	movs	r0, #10
 80021d2:	f7ff ff4f 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 80021d6:	e04b      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 80021d8:	210a      	movs	r1, #10
 80021da:	2001      	movs	r0, #1
 80021dc:	f7ff f874 	bl	80012c8 <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80021e0:	2100      	movs	r1, #0
 80021e2:	2005      	movs	r0, #5
 80021e4:	f7ff ff46 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 80021e8:	e042      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80021ea:	f000 f8ff 	bl	80023ec <task_led_ctrl_color_hex>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2214      	movs	r2, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff f94b 	bl	8001490 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80021fa:	2100      	movs	r1, #0
 80021fc:	200a      	movs	r0, #10
 80021fe:	f7ff ff39 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 8002202:	e035      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 8002204:	2114      	movs	r1, #20
 8002206:	2001      	movs	r0, #1
 8002208:	f7ff f9e4 	bl	80015d4 <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 800220c:	2100      	movs	r1, #0
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff ff30 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 8002214:	e02c      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002216:	f000 f8e9 	bl	80023ec <task_led_ctrl_color_hex>
 800221a:	4603      	mov	r3, r0
 800221c:	4619      	mov	r1, r3
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe fe0a 	bl	8000e38 <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002224:	2100      	movs	r1, #0
 8002226:	200a      	movs	r0, #10
 8002228:	f7ff ff24 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 800222c:	e020      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 800222e:	f7fe fd99 	bl	8000d64 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 8002232:	f000 f8db 	bl	80023ec <task_led_ctrl_color_hex>
 8002236:	4601      	mov	r1, r0
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2314      	movs	r3, #20
 800223e:	2287      	movs	r2, #135	; 0x87
 8002240:	2001      	movs	r0, #1
 8002242:	f7fe ff3b 	bl	80010bc <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002246:	2100      	movs	r1, #0
 8002248:	2005      	movs	r0, #5
 800224a:	f7ff ff13 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 800224e:	e00f      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002250:	f000 f8cc 	bl	80023ec <task_led_ctrl_color_hex>
 8002254:	4603      	mov	r3, r0
 8002256:	2214      	movs	r2, #20
 8002258:	4619      	mov	r1, r3
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe fd8c 	bl	8000d78 <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002260:	2100      	movs	r1, #0
 8002262:	200a      	movs	r0, #10
 8002264:	f7ff ff06 	bl	8002074 <task_led_ctrl_adjust_parameters>
                break;
 8002268:	e002      	b.n	8002270 <task_led_ctrl_strip_one+0x17c>
                default:
                break;
            }
        }
 800226a:	bf00      	nop
 800226c:	e74d      	b.n	800210a <task_led_ctrl_strip_one+0x16>
                break;
 800226e:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 8002270:	e74b      	b.n	800210a <task_led_ctrl_strip_one+0x16>
 8002272:	bf00      	nop
 8002274:	20000371 	.word	0x20000371
 8002278:	20000370 	.word	0x20000370

0800227c <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002288:	e002      	b.n	8002290 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 fb3a 	bl	8002904 <osDelay>
    while (ms_count++ < time_ms)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60fa      	str	r2, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f6      	bhi.n	800228a <task_led_ctrl_delay+0xe>
    }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <task_led_ctrl_brightness_adjust+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <task_led_ctrl_brightness_adjust+0x14>
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <task_led_ctrl_brightness_adjust+0x58>)
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e005      	b.n	80022c8 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <task_led_ctrl_brightness_adjust+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <task_led_ctrl_brightness_adjust+0x58>)
 80022c6:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <task_led_ctrl_brightness_adjust+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d010      	beq.n	80022f2 <task_led_ctrl_brightness_adjust+0x4a>
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	dc13      	bgt.n	80022fc <task_led_ctrl_brightness_adjust+0x54>
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <task_led_ctrl_brightness_adjust+0x36>
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d005      	beq.n	80022e8 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 80022dc:	e00e      	b.n	80022fc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 80022de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022e2:	f7fe fbe3 	bl	8000aac <current_monitor_set>
        break;
 80022e6:	e009      	b.n	80022fc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80022e8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80022ec:	f7fe fbde 	bl	8000aac <current_monitor_set>
        break;
 80022f0:	e004      	b.n	80022fc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80022f2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002304 <task_led_ctrl_brightness_adjust+0x5c>
 80022f6:	f7fe fbd9 	bl	8000aac <current_monitor_set>
        break;
 80022fa:	bf00      	nop
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000372 	.word	0x20000372
 8002304:	3c23d70a 	.word	0x3c23d70a

08002308 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <task_led_ctrl_clear_pause+0x14>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	2000035a 	.word	0x2000035a

08002320 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <task_led_ctrl_pause+0x34>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <task_led_ctrl_pause+0x14>
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <task_led_ctrl_pause+0x38>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e002      	b.n	800233a <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <task_led_ctrl_pause+0x38>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <task_led_ctrl_pause+0x34>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <task_led_ctrl_pause+0x34>)
 8002346:	701a      	strb	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000060 	.word	0x20000060
 8002358:	2000035a 	.word	0x2000035a

0800235c <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <task_led_ctrl_color_state+0x14>)
 8002362:	781b      	ldrb	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000373 	.word	0x20000373

08002374 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <task_led_ctrl_color_state_demo+0x14>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	20000373 	.word	0x20000373

0800238c <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <task_led_ctrl_color_state_fixed+0x1c>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <task_led_ctrl_color_state_fixed+0x20>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000373 	.word	0x20000373
 80023ac:	2000005f 	.word	0x2000005f

080023b0 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
    bool return_val = false;
 80023b6:	2300      	movs	r3, #0
 80023b8:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <task_led_ctrl_color_adjust+0x38>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b15      	cmp	r3, #21
 80023c0:	d105      	bne.n	80023ce <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <task_led_ctrl_color_adjust+0x38>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80023c8:	2301      	movs	r3, #1
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	e005      	b.n	80023da <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <task_led_ctrl_color_adjust+0x38>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <task_led_ctrl_color_adjust+0x38>)
 80023d8:	701a      	strb	r2, [r3, #0]
    return return_val;
 80023da:	79fb      	ldrb	r3, [r7, #7]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	2000005f 	.word	0x2000005f

080023ec <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <task_led_ctrl_color_hex+0x1c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <task_led_ctrl_color_hex+0x20>)
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000005f 	.word	0x2000005f
 800240c:	20000004 	.word	0x20000004

08002410 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	ed2d 8b02 	vpush	{d8}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <task_led_ctrl_color_red_hex+0x48>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <task_led_ctrl_color_red_hex+0x4c>)
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	b2db      	uxtb	r3, r3
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002432:	f7fe fb5d 	bl	8000af0 <current_monitor_ratio>
 8002436:	eeb0 7a40 	vmov.f32	s14, s0
 800243a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800243e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002442:	edc7 7a01 	vstr	s15, [r7, #4]
 8002446:	793b      	ldrb	r3, [r7, #4]
 8002448:	b2db      	uxtb	r3, r3
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	ecbd 8b02 	vpop	{d8}
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000005f 	.word	0x2000005f
 800245c:	20000004 	.word	0x20000004

08002460 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	ed2d 8b02 	vpush	{d8}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <task_led_ctrl_color_green_hex+0x48>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <task_led_ctrl_color_green_hex+0x4c>)
 8002472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b2db      	uxtb	r3, r3
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002482:	f7fe fb35 	bl	8000af0 <current_monitor_ratio>
 8002486:	eeb0 7a40 	vmov.f32	s14, s0
 800248a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800248e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002492:	edc7 7a01 	vstr	s15, [r7, #4]
 8002496:	793b      	ldrb	r3, [r7, #4]
 8002498:	b2db      	uxtb	r3, r3
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	ecbd 8b02 	vpop	{d8}
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000005f 	.word	0x2000005f
 80024ac:	20000004 	.word	0x20000004

080024b0 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	ed2d 8b02 	vpush	{d8}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <task_led_ctrl_color_blue_hex+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <task_led_ctrl_color_blue_hex+0x48>)
 80024c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80024d0:	f7fe fb0e 	bl	8000af0 <current_monitor_ratio>
 80024d4:	eeb0 7a40 	vmov.f32	s14, s0
 80024d8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80024dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80024e4:	793b      	ldrb	r3, [r7, #4]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	ecbd 8b02 	vpop	{d8}
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000005f 	.word	0x2000005f
 80024f8:	20000004 	.word	0x20000004

080024fc <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 8002502:	2116      	movs	r1, #22
 8002504:	2000      	movs	r0, #0
 8002506:	f007 fc85 	bl	8009e14 <random_num>
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <task_led_ctrl_color_random+0x48>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d10e      	bne.n	8002536 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b15      	cmp	r3, #21
 800251c:	d105      	bne.n	800252a <task_led_ctrl_color_random+0x2e>
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	3b01      	subs	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <task_led_ctrl_color_random+0x48>)
 8002526:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002528:	e008      	b.n	800253c <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	3301      	adds	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <task_led_ctrl_color_random+0x48>)
 8002532:	701a      	strb	r2, [r3, #0]
}
 8002534:	e002      	b.n	800253c <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <task_led_ctrl_color_random+0x48>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	7013      	strb	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000005f 	.word	0x2000005f

08002548 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <task_led_ctrl_speed+0x6c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d81f      	bhi.n	800259c <task_led_ctrl_speed+0x54>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <task_led_ctrl_speed+0x1c>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002579 	.word	0x08002579
 8002568:	0800257f 	.word	0x0800257f
 800256c:	08002585 	.word	0x08002585
 8002570:	0800258d 	.word	0x0800258d
 8002574:	08002595 	.word	0x08002595
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <task_led_ctrl_speed+0x70>)
 800257a:	607b      	str	r3, [r7, #4]
        break;
 800257c:	e00f      	b.n	800259e <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <task_led_ctrl_speed+0x74>)
 8002580:	607b      	str	r3, [r7, #4]
        break;
 8002582:	e00c      	b.n	800259e <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002584:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002588:	607b      	str	r3, [r7, #4]
        break;
 800258a:	e008      	b.n	800259e <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 800258c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002590:	607b      	str	r3, [r7, #4]
        break;
 8002592:	e004      	b.n	800259e <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 8002594:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002598:	607b      	str	r3, [r7, #4]
        break;
 800259a:	e000      	b.n	800259e <task_led_ctrl_speed+0x56>
        default:
        break;
 800259c:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	ee07 3a90 	vmov	s15, r3
}
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000005e 	.word	0x2000005e
 80025b8:	41200000 	.word	0x41200000
 80025bc:	40a00000 	.word	0x40a00000

080025c0 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <task_led_ctrl_speed_adjust+0x2c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <task_led_ctrl_speed_adjust+0x14>
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <task_led_ctrl_speed_adjust+0x2c>)
 80025ce:	2204      	movs	r2, #4
 80025d0:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80025d2:	e005      	b.n	80025e0 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <task_led_ctrl_speed_adjust+0x2c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <task_led_ctrl_speed_adjust+0x2c>)
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000005e 	.word	0x2000005e

080025f0 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <task_led_ctrl_speed_reset+0x14>)
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	2000005e 	.word	0x2000005e

08002608 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <task_led_ctrl_animate_iteration_reset+0x14>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	20000374 	.word	0x20000374

08002620 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002626:	2300      	movs	r3, #0
 8002628:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <task_led_ctrl_animate_adjust_state+0x38>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b09      	cmp	r3, #9
 8002630:	d105      	bne.n	800263e <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <task_led_ctrl_animate_adjust_state+0x38>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002638:	2301      	movs	r3, #1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	e005      	b.n	800264a <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <task_led_ctrl_animate_adjust_state+0x38>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <task_led_ctrl_animate_adjust_state+0x38>)
 8002648:	701a      	strb	r2, [r3, #0]
    return return_val;
 800264a:	79fb      	ldrb	r3, [r7, #7]
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000371 	.word	0x20000371

0800265c <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <task_led_ctrl_animate_state_demo+0x1c>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <task_led_ctrl_animate_state_demo+0x20>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000370 	.word	0x20000370
 800267c:	20000374 	.word	0x20000374

08002680 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <task_led_ctrl_animate_state_fixed+0x20>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <task_led_ctrl_animate_state_fixed+0x24>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <task_led_ctrl_animate_state_fixed+0x28>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000370 	.word	0x20000370
 80026a4:	20000371 	.word	0x20000371
 80026a8:	20000374 	.word	0x20000374

080026ac <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <task_led_ctrl_animate_state+0x14>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000370 	.word	0x20000370

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Handler+0x1c>)
 800271e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002720:	f001 fd10 	bl	8004144 <xTaskGetSchedulerState>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800272a:	f002 fc2d 	bl	8004f88 <xPortSysTickHandler>
  }
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800273c:	2100      	movs	r1, #0
 800273e:	f06f 0004 	mvn.w	r0, #4
 8002742:	f7ff ffbf 	bl	80026c4 <__NVIC_SetPriority>
#endif
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002752:	f3ef 8305 	mrs	r3, IPSR
 8002756:	603b      	str	r3, [r7, #0]
  return(result);
 8002758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800275e:	f06f 0305 	mvn.w	r3, #5
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e00c      	b.n	8002780 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <osKernelInitialize+0x44>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <osKernelInitialize+0x44>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	e002      	b.n	8002780 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000378 	.word	0x20000378

08002794 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279a:	f3ef 8305 	mrs	r3, IPSR
 800279e:	603b      	str	r3, [r7, #0]
  return(result);
 80027a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80027a6:	f06f 0305 	mvn.w	r3, #5
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	e010      	b.n	80027d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <osKernelStart+0x48>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d109      	bne.n	80027ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027b6:	f7ff ffbf 	bl	8002738 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <osKernelStart+0x48>)
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027c0:	f001 f866 	bl	8003890 <vTaskStartScheduler>
      stat = osOK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	e002      	b.n	80027d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000378 	.word	0x20000378

080027e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08e      	sub	sp, #56	; 0x38
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027f0:	f3ef 8305 	mrs	r3, IPSR
 80027f4:	617b      	str	r3, [r7, #20]
  return(result);
 80027f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d17e      	bne.n	80028fa <osThreadNew+0x11a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07b      	beq.n	80028fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002806:	2318      	movs	r3, #24
 8002808:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002812:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d045      	beq.n	80028a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <osThreadNew+0x48>
        name = attr->name;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <osThreadNew+0x6e>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b38      	cmp	r3, #56	; 0x38
 8002840:	d805      	bhi.n	800284e <osThreadNew+0x6e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <osThreadNew+0x72>
        return (NULL);
 800284e:	2300      	movs	r3, #0
 8002850:	e054      	b.n	80028fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <osThreadNew+0xa8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b5b      	cmp	r3, #91	; 0x5b
 8002870:	d90a      	bls.n	8002888 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <osThreadNew+0xa8>
        mem = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e010      	b.n	80028aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10c      	bne.n	80028aa <osThreadNew+0xca>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d108      	bne.n	80028aa <osThreadNew+0xca>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <osThreadNew+0xca>
          mem = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e001      	b.n	80028aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d110      	bne.n	80028d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028b8:	9202      	str	r2, [sp, #8]
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fe0c 	bl	80034e4 <xTaskCreateStatic>
 80028cc:	4603      	mov	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	e013      	b.n	80028fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d110      	bne.n	80028fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fe57 	bl	800359e <xTaskCreate>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <osThreadNew+0x11a>
            hTask = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028fa:	693b      	ldr	r3, [r7, #16]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290c:	f3ef 8305 	mrs	r3, IPSR
 8002910:	60bb      	str	r3, [r7, #8]
  return(result);
 8002912:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <osDelay+0x1c>
    stat = osErrorISR;
 8002918:	f06f 0305 	mvn.w	r3, #5
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e007      	b.n	8002930 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <osDelay+0x2c>
      vTaskDelay(ticks);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ff7c 	bl	8003828 <vTaskDelay>
    }
  }

  return (stat);
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <vApplicationGetIdleTaskMemory+0x2c>)
 800294c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <vApplicationGetIdleTaskMemory+0x30>)
 8002952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000037c 	.word	0x2000037c
 800296c:	200003d8 	.word	0x200003d8

08002970 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <vApplicationGetTimerTaskMemory+0x2c>)
 8002980:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <vApplicationGetTimerTaskMemory+0x30>)
 8002986:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	200005d8 	.word	0x200005d8
 80029a0:	20000634 	.word	0x20000634

080029a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0208 	add.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f103 0208 	add.w	r2, r3, #8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f103 0208 	add.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5c:	d103      	bne.n	8002a66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e00c      	b.n	8002a80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e002      	b.n	8002a74 <vListInsert+0x2e>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d2f6      	bcs.n	8002a6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6892      	ldr	r2, [r2, #8]
 8002ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6852      	ldr	r2, [r2, #4]
 8002ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d103      	bne.n	8002aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b36:	f002 f995 	bl	8004e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	441a      	add	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	3b01      	subs	r3, #1
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	441a      	add	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d114      	bne.n	8002bb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01a      	beq.n	8002bca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3310      	adds	r3, #16
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 f915 	bl	8003dc8 <xTaskRemoveFromEventList>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <xQueueGenericReset+0xcc>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	e009      	b.n	8002bca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3310      	adds	r3, #16
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fef2 	bl	80029a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff feed 	bl	80029a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bca:	f002 f97b 	bl	8004ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	; 0x38
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <xQueueGenericCreateStatic+0x52>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <xQueueGenericCreateStatic+0x56>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericCreateStatic+0x58>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	623b      	str	r3, [r7, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <xQueueGenericCreateStatic+0x7e>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <xQueueGenericCreateStatic+0x82>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <xQueueGenericCreateStatic+0x84>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	61fb      	str	r3, [r7, #28]
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7a:	2350      	movs	r3, #80	; 0x50
 8002c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b50      	cmp	r3, #80	; 0x50
 8002c82:	d00a      	beq.n	8002c9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f805 	bl	8002ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	69b8      	ldr	r0, [r7, #24]
 8002cfe:	f7ff ff05 	bl	8002b0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	; 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <xQueueGenericSend+0x32>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <xQueueGenericSend+0x40>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xQueueGenericSend+0x44>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xQueueGenericSend+0x46>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xQueueGenericSend+0x60>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x6e>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x72>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x74>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	f001 f9cf 	bl	8004144 <xTaskGetSchedulerState>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueGenericSend+0x9e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueGenericSend+0xa2>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericSend+0xa4>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61fb      	str	r3, [r7, #28]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd2:	f002 f847 	bl	8004e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <xQueueGenericSend+0xd4>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d129      	bne.n	8002e3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 fa0b 	bl	8003208 <prvCopyDataToQueue>
 8002df2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ffe1 	bl	8003dc8 <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	e00a      	b.n	8002e34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e34:	f002 f846 	bl	8004ec4 <vPortExitCritical>
				return pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e063      	b.n	8002f04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e42:	f002 f83f 	bl	8004ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e05c      	b.n	8002f04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f81b 	bl	8003e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5e:	f002 f831 	bl	8004ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e62:	f000 fd7b 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e66:	f001 fffd 	bl	8004e64 <vPortEnterCritical>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e76:	d103      	bne.n	8002e80 <xQueueGenericSend+0x16c>
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x182>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e96:	f002 f815 	bl	8004ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9a:	1d3a      	adds	r2, r7, #4
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f80a 	bl	8003ebc <xTaskCheckForTimeOut>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d124      	bne.n	8002ef8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb0:	f000 faa2 	bl	80033f8 <prvIsQueueFull>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 ff30 	bl	8003d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fa2d 	bl	8003328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ece:	f000 fd53 	bl	8003978 <xTaskResumeAll>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af7c 	bne.w	8002dd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	e772      	b.n	8002dd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eee:	f000 fa1b 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ef2:	f000 fd41 	bl	8003978 <xTaskResumeAll>
 8002ef6:	e76c      	b.n	8002dd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa15 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efe:	f000 fd3b 	bl	8003978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3738      	adds	r7, #56	; 0x38
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b090      	sub	sp, #64	; 0x40
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <xQueueGenericSendFromISR+0x3c>
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericSendFromISR+0x40>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericSendFromISR+0x42>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSendFromISR+0x6a>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSendFromISR+0x6e>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSendFromISR+0x70>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	623b      	str	r3, [r7, #32]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9a:	f002 f845 	bl	8005028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	61fa      	str	r2, [r7, #28]
 8002fb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <xQueueGenericSendFromISR+0xbc>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d12f      	bne.n	800302c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe2:	f000 f911 	bl	8003208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fe6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fee:	d112      	bne.n	8003016 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d016      	beq.n	8003026 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fee3 	bl	8003dc8 <xTaskRemoveFromEventList>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e007      	b.n	8003026 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800301a:	3301      	adds	r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	b25a      	sxtb	r2, r3
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003026:	2301      	movs	r3, #1
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800302a:	e001      	b.n	8003030 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800302c:	2300      	movs	r3, #0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800303a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800303e:	4618      	mov	r0, r3
 8003040:	3740      	adds	r7, #64	; 0x40
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <xQueueReceive+0x30>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	623b      	str	r3, [r7, #32]
}
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <xQueueReceive+0x3e>
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <xQueueReceive+0x42>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <xQueueReceive+0x44>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueReceive+0x5e>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61fb      	str	r3, [r7, #28]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a6:	f001 f84d 	bl	8004144 <xTaskGetSchedulerState>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xQueueReceive+0x6e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <xQueueReceive+0x72>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueReceive+0x74>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueReceive+0x8e>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61bb      	str	r3, [r7, #24]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030d6:	f001 fec5 	bl	8004e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01f      	beq.n	8003126 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ea:	f000 f8f7 	bl	80032dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00f      	beq.n	800311e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	3310      	adds	r3, #16
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fe60 	bl	8003dc8 <xTaskRemoveFromEventList>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <xQueueReceive+0x1bc>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800311e:	f001 fed1 	bl	8004ec4 <vPortExitCritical>
				return pdPASS;
 8003122:	2301      	movs	r3, #1
 8003124:	e069      	b.n	80031fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312c:	f001 feca 	bl	8004ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003130:	2300      	movs	r3, #0
 8003132:	e062      	b.n	80031fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fea6 	bl	8003e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003148:	f001 febc 	bl	8004ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314c:	f000 fc06 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003150:	f001 fe88 	bl	8004e64 <vPortEnterCritical>
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315a:	b25b      	sxtb	r3, r3
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003160:	d103      	bne.n	800316a <xQueueReceive+0x122>
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003176:	d103      	bne.n	8003180 <xQueueReceive+0x138>
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003180:	f001 fea0 	bl	8004ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003184:	1d3a      	adds	r2, r7, #4
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fe95 	bl	8003ebc <xTaskCheckForTimeOut>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d123      	bne.n	80031e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319a:	f000 f917 	bl	80033cc <prvIsQueueEmpty>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d017      	beq.n	80031d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fdbb 	bl	8003d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b4:	f000 f8b8 	bl	8003328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031b8:	f000 fbde 	bl	8003978 <xTaskResumeAll>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d189      	bne.n	80030d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <xQueueReceive+0x1bc>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e780      	b.n	80030d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	f000 f8a7 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031da:	f000 fbcd 	bl	8003978 <xTaskResumeAll>
 80031de:	e77a      	b.n	80030d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f8a1 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e6:	f000 fbc7 	bl	8003978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ec:	f000 f8ee 	bl	80033cc <prvIsQueueEmpty>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f43f af6f 	beq.w	80030d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d14d      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ffa4 	bl	8004180 <xTaskPriorityDisinherit>
 8003238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e043      	b.n	80032ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d119      	bne.n	800327c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6858      	ldr	r0, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	461a      	mov	r2, r3
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	f006 fe52 	bl	8009efc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d32b      	bcc.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e026      	b.n	80032ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68d8      	ldr	r0, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	f006 fe38 	bl	8009efc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	425b      	negs	r3, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	425b      	negs	r3, r3
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d105      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d018      	beq.n	8003320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d303      	bcc.n	8003310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	461a      	mov	r2, r3
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f006 fdee 	bl	8009efc <memcpy>
	}
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003330:	f001 fd98 	bl	8004e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800333c:	e011      	b.n	8003362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3324      	adds	r3, #36	; 0x24
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fd3c 	bl	8003dc8 <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003356:	f000 fe13 	bl	8003f80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3b01      	subs	r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	dce9      	bgt.n	800333e <prvUnlockQueue+0x16>
 800336a:	e000      	b.n	800336e <prvUnlockQueue+0x46>
					break;
 800336c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	22ff      	movs	r2, #255	; 0xff
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003376:	f001 fda5 	bl	8004ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800337a:	f001 fd73 	bl	8004e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003386:	e011      	b.n	80033ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3310      	adds	r3, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd17 	bl	8003dc8 <xTaskRemoveFromEventList>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033a0:	f000 fdee 	bl	8003f80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dce9      	bgt.n	8003388 <prvUnlockQueue+0x60>
 80033b4:	e000      	b.n	80033b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033c0:	f001 fd80 	bl	8004ec4 <vPortExitCritical>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d4:	f001 fd46 	bl	8004e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e001      	b.n	80033ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fd6b 	bl	8004ec4 <vPortExitCritical>

	return xReturn;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003400:	f001 fd30 	bl	8004e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e001      	b.n	800341a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341a:	f001 fd53 	bl	8004ec4 <vPortExitCritical>

	return xReturn;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e014      	b.n	8003462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <vQueueAddToRegistry+0x50>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <vQueueAddToRegistry+0x50>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <vQueueAddToRegistry+0x50>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800345a:	e006      	b.n	800346a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d9e7      	bls.n	8003438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000a34 	.word	0x20000a34

0800347c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800348c:	f001 fcea 	bl	8004e64 <vPortEnterCritical>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003496:	b25b      	sxtb	r3, r3
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349c:	d103      	bne.n	80034a6 <vQueueWaitForMessageRestricted+0x2a>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b2:	d103      	bne.n	80034bc <vQueueWaitForMessageRestricted+0x40>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034bc:	f001 fd02 	bl	8004ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fc4d 	bl	8003d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7ff ff26 	bl	8003328 <prvUnlockQueue>
	}
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCreateStatic+0x2a>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	623b      	str	r3, [r7, #32]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xTaskCreateStatic+0x46>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	61fb      	str	r3, [r7, #28]
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800352a:	235c      	movs	r3, #92	; 0x5c
 800352c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b5c      	cmp	r3, #92	; 0x5c
 8003532:	d00a      	beq.n	800354a <xTaskCreateStatic+0x66>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	61bb      	str	r3, [r7, #24]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800354a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01e      	beq.n	8003590 <xTaskCreateStatic+0xac>
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800356a:	2300      	movs	r3, #0
 800356c:	9303      	str	r3, [sp, #12]
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f850 	bl	8003628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800358a:	f000 f8dd 	bl	8003748 <prvAddNewTaskToReadyList>
 800358e:	e001      	b.n	8003594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003594:	697b      	ldr	r3, [r7, #20]
	}
 8003596:	4618      	mov	r0, r3
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08c      	sub	sp, #48	; 0x30
 80035a2:	af04      	add	r7, sp, #16
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd78 	bl	80050a8 <pvPortMalloc>
 80035b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c0:	205c      	movs	r0, #92	; 0x5c
 80035c2:	f001 fd71 	bl	80050a8 <pvPortMalloc>
 80035c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
 80035d4:	e005      	b.n	80035e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f001 fe32 	bl	8005240 <vPortFree>
 80035dc:	e001      	b.n	80035e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f80e 	bl	8003628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360c:	69f8      	ldr	r0, [r7, #28]
 800360e:	f000 f89b 	bl	8003748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e002      	b.n	800361e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800361c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800361e:	69bb      	ldr	r3, [r7, #24]
	}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	21a5      	movs	r1, #165	; 0xa5
 8003642:	f006 fc69 	bl	8009f18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003650:	3b01      	subs	r3, #1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	617b      	str	r3, [r7, #20]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01f      	beq.n	80036c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e012      	b.n	80036b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	3334      	adds	r3, #52	; 0x34
 800369c:	460a      	mov	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d006      	beq.n	80036ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d9e9      	bls.n	800368c <prvInitialiseNewTask+0x64>
 80036b8:	e000      	b.n	80036bc <prvInitialiseNewTask+0x94>
			{
				break;
 80036ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	e003      	b.n	80036ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	2b37      	cmp	r3, #55	; 0x37
 80036d2:	d901      	bls.n	80036d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d4:	2337      	movs	r3, #55	; 0x37
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f978 	bl	80029e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	3318      	adds	r3, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f973 	bl	80029e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	69b8      	ldr	r0, [r7, #24]
 8003728:	f001 fa70 	bl	8004c0c <pxPortInitialiseStack>
 800372c:	4602      	mov	r2, r0
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003750:	f001 fb88 	bl	8004e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a2c      	ldr	r2, [pc, #176]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 800375c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003774:	f000 fc28 	bl	8003fc8 <prvInitialiseTaskLists>
 8003778:	e00d      	b.n	8003796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <prvAddNewTaskToReadyList+0xcc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d802      	bhi.n	8003796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 800379e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <prvAddNewTaskToReadyList+0xd4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <prvAddNewTaskToReadyList+0x74>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <prvAddNewTaskToReadyList+0xd4>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <prvAddNewTaskToReadyList+0xd8>)
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7ff f913 	bl	80029fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037d8:	f001 fb74 	bl	8004ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <prvAddNewTaskToReadyList+0xcc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d207      	bcs.n	8003802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <prvAddNewTaskToReadyList+0xdc>)
 80037f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000f48 	.word	0x20000f48
 8003810:	20000a74 	.word	0x20000a74
 8003814:	20000f54 	.word	0x20000f54
 8003818:	20000f64 	.word	0x20000f64
 800381c:	20000f50 	.word	0x20000f50
 8003820:	20000a78 	.word	0x20000a78
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <vTaskDelay+0x60>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <vTaskDelay+0x30>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	60bb      	str	r3, [r7, #8]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003858:	f000 f880 	bl	800395c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fe32 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003864:	f000 f888 	bl	8003978 <xTaskResumeAll>
 8003868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <vTaskDelay+0x64>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000f70 	.word	0x20000f70
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800389e:	463a      	mov	r2, r7
 80038a0:	1d39      	adds	r1, r7, #4
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f848 	bl	800293c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	9202      	str	r2, [sp, #8]
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	460a      	mov	r2, r1
 80038be:	4921      	ldr	r1, [pc, #132]	; (8003944 <vTaskStartScheduler+0xb4>)
 80038c0:	4821      	ldr	r0, [pc, #132]	; (8003948 <vTaskStartScheduler+0xb8>)
 80038c2:	f7ff fe0f 	bl	80034e4 <xTaskCreateStatic>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <vTaskStartScheduler+0xbc>)
 80038ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <vTaskStartScheduler+0xbc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e001      	b.n	80038de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d102      	bne.n	80038ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038e4:	f000 fe44 	bl	8004570 <xTimerCreateTimerTask>
 80038e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d116      	bne.n	800391e <vTaskStartScheduler+0x8e>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	613b      	str	r3, [r7, #16]
}
 8003902:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <vTaskStartScheduler+0xc0>)
 8003906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800390a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <vTaskStartScheduler+0xc4>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <vTaskStartScheduler+0xc8>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003918:	f001 fa02 	bl	8004d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800391c:	e00e      	b.n	800393c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003924:	d10a      	bne.n	800393c <vTaskStartScheduler+0xac>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60fb      	str	r3, [r7, #12]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vTaskStartScheduler+0xaa>
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800b068 	.word	0x0800b068
 8003948:	08003f99 	.word	0x08003f99
 800394c:	20000f6c 	.word	0x20000f6c
 8003950:	20000f68 	.word	0x20000f68
 8003954:	20000f54 	.word	0x20000f54
 8003958:	20000f4c 	.word	0x20000f4c

0800395c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <vTaskSuspendAll+0x18>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <vTaskSuspendAll+0x18>)
 8003968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000f70 	.word	0x20000f70

08003978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <xTaskResumeAll+0x118>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039a4:	f001 fa5e 	bl	8004e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <xTaskResumeAll+0x118>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <xTaskResumeAll+0x118>)
 80039b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <xTaskResumeAll+0x118>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d162      	bne.n	8003a80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <xTaskResumeAll+0x11c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05e      	beq.n	8003a80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c2:	e02f      	b.n	8003a24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <xTaskResumeAll+0x120>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3318      	adds	r3, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f871 	bl	8002ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f86c 	bl	8002ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <xTaskResumeAll+0x124>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d903      	bls.n	80039f4 <xTaskResumeAll+0x7c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <xTaskResumeAll+0x124>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <xTaskResumeAll+0x128>)
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f7fe fff7 	bl	80029fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <xTaskResumeAll+0x12c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <xTaskResumeAll+0x120>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1cb      	bne.n	80039c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a32:	f000 fb67 	bl	8004104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <xTaskResumeAll+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a42:	f000 f859 	bl	8003af8 <xTaskIncrementTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f1      	bne.n	8003a42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <xTaskResumeAll+0x134>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <xTaskResumeAll+0x138>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a80:	f001 fa20 	bl	8004ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a84:	68bb      	ldr	r3, [r7, #8]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000f70 	.word	0x20000f70
 8003a94:	20000f48 	.word	0x20000f48
 8003a98:	20000f08 	.word	0x20000f08
 8003a9c:	20000f50 	.word	0x20000f50
 8003aa0:	20000a78 	.word	0x20000a78
 8003aa4:	20000a74 	.word	0x20000a74
 8003aa8:	20000f5c 	.word	0x20000f5c
 8003aac:	20000f58 	.word	0x20000f58
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <xTaskGetTickCount+0x1c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ac0:	687b      	ldr	r3, [r7, #4]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000f4c 	.word	0x20000f4c

08003ad4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ada:	f001 faa5 	bl	8005028 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <xTaskGetTickCountFromISR+0x20>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ae8:	683b      	ldr	r3, [r7, #0]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000f4c 	.word	0x20000f4c

08003af8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b02:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <xTaskIncrementTick+0x148>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 808f 	bne.w	8003c2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b0c:	4b4d      	ldr	r3, [pc, #308]	; (8003c44 <xTaskIncrementTick+0x14c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b14:	4a4b      	ldr	r2, [pc, #300]	; (8003c44 <xTaskIncrementTick+0x14c>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d120      	bne.n	8003b62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b20:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <xTaskIncrementTick+0x150>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	603b      	str	r3, [r7, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <xTaskIncrementTick+0x46>
 8003b40:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <xTaskIncrementTick+0x150>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <xTaskIncrementTick+0x154>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <xTaskIncrementTick+0x150>)
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <xTaskIncrementTick+0x154>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <xTaskIncrementTick+0x158>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <xTaskIncrementTick+0x158>)
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	f000 fad1 	bl	8004104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b62:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <xTaskIncrementTick+0x15c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d349      	bcc.n	8003c00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <xTaskIncrementTick+0x150>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <xTaskIncrementTick+0x15c>)
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7c:	601a      	str	r2, [r3, #0]
					break;
 8003b7e:	e03f      	b.n	8003c00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <xTaskIncrementTick+0x150>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d203      	bcs.n	8003ba0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b98:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <xTaskIncrementTick+0x15c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b9e:	e02f      	b.n	8003c00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe ff87 	bl	8002ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe ff7e 	bl	8002ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <xTaskIncrementTick+0x160>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d903      	bls.n	8003bd0 <xTaskIncrementTick+0xd8>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <xTaskIncrementTick+0x160>)
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <xTaskIncrementTick+0x164>)
 8003bde:	441a      	add	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fe ff09 	bl	80029fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <xTaskIncrementTick+0x168>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3b8      	bcc.n	8003b6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bfe:	e7b5      	b.n	8003b6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <xTaskIncrementTick+0x168>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	4915      	ldr	r1, [pc, #84]	; (8003c5c <xTaskIncrementTick+0x164>)
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d901      	bls.n	8003c1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <xTaskIncrementTick+0x16c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e004      	b.n	8003c34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <xTaskIncrementTick+0x170>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <xTaskIncrementTick+0x170>)
 8003c32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c34:	697b      	ldr	r3, [r7, #20]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000f70 	.word	0x20000f70
 8003c44:	20000f4c 	.word	0x20000f4c
 8003c48:	20000f00 	.word	0x20000f00
 8003c4c:	20000f04 	.word	0x20000f04
 8003c50:	20000f60 	.word	0x20000f60
 8003c54:	20000f68 	.word	0x20000f68
 8003c58:	20000f50 	.word	0x20000f50
 8003c5c:	20000a78 	.word	0x20000a78
 8003c60:	20000a74 	.word	0x20000a74
 8003c64:	20000f5c 	.word	0x20000f5c
 8003c68:	20000f58 	.word	0x20000f58

08003c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <vTaskSwitchContext+0xa8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c7a:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <vTaskSwitchContext+0xac>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c80:	e041      	b.n	8003d06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <vTaskSwitchContext+0xac>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <vTaskSwitchContext+0xb0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e010      	b.n	8003cb2 <vTaskSwitchContext+0x46>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <vTaskSwitchContext+0x40>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	607b      	str	r3, [r7, #4]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <vTaskSwitchContext+0x3e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	491b      	ldr	r1, [pc, #108]	; (8003d20 <vTaskSwitchContext+0xb4>)
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0e4      	beq.n	8003c90 <vTaskSwitchContext+0x24>
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <vTaskSwitchContext+0xb4>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d104      	bne.n	8003cf6 <vTaskSwitchContext+0x8a>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <vTaskSwitchContext+0xb8>)
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <vTaskSwitchContext+0xb0>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000f70 	.word	0x20000f70
 8003d18:	20000f5c 	.word	0x20000f5c
 8003d1c:	20000f50 	.word	0x20000f50
 8003d20:	20000a78 	.word	0x20000a78
 8003d24:	20000a74 	.word	0x20000a74

08003d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <vTaskPlaceOnEventList+0x44>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3318      	adds	r3, #24
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fe75 	bl	8002a46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6838      	ldr	r0, [r7, #0]
 8003d60:	f000 fbb2 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000a74 	.word	0x20000a74

08003d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	617b      	str	r3, [r7, #20]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3318      	adds	r3, #24
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7fe fe2c 	bl	80029fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003db0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	68b8      	ldr	r0, [r7, #8]
 8003db6:	f000 fb87 	bl	80044c8 <prvAddCurrentTaskToDelayedList>
	}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000a74 	.word	0x20000a74

08003dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	60fb      	str	r3, [r7, #12]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3318      	adds	r3, #24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fe5d 	bl	8002ab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <xTaskRemoveFromEventList+0xb0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11d      	bne.n	8003e42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fe54 	bl	8002ab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <xTaskRemoveFromEventList+0xb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d903      	bls.n	8003e24 <xTaskRemoveFromEventList+0x5c>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <xTaskRemoveFromEventList+0xb4>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <xTaskRemoveFromEventList+0xb8>)
 8003e32:	441a      	add	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7fe fddf 	bl	80029fe <vListInsertEnd>
 8003e40:	e005      	b.n	8003e4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	480e      	ldr	r0, [pc, #56]	; (8003e84 <xTaskRemoveFromEventList+0xbc>)
 8003e4a:	f7fe fdd8 	bl	80029fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <xTaskRemoveFromEventList+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d905      	bls.n	8003e68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <xTaskRemoveFromEventList+0xc4>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e001      	b.n	8003e6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e6c:	697b      	ldr	r3, [r7, #20]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000f70 	.word	0x20000f70
 8003e7c:	20000f50 	.word	0x20000f50
 8003e80:	20000a78 	.word	0x20000a78
 8003e84:	20000f08 	.word	0x20000f08
 8003e88:	20000a74 	.word	0x20000a74
 8003e8c:	20000f5c 	.word	0x20000f5c

08003e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <vTaskInternalSetTimeOutState+0x24>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <vTaskInternalSetTimeOutState+0x28>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	605a      	str	r2, [r3, #4]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000f60 	.word	0x20000f60
 8003eb8:	20000f4c 	.word	0x20000f4c

08003ebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	613b      	str	r3, [r7, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003efe:	f000 ffb1 	bl	8004e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <xTaskCheckForTimeOut+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f1a:	d102      	bne.n	8003f22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e023      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <xTaskCheckForTimeOut+0xc0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d007      	beq.n	8003f3e <xTaskCheckForTimeOut+0x82>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	e015      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d20b      	bcs.n	8003f60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff9b 	bl	8003e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	e004      	b.n	8003f6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f6a:	f000 ffab 	bl	8004ec4 <vPortExitCritical>

	return xReturn;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000f4c 	.word	0x20000f4c
 8003f7c:	20000f60 	.word	0x20000f60

08003f80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <vTaskMissedYield+0x14>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000f5c 	.word	0x20000f5c

08003f98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fa0:	f000 f852 	bl	8004048 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvIdleTask+0x28>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d9f9      	bls.n	8003fa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <prvIdleTask+0x2c>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fbc:	e7f0      	b.n	8003fa0 <prvIdleTask+0x8>
 8003fbe:	bf00      	nop
 8003fc0:	20000a78 	.word	0x20000a78
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e00c      	b.n	8003fee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <prvInitialiseTaskLists+0x60>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fcde 	bl	80029a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3301      	adds	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b37      	cmp	r3, #55	; 0x37
 8003ff2:	d9ef      	bls.n	8003fd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ff4:	480d      	ldr	r0, [pc, #52]	; (800402c <prvInitialiseTaskLists+0x64>)
 8003ff6:	f7fe fcd5 	bl	80029a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ffa:	480d      	ldr	r0, [pc, #52]	; (8004030 <prvInitialiseTaskLists+0x68>)
 8003ffc:	f7fe fcd2 	bl	80029a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004000:	480c      	ldr	r0, [pc, #48]	; (8004034 <prvInitialiseTaskLists+0x6c>)
 8004002:	f7fe fccf 	bl	80029a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004006:	480c      	ldr	r0, [pc, #48]	; (8004038 <prvInitialiseTaskLists+0x70>)
 8004008:	f7fe fccc 	bl	80029a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800400c:	480b      	ldr	r0, [pc, #44]	; (800403c <prvInitialiseTaskLists+0x74>)
 800400e:	f7fe fcc9 	bl	80029a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <prvInitialiseTaskLists+0x78>)
 8004014:	4a05      	ldr	r2, [pc, #20]	; (800402c <prvInitialiseTaskLists+0x64>)
 8004016:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <prvInitialiseTaskLists+0x7c>)
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <prvInitialiseTaskLists+0x68>)
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000a78 	.word	0x20000a78
 800402c:	20000ed8 	.word	0x20000ed8
 8004030:	20000eec 	.word	0x20000eec
 8004034:	20000f08 	.word	0x20000f08
 8004038:	20000f1c 	.word	0x20000f1c
 800403c:	20000f34 	.word	0x20000f34
 8004040:	20000f00 	.word	0x20000f00
 8004044:	20000f04 	.word	0x20000f04

08004048 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800404e:	e019      	b.n	8004084 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004050:	f000 ff08 	bl	8004e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <prvCheckTasksWaitingTermination+0x50>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fd29 	bl	8002ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <prvCheckTasksWaitingTermination+0x54>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <prvCheckTasksWaitingTermination+0x54>)
 800406e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3b01      	subs	r3, #1
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004078:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800407a:	f000 ff23 	bl	8004ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f810 	bl	80040a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <prvCheckTasksWaitingTermination+0x58>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e1      	bne.n	8004050 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000f1c 	.word	0x20000f1c
 800409c:	20000f48 	.word	0x20000f48
 80040a0:	20000f30 	.word	0x20000f30

080040a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 f8c0 	bl	8005240 <vPortFree>
				vPortFree( pxTCB );
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f8bd 	bl	8005240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040c6:	e018      	b.n	80040fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d103      	bne.n	80040da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f001 f8b4 	bl	8005240 <vPortFree>
	}
 80040d8:	e00f      	b.n	80040fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d00a      	beq.n	80040fa <prvDeleteTCB+0x56>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60fb      	str	r3, [r7, #12]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <prvDeleteTCB+0x54>
	}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <prvResetNextTaskUnblockTime+0x38>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <prvResetNextTaskUnblockTime+0x3c>)
 8004116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800411a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800411c:	e008      	b.n	8004130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <prvResetNextTaskUnblockTime+0x38>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <prvResetNextTaskUnblockTime+0x3c>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000f00 	.word	0x20000f00
 8004140:	20000f68 	.word	0x20000f68

08004144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <xTaskGetSchedulerState+0x34>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004152:	2301      	movs	r3, #1
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e008      	b.n	800416a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <xTaskGetSchedulerState+0x38>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004160:	2302      	movs	r3, #2
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	e001      	b.n	800416a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800416a:	687b      	ldr	r3, [r7, #4]
	}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000f54 	.word	0x20000f54
 800417c:	20000f70 	.word	0x20000f70

08004180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d056      	beq.n	8004244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <xTaskPriorityDisinherit+0xd0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d00a      	beq.n	80041b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	60fb      	str	r3, [r7, #12]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60bb      	str	r3, [r7, #8]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	1e5a      	subs	r2, r3, #1
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d02c      	beq.n	8004244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d128      	bne.n	8004244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fc5e 	bl	8002ab8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <xTaskPriorityDisinherit+0xd4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d903      	bls.n	8004224 <xTaskPriorityDisinherit+0xa4>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <xTaskPriorityDisinherit+0xd4>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <xTaskPriorityDisinherit+0xd8>)
 8004232:	441a      	add	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f7fe fbdf 	bl	80029fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004244:	697b      	ldr	r3, [r7, #20]
	}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000a74 	.word	0x20000a74
 8004254:	20000f50 	.word	0x20000f50
 8004258:	20000a78 	.word	0x20000a78

0800425c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800426a:	f000 fdfb 	bl	8004e64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <xTaskNotifyWait+0xac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d01a      	beq.n	80042b2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <xTaskNotifyWait+0xac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	43d2      	mvns	r2, r2
 8004286:	400a      	ands	r2, r1
 8004288:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <xTaskNotifyWait+0xac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800429a:	2101      	movs	r1, #1
 800429c:	6838      	ldr	r0, [r7, #0]
 800429e:	f000 f913 	bl	80044c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <xTaskNotifyWait+0xb0>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80042b2:	f000 fe07 	bl	8004ec4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80042b6:	f000 fdd5 	bl	8004e64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <xTaskNotifyWait+0xac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <xTaskNotifyWait+0xac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d002      	beq.n	80042de <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e008      	b.n	80042f0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <xTaskNotifyWait+0xac>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	43d2      	mvns	r2, r2
 80042e8:	400a      	ands	r2, r1
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <xTaskNotifyWait+0xac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80042fa:	f000 fde3 	bl	8004ec4 <vPortExitCritical>

		return xReturn;
 80042fe:	697b      	ldr	r3, [r7, #20]
	}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20000a74 	.word	0x20000a74
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004320:	2301      	movs	r3, #1
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004340:	f000 fe72 	bl	8005028 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004348:	f3ef 8211 	mrs	r2, BASEPRI
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	623a      	str	r2, [r7, #32]
 800435e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004360:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d828      	bhi.n	80043dc <xTaskGenericNotifyFromISR+0xcc>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <xTaskGenericNotifyFromISR+0x80>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b3 	.word	0x080043b3
 800439c:	080043bf 	.word	0x080043bf
 80043a0:	080043c7 	.word	0x080043c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043b0:	e027      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043bc:	e021      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043c4:	e01d      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d003      	beq.n	80043d6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80043d4:	e015      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80043da:	e012      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e4:	d00c      	beq.n	8004400 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	61bb      	str	r3, [r7, #24]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <xTaskGenericNotifyFromISR+0xea>
					break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004400:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004406:	2b01      	cmp	r3, #1
 8004408:	d146      	bne.n	8004498 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	617b      	str	r3, [r7, #20]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <xTaskGenericNotifyFromISR+0x1a0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11d      	bne.n	800446c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fb3f 	bl	8002ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <xTaskGenericNotifyFromISR+0x1a4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <xTaskGenericNotifyFromISR+0x13e>
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <xTaskGenericNotifyFromISR+0x1a4>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <xTaskGenericNotifyFromISR+0x1a8>)
 800445c:	441a      	add	r2, r3
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe faca 	bl	80029fe <vListInsertEnd>
 800446a:	e005      	b.n	8004478 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	3318      	adds	r3, #24
 8004470:	4619      	mov	r1, r3
 8004472:	4812      	ldr	r0, [pc, #72]	; (80044bc <xTaskGenericNotifyFromISR+0x1ac>)
 8004474:	f7fe fac3 	bl	80029fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xTaskGenericNotifyFromISR+0x1b0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d908      	bls.n	8004498 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <xTaskGenericNotifyFromISR+0x1b4>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f383 8811 	msr	BASEPRI, r3
}
 80044a2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3738      	adds	r7, #56	; 0x38
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000f70 	.word	0x20000f70
 80044b4:	20000f50 	.word	0x20000f50
 80044b8:	20000a78 	.word	0x20000a78
 80044bc:	20000f08 	.word	0x20000f08
 80044c0:	20000a74 	.word	0x20000a74
 80044c4:	20000f5c 	.word	0x20000f5c

080044c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <prvAddCurrentTaskToDelayedList+0x90>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3304      	adds	r3, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe faea 	bl	8002ab8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ea:	d10a      	bne.n	8004502 <prvAddCurrentTaskToDelayedList+0x3a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4819      	ldr	r0, [pc, #100]	; (8004560 <prvAddCurrentTaskToDelayedList+0x98>)
 80044fc:	f7fe fa7f 	bl	80029fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004500:	e026      	b.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d209      	bcs.n	800452e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fa8d 	bl	8002a46 <vListInsert>
}
 800452c:	e010      	b.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvAddCurrentTaskToDelayedList+0x94>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f7fe fa83 	bl	8002a46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d202      	bcs.n	8004550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <prvAddCurrentTaskToDelayedList+0xa4>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000f4c 	.word	0x20000f4c
 800455c:	20000a74 	.word	0x20000a74
 8004560:	20000f34 	.word	0x20000f34
 8004564:	20000f04 	.word	0x20000f04
 8004568:	20000f00 	.word	0x20000f00
 800456c:	20000f68 	.word	0x20000f68

08004570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800457a:	f000 fb07 	bl	8004b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <xTimerCreateTimerTask+0x80>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d021      	beq.n	80045ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800458e:	1d3a      	adds	r2, r7, #4
 8004590:	f107 0108 	add.w	r1, r7, #8
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe f9e9 	bl	8002970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	9202      	str	r2, [sp, #8]
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	2302      	movs	r3, #2
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	460a      	mov	r2, r1
 80045b0:	4910      	ldr	r1, [pc, #64]	; (80045f4 <xTimerCreateTimerTask+0x84>)
 80045b2:	4811      	ldr	r0, [pc, #68]	; (80045f8 <xTimerCreateTimerTask+0x88>)
 80045b4:	f7fe ff96 	bl	80034e4 <xTaskCreateStatic>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <xTimerCreateTimerTask+0x8c>)
 80045bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <xTimerCreateTimerTask+0x8c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045e6:	697b      	ldr	r3, [r7, #20]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000fa4 	.word	0x20000fa4
 80045f4:	0800b070 	.word	0x0800b070
 80045f8:	08004735 	.word	0x08004735
 80045fc:	20000fa8 	.word	0x20000fa8

08004600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	623b      	str	r3, [r7, #32]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <xTimerGenericCommand+0x98>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02a      	beq.n	800468c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b05      	cmp	r3, #5
 8004646:	dc18      	bgt.n	800467a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004648:	f7ff fd7c 	bl	8004144 <xTaskGetSchedulerState>
 800464c:	4603      	mov	r3, r0
 800464e:	2b02      	cmp	r3, #2
 8004650:	d109      	bne.n	8004666 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <xTimerGenericCommand+0x98>)
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	f107 0110 	add.w	r1, r7, #16
 800465a:	2300      	movs	r3, #0
 800465c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465e:	f7fe fb59 	bl	8002d14 <xQueueGenericSend>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24
 8004664:	e012      	b.n	800468c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <xTimerGenericCommand+0x98>)
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f107 0110 	add.w	r1, r7, #16
 800466e:	2300      	movs	r3, #0
 8004670:	2200      	movs	r2, #0
 8004672:	f7fe fb4f 	bl	8002d14 <xQueueGenericSend>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24
 8004678:	e008      	b.n	800468c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <xTimerGenericCommand+0x98>)
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f107 0110 	add.w	r1, r7, #16
 8004682:	2300      	movs	r3, #0
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	f7fe fc43 	bl	8002f10 <xQueueGenericSendFromISR>
 800468a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800468e:	4618      	mov	r0, r3
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000fa4 	.word	0x20000fa4

0800469c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <prvProcessExpiredTimer+0x94>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe f9ff 	bl	8002ab8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d022      	beq.n	800470e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	18d1      	adds	r1, r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f000 f8d1 	bl	800487c <prvInsertTimerInActiveList>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01f      	beq.n	8004720 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046e0:	2300      	movs	r3, #0
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	2100      	movs	r1, #0
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	f7ff ff88 	bl	8004600 <xTimerGenericCommand>
 80046f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	6978      	ldr	r0, [r7, #20]
 8004726:	4798      	blx	r3
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000f9c 	.word	0x20000f9c

08004734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f857 	bl	80047f4 <prvGetNextExpireTime>
 8004746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4619      	mov	r1, r3
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f803 	bl	8004758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004752:	f000 f8d5 	bl	8004900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004756:	e7f1      	b.n	800473c <prvTimerTask+0x8>

08004758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004762:	f7ff f8fb 	bl	800395c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f866 	bl	800483c <prvSampleTimeNow>
 8004770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d130      	bne.n	80047da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <prvProcessTimerOrBlockTask+0x3c>
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d806      	bhi.n	8004794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004786:	f7ff f8f7 	bl	8003978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff85 	bl	800469c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004792:	e024      	b.n	80047de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <prvProcessTimerOrBlockTask+0x90>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <prvProcessTimerOrBlockTask+0x50>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <prvProcessTimerOrBlockTask+0x52>
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <prvProcessTimerOrBlockTask+0x94>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7fe fe5f 	bl	800347c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047be:	f7ff f8db 	bl	8003978 <xTaskResumeAll>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <prvProcessTimerOrBlockTask+0x98>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
}
 80047d8:	e001      	b.n	80047de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047da:	f7ff f8cd 	bl	8003978 <xTaskResumeAll>
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000fa0 	.word	0x20000fa0
 80047ec:	20000fa4 	.word	0x20000fa4
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047fc:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <prvGetNextExpireTime+0x44>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <prvGetNextExpireTime+0x16>
 8004806:	2201      	movs	r2, #1
 8004808:	e000      	b.n	800480c <prvGetNextExpireTime+0x18>
 800480a:	2200      	movs	r2, #0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004818:	4b07      	ldr	r3, [pc, #28]	; (8004838 <prvGetNextExpireTime+0x44>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e001      	b.n	8004828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000f9c 	.word	0x20000f9c

0800483c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004844:	f7ff f936 	bl	8003ab4 <xTaskGetTickCount>
 8004848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <prvSampleTimeNow+0x3c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d205      	bcs.n	8004860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004854:	f000 f936 	bl	8004ac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e002      	b.n	8004866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <prvSampleTimeNow+0x3c>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800486c:	68fb      	ldr	r3, [r7, #12]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000fac 	.word	0x20000fac

0800487c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d812      	bhi.n	80048c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048b0:	2301      	movs	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e01b      	b.n	80048ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <prvInsertTimerInActiveList+0x7c>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fe f8c0 	bl	8002a46 <vListInsert>
 80048c6:	e012      	b.n	80048ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d206      	bcs.n	80048de <prvInsertTimerInActiveList+0x62>
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e007      	b.n	80048ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <prvInsertTimerInActiveList+0x80>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe f8ac 	bl	8002a46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000fa0 	.word	0x20000fa0
 80048fc:	20000f9c 	.word	0x20000f9c

08004900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	; 0x38
 8004904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004906:	e0ca      	b.n	8004a9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	da18      	bge.n	8004940 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	3304      	adds	r3, #4
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	61fb      	str	r3, [r7, #28]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004936:	6850      	ldr	r0, [r2, #4]
 8004938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	4611      	mov	r1, r2
 800493e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f2c0 80aa 	blt.w	8004a9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	3304      	adds	r3, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe f8ad 	bl	8002ab8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800495e:	463b      	mov	r3, r7
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff6b 	bl	800483c <prvSampleTimeNow>
 8004966:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b09      	cmp	r3, #9
 800496c:	f200 8097 	bhi.w	8004a9e <prvProcessReceivedCommands+0x19e>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <prvProcessReceivedCommands+0x78>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a1 	.word	0x080049a1
 8004984:	08004a15 	.word	0x08004a15
 8004988:	08004a29 	.word	0x08004a29
 800498c:	08004a73 	.word	0x08004a73
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049a1 	.word	0x080049a1
 8004998:	08004a15 	.word	0x08004a15
 800499c:	08004a29 	.word	0x08004a29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	18d1      	adds	r1, r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c0:	f7ff ff5c 	bl	800487c <prvInsertTimerInActiveList>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d069      	beq.n	8004a9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d05e      	beq.n	8004a9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	441a      	add	r2, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	2100      	movs	r1, #0
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f7ff fe05 	bl	8004600 <xTimerGenericCommand>
 80049f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d14f      	bne.n	8004a9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	61bb      	str	r3, [r7, #24]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a26:	e03a      	b.n	8004a9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	617b      	str	r3, [r7, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	18d1      	adds	r1, r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6c:	f7ff ff06 	bl	800487c <prvInsertTimerInActiveList>
					break;
 8004a70:	e015      	b.n	8004a9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f000 fbdd 	bl	8005240 <vPortFree>
 8004a86:	e00a      	b.n	8004a9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a9a:	e000      	b.n	8004a9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <prvProcessReceivedCommands+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	1d39      	adds	r1, r7, #4
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe face 	bl	8003048 <xQueueReceive>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f47f af2a 	bne.w	8004908 <prvProcessReceivedCommands+0x8>
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	3730      	adds	r7, #48	; 0x30
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000fa4 	.word	0x20000fa4

08004ac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aca:	e048      	b.n	8004b5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004acc:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd ffe7 	bl	8002ab8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02e      	beq.n	8004b5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d90e      	bls.n	8004b30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fd ff8c 	bl	8002a46 <vListInsert>
 8004b2e:	e016      	b.n	8004b5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b30:	2300      	movs	r3, #0
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	2100      	movs	r1, #0
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff fd60 	bl	8004600 <xTimerGenericCommand>
 8004b40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	603b      	str	r3, [r7, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1b1      	bne.n	8004acc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <prvSwitchTimerLists+0xc4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <prvSwitchTimerLists+0xc0>)
 8004b74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <prvSwitchTimerLists+0xc4>)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000f9c 	.word	0x20000f9c
 8004b88:	20000fa0 	.word	0x20000fa0

08004b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b92:	f000 f967 	bl	8004e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d120      	bne.n	8004be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b9e:	4814      	ldr	r0, [pc, #80]	; (8004bf0 <prvCheckForValidListAndQueue+0x64>)
 8004ba0:	f7fd ff00 	bl	80029a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ba4:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <prvCheckForValidListAndQueue+0x68>)
 8004ba6:	f7fd fefd 	bl	80029a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <prvCheckForValidListAndQueue+0x6c>)
 8004bac:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <prvCheckForValidListAndQueue+0x64>)
 8004bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <prvCheckForValidListAndQueue+0x70>)
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <prvCheckForValidListAndQueue+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <prvCheckForValidListAndQueue+0x74>)
 8004bbc:	4a11      	ldr	r2, [pc, #68]	; (8004c04 <prvCheckForValidListAndQueue+0x78>)
 8004bbe:	2110      	movs	r1, #16
 8004bc0:	200a      	movs	r0, #10
 8004bc2:	f7fe f80b 	bl	8002bdc <xQueueGenericCreateStatic>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	490b      	ldr	r1, [pc, #44]	; (8004c08 <prvCheckForValidListAndQueue+0x7c>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fc24 	bl	8003428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be0:	f000 f970 	bl	8004ec4 <vPortExitCritical>
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000fa4 	.word	0x20000fa4
 8004bf0:	20000f74 	.word	0x20000f74
 8004bf4:	20000f88 	.word	0x20000f88
 8004bf8:	20000f9c 	.word	0x20000f9c
 8004bfc:	20000fa0 	.word	0x20000fa0
 8004c00:	20001050 	.word	0x20001050
 8004c04:	20000fb0 	.word	0x20000fb0
 8004c08:	0800b078 	.word	0x0800b078

08004c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c3c:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <pxPortInitialiseStack+0x64>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b14      	subs	r3, #20
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b04      	subs	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f06f 0202 	mvn.w	r2, #2
 8004c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b20      	subs	r3, #32
 8004c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	08004c75 	.word	0x08004c75

08004c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <prvTaskExitError+0x54>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c86:	d00a      	beq.n	8004c9e <prvTaskExitError+0x2a>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60fb      	str	r3, [r7, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <prvTaskExitError+0x28>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60bb      	str	r3, [r7, #8]
}
 8004cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cb2:	bf00      	nop
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0fc      	beq.n	8004cb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000064 	.word	0x20000064
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <pxCurrentTCBConst2>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	6808      	ldr	r0, [r1, #0]
 8004cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	f380 8809 	msr	PSP, r0
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8811 	msr	BASEPRI, r0
 8004cea:	4770      	bx	lr
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst2>:
 8004cf0:	20000a74 	.word	0x20000a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <prvPortStartFirstTask+0x24>)
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	6800      	ldr	r0, [r0, #0]
 8004cfe:	f380 8808 	msr	MSP, r0
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8814 	msr	CONTROL, r0
 8004d0a:	b662      	cpsie	i
 8004d0c:	b661      	cpsie	f
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	df00      	svc	0
 8004d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d1a:	bf00      	nop
 8004d1c:	e000ed08 	.word	0xe000ed08

08004d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d26:	4b46      	ldr	r3, [pc, #280]	; (8004e40 <xPortStartScheduler+0x120>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a46      	ldr	r2, [pc, #280]	; (8004e44 <xPortStartScheduler+0x124>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10a      	bne.n	8004d46 <xPortStartScheduler+0x26>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	613b      	str	r3, [r7, #16]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <xPortStartScheduler+0x120>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <xPortStartScheduler+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10a      	bne.n	8004d66 <xPortStartScheduler+0x46>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <xPortStartScheduler+0x12c>)
 8004d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <xPortStartScheduler+0x130>)
 8004d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d8e:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <xPortStartScheduler+0x134>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d94:	e009      	b.n	8004daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d96:	4b2f      	ldr	r3, [pc, #188]	; (8004e54 <xPortStartScheduler+0x134>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	4a2d      	ldr	r2, [pc, #180]	; (8004e54 <xPortStartScheduler+0x134>)
 8004d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d0ef      	beq.n	8004d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004db6:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <xPortStartScheduler+0x134>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1c3 0307 	rsb	r3, r3, #7
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00a      	beq.n	8004dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60bb      	str	r3, [r7, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <xPortStartScheduler+0x134>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <xPortStartScheduler+0x134>)
 8004de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <xPortStartScheduler+0x134>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <xPortStartScheduler+0x134>)
 8004dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004df6:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <xPortStartScheduler+0x138>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <xPortStartScheduler+0x138>)
 8004dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e02:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <xPortStartScheduler+0x138>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <xPortStartScheduler+0x138>)
 8004e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e0e:	f000 f8dd 	bl	8004fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <xPortStartScheduler+0x13c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e18:	f000 f8fc 	bl	8005014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xPortStartScheduler+0x140>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <xPortStartScheduler+0x140>)
 8004e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e28:	f7ff ff66 	bl	8004cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e2c:	f7fe ff1e 	bl	8003c6c <vTaskSwitchContext>
	prvTaskExitError();
 8004e30:	f7ff ff20 	bl	8004c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	e000ed00 	.word	0xe000ed00
 8004e44:	410fc271 	.word	0x410fc271
 8004e48:	410fc270 	.word	0x410fc270
 8004e4c:	e000e400 	.word	0xe000e400
 8004e50:	200010a0 	.word	0x200010a0
 8004e54:	200010a4 	.word	0x200010a4
 8004e58:	e000ed20 	.word	0xe000ed20
 8004e5c:	20000064 	.word	0x20000064
 8004e60:	e000ef34 	.word	0xe000ef34

08004e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	607b      	str	r3, [r7, #4]
}
 8004e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10f      	bne.n	8004eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <vPortEnterCritical+0x5c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	603b      	str	r3, [r7, #0]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <vPortEnterCritical+0x4a>
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000064 	.word	0x20000064
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <vPortExitCritical+0x50>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <vPortExitCritical+0x24>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	607b      	str	r3, [r7, #4]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <vPortExitCritical+0x50>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <vPortExitCritical+0x50>)
 8004ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <vPortExitCritical+0x50>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <vPortExitCritical+0x42>
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f383 8811 	msr	BASEPRI, r3
}
 8004f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000064 	.word	0x20000064
	...

08004f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f20:	f3ef 8009 	mrs	r0, PSP
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <pxCurrentTCBConst>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f01e 0f10 	tst.w	lr, #16
 8004f30:	bf08      	it	eq
 8004f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f44:	f380 8811 	msr	BASEPRI, r0
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f7fe fe8c 	bl	8003c6c <vTaskSwitchContext>
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f380 8811 	msr	BASEPRI, r0
 8004f5c:	bc09      	pop	{r0, r3}
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	6808      	ldr	r0, [r1, #0]
 8004f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f66:	f01e 0f10 	tst.w	lr, #16
 8004f6a:	bf08      	it	eq
 8004f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f70:	f380 8809 	msr	PSP, r0
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst>:
 8004f80:	20000a74 	.word	0x20000a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa2:	f7fe fda9 	bl	8003af8 <xTaskIncrementTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <xPortSysTickHandler+0x40>)
 8004fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <vPortSetupTimerInterrupt+0x38>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <vPortSetupTimerInterrupt+0x3c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0a      	ldr	r2, [pc, #40]	; (800500c <vPortSetupTimerInterrupt+0x40>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <vPortSetupTimerInterrupt+0x44>)
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fee:	4b04      	ldr	r3, [pc, #16]	; (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e010 	.word	0xe000e010
 8005004:	e000e018 	.word	0xe000e018
 8005008:	20000070 	.word	0x20000070
 800500c:	10624dd3 	.word	0x10624dd3
 8005010:	e000e014 	.word	0xe000e014

08005014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005024 <vPortEnableVFP+0x10>
 8005018:	6801      	ldr	r1, [r0, #0]
 800501a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800501e:	6001      	str	r1, [r0, #0]
 8005020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005022:	bf00      	nop
 8005024:	e000ed88 	.word	0xe000ed88

08005028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800502e:	f3ef 8305 	mrs	r3, IPSR
 8005032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d914      	bls.n	8005064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <vPortValidateInterruptPriority+0x70>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <vPortValidateInterruptPriority+0x74>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	7afa      	ldrb	r2, [r7, #11]
 800504a:	429a      	cmp	r2, r3
 800504c:	d20a      	bcs.n	8005064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <vPortValidateInterruptPriority+0x78>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800506c:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <vPortValidateInterruptPriority+0x7c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d90a      	bls.n	800508a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	603b      	str	r3, [r7, #0]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <vPortValidateInterruptPriority+0x60>
	}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000e3f0 	.word	0xe000e3f0
 800509c:	200010a0 	.word	0x200010a0
 80050a0:	e000ed0c 	.word	0xe000ed0c
 80050a4:	200010a4 	.word	0x200010a4

080050a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050b4:	f7fe fc52 	bl	800395c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050b8:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <pvPortMalloc+0x180>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050c0:	f000 f920 	bl	8005304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050c4:	4b59      	ldr	r3, [pc, #356]	; (800522c <pvPortMalloc+0x184>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 8093 	bne.w	80051f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050d8:	2208      	movs	r2, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d014      	beq.n	8005114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	3308      	adds	r3, #8
 80050f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <pvPortMalloc+0x6c>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	617b      	str	r3, [r7, #20]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d06e      	beq.n	80051f8 <pvPortMalloc+0x150>
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <pvPortMalloc+0x188>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d869      	bhi.n	80051f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005124:	4b43      	ldr	r3, [pc, #268]	; (8005234 <pvPortMalloc+0x18c>)
 8005126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005128:	4b42      	ldr	r3, [pc, #264]	; (8005234 <pvPortMalloc+0x18c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800512e:	e004      	b.n	800513a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d903      	bls.n	800514c <pvPortMalloc+0xa4>
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f1      	bne.n	8005130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800514c:	4b36      	ldr	r3, [pc, #216]	; (8005228 <pvPortMalloc+0x180>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005152:	429a      	cmp	r2, r3
 8005154:	d050      	beq.n	80051f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2208      	movs	r2, #8
 800515c:	4413      	add	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	2308      	movs	r3, #8
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	429a      	cmp	r2, r3
 8005176:	d91f      	bls.n	80051b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <pvPortMalloc+0xf8>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	613b      	str	r3, [r7, #16]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051b2:	69b8      	ldr	r0, [r7, #24]
 80051b4:	f000 f908 	bl	80053c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051b8:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <pvPortMalloc+0x188>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <pvPortMalloc+0x188>)
 80051c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <pvPortMalloc+0x188>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <pvPortMalloc+0x190>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d203      	bcs.n	80051da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051d2:	4b17      	ldr	r3, [pc, #92]	; (8005230 <pvPortMalloc+0x188>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <pvPortMalloc+0x190>)
 80051d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <pvPortMalloc+0x184>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <pvPortMalloc+0x194>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	4a11      	ldr	r2, [pc, #68]	; (800523c <pvPortMalloc+0x194>)
 80051f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051f8:	f7fe fbbe 	bl	8003978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <pvPortMalloc+0x174>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60fb      	str	r3, [r7, #12]
}
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <pvPortMalloc+0x172>
	return pvReturn;
 800521c:	69fb      	ldr	r3, [r7, #28]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3728      	adds	r7, #40	; 0x28
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20001c68 	.word	0x20001c68
 800522c:	20001c7c 	.word	0x20001c7c
 8005230:	20001c6c 	.word	0x20001c6c
 8005234:	20001c60 	.word	0x20001c60
 8005238:	20001c70 	.word	0x20001c70
 800523c:	20001c74 	.word	0x20001c74

08005240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d04d      	beq.n	80052ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005252:	2308      	movs	r3, #8
 8005254:	425b      	negs	r3, r3
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <vPortFree+0xb8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <vPortFree+0x44>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <vPortFree+0x62>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60bb      	str	r3, [r7, #8]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <vPortFree+0xb8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01e      	beq.n	80052ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11a      	bne.n	80052ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <vPortFree+0xb8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052c8:	f7fe fb48 	bl	800395c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <vPortFree+0xbc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <vPortFree+0xbc>)
 80052d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	f000 f874 	bl	80053c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <vPortFree+0xc0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a06      	ldr	r2, [pc, #24]	; (8005300 <vPortFree+0xc0>)
 80052e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052ea:	f7fe fb45 	bl	8003978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001c7c 	.word	0x20001c7c
 80052fc:	20001c6c 	.word	0x20001c6c
 8005300:	20001c78 	.word	0x20001c78

08005304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800530a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800530e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <prvHeapInit+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <prvHeapInit+0xac>)
 8005334:	4413      	add	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <prvHeapInit+0xb0>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005342:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <prvHeapInit+0xb0>)
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005350:	2208      	movs	r2, #8
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <prvHeapInit+0xb4>)
 8005364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <prvHeapInit+0xb4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <prvHeapInit+0xb4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvHeapInit+0xb4>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <prvHeapInit+0xb8>)
 8005392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <prvHeapInit+0xbc>)
 800539a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <prvHeapInit+0xc0>)
 800539e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	200010a8 	.word	0x200010a8
 80053b4:	20001c60 	.word	0x20001c60
 80053b8:	20001c68 	.word	0x20001c68
 80053bc:	20001c70 	.word	0x20001c70
 80053c0:	20001c6c 	.word	0x20001c6c
 80053c4:	20001c7c 	.word	0x20001c7c

080053c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <prvInsertBlockIntoFreeList+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <prvInsertBlockIntoFreeList+0x14>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d8f7      	bhi.n	80053d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d108      	bne.n	800540a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	441a      	add	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d118      	bne.n	8005450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <prvInsertBlockIntoFreeList+0xb0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d00d      	beq.n	8005446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e008      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvInsertBlockIntoFreeList+0xb0>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e003      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d002      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20001c60 	.word	0x20001c60
 8005478:	20001c68 	.word	0x20001c68

0800547c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005486:	2003      	movs	r0, #3
 8005488:	f000 f994 	bl	80057b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800548c:	2000      	movs	r0, #0
 800548e:	f000 f80d 	bl	80054ac <HAL_InitTick>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	71fb      	strb	r3, [r7, #7]
 800549c:	e001      	b.n	80054a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800549e:	f003 ff0f 	bl	80092c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054a2:	79fb      	ldrb	r3, [r7, #7]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80054b8:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_InitTick+0x6c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d023      	beq.n	8005508 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <HAL_InitTick+0x70>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_InitTick+0x6c>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	4619      	mov	r1, r3
 80054ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f9af 	bl	800583a <HAL_SYSTICK_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	d809      	bhi.n	80054fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054e8:	2200      	movs	r2, #0
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f0:	f000 f96b 	bl	80057ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <HAL_InitTick+0x74>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e007      	b.n	800550c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e004      	b.n	800550c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e001      	b.n	800550c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	2000006c 	.word	0x2000006c
 800551c:	20000070 	.word	0x20000070
 8005520:	20000068 	.word	0x20000068

08005524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_GetTick+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20001c80 	.word	0x20001c80

0800553c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005544:	f7ff ffee 	bl	8005524 <HAL_GetTick>
 8005548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005554:	d005      	beq.n	8005562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_Delay+0x44>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005562:	bf00      	nop
 8005564:	f7ff ffde 	bl	8005524 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d8f7      	bhi.n	8005564 <HAL_Delay+0x28>
  {
  }
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2000006c 	.word	0x2000006c

08005584 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <HAL_GetUIDw0+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	1fff7590 	.word	0x1fff7590

0800559c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_GetUIDw1+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	1fff7594 	.word	0x1fff7594

080055b4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_GetUIDw2+0x14>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	1fff7598 	.word	0x1fff7598

080055cc <__NVIC_SetPriorityGrouping>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <__NVIC_SetPriorityGrouping+0x44>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055e8:	4013      	ands	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055fe:	4a04      	ldr	r2, [pc, #16]	; (8005610 <__NVIC_SetPriorityGrouping+0x44>)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	60d3      	str	r3, [r2, #12]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <__NVIC_GetPriorityGrouping>:
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <__NVIC_GetPriorityGrouping+0x18>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	f003 0307 	and.w	r3, r3, #7
}
 8005622:	4618      	mov	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <__NVIC_EnableIRQ>:
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	2b00      	cmp	r3, #0
 8005640:	db0b      	blt.n	800565a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	f003 021f 	and.w	r2, r3, #31
 8005648:	4907      	ldr	r1, [pc, #28]	; (8005668 <__NVIC_EnableIRQ+0x38>)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2001      	movs	r0, #1
 8005652:	fa00 f202 	lsl.w	r2, r0, r2
 8005656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	e000e100 	.word	0xe000e100

0800566c <__NVIC_DisableIRQ>:
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	2b00      	cmp	r3, #0
 800567c:	db12      	blt.n	80056a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f003 021f 	and.w	r2, r3, #31
 8005684:	490a      	ldr	r1, [pc, #40]	; (80056b0 <__NVIC_DisableIRQ+0x44>)
 8005686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2001      	movs	r0, #1
 800568e:	fa00 f202 	lsl.w	r2, r0, r2
 8005692:	3320      	adds	r3, #32
 8005694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005698:	f3bf 8f4f 	dsb	sy
}
 800569c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800569e:	f3bf 8f6f 	isb	sy
}
 80056a2:	bf00      	nop
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	e000e100 	.word	0xe000e100

080056b4 <__NVIC_SetPriority>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	6039      	str	r1, [r7, #0]
 80056be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db0a      	blt.n	80056de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	490c      	ldr	r1, [pc, #48]	; (8005700 <__NVIC_SetPriority+0x4c>)
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	0112      	lsls	r2, r2, #4
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	440b      	add	r3, r1
 80056d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056dc:	e00a      	b.n	80056f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	4908      	ldr	r1, [pc, #32]	; (8005704 <__NVIC_SetPriority+0x50>)
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	3b04      	subs	r3, #4
 80056ec:	0112      	lsls	r2, r2, #4
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	440b      	add	r3, r1
 80056f2:	761a      	strb	r2, [r3, #24]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000e100 	.word	0xe000e100
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f1c3 0307 	rsb	r3, r3, #7
 8005722:	2b04      	cmp	r3, #4
 8005724:	bf28      	it	cs
 8005726:	2304      	movcs	r3, #4
 8005728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3304      	adds	r3, #4
 800572e:	2b06      	cmp	r3, #6
 8005730:	d902      	bls.n	8005738 <NVIC_EncodePriority+0x30>
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3b03      	subs	r3, #3
 8005736:	e000      	b.n	800573a <NVIC_EncodePriority+0x32>
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800573c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43da      	mvns	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	401a      	ands	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	fa01 f303 	lsl.w	r3, r1, r3
 800575a:	43d9      	mvns	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005760:	4313      	orrs	r3, r2
         );
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005780:	d301      	bcc.n	8005786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005782:	2301      	movs	r3, #1
 8005784:	e00f      	b.n	80057a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <SysTick_Config+0x40>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800578e:	210f      	movs	r1, #15
 8005790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005794:	f7ff ff8e 	bl	80056b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <SysTick_Config+0x40>)
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <SysTick_Config+0x40>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010

080057b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff05 	bl	80055cc <__NVIC_SetPriorityGrouping>
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057dc:	f7ff ff1a 	bl	8005614 <__NVIC_GetPriorityGrouping>
 80057e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7ff ff8e 	bl	8005708 <NVIC_EncodePriority>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff5d 	bl	80056b4 <__NVIC_SetPriority>
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	4603      	mov	r3, r0
 800580a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800580c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff0d 	bl	8005630 <__NVIC_EnableIRQ>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff1d 	bl	800566c <__NVIC_DisableIRQ>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ff94 	bl	8005770 <SysTick_Config>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e098      	b.n	8005998 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b4d      	ldr	r3, [pc, #308]	; (80059a4 <HAL_DMA_Init+0x150>)
 800586e:	429a      	cmp	r2, r3
 8005870:	d80f      	bhi.n	8005892 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <HAL_DMA_Init+0x154>)
 800587a:	4413      	add	r3, r2
 800587c:	4a4b      	ldr	r2, [pc, #300]	; (80059ac <HAL_DMA_Init+0x158>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	009a      	lsls	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a48      	ldr	r2, [pc, #288]	; (80059b0 <HAL_DMA_Init+0x15c>)
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
 8005890:	e00e      	b.n	80058b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	4b46      	ldr	r3, [pc, #280]	; (80059b4 <HAL_DMA_Init+0x160>)
 800589a:	4413      	add	r3, r2
 800589c:	4a43      	ldr	r2, [pc, #268]	; (80059ac <HAL_DMA_Init+0x158>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	009a      	lsls	r2, r3, #2
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a42      	ldr	r2, [pc, #264]	; (80059b8 <HAL_DMA_Init+0x164>)
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800590a:	d039      	beq.n	8005980 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <HAL_DMA_Init+0x15c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d11a      	bne.n	800594c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005916:	4b29      	ldr	r3, [pc, #164]	; (80059bc <HAL_DMA_Init+0x168>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f003 031c 	and.w	r3, r3, #28
 8005922:	210f      	movs	r1, #15
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	4924      	ldr	r1, [pc, #144]	; (80059bc <HAL_DMA_Init+0x168>)
 800592c:	4013      	ands	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <HAL_DMA_Init+0x168>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593c:	f003 031c 	and.w	r3, r3, #28
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	491d      	ldr	r1, [pc, #116]	; (80059bc <HAL_DMA_Init+0x168>)
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]
 800594a:	e019      	b.n	8005980 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800594c:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_DMA_Init+0x16c>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	f003 031c 	and.w	r3, r3, #28
 8005958:	210f      	movs	r1, #15
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	4917      	ldr	r1, [pc, #92]	; (80059c0 <HAL_DMA_Init+0x16c>)
 8005962:	4013      	ands	r3, r2
 8005964:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005966:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <HAL_DMA_Init+0x16c>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f003 031c 	and.w	r3, r3, #28
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	4911      	ldr	r1, [pc, #68]	; (80059c0 <HAL_DMA_Init+0x16c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40020407 	.word	0x40020407
 80059a8:	bffdfff8 	.word	0xbffdfff8
 80059ac:	cccccccd 	.word	0xcccccccd
 80059b0:	40020000 	.word	0x40020000
 80059b4:	bffdfbf8 	.word	0xbffdfbf8
 80059b8:	40020400 	.word	0x40020400
 80059bc:	400200a8 	.word	0x400200a8
 80059c0:	400204a8 	.word	0x400204a8

080059c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_DMA_Start_IT+0x20>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e04b      	b.n	8005a7c <HAL_DMA_Start_IT+0xb8>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d13a      	bne.n	8005a6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f969 	bl	8005cf4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 020e 	orr.w	r2, r2, #14
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e00f      	b.n	8005a5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0204 	bic.w	r2, r2, #4
 8005a4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 020a 	orr.w	r2, r2, #10
 8005a5a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e005      	b.n	8005a7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
 8005a78:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d005      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
 8005aa6:	e029      	b.n	8005afc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 020e 	bic.w	r2, r2, #14
 8005ab6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	f003 021c 	and.w	r2, r3, #28
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8005ada:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
    }
  }
  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 031c 	and.w	r3, r3, #28
 8005b26:	2204      	movs	r2, #4
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d026      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x7a>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d021      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0204 	bic.w	r2, r2, #4
 8005b58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f003 021c 	and.w	r2, r3, #28
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2104      	movs	r1, #4
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d071      	beq.n	8005c5a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b7e:	e06c      	b.n	8005c5a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	f003 031c 	and.w	r3, r3, #28
 8005b88:	2202      	movs	r2, #2
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02e      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0xec>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d029      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 020a 	bic.w	r2, r2, #10
 8005bba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f003 021c 	and.w	r2, r3, #28
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d038      	beq.n	8005c5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005bf0:	e033      	b.n	8005c5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f003 031c 	and.w	r3, r3, #28
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02a      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x156>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d025      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 020e 	bic.w	r2, r2, #14
 8005c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	f003 021c 	and.w	r2, r3, #28
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
}
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_RegisterCallback+0x20>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e031      	b.n	8005ce8 <HAL_DMA_RegisterCallback+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d120      	bne.n	8005cda <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d81a      	bhi.n	8005cd4 <HAL_DMA_RegisterCallback+0x70>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_DMA_RegisterCallback+0x40>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cbd 	.word	0x08005cbd
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005ccd 	.word	0x08005ccd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005cba:	e010      	b.n	8005cde <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005cc2:	e00c      	b.n	8005cde <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005cca:	e008      	b.n	8005cde <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005cd2:	e004      	b.n	8005cde <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
           break;
 8005cd8:	e001      	b.n	8005cde <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f003 021c 	and.w	r2, r3, #28
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2101      	movs	r1, #1
 8005d10:	fa01 f202 	lsl.w	r2, r1, r2
 8005d14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d108      	bne.n	8005d38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d36:	e007      	b.n	8005d48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d62:	e154      	b.n	800600e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2101      	movs	r1, #1
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8146 	beq.w	8006008 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d005      	beq.n	8005d94 <HAL_GPIO_Init+0x40>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d130      	bne.n	8005df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	2203      	movs	r2, #3
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4013      	ands	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dca:	2201      	movs	r2, #1
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 0201 	and.w	r2, r3, #1
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d017      	beq.n	8005e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4013      	ands	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d123      	bne.n	8005e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	08da      	lsrs	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3208      	adds	r2, #8
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	220f      	movs	r2, #15
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	08da      	lsrs	r2, r3, #3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3208      	adds	r2, #8
 8005e80:	6939      	ldr	r1, [r7, #16]
 8005e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	2203      	movs	r2, #3
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0203 	and.w	r2, r3, #3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80a0 	beq.w	8006008 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ec8:	4b58      	ldr	r3, [pc, #352]	; (800602c <HAL_GPIO_Init+0x2d8>)
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	4a57      	ldr	r2, [pc, #348]	; (800602c <HAL_GPIO_Init+0x2d8>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	6613      	str	r3, [r2, #96]	; 0x60
 8005ed4:	4b55      	ldr	r3, [pc, #340]	; (800602c <HAL_GPIO_Init+0x2d8>)
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ee0:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_GPIO_Init+0x2dc>)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	089b      	lsrs	r3, r3, #2
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	220f      	movs	r2, #15
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4013      	ands	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f0a:	d019      	beq.n	8005f40 <HAL_GPIO_Init+0x1ec>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a49      	ldr	r2, [pc, #292]	; (8006034 <HAL_GPIO_Init+0x2e0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_GPIO_Init+0x1e8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a48      	ldr	r2, [pc, #288]	; (8006038 <HAL_GPIO_Init+0x2e4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00d      	beq.n	8005f38 <HAL_GPIO_Init+0x1e4>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a47      	ldr	r2, [pc, #284]	; (800603c <HAL_GPIO_Init+0x2e8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <HAL_GPIO_Init+0x1e0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a46      	ldr	r2, [pc, #280]	; (8006040 <HAL_GPIO_Init+0x2ec>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_GPIO_Init+0x1dc>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	e008      	b.n	8005f42 <HAL_GPIO_Init+0x1ee>
 8005f30:	2307      	movs	r3, #7
 8005f32:	e006      	b.n	8005f42 <HAL_GPIO_Init+0x1ee>
 8005f34:	2303      	movs	r3, #3
 8005f36:	e004      	b.n	8005f42 <HAL_GPIO_Init+0x1ee>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e002      	b.n	8005f42 <HAL_GPIO_Init+0x1ee>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_GPIO_Init+0x1ee>
 8005f40:	2300      	movs	r3, #0
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	f002 0203 	and.w	r2, r2, #3
 8005f48:	0092      	lsls	r2, r2, #2
 8005f4a:	4093      	lsls	r3, r2
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f52:	4937      	ldr	r1, [pc, #220]	; (8006030 <HAL_GPIO_Init+0x2dc>)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	3302      	adds	r3, #2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f60:	4b38      	ldr	r3, [pc, #224]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f8a:	4b2e      	ldr	r3, [pc, #184]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4013      	ands	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fae:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fb4:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4013      	ands	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <HAL_GPIO_Init+0x2f0>)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	3301      	adds	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f aea3 	bne.w	8005d64 <HAL_GPIO_Init+0x10>
  }
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40021000 	.word	0x40021000
 8006030:	40010000 	.word	0x40010000
 8006034:	48000400 	.word	0x48000400
 8006038:	48000800 	.word	0x48000800
 800603c:	48000c00 	.word	0x48000c00
 8006040:	48001000 	.word	0x48001000
 8006044:	40010400 	.word	0x40010400

08006048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	807b      	strh	r3, [r7, #2]
 8006054:	4613      	mov	r3, r2
 8006056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006058:	787b      	ldrb	r3, [r7, #1]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006064:	e002      	b.n	800606c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d006      	beq.n	800609c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	4618      	mov	r0, r3
 8006098:	f003 fbf6 	bl	8009888 <HAL_GPIO_EXTI_Callback>
  }
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40010400 	.word	0x40010400

080060a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40007000 	.word	0x40007000

080060c8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80060d0:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <HAL_PWR_ConfigPVD+0xb8>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 020e 	bic.w	r2, r3, #14
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4928      	ldr	r1, [pc, #160]	; (8006180 <HAL_PWR_ConfigPVD+0xb8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80060e2:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ec:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80060ee:	4b25      	ldr	r3, [pc, #148]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a24      	ldr	r2, [pc, #144]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 80060f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80060fa:	4b22      	ldr	r3, [pc, #136]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	4a21      	ldr	r2, [pc, #132]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006104:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 800613c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006140:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4a06      	ldr	r2, [pc, #24]	; (8006184 <HAL_PWR_ConfigPVD+0xbc>)
 800616c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006170:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40007000 	.word	0x40007000
 8006184:	40010400 	.word	0x40010400

08006188 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_PWR_EnablePVD+0x1c>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <HAL_PWR_EnablePVD+0x1c>)
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6053      	str	r3, [r2, #4]
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40007000 	.word	0x40007000

080061a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40007000 	.word	0x40007000

080061c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d2:	d130      	bne.n	8006236 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d4:	4b23      	ldr	r3, [pc, #140]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e0:	d038      	beq.n	8006254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061ea:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f2:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2232      	movs	r2, #50	; 0x32
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0c9b      	lsrs	r3, r3, #18
 8006204:	3301      	adds	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006208:	e002      	b.n	8006210 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b01      	subs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006210:	4b14      	ldr	r3, [pc, #80]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d102      	bne.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x60>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f2      	bne.n	800620a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006224:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d110      	bne.n	8006254 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e00f      	b.n	8006256 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006242:	d007      	beq.n	8006254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006244:	4b07      	ldr	r3, [pc, #28]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800624c:	4a05      	ldr	r2, [pc, #20]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006252:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40007000 	.word	0x40007000
 8006268:	20000070 	.word	0x20000070
 800626c:	431bde83 	.word	0x431bde83

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f000 bc02 	b.w	8006a88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006284:	4b96      	ldr	r3, [pc, #600]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 030c 	and.w	r3, r3, #12
 800628c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800628e:	4b94      	ldr	r3, [pc, #592]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80e4 	beq.w	800646e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_RCC_OscConfig+0x4c>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	f040 808b 	bne.w	80063ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	f040 8087 	bne.w	80063ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062bc:	4b88      	ldr	r3, [pc, #544]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_OscConfig+0x64>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e3d9      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	4b81      	ldr	r3, [pc, #516]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <HAL_RCC_OscConfig+0x7e>
 80062e4:	4b7e      	ldr	r3, [pc, #504]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ec:	e005      	b.n	80062fa <HAL_RCC_OscConfig+0x8a>
 80062ee:	4b7c      	ldr	r3, [pc, #496]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d223      	bcs.n	8006346 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd54 	bl	8006db0 <RCC_SetFlashLatencyFromMSIRange>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e3ba      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006312:	4b73      	ldr	r3, [pc, #460]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a72      	ldr	r2, [pc, #456]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006318:	f043 0308 	orr.w	r3, r3, #8
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	4b70      	ldr	r3, [pc, #448]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	496d      	ldr	r1, [pc, #436]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006330:	4b6b      	ldr	r3, [pc, #428]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	4968      	ldr	r1, [pc, #416]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006340:	4313      	orrs	r3, r2
 8006342:	604b      	str	r3, [r1, #4]
 8006344:	e025      	b.n	8006392 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006346:	4b66      	ldr	r3, [pc, #408]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a65      	ldr	r2, [pc, #404]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800634c:	f043 0308 	orr.w	r3, r3, #8
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4b63      	ldr	r3, [pc, #396]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	4960      	ldr	r1, [pc, #384]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006364:	4b5e      	ldr	r3, [pc, #376]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	495b      	ldr	r1, [pc, #364]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fd14 	bl	8006db0 <RCC_SetFlashLatencyFromMSIRange>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e37a      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006392:	f000 fc81 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006396:	4602      	mov	r2, r0
 8006398:	4b51      	ldr	r3, [pc, #324]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	4950      	ldr	r1, [pc, #320]	; (80064e4 <HAL_RCC_OscConfig+0x274>)
 80063a4:	5ccb      	ldrb	r3, [r1, r3]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a4e      	ldr	r2, [pc, #312]	; (80064e8 <HAL_RCC_OscConfig+0x278>)
 80063b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063b2:	4b4e      	ldr	r3, [pc, #312]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f878 	bl	80054ac <HAL_InitTick>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d052      	beq.n	800646c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	e35e      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d032      	beq.n	8006438 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a42      	ldr	r2, [pc, #264]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063de:	f7ff f8a1 	bl	8005524 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063e6:	f7ff f89d 	bl	8005524 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e347      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063f8:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006404:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a35      	ldr	r2, [pc, #212]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800640a:	f043 0308 	orr.w	r3, r3, #8
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4b33      	ldr	r3, [pc, #204]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	4930      	ldr	r1, [pc, #192]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006422:	4b2f      	ldr	r3, [pc, #188]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	492b      	ldr	r1, [pc, #172]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006432:	4313      	orrs	r3, r2
 8006434:	604b      	str	r3, [r1, #4]
 8006436:	e01a      	b.n	800646e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006438:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a28      	ldr	r2, [pc, #160]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006444:	f7ff f86e 	bl	8005524 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800644c:	f7ff f86a 	bl	8005524 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e314      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800645e:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1dc>
 800646a:	e000      	b.n	800646e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800646c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d073      	beq.n	8006562 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d005      	beq.n	800648c <HAL_RCC_OscConfig+0x21c>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d10e      	bne.n	80064a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d10b      	bne.n	80064a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648c:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d063      	beq.n	8006560 <HAL_RCC_OscConfig+0x2f0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d15f      	bne.n	8006560 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e2f1      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x24c>
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e025      	b.n	8006508 <HAL_RCC_OscConfig+0x298>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c4:	d114      	bne.n	80064f0 <HAL_RCC_OscConfig+0x280>
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a05      	ldr	r2, [pc, #20]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a02      	ldr	r2, [pc, #8]	; (80064e0 <HAL_RCC_OscConfig+0x270>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e013      	b.n	8006508 <HAL_RCC_OscConfig+0x298>
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800b100 	.word	0x0800b100
 80064e8:	20000070 	.word	0x20000070
 80064ec:	20000068 	.word	0x20000068
 80064f0:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a9f      	ldr	r2, [pc, #636]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80064f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	4b9d      	ldr	r3, [pc, #628]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a9c      	ldr	r2, [pc, #624]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d013      	beq.n	8006538 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7ff f808 	bl	8005524 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006518:	f7ff f804 	bl	8005524 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e2ae      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800652a:	4b92      	ldr	r3, [pc, #584]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x2a8>
 8006536:	e014      	b.n	8006562 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fe fff4 	bl	8005524 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fe fff0 	bl	8005524 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	; 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e29a      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006552:	4b88      	ldr	r3, [pc, #544]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x2d0>
 800655e:	e000      	b.n	8006562 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d060      	beq.n	8006630 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d005      	beq.n	8006580 <HAL_RCC_OscConfig+0x310>
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b0c      	cmp	r3, #12
 8006578:	d119      	bne.n	80065ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d116      	bne.n	80065ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	4b7c      	ldr	r3, [pc, #496]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_OscConfig+0x328>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e277      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006598:	4b76      	ldr	r3, [pc, #472]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	4973      	ldr	r1, [pc, #460]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ac:	e040      	b.n	8006630 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d023      	beq.n	80065fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b6:	4b6f      	ldr	r3, [pc, #444]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6e      	ldr	r2, [pc, #440]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7fe ffaf 	bl	8005524 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ca:	f7fe ffab 	bl	8005524 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e255      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065dc:	4b65      	ldr	r3, [pc, #404]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e8:	4b62      	ldr	r3, [pc, #392]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	495f      	ldr	r1, [pc, #380]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	604b      	str	r3, [r1, #4]
 80065fc:	e018      	b.n	8006630 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b5d      	ldr	r3, [pc, #372]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a5c      	ldr	r2, [pc, #368]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fe ff8b 	bl	8005524 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006612:	f7fe ff87 	bl	8005524 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e231      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006624:	4b53      	ldr	r3, [pc, #332]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d03c      	beq.n	80066b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01c      	beq.n	800667e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664a:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fe ff66 	bl	8005524 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800665c:	f7fe ff62 	bl	8005524 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e20c      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800666e:	4b41      	ldr	r3, [pc, #260]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <HAL_RCC_OscConfig+0x3ec>
 800667c:	e01b      	b.n	80066b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800667e:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006684:	4a3b      	ldr	r2, [pc, #236]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fe ff49 	bl	8005524 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006696:	f7fe ff45 	bl	8005524 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e1ef      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a8:	4b32      	ldr	r3, [pc, #200]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ef      	bne.n	8006696 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80a6 	beq.w	8006810 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c4:	2300      	movs	r3, #0
 80066c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066c8:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80066da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066de:	6593      	str	r3, [r2, #88]	; 0x58
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ec:	2301      	movs	r3, #1
 80066ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_RCC_OscConfig+0x508>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d118      	bne.n	800672e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_RCC_OscConfig+0x508>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_RCC_OscConfig+0x508>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006708:	f7fe ff0c 	bl	8005524 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fe ff08 	bl	8005524 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e1b2      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <HAL_RCC_OscConfig+0x508>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d108      	bne.n	8006748 <HAL_RCC_OscConfig+0x4d8>
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006746:	e029      	b.n	800679c <HAL_RCC_OscConfig+0x52c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b05      	cmp	r3, #5
 800674e:	d115      	bne.n	800677c <HAL_RCC_OscConfig+0x50c>
 8006750:	4b08      	ldr	r3, [pc, #32]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006758:	f043 0304 	orr.w	r3, r3, #4
 800675c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	4a03      	ldr	r2, [pc, #12]	; (8006774 <HAL_RCC_OscConfig+0x504>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006770:	e014      	b.n	800679c <HAL_RCC_OscConfig+0x52c>
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000
 8006778:	40007000 	.word	0x40007000
 800677c:	4b9a      	ldr	r3, [pc, #616]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	4a99      	ldr	r2, [pc, #612]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800678c:	4b96      	ldr	r3, [pc, #600]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	4a95      	ldr	r2, [pc, #596]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d016      	beq.n	80067d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fe febe 	bl	8005524 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fe feba 	bl	8005524 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e162      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c2:	4b89      	ldr	r3, [pc, #548]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ed      	beq.n	80067ac <HAL_RCC_OscConfig+0x53c>
 80067d0:	e015      	b.n	80067fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fe fea7 	bl	8005524 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fe fea3 	bl	8005524 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e14b      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f0:	4b7d      	ldr	r3, [pc, #500]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1ed      	bne.n	80067da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006804:	4b78      	ldr	r3, [pc, #480]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 800680a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d03c      	beq.n	8006896 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01c      	beq.n	800685e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006824:	4b70      	ldr	r3, [pc, #448]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800682a:	4a6f      	ldr	r2, [pc, #444]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006834:	f7fe fe76 	bl	8005524 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800683c:	f7fe fe72 	bl	8005524 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e11c      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ef      	beq.n	800683c <HAL_RCC_OscConfig+0x5cc>
 800685c:	e01b      	b.n	8006896 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800685e:	4b62      	ldr	r3, [pc, #392]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006864:	4a60      	ldr	r2, [pc, #384]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fe fe59 	bl	8005524 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006876:	f7fe fe55 	bl	8005524 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e0ff      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006888:	4b57      	ldr	r3, [pc, #348]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 800688a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ef      	bne.n	8006876 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80f3 	beq.w	8006a86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f040 80c9 	bne.w	8006a3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068aa:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f003 0203 	and.w	r2, r3, #3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d12c      	bne.n	8006918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	3b01      	subs	r3, #1
 80068ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d123      	bne.n	8006918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068dc:	429a      	cmp	r2, r3
 80068de:	d11b      	bne.n	8006918 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d113      	bne.n	8006918 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	3b01      	subs	r3, #1
 80068fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d109      	bne.n	8006918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	3b01      	subs	r3, #1
 8006912:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d06b      	beq.n	80069f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b0c      	cmp	r3, #12
 800691c:	d062      	beq.n	80069e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800691e:	4b32      	ldr	r3, [pc, #200]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e0ac      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800692e:	4b2e      	ldr	r3, [pc, #184]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006938:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800693a:	f7fe fdf3 	bl	8005524 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006942:	f7fe fdef 	bl	8005524 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e099      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f0      	bne.n	8006942 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006960:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <HAL_RCC_OscConfig+0x77c>)
 8006966:	4013      	ands	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006970:	3a01      	subs	r2, #1
 8006972:	0112      	lsls	r2, r2, #4
 8006974:	4311      	orrs	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800697a:	0212      	lsls	r2, r2, #8
 800697c:	4311      	orrs	r1, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006982:	0852      	lsrs	r2, r2, #1
 8006984:	3a01      	subs	r2, #1
 8006986:	0552      	lsls	r2, r2, #21
 8006988:	4311      	orrs	r1, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800698e:	0852      	lsrs	r2, r2, #1
 8006990:	3a01      	subs	r2, #1
 8006992:	0652      	lsls	r2, r2, #25
 8006994:	4311      	orrs	r1, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800699a:	06d2      	lsls	r2, r2, #27
 800699c:	430a      	orrs	r2, r1
 800699e:	4912      	ldr	r1, [pc, #72]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069a4:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069bc:	f7fe fdb2 	bl	8005524 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c4:	f7fe fdae 	bl	8005524 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e058      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <HAL_RCC_OscConfig+0x778>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069e2:	e050      	b.n	8006a86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04f      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
 80069e8:	40021000 	.word	0x40021000
 80069ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d144      	bne.n	8006a86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069fc:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a23      	ldr	r2, [pc, #140]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a08:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a14:	f7fe fd86 	bl	8005524 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fe fd82 	bl	8005524 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e02c      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a2e:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x7ac>
 8006a3a:	e024      	b.n	8006a86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b0c      	cmp	r3, #12
 8006a40:	d01f      	beq.n	8006a82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a42:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a12      	ldr	r2, [pc, #72]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fe fd69 	bl	8005524 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a56:	f7fe fd65 	bl	8005524 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e00f      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	4905      	ldr	r1, [pc, #20]	; (8006a90 <HAL_RCC_OscConfig+0x820>)
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <HAL_RCC_OscConfig+0x824>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60cb      	str	r3, [r1, #12]
 8006a80:	e001      	b.n	8006a86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40021000 	.word	0x40021000
 8006a94:	feeefffc 	.word	0xfeeefffc

08006a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0e7      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aac:	4b75      	ldr	r3, [pc, #468]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d910      	bls.n	8006adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aba:	4b72      	ldr	r3, [pc, #456]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f023 0207 	bic.w	r2, r3, #7
 8006ac2:	4970      	ldr	r1, [pc, #448]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aca:	4b6e      	ldr	r3, [pc, #440]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0cf      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	4b66      	ldr	r3, [pc, #408]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d908      	bls.n	8006b0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af8:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4960      	ldr	r1, [pc, #384]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04c      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d107      	bne.n	8006b2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b1e:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d121      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e0a6      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d107      	bne.n	8006b46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b36:	4b54      	ldr	r3, [pc, #336]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d115      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e09a      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b4e:	4b4e      	ldr	r3, [pc, #312]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e08e      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b5e:	4b4a      	ldr	r3, [pc, #296]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e086      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b6e:	4b46      	ldr	r3, [pc, #280]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 0203 	bic.w	r2, r3, #3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4943      	ldr	r1, [pc, #268]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b80:	f7fe fcd0 	bl	8005524 <HAL_GetTick>
 8006b84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b88:	f7fe fccc 	bl	8005524 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e06e      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9e:	4b3a      	ldr	r3, [pc, #232]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 020c 	and.w	r2, r3, #12
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d1eb      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d208      	bcs.n	8006bde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bcc:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	492b      	ldr	r1, [pc, #172]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bde:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d210      	bcs.n	8006c0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 0207 	bic.w	r2, r3, #7
 8006bf4:	4923      	ldr	r1, [pc, #140]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfc:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <HAL_RCC_ClockConfig+0x1ec>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d001      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e036      	b.n	8006c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	4918      	ldr	r1, [pc, #96]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c38:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4910      	ldr	r1, [pc, #64]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c4c:	f000 f824 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <HAL_RCC_ClockConfig+0x1f0>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	490b      	ldr	r1, [pc, #44]	; (8006c8c <HAL_RCC_ClockConfig+0x1f4>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <HAL_RCC_ClockConfig+0x1f8>)
 8006c6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_ClockConfig+0x1fc>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fc1b 	bl	80054ac <HAL_InitTick>
 8006c76:	4603      	mov	r3, r0
 8006c78:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40022000 	.word	0x40022000
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	0800b100 	.word	0x0800b100
 8006c90:	20000070 	.word	0x20000070
 8006c94:	20000068 	.word	0x20000068

08006c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ca6:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cb0:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x34>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b0c      	cmp	r3, #12
 8006cc4:	d121      	bne.n	8006d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d11e      	bne.n	8006d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ccc:	4b34      	ldr	r3, [pc, #208]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cd8:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e005      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ce8:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006cf4:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10d      	bne.n	8006d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d102      	bne.n	8006d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e004      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d101      	bne.n	8006d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d1c:	4b23      	ldr	r3, [pc, #140]	; (8006dac <HAL_RCC_GetSysClockFreq+0x114>)
 8006d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b0c      	cmp	r3, #12
 8006d24:	d134      	bne.n	8006d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d003      	beq.n	8006d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d003      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0xac>
 8006d3c:	e005      	b.n	8006d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d3e:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d40:	617b      	str	r3, [r7, #20]
      break;
 8006d42:	e005      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RCC_GetSysClockFreq+0x114>)
 8006d46:	617b      	str	r3, [r7, #20]
      break;
 8006d48:	e002      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	617b      	str	r3, [r7, #20]
      break;
 8006d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d50:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d5e:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	fb03 f202 	mul.w	r2, r3, r2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	0e5b      	lsrs	r3, r3, #25
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	3301      	adds	r3, #1
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d90:	69bb      	ldr	r3, [r7, #24]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	; 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40021000 	.word	0x40021000
 8006da4:	0800b110 	.word	0x0800b110
 8006da8:	00f42400 	.word	0x00f42400
 8006dac:	02dc6c00 	.word	0x02dc6c00

08006db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006dbc:	4b2a      	ldr	r3, [pc, #168]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006dc8:	f7ff f9ee 	bl	80061a8 <HAL_PWREx_GetVoltageRange>
 8006dcc:	6178      	str	r0, [r7, #20]
 8006dce:	e014      	b.n	8006dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dd0:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dda:	6593      	str	r3, [r2, #88]	; 0x58
 8006ddc:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006de8:	f7ff f9de 	bl	80061a8 <HAL_PWREx_GetVoltageRange>
 8006dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e00:	d10b      	bne.n	8006e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d919      	bls.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8006e0c:	d902      	bls.n	8006e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e0e:	2302      	movs	r3, #2
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e013      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e14:	2301      	movs	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	e010      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d902      	bls.n	8006e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e20:	2303      	movs	r3, #3
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	e00a      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d102      	bne.n	8006e32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e004      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b70      	cmp	r3, #112	; 0x70
 8006e36:	d101      	bne.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e38:	2301      	movs	r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f023 0207 	bic.w	r2, r3, #7
 8006e44:	4909      	ldr	r1, [pc, #36]	; (8006e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e4c:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d001      	beq.n	8006e5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40022000 	.word	0x40022000

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e78:	2300      	movs	r3, #0
 8006e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d031      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e94:	d01a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e9a:	d814      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006ea6:	4b5d      	ldr	r3, [pc, #372]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	4a5c      	ldr	r2, [pc, #368]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006eb2:	e00c      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f9f0 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eca:	e000      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ece:	7cfb      	ldrb	r3, [r7, #19]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ed4:	4b51      	ldr	r3, [pc, #324]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee2:	494e      	ldr	r1, [pc, #312]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006eea:	e001      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eec:	7cfb      	ldrb	r3, [r7, #19]
 8006eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 809e 	beq.w	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006efe:	2300      	movs	r3, #0
 8006f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f02:	4b46      	ldr	r3, [pc, #280]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00d      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f18:	4b40      	ldr	r3, [pc, #256]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1c:	4a3f      	ldr	r2, [pc, #252]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f22:	6593      	str	r3, [r2, #88]	; 0x58
 8006f24:	4b3d      	ldr	r3, [pc, #244]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f30:	2301      	movs	r3, #1
 8006f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f34:	4b3a      	ldr	r3, [pc, #232]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a39      	ldr	r2, [pc, #228]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f40:	f7fe faf0 	bl	8005524 <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f46:	e009      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f48:	f7fe faec 	bl	8005524 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d902      	bls.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	74fb      	strb	r3, [r7, #19]
        break;
 8006f5a:	e005      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f5c:	4b30      	ldr	r3, [pc, #192]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0ef      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006f68:	7cfb      	ldrb	r3, [r7, #19]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d15a      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01e      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d019      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f96:	4b21      	ldr	r3, [pc, #132]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	4a1b      	ldr	r2, [pc, #108]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fb6:	4a19      	ldr	r2, [pc, #100]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d016      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fe faac 	bl	8005524 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fce:	e00b      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd0:	f7fe faa8 	bl	8005524 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d902      	bls.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8006fe6:	e006      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ec      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006ff6:	7cfb      	ldrb	r3, [r7, #19]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	4904      	ldr	r1, [pc, #16]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007012:	e009      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	74bb      	strb	r3, [r7, #18]
 8007018:	e006      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800701a:	bf00      	nop
 800701c:	40021000 	.word	0x40021000
 8007020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007024:	7cfb      	ldrb	r3, [r7, #19]
 8007026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007028:	7c7b      	ldrb	r3, [r7, #17]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d105      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800702e:	4b9b      	ldr	r3, [pc, #620]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007032:	4a9a      	ldr	r2, [pc, #616]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007046:	4b95      	ldr	r3, [pc, #596]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704c:	f023 0203 	bic.w	r2, r3, #3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	4991      	ldr	r1, [pc, #580]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007068:	4b8c      	ldr	r3, [pc, #560]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	f023 020c 	bic.w	r2, r3, #12
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	4989      	ldr	r1, [pc, #548]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800708a:	4b84      	ldr	r3, [pc, #528]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	4980      	ldr	r1, [pc, #512]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070ac:	4b7b      	ldr	r3, [pc, #492]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	4978      	ldr	r1, [pc, #480]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ce:	4b73      	ldr	r3, [pc, #460]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	496f      	ldr	r1, [pc, #444]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070f0:	4b6a      	ldr	r3, [pc, #424]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	4967      	ldr	r1, [pc, #412]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007112:	4b62      	ldr	r3, [pc, #392]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	495e      	ldr	r1, [pc, #376]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007134:	4b59      	ldr	r3, [pc, #356]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	4956      	ldr	r1, [pc, #344]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007156:	4b51      	ldr	r3, [pc, #324]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	494d      	ldr	r1, [pc, #308]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d028      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007178:	4b48      	ldr	r3, [pc, #288]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007186:	4945      	ldr	r1, [pc, #276]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007196:	d106      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007198:	4b40      	ldr	r3, [pc, #256]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a3f      	ldr	r2, [pc, #252]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a2:	60d3      	str	r3, [r2, #12]
 80071a4:	e011      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ae:	d10c      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	2101      	movs	r1, #1
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f872 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80071c6:	7cfb      	ldrb	r3, [r7, #19]
 80071c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d028      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d6:	4b31      	ldr	r3, [pc, #196]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e4:	492d      	ldr	r1, [pc, #180]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	4a28      	ldr	r2, [pc, #160]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007200:	60d3      	str	r3, [r2, #12]
 8007202:	e011      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720c:	d10c      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f843 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007224:	7cfb      	ldrb	r3, [r7, #19]
 8007226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01c      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007234:	4b19      	ldr	r3, [pc, #100]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007242:	4916      	ldr	r1, [pc, #88]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007252:	d10c      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	2102      	movs	r1, #2
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f820 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800726a:	7cfb      	ldrb	r3, [r7, #19]
 800726c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007280:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007288:	4904      	ldr	r1, [pc, #16]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007290:	7cbb      	ldrb	r3, [r7, #18]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000

080072a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072ae:	4b74      	ldr	r3, [pc, #464]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d018      	beq.n	80072ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072ba:	4b71      	ldr	r3, [pc, #452]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0203 	and.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d10d      	bne.n	80072e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
       ||
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072d2:	4b6b      	ldr	r3, [pc, #428]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
       ||
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d047      	beq.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e044      	b.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d018      	beq.n	8007326 <RCCEx_PLLSAI1_Config+0x86>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d825      	bhi.n	8007344 <RCCEx_PLLSAI1_Config+0xa4>
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d002      	beq.n	8007302 <RCCEx_PLLSAI1_Config+0x62>
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d009      	beq.n	8007314 <RCCEx_PLLSAI1_Config+0x74>
 8007300:	e020      	b.n	8007344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007302:	4b5f      	ldr	r3, [pc, #380]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007312:	e01a      	b.n	800734a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007314:	4b5a      	ldr	r3, [pc, #360]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800731c:	2b00      	cmp	r3, #0
 800731e:	d116      	bne.n	800734e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007324:	e013      	b.n	800734e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007326:	4b56      	ldr	r3, [pc, #344]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007332:	4b53      	ldr	r3, [pc, #332]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007342:	e006      	b.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	e004      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800734a:	bf00      	nop
 800734c:	e002      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007352:	bf00      	nop
    }

    if(status == HAL_OK)
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800735a:	4b49      	ldr	r3, [pc, #292]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	3b01      	subs	r3, #1
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	430b      	orrs	r3, r1
 8007370:	4943      	ldr	r1, [pc, #268]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007372:	4313      	orrs	r3, r2
 8007374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d17c      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800737c:	4b40      	ldr	r3, [pc, #256]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a3f      	ldr	r2, [pc, #252]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007388:	f7fe f8cc 	bl	8005524 <HAL_GetTick>
 800738c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800738e:	e009      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007390:	f7fe f8c8 	bl	8005524 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d902      	bls.n	80073a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	73fb      	strb	r3, [r7, #15]
        break;
 80073a2:	e005      	b.n	80073b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073a4:	4b36      	ldr	r3, [pc, #216]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ef      	bne.n	8007390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d15f      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d110      	bne.n	80073de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073bc:	4b30      	ldr	r3, [pc, #192]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80073c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6892      	ldr	r2, [r2, #8]
 80073cc:	0211      	lsls	r1, r2, #8
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	68d2      	ldr	r2, [r2, #12]
 80073d2:	06d2      	lsls	r2, r2, #27
 80073d4:	430a      	orrs	r2, r1
 80073d6:	492a      	ldr	r1, [pc, #168]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	610b      	str	r3, [r1, #16]
 80073dc:	e027      	b.n	800742e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d112      	bne.n	800740a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073e4:	4b26      	ldr	r3, [pc, #152]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6892      	ldr	r2, [r2, #8]
 80073f4:	0211      	lsls	r1, r2, #8
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6912      	ldr	r2, [r2, #16]
 80073fa:	0852      	lsrs	r2, r2, #1
 80073fc:	3a01      	subs	r2, #1
 80073fe:	0552      	lsls	r2, r2, #21
 8007400:	430a      	orrs	r2, r1
 8007402:	491f      	ldr	r1, [pc, #124]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007404:	4313      	orrs	r3, r2
 8007406:	610b      	str	r3, [r1, #16]
 8007408:	e011      	b.n	800742e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007412:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6892      	ldr	r2, [r2, #8]
 800741a:	0211      	lsls	r1, r2, #8
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6952      	ldr	r2, [r2, #20]
 8007420:	0852      	lsrs	r2, r2, #1
 8007422:	3a01      	subs	r2, #1
 8007424:	0652      	lsls	r2, r2, #25
 8007426:	430a      	orrs	r2, r1
 8007428:	4915      	ldr	r1, [pc, #84]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a13      	ldr	r2, [pc, #76]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007438:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743a:	f7fe f873 	bl	8005524 <HAL_GetTick>
 800743e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007440:	e009      	b.n	8007456 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007442:	f7fe f86f 	bl	8005524 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d902      	bls.n	8007456 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	73fb      	strb	r3, [r7, #15]
          break;
 8007454:	e005      	b.n	8007462 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0ef      	beq.n	8007442 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007472:	4313      	orrs	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40021000 	.word	0x40021000

08007484 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d06c      	beq.n	8007570 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 ff3a 	bl	8009324 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	22ca      	movs	r2, #202	; 0xca
 80074be:	625a      	str	r2, [r3, #36]	; 0x24
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2253      	movs	r2, #83	; 0x53
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f87c 	bl	80075c6 <RTC_EnterInitMode>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d14b      	bne.n	8007570 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6899      	ldr	r1, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	68d2      	ldr	r2, [r2, #12]
 8007512:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6919      	ldr	r1, [r3, #16]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	041a      	lsls	r2, r3, #16
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f87f 	bl	800762c <RTC_ExitInitMode>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d11b      	bne.n	8007570 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0203 	bic.w	r2, r2, #3
 8007546:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69da      	ldr	r2, [r3, #28]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007590:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007592:	f7fd ffc7 	bl	8005524 <HAL_GetTick>
 8007596:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007598:	e009      	b.n	80075ae <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800759a:	f7fd ffc3 	bl	8005524 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a8:	d901      	bls.n	80075ae <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e007      	b.n	80075be <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0ee      	beq.n	800759a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d120      	bne.n	8007622 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80075ea:	f7fd ff9b 	bl	8005524 <HAL_GetTick>
 80075ee:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075f0:	e00d      	b.n	800760e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075f2:	f7fd ff97 	bl	8005524 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007600:	d905      	bls.n	800760e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2203      	movs	r2, #3
 800760a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <RTC_EnterInitMode+0x5c>
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d1e7      	bne.n	80075f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007638:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <RTC_ExitInitMode+0x78>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4a19      	ldr	r2, [pc, #100]	; (80076a4 <RTC_ExitInitMode+0x78>)
 800763e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007642:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007644:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <RTC_ExitInitMode+0x78>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10c      	bne.n	800766a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ff92 	bl	800757a <HAL_RTC_WaitForSynchro>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01e      	beq.n	800769a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2203      	movs	r2, #3
 8007660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e017      	b.n	800769a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <RTC_ExitInitMode+0x78>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	4a0d      	ldr	r2, [pc, #52]	; (80076a4 <RTC_ExitInitMode+0x78>)
 8007670:	f023 0320 	bic.w	r3, r3, #32
 8007674:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ff7f 	bl	800757a <HAL_RTC_WaitForSynchro>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2203      	movs	r2, #3
 8007686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <RTC_ExitInitMode+0x78>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <RTC_ExitInitMode+0x78>)
 8007694:	f043 0320 	orr.w	r3, r3, #32
 8007698:	6093      	str	r3, [r2, #8]
  }

  return status;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40002800 	.word	0x40002800

080076a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e049      	b.n	800774e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fe44 	bl	800935c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f000 fe2e 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e049      	b.n	80077fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fee7 	bl	8009550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f000 fdd7 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_TIM_PWM_Start_DMA+0x2c>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e03c      	b.n	80078aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d109      	bne.n	800784a <HAL_TIM_PWM_Start_DMA+0x46>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	bf0c      	ite	eq
 8007842:	2301      	moveq	r3, #1
 8007844:	2300      	movne	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	e02f      	b.n	80078aa <HAL_TIM_PWM_Start_DMA+0xa6>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d109      	bne.n	8007864 <HAL_TIM_PWM_Start_DMA+0x60>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e022      	b.n	80078aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d109      	bne.n	800787e <HAL_TIM_PWM_Start_DMA+0x7a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	bf0c      	ite	eq
 8007876:	2301      	moveq	r3, #1
 8007878:	2300      	movne	r3, #0
 800787a:	b2db      	uxtb	r3, r3
 800787c:	e015      	b.n	80078aa <HAL_TIM_PWM_Start_DMA+0xa6>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b10      	cmp	r3, #16
 8007882:	d109      	bne.n	8007898 <HAL_TIM_PWM_Start_DMA+0x94>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	bf0c      	ite	eq
 8007890:	2301      	moveq	r3, #1
 8007892:	2300      	movne	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	e008      	b.n	80078aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e18d      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e03c      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x142>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d109      	bne.n	80078e6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	bf0c      	ite	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	2300      	movne	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e02f      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x142>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d109      	bne.n	8007900 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf0c      	ite	eq
 80078f8:	2301      	moveq	r3, #1
 80078fa:	2300      	movne	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	e022      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x142>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b0c      	cmp	r3, #12
 8007904:	d109      	bne.n	800791a <HAL_TIM_PWM_Start_DMA+0x116>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	bf0c      	ite	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	2300      	movne	r3, #0
 8007916:	b2db      	uxtb	r3, r3
 8007918:	e015      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x142>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b10      	cmp	r3, #16
 800791e:	d109      	bne.n	8007934 <HAL_TIM_PWM_Start_DMA+0x130>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	bf0c      	ite	eq
 800792c:	2301      	moveq	r3, #1
 800792e:	2300      	movne	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e008      	b.n	8007946 <HAL_TIM_PWM_Start_DMA+0x142>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	bf0c      	ite	eq
 8007940:	2301      	moveq	r3, #1
 8007942:	2300      	movne	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d034      	beq.n	80079b4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_TIM_PWM_Start_DMA+0x152>
 8007950:	887b      	ldrh	r3, [r7, #2]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e139      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start_DMA+0x166>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007968:	e026      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b04      	cmp	r3, #4
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start_DMA+0x176>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007978:	e01e      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start_DMA+0x186>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007988:	e016      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b0c      	cmp	r3, #12
 800798e:	d104      	bne.n	800799a <HAL_TIM_PWM_Start_DMA+0x196>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007998:	e00e      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b10      	cmp	r3, #16
 800799e:	d104      	bne.n	80079aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a8:	e006      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b2:	e001      	b.n	80079b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e10a      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b0c      	cmp	r3, #12
 80079bc:	f200 80ae 	bhi.w	8007b1c <HAL_TIM_PWM_Start_DMA+0x318>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079fd 	.word	0x080079fd
 80079cc:	08007b1d 	.word	0x08007b1d
 80079d0:	08007b1d 	.word	0x08007b1d
 80079d4:	08007b1d 	.word	0x08007b1d
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007b1d 	.word	0x08007b1d
 80079e0:	08007b1d 	.word	0x08007b1d
 80079e4:	08007b1d 	.word	0x08007b1d
 80079e8:	08007a8d 	.word	0x08007a8d
 80079ec:	08007b1d 	.word	0x08007b1d
 80079f0:	08007b1d 	.word	0x08007b1d
 80079f4:	08007b1d 	.word	0x08007b1d
 80079f8:	08007ad5 	.word	0x08007ad5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	4a75      	ldr	r2, [pc, #468]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	4a74      	ldr	r2, [pc, #464]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	4a73      	ldr	r2, [pc, #460]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3334      	adds	r3, #52	; 0x34
 8007a20:	461a      	mov	r2, r3
 8007a22:	887b      	ldrh	r3, [r7, #2]
 8007a24:	f7fd ffce 	bl	80059c4 <HAL_DMA_Start_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0cd      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a40:	60da      	str	r2, [r3, #12]
      break;
 8007a42:	e06e      	b.n	8007b22 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	4a63      	ldr	r2, [pc, #396]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	4a62      	ldr	r2, [pc, #392]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	4a61      	ldr	r2, [pc, #388]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3338      	adds	r3, #56	; 0x38
 8007a68:	461a      	mov	r2, r3
 8007a6a:	887b      	ldrh	r3, [r7, #2]
 8007a6c:	f7fd ffaa 	bl	80059c4 <HAL_DMA_Start_IT>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e0a9      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a88:	60da      	str	r2, [r3, #12]
      break;
 8007a8a:	e04a      	b.n	8007b22 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a51      	ldr	r2, [pc, #324]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	4a50      	ldr	r2, [pc, #320]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	4a4f      	ldr	r2, [pc, #316]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007aa2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	333c      	adds	r3, #60	; 0x3c
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	887b      	ldrh	r3, [r7, #2]
 8007ab4:	f7fd ff86 	bl	80059c4 <HAL_DMA_Start_IT>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e085      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad0:	60da      	str	r2, [r3, #12]
      break;
 8007ad2:	e026      	b.n	8007b22 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	4a3f      	ldr	r2, [pc, #252]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	4a3e      	ldr	r2, [pc, #248]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	4a3d      	ldr	r2, [pc, #244]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007aea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3340      	adds	r3, #64	; 0x40
 8007af8:	461a      	mov	r2, r3
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	f7fd ff62 	bl	80059c4 <HAL_DMA_Start_IT>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e061      	b.n	8007bce <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b18:	60da      	str	r2, [r3, #12]
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d151      	bne.n	8007bcc <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 ff85 	bl	8008a40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_TIM_PWM_Start_DMA+0x350>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a28      	ldr	r2, [pc, #160]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_TIM_PWM_Start_DMA+0x350>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a27      	ldr	r2, [pc, #156]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d101      	bne.n	8007b58 <HAL_TIM_PWM_Start_DMA+0x354>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <HAL_TIM_PWM_Start_DMA+0x356>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <HAL_TIM_PWM_Start_DMA+0x388>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b80:	d004      	beq.n	8007b8c <HAL_TIM_PWM_Start_DMA+0x388>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d115      	bne.n	8007bb8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b06      	cmp	r3, #6
 8007b9c:	d015      	beq.n	8007bca <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba4:	d011      	beq.n	8007bca <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb6:	e008      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e000      	b.n	8007bcc <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08008239 	.word	0x08008239
 8007bdc:	080082e1 	.word	0x080082e1
 8007be0:	080081a7 	.word	0x080081a7
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	00010007 	.word	0x00010007

08007bf4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d855      	bhi.n	8007cb4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007cb5 	.word	0x08007cb5
 8007c18:	08007cb5 	.word	0x08007cb5
 8007c1c:	08007cb5 	.word	0x08007cb5
 8007c20:	08007c61 	.word	0x08007c61
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cb5 	.word	0x08007cb5
 8007c30:	08007c7d 	.word	0x08007c7d
 8007c34:	08007cb5 	.word	0x08007cb5
 8007c38:	08007cb5 	.word	0x08007cb5
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007c99 	.word	0x08007c99
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd ff13 	bl	8005a84 <HAL_DMA_Abort_IT>
      break;
 8007c5e:	e02c      	b.n	8007cba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd ff05 	bl	8005a84 <HAL_DMA_Abort_IT>
      break;
 8007c7a:	e01e      	b.n	8007cba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fef7 	bl	8005a84 <HAL_DMA_Abort_IT>
      break;
 8007c96:	e010      	b.n	8007cba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ca6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fee9 	bl	8005a84 <HAL_DMA_Abort_IT>
      break;
 8007cb2:	e002      	b.n	8007cba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d176      	bne.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 feb9 	bl	8008a40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a39      	ldr	r2, [pc, #228]	; (8007db8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a37      	ldr	r2, [pc, #220]	; (8007dbc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a36      	ldr	r2, [pc, #216]	; (8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d017      	beq.n	8007d26 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10f      	bne.n	8007d26 <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	f240 4344 	movw	r3, #1092	; 0x444
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10f      	bne.n	8007d56 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6a1a      	ldr	r2, [r3, #32]
 8007d3c:	f240 4344 	movw	r3, #1092	; 0x444
 8007d40:	4013      	ands	r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0201 	bic.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x172>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d64:	e023      	b.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d74:	e01b      	b.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Stop_DMA+0x192>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d84:	e013      	b.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b0c      	cmp	r3, #12
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d94:	e00b      	b.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da4:	e003      	b.n	8007dae <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400

08007dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e0ff      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b14      	cmp	r3, #20
 8007dee:	f200 80f0 	bhi.w	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007fd3 	.word	0x08007fd3
 8007e00:	08007fd3 	.word	0x08007fd3
 8007e04:	08007fd3 	.word	0x08007fd3
 8007e08:	08007e8d 	.word	0x08007e8d
 8007e0c:	08007fd3 	.word	0x08007fd3
 8007e10:	08007fd3 	.word	0x08007fd3
 8007e14:	08007fd3 	.word	0x08007fd3
 8007e18:	08007ecf 	.word	0x08007ecf
 8007e1c:	08007fd3 	.word	0x08007fd3
 8007e20:	08007fd3 	.word	0x08007fd3
 8007e24:	08007fd3 	.word	0x08007fd3
 8007e28:	08007f0f 	.word	0x08007f0f
 8007e2c:	08007fd3 	.word	0x08007fd3
 8007e30:	08007fd3 	.word	0x08007fd3
 8007e34:	08007fd3 	.word	0x08007fd3
 8007e38:	08007f51 	.word	0x08007f51
 8007e3c:	08007fd3 	.word	0x08007fd3
 8007e40:	08007fd3 	.word	0x08007fd3
 8007e44:	08007fd3 	.word	0x08007fd3
 8007e48:	08007f91 	.word	0x08007f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fadc 	bl	8008410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0208 	orr.w	r2, r2, #8
 8007e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0204 	bic.w	r2, r2, #4
 8007e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6999      	ldr	r1, [r3, #24]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	619a      	str	r2, [r3, #24]
      break;
 8007e8a:	e0a5      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fb38 	bl	8008508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	021a      	lsls	r2, r3, #8
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	619a      	str	r2, [r3, #24]
      break;
 8007ecc:	e084      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fb91 	bl	80085fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0204 	bic.w	r2, r2, #4
 8007ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69d9      	ldr	r1, [r3, #28]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	61da      	str	r2, [r3, #28]
      break;
 8007f0c:	e064      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fbe9 	bl	80086ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	021a      	lsls	r2, r3, #8
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	61da      	str	r2, [r3, #28]
      break;
 8007f4e:	e043      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fc26 	bl	80087a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0204 	bic.w	r2, r2, #4
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f8e:	e023      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fc5e 	bl	8008858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	021a      	lsls	r2, r3, #8
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fd0:	e002      	b.n	8007fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIM_ConfigClockSource+0x1c>
 8008004:	2302      	movs	r3, #2
 8008006:	e0b6      	b.n	8008176 <HAL_TIM_ConfigClockSource+0x18a>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800802a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008044:	d03e      	beq.n	80080c4 <HAL_TIM_ConfigClockSource+0xd8>
 8008046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804a:	f200 8087 	bhi.w	800815c <HAL_TIM_ConfigClockSource+0x170>
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008052:	f000 8086 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x176>
 8008056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805a:	d87f      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 800805c:	2b70      	cmp	r3, #112	; 0x70
 800805e:	d01a      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0xaa>
 8008060:	2b70      	cmp	r3, #112	; 0x70
 8008062:	d87b      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 8008064:	2b60      	cmp	r3, #96	; 0x60
 8008066:	d050      	beq.n	800810a <HAL_TIM_ConfigClockSource+0x11e>
 8008068:	2b60      	cmp	r3, #96	; 0x60
 800806a:	d877      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 800806c:	2b50      	cmp	r3, #80	; 0x50
 800806e:	d03c      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0xfe>
 8008070:	2b50      	cmp	r3, #80	; 0x50
 8008072:	d873      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d058      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x13e>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d86f      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 800807c:	2b30      	cmp	r3, #48	; 0x30
 800807e:	d064      	beq.n	800814a <HAL_TIM_ConfigClockSource+0x15e>
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	d86b      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 8008084:	2b20      	cmp	r3, #32
 8008086:	d060      	beq.n	800814a <HAL_TIM_ConfigClockSource+0x15e>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d867      	bhi.n	800815c <HAL_TIM_ConfigClockSource+0x170>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d05c      	beq.n	800814a <HAL_TIM_ConfigClockSource+0x15e>
 8008090:	2b10      	cmp	r3, #16
 8008092:	d05a      	beq.n	800814a <HAL_TIM_ConfigClockSource+0x15e>
 8008094:	e062      	b.n	800815c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	6899      	ldr	r1, [r3, #8]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f000 fcab 	bl	8008a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	609a      	str	r2, [r3, #8]
      break;
 80080c2:	e04f      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	6899      	ldr	r1, [r3, #8]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f000 fc94 	bl	8008a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080e6:	609a      	str	r2, [r3, #8]
      break;
 80080e8:	e03c      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f000 fc08 	bl	800890c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2150      	movs	r1, #80	; 0x50
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fc61 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 8008108:	e02c      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6859      	ldr	r1, [r3, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	461a      	mov	r2, r3
 8008118:	f000 fc27 	bl	800896a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2160      	movs	r1, #96	; 0x60
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fc51 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 8008128:	e01c      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	6859      	ldr	r1, [r3, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	461a      	mov	r2, r3
 8008138:	f000 fbe8 	bl	800890c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2140      	movs	r1, #64	; 0x40
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fc41 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 8008148:	e00c      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f000 fc38 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 800815a:	e003      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e000      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d107      	bne.n	80081ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081cc:	e02a      	b.n	8008224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d107      	bne.n	80081e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2202      	movs	r2, #2
 80081dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081e6:	e01d      	b.n	8008224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d107      	bne.n	8008202 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2204      	movs	r2, #4
 80081f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008200:	e010      	b.n	8008224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	d107      	bne.n	800821c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2208      	movs	r2, #8
 8008210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800821a:	e003      	b.n	8008224 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff ffb4 	bl	8008192 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d10b      	bne.n	8008268 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d136      	bne.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008266:	e031      	b.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	429a      	cmp	r2, r3
 8008270:	d10b      	bne.n	800828a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2202      	movs	r2, #2
 8008276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d125      	bne.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008288:	e020      	b.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d10b      	bne.n	80082ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2204      	movs	r2, #4
 8008298:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082aa:	e00f      	b.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d10a      	bne.n	80082cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2208      	movs	r2, #8
 80082ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 faeb 	bl	80098a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d103      	bne.n	8008300 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	771a      	strb	r2, [r3, #28]
 80082fe:	e019      	b.n	8008334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d103      	bne.n	8008312 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2202      	movs	r2, #2
 800830e:	771a      	strb	r2, [r3, #28]
 8008310:	e010      	b.n	8008334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d103      	bne.n	8008324 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2204      	movs	r2, #4
 8008320:	771a      	strb	r2, [r3, #28]
 8008322:	e007      	b.n	8008334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d102      	bne.n	8008334 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2208      	movs	r2, #8
 8008332:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff ff22 	bl	800817e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	771a      	strb	r2, [r3, #28]
}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a2a      	ldr	r2, [pc, #168]	; (8008404 <TIM_Base_SetConfig+0xbc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0x20>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d108      	bne.n	800837a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a21      	ldr	r2, [pc, #132]	; (8008404 <TIM_Base_SetConfig+0xbc>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00b      	beq.n	800839a <TIM_Base_SetConfig+0x52>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008388:	d007      	beq.n	800839a <TIM_Base_SetConfig+0x52>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <TIM_Base_SetConfig+0xc0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d003      	beq.n	800839a <TIM_Base_SetConfig+0x52>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <TIM_Base_SetConfig+0xc4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d108      	bne.n	80083ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <TIM_Base_SetConfig+0xbc>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_Base_SetConfig+0xa0>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a0b      	ldr	r2, [pc, #44]	; (8008408 <TIM_Base_SetConfig+0xc0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_Base_SetConfig+0xa0>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <TIM_Base_SetConfig+0xc4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d103      	bne.n	80083f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	615a      	str	r2, [r3, #20]
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400

08008410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 0201 	bic.w	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f023 0302 	bic.w	r3, r3, #2
 800845c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a24      	ldr	r2, [pc, #144]	; (80084fc <TIM_OC1_SetConfig+0xec>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d007      	beq.n	8008480 <TIM_OC1_SetConfig+0x70>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a23      	ldr	r2, [pc, #140]	; (8008500 <TIM_OC1_SetConfig+0xf0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d003      	beq.n	8008480 <TIM_OC1_SetConfig+0x70>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a22      	ldr	r2, [pc, #136]	; (8008504 <TIM_OC1_SetConfig+0xf4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10c      	bne.n	800849a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f023 0308 	bic.w	r3, r3, #8
 8008486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0304 	bic.w	r3, r3, #4
 8008498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a17      	ldr	r2, [pc, #92]	; (80084fc <TIM_OC1_SetConfig+0xec>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d007      	beq.n	80084b2 <TIM_OC1_SetConfig+0xa2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <TIM_OC1_SetConfig+0xf0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d003      	beq.n	80084b2 <TIM_OC1_SetConfig+0xa2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <TIM_OC1_SetConfig+0xf4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d111      	bne.n	80084d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	621a      	str	r2, [r3, #32]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	40012c00 	.word	0x40012c00
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400

08008508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0210 	bic.w	r2, r3, #16
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f023 0320 	bic.w	r3, r3, #32
 8008556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <TIM_OC2_SetConfig+0xe8>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d10d      	bne.n	8008588 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008586:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a19      	ldr	r2, [pc, #100]	; (80085f0 <TIM_OC2_SetConfig+0xe8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_OC2_SetConfig+0x98>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <TIM_OC2_SetConfig+0xec>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC2_SetConfig+0x98>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <TIM_OC2_SetConfig+0xf0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d113      	bne.n	80085c8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400

080085fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <TIM_OC3_SetConfig+0xe4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d10d      	bne.n	800867a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <TIM_OC3_SetConfig+0xe4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <TIM_OC3_SetConfig+0x96>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <TIM_OC3_SetConfig+0xe8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_OC3_SetConfig+0x96>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <TIM_OC3_SetConfig+0xec>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d113      	bne.n	80086ba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	621a      	str	r2, [r3, #32]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	40014000 	.word	0x40014000
 80086e8:	40014400 	.word	0x40014400

080086ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800873a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	031b      	lsls	r3, r3, #12
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a14      	ldr	r2, [pc, #80]	; (800879c <TIM_OC4_SetConfig+0xb0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC4_SetConfig+0x74>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <TIM_OC4_SetConfig+0xb4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC4_SetConfig+0x74>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a12      	ldr	r2, [pc, #72]	; (80087a4 <TIM_OC4_SetConfig+0xb8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d109      	bne.n	8008774 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	019b      	lsls	r3, r3, #6
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400

080087a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	041b      	lsls	r3, r3, #16
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a13      	ldr	r2, [pc, #76]	; (800884c <TIM_OC5_SetConfig+0xa4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d007      	beq.n	8008812 <TIM_OC5_SetConfig+0x6a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a12      	ldr	r2, [pc, #72]	; (8008850 <TIM_OC5_SetConfig+0xa8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d003      	beq.n	8008812 <TIM_OC5_SetConfig+0x6a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a11      	ldr	r2, [pc, #68]	; (8008854 <TIM_OC5_SetConfig+0xac>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d109      	bne.n	8008826 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40012c00 	.word	0x40012c00
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400

08008858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800889e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	051b      	lsls	r3, r3, #20
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a14      	ldr	r2, [pc, #80]	; (8008900 <TIM_OC6_SetConfig+0xa8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d007      	beq.n	80088c4 <TIM_OC6_SetConfig+0x6c>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a13      	ldr	r2, [pc, #76]	; (8008904 <TIM_OC6_SetConfig+0xac>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d003      	beq.n	80088c4 <TIM_OC6_SetConfig+0x6c>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a12      	ldr	r2, [pc, #72]	; (8008908 <TIM_OC6_SetConfig+0xb0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d109      	bne.n	80088d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	029b      	lsls	r3, r3, #10
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400

0800890c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f023 0201 	bic.w	r2, r3, #1
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 030a 	bic.w	r3, r3, #10
 8008948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	621a      	str	r2, [r3, #32]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800896a:	b480      	push	{r7}
 800896c:	b087      	sub	sp, #28
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0210 	bic.w	r2, r3, #16
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	031b      	lsls	r3, r3, #12
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	f043 0307 	orr.w	r3, r3, #7
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	609a      	str	r2, [r3, #8]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	021a      	lsls	r2, r3, #8
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	609a      	str	r2, [r3, #8]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	2201      	movs	r2, #1
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	43db      	mvns	r3, r3
 8008a62:	401a      	ands	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1a      	ldr	r2, [r3, #32]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 031f 	and.w	r3, r3, #31
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	fa01 f303 	lsl.w	r3, r1, r3
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e04f      	b.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a21      	ldr	r2, [pc, #132]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d108      	bne.n	8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0c:	d004      	beq.n	8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a10      	ldr	r2, [pc, #64]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d10c      	bne.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40014000 	.word	0x40014000

08008b58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e060      	b.n	8008c36 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	041b      	lsls	r3, r3, #16
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a14      	ldr	r2, [pc, #80]	; (8008c44 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d115      	bne.n	8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	051b      	lsls	r3, r3, #20
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40012c00 	.word	0x40012c00

08008c48 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c4e:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <board_init_common_rtc_init+0x4c>)
 8008c50:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c52:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008c58:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c5a:	227f      	movs	r2, #127	; 0x7f
 8008c5c:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c60:	22ff      	movs	r2, #255	; 0xff
 8008c62:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c64:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8008c7c:	4804      	ldr	r0, [pc, #16]	; (8008c90 <board_init_common_rtc_init+0x48>)
 8008c7e:	f7fe fc01 	bl	8007484 <HAL_RTC_Init>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <board_init_common_rtc_init+0x44>
 8008c88:	f000 fa4b 	bl	8009122 <Error_Handler>
}
 8008c8c:	bf00      	nop
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20001dec 	.word	0x20001dec
 8008c94:	40002800 	.word	0x40002800

08008c98 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b0ae      	sub	sp, #184	; 0xb8
 8008c9c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008ca2:	2244      	movs	r2, #68	; 0x44
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 f936 	bl	8009f18 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cbc:	1d3b      	adds	r3, r7, #4
 8008cbe:	225c      	movs	r2, #92	; 0x5c
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f928 	bl	8009f18 <memset>

    HAL_PWR_EnableBkUpAccess();
 8008cc8:	f7fd f9ee 	bl	80060a8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008ccc:	4b25      	ldr	r3, [pc, #148]	; (8008d64 <SystemClock_Config+0xcc>)
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd2:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <SystemClock_Config+0xcc>)
 8008cd4:	f023 0318 	bic.w	r3, r3, #24
 8008cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008cdc:	2305      	movs	r3, #5
 8008cde:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ce4:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8008cf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fabb 	bl	8006270 <HAL_RCC_OscConfig>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d000      	beq.n	8008d02 <SystemClock_Config+0x6a>
 8008d00:	e7fe      	b.n	8008d00 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d02:	230f      	movs	r3, #15
 8008d04:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008d06:	2302      	movs	r3, #2
 8008d08:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d12:	2300      	movs	r3, #0
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8008d16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fd febb 	bl	8006a98 <HAL_RCC_ClockConfig>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d000      	beq.n	8008d2a <SystemClock_Config+0x92>
 8008d28:	e7fe      	b.n	8008d28 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d2e:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe f899 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <SystemClock_Config+0xb0>
 8008d44:	f000 f9ed 	bl	8009122 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008d48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d4c:	f7fd fa3a 	bl	80061c4 <HAL_PWREx_ControlVoltageScaling>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <SystemClock_Config+0xc2>
 8008d56:	f000 f9e4 	bl	8009122 <Error_Handler>
}
 8008d5a:	bf00      	nop
 8008d5c:	37b8      	adds	r7, #184	; 0xb8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	40021000 	.word	0x40021000

08008d68 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b09e      	sub	sp, #120	; 0x78
 8008d6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]
 8008d78:	609a      	str	r2, [r3, #8]
 8008d7a:	60da      	str	r2, [r3, #12]
 8008d7c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	609a      	str	r2, [r3, #8]
 8008d8a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	605a      	str	r2, [r3, #4]
 8008d96:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	611a      	str	r2, [r3, #16]
 8008da8:	615a      	str	r2, [r3, #20]
 8008daa:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008dac:	463b      	mov	r3, r7
 8008dae:	222c      	movs	r2, #44	; 0x2c
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 f8b0 	bl	8009f18 <memset>
    g_tim1_handle.Instance = TIM1;
 8008db8:	4b5c      	ldr	r3, [pc, #368]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dba:	4a5d      	ldr	r2, [pc, #372]	; (8008f30 <board_init_common_timer_init+0x1c8>)
 8008dbc:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8008dbe:	4b5b      	ldr	r3, [pc, #364]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dc4:	4b59      	ldr	r3, [pc, #356]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8008dca:	4b58      	ldr	r3, [pc, #352]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dcc:	223b      	movs	r2, #59	; 0x3b
 8008dce:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dd0:	4b56      	ldr	r3, [pc, #344]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8008dd6:	4b55      	ldr	r3, [pc, #340]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ddc:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008de2:	4852      	ldr	r0, [pc, #328]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008de4:	f7fe fc60 	bl	80076a8 <HAL_TIM_Base_Init>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <board_init_common_timer_init+0x8a>
 8008dee:	f000 f998 	bl	8009122 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8008df8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	484b      	ldr	r0, [pc, #300]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e00:	f7ff f8f4 	bl	8007fec <HAL_TIM_ConfigClockSource>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <board_init_common_timer_init+0xa6>
 8008e0a:	f000 f98a 	bl	8009122 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008e0e:	4847      	ldr	r0, [pc, #284]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e10:	f7fe fca1 	bl	8007756 <HAL_TIM_PWM_Init>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <board_init_common_timer_init+0xb6>
 8008e1a:	f000 f982 	bl	8009122 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008e22:	2300      	movs	r3, #0
 8008e24:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008e2e:	4619      	mov	r1, r3
 8008e30:	483e      	ldr	r0, [pc, #248]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e32:	f7ff fe2b 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <board_init_common_timer_init+0xd8>
 8008e3c:	f000 f971 	bl	8009122 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e40:	2360      	movs	r3, #96	; 0x60
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e54:	2300      	movs	r3, #0
 8008e56:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e60:	2200      	movs	r2, #0
 8008e62:	4619      	mov	r1, r3
 8008e64:	4831      	ldr	r0, [pc, #196]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e66:	f7fe ffad 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <board_init_common_timer_init+0x10c>
 8008e70:	f000 f957 	bl	8009122 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8008e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e78:	2204      	movs	r2, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	482b      	ldr	r0, [pc, #172]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e7e:	f7fe ffa1 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <board_init_common_timer_init+0x124>
 8008e88:	f000 f94b 	bl	8009122 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8008e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e90:	2208      	movs	r2, #8
 8008e92:	4619      	mov	r1, r3
 8008e94:	4825      	ldr	r0, [pc, #148]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008e96:	f7fe ff95 	bl	8007dc4 <HAL_TIM_PWM_ConfigChannel>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <board_init_common_timer_init+0x13c>
 8008ea0:	f000 f93f 	bl	8009122 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ebc:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eca:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4814      	ldr	r0, [pc, #80]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008eda:	f7ff fe3d 	bl	8008b58 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <board_init_common_timer_init+0x180>
 8008ee4:	f000 f91d 	bl	8009122 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4810      	ldr	r0, [pc, #64]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008eec:	f7fe fe82 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8008ef0:	2104      	movs	r1, #4
 8008ef2:	480e      	ldr	r0, [pc, #56]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008ef4:	f7fe fe7e 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8008ef8:	2108      	movs	r1, #8
 8008efa:	480c      	ldr	r0, [pc, #48]	; (8008f2c <board_init_common_timer_init+0x1c4>)
 8008efc:	f7fe fe7a 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8008f00:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008f04:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f06:	2302      	movs	r3, #2
 8008f08:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008f12:	2301      	movs	r3, #1
 8008f14:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f20:	f7fc ff18 	bl	8005d54 <HAL_GPIO_Init>
}
 8008f24:	bf00      	nop
 8008f26:	3778      	adds	r7, #120	; 0x78
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20001e10 	.word	0x20001e10
 8008f30:	40012c00 	.word	0x40012c00

08008f34 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008f38:	4b30      	ldr	r3, [pc, #192]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008f3e:	4b2f      	ldr	r3, [pc, #188]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f40:	2208      	movs	r2, #8
 8008f42:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008f44:	4b2d      	ldr	r3, [pc, #180]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f46:	2217      	movs	r2, #23
 8008f48:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008f4a:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f4c:	2228      	movs	r2, #40	; 0x28
 8008f4e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8008f50:	2200      	movs	r2, #0
 8008f52:	2118      	movs	r1, #24
 8008f54:	2006      	movs	r0, #6
 8008f56:	f7fc fc38 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008f5a:	2006      	movs	r0, #6
 8008f5c:	f7fc fc51 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8008f60:	2200      	movs	r2, #0
 8008f62:	2118      	movs	r1, #24
 8008f64:	2008      	movs	r0, #8
 8008f66:	f7fc fc30 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008f6a:	2008      	movs	r0, #8
 8008f6c:	f7fc fc49 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8008f70:	2200      	movs	r2, #0
 8008f72:	2118      	movs	r1, #24
 8008f74:	2017      	movs	r0, #23
 8008f76:	f7fc fc28 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f7a:	2017      	movs	r0, #23
 8008f7c:	f7fc fc41 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8008f80:	2200      	movs	r2, #0
 8008f82:	2118      	movs	r1, #24
 8008f84:	2028      	movs	r0, #40	; 0x28
 8008f86:	f7fc fc20 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f8a:	2028      	movs	r0, #40	; 0x28
 8008f8c:	f7fc fc39 	bl	8005802 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008f90:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f92:	2206      	movs	r2, #6
 8008f94:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008f96:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f98:	2208      	movs	r2, #8
 8008f9a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008f9c:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f9e:	2217      	movs	r2, #23
 8008fa0:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008fa2:	4b16      	ldr	r3, [pc, #88]	; (8008ffc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008fa4:	2228      	movs	r2, #40	; 0x28
 8008fa6:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2100      	movs	r1, #0
 8008fac:	200c      	movs	r0, #12
 8008fae:	f7fc fc0c 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008fb2:	200c      	movs	r0, #12
 8008fb4:	f7fc fc25 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2100      	movs	r1, #0
 8008fbc:	200d      	movs	r0, #13
 8008fbe:	f7fc fc04 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008fc2:	200d      	movs	r0, #13
 8008fc4:	f7fc fc1d 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	200f      	movs	r0, #15
 8008fce:	f7fc fbfc 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008fd2:	200f      	movs	r0, #15
 8008fd4:	f7fc fc15 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2010      	movs	r0, #16
 8008fde:	f7fc fbf4 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008fe2:	2010      	movs	r0, #16
 8008fe4:	f7fc fc0d 	bl	8005802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	2011      	movs	r0, #17
 8008fee:	f7fc fbec 	bl	80057ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008ff2:	2011      	movs	r0, #17
 8008ff4:	f7fc fc05 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8008ff8:	bf00      	nop
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	40010400 	.word	0x40010400

08009000 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009006:	1d3b      	adds	r3, r7, #4
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	605a      	str	r2, [r3, #4]
 800900e:	609a      	str	r2, [r3, #8]
 8009010:	60da      	str	r2, [r3, #12]
 8009012:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009014:	2305      	movs	r3, #5
 8009016:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009018:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800901c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800901e:	2301      	movs	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009022:	1d3b      	adds	r3, r7, #4
 8009024:	4619      	mov	r1, r3
 8009026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800902a:	f7fc fe93 	bl	8005d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800902e:	f242 0320 	movw	r3, #8224	; 0x2020
 8009032:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009034:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009038:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800903a:	2301      	movs	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800903e:	1d3b      	adds	r3, r7, #4
 8009040:	4619      	mov	r1, r3
 8009042:	4804      	ldr	r0, [pc, #16]	; (8009054 <board_init_common_setup_wakeups+0x54>)
 8009044:	f7fc fe86 	bl	8005d54 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8009048:	f7ff ff74 	bl	8008f34 <board_init_common_nvic_setup_interrupts>
}
 800904c:	bf00      	nop
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	48000800 	.word	0x48000800

08009058 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800905e:	4b21      	ldr	r3, [pc, #132]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009062:	4a20      	ldr	r2, [pc, #128]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800906a:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <board_init_port_wakeup+0x8c>)
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009076:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <board_init_port_wakeup+0x8c>)
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009082:	4b18      	ldr	r3, [pc, #96]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800908e:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009092:	4a14      	ldr	r2, [pc, #80]	; (80090e4 <board_init_port_wakeup+0x8c>)
 8009094:	f043 0304 	orr.w	r3, r3, #4
 8009098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800909a:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <board_init_port_wakeup+0x8c>)
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80090a6:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	4a0e      	ldr	r2, [pc, #56]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c2:	4a08      	ldr	r2, [pc, #32]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	6493      	str	r3, [r2, #72]	; 0x48
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <board_init_port_wakeup+0x8c>)
 80090cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40021000 	.word	0x40021000

080090e8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
    srand(time(0));
 80090ec:	2000      	movs	r0, #0
 80090ee:	f001 f877 	bl	800a1e0 <time>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4613      	mov	r3, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fff5 	bl	800a0e8 <srand>
    HAL_Init();
 80090fe:	f7fc f9bd 	bl	800547c <HAL_Init>
    SystemClock_Config();
 8009102:	f7ff fdc9 	bl	8008c98 <SystemClock_Config>

    board_init_port_wakeup();
 8009106:	f7ff ffa7 	bl	8009058 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800910a:	f7ff ff79 	bl	8009000 <board_init_common_setup_wakeups>
    board_init_specific();
 800910e:	f000 f80d 	bl	800912c <board_init_specific>

    board_init_common_timer_init();
 8009112:	f7ff fe29 	bl	8008d68 <board_init_common_timer_init>

    ws2812b_init();
 8009116:	f7f8 fd21 	bl	8001b5c <ws2812b_init>

    board_init_common_rtc_init();
 800911a:	f7ff fd95 	bl	8008c48 <board_init_common_rtc_init>
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}

08009122 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009122:	b480      	push	{r7}
 8009124:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009126:	b672      	cpsid	i
}
 8009128:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800912a:	e7fe      	b.n	800912a <Error_Handler+0x8>

0800912c <board_init_specific>:
}
#endif


void board_init_specific(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	60da      	str	r2, [r3, #12]
 800913e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8009140:	2301      	movs	r3, #1
 8009142:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009144:	2301      	movs	r3, #1
 8009146:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800914c:	1d3b      	adds	r3, r7, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4844      	ldr	r0, [pc, #272]	; (8009264 <board_init_specific+0x138>)
 8009152:	f7fc fdff 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8009156:	2201      	movs	r2, #1
 8009158:	2101      	movs	r1, #1
 800915a:	4842      	ldr	r0, [pc, #264]	; (8009264 <board_init_specific+0x138>)
 800915c:	f7fc ff74 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009164:	2301      	movs	r3, #1
 8009166:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800916c:	1d3b      	adds	r3, r7, #4
 800916e:	4619      	mov	r1, r3
 8009170:	483d      	ldr	r0, [pc, #244]	; (8009268 <board_init_specific+0x13c>)
 8009172:	f7fc fdef 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8009176:	2200      	movs	r2, #0
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	483b      	ldr	r0, [pc, #236]	; (8009268 <board_init_specific+0x13c>)
 800917c:	f7fc ff64 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009184:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009186:	2301      	movs	r3, #1
 8009188:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4835      	ldr	r0, [pc, #212]	; (8009268 <board_init_specific+0x13c>)
 8009194:	f7fc fdde 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009198:	2201      	movs	r2, #1
 800919a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800919e:	4832      	ldr	r0, [pc, #200]	; (8009268 <board_init_specific+0x13c>)
 80091a0:	f7fc ff52 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 80091a4:	23e0      	movs	r3, #224	; 0xe0
 80091a6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091a8:	2301      	movs	r3, #1
 80091aa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80091b0:	1d3b      	adds	r3, r7, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091b8:	f7fc fdcc 	bl	8005d54 <HAL_GPIO_Init>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 80091bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80091c0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80091ca:	1d3b      	adds	r3, r7, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4825      	ldr	r0, [pc, #148]	; (8009264 <board_init_specific+0x138>)
 80091d0:	f7fc fdc0 	bl	8005d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_BLUE_LED;
 80091d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091da:	2301      	movs	r3, #1
 80091dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	4619      	mov	r1, r3
 80091e6:	481f      	ldr	r0, [pc, #124]	; (8009264 <board_init_specific+0x138>)
 80091e8:	f7fc fdb4 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_RESET);
 80091ec:	2200      	movs	r2, #0
 80091ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091f2:	481c      	ldr	r0, [pc, #112]	; (8009264 <board_init_specific+0x138>)
 80091f4:	f7fc ff28 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_ORANGE_LED;
 80091f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091fe:	2301      	movs	r3, #1
 8009200:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009206:	1d3b      	adds	r3, r7, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4816      	ldr	r0, [pc, #88]	; (8009264 <board_init_specific+0x138>)
 800920c:	f7fc fda2 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_RESET);
 8009210:	2200      	movs	r2, #0
 8009212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009216:	4813      	ldr	r0, [pc, #76]	; (8009264 <board_init_specific+0x138>)
 8009218:	f7fc ff16 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800921c:	2304      	movs	r3, #4
 800921e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009220:	2301      	movs	r3, #1
 8009222:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009228:	1d3b      	adds	r3, r7, #4
 800922a:	4619      	mov	r1, r3
 800922c:	480d      	ldr	r0, [pc, #52]	; (8009264 <board_init_specific+0x138>)
 800922e:	f7fc fd91 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_GREEN_LED, GPIO_PIN_RESET);
 8009232:	2200      	movs	r2, #0
 8009234:	2104      	movs	r1, #4
 8009236:	480b      	ldr	r0, [pc, #44]	; (8009264 <board_init_specific+0x138>)
 8009238:	f7fc ff06 	bl	8006048 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800923c:	2308      	movs	r3, #8
 800923e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009240:	2301      	movs	r3, #1
 8009242:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009248:	1d3b      	adds	r3, r7, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4805      	ldr	r0, [pc, #20]	; (8009264 <board_init_specific+0x138>)
 800924e:	f7fc fd81 	bl	8005d54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_RED_LED, GPIO_PIN_RESET);
 8009252:	2200      	movs	r2, #0
 8009254:	2108      	movs	r1, #8
 8009256:	4803      	ldr	r0, [pc, #12]	; (8009264 <board_init_specific+0x138>)
 8009258:	f7fc fef6 	bl	8006048 <HAL_GPIO_WritePin>

#if defined(BOARD_SPUD_GLO_V4P2)
    board_init_peripheral_setup();
#endif
}
 800925c:	bf00      	nop
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	48000400 	.word	0x48000400
 8009268:	48000800 	.word	0x48000800

0800926c <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009270:	4a0d      	ldr	r2, [pc, #52]	; (80092a8 <HAL_Set_DMA_Callbacks+0x3c>)
 8009272:	2100      	movs	r1, #0
 8009274:	480d      	ldr	r0, [pc, #52]	; (80092ac <HAL_Set_DMA_Callbacks+0x40>)
 8009276:	f7fc fcf5 	bl	8005c64 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800927a:	4a0b      	ldr	r2, [pc, #44]	; (80092a8 <HAL_Set_DMA_Callbacks+0x3c>)
 800927c:	2100      	movs	r1, #0
 800927e:	480c      	ldr	r0, [pc, #48]	; (80092b0 <HAL_Set_DMA_Callbacks+0x44>)
 8009280:	f7fc fcf0 	bl	8005c64 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009284:	4a08      	ldr	r2, [pc, #32]	; (80092a8 <HAL_Set_DMA_Callbacks+0x3c>)
 8009286:	2100      	movs	r1, #0
 8009288:	480a      	ldr	r0, [pc, #40]	; (80092b4 <HAL_Set_DMA_Callbacks+0x48>)
 800928a:	f7fc fceb 	bl	8005c64 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800928e:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <HAL_Set_DMA_Callbacks+0x3c>)
 8009290:	2100      	movs	r1, #0
 8009292:	4809      	ldr	r0, [pc, #36]	; (80092b8 <HAL_Set_DMA_Callbacks+0x4c>)
 8009294:	f7fc fce6 	bl	8005c64 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009298:	4a03      	ldr	r2, [pc, #12]	; (80092a8 <HAL_Set_DMA_Callbacks+0x3c>)
 800929a:	2100      	movs	r1, #0
 800929c:	4807      	ldr	r0, [pc, #28]	; (80092bc <HAL_Set_DMA_Callbacks+0x50>)
 800929e:	f7fc fce1 	bl	8005c64 <HAL_DMA_RegisterCallback>
}
 80092a2:	bf00      	nop
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	0800989f 	.word	0x0800989f
 80092ac:	20001c84 	.word	0x20001c84
 80092b0:	20001ccc 	.word	0x20001ccc
 80092b4:	20001d14 	.word	0x20001d14
 80092b8:	20001d5c 	.word	0x20001d5c
 80092bc:	20001da4 	.word	0x20001da4

080092c0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <HAL_MspInit+0x60>)
 80092d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d4:	4a12      	ldr	r2, [pc, #72]	; (8009320 <HAL_MspInit+0x60>)
 80092d6:	f043 0301 	orr.w	r3, r3, #1
 80092da:	6613      	str	r3, [r2, #96]	; 0x60
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <HAL_MspInit+0x60>)
 80092de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	607b      	str	r3, [r7, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <HAL_MspInit+0x60>)
 80092ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ec:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <HAL_MspInit+0x60>)
 80092ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f2:	6593      	str	r3, [r2, #88]	; 0x58
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <HAL_MspInit+0x60>)
 80092f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009300:	2300      	movs	r3, #0
 8009302:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4618      	mov	r0, r3
 800930e:	f7fc fedb 	bl	80060c8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009312:	f7fc ff39 	bl	8006188 <HAL_PWR_EnablePVD>
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40021000 	.word	0x40021000

08009324 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a08      	ldr	r2, [pc, #32]	; (8009354 <HAL_RTC_MspInit+0x30>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d107      	bne.n	8009346 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009336:	4b08      	ldr	r3, [pc, #32]	; (8009358 <HAL_RTC_MspInit+0x34>)
 8009338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933c:	4a06      	ldr	r2, [pc, #24]	; (8009358 <HAL_RTC_MspInit+0x34>)
 800933e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40002800 	.word	0x40002800
 8009358:	40021000 	.word	0x40021000

0800935c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a6e      	ldr	r2, [pc, #440]	; (8009524 <HAL_TIM_Base_MspInit+0x1c8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	f040 8091 	bne.w	8009492 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009370:	4b6d      	ldr	r3, [pc, #436]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 8009372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009374:	4a6c      	ldr	r2, [pc, #432]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 8009376:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800937a:	6613      	str	r3, [r2, #96]	; 0x60
 800937c:	4b6a      	ldr	r3, [pc, #424]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 800937e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009388:	4b68      	ldr	r3, [pc, #416]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 800938a:	4a69      	ldr	r2, [pc, #420]	; (8009530 <HAL_TIM_Base_MspInit+0x1d4>)
 800938c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800938e:	4b67      	ldr	r3, [pc, #412]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 8009390:	2207      	movs	r2, #7
 8009392:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009394:	4b65      	ldr	r3, [pc, #404]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 8009396:	2210      	movs	r2, #16
 8009398:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800939a:	4b64      	ldr	r3, [pc, #400]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 800939c:	2200      	movs	r2, #0
 800939e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80093a0:	4b62      	ldr	r3, [pc, #392]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80093a6:	4b61      	ldr	r3, [pc, #388]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093ac:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80093ae:	4b5f      	ldr	r3, [pc, #380]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093b4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80093b6:	4b5d      	ldr	r3, [pc, #372]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80093bc:	4b5b      	ldr	r3, [pc, #364]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80093c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80093c4:	4859      	ldr	r0, [pc, #356]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093c6:	f7fc fa45 	bl	8005854 <HAL_DMA_Init>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 80093d0:	f7ff fea7 	bl	8009122 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a55      	ldr	r2, [pc, #340]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24
 80093da:	4a54      	ldr	r2, [pc, #336]	; (800952c <HAL_TIM_Base_MspInit+0x1d0>)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80093e0:	4b54      	ldr	r3, [pc, #336]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 80093e2:	4a55      	ldr	r2, [pc, #340]	; (8009538 <HAL_TIM_Base_MspInit+0x1dc>)
 80093e4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 80093e6:	4b53      	ldr	r3, [pc, #332]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 80093e8:	2207      	movs	r2, #7
 80093ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093ec:	4b51      	ldr	r3, [pc, #324]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 80093ee:	2210      	movs	r2, #16
 80093f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80093f2:	4b50      	ldr	r3, [pc, #320]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80093f8:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 80093fa:	2280      	movs	r2, #128	; 0x80
 80093fc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80093fe:	4b4d      	ldr	r3, [pc, #308]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009404:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009406:	4b4b      	ldr	r3, [pc, #300]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800940c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800940e:	4b49      	ldr	r3, [pc, #292]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009410:	2200      	movs	r2, #0
 8009412:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009414:	4b47      	ldr	r3, [pc, #284]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009416:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800941a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800941c:	4845      	ldr	r0, [pc, #276]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 800941e:	f7fc fa19 	bl	8005854 <HAL_DMA_Init>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009428:	f7ff fe7b 	bl	8009122 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a41      	ldr	r2, [pc, #260]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009430:	629a      	str	r2, [r3, #40]	; 0x28
 8009432:	4a40      	ldr	r2, [pc, #256]	; (8009534 <HAL_TIM_Base_MspInit+0x1d8>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009438:	4b40      	ldr	r3, [pc, #256]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 800943a:	4a41      	ldr	r2, [pc, #260]	; (8009540 <HAL_TIM_Base_MspInit+0x1e4>)
 800943c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800943e:	4b3f      	ldr	r3, [pc, #252]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009440:	2207      	movs	r2, #7
 8009442:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009444:	4b3d      	ldr	r3, [pc, #244]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009446:	2210      	movs	r2, #16
 8009448:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800944a:	4b3c      	ldr	r3, [pc, #240]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 800944c:	2200      	movs	r2, #0
 800944e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009450:	4b3a      	ldr	r3, [pc, #232]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009452:	2280      	movs	r2, #128	; 0x80
 8009454:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800945c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800945e:	4b37      	ldr	r3, [pc, #220]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009464:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009466:	4b35      	ldr	r3, [pc, #212]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009468:	2200      	movs	r2, #0
 800946a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800946c:	4b33      	ldr	r3, [pc, #204]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 800946e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8009474:	4831      	ldr	r0, [pc, #196]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009476:	f7fc f9ed 	bl	8005854 <HAL_DMA_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009480:	f7ff fe4f 	bl	8009122 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a2d      	ldr	r2, [pc, #180]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 8009488:	62da      	str	r2, [r3, #44]	; 0x2c
 800948a:	4a2c      	ldr	r2, [pc, #176]	; (800953c <HAL_TIM_Base_MspInit+0x1e0>)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6293      	str	r3, [r2, #40]	; 0x28
 8009490:	e041      	b.n	8009516 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a2b      	ldr	r2, [pc, #172]	; (8009544 <HAL_TIM_Base_MspInit+0x1e8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d13c      	bne.n	8009516 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800949c:	4b22      	ldr	r3, [pc, #136]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 800949e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a0:	4a21      	ldr	r2, [pc, #132]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 80094a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094a6:	6613      	str	r3, [r2, #96]	; 0x60
 80094a8:	4b1f      	ldr	r3, [pc, #124]	; (8009528 <HAL_TIM_Base_MspInit+0x1cc>)
 80094aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 80094b4:	4b24      	ldr	r3, [pc, #144]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094b6:	4a25      	ldr	r2, [pc, #148]	; (800954c <HAL_TIM_Base_MspInit+0x1f0>)
 80094b8:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094bc:	2204      	movs	r2, #4
 80094be:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094c0:	4b21      	ldr	r3, [pc, #132]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094c2:	2210      	movs	r2, #16
 80094c4:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80094c6:	4b20      	ldr	r3, [pc, #128]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80094cc:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094ce:	2280      	movs	r2, #128	; 0x80
 80094d0:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094d8:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094da:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094e0:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 80094e2:	4b19      	ldr	r3, [pc, #100]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 80094ee:	4816      	ldr	r0, [pc, #88]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 80094f0:	f7fc f9b0 	bl	8005854 <HAL_DMA_Init>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 80094fa:	f7ff fe12 	bl	8009122 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a11      	ldr	r2, [pc, #68]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 8009502:	625a      	str	r2, [r3, #36]	; 0x24
 8009504:	4a10      	ldr	r2, [pc, #64]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a0e      	ldr	r2, [pc, #56]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 800950e:	621a      	str	r2, [r3, #32]
 8009510:	4a0d      	ldr	r2, [pc, #52]	; (8009548 <HAL_TIM_Base_MspInit+0x1ec>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8009516:	f7ff fea9 	bl	800926c <HAL_Set_DMA_Callbacks>
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40021000 	.word	0x40021000
 800952c:	20001c84 	.word	0x20001c84
 8009530:	4002001c 	.word	0x4002001c
 8009534:	20001ccc 	.word	0x20001ccc
 8009538:	40020030 	.word	0x40020030
 800953c:	20001d14 	.word	0x20001d14
 8009540:	40020080 	.word	0x40020080
 8009544:	40014400 	.word	0x40014400
 8009548:	20001da4 	.word	0x20001da4
 800954c:	4002006c 	.word	0x4002006c

08009550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a28      	ldr	r2, [pc, #160]	; (8009600 <HAL_TIM_PWM_MspInit+0xb0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d149      	bne.n	80095f6 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009562:	4b28      	ldr	r3, [pc, #160]	; (8009604 <HAL_TIM_PWM_MspInit+0xb4>)
 8009564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009566:	4a27      	ldr	r2, [pc, #156]	; (8009604 <HAL_TIM_PWM_MspInit+0xb4>)
 8009568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800956c:	6613      	str	r3, [r2, #96]	; 0x60
 800956e:	4b25      	ldr	r3, [pc, #148]	; (8009604 <HAL_TIM_PWM_MspInit+0xb4>)
 8009570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800957a:	4b23      	ldr	r3, [pc, #140]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 800957c:	4a23      	ldr	r2, [pc, #140]	; (800960c <HAL_TIM_PWM_MspInit+0xbc>)
 800957e:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8009580:	4b21      	ldr	r3, [pc, #132]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 8009582:	2207      	movs	r2, #7
 8009584:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009586:	4b20      	ldr	r3, [pc, #128]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 8009588:	2210      	movs	r2, #16
 800958a:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800958c:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 800958e:	2200      	movs	r2, #0
 8009590:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8009592:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 8009594:	2280      	movs	r2, #128	; 0x80
 8009596:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 800959a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800959e:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80095a0:	4b19      	ldr	r3, [pc, #100]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095a6:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80095ae:	4b16      	ldr	r3, [pc, #88]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80095b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80095b6:	4814      	ldr	r0, [pc, #80]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095b8:	f7fc f94c 	bl	8005854 <HAL_DMA_Init>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 80095c2:	f7ff fdae 	bl	8009122 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a0f      	ldr	r2, [pc, #60]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24
 80095cc:	4a0e      	ldr	r2, [pc, #56]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a0c      	ldr	r2, [pc, #48]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095d6:	621a      	str	r2, [r3, #32]
 80095d8:	4a0b      	ldr	r2, [pc, #44]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a09      	ldr	r2, [pc, #36]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
 80095e4:	4a08      	ldr	r2, [pc, #32]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a06      	ldr	r2, [pc, #24]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095ee:	635a      	str	r2, [r3, #52]	; 0x34
 80095f0:	4a05      	ldr	r2, [pc, #20]	; (8009608 <HAL_TIM_PWM_MspInit+0xb8>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	40014000 	.word	0x40014000
 8009604:	40021000 	.word	0x40021000
 8009608:	20001d5c 	.word	0x20001d5c
 800960c:	40020058 	.word	0x40020058

08009610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8009616:	2300      	movs	r3, #0
 8009618:	71fb      	strb	r3, [r7, #7]
 800961a:	e005      	b.n	8009628 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800961c:	2064      	movs	r0, #100	; 0x64
 800961e:	f7fb ff8d 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	3301      	adds	r3, #1
 8009626:	71fb      	strb	r3, [r7, #7]
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0f6      	beq.n	800961c <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800962e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009632:	f7fb ff83 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009636:	e7ee      	b.n	8009616 <NMI_Handler+0x6>

08009638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800963e:	2300      	movs	r3, #0
 8009640:	71fb      	strb	r3, [r7, #7]
 8009642:	e005      	b.n	8009650 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009644:	2064      	movs	r0, #100	; 0x64
 8009646:	f7fb ff79 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	3301      	adds	r3, #1
 800964e:	71fb      	strb	r3, [r7, #7]
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d9f6      	bls.n	8009644 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009656:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800965a:	f7fb ff6f 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800965e:	e7ee      	b.n	800963e <HardFault_Handler+0x6>

08009660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8009666:	2300      	movs	r3, #0
 8009668:	71fb      	strb	r3, [r7, #7]
 800966a:	e005      	b.n	8009678 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800966c:	2064      	movs	r0, #100	; 0x64
 800966e:	f7fb ff65 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	3301      	adds	r3, #1
 8009676:	71fb      	strb	r3, [r7, #7]
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d9f6      	bls.n	800966c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800967e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009682:	f7fb ff5b 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009686:	e7ee      	b.n	8009666 <MemManage_Handler+0x6>

08009688 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800968e:	2300      	movs	r3, #0
 8009690:	71fb      	strb	r3, [r7, #7]
 8009692:	e005      	b.n	80096a0 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009694:	2064      	movs	r0, #100	; 0x64
 8009696:	f7fb ff51 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	3301      	adds	r3, #1
 800969e:	71fb      	strb	r3, [r7, #7]
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d9f6      	bls.n	8009694 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80096a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096aa:	f7fb ff47 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80096ae:	e7ee      	b.n	800968e <BusFault_Handler+0x6>

080096b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	e005      	b.n	80096c8 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80096bc:	2064      	movs	r0, #100	; 0x64
 80096be:	f7fb ff3d 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	3301      	adds	r3, #1
 80096c6:	71fb      	strb	r3, [r7, #7]
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d9f6      	bls.n	80096bc <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80096ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096d2:	f7fb ff33 	bl	800553c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 80096d6:	e7ee      	b.n	80096b6 <UsageFault_Handler+0x6>

080096d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80096e8:	b590      	push	{r4, r7, lr}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 80096ee:	2301      	movs	r3, #1
 80096f0:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 80096f2:	2303      	movs	r3, #3
 80096f4:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 80096f6:	2306      	movs	r3, #6
 80096f8:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fc fcbb 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8009702:	797a      	ldrb	r2, [r7, #5]
 8009704:	797b      	ldrb	r3, [r7, #5]
 8009706:	4910      	ldr	r1, [pc, #64]	; (8009748 <EXTI0_IRQHandler+0x60>)
 8009708:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800970c:	490e      	ldr	r1, [pc, #56]	; (8009748 <EXTI0_IRQHandler+0x60>)
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	440b      	add	r3, r1
 8009712:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8009714:	797c      	ldrb	r4, [r7, #5]
 8009716:	f7fa f9dd 	bl	8003ad4 <xTaskGetTickCountFromISR>
 800971a:	4603      	mov	r3, r0
 800971c:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <EXTI0_IRQHandler+0x60>)
 800971e:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009722:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fc f879 	bl	800581e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <EXTI0_IRQHandler+0x64>)
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	7979      	ldrb	r1, [r7, #5]
 8009732:	463b      	mov	r3, r7
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	2203      	movs	r2, #3
 800973a:	f7fa fde9 	bl	8004310 <xTaskGenericNotifyFromISR>
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	bd90      	pop	{r4, r7, pc}
 8009746:	bf00      	nop
 8009748:	20000338 	.word	0x20000338
 800974c:	20002668 	.word	0x20002668

08009750 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b085      	sub	sp, #20
 8009754:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 8009756:	2304      	movs	r3, #4
 8009758:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800975a:	2300      	movs	r3, #0
 800975c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800975e:	2308      	movs	r3, #8
 8009760:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fc fc87 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800976a:	797a      	ldrb	r2, [r7, #5]
 800976c:	797b      	ldrb	r3, [r7, #5]
 800976e:	4910      	ldr	r1, [pc, #64]	; (80097b0 <EXTI2_IRQHandler+0x60>)
 8009770:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009774:	490e      	ldr	r1, [pc, #56]	; (80097b0 <EXTI2_IRQHandler+0x60>)
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	440b      	add	r3, r1
 800977a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800977c:	797c      	ldrb	r4, [r7, #5]
 800977e:	f7fa f9a9 	bl	8003ad4 <xTaskGetTickCountFromISR>
 8009782:	4603      	mov	r3, r0
 8009784:	4a0a      	ldr	r2, [pc, #40]	; (80097b0 <EXTI2_IRQHandler+0x60>)
 8009786:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800978a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	f7fc f845 	bl	800581e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <EXTI2_IRQHandler+0x64>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	7979      	ldrb	r1, [r7, #5]
 800979a:	463b      	mov	r3, r7
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	2300      	movs	r3, #0
 80097a0:	2203      	movs	r2, #3
 80097a2:	f7fa fdb5 	bl	8004310 <xTaskGenericNotifyFromISR>
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd90      	pop	{r4, r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000338 	.word	0x20000338
 80097b4:	20002668 	.word	0x20002668

080097b8 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 80097be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097c2:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 80097c4:	2301      	movs	r3, #1
 80097c6:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 80097c8:	2328      	movs	r3, #40	; 0x28
 80097ca:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fc fc52 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80097d4:	797a      	ldrb	r2, [r7, #5]
 80097d6:	797b      	ldrb	r3, [r7, #5]
 80097d8:	490f      	ldr	r1, [pc, #60]	; (8009818 <EXTI15_10_IRQHandler+0x60>)
 80097da:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80097de:	490e      	ldr	r1, [pc, #56]	; (8009818 <EXTI15_10_IRQHandler+0x60>)
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	440b      	add	r3, r1
 80097e4:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80097e6:	797c      	ldrb	r4, [r7, #5]
 80097e8:	f7fa f974 	bl	8003ad4 <xTaskGetTickCountFromISR>
 80097ec:	4603      	mov	r3, r0
 80097ee:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <EXTI15_10_IRQHandler+0x60>)
 80097f0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80097f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fc f810 	bl	800581e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <EXTI15_10_IRQHandler+0x64>)
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	7979      	ldrb	r1, [r7, #5]
 8009804:	463b      	mov	r3, r7
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2300      	movs	r3, #0
 800980a:	2203      	movs	r2, #3
 800980c:	f7fa fd80 	bl	8004310 <xTaskGenericNotifyFromISR>
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bd90      	pop	{r4, r7, pc}
 8009818:	20000338 	.word	0x20000338
 800981c:	20002668 	.word	0x20002668

08009820 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b085      	sub	sp, #20
 8009824:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 8009826:	2320      	movs	r3, #32
 8009828:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800982a:	2302      	movs	r3, #2
 800982c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800982e:	2317      	movs	r3, #23
 8009830:	713b      	strb	r3, [r7, #4]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	4618      	mov	r0, r3
 8009836:	f7fc fc1f 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800983a:	797a      	ldrb	r2, [r7, #5]
 800983c:	797b      	ldrb	r3, [r7, #5]
 800983e:	4910      	ldr	r1, [pc, #64]	; (8009880 <EXTI9_5_IRQHandler+0x60>)
 8009840:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009844:	490e      	ldr	r1, [pc, #56]	; (8009880 <EXTI9_5_IRQHandler+0x60>)
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	440b      	add	r3, r1
 800984a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800984c:	797c      	ldrb	r4, [r7, #5]
 800984e:	f7fa f941 	bl	8003ad4 <xTaskGetTickCountFromISR>
 8009852:	4603      	mov	r3, r0
 8009854:	4a0a      	ldr	r2, [pc, #40]	; (8009880 <EXTI9_5_IRQHandler+0x60>)
 8009856:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800985a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	f7fb ffdd 	bl	800581e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009864:	4b07      	ldr	r3, [pc, #28]	; (8009884 <EXTI9_5_IRQHandler+0x64>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	7979      	ldrb	r1, [r7, #5]
 800986a:	463b      	mov	r3, r7
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	2300      	movs	r3, #0
 8009870:	2203      	movs	r2, #3
 8009872:	f7fa fd4d 	bl	8004310 <xTaskGenericNotifyFromISR>
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	bd90      	pop	{r4, r7, pc}
 800987e:	bf00      	nop
 8009880:	20000338 	.word	0x20000338
 8009884:	20002668 	.word	0x20002668

08009888 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	80fb      	strh	r3, [r7, #6]

}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
    while(1);
 80098a6:	e7fe      	b.n	80098a6 <HAL_DMA_CMPLT_CALLBACK+0x8>

080098a8 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7f1b      	ldrb	r3, [r3, #28]
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d016      	beq.n	80098e6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	dc1c      	bgt.n	80098f6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d002      	beq.n	80098c6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d008      	beq.n	80098d6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 80098c4:	e017      	b.n	80098f6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80098c6:	2100      	movs	r1, #0
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe f993 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
        break;
 80098d4:	e010      	b.n	80098f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80098d6:	2104      	movs	r1, #4
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe f98b 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
        break;
 80098e4:	e008      	b.n	80098f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80098e6:	2108      	movs	r1, #8
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fe f983 	bl	8007bf4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 80098ee:	4b06      	ldr	r3, [pc, #24]	; (8009908 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	701a      	strb	r2, [r3, #0]
        break;
 80098f4:	e000      	b.n	80098f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 80098f6:	bf00      	nop
    }
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	2000006d 	.word	0x2000006d
 8009904:	2000006e 	.word	0x2000006e
 8009908:	2000006f 	.word	0x2000006f

0800990c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8009910:	4802      	ldr	r0, [pc, #8]	; (800991c <DMA1_Channel2_IRQHandler+0x10>)
 8009912:	f7fc f8f8 	bl	8005b06 <HAL_DMA_IRQHandler>
}
 8009916:	bf00      	nop
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20001c84 	.word	0x20001c84

08009920 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8009924:	4802      	ldr	r0, [pc, #8]	; (8009930 <DMA1_Channel3_IRQHandler+0x10>)
 8009926:	f7fc f8ee 	bl	8005b06 <HAL_DMA_IRQHandler>
}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20001ccc 	.word	0x20001ccc

08009934 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8009938:	4802      	ldr	r0, [pc, #8]	; (8009944 <DMA1_Channel5_IRQHandler+0x10>)
 800993a:	f7fc f8e4 	bl	8005b06 <HAL_DMA_IRQHandler>
}
 800993e:	bf00      	nop
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001d5c 	.word	0x20001d5c

08009948 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800994c:	4802      	ldr	r0, [pc, #8]	; (8009958 <DMA1_Channel6_IRQHandler+0x10>)
 800994e:	f7fc f8da 	bl	8005b06 <HAL_DMA_IRQHandler>
}
 8009952:	bf00      	nop
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20001da4 	.word	0x20001da4

0800995c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8009960:	4802      	ldr	r0, [pc, #8]	; (800996c <DMA1_Channel7_IRQHandler+0x10>)
 8009962:	f7fc f8d0 	bl	8005b06 <HAL_DMA_IRQHandler>
}
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20001d14 	.word	0x20001d14

08009970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
	return 1;
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <_kill>:

int _kill(int pid, int sig)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800998a:	f000 fa85 	bl	8009e98 <__errno>
 800998e:	4603      	mov	r3, r0
 8009990:	2216      	movs	r2, #22
 8009992:	601a      	str	r2, [r3, #0]
	return -1;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_exit>:

void _exit (int status)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80099a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff ffe7 	bl	8009980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80099b2:	e7fe      	b.n	80099b2 <_exit+0x12>

080099b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e00a      	b.n	80099dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80099c6:	f3af 8000 	nop.w
 80099ca:	4601      	mov	r1, r0
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	60ba      	str	r2, [r7, #8]
 80099d2:	b2ca      	uxtb	r2, r1
 80099d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	3301      	adds	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	dbf0      	blt.n	80099c6 <_read+0x12>
	}

return len;
 80099e4:	687b      	ldr	r3, [r7, #4]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b086      	sub	sp, #24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e009      	b.n	8009a14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	60ba      	str	r2, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	3301      	adds	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	dbf1      	blt.n	8009a00 <_write+0x12>
	}
	return len;
 8009a1c:	687b      	ldr	r3, [r7, #4]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <_close>:

int _close(int file)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8009a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <_isatty>:

int _isatty(int file)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
	return 1;
 8009a66:	2301      	movs	r3, #1
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
	...

08009a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <_sbrk+0x5c>)
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <_sbrk+0x60>)
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009aa4:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <_sbrk+0x64>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009aac:	4b11      	ldr	r3, [pc, #68]	; (8009af4 <_sbrk+0x64>)
 8009aae:	4a12      	ldr	r2, [pc, #72]	; (8009af8 <_sbrk+0x68>)
 8009ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009ab2:	4b10      	ldr	r3, [pc, #64]	; (8009af4 <_sbrk+0x64>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4413      	add	r3, r2
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d207      	bcs.n	8009ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ac0:	f000 f9ea 	bl	8009e98 <__errno>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	220c      	movs	r2, #12
 8009ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ace:	e009      	b.n	8009ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ad0:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <_sbrk+0x64>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <_sbrk+0x64>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	4a05      	ldr	r2, [pc, #20]	; (8009af4 <_sbrk+0x64>)
 8009ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	20010000 	.word	0x20010000
 8009af0:	00000400 	.word	0x00000400
 8009af4:	20001e5c 	.word	0x20001e5c
 8009af8:	20003738 	.word	0x20003738

08009afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009b00:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <SystemInit+0x20>)
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <SystemInit+0x20>)
 8009b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009b10:	bf00      	nop
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	e000ed00 	.word	0xe000ed00

08009b20 <flash_info_animation_enabled>:

flash_info_block_t  g_flash_info_block;


bool flash_info_animation_enabled(led_state_e animation)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
    switch (animation)
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	2b0b      	cmp	r3, #11
 8009b32:	f200 8089 	bhi.w	8009c48 <flash_info_animation_enabled+0x128>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <flash_info_animation_enabled+0x1c>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b6d 	.word	0x08009b6d
 8009b40:	08009b81 	.word	0x08009b81
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	08009ba9 	.word	0x08009ba9
 8009b4c:	08009bbd 	.word	0x08009bbd
 8009b50:	08009bd1 	.word	0x08009bd1
 8009b54:	08009be5 	.word	0x08009be5
 8009b58:	08009bf9 	.word	0x08009bf9
 8009b5c:	08009c0d 	.word	0x08009c0d
 8009b60:	08009c21 	.word	0x08009c21
 8009b64:	08009c49 	.word	0x08009c49
 8009b68:	08009c35 	.word	0x08009c35
    {
        case LED_STATE_SPELL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell) return_val = true;
 8009b6c:	4b45      	ldr	r3, [pc, #276]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009b6e:	7adb      	ldrb	r3, [r3, #11]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d068      	beq.n	8009c4c <flash_info_animation_enabled+0x12c>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8009b7e:	e065      	b.n	8009c4c <flash_info_animation_enabled+0x12c>
        case LED_STATE_WHITE_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 8009b80:	4b40      	ldr	r3, [pc, #256]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009b82:	7adb      	ldrb	r3, [r3, #11]
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d060      	beq.n	8009c50 <flash_info_animation_enabled+0x130>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	73fb      	strb	r3, [r7, #15]
        break;
 8009b92:	e05d      	b.n	8009c50 <flash_info_animation_enabled+0x130>
        case LED_STATE_SOLID_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid) return_val = true;
 8009b94:	4b3b      	ldr	r3, [pc, #236]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009b96:	7adb      	ldrb	r3, [r3, #11]
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d058      	beq.n	8009c54 <flash_info_animation_enabled+0x134>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8009ba6:	e055      	b.n	8009c54 <flash_info_animation_enabled+0x134>
        case LED_STATE_SPARKLE_NO_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill) return_val = true;
 8009ba8:	4b36      	ldr	r3, [pc, #216]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009baa:	7adb      	ldrb	r3, [r3, #11]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d050      	beq.n	8009c58 <flash_info_animation_enabled+0x138>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bba:	e04d      	b.n	8009c58 <flash_info_animation_enabled+0x138>
        case LED_STATE_SPARKLE_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle) return_val = true;
 8009bbc:	4b31      	ldr	r3, [pc, #196]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009bbe:	7adb      	ldrb	r3, [r3, #11]
 8009bc0:	f003 0308 	and.w	r3, r3, #8
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d048      	beq.n	8009c5c <flash_info_animation_enabled+0x13c>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8009bce:	e045      	b.n	8009c5c <flash_info_animation_enabled+0x13c>
        case LED_STATE_RAINBOW_CYCLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow) return_val = true;
 8009bd0:	4b2c      	ldr	r3, [pc, #176]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009bd2:	7adb      	ldrb	r3, [r3, #11]
 8009bd4:	f003 0320 	and.w	r3, r3, #32
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d040      	beq.n	8009c60 <flash_info_animation_enabled+0x140>
 8009bde:	2301      	movs	r3, #1
 8009be0:	73fb      	strb	r3, [r7, #15]
        break;
 8009be2:	e03d      	b.n	8009c60 <flash_info_animation_enabled+0x140>
        case LED_STATE_THEATER_CHASE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase) return_val = true;
 8009be4:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009be6:	7adb      	ldrb	r3, [r3, #11]
 8009be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d038      	beq.n	8009c64 <flash_info_animation_enabled+0x144>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8009bf6:	e035      	b.n	8009c64 <flash_info_animation_enabled+0x144>
        case LED_STATE_THEATER_CHASE_RAINBOW:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow) return_val = true;
 8009bf8:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009bfa:	7adb      	ldrb	r3, [r3, #11]
 8009bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d030      	beq.n	8009c68 <flash_info_animation_enabled+0x148>
 8009c06:	2301      	movs	r3, #1
 8009c08:	73fb      	strb	r3, [r7, #15]
        break;
 8009c0a:	e02d      	b.n	8009c68 <flash_info_animation_enabled+0x148>
        case LED_STATE_FADE_IN_AND_OUT:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade) return_val = true;
 8009c0c:	4b1d      	ldr	r3, [pc, #116]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009c0e:	7b1b      	ldrb	r3, [r3, #12]
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d028      	beq.n	8009c6c <flash_info_animation_enabled+0x14c>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8009c1e:	e025      	b.n	8009c6c <flash_info_animation_enabled+0x14c>
        case LED_STATE_TWINKLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle) return_val = true;
 8009c20:	4b18      	ldr	r3, [pc, #96]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009c22:	7b1b      	ldrb	r3, [r3, #12]
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d020      	beq.n	8009c70 <flash_info_animation_enabled+0x150>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
        break;
 8009c32:	e01d      	b.n	8009c70 <flash_info_animation_enabled+0x150>
        case LED_STATE_SRW_DEBUG:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 8009c34:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <flash_info_animation_enabled+0x164>)
 8009c36:	7adb      	ldrb	r3, [r3, #11]
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d018      	beq.n	8009c74 <flash_info_animation_enabled+0x154>
 8009c42:	2301      	movs	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]
        break;
 8009c46:	e015      	b.n	8009c74 <flash_info_animation_enabled+0x154>
        default:
        break;
 8009c48:	bf00      	nop
 8009c4a:	e014      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e012      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c50:	bf00      	nop
 8009c52:	e010      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c54:	bf00      	nop
 8009c56:	e00e      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c58:	bf00      	nop
 8009c5a:	e00c      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c5c:	bf00      	nop
 8009c5e:	e00a      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c60:	bf00      	nop
 8009c62:	e008      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c64:	bf00      	nop
 8009c66:	e006      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c68:	bf00      	nop
 8009c6a:	e004      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <flash_info_animation_enabled+0x156>
        break;
 8009c74:	bf00      	nop
    }
    return return_val;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	20001e60 	.word	0x20001e60

08009c88 <flash_info_block_init>:


void flash_info_block_init(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 8009c8c:	f7fb fc7a 	bl	8005584 <HAL_GetUIDw0>
 8009c90:	4603      	mov	r3, r0
 8009c92:	4a32      	ldr	r2, [pc, #200]	; (8009d5c <flash_info_block_init+0xd4>)
 8009c94:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 8009c98:	f7fb fc80 	bl	800559c <HAL_GetUIDw1>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	4a2f      	ldr	r2, [pc, #188]	; (8009d5c <flash_info_block_init+0xd4>)
 8009ca0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 8009ca4:	f7fb fc86 	bl	80055b4 <HAL_GetUIDw2>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4a2c      	ldr	r2, [pc, #176]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 8009cb0:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 8009cb6:	4b29      	ldr	r3, [pc, #164]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 8009cbc:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 8009cc2:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 8009cc8:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 8009cce:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009cd4:	4b21      	ldr	r3, [pc, #132]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009cda:	4b20      	ldr	r3, [pc, #128]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 8009ce0:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <flash_info_block_init+0xd4>)
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <flash_info_block_init+0xd4>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009cec:	4b1b      	ldr	r3, [pc, #108]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cee:	2201      	movs	r2, #1
 8009cf0:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 8009cf2:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cf4:	7ad3      	ldrb	r3, [r2, #11]
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 8009cfc:	4a17      	ldr	r2, [pc, #92]	; (8009d5c <flash_info_block_init+0xd4>)
 8009cfe:	7ad3      	ldrb	r3, [r2, #11]
 8009d00:	f043 0302 	orr.w	r3, r3, #2
 8009d04:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 8009d06:	4a15      	ldr	r2, [pc, #84]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d08:	7ad3      	ldrb	r3, [r2, #11]
 8009d0a:	f043 0304 	orr.w	r3, r3, #4
 8009d0e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 8009d10:	4a12      	ldr	r2, [pc, #72]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d12:	7ad3      	ldrb	r3, [r2, #11]
 8009d14:	f043 0308 	orr.w	r3, r3, #8
 8009d18:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 8009d1a:	4a10      	ldr	r2, [pc, #64]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d1c:	7ad3      	ldrb	r3, [r2, #11]
 8009d1e:	f043 0310 	orr.w	r3, r3, #16
 8009d22:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 8009d24:	4a0d      	ldr	r2, [pc, #52]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d26:	7ad3      	ldrb	r3, [r2, #11]
 8009d28:	f043 0320 	orr.w	r3, r3, #32
 8009d2c:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 8009d2e:	4a0b      	ldr	r2, [pc, #44]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d30:	7ad3      	ldrb	r3, [r2, #11]
 8009d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d36:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d3a:	7ad3      	ldrb	r3, [r2, #11]
 8009d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d40:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 8009d42:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d44:	7b13      	ldrb	r3, [r2, #12]
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 8009d4c:	4a03      	ldr	r2, [pc, #12]	; (8009d5c <flash_info_block_init+0xd4>)
 8009d4e:	7b13      	ldrb	r3, [r2, #12]
 8009d50:	f043 0302 	orr.w	r3, r3, #2
 8009d54:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 8009d56:	bf00      	nop
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001e60 	.word	0x20001e60

08009d60 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <flash_info_init+0x3c>)
 8009d66:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009d6a:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 8009d6c:	f7ff ff8c 	bl	8009c88 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8009d70:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <flash_info_init+0x40>)
 8009d72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7a:	d10d      	bne.n	8009d98 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009d7c:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <flash_info_init+0x40>)
 8009d7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d86:	d107      	bne.n	8009d98 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <flash_info_init+0x40>)
 8009d8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d92:	d101      	bne.n	8009d98 <flash_info_init+0x38>
    {
        flash_info_block_init();
 8009d94:	f7ff ff78 	bl	8009c88 <flash_info_block_init>
    }
}
 8009d98:	bf00      	nop
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20002660 	.word	0x20002660
 8009da0:	20001e60 	.word	0x20001e60

08009da4 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8009da8:	f7ff f99e 	bl	80090e8 <board_init_common_board_init>
    flash_info_init();
 8009dac:	f7ff ffd8 	bl	8009d60 <flash_info_init>
    task_create();
 8009db0:	f000 f808 	bl	8009dc4 <task_create>
	//semaphore_create();
    reset_ws2812b();
 8009db4:	f7f7 fcd8 	bl	8001768 <reset_ws2812b>
	osKernelStart();
 8009db8:	f7f8 fcec 	bl	8002794 <osKernelStart>
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8009dc8:	f7f8 fcc0 	bl	800274c <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 8009dcc:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <task_create+0x34>)
 8009dce:	2100      	movs	r1, #0
 8009dd0:	480a      	ldr	r0, [pc, #40]	; (8009dfc <task_create+0x38>)
 8009dd2:	f7f8 fd05 	bl	80027e0 <osThreadNew>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <task_create+0x3c>)
 8009dda:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 8009ddc:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <task_create+0x40>)
 8009dde:	2100      	movs	r1, #0
 8009de0:	4809      	ldr	r0, [pc, #36]	; (8009e08 <task_create+0x44>)
 8009de2:	f7f8 fcfd 	bl	80027e0 <osThreadNew>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4a08      	ldr	r2, [pc, #32]	; (8009e0c <task_create+0x48>)
 8009dea:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8009dec:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <task_create+0x4c>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	701a      	strb	r2, [r3, #0]
}
 8009df2:	bf00      	nop
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	0800b140 	.word	0x0800b140
 8009dfc:	08001df9 	.word	0x08001df9
 8009e00:	20002668 	.word	0x20002668
 8009e04:	0800b164 	.word	0x0800b164
 8009e08:	080020f5 	.word	0x080020f5
 8009e0c:	20002664 	.word	0x20002664
 8009e10:	20003724 	.word	0x20003724

08009e14 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 8009e1e:	f000 f991 	bl	800a144 <rand>
 8009e22:	4603      	mov	r3, r0
 8009e24:	461a      	mov	r2, r3
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	1acb      	subs	r3, r1, r3
 8009e2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e30:	fb01 f303 	mul.w	r3, r1, r3
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4413      	add	r3, r2
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009e48:	f7ff fe58 	bl	8009afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e4c:	480c      	ldr	r0, [pc, #48]	; (8009e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8009e4e:	490d      	ldr	r1, [pc, #52]	; (8009e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009e50:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <LoopForever+0xe>)
  movs r3, #0
 8009e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e54:	e002      	b.n	8009e5c <LoopCopyDataInit>

08009e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e5a:	3304      	adds	r3, #4

08009e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e60:	d3f9      	bcc.n	8009e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e62:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009e64:	4c0a      	ldr	r4, [pc, #40]	; (8009e90 <LoopForever+0x16>)
  movs r3, #0
 8009e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e68:	e001      	b.n	8009e6e <LoopFillZerobss>

08009e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e6c:	3204      	adds	r2, #4

08009e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e70:	d3fb      	bcc.n	8009e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009e72:	f000 f817 	bl	8009ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009e76:	f7ff ff95 	bl	8009da4 <main>

08009e7a <LoopForever>:

LoopForever:
    b LoopForever
 8009e7a:	e7fe      	b.n	8009e7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009e7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e84:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8009e88:	0800b2d8 	.word	0x0800b2d8
  ldr r2, =_sbss
 8009e8c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8009e90:	20003738 	.word	0x20003738

08009e94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009e94:	e7fe      	b.n	8009e94 <ADC1_IRQHandler>
	...

08009e98 <__errno>:
 8009e98:	4b01      	ldr	r3, [pc, #4]	; (8009ea0 <__errno+0x8>)
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000074 	.word	0x20000074

08009ea4 <__libc_init_array>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	4d0d      	ldr	r5, [pc, #52]	; (8009edc <__libc_init_array+0x38>)
 8009ea8:	4c0d      	ldr	r4, [pc, #52]	; (8009ee0 <__libc_init_array+0x3c>)
 8009eaa:	1b64      	subs	r4, r4, r5
 8009eac:	10a4      	asrs	r4, r4, #2
 8009eae:	2600      	movs	r6, #0
 8009eb0:	42a6      	cmp	r6, r4
 8009eb2:	d109      	bne.n	8009ec8 <__libc_init_array+0x24>
 8009eb4:	4d0b      	ldr	r5, [pc, #44]	; (8009ee4 <__libc_init_array+0x40>)
 8009eb6:	4c0c      	ldr	r4, [pc, #48]	; (8009ee8 <__libc_init_array+0x44>)
 8009eb8:	f001 f8c8 	bl	800b04c <_init>
 8009ebc:	1b64      	subs	r4, r4, r5
 8009ebe:	10a4      	asrs	r4, r4, #2
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	42a6      	cmp	r6, r4
 8009ec4:	d105      	bne.n	8009ed2 <__libc_init_array+0x2e>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ecc:	4798      	blx	r3
 8009ece:	3601      	adds	r6, #1
 8009ed0:	e7ee      	b.n	8009eb0 <__libc_init_array+0xc>
 8009ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed6:	4798      	blx	r3
 8009ed8:	3601      	adds	r6, #1
 8009eda:	e7f2      	b.n	8009ec2 <__libc_init_array+0x1e>
 8009edc:	0800b2d0 	.word	0x0800b2d0
 8009ee0:	0800b2d0 	.word	0x0800b2d0
 8009ee4:	0800b2d0 	.word	0x0800b2d0
 8009ee8:	0800b2d4 	.word	0x0800b2d4

08009eec <malloc>:
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <malloc+0xc>)
 8009eee:	4601      	mov	r1, r0
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	f000 b885 	b.w	800a000 <_malloc_r>
 8009ef6:	bf00      	nop
 8009ef8:	20000074 	.word	0x20000074

08009efc <memcpy>:
 8009efc:	440a      	add	r2, r1
 8009efe:	4291      	cmp	r1, r2
 8009f00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f04:	d100      	bne.n	8009f08 <memcpy+0xc>
 8009f06:	4770      	bx	lr
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f12:	4291      	cmp	r1, r2
 8009f14:	d1f9      	bne.n	8009f0a <memcpy+0xe>
 8009f16:	bd10      	pop	{r4, pc}

08009f18 <memset>:
 8009f18:	4402      	add	r2, r0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d100      	bne.n	8009f22 <memset+0xa>
 8009f20:	4770      	bx	lr
 8009f22:	f803 1b01 	strb.w	r1, [r3], #1
 8009f26:	e7f9      	b.n	8009f1c <memset+0x4>

08009f28 <_free_r>:
 8009f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f2a:	2900      	cmp	r1, #0
 8009f2c:	d044      	beq.n	8009fb8 <_free_r+0x90>
 8009f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f32:	9001      	str	r0, [sp, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f1a1 0404 	sub.w	r4, r1, #4
 8009f3a:	bfb8      	it	lt
 8009f3c:	18e4      	addlt	r4, r4, r3
 8009f3e:	f000 f9ab 	bl	800a298 <__malloc_lock>
 8009f42:	4a1e      	ldr	r2, [pc, #120]	; (8009fbc <_free_r+0x94>)
 8009f44:	9801      	ldr	r0, [sp, #4]
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	b933      	cbnz	r3, 8009f58 <_free_r+0x30>
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	6014      	str	r4, [r2, #0]
 8009f4e:	b003      	add	sp, #12
 8009f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f54:	f000 b9a6 	b.w	800a2a4 <__malloc_unlock>
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	d908      	bls.n	8009f6e <_free_r+0x46>
 8009f5c:	6825      	ldr	r5, [r4, #0]
 8009f5e:	1961      	adds	r1, r4, r5
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf01      	itttt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	1949      	addeq	r1, r1, r5
 8009f6a:	6021      	streq	r1, [r4, #0]
 8009f6c:	e7ed      	b.n	8009f4a <_free_r+0x22>
 8009f6e:	461a      	mov	r2, r3
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	b10b      	cbz	r3, 8009f78 <_free_r+0x50>
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d9fa      	bls.n	8009f6e <_free_r+0x46>
 8009f78:	6811      	ldr	r1, [r2, #0]
 8009f7a:	1855      	adds	r5, r2, r1
 8009f7c:	42a5      	cmp	r5, r4
 8009f7e:	d10b      	bne.n	8009f98 <_free_r+0x70>
 8009f80:	6824      	ldr	r4, [r4, #0]
 8009f82:	4421      	add	r1, r4
 8009f84:	1854      	adds	r4, r2, r1
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	d1e0      	bne.n	8009f4e <_free_r+0x26>
 8009f8c:	681c      	ldr	r4, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	6053      	str	r3, [r2, #4]
 8009f92:	4421      	add	r1, r4
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	e7da      	b.n	8009f4e <_free_r+0x26>
 8009f98:	d902      	bls.n	8009fa0 <_free_r+0x78>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6003      	str	r3, [r0, #0]
 8009f9e:	e7d6      	b.n	8009f4e <_free_r+0x26>
 8009fa0:	6825      	ldr	r5, [r4, #0]
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	bf04      	itt	eq
 8009fa8:	6819      	ldreq	r1, [r3, #0]
 8009faa:	685b      	ldreq	r3, [r3, #4]
 8009fac:	6063      	str	r3, [r4, #4]
 8009fae:	bf04      	itt	eq
 8009fb0:	1949      	addeq	r1, r1, r5
 8009fb2:	6021      	streq	r1, [r4, #0]
 8009fb4:	6054      	str	r4, [r2, #4]
 8009fb6:	e7ca      	b.n	8009f4e <_free_r+0x26>
 8009fb8:	b003      	add	sp, #12
 8009fba:	bd30      	pop	{r4, r5, pc}
 8009fbc:	20003728 	.word	0x20003728

08009fc0 <sbrk_aligned>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	4e0e      	ldr	r6, [pc, #56]	; (8009ffc <sbrk_aligned+0x3c>)
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	6831      	ldr	r1, [r6, #0]
 8009fc8:	4605      	mov	r5, r0
 8009fca:	b911      	cbnz	r1, 8009fd2 <sbrk_aligned+0x12>
 8009fcc:	f000 f8f8 	bl	800a1c0 <_sbrk_r>
 8009fd0:	6030      	str	r0, [r6, #0]
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f000 f8f3 	bl	800a1c0 <_sbrk_r>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	d00a      	beq.n	8009ff4 <sbrk_aligned+0x34>
 8009fde:	1cc4      	adds	r4, r0, #3
 8009fe0:	f024 0403 	bic.w	r4, r4, #3
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d007      	beq.n	8009ff8 <sbrk_aligned+0x38>
 8009fe8:	1a21      	subs	r1, r4, r0
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 f8e8 	bl	800a1c0 <_sbrk_r>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d101      	bne.n	8009ff8 <sbrk_aligned+0x38>
 8009ff4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	2000372c 	.word	0x2000372c

0800a000 <_malloc_r>:
 800a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a004:	1ccd      	adds	r5, r1, #3
 800a006:	f025 0503 	bic.w	r5, r5, #3
 800a00a:	3508      	adds	r5, #8
 800a00c:	2d0c      	cmp	r5, #12
 800a00e:	bf38      	it	cc
 800a010:	250c      	movcc	r5, #12
 800a012:	2d00      	cmp	r5, #0
 800a014:	4607      	mov	r7, r0
 800a016:	db01      	blt.n	800a01c <_malloc_r+0x1c>
 800a018:	42a9      	cmp	r1, r5
 800a01a:	d905      	bls.n	800a028 <_malloc_r+0x28>
 800a01c:	230c      	movs	r3, #12
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	2600      	movs	r6, #0
 800a022:	4630      	mov	r0, r6
 800a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a028:	4e2e      	ldr	r6, [pc, #184]	; (800a0e4 <_malloc_r+0xe4>)
 800a02a:	f000 f935 	bl	800a298 <__malloc_lock>
 800a02e:	6833      	ldr	r3, [r6, #0]
 800a030:	461c      	mov	r4, r3
 800a032:	bb34      	cbnz	r4, 800a082 <_malloc_r+0x82>
 800a034:	4629      	mov	r1, r5
 800a036:	4638      	mov	r0, r7
 800a038:	f7ff ffc2 	bl	8009fc0 <sbrk_aligned>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	4604      	mov	r4, r0
 800a040:	d14d      	bne.n	800a0de <_malloc_r+0xde>
 800a042:	6834      	ldr	r4, [r6, #0]
 800a044:	4626      	mov	r6, r4
 800a046:	2e00      	cmp	r6, #0
 800a048:	d140      	bne.n	800a0cc <_malloc_r+0xcc>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	4631      	mov	r1, r6
 800a04e:	4638      	mov	r0, r7
 800a050:	eb04 0803 	add.w	r8, r4, r3
 800a054:	f000 f8b4 	bl	800a1c0 <_sbrk_r>
 800a058:	4580      	cmp	r8, r0
 800a05a:	d13a      	bne.n	800a0d2 <_malloc_r+0xd2>
 800a05c:	6821      	ldr	r1, [r4, #0]
 800a05e:	3503      	adds	r5, #3
 800a060:	1a6d      	subs	r5, r5, r1
 800a062:	f025 0503 	bic.w	r5, r5, #3
 800a066:	3508      	adds	r5, #8
 800a068:	2d0c      	cmp	r5, #12
 800a06a:	bf38      	it	cc
 800a06c:	250c      	movcc	r5, #12
 800a06e:	4629      	mov	r1, r5
 800a070:	4638      	mov	r0, r7
 800a072:	f7ff ffa5 	bl	8009fc0 <sbrk_aligned>
 800a076:	3001      	adds	r0, #1
 800a078:	d02b      	beq.n	800a0d2 <_malloc_r+0xd2>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	442b      	add	r3, r5
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	e00e      	b.n	800a0a0 <_malloc_r+0xa0>
 800a082:	6822      	ldr	r2, [r4, #0]
 800a084:	1b52      	subs	r2, r2, r5
 800a086:	d41e      	bmi.n	800a0c6 <_malloc_r+0xc6>
 800a088:	2a0b      	cmp	r2, #11
 800a08a:	d916      	bls.n	800a0ba <_malloc_r+0xba>
 800a08c:	1961      	adds	r1, r4, r5
 800a08e:	42a3      	cmp	r3, r4
 800a090:	6025      	str	r5, [r4, #0]
 800a092:	bf18      	it	ne
 800a094:	6059      	strne	r1, [r3, #4]
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	bf08      	it	eq
 800a09a:	6031      	streq	r1, [r6, #0]
 800a09c:	5162      	str	r2, [r4, r5]
 800a09e:	604b      	str	r3, [r1, #4]
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f104 060b 	add.w	r6, r4, #11
 800a0a6:	f000 f8fd 	bl	800a2a4 <__malloc_unlock>
 800a0aa:	f026 0607 	bic.w	r6, r6, #7
 800a0ae:	1d23      	adds	r3, r4, #4
 800a0b0:	1af2      	subs	r2, r6, r3
 800a0b2:	d0b6      	beq.n	800a022 <_malloc_r+0x22>
 800a0b4:	1b9b      	subs	r3, r3, r6
 800a0b6:	50a3      	str	r3, [r4, r2]
 800a0b8:	e7b3      	b.n	800a022 <_malloc_r+0x22>
 800a0ba:	6862      	ldr	r2, [r4, #4]
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	bf0c      	ite	eq
 800a0c0:	6032      	streq	r2, [r6, #0]
 800a0c2:	605a      	strne	r2, [r3, #4]
 800a0c4:	e7ec      	b.n	800a0a0 <_malloc_r+0xa0>
 800a0c6:	4623      	mov	r3, r4
 800a0c8:	6864      	ldr	r4, [r4, #4]
 800a0ca:	e7b2      	b.n	800a032 <_malloc_r+0x32>
 800a0cc:	4634      	mov	r4, r6
 800a0ce:	6876      	ldr	r6, [r6, #4]
 800a0d0:	e7b9      	b.n	800a046 <_malloc_r+0x46>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	603b      	str	r3, [r7, #0]
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	f000 f8e4 	bl	800a2a4 <__malloc_unlock>
 800a0dc:	e7a1      	b.n	800a022 <_malloc_r+0x22>
 800a0de:	6025      	str	r5, [r4, #0]
 800a0e0:	e7de      	b.n	800a0a0 <_malloc_r+0xa0>
 800a0e2:	bf00      	nop
 800a0e4:	20003728 	.word	0x20003728

0800a0e8 <srand>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4b10      	ldr	r3, [pc, #64]	; (800a12c <srand+0x44>)
 800a0ec:	681d      	ldr	r5, [r3, #0]
 800a0ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	b9b3      	cbnz	r3, 800a122 <srand+0x3a>
 800a0f4:	2018      	movs	r0, #24
 800a0f6:	f7ff fef9 	bl	8009eec <malloc>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	63a8      	str	r0, [r5, #56]	; 0x38
 800a0fe:	b920      	cbnz	r0, 800a10a <srand+0x22>
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <srand+0x48>)
 800a102:	480c      	ldr	r0, [pc, #48]	; (800a134 <srand+0x4c>)
 800a104:	2142      	movs	r1, #66	; 0x42
 800a106:	f000 f885 	bl	800a214 <__assert_func>
 800a10a:	490b      	ldr	r1, [pc, #44]	; (800a138 <srand+0x50>)
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <srand+0x54>)
 800a10e:	e9c0 1300 	strd	r1, r3, [r0]
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <srand+0x58>)
 800a114:	6083      	str	r3, [r0, #8]
 800a116:	230b      	movs	r3, #11
 800a118:	8183      	strh	r3, [r0, #12]
 800a11a:	2100      	movs	r1, #0
 800a11c:	2001      	movs	r0, #1
 800a11e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a122:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a124:	2200      	movs	r2, #0
 800a126:	611c      	str	r4, [r3, #16]
 800a128:	615a      	str	r2, [r3, #20]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	20000074 	.word	0x20000074
 800a130:	0800b18c 	.word	0x0800b18c
 800a134:	0800b1a3 	.word	0x0800b1a3
 800a138:	abcd330e 	.word	0xabcd330e
 800a13c:	e66d1234 	.word	0xe66d1234
 800a140:	0005deec 	.word	0x0005deec

0800a144 <rand>:
 800a144:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <rand+0x5c>)
 800a146:	b510      	push	{r4, lr}
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a14c:	b9b3      	cbnz	r3, 800a17c <rand+0x38>
 800a14e:	2018      	movs	r0, #24
 800a150:	f7ff fecc 	bl	8009eec <malloc>
 800a154:	63a0      	str	r0, [r4, #56]	; 0x38
 800a156:	b928      	cbnz	r0, 800a164 <rand+0x20>
 800a158:	4602      	mov	r2, r0
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <rand+0x60>)
 800a15c:	4812      	ldr	r0, [pc, #72]	; (800a1a8 <rand+0x64>)
 800a15e:	214e      	movs	r1, #78	; 0x4e
 800a160:	f000 f858 	bl	800a214 <__assert_func>
 800a164:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <rand+0x68>)
 800a166:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <rand+0x6c>)
 800a168:	e9c0 2300 	strd	r2, r3, [r0]
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <rand+0x70>)
 800a16e:	6083      	str	r3, [r0, #8]
 800a170:	230b      	movs	r3, #11
 800a172:	8183      	strh	r3, [r0, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	2300      	movs	r3, #0
 800a178:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a17c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a17e:	4a0e      	ldr	r2, [pc, #56]	; (800a1b8 <rand+0x74>)
 800a180:	6920      	ldr	r0, [r4, #16]
 800a182:	6963      	ldr	r3, [r4, #20]
 800a184:	490d      	ldr	r1, [pc, #52]	; (800a1bc <rand+0x78>)
 800a186:	4342      	muls	r2, r0
 800a188:	fb01 2203 	mla	r2, r1, r3, r2
 800a18c:	fba0 0101 	umull	r0, r1, r0, r1
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	eb42 0001 	adc.w	r0, r2, r1
 800a196:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a19a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a19e:	bd10      	pop	{r4, pc}
 800a1a0:	20000074 	.word	0x20000074
 800a1a4:	0800b18c 	.word	0x0800b18c
 800a1a8:	0800b1a3 	.word	0x0800b1a3
 800a1ac:	abcd330e 	.word	0xabcd330e
 800a1b0:	e66d1234 	.word	0xe66d1234
 800a1b4:	0005deec 	.word	0x0005deec
 800a1b8:	5851f42d 	.word	0x5851f42d
 800a1bc:	4c957f2d 	.word	0x4c957f2d

0800a1c0 <_sbrk_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d06      	ldr	r5, [pc, #24]	; (800a1dc <_sbrk_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7ff fc60 	bl	8009a90 <_sbrk>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_sbrk_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_sbrk_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20003730 	.word	0x20003730

0800a1e0 <time>:
 800a1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1e2:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <time+0x30>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4669      	mov	r1, sp
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	f000 f842 	bl	800a274 <_gettimeofday_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	bfbe      	ittt	lt
 800a1f4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800a1f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1fc:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a204:	b10c      	cbz	r4, 800a20a <time+0x2a>
 800a206:	e9c4 0100 	strd	r0, r1, [r4]
 800a20a:	b004      	add	sp, #16
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	20000074 	.word	0x20000074

0800a214 <__assert_func>:
 800a214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a216:	4614      	mov	r4, r2
 800a218:	461a      	mov	r2, r3
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <__assert_func+0x2c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	68d8      	ldr	r0, [r3, #12]
 800a222:	b14c      	cbz	r4, 800a238 <__assert_func+0x24>
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <__assert_func+0x30>)
 800a226:	9100      	str	r1, [sp, #0]
 800a228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a22c:	4906      	ldr	r1, [pc, #24]	; (800a248 <__assert_func+0x34>)
 800a22e:	462b      	mov	r3, r5
 800a230:	f000 f80e 	bl	800a250 <fiprintf>
 800a234:	f000 fbea 	bl	800aa0c <abort>
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <__assert_func+0x38>)
 800a23a:	461c      	mov	r4, r3
 800a23c:	e7f3      	b.n	800a226 <__assert_func+0x12>
 800a23e:	bf00      	nop
 800a240:	20000074 	.word	0x20000074
 800a244:	0800b1fe 	.word	0x0800b1fe
 800a248:	0800b20b 	.word	0x0800b20b
 800a24c:	0800b239 	.word	0x0800b239

0800a250 <fiprintf>:
 800a250:	b40e      	push	{r1, r2, r3}
 800a252:	b503      	push	{r0, r1, lr}
 800a254:	4601      	mov	r1, r0
 800a256:	ab03      	add	r3, sp, #12
 800a258:	4805      	ldr	r0, [pc, #20]	; (800a270 <fiprintf+0x20>)
 800a25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25e:	6800      	ldr	r0, [r0, #0]
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	f000 f84f 	bl	800a304 <_vfiprintf_r>
 800a266:	b002      	add	sp, #8
 800a268:	f85d eb04 	ldr.w	lr, [sp], #4
 800a26c:	b003      	add	sp, #12
 800a26e:	4770      	bx	lr
 800a270:	20000074 	.word	0x20000074

0800a274 <_gettimeofday_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_gettimeofday_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f000 fedb 	bl	800b03c <_gettimeofday>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_gettimeofday_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_gettimeofday_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	20003730 	.word	0x20003730

0800a298 <__malloc_lock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_lock+0x8>)
 800a29a:	f000 bd77 	b.w	800ad8c <__retarget_lock_acquire_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20003734 	.word	0x20003734

0800a2a4 <__malloc_unlock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__malloc_unlock+0x8>)
 800a2a6:	f000 bd72 	b.w	800ad8e <__retarget_lock_release_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	20003734 	.word	0x20003734

0800a2b0 <__sfputc_r>:
 800a2b0:	6893      	ldr	r3, [r2, #8]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	b410      	push	{r4}
 800a2b8:	6093      	str	r3, [r2, #8]
 800a2ba:	da08      	bge.n	800a2ce <__sfputc_r+0x1e>
 800a2bc:	6994      	ldr	r4, [r2, #24]
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	db01      	blt.n	800a2c6 <__sfputc_r+0x16>
 800a2c2:	290a      	cmp	r1, #10
 800a2c4:	d103      	bne.n	800a2ce <__sfputc_r+0x1e>
 800a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ca:	f000 badf 	b.w	800a88c <__swbuf_r>
 800a2ce:	6813      	ldr	r3, [r2, #0]
 800a2d0:	1c58      	adds	r0, r3, #1
 800a2d2:	6010      	str	r0, [r2, #0]
 800a2d4:	7019      	strb	r1, [r3, #0]
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <__sfputs_r>:
 800a2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	18d5      	adds	r5, r2, r3
 800a2e8:	42ac      	cmp	r4, r5
 800a2ea:	d101      	bne.n	800a2f0 <__sfputs_r+0x12>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	e007      	b.n	800a300 <__sfputs_r+0x22>
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	463a      	mov	r2, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffda 	bl	800a2b0 <__sfputc_r>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d1f3      	bne.n	800a2e8 <__sfputs_r+0xa>
 800a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a304 <_vfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	460d      	mov	r5, r1
 800a30a:	b09d      	sub	sp, #116	; 0x74
 800a30c:	4614      	mov	r4, r2
 800a30e:	4698      	mov	r8, r3
 800a310:	4606      	mov	r6, r0
 800a312:	b118      	cbz	r0, 800a31c <_vfiprintf_r+0x18>
 800a314:	6983      	ldr	r3, [r0, #24]
 800a316:	b90b      	cbnz	r3, 800a31c <_vfiprintf_r+0x18>
 800a318:	f000 fc9a 	bl	800ac50 <__sinit>
 800a31c:	4b89      	ldr	r3, [pc, #548]	; (800a544 <_vfiprintf_r+0x240>)
 800a31e:	429d      	cmp	r5, r3
 800a320:	d11b      	bne.n	800a35a <_vfiprintf_r+0x56>
 800a322:	6875      	ldr	r5, [r6, #4]
 800a324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d405      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a32a:	89ab      	ldrh	r3, [r5, #12]
 800a32c:	059a      	lsls	r2, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a332:	f000 fd2b 	bl	800ad8c <__retarget_lock_acquire_recursive>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	071b      	lsls	r3, r3, #28
 800a33a:	d501      	bpl.n	800a340 <_vfiprintf_r+0x3c>
 800a33c:	692b      	ldr	r3, [r5, #16]
 800a33e:	b9eb      	cbnz	r3, 800a37c <_vfiprintf_r+0x78>
 800a340:	4629      	mov	r1, r5
 800a342:	4630      	mov	r0, r6
 800a344:	f000 faf4 	bl	800a930 <__swsetup_r>
 800a348:	b1c0      	cbz	r0, 800a37c <_vfiprintf_r+0x78>
 800a34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a34c:	07dc      	lsls	r4, r3, #31
 800a34e:	d50e      	bpl.n	800a36e <_vfiprintf_r+0x6a>
 800a350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a354:	b01d      	add	sp, #116	; 0x74
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	4b7b      	ldr	r3, [pc, #492]	; (800a548 <_vfiprintf_r+0x244>)
 800a35c:	429d      	cmp	r5, r3
 800a35e:	d101      	bne.n	800a364 <_vfiprintf_r+0x60>
 800a360:	68b5      	ldr	r5, [r6, #8]
 800a362:	e7df      	b.n	800a324 <_vfiprintf_r+0x20>
 800a364:	4b79      	ldr	r3, [pc, #484]	; (800a54c <_vfiprintf_r+0x248>)
 800a366:	429d      	cmp	r5, r3
 800a368:	bf08      	it	eq
 800a36a:	68f5      	ldreq	r5, [r6, #12]
 800a36c:	e7da      	b.n	800a324 <_vfiprintf_r+0x20>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	0598      	lsls	r0, r3, #22
 800a372:	d4ed      	bmi.n	800a350 <_vfiprintf_r+0x4c>
 800a374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a376:	f000 fd0a 	bl	800ad8e <__retarget_lock_release_recursive>
 800a37a:	e7e9      	b.n	800a350 <_vfiprintf_r+0x4c>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9309      	str	r3, [sp, #36]	; 0x24
 800a380:	2320      	movs	r3, #32
 800a382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a386:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38a:	2330      	movs	r3, #48	; 0x30
 800a38c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a550 <_vfiprintf_r+0x24c>
 800a390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a394:	f04f 0901 	mov.w	r9, #1
 800a398:	4623      	mov	r3, r4
 800a39a:	469a      	mov	sl, r3
 800a39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a0:	b10a      	cbz	r2, 800a3a6 <_vfiprintf_r+0xa2>
 800a3a2:	2a25      	cmp	r2, #37	; 0x25
 800a3a4:	d1f9      	bne.n	800a39a <_vfiprintf_r+0x96>
 800a3a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3aa:	d00b      	beq.n	800a3c4 <_vfiprintf_r+0xc0>
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff93 	bl	800a2de <__sfputs_r>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f000 80aa 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c0:	445a      	add	r2, fp
 800a3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 80a2 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d8:	f10a 0a01 	add.w	sl, sl, #1
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3e6:	4654      	mov	r4, sl
 800a3e8:	2205      	movs	r2, #5
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4858      	ldr	r0, [pc, #352]	; (800a550 <_vfiprintf_r+0x24c>)
 800a3f0:	f7f5 feee 	bl	80001d0 <memchr>
 800a3f4:	9a04      	ldr	r2, [sp, #16]
 800a3f6:	b9d8      	cbnz	r0, 800a430 <_vfiprintf_r+0x12c>
 800a3f8:	06d1      	lsls	r1, r2, #27
 800a3fa:	bf44      	itt	mi
 800a3fc:	2320      	movmi	r3, #32
 800a3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a402:	0713      	lsls	r3, r2, #28
 800a404:	bf44      	itt	mi
 800a406:	232b      	movmi	r3, #43	; 0x2b
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40c:	f89a 3000 	ldrb.w	r3, [sl]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d015      	beq.n	800a440 <_vfiprintf_r+0x13c>
 800a414:	9a07      	ldr	r2, [sp, #28]
 800a416:	4654      	mov	r4, sl
 800a418:	2000      	movs	r0, #0
 800a41a:	f04f 0c0a 	mov.w	ip, #10
 800a41e:	4621      	mov	r1, r4
 800a420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a424:	3b30      	subs	r3, #48	; 0x30
 800a426:	2b09      	cmp	r3, #9
 800a428:	d94e      	bls.n	800a4c8 <_vfiprintf_r+0x1c4>
 800a42a:	b1b0      	cbz	r0, 800a45a <_vfiprintf_r+0x156>
 800a42c:	9207      	str	r2, [sp, #28]
 800a42e:	e014      	b.n	800a45a <_vfiprintf_r+0x156>
 800a430:	eba0 0308 	sub.w	r3, r0, r8
 800a434:	fa09 f303 	lsl.w	r3, r9, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	46a2      	mov	sl, r4
 800a43e:	e7d2      	b.n	800a3e6 <_vfiprintf_r+0xe2>
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	1d19      	adds	r1, r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	9103      	str	r1, [sp, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bfbb      	ittet	lt
 800a44c:	425b      	neglt	r3, r3
 800a44e:	f042 0202 	orrlt.w	r2, r2, #2
 800a452:	9307      	strge	r3, [sp, #28]
 800a454:	9307      	strlt	r3, [sp, #28]
 800a456:	bfb8      	it	lt
 800a458:	9204      	strlt	r2, [sp, #16]
 800a45a:	7823      	ldrb	r3, [r4, #0]
 800a45c:	2b2e      	cmp	r3, #46	; 0x2e
 800a45e:	d10c      	bne.n	800a47a <_vfiprintf_r+0x176>
 800a460:	7863      	ldrb	r3, [r4, #1]
 800a462:	2b2a      	cmp	r3, #42	; 0x2a
 800a464:	d135      	bne.n	800a4d2 <_vfiprintf_r+0x1ce>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9203      	str	r2, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfb8      	it	lt
 800a472:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a476:	3402      	adds	r4, #2
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a560 <_vfiprintf_r+0x25c>
 800a47e:	7821      	ldrb	r1, [r4, #0]
 800a480:	2203      	movs	r2, #3
 800a482:	4650      	mov	r0, sl
 800a484:	f7f5 fea4 	bl	80001d0 <memchr>
 800a488:	b140      	cbz	r0, 800a49c <_vfiprintf_r+0x198>
 800a48a:	2340      	movs	r3, #64	; 0x40
 800a48c:	eba0 000a 	sub.w	r0, r0, sl
 800a490:	fa03 f000 	lsl.w	r0, r3, r0
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	4303      	orrs	r3, r0
 800a498:	3401      	adds	r4, #1
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	482c      	ldr	r0, [pc, #176]	; (800a554 <_vfiprintf_r+0x250>)
 800a4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4a6:	2206      	movs	r2, #6
 800a4a8:	f7f5 fe92 	bl	80001d0 <memchr>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d03f      	beq.n	800a530 <_vfiprintf_r+0x22c>
 800a4b0:	4b29      	ldr	r3, [pc, #164]	; (800a558 <_vfiprintf_r+0x254>)
 800a4b2:	bb1b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x1f8>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	3307      	adds	r3, #7
 800a4b8:	f023 0307 	bic.w	r3, r3, #7
 800a4bc:	3308      	adds	r3, #8
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	443b      	add	r3, r7
 800a4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c6:	e767      	b.n	800a398 <_vfiprintf_r+0x94>
 800a4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	e7a5      	b.n	800a41e <_vfiprintf_r+0x11a>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0c0a 	mov.w	ip, #10
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e4:	3a30      	subs	r2, #48	; 0x30
 800a4e6:	2a09      	cmp	r2, #9
 800a4e8:	d903      	bls.n	800a4f2 <_vfiprintf_r+0x1ee>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0c5      	beq.n	800a47a <_vfiprintf_r+0x176>
 800a4ee:	9105      	str	r1, [sp, #20]
 800a4f0:	e7c3      	b.n	800a47a <_vfiprintf_r+0x176>
 800a4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7f0      	b.n	800a4de <_vfiprintf_r+0x1da>
 800a4fc:	ab03      	add	r3, sp, #12
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	462a      	mov	r2, r5
 800a502:	4b16      	ldr	r3, [pc, #88]	; (800a55c <_vfiprintf_r+0x258>)
 800a504:	a904      	add	r1, sp, #16
 800a506:	4630      	mov	r0, r6
 800a508:	f3af 8000 	nop.w
 800a50c:	4607      	mov	r7, r0
 800a50e:	1c78      	adds	r0, r7, #1
 800a510:	d1d6      	bne.n	800a4c0 <_vfiprintf_r+0x1bc>
 800a512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a514:	07d9      	lsls	r1, r3, #31
 800a516:	d405      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a518:	89ab      	ldrh	r3, [r5, #12]
 800a51a:	059a      	lsls	r2, r3, #22
 800a51c:	d402      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a520:	f000 fc35 	bl	800ad8e <__retarget_lock_release_recursive>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af12 	bmi.w	800a350 <_vfiprintf_r+0x4c>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	e711      	b.n	800a354 <_vfiprintf_r+0x50>
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <_vfiprintf_r+0x258>)
 800a538:	a904      	add	r1, sp, #16
 800a53a:	4630      	mov	r0, r6
 800a53c:	f000 f880 	bl	800a640 <_printf_i>
 800a540:	e7e4      	b.n	800a50c <_vfiprintf_r+0x208>
 800a542:	bf00      	nop
 800a544:	0800b290 	.word	0x0800b290
 800a548:	0800b2b0 	.word	0x0800b2b0
 800a54c:	0800b270 	.word	0x0800b270
 800a550:	0800b23a 	.word	0x0800b23a
 800a554:	0800b244 	.word	0x0800b244
 800a558:	00000000 	.word	0x00000000
 800a55c:	0800a2df 	.word	0x0800a2df
 800a560:	0800b240 	.word	0x0800b240

0800a564 <_printf_common>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	4616      	mov	r6, r2
 800a56a:	4699      	mov	r9, r3
 800a56c:	688a      	ldr	r2, [r1, #8]
 800a56e:	690b      	ldr	r3, [r1, #16]
 800a570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a574:	4293      	cmp	r3, r2
 800a576:	bfb8      	it	lt
 800a578:	4613      	movlt	r3, r2
 800a57a:	6033      	str	r3, [r6, #0]
 800a57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a580:	4607      	mov	r7, r0
 800a582:	460c      	mov	r4, r1
 800a584:	b10a      	cbz	r2, 800a58a <_printf_common+0x26>
 800a586:	3301      	adds	r3, #1
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	0699      	lsls	r1, r3, #26
 800a58e:	bf42      	ittt	mi
 800a590:	6833      	ldrmi	r3, [r6, #0]
 800a592:	3302      	addmi	r3, #2
 800a594:	6033      	strmi	r3, [r6, #0]
 800a596:	6825      	ldr	r5, [r4, #0]
 800a598:	f015 0506 	ands.w	r5, r5, #6
 800a59c:	d106      	bne.n	800a5ac <_printf_common+0x48>
 800a59e:	f104 0a19 	add.w	sl, r4, #25
 800a5a2:	68e3      	ldr	r3, [r4, #12]
 800a5a4:	6832      	ldr	r2, [r6, #0]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	42ab      	cmp	r3, r5
 800a5aa:	dc26      	bgt.n	800a5fa <_printf_common+0x96>
 800a5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5b0:	1e13      	subs	r3, r2, #0
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	bf18      	it	ne
 800a5b6:	2301      	movne	r3, #1
 800a5b8:	0692      	lsls	r2, r2, #26
 800a5ba:	d42b      	bmi.n	800a614 <_printf_common+0xb0>
 800a5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c0      	blx	r8
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d01e      	beq.n	800a608 <_printf_common+0xa4>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	68e5      	ldr	r5, [r4, #12]
 800a5ce:	6832      	ldr	r2, [r6, #0]
 800a5d0:	f003 0306 	and.w	r3, r3, #6
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	bf08      	it	eq
 800a5d8:	1aad      	subeq	r5, r5, r2
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	6922      	ldr	r2, [r4, #16]
 800a5de:	bf0c      	ite	eq
 800a5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e4:	2500      	movne	r5, #0
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bfc4      	itt	gt
 800a5ea:	1a9b      	subgt	r3, r3, r2
 800a5ec:	18ed      	addgt	r5, r5, r3
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	341a      	adds	r4, #26
 800a5f2:	42b5      	cmp	r5, r6
 800a5f4:	d11a      	bne.n	800a62c <_printf_common+0xc8>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e008      	b.n	800a60c <_printf_common+0xa8>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4652      	mov	r2, sl
 800a5fe:	4649      	mov	r1, r9
 800a600:	4638      	mov	r0, r7
 800a602:	47c0      	blx	r8
 800a604:	3001      	adds	r0, #1
 800a606:	d103      	bne.n	800a610 <_printf_common+0xac>
 800a608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	3501      	adds	r5, #1
 800a612:	e7c6      	b.n	800a5a2 <_printf_common+0x3e>
 800a614:	18e1      	adds	r1, r4, r3
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	2030      	movs	r0, #48	; 0x30
 800a61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a61e:	4422      	add	r2, r4
 800a620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a628:	3302      	adds	r3, #2
 800a62a:	e7c7      	b.n	800a5bc <_printf_common+0x58>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4622      	mov	r2, r4
 800a630:	4649      	mov	r1, r9
 800a632:	4638      	mov	r0, r7
 800a634:	47c0      	blx	r8
 800a636:	3001      	adds	r0, #1
 800a638:	d0e6      	beq.n	800a608 <_printf_common+0xa4>
 800a63a:	3601      	adds	r6, #1
 800a63c:	e7d9      	b.n	800a5f2 <_printf_common+0x8e>
	...

0800a640 <_printf_i>:
 800a640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a644:	7e0f      	ldrb	r7, [r1, #24]
 800a646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a648:	2f78      	cmp	r7, #120	; 0x78
 800a64a:	4691      	mov	r9, r2
 800a64c:	4680      	mov	r8, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	469a      	mov	sl, r3
 800a652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a656:	d807      	bhi.n	800a668 <_printf_i+0x28>
 800a658:	2f62      	cmp	r7, #98	; 0x62
 800a65a:	d80a      	bhi.n	800a672 <_printf_i+0x32>
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	f000 80d8 	beq.w	800a812 <_printf_i+0x1d2>
 800a662:	2f58      	cmp	r7, #88	; 0x58
 800a664:	f000 80a3 	beq.w	800a7ae <_printf_i+0x16e>
 800a668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a670:	e03a      	b.n	800a6e8 <_printf_i+0xa8>
 800a672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a676:	2b15      	cmp	r3, #21
 800a678:	d8f6      	bhi.n	800a668 <_printf_i+0x28>
 800a67a:	a101      	add	r1, pc, #4	; (adr r1, 800a680 <_printf_i+0x40>)
 800a67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a680:	0800a6d9 	.word	0x0800a6d9
 800a684:	0800a6ed 	.word	0x0800a6ed
 800a688:	0800a669 	.word	0x0800a669
 800a68c:	0800a669 	.word	0x0800a669
 800a690:	0800a669 	.word	0x0800a669
 800a694:	0800a669 	.word	0x0800a669
 800a698:	0800a6ed 	.word	0x0800a6ed
 800a69c:	0800a669 	.word	0x0800a669
 800a6a0:	0800a669 	.word	0x0800a669
 800a6a4:	0800a669 	.word	0x0800a669
 800a6a8:	0800a669 	.word	0x0800a669
 800a6ac:	0800a7f9 	.word	0x0800a7f9
 800a6b0:	0800a71d 	.word	0x0800a71d
 800a6b4:	0800a7db 	.word	0x0800a7db
 800a6b8:	0800a669 	.word	0x0800a669
 800a6bc:	0800a669 	.word	0x0800a669
 800a6c0:	0800a81b 	.word	0x0800a81b
 800a6c4:	0800a669 	.word	0x0800a669
 800a6c8:	0800a71d 	.word	0x0800a71d
 800a6cc:	0800a669 	.word	0x0800a669
 800a6d0:	0800a669 	.word	0x0800a669
 800a6d4:	0800a7e3 	.word	0x0800a7e3
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	1d1a      	adds	r2, r3, #4
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	602a      	str	r2, [r5, #0]
 800a6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e0a3      	b.n	800a834 <_printf_i+0x1f4>
 800a6ec:	6820      	ldr	r0, [r4, #0]
 800a6ee:	6829      	ldr	r1, [r5, #0]
 800a6f0:	0606      	lsls	r6, r0, #24
 800a6f2:	f101 0304 	add.w	r3, r1, #4
 800a6f6:	d50a      	bpl.n	800a70e <_printf_i+0xce>
 800a6f8:	680e      	ldr	r6, [r1, #0]
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	2e00      	cmp	r6, #0
 800a6fe:	da03      	bge.n	800a708 <_printf_i+0xc8>
 800a700:	232d      	movs	r3, #45	; 0x2d
 800a702:	4276      	negs	r6, r6
 800a704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a708:	485e      	ldr	r0, [pc, #376]	; (800a884 <_printf_i+0x244>)
 800a70a:	230a      	movs	r3, #10
 800a70c:	e019      	b.n	800a742 <_printf_i+0x102>
 800a70e:	680e      	ldr	r6, [r1, #0]
 800a710:	602b      	str	r3, [r5, #0]
 800a712:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a716:	bf18      	it	ne
 800a718:	b236      	sxthne	r6, r6
 800a71a:	e7ef      	b.n	800a6fc <_printf_i+0xbc>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	6820      	ldr	r0, [r4, #0]
 800a720:	1d19      	adds	r1, r3, #4
 800a722:	6029      	str	r1, [r5, #0]
 800a724:	0601      	lsls	r1, r0, #24
 800a726:	d501      	bpl.n	800a72c <_printf_i+0xec>
 800a728:	681e      	ldr	r6, [r3, #0]
 800a72a:	e002      	b.n	800a732 <_printf_i+0xf2>
 800a72c:	0646      	lsls	r6, r0, #25
 800a72e:	d5fb      	bpl.n	800a728 <_printf_i+0xe8>
 800a730:	881e      	ldrh	r6, [r3, #0]
 800a732:	4854      	ldr	r0, [pc, #336]	; (800a884 <_printf_i+0x244>)
 800a734:	2f6f      	cmp	r7, #111	; 0x6f
 800a736:	bf0c      	ite	eq
 800a738:	2308      	moveq	r3, #8
 800a73a:	230a      	movne	r3, #10
 800a73c:	2100      	movs	r1, #0
 800a73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a742:	6865      	ldr	r5, [r4, #4]
 800a744:	60a5      	str	r5, [r4, #8]
 800a746:	2d00      	cmp	r5, #0
 800a748:	bfa2      	ittt	ge
 800a74a:	6821      	ldrge	r1, [r4, #0]
 800a74c:	f021 0104 	bicge.w	r1, r1, #4
 800a750:	6021      	strge	r1, [r4, #0]
 800a752:	b90e      	cbnz	r6, 800a758 <_printf_i+0x118>
 800a754:	2d00      	cmp	r5, #0
 800a756:	d04d      	beq.n	800a7f4 <_printf_i+0x1b4>
 800a758:	4615      	mov	r5, r2
 800a75a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a75e:	fb03 6711 	mls	r7, r3, r1, r6
 800a762:	5dc7      	ldrb	r7, [r0, r7]
 800a764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a768:	4637      	mov	r7, r6
 800a76a:	42bb      	cmp	r3, r7
 800a76c:	460e      	mov	r6, r1
 800a76e:	d9f4      	bls.n	800a75a <_printf_i+0x11a>
 800a770:	2b08      	cmp	r3, #8
 800a772:	d10b      	bne.n	800a78c <_printf_i+0x14c>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	07de      	lsls	r6, r3, #31
 800a778:	d508      	bpl.n	800a78c <_printf_i+0x14c>
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	6861      	ldr	r1, [r4, #4]
 800a77e:	4299      	cmp	r1, r3
 800a780:	bfde      	ittt	le
 800a782:	2330      	movle	r3, #48	; 0x30
 800a784:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a788:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a78c:	1b52      	subs	r2, r2, r5
 800a78e:	6122      	str	r2, [r4, #16]
 800a790:	f8cd a000 	str.w	sl, [sp]
 800a794:	464b      	mov	r3, r9
 800a796:	aa03      	add	r2, sp, #12
 800a798:	4621      	mov	r1, r4
 800a79a:	4640      	mov	r0, r8
 800a79c:	f7ff fee2 	bl	800a564 <_printf_common>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d14c      	bne.n	800a83e <_printf_i+0x1fe>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a8:	b004      	add	sp, #16
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	4835      	ldr	r0, [pc, #212]	; (800a884 <_printf_i+0x244>)
 800a7b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7b4:	6829      	ldr	r1, [r5, #0]
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7bc:	6029      	str	r1, [r5, #0]
 800a7be:	061d      	lsls	r5, r3, #24
 800a7c0:	d514      	bpl.n	800a7ec <_printf_i+0x1ac>
 800a7c2:	07df      	lsls	r7, r3, #31
 800a7c4:	bf44      	itt	mi
 800a7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ca:	6023      	strmi	r3, [r4, #0]
 800a7cc:	b91e      	cbnz	r6, 800a7d6 <_printf_i+0x196>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	f023 0320 	bic.w	r3, r3, #32
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	2310      	movs	r3, #16
 800a7d8:	e7b0      	b.n	800a73c <_printf_i+0xfc>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	f043 0320 	orr.w	r3, r3, #32
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	2378      	movs	r3, #120	; 0x78
 800a7e4:	4828      	ldr	r0, [pc, #160]	; (800a888 <_printf_i+0x248>)
 800a7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7ea:	e7e3      	b.n	800a7b4 <_printf_i+0x174>
 800a7ec:	0659      	lsls	r1, r3, #25
 800a7ee:	bf48      	it	mi
 800a7f0:	b2b6      	uxthmi	r6, r6
 800a7f2:	e7e6      	b.n	800a7c2 <_printf_i+0x182>
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	e7bb      	b.n	800a770 <_printf_i+0x130>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	6826      	ldr	r6, [r4, #0]
 800a7fc:	6961      	ldr	r1, [r4, #20]
 800a7fe:	1d18      	adds	r0, r3, #4
 800a800:	6028      	str	r0, [r5, #0]
 800a802:	0635      	lsls	r5, r6, #24
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	d501      	bpl.n	800a80c <_printf_i+0x1cc>
 800a808:	6019      	str	r1, [r3, #0]
 800a80a:	e002      	b.n	800a812 <_printf_i+0x1d2>
 800a80c:	0670      	lsls	r0, r6, #25
 800a80e:	d5fb      	bpl.n	800a808 <_printf_i+0x1c8>
 800a810:	8019      	strh	r1, [r3, #0]
 800a812:	2300      	movs	r3, #0
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	4615      	mov	r5, r2
 800a818:	e7ba      	b.n	800a790 <_printf_i+0x150>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	602a      	str	r2, [r5, #0]
 800a820:	681d      	ldr	r5, [r3, #0]
 800a822:	6862      	ldr	r2, [r4, #4]
 800a824:	2100      	movs	r1, #0
 800a826:	4628      	mov	r0, r5
 800a828:	f7f5 fcd2 	bl	80001d0 <memchr>
 800a82c:	b108      	cbz	r0, 800a832 <_printf_i+0x1f2>
 800a82e:	1b40      	subs	r0, r0, r5
 800a830:	6060      	str	r0, [r4, #4]
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	6123      	str	r3, [r4, #16]
 800a836:	2300      	movs	r3, #0
 800a838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a83c:	e7a8      	b.n	800a790 <_printf_i+0x150>
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	462a      	mov	r2, r5
 800a842:	4649      	mov	r1, r9
 800a844:	4640      	mov	r0, r8
 800a846:	47d0      	blx	sl
 800a848:	3001      	adds	r0, #1
 800a84a:	d0ab      	beq.n	800a7a4 <_printf_i+0x164>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	079b      	lsls	r3, r3, #30
 800a850:	d413      	bmi.n	800a87a <_printf_i+0x23a>
 800a852:	68e0      	ldr	r0, [r4, #12]
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	4298      	cmp	r0, r3
 800a858:	bfb8      	it	lt
 800a85a:	4618      	movlt	r0, r3
 800a85c:	e7a4      	b.n	800a7a8 <_printf_i+0x168>
 800a85e:	2301      	movs	r3, #1
 800a860:	4632      	mov	r2, r6
 800a862:	4649      	mov	r1, r9
 800a864:	4640      	mov	r0, r8
 800a866:	47d0      	blx	sl
 800a868:	3001      	adds	r0, #1
 800a86a:	d09b      	beq.n	800a7a4 <_printf_i+0x164>
 800a86c:	3501      	adds	r5, #1
 800a86e:	68e3      	ldr	r3, [r4, #12]
 800a870:	9903      	ldr	r1, [sp, #12]
 800a872:	1a5b      	subs	r3, r3, r1
 800a874:	42ab      	cmp	r3, r5
 800a876:	dcf2      	bgt.n	800a85e <_printf_i+0x21e>
 800a878:	e7eb      	b.n	800a852 <_printf_i+0x212>
 800a87a:	2500      	movs	r5, #0
 800a87c:	f104 0619 	add.w	r6, r4, #25
 800a880:	e7f5      	b.n	800a86e <_printf_i+0x22e>
 800a882:	bf00      	nop
 800a884:	0800b24b 	.word	0x0800b24b
 800a888:	0800b25c 	.word	0x0800b25c

0800a88c <__swbuf_r>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	460e      	mov	r6, r1
 800a890:	4614      	mov	r4, r2
 800a892:	4605      	mov	r5, r0
 800a894:	b118      	cbz	r0, 800a89e <__swbuf_r+0x12>
 800a896:	6983      	ldr	r3, [r0, #24]
 800a898:	b90b      	cbnz	r3, 800a89e <__swbuf_r+0x12>
 800a89a:	f000 f9d9 	bl	800ac50 <__sinit>
 800a89e:	4b21      	ldr	r3, [pc, #132]	; (800a924 <__swbuf_r+0x98>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	d12b      	bne.n	800a8fc <__swbuf_r+0x70>
 800a8a4:	686c      	ldr	r4, [r5, #4]
 800a8a6:	69a3      	ldr	r3, [r4, #24]
 800a8a8:	60a3      	str	r3, [r4, #8]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	071a      	lsls	r2, r3, #28
 800a8ae:	d52f      	bpl.n	800a910 <__swbuf_r+0x84>
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	b36b      	cbz	r3, 800a910 <__swbuf_r+0x84>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	6820      	ldr	r0, [r4, #0]
 800a8b8:	1ac0      	subs	r0, r0, r3
 800a8ba:	6963      	ldr	r3, [r4, #20]
 800a8bc:	b2f6      	uxtb	r6, r6
 800a8be:	4283      	cmp	r3, r0
 800a8c0:	4637      	mov	r7, r6
 800a8c2:	dc04      	bgt.n	800a8ce <__swbuf_r+0x42>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 f92e 	bl	800ab28 <_fflush_r>
 800a8cc:	bb30      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	60a3      	str	r3, [r4, #8]
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	6022      	str	r2, [r4, #0]
 800a8da:	701e      	strb	r6, [r3, #0]
 800a8dc:	6963      	ldr	r3, [r4, #20]
 800a8de:	3001      	adds	r0, #1
 800a8e0:	4283      	cmp	r3, r0
 800a8e2:	d004      	beq.n	800a8ee <__swbuf_r+0x62>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	07db      	lsls	r3, r3, #31
 800a8e8:	d506      	bpl.n	800a8f8 <__swbuf_r+0x6c>
 800a8ea:	2e0a      	cmp	r6, #10
 800a8ec:	d104      	bne.n	800a8f8 <__swbuf_r+0x6c>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 f919 	bl	800ab28 <_fflush_r>
 800a8f6:	b988      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <__swbuf_r+0x9c>)
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d101      	bne.n	800a906 <__swbuf_r+0x7a>
 800a902:	68ac      	ldr	r4, [r5, #8]
 800a904:	e7cf      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <__swbuf_r+0xa0>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	bf08      	it	eq
 800a90c:	68ec      	ldreq	r4, [r5, #12]
 800a90e:	e7ca      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a910:	4621      	mov	r1, r4
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f80c 	bl	800a930 <__swsetup_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d0cb      	beq.n	800a8b4 <__swbuf_r+0x28>
 800a91c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a920:	e7ea      	b.n	800a8f8 <__swbuf_r+0x6c>
 800a922:	bf00      	nop
 800a924:	0800b290 	.word	0x0800b290
 800a928:	0800b2b0 	.word	0x0800b2b0
 800a92c:	0800b270 	.word	0x0800b270

0800a930 <__swsetup_r>:
 800a930:	4b32      	ldr	r3, [pc, #200]	; (800a9fc <__swsetup_r+0xcc>)
 800a932:	b570      	push	{r4, r5, r6, lr}
 800a934:	681d      	ldr	r5, [r3, #0]
 800a936:	4606      	mov	r6, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	b125      	cbz	r5, 800a946 <__swsetup_r+0x16>
 800a93c:	69ab      	ldr	r3, [r5, #24]
 800a93e:	b913      	cbnz	r3, 800a946 <__swsetup_r+0x16>
 800a940:	4628      	mov	r0, r5
 800a942:	f000 f985 	bl	800ac50 <__sinit>
 800a946:	4b2e      	ldr	r3, [pc, #184]	; (800aa00 <__swsetup_r+0xd0>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	d10f      	bne.n	800a96c <__swsetup_r+0x3c>
 800a94c:	686c      	ldr	r4, [r5, #4]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a954:	0719      	lsls	r1, r3, #28
 800a956:	d42c      	bmi.n	800a9b2 <__swsetup_r+0x82>
 800a958:	06dd      	lsls	r5, r3, #27
 800a95a:	d411      	bmi.n	800a980 <__swsetup_r+0x50>
 800a95c:	2309      	movs	r3, #9
 800a95e:	6033      	str	r3, [r6, #0]
 800a960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a96a:	e03e      	b.n	800a9ea <__swsetup_r+0xba>
 800a96c:	4b25      	ldr	r3, [pc, #148]	; (800aa04 <__swsetup_r+0xd4>)
 800a96e:	429c      	cmp	r4, r3
 800a970:	d101      	bne.n	800a976 <__swsetup_r+0x46>
 800a972:	68ac      	ldr	r4, [r5, #8]
 800a974:	e7eb      	b.n	800a94e <__swsetup_r+0x1e>
 800a976:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <__swsetup_r+0xd8>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	bf08      	it	eq
 800a97c:	68ec      	ldreq	r4, [r5, #12]
 800a97e:	e7e6      	b.n	800a94e <__swsetup_r+0x1e>
 800a980:	0758      	lsls	r0, r3, #29
 800a982:	d512      	bpl.n	800a9aa <__swsetup_r+0x7a>
 800a984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a986:	b141      	cbz	r1, 800a99a <__swsetup_r+0x6a>
 800a988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d002      	beq.n	800a996 <__swsetup_r+0x66>
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff fac9 	bl	8009f28 <_free_r>
 800a996:	2300      	movs	r3, #0
 800a998:	6363      	str	r3, [r4, #52]	; 0x34
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f043 0308 	orr.w	r3, r3, #8
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <__swsetup_r+0x9a>
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9c0:	d003      	beq.n	800a9ca <__swsetup_r+0x9a>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 fa09 	bl	800addc <__smakebuf_r>
 800a9ca:	89a0      	ldrh	r0, [r4, #12]
 800a9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d0:	f010 0301 	ands.w	r3, r0, #1
 800a9d4:	d00a      	beq.n	800a9ec <__swsetup_r+0xbc>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	6963      	ldr	r3, [r4, #20]
 800a9dc:	425b      	negs	r3, r3
 800a9de:	61a3      	str	r3, [r4, #24]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	b943      	cbnz	r3, 800a9f6 <__swsetup_r+0xc6>
 800a9e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9e8:	d1ba      	bne.n	800a960 <__swsetup_r+0x30>
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0781      	lsls	r1, r0, #30
 800a9ee:	bf58      	it	pl
 800a9f0:	6963      	ldrpl	r3, [r4, #20]
 800a9f2:	60a3      	str	r3, [r4, #8]
 800a9f4:	e7f4      	b.n	800a9e0 <__swsetup_r+0xb0>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e7f7      	b.n	800a9ea <__swsetup_r+0xba>
 800a9fa:	bf00      	nop
 800a9fc:	20000074 	.word	0x20000074
 800aa00:	0800b290 	.word	0x0800b290
 800aa04:	0800b2b0 	.word	0x0800b2b0
 800aa08:	0800b270 	.word	0x0800b270

0800aa0c <abort>:
 800aa0c:	b508      	push	{r3, lr}
 800aa0e:	2006      	movs	r0, #6
 800aa10:	f000 fa4c 	bl	800aeac <raise>
 800aa14:	2001      	movs	r0, #1
 800aa16:	f7fe ffc3 	bl	80099a0 <_exit>
	...

0800aa1c <__sflush_r>:
 800aa1c:	898a      	ldrh	r2, [r1, #12]
 800aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	4605      	mov	r5, r0
 800aa24:	0710      	lsls	r0, r2, #28
 800aa26:	460c      	mov	r4, r1
 800aa28:	d458      	bmi.n	800aadc <__sflush_r+0xc0>
 800aa2a:	684b      	ldr	r3, [r1, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc05      	bgt.n	800aa3c <__sflush_r+0x20>
 800aa30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dc02      	bgt.n	800aa3c <__sflush_r+0x20>
 800aa36:	2000      	movs	r0, #0
 800aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d0f9      	beq.n	800aa36 <__sflush_r+0x1a>
 800aa42:	2300      	movs	r3, #0
 800aa44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa48:	682f      	ldr	r7, [r5, #0]
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	d032      	beq.n	800aab4 <__sflush_r+0x98>
 800aa4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	075a      	lsls	r2, r3, #29
 800aa54:	d505      	bpl.n	800aa62 <__sflush_r+0x46>
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	1ac0      	subs	r0, r0, r3
 800aa5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa5c:	b10b      	cbz	r3, 800aa62 <__sflush_r+0x46>
 800aa5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa60:	1ac0      	subs	r0, r0, r3
 800aa62:	2300      	movs	r3, #0
 800aa64:	4602      	mov	r2, r0
 800aa66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa68:	6a21      	ldr	r1, [r4, #32]
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	47b0      	blx	r6
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	d106      	bne.n	800aa82 <__sflush_r+0x66>
 800aa74:	6829      	ldr	r1, [r5, #0]
 800aa76:	291d      	cmp	r1, #29
 800aa78:	d82c      	bhi.n	800aad4 <__sflush_r+0xb8>
 800aa7a:	4a2a      	ldr	r2, [pc, #168]	; (800ab24 <__sflush_r+0x108>)
 800aa7c:	40ca      	lsrs	r2, r1
 800aa7e:	07d6      	lsls	r6, r2, #31
 800aa80:	d528      	bpl.n	800aad4 <__sflush_r+0xb8>
 800aa82:	2200      	movs	r2, #0
 800aa84:	6062      	str	r2, [r4, #4]
 800aa86:	04d9      	lsls	r1, r3, #19
 800aa88:	6922      	ldr	r2, [r4, #16]
 800aa8a:	6022      	str	r2, [r4, #0]
 800aa8c:	d504      	bpl.n	800aa98 <__sflush_r+0x7c>
 800aa8e:	1c42      	adds	r2, r0, #1
 800aa90:	d101      	bne.n	800aa96 <__sflush_r+0x7a>
 800aa92:	682b      	ldr	r3, [r5, #0]
 800aa94:	b903      	cbnz	r3, 800aa98 <__sflush_r+0x7c>
 800aa96:	6560      	str	r0, [r4, #84]	; 0x54
 800aa98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa9a:	602f      	str	r7, [r5, #0]
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	d0ca      	beq.n	800aa36 <__sflush_r+0x1a>
 800aaa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	d002      	beq.n	800aaae <__sflush_r+0x92>
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f7ff fa3d 	bl	8009f28 <_free_r>
 800aaae:	2000      	movs	r0, #0
 800aab0:	6360      	str	r0, [r4, #52]	; 0x34
 800aab2:	e7c1      	b.n	800aa38 <__sflush_r+0x1c>
 800aab4:	6a21      	ldr	r1, [r4, #32]
 800aab6:	2301      	movs	r3, #1
 800aab8:	4628      	mov	r0, r5
 800aaba:	47b0      	blx	r6
 800aabc:	1c41      	adds	r1, r0, #1
 800aabe:	d1c7      	bne.n	800aa50 <__sflush_r+0x34>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0c4      	beq.n	800aa50 <__sflush_r+0x34>
 800aac6:	2b1d      	cmp	r3, #29
 800aac8:	d001      	beq.n	800aace <__sflush_r+0xb2>
 800aaca:	2b16      	cmp	r3, #22
 800aacc:	d101      	bne.n	800aad2 <__sflush_r+0xb6>
 800aace:	602f      	str	r7, [r5, #0]
 800aad0:	e7b1      	b.n	800aa36 <__sflush_r+0x1a>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	e7ad      	b.n	800aa38 <__sflush_r+0x1c>
 800aadc:	690f      	ldr	r7, [r1, #16]
 800aade:	2f00      	cmp	r7, #0
 800aae0:	d0a9      	beq.n	800aa36 <__sflush_r+0x1a>
 800aae2:	0793      	lsls	r3, r2, #30
 800aae4:	680e      	ldr	r6, [r1, #0]
 800aae6:	bf08      	it	eq
 800aae8:	694b      	ldreq	r3, [r1, #20]
 800aaea:	600f      	str	r7, [r1, #0]
 800aaec:	bf18      	it	ne
 800aaee:	2300      	movne	r3, #0
 800aaf0:	eba6 0807 	sub.w	r8, r6, r7
 800aaf4:	608b      	str	r3, [r1, #8]
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	dd9c      	ble.n	800aa36 <__sflush_r+0x1a>
 800aafc:	6a21      	ldr	r1, [r4, #32]
 800aafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab00:	4643      	mov	r3, r8
 800ab02:	463a      	mov	r2, r7
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b0      	blx	r6
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	dc06      	bgt.n	800ab1a <__sflush_r+0xfe>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab18:	e78e      	b.n	800aa38 <__sflush_r+0x1c>
 800ab1a:	4407      	add	r7, r0
 800ab1c:	eba8 0800 	sub.w	r8, r8, r0
 800ab20:	e7e9      	b.n	800aaf6 <__sflush_r+0xda>
 800ab22:	bf00      	nop
 800ab24:	20400001 	.word	0x20400001

0800ab28 <_fflush_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	690b      	ldr	r3, [r1, #16]
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	b913      	cbnz	r3, 800ab38 <_fflush_r+0x10>
 800ab32:	2500      	movs	r5, #0
 800ab34:	4628      	mov	r0, r5
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	b118      	cbz	r0, 800ab42 <_fflush_r+0x1a>
 800ab3a:	6983      	ldr	r3, [r0, #24]
 800ab3c:	b90b      	cbnz	r3, 800ab42 <_fflush_r+0x1a>
 800ab3e:	f000 f887 	bl	800ac50 <__sinit>
 800ab42:	4b14      	ldr	r3, [pc, #80]	; (800ab94 <_fflush_r+0x6c>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	d11b      	bne.n	800ab80 <_fflush_r+0x58>
 800ab48:	686c      	ldr	r4, [r5, #4]
 800ab4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0ef      	beq.n	800ab32 <_fflush_r+0xa>
 800ab52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab54:	07d0      	lsls	r0, r2, #31
 800ab56:	d404      	bmi.n	800ab62 <_fflush_r+0x3a>
 800ab58:	0599      	lsls	r1, r3, #22
 800ab5a:	d402      	bmi.n	800ab62 <_fflush_r+0x3a>
 800ab5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab5e:	f000 f915 	bl	800ad8c <__retarget_lock_acquire_recursive>
 800ab62:	4628      	mov	r0, r5
 800ab64:	4621      	mov	r1, r4
 800ab66:	f7ff ff59 	bl	800aa1c <__sflush_r>
 800ab6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab6c:	07da      	lsls	r2, r3, #31
 800ab6e:	4605      	mov	r5, r0
 800ab70:	d4e0      	bmi.n	800ab34 <_fflush_r+0xc>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	059b      	lsls	r3, r3, #22
 800ab76:	d4dd      	bmi.n	800ab34 <_fflush_r+0xc>
 800ab78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7a:	f000 f908 	bl	800ad8e <__retarget_lock_release_recursive>
 800ab7e:	e7d9      	b.n	800ab34 <_fflush_r+0xc>
 800ab80:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <_fflush_r+0x70>)
 800ab82:	429c      	cmp	r4, r3
 800ab84:	d101      	bne.n	800ab8a <_fflush_r+0x62>
 800ab86:	68ac      	ldr	r4, [r5, #8]
 800ab88:	e7df      	b.n	800ab4a <_fflush_r+0x22>
 800ab8a:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <_fflush_r+0x74>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	bf08      	it	eq
 800ab90:	68ec      	ldreq	r4, [r5, #12]
 800ab92:	e7da      	b.n	800ab4a <_fflush_r+0x22>
 800ab94:	0800b290 	.word	0x0800b290
 800ab98:	0800b2b0 	.word	0x0800b2b0
 800ab9c:	0800b270 	.word	0x0800b270

0800aba0 <std>:
 800aba0:	2300      	movs	r3, #0
 800aba2:	b510      	push	{r4, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	e9c0 3300 	strd	r3, r3, [r0]
 800abaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abae:	6083      	str	r3, [r0, #8]
 800abb0:	8181      	strh	r1, [r0, #12]
 800abb2:	6643      	str	r3, [r0, #100]	; 0x64
 800abb4:	81c2      	strh	r2, [r0, #14]
 800abb6:	6183      	str	r3, [r0, #24]
 800abb8:	4619      	mov	r1, r3
 800abba:	2208      	movs	r2, #8
 800abbc:	305c      	adds	r0, #92	; 0x5c
 800abbe:	f7ff f9ab 	bl	8009f18 <memset>
 800abc2:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <std+0x38>)
 800abc4:	6263      	str	r3, [r4, #36]	; 0x24
 800abc6:	4b05      	ldr	r3, [pc, #20]	; (800abdc <std+0x3c>)
 800abc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800abca:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <std+0x40>)
 800abcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <std+0x44>)
 800abd0:	6224      	str	r4, [r4, #32]
 800abd2:	6323      	str	r3, [r4, #48]	; 0x30
 800abd4:	bd10      	pop	{r4, pc}
 800abd6:	bf00      	nop
 800abd8:	0800aee5 	.word	0x0800aee5
 800abdc:	0800af07 	.word	0x0800af07
 800abe0:	0800af3f 	.word	0x0800af3f
 800abe4:	0800af63 	.word	0x0800af63

0800abe8 <_cleanup_r>:
 800abe8:	4901      	ldr	r1, [pc, #4]	; (800abf0 <_cleanup_r+0x8>)
 800abea:	f000 b8af 	b.w	800ad4c <_fwalk_reent>
 800abee:	bf00      	nop
 800abf0:	0800ab29 	.word	0x0800ab29

0800abf4 <__sfmoreglue>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	2268      	movs	r2, #104	; 0x68
 800abf8:	1e4d      	subs	r5, r1, #1
 800abfa:	4355      	muls	r5, r2
 800abfc:	460e      	mov	r6, r1
 800abfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac02:	f7ff f9fd 	bl	800a000 <_malloc_r>
 800ac06:	4604      	mov	r4, r0
 800ac08:	b140      	cbz	r0, 800ac1c <__sfmoreglue+0x28>
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac10:	300c      	adds	r0, #12
 800ac12:	60a0      	str	r0, [r4, #8]
 800ac14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac18:	f7ff f97e 	bl	8009f18 <memset>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}

0800ac20 <__sfp_lock_acquire>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__sfp_lock_acquire+0x8>)
 800ac22:	f000 b8b3 	b.w	800ad8c <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20003735 	.word	0x20003735

0800ac2c <__sfp_lock_release>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <__sfp_lock_release+0x8>)
 800ac2e:	f000 b8ae 	b.w	800ad8e <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20003735 	.word	0x20003735

0800ac38 <__sinit_lock_acquire>:
 800ac38:	4801      	ldr	r0, [pc, #4]	; (800ac40 <__sinit_lock_acquire+0x8>)
 800ac3a:	f000 b8a7 	b.w	800ad8c <__retarget_lock_acquire_recursive>
 800ac3e:	bf00      	nop
 800ac40:	20003736 	.word	0x20003736

0800ac44 <__sinit_lock_release>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__sinit_lock_release+0x8>)
 800ac46:	f000 b8a2 	b.w	800ad8e <__retarget_lock_release_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	20003736 	.word	0x20003736

0800ac50 <__sinit>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	4604      	mov	r4, r0
 800ac54:	f7ff fff0 	bl	800ac38 <__sinit_lock_acquire>
 800ac58:	69a3      	ldr	r3, [r4, #24]
 800ac5a:	b11b      	cbz	r3, 800ac64 <__sinit+0x14>
 800ac5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac60:	f7ff bff0 	b.w	800ac44 <__sinit_lock_release>
 800ac64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac68:	6523      	str	r3, [r4, #80]	; 0x50
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <__sinit+0x68>)
 800ac6c:	4a13      	ldr	r2, [pc, #76]	; (800acbc <__sinit+0x6c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	bf04      	itt	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	61a3      	streq	r3, [r4, #24]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f820 	bl	800acc0 <__sfp>
 800ac80:	6060      	str	r0, [r4, #4]
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f81c 	bl	800acc0 <__sfp>
 800ac88:	60a0      	str	r0, [r4, #8]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 f818 	bl	800acc0 <__sfp>
 800ac90:	2200      	movs	r2, #0
 800ac92:	60e0      	str	r0, [r4, #12]
 800ac94:	2104      	movs	r1, #4
 800ac96:	6860      	ldr	r0, [r4, #4]
 800ac98:	f7ff ff82 	bl	800aba0 <std>
 800ac9c:	68a0      	ldr	r0, [r4, #8]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	2109      	movs	r1, #9
 800aca2:	f7ff ff7d 	bl	800aba0 <std>
 800aca6:	68e0      	ldr	r0, [r4, #12]
 800aca8:	2202      	movs	r2, #2
 800acaa:	2112      	movs	r1, #18
 800acac:	f7ff ff78 	bl	800aba0 <std>
 800acb0:	2301      	movs	r3, #1
 800acb2:	61a3      	str	r3, [r4, #24]
 800acb4:	e7d2      	b.n	800ac5c <__sinit+0xc>
 800acb6:	bf00      	nop
 800acb8:	0800b188 	.word	0x0800b188
 800acbc:	0800abe9 	.word	0x0800abe9

0800acc0 <__sfp>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	4607      	mov	r7, r0
 800acc4:	f7ff ffac 	bl	800ac20 <__sfp_lock_acquire>
 800acc8:	4b1e      	ldr	r3, [pc, #120]	; (800ad44 <__sfp+0x84>)
 800acca:	681e      	ldr	r6, [r3, #0]
 800accc:	69b3      	ldr	r3, [r6, #24]
 800acce:	b913      	cbnz	r3, 800acd6 <__sfp+0x16>
 800acd0:	4630      	mov	r0, r6
 800acd2:	f7ff ffbd 	bl	800ac50 <__sinit>
 800acd6:	3648      	adds	r6, #72	; 0x48
 800acd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acdc:	3b01      	subs	r3, #1
 800acde:	d503      	bpl.n	800ace8 <__sfp+0x28>
 800ace0:	6833      	ldr	r3, [r6, #0]
 800ace2:	b30b      	cbz	r3, 800ad28 <__sfp+0x68>
 800ace4:	6836      	ldr	r6, [r6, #0]
 800ace6:	e7f7      	b.n	800acd8 <__sfp+0x18>
 800ace8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acec:	b9d5      	cbnz	r5, 800ad24 <__sfp+0x64>
 800acee:	4b16      	ldr	r3, [pc, #88]	; (800ad48 <__sfp+0x88>)
 800acf0:	60e3      	str	r3, [r4, #12]
 800acf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acf6:	6665      	str	r5, [r4, #100]	; 0x64
 800acf8:	f000 f847 	bl	800ad8a <__retarget_lock_init_recursive>
 800acfc:	f7ff ff96 	bl	800ac2c <__sfp_lock_release>
 800ad00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad08:	6025      	str	r5, [r4, #0]
 800ad0a:	61a5      	str	r5, [r4, #24]
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad14:	f7ff f900 	bl	8009f18 <memset>
 800ad18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad20:	4620      	mov	r0, r4
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	3468      	adds	r4, #104	; 0x68
 800ad26:	e7d9      	b.n	800acdc <__sfp+0x1c>
 800ad28:	2104      	movs	r1, #4
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff ff62 	bl	800abf4 <__sfmoreglue>
 800ad30:	4604      	mov	r4, r0
 800ad32:	6030      	str	r0, [r6, #0]
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1d5      	bne.n	800ace4 <__sfp+0x24>
 800ad38:	f7ff ff78 	bl	800ac2c <__sfp_lock_release>
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	603b      	str	r3, [r7, #0]
 800ad40:	e7ee      	b.n	800ad20 <__sfp+0x60>
 800ad42:	bf00      	nop
 800ad44:	0800b188 	.word	0x0800b188
 800ad48:	ffff0001 	.word	0xffff0001

0800ad4c <_fwalk_reent>:
 800ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	4606      	mov	r6, r0
 800ad52:	4688      	mov	r8, r1
 800ad54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad58:	2700      	movs	r7, #0
 800ad5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad62:	d505      	bpl.n	800ad70 <_fwalk_reent+0x24>
 800ad64:	6824      	ldr	r4, [r4, #0]
 800ad66:	2c00      	cmp	r4, #0
 800ad68:	d1f7      	bne.n	800ad5a <_fwalk_reent+0xe>
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad70:	89ab      	ldrh	r3, [r5, #12]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d907      	bls.n	800ad86 <_fwalk_reent+0x3a>
 800ad76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	d003      	beq.n	800ad86 <_fwalk_reent+0x3a>
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4630      	mov	r0, r6
 800ad82:	47c0      	blx	r8
 800ad84:	4307      	orrs	r7, r0
 800ad86:	3568      	adds	r5, #104	; 0x68
 800ad88:	e7e9      	b.n	800ad5e <_fwalk_reent+0x12>

0800ad8a <__retarget_lock_init_recursive>:
 800ad8a:	4770      	bx	lr

0800ad8c <__retarget_lock_acquire_recursive>:
 800ad8c:	4770      	bx	lr

0800ad8e <__retarget_lock_release_recursive>:
 800ad8e:	4770      	bx	lr

0800ad90 <__swhatbuf_r>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	460e      	mov	r6, r1
 800ad94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	b096      	sub	sp, #88	; 0x58
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	461d      	mov	r5, r3
 800ada0:	da08      	bge.n	800adb4 <__swhatbuf_r+0x24>
 800ada2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	061a      	lsls	r2, r3, #24
 800adac:	d410      	bmi.n	800add0 <__swhatbuf_r+0x40>
 800adae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb2:	e00e      	b.n	800add2 <__swhatbuf_r+0x42>
 800adb4:	466a      	mov	r2, sp
 800adb6:	f000 f8fb 	bl	800afb0 <_fstat_r>
 800adba:	2800      	cmp	r0, #0
 800adbc:	dbf1      	blt.n	800ada2 <__swhatbuf_r+0x12>
 800adbe:	9a01      	ldr	r2, [sp, #4]
 800adc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adc8:	425a      	negs	r2, r3
 800adca:	415a      	adcs	r2, r3
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	e7ee      	b.n	800adae <__swhatbuf_r+0x1e>
 800add0:	2340      	movs	r3, #64	; 0x40
 800add2:	2000      	movs	r0, #0
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	b016      	add	sp, #88	; 0x58
 800add8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800addc <__smakebuf_r>:
 800addc:	898b      	ldrh	r3, [r1, #12]
 800adde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ade0:	079d      	lsls	r5, r3, #30
 800ade2:	4606      	mov	r6, r0
 800ade4:	460c      	mov	r4, r1
 800ade6:	d507      	bpl.n	800adf8 <__smakebuf_r+0x1c>
 800ade8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	2301      	movs	r3, #1
 800adf2:	6163      	str	r3, [r4, #20]
 800adf4:	b002      	add	sp, #8
 800adf6:	bd70      	pop	{r4, r5, r6, pc}
 800adf8:	ab01      	add	r3, sp, #4
 800adfa:	466a      	mov	r2, sp
 800adfc:	f7ff ffc8 	bl	800ad90 <__swhatbuf_r>
 800ae00:	9900      	ldr	r1, [sp, #0]
 800ae02:	4605      	mov	r5, r0
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff f8fb 	bl	800a000 <_malloc_r>
 800ae0a:	b948      	cbnz	r0, 800ae20 <__smakebuf_r+0x44>
 800ae0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae10:	059a      	lsls	r2, r3, #22
 800ae12:	d4ef      	bmi.n	800adf4 <__smakebuf_r+0x18>
 800ae14:	f023 0303 	bic.w	r3, r3, #3
 800ae18:	f043 0302 	orr.w	r3, r3, #2
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	e7e3      	b.n	800ade8 <__smakebuf_r+0xc>
 800ae20:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <__smakebuf_r+0x7c>)
 800ae22:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	6020      	str	r0, [r4, #0]
 800ae28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	6163      	str	r3, [r4, #20]
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	6120      	str	r0, [r4, #16]
 800ae36:	b15b      	cbz	r3, 800ae50 <__smakebuf_r+0x74>
 800ae38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f000 f8c9 	bl	800afd4 <_isatty_r>
 800ae42:	b128      	cbz	r0, 800ae50 <__smakebuf_r+0x74>
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	89a0      	ldrh	r0, [r4, #12]
 800ae52:	4305      	orrs	r5, r0
 800ae54:	81a5      	strh	r5, [r4, #12]
 800ae56:	e7cd      	b.n	800adf4 <__smakebuf_r+0x18>
 800ae58:	0800abe9 	.word	0x0800abe9

0800ae5c <_raise_r>:
 800ae5c:	291f      	cmp	r1, #31
 800ae5e:	b538      	push	{r3, r4, r5, lr}
 800ae60:	4604      	mov	r4, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	d904      	bls.n	800ae70 <_raise_r+0x14>
 800ae66:	2316      	movs	r3, #22
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae72:	b112      	cbz	r2, 800ae7a <_raise_r+0x1e>
 800ae74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae78:	b94b      	cbnz	r3, 800ae8e <_raise_r+0x32>
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 f830 	bl	800aee0 <_getpid_r>
 800ae80:	462a      	mov	r2, r5
 800ae82:	4601      	mov	r1, r0
 800ae84:	4620      	mov	r0, r4
 800ae86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae8a:	f000 b817 	b.w	800aebc <_kill_r>
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d00a      	beq.n	800aea8 <_raise_r+0x4c>
 800ae92:	1c59      	adds	r1, r3, #1
 800ae94:	d103      	bne.n	800ae9e <_raise_r+0x42>
 800ae96:	2316      	movs	r3, #22
 800ae98:	6003      	str	r3, [r0, #0]
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	e7e7      	b.n	800ae6e <_raise_r+0x12>
 800ae9e:	2400      	movs	r4, #0
 800aea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aea4:	4628      	mov	r0, r5
 800aea6:	4798      	blx	r3
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e7e0      	b.n	800ae6e <_raise_r+0x12>

0800aeac <raise>:
 800aeac:	4b02      	ldr	r3, [pc, #8]	; (800aeb8 <raise+0xc>)
 800aeae:	4601      	mov	r1, r0
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	f7ff bfd3 	b.w	800ae5c <_raise_r>
 800aeb6:	bf00      	nop
 800aeb8:	20000074 	.word	0x20000074

0800aebc <_kill_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d07      	ldr	r5, [pc, #28]	; (800aedc <_kill_r+0x20>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	4611      	mov	r1, r2
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	f7fe fd59 	bl	8009980 <_kill>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	d102      	bne.n	800aed8 <_kill_r+0x1c>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	b103      	cbz	r3, 800aed8 <_kill_r+0x1c>
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	20003730 	.word	0x20003730

0800aee0 <_getpid_r>:
 800aee0:	f7fe bd46 	b.w	8009970 <_getpid>

0800aee4 <__sread>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	460c      	mov	r4, r1
 800aee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeec:	f000 f894 	bl	800b018 <_read_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	bfab      	itete	ge
 800aef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aef6:	89a3      	ldrhlt	r3, [r4, #12]
 800aef8:	181b      	addge	r3, r3, r0
 800aefa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aefe:	bfac      	ite	ge
 800af00:	6563      	strge	r3, [r4, #84]	; 0x54
 800af02:	81a3      	strhlt	r3, [r4, #12]
 800af04:	bd10      	pop	{r4, pc}

0800af06 <__swrite>:
 800af06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0a:	461f      	mov	r7, r3
 800af0c:	898b      	ldrh	r3, [r1, #12]
 800af0e:	05db      	lsls	r3, r3, #23
 800af10:	4605      	mov	r5, r0
 800af12:	460c      	mov	r4, r1
 800af14:	4616      	mov	r6, r2
 800af16:	d505      	bpl.n	800af24 <__swrite+0x1e>
 800af18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1c:	2302      	movs	r3, #2
 800af1e:	2200      	movs	r2, #0
 800af20:	f000 f868 	bl	800aff4 <_lseek_r>
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af2e:	81a3      	strh	r3, [r4, #12]
 800af30:	4632      	mov	r2, r6
 800af32:	463b      	mov	r3, r7
 800af34:	4628      	mov	r0, r5
 800af36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	f000 b817 	b.w	800af6c <_write_r>

0800af3e <__sseek>:
 800af3e:	b510      	push	{r4, lr}
 800af40:	460c      	mov	r4, r1
 800af42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af46:	f000 f855 	bl	800aff4 <_lseek_r>
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	bf15      	itete	ne
 800af50:	6560      	strne	r0, [r4, #84]	; 0x54
 800af52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af5a:	81a3      	strheq	r3, [r4, #12]
 800af5c:	bf18      	it	ne
 800af5e:	81a3      	strhne	r3, [r4, #12]
 800af60:	bd10      	pop	{r4, pc}

0800af62 <__sclose>:
 800af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af66:	f000 b813 	b.w	800af90 <_close_r>
	...

0800af6c <_write_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4d07      	ldr	r5, [pc, #28]	; (800af8c <_write_r+0x20>)
 800af70:	4604      	mov	r4, r0
 800af72:	4608      	mov	r0, r1
 800af74:	4611      	mov	r1, r2
 800af76:	2200      	movs	r2, #0
 800af78:	602a      	str	r2, [r5, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7fe fd37 	bl	80099ee <_write>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_write_r+0x1e>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_write_r+0x1e>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	20003730 	.word	0x20003730

0800af90 <_close_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_close_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7fe fd43 	bl	8009a26 <_close>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_close_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_close_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20003730 	.word	0x20003730

0800afb0 <_fstat_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	; (800afd0 <_fstat_r+0x20>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	f7fe fd3e 	bl	8009a3e <_fstat>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d102      	bne.n	800afcc <_fstat_r+0x1c>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b103      	cbz	r3, 800afcc <_fstat_r+0x1c>
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	20003730 	.word	0x20003730

0800afd4 <_isatty_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	; (800aff0 <_isatty_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7fe fd3d 	bl	8009a5e <_isatty>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_isatty_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_isatty_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	20003730 	.word	0x20003730

0800aff4 <_lseek_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	; (800b014 <_lseek_r+0x20>)
 800aff8:	4604      	mov	r4, r0
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	2200      	movs	r2, #0
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f7fe fd36 	bl	8009a74 <_lseek>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_lseek_r+0x1e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_lseek_r+0x1e>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20003730 	.word	0x20003730

0800b018 <_read_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d07      	ldr	r5, [pc, #28]	; (800b038 <_read_r+0x20>)
 800b01c:	4604      	mov	r4, r0
 800b01e:	4608      	mov	r0, r1
 800b020:	4611      	mov	r1, r2
 800b022:	2200      	movs	r2, #0
 800b024:	602a      	str	r2, [r5, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	f7fe fcc4 	bl	80099b4 <_read>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_read_r+0x1e>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_read_r+0x1e>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	20003730 	.word	0x20003730

0800b03c <_gettimeofday>:
 800b03c:	4b02      	ldr	r3, [pc, #8]	; (800b048 <_gettimeofday+0xc>)
 800b03e:	2258      	movs	r2, #88	; 0x58
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b046:	4770      	bx	lr
 800b048:	20003730 	.word	0x20003730

0800b04c <_init>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr

0800b058 <_fini>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr
