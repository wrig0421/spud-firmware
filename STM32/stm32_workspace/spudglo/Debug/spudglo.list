
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080bc  080080bc  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c4  080080c4  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c8c  20000110  080081dc  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d9c  080081dc  00022d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002013e  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004908  00000000  00000000  0004027e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00044b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  000465c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006608  00000000  00000000  00047e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020741  00000000  00000000  0004e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68f4  00000000  00000000  0006eb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016546d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075d0  00000000  00000000  001654c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0016ca90  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0016cab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e58 	.word	0x08007e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08007e58 	.word	0x08007e58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <semaphore_create>:
SemaphoreHandle_t g_dma_fill_semaphore;
StaticSemaphore_t g_dma_fill_semaphore_buffer;


void semaphore_create(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
    g_dma_transfer_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_transfer_semaphore_buffer);
 800057a:	2303      	movs	r3, #3
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <semaphore_create+0x54>)
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fadf 	bl	8000b48 <xQueueGenericCreateStatic>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <semaphore_create+0x58>)
 800058e:	6013      	str	r3, [r2, #0]
    g_dma_fill_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_fill_semaphore_buffer);
 8000590:	2303      	movs	r3, #3
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <semaphore_create+0x5c>)
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fad4 	bl	8000b48 <xQueueGenericCreateStatic>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <semaphore_create+0x60>)
 80005a4:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(g_dma_transfer_semaphore);
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <semaphore_create+0x58>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f000 fb66 	bl	8000c80 <xQueueGenericSend>
    xSemaphoreGive(g_dma_fill_semaphore);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <semaphore_create+0x60>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	f000 fb5f 	bl	8000c80 <xQueueGenericSend>
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000130 	.word	0x20000130
 80005cc:	2000012c 	.word	0x2000012c
 80005d0:	20000184 	.word	0x20000184
 80005d4:	20000180 	.word	0x20000180

080005d8 <task_led_ctrl_strip_two>:



uint8_t rx_buffer[8] = {0x38};
void task_led_ctrl_strip_two(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    while (task_button_press_major_change)
 80005e0:	e002      	b.n	80005e8 <task_led_ctrl_strip_two+0x10>
    {
        osDelay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 f944 	bl	8000870 <osDelay>
    while (task_button_press_major_change)
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <task_led_ctrl_strip_two+0x38>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f8      	bne.n	80005e2 <task_led_ctrl_strip_two+0xa>
    }
    while (1)
    {
        if(HAL_UART_Transmit(&gh_host_usart, rx_buffer, 4, 10000) == HAL_OK)
 80005f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80005f4:	2204      	movs	r2, #4
 80005f6:	4907      	ldr	r1, [pc, #28]	; (8000614 <task_led_ctrl_strip_two+0x3c>)
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <task_led_ctrl_strip_two+0x40>)
 80005fa:	f005 fa5e 	bl	8005aba <HAL_UART_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f5      	bne.n	80005f0 <task_led_ctrl_strip_two+0x18>
        {
            osDelay(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000608:	f000 f932 	bl	8000870 <osDelay>
        if(HAL_UART_Transmit(&gh_host_usart, rx_buffer, 4, 10000) == HAL_OK)
 800060c:	e7f0      	b.n	80005f0 <task_led_ctrl_strip_two+0x18>
 800060e:	bf00      	nop
 8000610:	200001f4 	.word	0x200001f4
 8000614:	20000000 	.word	0x20000000
 8000618:	20000020 	.word	0x20000020

0800061c <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);

    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <reset_ws2812b+0x2c>)
 8000624:	2100      	movs	r1, #0
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <reset_ws2812b+0x30>)
 8000628:	f004 fdc2 	bl	80051b0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <reset_ws2812b+0x2c>)
 8000630:	2104      	movs	r1, #4
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <reset_ws2812b+0x30>)
 8000634:	f004 fdbc 	bl	80051b0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	4a03      	ldr	r2, [pc, #12]	; (8000648 <reset_ws2812b+0x2c>)
 800063c:	2108      	movs	r1, #8
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <reset_ws2812b+0x30>)
 8000640:	f004 fdb6 	bl	80051b0 <HAL_TIM_PWM_Start_DMA>
//    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
//    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001f8 	.word	0x200001f8
 800064c:	20001cd0 	.word	0x20001cd0

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80006a8:	2100      	movs	r1, #0
 80006aa:	f06f 0004 	mvn.w	r0, #4
 80006ae:	f7ff ffcf 	bl	8000650 <__NVIC_SetPriority>
#endif
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80006be:	f3ef 8305 	mrs	r3, IPSR
 80006c2:	603b      	str	r3, [r7, #0]
  return(result);
 80006c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80006ca:	f06f 0305 	mvn.w	r3, #5
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	e00c      	b.n	80006ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <osKernelInitialize+0x44>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d105      	bne.n	80006e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <osKernelInitialize+0x44>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	e002      	b.n	80006ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000025c 	.word	0x2000025c

08000700 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000706:	f3ef 8305 	mrs	r3, IPSR
 800070a:	603b      	str	r3, [r7, #0]
  return(result);
 800070c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <osKernelStart+0x1a>
    stat = osErrorISR;
 8000712:	f06f 0305 	mvn.w	r3, #5
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e010      	b.n	800073c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <osKernelStart+0x48>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d109      	bne.n	8000736 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8000722:	f7ff ffbf 	bl	80006a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <osKernelStart+0x48>)
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800072c:	f001 f866 	bl	80017fc <vTaskStartScheduler>
      stat = osOK;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	e002      	b.n	800073c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000025c 	.word	0x2000025c

0800074c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af04      	add	r7, sp, #16
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800075c:	f3ef 8305 	mrs	r3, IPSR
 8000760:	617b      	str	r3, [r7, #20]
  return(result);
 8000762:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000764:	2b00      	cmp	r3, #0
 8000766:	d17e      	bne.n	8000866 <osThreadNew+0x11a>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d07b      	beq.n	8000866 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000772:	2318      	movs	r3, #24
 8000774:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d045      	beq.n	8000812 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <osThreadNew+0x48>
        name = attr->name;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <osThreadNew+0x6e>
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b38      	cmp	r3, #56	; 0x38
 80007ac:	d805      	bhi.n	80007ba <osThreadNew+0x6e>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <osThreadNew+0x72>
        return (NULL);
 80007ba:	2300      	movs	r3, #0
 80007bc:	e054      	b.n	8000868 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00e      	beq.n	80007f4 <osThreadNew+0xa8>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	2b5b      	cmp	r3, #91	; 0x5b
 80007dc:	d90a      	bls.n	80007f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <osThreadNew+0xa8>
        mem = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	e010      	b.n	8000816 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10c      	bne.n	8000816 <osThreadNew+0xca>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d108      	bne.n	8000816 <osThreadNew+0xca>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <osThreadNew+0xca>
          mem = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	e001      	b.n	8000816 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d110      	bne.n	800083e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000824:	9202      	str	r2, [sp, #8]
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6a3a      	ldr	r2, [r7, #32]
 8000830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 fe0c 	bl	8001450 <xTaskCreateStatic>
 8000838:	4603      	mov	r3, r0
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	e013      	b.n	8000866 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d110      	bne.n	8000866 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f000 fe57 	bl	800150a <xTaskCreate>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d001      	beq.n	8000866 <osThreadNew+0x11a>
            hTask = NULL;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000866:	693b      	ldr	r3, [r7, #16]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000878:	f3ef 8305 	mrs	r3, IPSR
 800087c:	60bb      	str	r3, [r7, #8]
  return(result);
 800087e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <osDelay+0x1c>
    stat = osErrorISR;
 8000884:	f06f 0305 	mvn.w	r3, #5
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e007      	b.n	800089c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <osDelay+0x2c>
      vTaskDelay(ticks);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 ff7c 	bl	8001794 <vTaskDelay>
    }
  }

  return (stat);
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <vApplicationGetIdleTaskMemory+0x30>)
 80008be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000260 	.word	0x20000260
 80008d8:	200002bc 	.word	0x200002bc

080008dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <vApplicationGetTimerTaskMemory+0x2c>)
 80008ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <vApplicationGetTimerTaskMemory+0x30>)
 80008f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	200004bc 	.word	0x200004bc
 800090c:	20000518 	.word	0x20000518

08000910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f103 0208 	add.w	r2, r3, #8
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f103 0208 	add.w	r2, r3, #8
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f103 0208 	add.w	r2, r3, #8
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c8:	d103      	bne.n	80009d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e00c      	b.n	80009ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3308      	adds	r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e002      	b.n	80009e0 <vListInsert+0x2e>
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d2f6      	bcs.n	80009da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6892      	ldr	r2, [r2, #8]
 8000a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6852      	ldr	r2, [r2, #4]
 8000a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d103      	bne.n	8000a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10a      	bne.n	8000aa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a9e:	bf00      	nop
 8000aa0:	e7fe      	b.n	8000aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000aa2:	f002 f93f 	bl	8002d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	441a      	add	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	68f9      	ldr	r1, [r7, #12]
 8000ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ad8:	fb01 f303 	mul.w	r3, r1, r3
 8000adc:	441a      	add	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d114      	bne.n	8000b22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d01a      	beq.n	8000b36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3310      	adds	r3, #16
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 f915 	bl	8001d34 <xTaskRemoveFromEventList>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d012      	beq.n	8000b36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <xQueueGenericReset+0xcc>)
 8000b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	f3bf 8f4f 	dsb	sy
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	e009      	b.n	8000b36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3310      	adds	r3, #16
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fef2 	bl	8000910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3324      	adds	r3, #36	; 0x24
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff feed 	bl	8000910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b36:	f002 f925 	bl	8002d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	e000ed04 	.word	0xe000ed04

08000b48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10a      	bne.n	8000b72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b60:	f383 8811 	msr	BASEPRI, r3
 8000b64:	f3bf 8f6f 	isb	sy
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b6e:	bf00      	nop
 8000b70:	e7fe      	b.n	8000b70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b7c:	f383 8811 	msr	BASEPRI, r3
 8000b80:	f3bf 8f6f 	isb	sy
 8000b84:	f3bf 8f4f 	dsb	sy
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b8a:	bf00      	nop
 8000b8c:	e7fe      	b.n	8000b8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <xQueueGenericCreateStatic+0x52>
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <xQueueGenericCreateStatic+0x56>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <xQueueGenericCreateStatic+0x58>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10a      	bne.n	8000bba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba8:	f383 8811 	msr	BASEPRI, r3
 8000bac:	f3bf 8f6f 	isb	sy
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	623b      	str	r3, [r7, #32]
}
 8000bb6:	bf00      	nop
 8000bb8:	e7fe      	b.n	8000bb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <xQueueGenericCreateStatic+0x7e>
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <xQueueGenericCreateStatic+0x82>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <xQueueGenericCreateStatic+0x84>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10a      	bne.n	8000be6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd4:	f383 8811 	msr	BASEPRI, r3
 8000bd8:	f3bf 8f6f 	isb	sy
 8000bdc:	f3bf 8f4f 	dsb	sy
 8000be0:	61fb      	str	r3, [r7, #28]
}
 8000be2:	bf00      	nop
 8000be4:	e7fe      	b.n	8000be4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000be6:	2350      	movs	r3, #80	; 0x50
 8000be8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b50      	cmp	r3, #80	; 0x50
 8000bee:	d00a      	beq.n	8000c06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	61bb      	str	r3, [r7, #24]
}
 8000c02:	bf00      	nop
 8000c04:	e7fe      	b.n	8000c04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00d      	beq.n	8000c2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f000 f805 	bl	8000c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d103      	bne.n	8000c54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e002      	b.n	8000c5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c66:	2101      	movs	r1, #1
 8000c68:	69b8      	ldr	r0, [r7, #24]
 8000c6a:	f7ff ff05 	bl	8000a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10a      	bne.n	8000cb2 <xQueueGenericSend+0x32>
	__asm volatile
 8000c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca0:	f383 8811 	msr	BASEPRI, r3
 8000ca4:	f3bf 8f6f 	isb	sy
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000cae:	bf00      	nop
 8000cb0:	e7fe      	b.n	8000cb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d103      	bne.n	8000cc0 <xQueueGenericSend+0x40>
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <xQueueGenericSend+0x44>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <xQueueGenericSend+0x46>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10a      	bne.n	8000ce0 <xQueueGenericSend+0x60>
	__asm volatile
 8000cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cce:	f383 8811 	msr	BASEPRI, r3
 8000cd2:	f3bf 8f6f 	isb	sy
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000cdc:	bf00      	nop
 8000cde:	e7fe      	b.n	8000cde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d103      	bne.n	8000cee <xQueueGenericSend+0x6e>
 8000ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <xQueueGenericSend+0x72>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <xQueueGenericSend+0x74>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10a      	bne.n	8000d0e <xQueueGenericSend+0x8e>
	__asm volatile
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	623b      	str	r3, [r7, #32]
}
 8000d0a:	bf00      	nop
 8000d0c:	e7fe      	b.n	8000d0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d0e:	f001 f9cf 	bl	80020b0 <xTaskGetSchedulerState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <xQueueGenericSend+0x9e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <xQueueGenericSend+0xa2>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <xQueueGenericSend+0xa4>
 8000d22:	2300      	movs	r3, #0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10a      	bne.n	8000d3e <xQueueGenericSend+0xbe>
	__asm volatile
 8000d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2c:	f383 8811 	msr	BASEPRI, r3
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	f3bf 8f4f 	dsb	sy
 8000d38:	61fb      	str	r3, [r7, #28]
}
 8000d3a:	bf00      	nop
 8000d3c:	e7fe      	b.n	8000d3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d3e:	f001 fff1 	bl	8002d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d302      	bcc.n	8000d54 <xQueueGenericSend+0xd4>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d129      	bne.n	8000da8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d5a:	f000 fa0b 	bl	8001174 <prvCopyDataToQueue>
 8000d5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d010      	beq.n	8000d8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	3324      	adds	r3, #36	; 0x24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 ffe1 	bl	8001d34 <xTaskRemoveFromEventList>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d013      	beq.n	8000da0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <xQueueGenericSend+0x1f8>)
 8000d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	f3bf 8f4f 	dsb	sy
 8000d84:	f3bf 8f6f 	isb	sy
 8000d88:	e00a      	b.n	8000da0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d007      	beq.n	8000da0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <xQueueGenericSend+0x1f8>)
 8000d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	f3bf 8f4f 	dsb	sy
 8000d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000da0:	f001 fff0 	bl	8002d84 <vPortExitCritical>
				return pdPASS;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e063      	b.n	8000e70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dae:	f001 ffe9 	bl	8002d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e05c      	b.n	8000e70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 f81b 	bl	8001dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dca:	f001 ffdb 	bl	8002d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000dce:	f000 fd7b 	bl	80018c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dd2:	f001 ffa7 	bl	8002d24 <vPortEnterCritical>
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de2:	d103      	bne.n	8000dec <xQueueGenericSend+0x16c>
 8000de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df8:	d103      	bne.n	8000e02 <xQueueGenericSend+0x182>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e02:	f001 ffbf 	bl	8002d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e06:	1d3a      	adds	r2, r7, #4
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f80a 	bl	8001e28 <xTaskCheckForTimeOut>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d124      	bne.n	8000e64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e1c:	f000 faa2 	bl	8001364 <prvIsQueueFull>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d018      	beq.n	8000e58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	3310      	adds	r3, #16
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ff30 	bl	8001c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e36:	f000 fa2d 	bl	8001294 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e3a:	f000 fd53 	bl	80018e4 <xTaskResumeAll>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f47f af7c 	bne.w	8000d3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <xQueueGenericSend+0x1f8>)
 8000e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	e772      	b.n	8000d3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa1b 	bl	8001294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e5e:	f000 fd41 	bl	80018e4 <xTaskResumeAll>
 8000e62:	e76c      	b.n	8000d3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e66:	f000 fa15 	bl	8001294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e6a:	f000 fd3b 	bl	80018e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3738      	adds	r7, #56	; 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	e000ed04 	.word	0xe000ed04

08000e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	; 0x40
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10a      	bne.n	8000eaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000ea6:	bf00      	nop
 8000ea8:	e7fe      	b.n	8000ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <xQueueGenericSendFromISR+0x3c>
 8000eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <xQueueGenericSendFromISR+0x40>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <xQueueGenericSendFromISR+0x42>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <xQueueGenericSendFromISR+0x6a>
 8000ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <xQueueGenericSendFromISR+0x6e>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <xQueueGenericSendFromISR+0x70>
 8000eea:	2300      	movs	r3, #0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10a      	bne.n	8000f06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef4:	f383 8811 	msr	BASEPRI, r3
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	f3bf 8f4f 	dsb	sy
 8000f00:	623b      	str	r3, [r7, #32]
}
 8000f02:	bf00      	nop
 8000f04:	e7fe      	b.n	8000f04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f06:	f001 ffcd 	bl	8002ea4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f0a:	f3ef 8211 	mrs	r2, BASEPRI
 8000f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	61fa      	str	r2, [r7, #28]
 8000f20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d302      	bcc.n	8000f38 <xQueueGenericSendFromISR+0xbc>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d12f      	bne.n	8000f98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f4e:	f000 f911 	bl	8001174 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f5a:	d112      	bne.n	8000f82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d016      	beq.n	8000f92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f66:	3324      	adds	r3, #36	; 0x24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fee3 	bl	8001d34 <xTaskRemoveFromEventList>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00e      	beq.n	8000f92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e007      	b.n	8000f92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f86:	3301      	adds	r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000f92:	2301      	movs	r3, #1
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000f96:	e001      	b.n	8000f9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000fa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3740      	adds	r7, #64	; 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10a      	bne.n	8000fe4 <xQueueReceive+0x30>
	__asm volatile
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	623b      	str	r3, [r7, #32]
}
 8000fe0:	bf00      	nop
 8000fe2:	e7fe      	b.n	8000fe2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <xQueueReceive+0x3e>
 8000fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <xQueueReceive+0x42>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <xQueueReceive+0x44>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <xQueueReceive+0x5e>
	__asm volatile
 8000ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	61fb      	str	r3, [r7, #28]
}
 800100e:	bf00      	nop
 8001010:	e7fe      	b.n	8001010 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001012:	f001 f84d 	bl	80020b0 <xTaskGetSchedulerState>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <xQueueReceive+0x6e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <xQueueReceive+0x72>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <xQueueReceive+0x74>
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10a      	bne.n	8001042 <xQueueReceive+0x8e>
	__asm volatile
 800102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001030:	f383 8811 	msr	BASEPRI, r3
 8001034:	f3bf 8f6f 	isb	sy
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	61bb      	str	r3, [r7, #24]
}
 800103e:	bf00      	nop
 8001040:	e7fe      	b.n	8001040 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001042:	f001 fe6f 	bl	8002d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	2b00      	cmp	r3, #0
 8001050:	d01f      	beq.n	8001092 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001056:	f000 f8f7 	bl	8001248 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00f      	beq.n	800108a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	3310      	adds	r3, #16
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fe60 	bl	8001d34 <xTaskRemoveFromEventList>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <xQueueReceive+0x1bc>)
 800107c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	f3bf 8f4f 	dsb	sy
 8001086:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800108a:	f001 fe7b 	bl	8002d84 <vPortExitCritical>
				return pdPASS;
 800108e:	2301      	movs	r3, #1
 8001090:	e069      	b.n	8001166 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001098:	f001 fe74 	bl	8002d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800109c:	2300      	movs	r3, #0
 800109e:	e062      	b.n	8001166 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fea6 	bl	8001dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010b4:	f001 fe66 	bl	8002d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010b8:	f000 fc06 	bl	80018c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010bc:	f001 fe32 	bl	8002d24 <vPortEnterCritical>
 80010c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010cc:	d103      	bne.n	80010d6 <xQueueReceive+0x122>
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e2:	d103      	bne.n	80010ec <xQueueReceive+0x138>
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010ec:	f001 fe4a 	bl	8002d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010f0:	1d3a      	adds	r2, r7, #4
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fe95 	bl	8001e28 <xTaskCheckForTimeOut>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d123      	bne.n	800114c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001106:	f000 f917 	bl	8001338 <prvIsQueueEmpty>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d017      	beq.n	8001140 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	3324      	adds	r3, #36	; 0x24
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fdbb 	bl	8001c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800111e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001120:	f000 f8b8 	bl	8001294 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001124:	f000 fbde 	bl	80018e4 <xTaskResumeAll>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d189      	bne.n	8001042 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <xQueueReceive+0x1bc>)
 8001130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	f3bf 8f6f 	isb	sy
 800113e:	e780      	b.n	8001042 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001142:	f000 f8a7 	bl	8001294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001146:	f000 fbcd 	bl	80018e4 <xTaskResumeAll>
 800114a:	e77a      	b.n	8001042 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800114c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800114e:	f000 f8a1 	bl	8001294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001152:	f000 fbc7 	bl	80018e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001158:	f000 f8ee 	bl	8001338 <prvIsQueueEmpty>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f43f af6f 	beq.w	8001042 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001166:	4618      	mov	r0, r3
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000ed04 	.word	0xe000ed04

08001174 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10d      	bne.n	80011ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14d      	bne.n	8001236 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ffa4 	bl	80020ec <xTaskPriorityDisinherit>
 80011a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e043      	b.n	8001236 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d119      	bne.n	80011e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6858      	ldr	r0, [r3, #4]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	461a      	mov	r2, r3
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	f005 fde0 	bl	8006d84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	441a      	add	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d32b      	bcc.n	8001236 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e026      	b.n	8001236 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68d8      	ldr	r0, [r3, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	461a      	mov	r2, r3
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	f005 fdc6 	bl	8006d84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	425b      	negs	r3, r3
 8001202:	441a      	add	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	425b      	negs	r3, r3
 800121e:	441a      	add	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d105      	bne.n	8001236 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	3b01      	subs	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800123e:	697b      	ldr	r3, [r7, #20]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d018      	beq.n	800128c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	441a      	add	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	d303      	bcc.n	800127c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68d9      	ldr	r1, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	461a      	mov	r2, r3
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f005 fd7c 	bl	8006d84 <memcpy>
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800129c:	f001 fd42 	bl	8002d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012a8:	e011      	b.n	80012ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d012      	beq.n	80012d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3324      	adds	r3, #36	; 0x24
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd3c 	bl	8001d34 <xTaskRemoveFromEventList>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80012c2:	f000 fe13 	bl	8001eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dce9      	bgt.n	80012aa <prvUnlockQueue+0x16>
 80012d6:	e000      	b.n	80012da <prvUnlockQueue+0x46>
					break;
 80012d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80012e2:	f001 fd4f 	bl	8002d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80012e6:	f001 fd1d 	bl	8002d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012f2:	e011      	b.n	8001318 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d012      	beq.n	8001322 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3310      	adds	r3, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fd17 	bl	8001d34 <xTaskRemoveFromEventList>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800130c:	f000 fdee 	bl	8001eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	3b01      	subs	r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dce9      	bgt.n	80012f4 <prvUnlockQueue+0x60>
 8001320:	e000      	b.n	8001324 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001322:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800132c:	f001 fd2a 	bl	8002d84 <vPortExitCritical>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001340:	f001 fcf0 	bl	8002d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800134c:	2301      	movs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e001      	b.n	8001356 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001356:	f001 fd15 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800136c:	f001 fcda 	bl	8002d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	429a      	cmp	r2, r3
 800137a:	d102      	bne.n	8001382 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e001      	b.n	8001386 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001386:	f001 fcfd 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e014      	b.n	80013ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <vQueueAddToRegistry+0x50>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10b      	bne.n	80013c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <vQueueAddToRegistry+0x50>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <vQueueAddToRegistry+0x50>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80013c6:	e006      	b.n	80013d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d9e7      	bls.n	80013a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000918 	.word	0x20000918

080013e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80013f8:	f001 fc94 	bl	8002d24 <vPortEnterCritical>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001402:	b25b      	sxtb	r3, r3
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001408:	d103      	bne.n	8001412 <vQueueWaitForMessageRestricted+0x2a>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141e:	d103      	bne.n	8001428 <vQueueWaitForMessageRestricted+0x40>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001428:	f001 fcac 	bl	8002d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3324      	adds	r3, #36	; 0x24
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fc4d 	bl	8001cdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff26 	bl	8001294 <prvUnlockQueue>
	}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af04      	add	r7, sp, #16
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10a      	bne.n	800147a <xTaskCreateStatic+0x2a>
	__asm volatile
 8001464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001468:	f383 8811 	msr	BASEPRI, r3
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f3bf 8f4f 	dsb	sy
 8001474:	623b      	str	r3, [r7, #32]
}
 8001476:	bf00      	nop
 8001478:	e7fe      	b.n	8001478 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10a      	bne.n	8001496 <xTaskCreateStatic+0x46>
	__asm volatile
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	61fb      	str	r3, [r7, #28]
}
 8001492:	bf00      	nop
 8001494:	e7fe      	b.n	8001494 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001496:	235c      	movs	r3, #92	; 0x5c
 8001498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b5c      	cmp	r3, #92	; 0x5c
 800149e:	d00a      	beq.n	80014b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80014a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	f3bf 8f6f 	isb	sy
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	61bb      	str	r3, [r7, #24]
}
 80014b2:	bf00      	nop
 80014b4:	e7fe      	b.n	80014b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80014b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01e      	beq.n	80014fc <xTaskCreateStatic+0xac>
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80014d6:	2300      	movs	r3, #0
 80014d8:	9303      	str	r3, [sp, #12]
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f850 	bl	8001594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f6:	f000 f8dd 	bl	80016b4 <prvAddNewTaskToReadyList>
 80014fa:	e001      	b.n	8001500 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001500:	697b      	ldr	r3, [r7, #20]
	}
 8001502:	4618      	mov	r0, r3
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800150a:	b580      	push	{r7, lr}
 800150c:	b08c      	sub	sp, #48	; 0x30
 800150e:	af04      	add	r7, sp, #16
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fd00 	bl	8002f24 <pvPortMalloc>
 8001524:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00e      	beq.n	800154a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800152c:	205c      	movs	r0, #92	; 0x5c
 800152e:	f001 fcf9 	bl	8002f24 <pvPortMalloc>
 8001532:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
 8001540:	e005      	b.n	800154e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f001 fdba 	bl	80030bc <vPortFree>
 8001548:	e001      	b.n	800154e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d017      	beq.n	8001584 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	2300      	movs	r3, #0
 8001560:	9303      	str	r3, [sp, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f80e 	bl	8001594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001578:	69f8      	ldr	r0, [r7, #28]
 800157a:	f000 f89b 	bl	80016b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e002      	b.n	800158a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800158a:	69bb      	ldr	r3, [r7, #24]
	}
 800158c:	4618      	mov	r0, r3
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	461a      	mov	r2, r3
 80015ac:	21a5      	movs	r1, #165	; 0xa5
 80015ae:	f005 fbf7 	bl	8006da0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015bc:	3b01      	subs	r3, #1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f023 0307 	bic.w	r3, r3, #7
 80015ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	617b      	str	r3, [r7, #20]
}
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01f      	beq.n	8001632 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e012      	b.n	800161e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	3334      	adds	r3, #52	; 0x34
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d9e9      	bls.n	80015f8 <prvInitialiseNewTask+0x64>
 8001624:	e000      	b.n	8001628 <prvInitialiseNewTask+0x94>
			{
				break;
 8001626:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001630:	e003      	b.n	800163a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b37      	cmp	r3, #55	; 0x37
 800163e:	d901      	bls.n	8001644 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001640:	2337      	movs	r3, #55	; 0x37
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800164e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001652:	2200      	movs	r2, #0
 8001654:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	3304      	adds	r3, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f978 	bl	8000950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	3318      	adds	r3, #24
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f973 	bl	8000950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001672:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	2200      	movs	r2, #0
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	69b8      	ldr	r0, [r7, #24]
 8001694:	f001 fa16 	bl	8002ac4 <pxPortInitialiseStack>
 8001698:	4602      	mov	r2, r0
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016bc:	f001 fb32 	bl	8002d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a2c      	ldr	r2, [pc, #176]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016d2:	4a2a      	ldr	r2, [pc, #168]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d110      	bne.n	8001702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016e0:	f000 fc28 	bl	8001f34 <prvInitialiseTaskLists>
 80016e4:	e00d      	b.n	8001702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <prvAddNewTaskToReadyList+0xcc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d802      	bhi.n	8001702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 800170a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <prvAddNewTaskToReadyList+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d903      	bls.n	8001728 <prvAddNewTaskToReadyList+0x74>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <prvAddNewTaskToReadyList+0xd4>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <prvAddNewTaskToReadyList+0xd8>)
 8001736:	441a      	add	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff f913 	bl	800096a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001744:	f001 fb1e 	bl	8002d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <prvAddNewTaskToReadyList+0xcc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	429a      	cmp	r2, r3
 800175c:	d207      	bcs.n	800176e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <prvAddNewTaskToReadyList+0xdc>)
 8001760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000e2c 	.word	0x20000e2c
 800177c:	20000958 	.word	0x20000958
 8001780:	20000e38 	.word	0x20000e38
 8001784:	20000e48 	.word	0x20000e48
 8001788:	20000e34 	.word	0x20000e34
 800178c:	2000095c 	.word	0x2000095c
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d017      	beq.n	80017d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <vTaskDelay+0x60>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <vTaskDelay+0x30>
	__asm volatile
 80017ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b2:	f383 8811 	msr	BASEPRI, r3
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	60bb      	str	r3, [r7, #8]
}
 80017c0:	bf00      	nop
 80017c2:	e7fe      	b.n	80017c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80017c4:	f000 f880 	bl	80018c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fdd8 	bl	8002380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80017d0:	f000 f888 	bl	80018e4 <xTaskResumeAll>
 80017d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <vTaskDelay+0x64>)
 80017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000e54 	.word	0x20000e54
 80017f8:	e000ed04 	.word	0xe000ed04

080017fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800180a:	463a      	mov	r2, r7
 800180c:	1d39      	adds	r1, r7, #4
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f848 	bl	80008a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	9202      	str	r2, [sp, #8]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	460a      	mov	r2, r1
 800182a:	4921      	ldr	r1, [pc, #132]	; (80018b0 <vTaskStartScheduler+0xb4>)
 800182c:	4821      	ldr	r0, [pc, #132]	; (80018b4 <vTaskStartScheduler+0xb8>)
 800182e:	f7ff fe0f 	bl	8001450 <xTaskCreateStatic>
 8001832:	4603      	mov	r3, r0
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <vTaskStartScheduler+0xbc>)
 8001836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <vTaskStartScheduler+0xbc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e001      	b.n	800184a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001850:	f000 fdea 	bl	8002428 <xTimerCreateTimerTask>
 8001854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d116      	bne.n	800188a <vTaskStartScheduler+0x8e>
	__asm volatile
 800185c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	613b      	str	r3, [r7, #16]
}
 800186e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <vTaskStartScheduler+0xc0>)
 8001872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001876:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <vTaskStartScheduler+0xc4>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <vTaskStartScheduler+0xc8>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001884:	f001 f9ac 	bl	8002be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001888:	e00e      	b.n	80018a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001890:	d10a      	bne.n	80018a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	60fb      	str	r3, [r7, #12]
}
 80018a4:	bf00      	nop
 80018a6:	e7fe      	b.n	80018a6 <vTaskStartScheduler+0xaa>
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	08007e70 	.word	0x08007e70
 80018b4:	08001f05 	.word	0x08001f05
 80018b8:	20000e50 	.word	0x20000e50
 80018bc:	20000e4c 	.word	0x20000e4c
 80018c0:	20000e38 	.word	0x20000e38
 80018c4:	20000e30 	.word	0x20000e30

080018c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <vTaskSuspendAll+0x18>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <vTaskSuspendAll+0x18>)
 80018d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20000e54 	.word	0x20000e54

080018e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <xTaskResumeAll+0x118>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <xTaskResumeAll+0x2c>
	__asm volatile
 80018fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fe:	f383 8811 	msr	BASEPRI, r3
 8001902:	f3bf 8f6f 	isb	sy
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	603b      	str	r3, [r7, #0]
}
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001910:	f001 fa08 	bl	8002d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <xTaskResumeAll+0x118>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	4a38      	ldr	r2, [pc, #224]	; (80019fc <xTaskResumeAll+0x118>)
 800191c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <xTaskResumeAll+0x118>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d162      	bne.n	80019ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <xTaskResumeAll+0x11c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d05e      	beq.n	80019ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800192e:	e02f      	b.n	8001990 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <xTaskResumeAll+0x120>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3318      	adds	r3, #24
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f871 	bl	8000a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f86c 	bl	8000a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <xTaskResumeAll+0x124>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d903      	bls.n	8001960 <xTaskResumeAll+0x7c>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <xTaskResumeAll+0x124>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <xTaskResumeAll+0x128>)
 800196e:	441a      	add	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f7fe fff7 	bl	800096a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <xTaskResumeAll+0x12c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <xTaskResumeAll+0x130>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <xTaskResumeAll+0x120>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1cb      	bne.n	8001930 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800199e:	f000 fb67 	bl	8002070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <xTaskResumeAll+0x134>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019ae:	f000 f859 	bl	8001a64 <xTaskIncrementTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <xTaskResumeAll+0x130>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f1      	bne.n	80019ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <xTaskResumeAll+0x134>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <xTaskResumeAll+0x130>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80019d8:	2301      	movs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <xTaskResumeAll+0x138>)
 80019de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80019ec:	f001 f9ca 	bl	8002d84 <vPortExitCritical>

	return xAlreadyYielded;
 80019f0:	68bb      	ldr	r3, [r7, #8]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000e54 	.word	0x20000e54
 8001a00:	20000e2c 	.word	0x20000e2c
 8001a04:	20000dec 	.word	0x20000dec
 8001a08:	20000e34 	.word	0x20000e34
 8001a0c:	2000095c 	.word	0x2000095c
 8001a10:	20000958 	.word	0x20000958
 8001a14:	20000e40 	.word	0x20000e40
 8001a18:	20000e3c 	.word	0x20000e3c
 8001a1c:	e000ed04 	.word	0xe000ed04

08001a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <xTaskGetTickCount+0x1c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000e30 	.word	0x20000e30

08001a40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a46:	f001 fa2d 	bl	8002ea4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <xTaskGetTickCountFromISR+0x20>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001a54:	683b      	ldr	r3, [r7, #0]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000e30 	.word	0x20000e30

08001a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <xTaskIncrementTick+0x148>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 808f 	bne.w	8001b96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <xTaskIncrementTick+0x14c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a80:	4a4b      	ldr	r2, [pc, #300]	; (8001bb0 <xTaskIncrementTick+0x14c>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d120      	bne.n	8001ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <xTaskIncrementTick+0x150>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <xTaskIncrementTick+0x48>
	__asm volatile
 8001a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
 8001aa6:	603b      	str	r3, [r7, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	e7fe      	b.n	8001aaa <xTaskIncrementTick+0x46>
 8001aac:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <xTaskIncrementTick+0x150>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <xTaskIncrementTick+0x154>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <xTaskIncrementTick+0x150>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <xTaskIncrementTick+0x154>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <xTaskIncrementTick+0x158>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <xTaskIncrementTick+0x158>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	f000 fad1 	bl	8002070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <xTaskIncrementTick+0x15c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d349      	bcc.n	8001b6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <xTaskIncrementTick+0x150>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <xTaskIncrementTick+0x15c>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	601a      	str	r2, [r3, #0]
					break;
 8001aea:	e03f      	b.n	8001b6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <xTaskIncrementTick+0x150>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d203      	bcs.n	8001b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b04:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <xTaskIncrementTick+0x15c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b0a:	e02f      	b.n	8001b6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe ff87 	bl	8000a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3318      	adds	r3, #24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe ff7e 	bl	8000a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <xTaskIncrementTick+0x160>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d903      	bls.n	8001b3c <xTaskIncrementTick+0xd8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <xTaskIncrementTick+0x160>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <xTaskIncrementTick+0x164>)
 8001b4a:	441a      	add	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7fe ff09 	bl	800096a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <xTaskIncrementTick+0x168>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d3b8      	bcc.n	8001ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001b66:	2301      	movs	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b6a:	e7b5      	b.n	8001ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <xTaskIncrementTick+0x168>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b72:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <xTaskIncrementTick+0x164>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d901      	bls.n	8001b88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <xTaskIncrementTick+0x16c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e004      	b.n	8001ba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <xTaskIncrementTick+0x170>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <xTaskIncrementTick+0x170>)
 8001b9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000e54 	.word	0x20000e54
 8001bb0:	20000e30 	.word	0x20000e30
 8001bb4:	20000de4 	.word	0x20000de4
 8001bb8:	20000de8 	.word	0x20000de8
 8001bbc:	20000e44 	.word	0x20000e44
 8001bc0:	20000e4c 	.word	0x20000e4c
 8001bc4:	20000e34 	.word	0x20000e34
 8001bc8:	2000095c 	.word	0x2000095c
 8001bcc:	20000958 	.word	0x20000958
 8001bd0:	20000e40 	.word	0x20000e40
 8001bd4:	20000e3c 	.word	0x20000e3c

08001bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <vTaskSwitchContext+0xa8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <vTaskSwitchContext+0xac>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001bec:	e041      	b.n	8001c72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <vTaskSwitchContext+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <vTaskSwitchContext+0xb0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e010      	b.n	8001c1e <vTaskSwitchContext+0x46>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	607b      	str	r3, [r7, #4]
}
 8001c14:	bf00      	nop
 8001c16:	e7fe      	b.n	8001c16 <vTaskSwitchContext+0x3e>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	491b      	ldr	r1, [pc, #108]	; (8001c8c <vTaskSwitchContext+0xb4>)
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0e4      	beq.n	8001bfc <vTaskSwitchContext+0x24>
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <vTaskSwitchContext+0xb4>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3308      	adds	r3, #8
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d104      	bne.n	8001c62 <vTaskSwitchContext+0x8a>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <vTaskSwitchContext+0xb8>)
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <vTaskSwitchContext+0xb0>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000e54 	.word	0x20000e54
 8001c84:	20000e40 	.word	0x20000e40
 8001c88:	20000e34 	.word	0x20000e34
 8001c8c:	2000095c 	.word	0x2000095c
 8001c90:	20000958 	.word	0x20000958

08001c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	60fb      	str	r3, [r7, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	e7fe      	b.n	8001cb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <vTaskPlaceOnEventList+0x44>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fe75 	bl	80009b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cc8:	2101      	movs	r1, #1
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f000 fb58 	bl	8002380 <prvAddCurrentTaskToDelayedList>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000958 	.word	0x20000958

08001cdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	617b      	str	r3, [r7, #20]
}
 8001d00:	bf00      	nop
 8001d02:	e7fe      	b.n	8001d02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <vTaskPlaceOnEventListRestricted+0x54>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7fe fe2c 	bl	800096a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f000 fb2d 	bl	8002380 <prvAddCurrentTaskToDelayedList>
	}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000958 	.word	0x20000958

08001d34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	60fb      	str	r3, [r7, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	e7fe      	b.n	8001d5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	3318      	adds	r3, #24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fe5d 	bl	8000a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <xTaskRemoveFromEventList+0xb0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11d      	bne.n	8001dae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	3304      	adds	r3, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fe54 	bl	8000a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <xTaskRemoveFromEventList+0xb4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d903      	bls.n	8001d90 <xTaskRemoveFromEventList+0x5c>
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <xTaskRemoveFromEventList+0xb4>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <xTaskRemoveFromEventList+0xb8>)
 8001d9e:	441a      	add	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f7fe fddf 	bl	800096a <vListInsertEnd>
 8001dac:	e005      	b.n	8001dba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3318      	adds	r3, #24
 8001db2:	4619      	mov	r1, r3
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <xTaskRemoveFromEventList+0xbc>)
 8001db6:	f7fe fdd8 	bl	800096a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <xTaskRemoveFromEventList+0xc0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d905      	bls.n	8001dd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <xTaskRemoveFromEventList+0xc4>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e001      	b.n	8001dd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001dd8:	697b      	ldr	r3, [r7, #20]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000e54 	.word	0x20000e54
 8001de8:	20000e34 	.word	0x20000e34
 8001dec:	2000095c 	.word	0x2000095c
 8001df0:	20000dec 	.word	0x20000dec
 8001df4:	20000958 	.word	0x20000958
 8001df8:	20000e40 	.word	0x20000e40

08001dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <vTaskInternalSetTimeOutState+0x24>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <vTaskInternalSetTimeOutState+0x28>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000e44 	.word	0x20000e44
 8001e24:	20000e30 	.word	0x20000e30

08001e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	613b      	str	r3, [r7, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	e7fe      	b.n	8001e4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10a      	bne.n	8001e6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	60fb      	str	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	e7fe      	b.n	8001e68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001e6a:	f000 ff5b 	bl	8002d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <xTaskCheckForTimeOut+0xbc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e86:	d102      	bne.n	8001e8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	e023      	b.n	8001ed6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <xTaskCheckForTimeOut+0xc0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d007      	beq.n	8001eaa <xTaskCheckForTimeOut+0x82>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d302      	bcc.n	8001eaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e015      	b.n	8001ed6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d20b      	bcs.n	8001ecc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1ad2      	subs	r2, r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff9b 	bl	8001dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e004      	b.n	8001ed6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001ed6:	f000 ff55 	bl	8002d84 <vPortExitCritical>

	return xReturn;
 8001eda:	69fb      	ldr	r3, [r7, #28]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000e30 	.word	0x20000e30
 8001ee8:	20000e44 	.word	0x20000e44

08001eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <vTaskMissedYield+0x14>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20000e40 	.word	0x20000e40

08001f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f0c:	f000 f852 	bl	8001fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <prvIdleTask+0x28>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d9f9      	bls.n	8001f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <prvIdleTask+0x2c>)
 8001f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001f28:	e7f0      	b.n	8001f0c <prvIdleTask+0x8>
 8001f2a:	bf00      	nop
 8001f2c:	2000095c 	.word	0x2000095c
 8001f30:	e000ed04 	.word	0xe000ed04

08001f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e00c      	b.n	8001f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <prvInitialiseTaskLists+0x60>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fcde 	bl	8000910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b37      	cmp	r3, #55	; 0x37
 8001f5e:	d9ef      	bls.n	8001f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <prvInitialiseTaskLists+0x64>)
 8001f62:	f7fe fcd5 	bl	8000910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <prvInitialiseTaskLists+0x68>)
 8001f68:	f7fe fcd2 	bl	8000910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <prvInitialiseTaskLists+0x6c>)
 8001f6e:	f7fe fccf 	bl	8000910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f72:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <prvInitialiseTaskLists+0x70>)
 8001f74:	f7fe fccc 	bl	8000910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <prvInitialiseTaskLists+0x74>)
 8001f7a:	f7fe fcc9 	bl	8000910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <prvInitialiseTaskLists+0x78>)
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <prvInitialiseTaskLists+0x64>)
 8001f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <prvInitialiseTaskLists+0x7c>)
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <prvInitialiseTaskLists+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000095c 	.word	0x2000095c
 8001f98:	20000dbc 	.word	0x20000dbc
 8001f9c:	20000dd0 	.word	0x20000dd0
 8001fa0:	20000dec 	.word	0x20000dec
 8001fa4:	20000e00 	.word	0x20000e00
 8001fa8:	20000e18 	.word	0x20000e18
 8001fac:	20000de4 	.word	0x20000de4
 8001fb0:	20000de8 	.word	0x20000de8

08001fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fba:	e019      	b.n	8001ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001fbc:	f000 feb2 	bl	8002d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <prvCheckTasksWaitingTermination+0x50>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fd29 	bl	8000a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <prvCheckTasksWaitingTermination+0x54>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <prvCheckTasksWaitingTermination+0x54>)
 8001fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <prvCheckTasksWaitingTermination+0x58>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <prvCheckTasksWaitingTermination+0x58>)
 8001fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001fe6:	f000 fecd 	bl	8002d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f810 	bl	8002010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <prvCheckTasksWaitingTermination+0x58>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e1      	bne.n	8001fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000e00 	.word	0x20000e00
 8002008:	20000e2c 	.word	0x20000e2c
 800200c:	20000e14 	.word	0x20000e14

08002010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4618      	mov	r0, r3
 8002028:	f001 f848 	bl	80030bc <vPortFree>
				vPortFree( pxTCB );
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f845 	bl	80030bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002032:	e018      	b.n	8002066 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800203a:	2b01      	cmp	r3, #1
 800203c:	d103      	bne.n	8002046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f001 f83c 	bl	80030bc <vPortFree>
	}
 8002044:	e00f      	b.n	8002066 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800204c:	2b02      	cmp	r3, #2
 800204e:	d00a      	beq.n	8002066 <prvDeleteTCB+0x56>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	60fb      	str	r3, [r7, #12]
}
 8002062:	bf00      	nop
 8002064:	e7fe      	b.n	8002064 <prvDeleteTCB+0x54>
	}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <prvResetNextTaskUnblockTime+0x38>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d104      	bne.n	800208a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <prvResetNextTaskUnblockTime+0x3c>)
 8002082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002088:	e008      	b.n	800209c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <prvResetNextTaskUnblockTime+0x38>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <prvResetNextTaskUnblockTime+0x3c>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20000de4 	.word	0x20000de4
 80020ac:	20000e4c 	.word	0x20000e4c

080020b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <xTaskGetSchedulerState+0x34>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80020be:	2301      	movs	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	e008      	b.n	80020d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <xTaskGetSchedulerState+0x38>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80020cc:	2302      	movs	r3, #2
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	e001      	b.n	80020d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80020d6:	687b      	ldr	r3, [r7, #4]
	}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	20000e38 	.word	0x20000e38
 80020e8:	20000e54 	.word	0x20000e54

080020ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d056      	beq.n	80021b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <xTaskPriorityDisinherit+0xd0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d00a      	beq.n	8002122 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	60fb      	str	r3, [r7, #12]
}
 800211e:	bf00      	nop
 8002120:	e7fe      	b.n	8002120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	60bb      	str	r3, [r7, #8]
}
 800213c:	bf00      	nop
 800213e:	e7fe      	b.n	800213e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	429a      	cmp	r2, r3
 8002154:	d02c      	beq.n	80021b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	2b00      	cmp	r3, #0
 800215c:	d128      	bne.n	80021b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3304      	adds	r3, #4
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fc5e 	bl	8000a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <xTaskPriorityDisinherit+0xd4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d903      	bls.n	8002190 <xTaskPriorityDisinherit+0xa4>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <xTaskPriorityDisinherit+0xd4>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <xTaskPriorityDisinherit+0xd8>)
 800219e:	441a      	add	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f7fe fbdf 	bl	800096a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80021b0:	697b      	ldr	r3, [r7, #20]
	}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000958 	.word	0x20000958
 80021c0:	20000e34 	.word	0x20000e34
 80021c4:	2000095c 	.word	0x2000095c

080021c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80021d8:	2301      	movs	r3, #1
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021f4:	bf00      	nop
 80021f6:	e7fe      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021f8:	f000 fe54 	bl	8002ea4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002200:	f3ef 8211 	mrs	r2, BASEPRI
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	623a      	str	r2, [r7, #32]
 8002216:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002218:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d828      	bhi.n	8002294 <xTaskGenericNotifyFromISR+0xcc>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <xTaskGenericNotifyFromISR+0x80>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	080022b5 	.word	0x080022b5
 800224c:	0800225d 	.word	0x0800225d
 8002250:	0800226b 	.word	0x0800226b
 8002254:	08002277 	.word	0x08002277
 8002258:	0800227f 	.word	0x0800227f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	431a      	orrs	r2, r3
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002268:	e027      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002274:	e021      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800227c:	e01d      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800227e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800228c:	e015      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002292:	e012      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800229c:	d00c      	beq.n	80022b8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	61bb      	str	r3, [r7, #24]
}
 80022b0:	bf00      	nop
 80022b2:	e7fe      	b.n	80022b2 <xTaskGenericNotifyFromISR+0xea>
					break;
 80022b4:	bf00      	nop
 80022b6:	e000      	b.n	80022ba <xTaskGenericNotifyFromISR+0xf2>
					break;
 80022b8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80022ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d146      	bne.n	8002350 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	617b      	str	r3, [r7, #20]
}
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <xTaskGenericNotifyFromISR+0x1a0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11d      	bne.n	8002324 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fb99 	bl	8000a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <xTaskGenericNotifyFromISR+0x1a4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d903      	bls.n	8002306 <xTaskGenericNotifyFromISR+0x13e>
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	4a1a      	ldr	r2, [pc, #104]	; (800236c <xTaskGenericNotifyFromISR+0x1a4>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <xTaskGenericNotifyFromISR+0x1a8>)
 8002314:	441a      	add	r2, r3
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	3304      	adds	r3, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7fe fb24 	bl	800096a <vListInsertEnd>
 8002322:	e005      	b.n	8002330 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	3318      	adds	r3, #24
 8002328:	4619      	mov	r1, r3
 800232a:	4812      	ldr	r0, [pc, #72]	; (8002374 <xTaskGenericNotifyFromISR+0x1ac>)
 800232c:	f7fe fb1d 	bl	800096a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <xTaskGenericNotifyFromISR+0x1b0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	429a      	cmp	r2, r3
 800233c:	d908      	bls.n	8002350 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <xTaskGenericNotifyFromISR+0x1b4>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f383 8811 	msr	BASEPRI, r3
}
 800235a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800235e:	4618      	mov	r0, r3
 8002360:	3738      	adds	r7, #56	; 0x38
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000e54 	.word	0x20000e54
 800236c:	20000e34 	.word	0x20000e34
 8002370:	2000095c 	.word	0x2000095c
 8002374:	20000dec 	.word	0x20000dec
 8002378:	20000958 	.word	0x20000958
 800237c:	20000e40 	.word	0x20000e40

08002380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <prvAddCurrentTaskToDelayedList+0x90>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <prvAddCurrentTaskToDelayedList+0x94>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fb44 	bl	8000a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a2:	d10a      	bne.n	80023ba <prvAddCurrentTaskToDelayedList+0x3a>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <prvAddCurrentTaskToDelayedList+0x94>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4819      	ldr	r0, [pc, #100]	; (8002418 <prvAddCurrentTaskToDelayedList+0x98>)
 80023b4:	f7fe fad9 	bl	800096a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023b8:	e026      	b.n	8002408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <prvAddCurrentTaskToDelayedList+0x94>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d209      	bcs.n	80023e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <prvAddCurrentTaskToDelayedList+0x9c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <prvAddCurrentTaskToDelayedList+0x94>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe fae7 	bl	80009b2 <vListInsert>
}
 80023e4:	e010      	b.n	8002408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <prvAddCurrentTaskToDelayedList+0x94>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f7fe fadd 	bl	80009b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d202      	bcs.n	8002408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000e30 	.word	0x20000e30
 8002414:	20000958 	.word	0x20000958
 8002418:	20000e18 	.word	0x20000e18
 800241c:	20000de8 	.word	0x20000de8
 8002420:	20000de4 	.word	0x20000de4
 8002424:	20000e4c 	.word	0x20000e4c

08002428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002432:	f000 fb07 	bl	8002a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <xTimerCreateTimerTask+0x80>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d021      	beq.n	8002482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002446:	1d3a      	adds	r2, r7, #4
 8002448:	f107 0108 	add.w	r1, r7, #8
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fa43 	bl	80008dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	9202      	str	r2, [sp, #8]
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	460a      	mov	r2, r1
 8002468:	4910      	ldr	r1, [pc, #64]	; (80024ac <xTimerCreateTimerTask+0x84>)
 800246a:	4811      	ldr	r0, [pc, #68]	; (80024b0 <xTimerCreateTimerTask+0x88>)
 800246c:	f7fe fff0 	bl	8001450 <xTaskCreateStatic>
 8002470:	4603      	mov	r3, r0
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <xTimerCreateTimerTask+0x8c>)
 8002474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <xTimerCreateTimerTask+0x8c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800247e:	2301      	movs	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	613b      	str	r3, [r7, #16]
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800249e:	697b      	ldr	r3, [r7, #20]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000e88 	.word	0x20000e88
 80024ac:	08007e78 	.word	0x08007e78
 80024b0:	080025ed 	.word	0x080025ed
 80024b4:	20000e8c 	.word	0x20000e8c

080024b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	623b      	str	r3, [r7, #32]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <xTimerGenericCommand+0x98>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02a      	beq.n	8002544 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	dc18      	bgt.n	8002532 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002500:	f7ff fdd6 	bl	80020b0 <xTaskGetSchedulerState>
 8002504:	4603      	mov	r3, r0
 8002506:	2b02      	cmp	r3, #2
 8002508:	d109      	bne.n	800251e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <xTimerGenericCommand+0x98>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f107 0110 	add.w	r1, r7, #16
 8002512:	2300      	movs	r3, #0
 8002514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002516:	f7fe fbb3 	bl	8000c80 <xQueueGenericSend>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24
 800251c:	e012      	b.n	8002544 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <xTimerGenericCommand+0x98>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	f107 0110 	add.w	r1, r7, #16
 8002526:	2300      	movs	r3, #0
 8002528:	2200      	movs	r2, #0
 800252a:	f7fe fba9 	bl	8000c80 <xQueueGenericSend>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24
 8002530:	e008      	b.n	8002544 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <xTimerGenericCommand+0x98>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	f107 0110 	add.w	r1, r7, #16
 800253a:	2300      	movs	r3, #0
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	f7fe fc9d 	bl	8000e7c <xQueueGenericSendFromISR>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002546:	4618      	mov	r0, r3
 8002548:	3728      	adds	r7, #40	; 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000e88 	.word	0x20000e88

08002554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <prvProcessExpiredTimer+0x94>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3304      	adds	r3, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fa59 	bl	8000a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d022      	beq.n	80025c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	18d1      	adds	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f000 f8d1 	bl	8002734 <prvInsertTimerInActiveList>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01f      	beq.n	80025d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2300      	movs	r3, #0
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	2100      	movs	r1, #0
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff88 	bl	80024b8 <xTimerGenericCommand>
 80025a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d113      	bne.n	80025d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	60fb      	str	r3, [r7, #12]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	6978      	ldr	r0, [r7, #20]
 80025de:	4798      	blx	r3
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000e80 	.word	0x20000e80

080025ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f857 	bl	80026ac <prvGetNextExpireTime>
 80025fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4619      	mov	r1, r3
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f803 	bl	8002610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800260a:	f000 f8d5 	bl	80027b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800260e:	e7f1      	b.n	80025f4 <prvTimerTask+0x8>

08002610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800261a:	f7ff f955 	bl	80018c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f866 	bl	80026f4 <prvSampleTimeNow>
 8002628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d130      	bne.n	8002692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <prvProcessTimerOrBlockTask+0x3c>
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d806      	bhi.n	800264c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800263e:	f7ff f951 	bl	80018e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff85 	bl	8002554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800264a:	e024      	b.n	8002696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <prvProcessTimerOrBlockTask+0x90>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <prvProcessTimerOrBlockTask+0x50>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <prvProcessTimerOrBlockTask+0x52>
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <prvProcessTimerOrBlockTask+0x94>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe feb9 	bl	80013e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002676:	f7ff f935 	bl	80018e4 <xTaskResumeAll>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <prvProcessTimerOrBlockTask+0x98>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
}
 8002690:	e001      	b.n	8002696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002692:	f7ff f927 	bl	80018e4 <xTaskResumeAll>
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000e84 	.word	0x20000e84
 80026a4:	20000e88 	.word	0x20000e88
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <prvGetNextExpireTime+0x44>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <prvGetNextExpireTime+0x16>
 80026be:	2201      	movs	r2, #1
 80026c0:	e000      	b.n	80026c4 <prvGetNextExpireTime+0x18>
 80026c2:	2200      	movs	r2, #0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <prvGetNextExpireTime+0x44>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e001      	b.n	80026e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000e80 	.word	0x20000e80

080026f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80026fc:	f7ff f990 	bl	8001a20 <xTaskGetTickCount>
 8002700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <prvSampleTimeNow+0x3c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d205      	bcs.n	8002718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800270c:	f000 f936 	bl	800297c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e002      	b.n	800271e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <prvSampleTimeNow+0x3c>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000e90 	.word	0x20000e90

08002734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d812      	bhi.n	8002780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002768:	2301      	movs	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e01b      	b.n	80027a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <prvInsertTimerInActiveList+0x7c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3304      	adds	r3, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7fe f91a 	bl	80009b2 <vListInsert>
 800277e:	e012      	b.n	80027a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d206      	bcs.n	8002796 <prvInsertTimerInActiveList+0x62>
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002790:	2301      	movs	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e007      	b.n	80027a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <prvInsertTimerInActiveList+0x80>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7fe f906 	bl	80009b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80027a6:	697b      	ldr	r3, [r7, #20]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000e84 	.word	0x20000e84
 80027b4:	20000e80 	.word	0x20000e80

080027b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027be:	e0ca      	b.n	8002956 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da18      	bge.n	80027f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	3304      	adds	r3, #4
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	61fb      	str	r3, [r7, #28]
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ee:	6850      	ldr	r0, [r2, #4]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f2c0 80aa 	blt.w	8002954 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	3304      	adds	r3, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe f907 	bl	8000a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002816:	463b      	mov	r3, r7
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff6b 	bl	80026f4 <prvSampleTimeNow>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b09      	cmp	r3, #9
 8002824:	f200 8097 	bhi.w	8002956 <prvProcessReceivedCommands+0x19e>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <prvProcessReceivedCommands+0x78>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002859 	.word	0x08002859
 8002834:	08002859 	.word	0x08002859
 8002838:	08002859 	.word	0x08002859
 800283c:	080028cd 	.word	0x080028cd
 8002840:	080028e1 	.word	0x080028e1
 8002844:	0800292b 	.word	0x0800292b
 8002848:	08002859 	.word	0x08002859
 800284c:	08002859 	.word	0x08002859
 8002850:	080028cd 	.word	0x080028cd
 8002854:	080028e1 	.word	0x080028e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	18d1      	adds	r1, r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002878:	f7ff ff5c 	bl	8002734 <prvInsertTimerInActiveList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d069      	beq.n	8002956 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05e      	beq.n	8002956 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	441a      	add	r2, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028aa:	f7ff fe05 	bl	80024b8 <xTimerGenericCommand>
 80028ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d14f      	bne.n	8002956 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	61bb      	str	r3, [r7, #24]
}
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80028de:	e03a      	b.n	8002956 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	617b      	str	r3, [r7, #20]
}
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	18d1      	adds	r1, r2, r3
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002924:	f7ff ff06 	bl	8002734 <prvInsertTimerInActiveList>
					break;
 8002928:	e015      	b.n	8002956 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293a:	f000 fbbf 	bl	80030bc <vPortFree>
 800293e:	e00a      	b.n	8002956 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002952:	e000      	b.n	8002956 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <prvProcessReceivedCommands+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1d39      	adds	r1, r7, #4
 800295c:	2200      	movs	r2, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fb28 	bl	8000fb4 <xQueueReceive>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f af2a 	bne.w	80027c0 <prvProcessReceivedCommands+0x8>
	}
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3730      	adds	r7, #48	; 0x30
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000e88 	.word	0x20000e88

0800297c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002982:	e048      	b.n	8002a16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3304      	adds	r3, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe f841 	bl	8000a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02e      	beq.n	8002a16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90e      	bls.n	80029e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3304      	adds	r3, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f7fd ffe6 	bl	80009b2 <vListInsert>
 80029e6:	e016      	b.n	8002a16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2300      	movs	r3, #0
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	2100      	movs	r1, #0
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff fd60 	bl	80024b8 <xTimerGenericCommand>
 80029f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	603b      	str	r3, [r7, #0]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1b1      	bne.n	8002984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <prvSwitchTimerLists+0xc4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <prvSwitchTimerLists+0xc0>)
 8002a2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <prvSwitchTimerLists+0xc4>)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000e80 	.word	0x20000e80
 8002a40:	20000e84 	.word	0x20000e84

08002a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a4a:	f000 f96b 	bl	8002d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <prvCheckForValidListAndQueue+0x60>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d120      	bne.n	8002a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002a56:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <prvCheckForValidListAndQueue+0x64>)
 8002a58:	f7fd ff5a 	bl	8000910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a5c:	4813      	ldr	r0, [pc, #76]	; (8002aac <prvCheckForValidListAndQueue+0x68>)
 8002a5e:	f7fd ff57 	bl	8000910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <prvCheckForValidListAndQueue+0x6c>)
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <prvCheckForValidListAndQueue+0x64>)
 8002a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <prvCheckForValidListAndQueue+0x70>)
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <prvCheckForValidListAndQueue+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <prvCheckForValidListAndQueue+0x74>)
 8002a74:	4a11      	ldr	r2, [pc, #68]	; (8002abc <prvCheckForValidListAndQueue+0x78>)
 8002a76:	2110      	movs	r1, #16
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f7fe f865 	bl	8000b48 <xQueueGenericCreateStatic>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <prvCheckForValidListAndQueue+0x60>)
 8002a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <prvCheckForValidListAndQueue+0x60>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <prvCheckForValidListAndQueue+0x60>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <prvCheckForValidListAndQueue+0x7c>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fc7e 	bl	8001394 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a98:	f000 f974 	bl	8002d84 <vPortExitCritical>
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000e88 	.word	0x20000e88
 8002aa8:	20000e58 	.word	0x20000e58
 8002aac:	20000e6c 	.word	0x20000e6c
 8002ab0:	20000e80 	.word	0x20000e80
 8002ab4:	20000e84 	.word	0x20000e84
 8002ab8:	20000f34 	.word	0x20000f34
 8002abc:	20000e94 	.word	0x20000e94
 8002ac0:	08007e80 	.word	0x08007e80

08002ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3b04      	subs	r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3b04      	subs	r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3b04      	subs	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <pxPortInitialiseStack+0x64>)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3b14      	subs	r3, #20
 8002afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b04      	subs	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f06f 0202 	mvn.w	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b20      	subs	r3, #32
 8002b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	08002b2d 	.word	0x08002b2d

08002b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <prvTaskExitError+0x54>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3e:	d00a      	beq.n	8002b56 <prvTaskExitError+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	60fb      	str	r3, [r7, #12]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <prvTaskExitError+0x28>
	__asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	60bb      	str	r3, [r7, #8]
}
 8002b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b6a:	bf00      	nop
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0fc      	beq.n	8002b6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20000008 	.word	0x20000008
	...

08002b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <pxCurrentTCBConst2>)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	6808      	ldr	r0, [r1, #0]
 8002b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9a:	f380 8809 	msr	PSP, r0
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f380 8811 	msr	BASEPRI, r0
 8002baa:	4770      	bx	lr
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst2>:
 8002bb0:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bb8:	4808      	ldr	r0, [pc, #32]	; (8002bdc <prvPortStartFirstTask+0x24>)
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	6800      	ldr	r0, [r0, #0]
 8002bbe:	f380 8808 	msr	MSP, r0
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f380 8814 	msr	CONTROL, r0
 8002bca:	b662      	cpsie	i
 8002bcc:	b661      	cpsie	f
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	df00      	svc	0
 8002bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bda:	bf00      	nop
 8002bdc:	e000ed08 	.word	0xe000ed08

08002be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <xPortStartScheduler+0x120>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <xPortStartScheduler+0x124>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10a      	bne.n	8002c06 <xPortStartScheduler+0x26>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	613b      	str	r3, [r7, #16]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <xPortStartScheduler+0x120>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <xPortStartScheduler+0x128>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10a      	bne.n	8002c26 <xPortStartScheduler+0x46>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	60fb      	str	r3, [r7, #12]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <xPortStartScheduler+0x12c>)
 8002c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <xPortStartScheduler+0x130>)
 8002c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c54:	e009      	b.n	8002c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b80      	cmp	r3, #128	; 0x80
 8002c74:	d0ef      	beq.n	8002c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c76:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1c3 0307 	rsb	r3, r3, #7
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00a      	beq.n	8002c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <xPortStartScheduler+0x134>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <xPortStartScheduler+0x134>)
 8002ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <xPortStartScheduler+0x134>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <xPortStartScheduler+0x134>)
 8002cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <xPortStartScheduler+0x138>)
 8002cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002cce:	f000 f8bb 	bl	8002e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <xPortStartScheduler+0x13c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002cd8:	f000 f8da 	bl	8002e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <xPortStartScheduler+0x140>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <xPortStartScheduler+0x140>)
 8002ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ce8:	f7ff ff66 	bl	8002bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cec:	f7fe ff74 	bl	8001bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8002cf0:	f7ff ff1c 	bl	8002b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	410fc271 	.word	0x410fc271
 8002d08:	410fc270 	.word	0x410fc270
 8002d0c:	e000e400 	.word	0xe000e400
 8002d10:	20000f84 	.word	0x20000f84
 8002d14:	20000f88 	.word	0x20000f88
 8002d18:	e000ed20 	.word	0xe000ed20
 8002d1c:	20000008 	.word	0x20000008
 8002d20:	e000ef34 	.word	0xe000ef34

08002d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10f      	bne.n	8002d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <vPortEnterCritical+0x5c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	603b      	str	r3, [r7, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <vPortEnterCritical+0x4a>
	}
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	20000008 	.word	0x20000008
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <vPortExitCritical+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <vPortExitCritical+0x24>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
}
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <vPortExitCritical+0x50>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <vPortExitCritical+0x42>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f383 8811 	msr	BASEPRI, r3
}
 8002dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
	...

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f7fe fee2 	bl	8001bd8 <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <vPortSetupTimerInterrupt+0x34>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <vPortSetupTimerInterrupt+0x38>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <vPortSetupTimerInterrupt+0x3c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <vPortSetupTimerInterrupt+0x40>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <vPortSetupTimerInterrupt+0x44>)
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <vPortSetupTimerInterrupt+0x34>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010
 8002e80:	e000e018 	.word	0xe000e018
 8002e84:	200000a8 	.word	0x200000a8
 8002e88:	10624dd3 	.word	0x10624dd3
 8002e8c:	e000e014 	.word	0xe000e014

08002e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ea0 <vPortEnableVFP+0x10>
 8002e94:	6801      	ldr	r1, [r0, #0]
 8002e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e9a:	6001      	str	r1, [r0, #0]
 8002e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed88 	.word	0xe000ed88

08002ea4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002eaa:	f3ef 8305 	mrs	r3, IPSR
 8002eae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d914      	bls.n	8002ee0 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <vPortValidateInterruptPriority+0x70>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <vPortValidateInterruptPriority+0x74>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	7afa      	ldrb	r2, [r7, #11]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d20a      	bcs.n	8002ee0 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	607b      	str	r3, [r7, #4]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <vPortValidateInterruptPriority+0x78>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <vPortValidateInterruptPriority+0x7c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d90a      	bls.n	8002f06 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	603b      	str	r3, [r7, #0]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <vPortValidateInterruptPriority+0x60>
	}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e3f0 	.word	0xe000e3f0
 8002f18:	20000f84 	.word	0x20000f84
 8002f1c:	e000ed0c 	.word	0xe000ed0c
 8002f20:	20000f88 	.word	0x20000f88

08002f24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f30:	f7fe fcca 	bl	80018c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f34:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <pvPortMalloc+0x180>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f3c:	f000 f920 	bl	8003180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f40:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <pvPortMalloc+0x184>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 8093 	bne.w	8003074 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01d      	beq.n	8002f90 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f54:	2208      	movs	r2, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d014      	beq.n	8002f90 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f023 0307 	bic.w	r3, r3, #7
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <pvPortMalloc+0x6c>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	617b      	str	r3, [r7, #20]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d06e      	beq.n	8003074 <pvPortMalloc+0x150>
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <pvPortMalloc+0x188>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d869      	bhi.n	8003074 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <pvPortMalloc+0x18c>)
 8002fa2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002fa4:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <pvPortMalloc+0x18c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002faa:	e004      	b.n	8002fb6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d903      	bls.n	8002fc8 <pvPortMalloc+0xa4>
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f1      	bne.n	8002fac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <pvPortMalloc+0x180>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d050      	beq.n	8003074 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	4413      	add	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	2308      	movs	r3, #8
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d91f      	bls.n	8003034 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <pvPortMalloc+0xf8>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	613b      	str	r3, [r7, #16]
}
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800302e:	69b8      	ldr	r0, [r7, #24]
 8003030:	f000 f908 	bl	8003244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <pvPortMalloc+0x188>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <pvPortMalloc+0x188>)
 8003040:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <pvPortMalloc+0x188>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <pvPortMalloc+0x190>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d203      	bcs.n	8003056 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <pvPortMalloc+0x188>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <pvPortMalloc+0x190>)
 8003054:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <pvPortMalloc+0x184>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <pvPortMalloc+0x194>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <pvPortMalloc+0x194>)
 8003072:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003074:	f7fe fc36 	bl	80018e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <pvPortMalloc+0x174>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	60fb      	str	r3, [r7, #12]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <pvPortMalloc+0x172>
	return pvReturn;
 8003098:	69fb      	ldr	r3, [r7, #28]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20001b4c 	.word	0x20001b4c
 80030a8:	20001b60 	.word	0x20001b60
 80030ac:	20001b50 	.word	0x20001b50
 80030b0:	20001b44 	.word	0x20001b44
 80030b4:	20001b54 	.word	0x20001b54
 80030b8:	20001b58 	.word	0x20001b58

080030bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04d      	beq.n	800316a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030ce:	2308      	movs	r3, #8
 80030d0:	425b      	negs	r3, r3
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4413      	add	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <vPortFree+0xb8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <vPortFree+0x44>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	60fb      	str	r3, [r7, #12]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <vPortFree+0x62>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60bb      	str	r3, [r7, #8]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <vPortFree+0xb8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01e      	beq.n	800316a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11a      	bne.n	800316a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <vPortFree+0xb8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003144:	f7fe fbc0 	bl	80018c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <vPortFree+0xbc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4413      	add	r3, r2
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <vPortFree+0xbc>)
 8003154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003156:	6938      	ldr	r0, [r7, #16]
 8003158:	f000 f874 	bl	8003244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <vPortFree+0xc0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a06      	ldr	r2, [pc, #24]	; (800317c <vPortFree+0xc0>)
 8003164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003166:	f7fe fbbd 	bl	80018e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20001b60 	.word	0x20001b60
 8003178:	20001b50 	.word	0x20001b50
 800317c:	20001b5c 	.word	0x20001b5c

08003180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003186:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800318a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <prvHeapInit+0xac>)
 800318e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3307      	adds	r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <prvHeapInit+0xac>)
 80031b0:	4413      	add	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <prvHeapInit+0xb0>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <prvHeapInit+0xb0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031cc:	2208      	movs	r2, #8
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0307 	bic.w	r3, r3, #7
 80031da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <prvHeapInit+0xb4>)
 80031e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <prvHeapInit+0xb4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <prvHeapInit+0xb4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <prvHeapInit+0xb4>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <prvHeapInit+0xb8>)
 800320e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <prvHeapInit+0xbc>)
 8003216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <prvHeapInit+0xc0>)
 800321a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800321e:	601a      	str	r2, [r3, #0]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	20000f8c 	.word	0x20000f8c
 8003230:	20001b44 	.word	0x20001b44
 8003234:	20001b4c 	.word	0x20001b4c
 8003238:	20001b54 	.word	0x20001b54
 800323c:	20001b50 	.word	0x20001b50
 8003240:	20001b60 	.word	0x20001b60

08003244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <prvInsertBlockIntoFreeList+0xac>)
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e002      	b.n	8003258 <prvInsertBlockIntoFreeList+0x14>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d8f7      	bhi.n	8003252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d108      	bne.n	8003286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	441a      	add	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d118      	bne.n	80032cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <prvInsertBlockIntoFreeList+0xb0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d00d      	beq.n	80032c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e008      	b.n	80032d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <prvInsertBlockIntoFreeList+0xb0>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e003      	b.n	80032d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d002      	beq.n	80032e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20001b44 	.word	0x20001b44
 80032f4:	20001b4c 	.word	0x20001b4c

080032f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003302:	2003      	movs	r0, #3
 8003304:	f000 f9a8 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003308:	2000      	movs	r0, #0
 800330a:	f000 f80d 	bl	8003328 <HAL_InitTick>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	e001      	b.n	800331e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800331a:	f003 fa53 	bl	80067c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800331e:	79fb      	ldrb	r3, [r7, #7]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_InitTick+0x6c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_InitTick+0x70>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_InitTick+0x6c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f9c3 	bl	80036de <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d809      	bhi.n	8003378 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003364:	2200      	movs	r2, #0
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	f000 f97f 	bl	800366e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_InitTick+0x74>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e007      	b.n	8003388 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e004      	b.n	8003388 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e001      	b.n	8003388 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000010 	.word	0x20000010
 8003398:	200000a8 	.word	0x200000a8
 800339c:	2000000c 	.word	0x2000000c

080033a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x20>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_IncTick+0x24>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_IncTick+0x24>)
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000010 	.word	0x20000010
 80033c4:	20001b64 	.word	0x20001b64

080033c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_GetTick+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20001b64 	.word	0x20001b64

080033e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff ffee 	bl	80033c8 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f8:	d005      	beq.n	8003406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_Delay+0x44>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003406:	bf00      	nop
 8003408:	f7ff ffde 	bl	80033c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d8f7      	bhi.n	8003408 <HAL_Delay+0x28>
  {
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000010 	.word	0x20000010

08003428 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_GetUIDw0+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	1fff7590 	.word	0x1fff7590

08003440 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_GetUIDw1+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	1fff7594 	.word	0x1fff7594

08003458 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_GetUIDw2+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	1fff7598 	.word	0x1fff7598

08003470 <__NVIC_SetPriorityGrouping>:
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_DisableIRQ>:
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db12      	blt.n	8003548 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	490a      	ldr	r1, [pc, #40]	; (8003554 <__NVIC_DisableIRQ+0x44>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	3320      	adds	r3, #32
 8003538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800353c:	f3bf 8f4f 	dsb	sy
}
 8003540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003542:	f3bf 8f6f 	isb	sy
}
 8003546:	bf00      	nop
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff05 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff1a 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff0d 	bl	80034d4 <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff1d 	bl	8003510 <__NVIC_DisableIRQ>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff94 	bl	8003614 <SysTick_Config>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Start_IT+0x20>
 8003712:	2302      	movs	r3, #2
 8003714:	e04b      	b.n	80037ae <HAL_DMA_Start_IT+0xb8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d13a      	bne.n	80037a0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f921 	bl	8003996 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 020e 	orr.w	r2, r2, #14
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e00f      	b.n	800378e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 020a 	orr.w	r2, r2, #10
 800378c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e005      	b.n	80037ac <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
 80037aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d005      	beq.n	80037da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e029      	b.n	800382e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 020e 	bic.w	r2, r2, #14
 80037e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f003 021c 	and.w	r2, r3, #28
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
    }
  }
  return status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f003 031c 	and.w	r3, r3, #28
 8003858:	2204      	movs	r2, #4
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d026      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x7a>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d021      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f003 021c 	and.w	r2, r3, #28
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2104      	movs	r1, #4
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d071      	beq.n	800398c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	e06c      	b.n	800398c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f003 031c 	and.w	r3, r3, #28
 80038ba:	2202      	movs	r2, #2
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02e      	beq.n	8003924 <HAL_DMA_IRQHandler+0xec>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d029      	beq.n	8003924 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 020a 	bic.w	r2, r2, #10
 80038ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 021c 	and.w	r2, r3, #28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2102      	movs	r1, #2
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d038      	beq.n	800398c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003922:	e033      	b.n	800398c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f003 031c 	and.w	r3, r3, #28
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02a      	beq.n	800398e <HAL_DMA_IRQHandler+0x156>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d025      	beq.n	800398e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 020e 	bic.w	r2, r2, #14
 8003950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f003 021c 	and.w	r2, r3, #28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800398c:	bf00      	nop
 800398e:	bf00      	nop
}
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f003 021c 	and.w	r2, r3, #28
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d108      	bne.n	80039da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039d8:	e007      	b.n	80039ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	60da      	str	r2, [r3, #12]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	e154      	b.n	8003cb2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8146 	beq.w	8003cac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d005      	beq.n	8003a38 <HAL_GPIO_Init+0x40>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d130      	bne.n	8003a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2203      	movs	r2, #3
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6e:	2201      	movs	r2, #1
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0201 	and.w	r2, r3, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d017      	beq.n	8003ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d123      	bne.n	8003b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	6939      	ldr	r1, [r7, #16]
 8003b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a0 	beq.w	8003cac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6c:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_GPIO_Init+0x2d8>)
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <HAL_GPIO_Init+0x2d8>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6613      	str	r3, [r2, #96]	; 0x60
 8003b78:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <HAL_GPIO_Init+0x2d8>)
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b84:	4a53      	ldr	r2, [pc, #332]	; (8003cd4 <HAL_GPIO_Init+0x2dc>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bae:	d019      	beq.n	8003be4 <HAL_GPIO_Init+0x1ec>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_GPIO_Init+0x2e0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_GPIO_Init+0x1e8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_GPIO_Init+0x2e4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00d      	beq.n	8003bdc <HAL_GPIO_Init+0x1e4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a47      	ldr	r2, [pc, #284]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <HAL_GPIO_Init+0x1e0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_GPIO_Init+0x2ec>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_GPIO_Init+0x1dc>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	e008      	b.n	8003be6 <HAL_GPIO_Init+0x1ee>
 8003bd4:	2307      	movs	r3, #7
 8003bd6:	e006      	b.n	8003be6 <HAL_GPIO_Init+0x1ee>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e004      	b.n	8003be6 <HAL_GPIO_Init+0x1ee>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e002      	b.n	8003be6 <HAL_GPIO_Init+0x1ee>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_GPIO_Init+0x1ee>
 8003be4:	2300      	movs	r3, #0
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	f002 0203 	and.w	r2, r2, #3
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	4093      	lsls	r3, r2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bf6:	4937      	ldr	r1, [pc, #220]	; (8003cd4 <HAL_GPIO_Init+0x2dc>)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c04:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c28:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c52:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f aea3 	bne.w	8003a08 <HAL_GPIO_Init+0x10>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	48000800 	.word	0x48000800
 8003ce0:	48000c00 	.word	0x48000c00
 8003ce4:	48001000 	.word	0x48001000
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d32:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f806 	bl	8003d4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40007000 	.word	0x40007000

08003d84 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_PWR_ConfigPVD+0xb8>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 020e 	bic.w	r2, r3, #14
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4928      	ldr	r1, [pc, #160]	; (8003e3c <HAL_PWR_ConfigPVD+0xb8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dcc:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003dda:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <HAL_PWR_ConfigPVD+0xbc>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	40010400 	.word	0x40010400

08003e44 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_PWR_EnablePVD+0x1c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_PWR_EnablePVD+0x1c>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6053      	str	r3, [r2, #4]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40007000 	.word	0x40007000

08003e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	d130      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e90:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9c:	d038      	beq.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2232      	movs	r2, #50	; 0x32
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0c9b      	lsrs	r3, r3, #18
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec4:	e002      	b.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d102      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f2      	bne.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d110      	bne.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e00f      	b.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d007      	beq.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f08:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40007000 	.word	0x40007000
 8003f24:	200000a8 	.word	0x200000a8
 8003f28:	431bde83 	.word	0x431bde83

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 bc02 	b.w	8004744 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	4b96      	ldr	r3, [pc, #600]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4a:	4b94      	ldr	r3, [pc, #592]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80e4 	beq.w	800412a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4c>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	f040 808b 	bne.w	8004086 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 8087 	bne.w	8004086 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x64>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e3d9      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_RCC_OscConfig+0x7e>
 8003fa0:	4b7e      	ldr	r3, [pc, #504]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCC_OscConfig+0x8a>
 8003faa:	4b7c      	ldr	r3, [pc, #496]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d223      	bcs.n	8004002 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fd8c 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e3ba      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fce:	4b73      	ldr	r3, [pc, #460]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a72      	ldr	r2, [pc, #456]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b70      	ldr	r3, [pc, #448]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	496d      	ldr	r1, [pc, #436]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	4b6b      	ldr	r3, [pc, #428]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	4968      	ldr	r1, [pc, #416]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e025      	b.n	800404e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004002:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a65      	ldr	r2, [pc, #404]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4960      	ldr	r1, [pc, #384]	; (800419c <HAL_RCC_OscConfig+0x270>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004020:	4b5e      	ldr	r3, [pc, #376]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	495b      	ldr	r1, [pc, #364]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd4c 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e37a      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404e:	f000 fc81 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4950      	ldr	r1, [pc, #320]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <HAL_RCC_OscConfig+0x278>)
 800406c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800406e:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff f958 	bl	8003328 <HAL_InitTick>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d052      	beq.n	8004128 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	e35e      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d032      	beq.n	80040f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800408e:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a42      	ldr	r2, [pc, #264]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800409a:	f7ff f995 	bl	80033c8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a2:	f7ff f991 	bl	80033c8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e347      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a35      	ldr	r2, [pc, #212]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040c6:	f043 0308 	orr.w	r3, r3, #8
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4930      	ldr	r1, [pc, #192]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	492b      	ldr	r1, [pc, #172]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
 80040f2:	e01a      	b.n	800412a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040f4:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a28      	ldr	r2, [pc, #160]	; (800419c <HAL_RCC_OscConfig+0x270>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004100:	f7ff f962 	bl	80033c8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004108:	f7ff f95e 	bl	80033c8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e314      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCC_OscConfig+0x270>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1dc>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d073      	beq.n	800421e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x21c>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d10e      	bne.n	8004160 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_RCC_OscConfig+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d063      	beq.n	800421c <HAL_RCC_OscConfig+0x2f0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d15f      	bne.n	800421c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e2f1      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x24c>
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a0b      	ldr	r2, [pc, #44]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e025      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d114      	bne.n	80041ac <HAL_RCC_OscConfig+0x280>
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b03      	ldr	r3, [pc, #12]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a02      	ldr	r2, [pc, #8]	; (800419c <HAL_RCC_OscConfig+0x270>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e013      	b.n	80041c4 <HAL_RCC_OscConfig+0x298>
 800419c:	40021000 	.word	0x40021000
 80041a0:	08007f2c 	.word	0x08007f2c
 80041a4:	200000a8 	.word	0x200000a8
 80041a8:	2000000c 	.word	0x2000000c
 80041ac:	4ba0      	ldr	r3, [pc, #640]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a9f      	ldr	r2, [pc, #636]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b9d      	ldr	r3, [pc, #628]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a9c      	ldr	r2, [pc, #624]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7ff f8fc 	bl	80033c8 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7ff f8f8 	bl	80033c8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e2ae      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e6:	4b92      	ldr	r3, [pc, #584]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x2a8>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7ff f8e8 	bl	80033c8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7ff f8e4 	bl	80033c8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e29a      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x2d0>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d060      	beq.n	80042ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x310>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d119      	bne.n	800426a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d116      	bne.n	800426a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423c:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x328>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e277      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	4973      	ldr	r1, [pc, #460]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004268:	e040      	b.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d023      	beq.n	80042ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004272:	4b6f      	ldr	r3, [pc, #444]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6e      	ldr	r2, [pc, #440]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7ff f8a3 	bl	80033c8 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7ff f89f 	bl	80033c8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e255      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004298:	4b65      	ldr	r3, [pc, #404]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	495f      	ldr	r1, [pc, #380]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
 80042b8:	e018      	b.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80042c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7ff f87f 	bl	80033c8 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7ff f87b 	bl	80033c8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e231      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d03c      	beq.n	8004372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01c      	beq.n	800433a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004300:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7ff f85a 	bl	80033c8 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7ff f856 	bl	80033c8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e20c      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ef      	beq.n	8004318 <HAL_RCC_OscConfig+0x3ec>
 8004338:	e01b      	b.n	8004372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433a:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	4a3b      	ldr	r2, [pc, #236]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7ff f83d 	bl	80033c8 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7ff f839 	bl	80033c8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1ef      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ef      	bne.n	8004352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80a6 	beq.w	80044cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10d      	bne.n	80043ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	4a26      	ldr	r2, [pc, #152]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	6593      	str	r3, [r2, #88]	; 0x58
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x508>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d118      	bne.n	80043ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_OscConfig+0x508>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <HAL_RCC_OscConfig+0x508>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c4:	f7ff f800 	bl	80033c8 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fffc 	bl	80033c8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1b2      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x508>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_OscConfig+0x4d8>
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004402:	e029      	b.n	8004458 <HAL_RCC_OscConfig+0x52c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d115      	bne.n	8004438 <HAL_RCC_OscConfig+0x50c>
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a03      	ldr	r2, [pc, #12]	; (8004430 <HAL_RCC_OscConfig+0x504>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x52c>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
 8004438:	4b9a      	ldr	r3, [pc, #616]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a99      	ldr	r2, [pc, #612]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004448:	4b96      	ldr	r3, [pc, #600]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	4a95      	ldr	r2, [pc, #596]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d016      	beq.n	800448e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fe ffb2 	bl	80033c8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fe ffae 	bl	80033c8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e162      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447e:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ed      	beq.n	8004468 <HAL_RCC_OscConfig+0x53c>
 800448c:	e015      	b.n	80044ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fe ff9b 	bl	80033c8 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe ff97 	bl	80033c8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e14b      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ac:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ed      	bne.n	8004496 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	4a77      	ldr	r2, [pc, #476]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d03c      	beq.n	8004552 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01c      	beq.n	800451a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044e0:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80044e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e6:	4a6f      	ldr	r2, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fe ff6a 	bl	80033c8 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f8:	f7fe ff66 	bl	80033c8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e11c      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5cc>
 8004518:	e01b      	b.n	8004552 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800451a:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004520:	4a60      	ldr	r2, [pc, #384]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe ff4d 	bl	80033c8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004532:	f7fe ff49 	bl	80033c8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0ff      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004544:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ef      	bne.n	8004532 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80f3 	beq.w	8004742 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	f040 80c9 	bne.w	80046f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004566:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	429a      	cmp	r2, r3
 8004578:	d12c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	3b01      	subs	r3, #1
 8004586:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d123      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d11b      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d113      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d06b      	beq.n	80046ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d062      	beq.n	80046a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0ac      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 80045f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f6:	f7fe fee7 	bl	80033c8 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fe fee3 	bl	80033c8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e099      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004622:	4013      	ands	r3, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800462c:	3a01      	subs	r2, #1
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004636:	0212      	lsls	r2, r2, #8
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800463e:	0852      	lsrs	r2, r2, #1
 8004640:	3a01      	subs	r2, #1
 8004642:	0552      	lsls	r2, r2, #21
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800464a:	0852      	lsrs	r2, r2, #1
 800464c:	3a01      	subs	r2, #1
 800464e:	0652      	lsls	r2, r2, #25
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004656:	06d2      	lsls	r2, r2, #27
 8004658:	430a      	orrs	r2, r1
 800465a:	4912      	ldr	r1, [pc, #72]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800465c:	4313      	orrs	r3, r2
 800465e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004678:	f7fe fea6 	bl	80033c8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe fea2 	bl	80033c8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e058      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_RCC_OscConfig+0x778>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469e:	e050      	b.n	8004742 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e04f      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
 80046a4:	40021000 	.word	0x40021000
 80046a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d144      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a20      	ldr	r2, [pc, #128]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046d0:	f7fe fe7a 	bl	80033c8 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fe fe76 	bl	80033c8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e02c      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_RCC_OscConfig+0x820>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x7ac>
 80046f6:	e024      	b.n	8004742 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d01f      	beq.n	800473e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <HAL_RCC_OscConfig+0x820>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <HAL_RCC_OscConfig+0x820>)
 8004704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fe fe5d 	bl	80033c8 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fe59 	bl	80033c8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e00f      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x820>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_RCC_OscConfig+0x820>)
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4905      	ldr	r1, [pc, #20]	; (800474c <HAL_RCC_OscConfig+0x820>)
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004738:	4013      	ands	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
 800473c:	e001      	b.n	8004742 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	feeefffc 	.word	0xfeeefffc

08004754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0e7      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004768:	4b75      	ldr	r3, [pc, #468]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d910      	bls.n	8004798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 0207 	bic.w	r2, r3, #7
 800477e:	4970      	ldr	r1, [pc, #448]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b6e      	ldr	r3, [pc, #440]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0cf      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d010      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b66      	ldr	r3, [pc, #408]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d908      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4960      	ldr	r1, [pc, #384]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04c      	beq.n	800486c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d121      	bne.n	800482a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0a6      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f2:	4b54      	ldr	r3, [pc, #336]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d115      	bne.n	800482a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e09a      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800480a:	4b4e      	ldr	r3, [pc, #312]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e08e      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481a:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e086      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4943      	ldr	r1, [pc, #268]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fe fdc4 	bl	80033c8 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fe fdc0 	bl	80033c8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e06e      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004884:	429a      	cmp	r2, r3
 8004886:	d208      	bcs.n	800489a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	492b      	ldr	r1, [pc, #172]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d210      	bcs.n	80048ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 0207 	bic.w	r2, r3, #7
 80048b0:	4923      	ldr	r1, [pc, #140]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_RCC_ClockConfig+0x1ec>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e036      	b.n	8004938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4918      	ldr	r1, [pc, #96]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4910      	ldr	r1, [pc, #64]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004908:	f000 f824 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	490b      	ldr	r1, [pc, #44]	; (8004948 <HAL_RCC_ClockConfig+0x1f4>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1f8>)
 8004926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1fc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fcfb 	bl	8003328 <HAL_InitTick>
 8004932:	4603      	mov	r3, r0
 8004934:	72fb      	strb	r3, [r7, #11]

  return status;
 8004936:	7afb      	ldrb	r3, [r7, #11]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40022000 	.word	0x40022000
 8004944:	40021000 	.word	0x40021000
 8004948:	08007f2c 	.word	0x08007f2c
 800494c:	200000a8 	.word	0x200000a8
 8004950:	2000000c 	.word	0x2000000c

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d121      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d11e      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049a4:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049b0:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d102      	bne.n	80049d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	e004      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d8:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80049da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d134      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_GetSysClockFreq+0xa6>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d003      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xac>
 80049f8:	e005      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80049fc:	617b      	str	r3, [r7, #20]
      break;
 80049fe:	e005      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a02:	617b      	str	r3, [r7, #20]
      break;
 8004a04:	e002      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	617b      	str	r3, [r7, #20]
      break;
 8004a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	3301      	adds	r3, #1
 8004a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	fb03 f202 	mul.w	r2, r3, r2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	0e5b      	lsrs	r3, r3, #25
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08007f44 	.word	0x08007f44
 8004a64:	00f42400 	.word	0x00f42400
 8004a68:	02dc6c00 	.word	0x02dc6c00

08004a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	200000a8 	.word	0x200000a8

08004a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a88:	f7ff fff0 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	08007f3c 	.word	0x08007f3c

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ab4:	f7ff ffda 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0adb      	lsrs	r3, r3, #11
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08007f3c 	.word	0x08007f3c

08004adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004af4:	f7ff f9b6 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004af8:	6178      	str	r0, [r7, #20]
 8004afa:	e014      	b.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
 8004b08:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b14:	f7ff f9a6 	bl	8003e64 <HAL_PWREx_GetVoltageRange>
 8004b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d10b      	bne.n	8004b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d919      	bls.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2ba0      	cmp	r3, #160	; 0xa0
 8004b38:	d902      	bls.n	8004b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e013      	b.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b40:	2301      	movs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e010      	b.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b80      	cmp	r3, #128	; 0x80
 8004b4a:	d902      	bls.n	8004b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	e00a      	b.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b80      	cmp	r3, #128	; 0x80
 8004b56:	d102      	bne.n	8004b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b58:	2302      	movs	r3, #2
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e004      	b.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b70      	cmp	r3, #112	; 0x70
 8004b62:	d101      	bne.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b64:	2301      	movs	r3, #1
 8004b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 0207 	bic.w	r2, r3, #7
 8004b70:	4909      	ldr	r1, [pc, #36]	; (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40022000 	.word	0x40022000

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba8:	2300      	movs	r3, #0
 8004baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d031      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bc0:	d01a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bc6:	d814      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004bd2:	4b5d      	ldr	r3, [pc, #372]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a5c      	ldr	r2, [pc, #368]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bde:	e00c      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f9f0 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bf0:	e003      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c00:	4b51      	ldr	r3, [pc, #324]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	494e      	ldr	r1, [pc, #312]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c16:	e001      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 809e 	beq.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c2e:	4b46      	ldr	r3, [pc, #280]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c44:	4b40      	ldr	r3, [pc, #256]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c48:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c50:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c60:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a39      	ldr	r2, [pc, #228]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6c:	f7fe fbac 	bl	80033c8 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c72:	e009      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c74:	f7fe fba8 	bl	80033c8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	74fb      	strb	r3, [r7, #19]
        break;
 8004c86:	e005      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c88:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d15a      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d019      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc2:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce2:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d016      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fb68 	bl	80033c8 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fb64 	bl	80033c8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d902      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	74fb      	strb	r3, [r7, #19]
            break;
 8004d12:	e006      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ec      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d36:	4904      	ldr	r1, [pc, #16]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d3e:	e009      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d54:	7c7b      	ldrb	r3, [r7, #17]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5a:	4b9b      	ldr	r3, [pc, #620]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	4a9a      	ldr	r2, [pc, #616]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d72:	4b95      	ldr	r3, [pc, #596]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f023 0203 	bic.w	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	4991      	ldr	r1, [pc, #580]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d94:	4b8c      	ldr	r3, [pc, #560]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 020c 	bic.w	r2, r3, #12
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	4989      	ldr	r1, [pc, #548]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004db6:	4b84      	ldr	r3, [pc, #528]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	4980      	ldr	r1, [pc, #512]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	4978      	ldr	r1, [pc, #480]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dfa:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	496f      	ldr	r1, [pc, #444]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4967      	ldr	r1, [pc, #412]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3e:	4b62      	ldr	r3, [pc, #392]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	495e      	ldr	r1, [pc, #376]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e60:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	4956      	ldr	r1, [pc, #344]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e82:	4b51      	ldr	r3, [pc, #324]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	494d      	ldr	r1, [pc, #308]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d028      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ea4:	4b48      	ldr	r3, [pc, #288]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	4945      	ldr	r1, [pc, #276]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a3f      	ldr	r2, [pc, #252]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
 8004ed0:	e011      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f872 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f02:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	492d      	ldr	r1, [pc, #180]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2c:	60d3      	str	r3, [r2, #12]
 8004f2e:	e011      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f843 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01c      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6e:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f820 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000

08004fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fda:	4b74      	ldr	r3, [pc, #464]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fe6:	4b71      	ldr	r3, [pc, #452]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0203 	and.w	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d10d      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ffe:	4b6b      	ldr	r3, [pc, #428]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
       ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d047      	beq.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e044      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d018      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x86>
 8005020:	2b03      	cmp	r3, #3
 8005022:	d825      	bhi.n	8005070 <RCCEx_PLLSAI1_Config+0xa4>
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <RCCEx_PLLSAI1_Config+0x62>
 8005028:	2b02      	cmp	r3, #2
 800502a:	d009      	beq.n	8005040 <RCCEx_PLLSAI1_Config+0x74>
 800502c:	e020      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800502e:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11d      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503e:	e01a      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005040:	4b5a      	ldr	r3, [pc, #360]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	2b00      	cmp	r3, #0
 800504a:	d116      	bne.n	800507a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005050:	e013      	b.n	800507a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005052:	4b56      	ldr	r3, [pc, #344]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800505e:	4b53      	ldr	r3, [pc, #332]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800506e:	e006      	b.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e004      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005086:	4b49      	ldr	r3, [pc, #292]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	430b      	orrs	r3, r1
 800509c:	4943      	ldr	r1, [pc, #268]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d17c      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fe f988 	bl	80033c8 <HAL_GetTick>
 80050b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ba:	e009      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050bc:	f7fe f984 	bl	80033c8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d902      	bls.n	80050d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	73fb      	strb	r3, [r7, #15]
        break;
 80050ce:	e005      	b.n	80050dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ef      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d15f      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d110      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e8:	4b30      	ldr	r3, [pc, #192]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	0211      	lsls	r1, r2, #8
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68d2      	ldr	r2, [r2, #12]
 80050fe:	06d2      	lsls	r2, r2, #27
 8005100:	430a      	orrs	r2, r1
 8005102:	492a      	ldr	r1, [pc, #168]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
 8005108:	e027      	b.n	800515a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d112      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005110:	4b26      	ldr	r3, [pc, #152]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6892      	ldr	r2, [r2, #8]
 8005120:	0211      	lsls	r1, r2, #8
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6912      	ldr	r2, [r2, #16]
 8005126:	0852      	lsrs	r2, r2, #1
 8005128:	3a01      	subs	r2, #1
 800512a:	0552      	lsls	r2, r2, #21
 800512c:	430a      	orrs	r2, r1
 800512e:	491f      	ldr	r1, [pc, #124]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005130:	4313      	orrs	r3, r2
 8005132:	610b      	str	r3, [r1, #16]
 8005134:	e011      	b.n	800515a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800513e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6892      	ldr	r2, [r2, #8]
 8005146:	0211      	lsls	r1, r2, #8
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6952      	ldr	r2, [r2, #20]
 800514c:	0852      	lsrs	r2, r2, #1
 800514e:	3a01      	subs	r2, #1
 8005150:	0652      	lsls	r2, r2, #25
 8005152:	430a      	orrs	r2, r1
 8005154:	4915      	ldr	r1, [pc, #84]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800515a:	4b14      	ldr	r3, [pc, #80]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a13      	ldr	r2, [pc, #76]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005160:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fe f92f 	bl	80033c8 <HAL_GetTick>
 800516a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800516c:	e009      	b.n	8005182 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800516e:	f7fe f92b 	bl	80033c8 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d902      	bls.n	8005182 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	73fb      	strb	r3, [r7, #15]
          break;
 8005180:	e005      	b.n	800518e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ef      	beq.n	800516e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4903      	ldr	r1, [pc, #12]	; (80051ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e03c      	b.n	8005256 <HAL_TIM_PWM_Start_DMA+0xa6>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d109      	bne.n	80051f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e02f      	b.n	8005256 <HAL_TIM_PWM_Start_DMA+0xa6>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d109      	bne.n	8005210 <HAL_TIM_PWM_Start_DMA+0x60>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e022      	b.n	8005256 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d109      	bne.n	800522a <HAL_TIM_PWM_Start_DMA+0x7a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e015      	b.n	8005256 <HAL_TIM_PWM_Start_DMA+0xa6>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d109      	bne.n	8005244 <HAL_TIM_PWM_Start_DMA+0x94>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e008      	b.n	8005256 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800525a:	2302      	movs	r3, #2
 800525c:	e18d      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e03c      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d109      	bne.n	8005292 <HAL_TIM_PWM_Start_DMA+0xe2>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e02f      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d109      	bne.n	80052ac <HAL_TIM_PWM_Start_DMA+0xfc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e022      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	d109      	bne.n	80052c6 <HAL_TIM_PWM_Start_DMA+0x116>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e015      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start_DMA+0x130>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e008      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d034      	beq.n	8005360 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_TIM_PWM_Start_DMA+0x152>
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e139      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start_DMA+0x166>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	e026      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d104      	bne.n	8005326 <HAL_TIM_PWM_Start_DMA+0x176>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	e01e      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start_DMA+0x186>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005334:	e016      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start_DMA+0x196>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005344:	e00e      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005354:	e006      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800535e:	e001      	b.n	8005364 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e10a      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b0c      	cmp	r3, #12
 8005368:	f200 80ae 	bhi.w	80054c8 <HAL_TIM_PWM_Start_DMA+0x318>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080054c9 	.word	0x080054c9
 800537c:	080054c9 	.word	0x080054c9
 8005380:	080054c9 	.word	0x080054c9
 8005384:	080053f1 	.word	0x080053f1
 8005388:	080054c9 	.word	0x080054c9
 800538c:	080054c9 	.word	0x080054c9
 8005390:	080054c9 	.word	0x080054c9
 8005394:	08005439 	.word	0x08005439
 8005398:	080054c9 	.word	0x080054c9
 800539c:	080054c9 	.word	0x080054c9
 80053a0:	080054c9 	.word	0x080054c9
 80053a4:	08005481 	.word	0x08005481
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4a75      	ldr	r2, [pc, #468]	; (8005584 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	4a74      	ldr	r2, [pc, #464]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	4a73      	ldr	r2, [pc, #460]	; (800558c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80053be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3334      	adds	r3, #52	; 0x34
 80053cc:	461a      	mov	r2, r3
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	f7fe f991 	bl	80036f6 <HAL_DMA_Start_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e0cd      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	60da      	str	r2, [r3, #12]
      break;
 80053ee:	e06e      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	4a63      	ldr	r2, [pc, #396]	; (8005584 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	4a62      	ldr	r2, [pc, #392]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	4a61      	ldr	r2, [pc, #388]	; (800558c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3338      	adds	r3, #56	; 0x38
 8005414:	461a      	mov	r2, r3
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	f7fe f96d 	bl	80036f6 <HAL_DMA_Start_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0a9      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e04a      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a50      	ldr	r2, [pc, #320]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005446:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	4a4f      	ldr	r2, [pc, #316]	; (800558c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800544e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	333c      	adds	r3, #60	; 0x3c
 800545c:	461a      	mov	r2, r3
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	f7fe f949 	bl	80036f6 <HAL_DMA_Start_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e085      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547c:	60da      	str	r2, [r3, #12]
      break;
 800547e:	e026      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	4a3f      	ldr	r2, [pc, #252]	; (8005584 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a3e      	ldr	r2, [pc, #248]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800548e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4a3d      	ldr	r2, [pc, #244]	; (800558c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3340      	adds	r3, #64	; 0x40
 80054a4:	461a      	mov	r2, r3
 80054a6:	887b      	ldrh	r3, [r7, #2]
 80054a8:	f7fe f925 	bl	80036f6 <HAL_DMA_Start_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e061      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054c4:	60da      	str	r2, [r3, #12]
      break;
 80054c6:	e002      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
      break;
 80054cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d151      	bne.n	8005578 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fa2c 	bl	800593a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_PWM_Start_DMA+0x350>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a28      	ldr	r2, [pc, #160]	; (8005594 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Start_DMA+0x350>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a27      	ldr	r2, [pc, #156]	; (8005598 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Start_DMA+0x354>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start_DMA+0x356>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_PWM_Start_DMA+0x388>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d004      	beq.n	8005538 <HAL_TIM_PWM_Start_DMA+0x388>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d115      	bne.n	8005564 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d015      	beq.n	8005576 <HAL_TIM_PWM_Start_DMA+0x3c6>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d011      	beq.n	8005576 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	e008      	b.n	8005576 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e000      	b.n	8005578 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	0800582b 	.word	0x0800582b
 8005588:	080058d3 	.word	0x080058d3
 800558c:	08005799 	.word	0x08005799
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	d855      	bhi.n	8005660 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	08005661 	.word	0x08005661
 80055c4:	08005661 	.word	0x08005661
 80055c8:	08005661 	.word	0x08005661
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	08005661 	.word	0x08005661
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005661 	.word	0x08005661
 80055dc:	08005629 	.word	0x08005629
 80055e0:	08005661 	.word	0x08005661
 80055e4:	08005661 	.word	0x08005661
 80055e8:	08005661 	.word	0x08005661
 80055ec:	08005645 	.word	0x08005645
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe f8d6 	bl	80037b6 <HAL_DMA_Abort_IT>
      break;
 800560a:	e02c      	b.n	8005666 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe f8c8 	bl	80037b6 <HAL_DMA_Abort_IT>
      break;
 8005626:	e01e      	b.n	8005666 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005636:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe f8ba 	bl	80037b6 <HAL_DMA_Abort_IT>
      break;
 8005642:	e010      	b.n	8005666 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005652:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe f8ac 	bl	80037b6 <HAL_DMA_Abort_IT>
      break;
 800565e:	e002      	b.n	8005666 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	bf00      	nop
  }

  if (status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d176      	bne.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2200      	movs	r2, #0
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f960 	bl	800593a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a39      	ldr	r2, [pc, #228]	; (8005764 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a37      	ldr	r2, [pc, #220]	; (8005768 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a36      	ldr	r2, [pc, #216]	; (800576c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f240 4344 	movw	r3, #1092	; 0x444
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_TIM_PWM_Stop_DMA+0x162>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	f240 4344 	movw	r3, #1092	; 0x444
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_PWM_Stop_DMA+0x162>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Stop_DMA+0x172>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005710:	e023      	b.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Stop_DMA+0x182>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005720:	e01b      	b.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Stop_DMA+0x192>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005730:	e013      	b.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005740:	e00b      	b.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b10      	cmp	r3, #16
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005750:	e003      	b.n	800575a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400

08005770 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d107      	bne.n	80057c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057be:	e02a      	b.n	8005816 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d107      	bne.n	80057da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2202      	movs	r2, #2
 80057ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d8:	e01d      	b.n	8005816 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d107      	bne.n	80057f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2204      	movs	r2, #4
 80057e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f2:	e010      	b.n	8005816 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d107      	bne.n	800580e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2208      	movs	r2, #8
 8005802:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800580c:	e003      	b.n	8005816 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ffb4 	bl	8005784 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	771a      	strb	r2, [r3, #28]
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10b      	bne.n	800585a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d136      	bne.n	80058be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005858:	e031      	b.n	80058be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d10b      	bne.n	800587c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2202      	movs	r2, #2
 8005868:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d125      	bne.n	80058be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800587a:	e020      	b.n	80058be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d10b      	bne.n	800589e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2204      	movs	r2, #4
 800588a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d114      	bne.n	80058be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	e00f      	b.n	80058be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d10a      	bne.n	80058be <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2208      	movs	r2, #8
 80058ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f001 f8c8 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d103      	bne.n	80058f2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	771a      	strb	r2, [r3, #28]
 80058f0:	e019      	b.n	8005926 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d103      	bne.n	8005904 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2202      	movs	r2, #2
 8005900:	771a      	strb	r2, [r3, #28]
 8005902:	e010      	b.n	8005926 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d103      	bne.n	8005916 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2204      	movs	r2, #4
 8005912:	771a      	strb	r2, [r3, #28]
 8005914:	e007      	b.n	8005926 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d102      	bne.n	8005926 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2208      	movs	r2, #8
 8005924:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff22 	bl	8005770 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	771a      	strb	r2, [r3, #28]
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593a:	b480      	push	{r7}
 800593c:	b087      	sub	sp, #28
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2201      	movs	r2, #1
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	43db      	mvns	r3, r3
 800595c:	401a      	ands	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e040      	b.n	8005a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f873 	bl	8005a92 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f90e 	bl	8005be4 <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fb5c 	bl	8006098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fbe3 	bl	80061dc <UART_CheckIdleState>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e02b      	b.n	8005a8a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2224      	movs	r2, #36	; 0x24
 8005a36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f820 	bl	8005aa6 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b08a      	sub	sp, #40	; 0x28
 8005abe:	af02      	add	r7, sp, #8
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	f040 8082 	bne.w	8005bd8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_UART_Transmit+0x26>
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e07a      	b.n	8005bda <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Transmit+0x38>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e073      	b.n	8005bda <HAL_UART_Transmit+0x120>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2221      	movs	r2, #33	; 0x21
 8005b06:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b08:	f7fd fc5e 	bl	80033c8 <HAL_GetTick>
 8005b0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d108      	bne.n	8005b3a <HAL_UART_Transmit+0x80>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e003      	b.n	8005b42 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b4a:	e02d      	b.n	8005ba8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb89 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e039      	b.n	8005bda <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3302      	adds	r3, #2
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e008      	b.n	8005b96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1cb      	bne.n	8005b4c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2140      	movs	r1, #64	; 0x40
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fb55 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e005      	b.n	8005bda <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b08a      	sub	sp, #40	; 0x28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b9e      	ldr	r3, [pc, #632]	; (8005e8c <UART_SetConfig+0x2a8>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a93      	ldr	r2, [pc, #588]	; (8005e90 <UART_SetConfig+0x2ac>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a8a      	ldr	r2, [pc, #552]	; (8005e94 <UART_SetConfig+0x2b0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d126      	bne.n	8005cbc <UART_SetConfig+0xd8>
 8005c6e:	4b8a      	ldr	r3, [pc, #552]	; (8005e98 <UART_SetConfig+0x2b4>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d81b      	bhi.n	8005cb4 <UART_SetConfig+0xd0>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0xa0>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005c9d 	.word	0x08005c9d
 8005c90:	08005cad 	.word	0x08005cad
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e0ab      	b.n	8005df4 <UART_SetConfig+0x210>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca2:	e0a7      	b.n	8005df4 <UART_SetConfig+0x210>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e0a3      	b.n	8005df4 <UART_SetConfig+0x210>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb2:	e09f      	b.n	8005df4 <UART_SetConfig+0x210>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cba:	e09b      	b.n	8005df4 <UART_SetConfig+0x210>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a76      	ldr	r2, [pc, #472]	; (8005e9c <UART_SetConfig+0x2b8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d138      	bne.n	8005d38 <UART_SetConfig+0x154>
 8005cc6:	4b74      	ldr	r3, [pc, #464]	; (8005e98 <UART_SetConfig+0x2b4>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	d82d      	bhi.n	8005d30 <UART_SetConfig+0x14c>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0xf8>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005d31 	.word	0x08005d31
 8005ce4:	08005d31 	.word	0x08005d31
 8005ce8:	08005d31 	.word	0x08005d31
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d31 	.word	0x08005d31
 8005cf4:	08005d31 	.word	0x08005d31
 8005cf8:	08005d31 	.word	0x08005d31
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d31 	.word	0x08005d31
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d16:	e06d      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1e:	e069      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e065      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e061      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e05d      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <UART_SetConfig+0x2bc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d125      	bne.n	8005d8e <UART_SetConfig+0x1aa>
 8005d42:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <UART_SetConfig+0x2b4>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d4c:	2b30      	cmp	r3, #48	; 0x30
 8005d4e:	d016      	beq.n	8005d7e <UART_SetConfig+0x19a>
 8005d50:	2b30      	cmp	r3, #48	; 0x30
 8005d52:	d818      	bhi.n	8005d86 <UART_SetConfig+0x1a2>
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d00a      	beq.n	8005d6e <UART_SetConfig+0x18a>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d814      	bhi.n	8005d86 <UART_SetConfig+0x1a2>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <UART_SetConfig+0x182>
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d008      	beq.n	8005d76 <UART_SetConfig+0x192>
 8005d64:	e00f      	b.n	8005d86 <UART_SetConfig+0x1a2>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6c:	e042      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d74:	e03e      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d76:	2304      	movs	r3, #4
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7c:	e03a      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d84:	e036      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d86:	2310      	movs	r3, #16
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8c:	e032      	b.n	8005df4 <UART_SetConfig+0x210>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3f      	ldr	r2, [pc, #252]	; (8005e90 <UART_SetConfig+0x2ac>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d12a      	bne.n	8005dee <UART_SetConfig+0x20a>
 8005d98:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <UART_SetConfig+0x2b4>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da6:	d01a      	beq.n	8005dde <UART_SetConfig+0x1fa>
 8005da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dac:	d81b      	bhi.n	8005de6 <UART_SetConfig+0x202>
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	d00c      	beq.n	8005dce <UART_SetConfig+0x1ea>
 8005db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db8:	d815      	bhi.n	8005de6 <UART_SetConfig+0x202>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <UART_SetConfig+0x1e2>
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc2:	d008      	beq.n	8005dd6 <UART_SetConfig+0x1f2>
 8005dc4:	e00f      	b.n	8005de6 <UART_SetConfig+0x202>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dcc:	e012      	b.n	8005df4 <UART_SetConfig+0x210>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd4:	e00e      	b.n	8005df4 <UART_SetConfig+0x210>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ddc:	e00a      	b.n	8005df4 <UART_SetConfig+0x210>
 8005dde:	2308      	movs	r3, #8
 8005de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de4:	e006      	b.n	8005df4 <UART_SetConfig+0x210>
 8005de6:	2310      	movs	r3, #16
 8005de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dec:	e002      	b.n	8005df4 <UART_SetConfig+0x210>
 8005dee:	2310      	movs	r3, #16
 8005df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <UART_SetConfig+0x2ac>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f040 808a 	bne.w	8005f14 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d824      	bhi.n	8005e52 <UART_SetConfig+0x26e>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <UART_SetConfig+0x22c>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e53 	.word	0x08005e53
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e53 	.word	0x08005e53
 8005e20:	08005e43 	.word	0x08005e43
 8005e24:	08005e53 	.word	0x08005e53
 8005e28:	08005e53 	.word	0x08005e53
 8005e2c:	08005e53 	.word	0x08005e53
 8005e30:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fe fe26 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e010      	b.n	8005e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <UART_SetConfig+0x2c0>)
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e00d      	b.n	8005e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fe fd87 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005e46:	61f8      	str	r0, [r7, #28]
        break;
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	61fb      	str	r3, [r7, #28]
        break;
 8005e50:	e005      	b.n	8005e5e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8109 	beq.w	8006078 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d305      	bcc.n	8005e82 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d912      	bls.n	8005ea8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e88:	e0f6      	b.n	8006078 <UART_SetConfig+0x494>
 8005e8a:	bf00      	nop
 8005e8c:	efff69f3 	.word	0xefff69f3
 8005e90:	40008000 	.word	0x40008000
 8005e94:	40013800 	.word	0x40013800
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40004400 	.word	0x40004400
 8005ea0:	40004800 	.word	0x40004800
 8005ea4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	461c      	mov	r4, r3
 8005eae:	4615      	mov	r5, r2
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	022b      	lsls	r3, r5, #8
 8005eba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ebe:	0222      	lsls	r2, r4, #8
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	6849      	ldr	r1, [r1, #4]
 8005ec4:	0849      	lsrs	r1, r1, #1
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	4688      	mov	r8, r1
 8005eca:	4681      	mov	r9, r0
 8005ecc:	eb12 0a08 	adds.w	sl, r2, r8
 8005ed0:	eb43 0b09 	adc.w	fp, r3, r9
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	f7fa f9c3 	bl	8000270 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4613      	mov	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef8:	d308      	bcc.n	8005f0c <UART_SetConfig+0x328>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f00:	d204      	bcs.n	8005f0c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	e0b5      	b.n	8006078 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f12:	e0b1      	b.n	8006078 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1c:	d15d      	bne.n	8005fda <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d827      	bhi.n	8005f76 <UART_SetConfig+0x392>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x348>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f61 	.word	0x08005f61
 8005f38:	08005f77 	.word	0x08005f77
 8005f3c:	08005f67 	.word	0x08005f67
 8005f40:	08005f77 	.word	0x08005f77
 8005f44:	08005f77 	.word	0x08005f77
 8005f48:	08005f77 	.word	0x08005f77
 8005f4c:	08005f6f 	.word	0x08005f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe fd98 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e014      	b.n	8005f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe fdaa 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	61f8      	str	r0, [r7, #28]
        break;
 8005f5e:	e010      	b.n	8005f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f60:	4b4c      	ldr	r3, [pc, #304]	; (8006094 <UART_SetConfig+0x4b0>)
 8005f62:	61fb      	str	r3, [r7, #28]
        break;
 8005f64:	e00d      	b.n	8005f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f66:	f7fe fcf5 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8005f6a:	61f8      	str	r0, [r7, #28]
        break;
 8005f6c:	e009      	b.n	8005f82 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f72:	61fb      	str	r3, [r7, #28]
        break;
 8005f74:	e005      	b.n	8005f82 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d077      	beq.n	8006078 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	005a      	lsls	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	441a      	add	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b0f      	cmp	r3, #15
 8005fa2:	d916      	bls.n	8005fd2 <UART_SetConfig+0x3ee>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005faa:	d212      	bcs.n	8005fd2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f023 030f 	bic.w	r3, r3, #15
 8005fb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	8afb      	ldrh	r3, [r7, #22]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	8afa      	ldrh	r2, [r7, #22]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e052      	b.n	8006078 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd8:	e04e      	b.n	8006078 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d827      	bhi.n	8006032 <UART_SetConfig+0x44e>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x404>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	08006023 	.word	0x08006023
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006033 	.word	0x08006033
 8006004:	08006033 	.word	0x08006033
 8006008:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe fd3a 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8006010:	61f8      	str	r0, [r7, #28]
        break;
 8006012:	e014      	b.n	800603e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fd4c 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 8006018:	61f8      	str	r0, [r7, #28]
        break;
 800601a:	e010      	b.n	800603e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <UART_SetConfig+0x4b0>)
 800601e:	61fb      	str	r3, [r7, #28]
        break;
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe fc97 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8006026:	61f8      	str	r0, [r7, #28]
        break;
 8006028:	e009      	b.n	800603e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	61fb      	str	r3, [r7, #28]
        break;
 8006030:	e005      	b.n	800603e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800603c:	bf00      	nop
    }

    if (pclk != 0U)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d019      	beq.n	8006078 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	085a      	lsrs	r2, r3, #1
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	441a      	add	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	d909      	bls.n	8006072 <UART_SetConfig+0x48e>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d205      	bcs.n	8006072 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	e002      	b.n	8006078 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006084:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006092:	bf00      	nop
 8006094:	00f42400 	.word	0x00f42400

08006098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01a      	beq.n	80061ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006196:	d10a      	bne.n	80061ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061ec:	f7fd f8ec 	bl	80033c8 <HAL_GetTick>
 80061f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10e      	bne.n	800621e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f82d 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e023      	b.n	8006266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d10e      	bne.n	800624a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f817 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e00d      	b.n	8006266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b09c      	sub	sp, #112	; 0x70
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627e:	e0a5      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006286:	f000 80a1 	beq.w	80063cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fd f89d 	bl	80033c8 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800629a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629c:	2b00      	cmp	r3, #0
 800629e:	d13e      	bne.n	800631e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b4:	667b      	str	r3, [r7, #100]	; 0x64
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	663b      	str	r3, [r7, #96]	; 0x60
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e067      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d04f      	beq.n	80063cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d147      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006344:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800635a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
 8006366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800636a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e6      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	613b      	str	r3, [r7, #16]
   return(result);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3308      	adds	r3, #8
 8006396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006398:	623a      	str	r2, [r7, #32]
 800639a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	69f9      	ldr	r1, [r7, #28]
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e010      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f43f af4a 	beq.w	8006280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3770      	adds	r7, #112	; 0x70
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b0ae      	sub	sp, #184	; 0xb8
 80063fc:	af00      	add	r7, sp, #0
    // commented code below used for timer
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006402:	2244      	movs	r2, #68	; 0x44
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fcca 	bl	8006da0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800640c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	225c      	movs	r2, #92	; 0x5c
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fcbc 	bl	8006da0 <memset>

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006428:	f44f 7000 	mov.w	r0, #512	; 0x200
 800642c:	f7fd fd28 	bl	8003e80 <HAL_PWREx_ControlVoltageScaling>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d000      	beq.n	8006438 <SystemClock_Config+0x40>
    {
        while(1);
 8006436:	e7fe      	b.n	8006436 <SystemClock_Config+0x3e>
    }

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8006438:	f7fd fc94 	bl	8003d64 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <SystemClock_Config+0xc0>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <SystemClock_Config+0xc0>)
 8006444:	f023 0318 	bic.w	r3, r3, #24
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800644c:	2312      	movs	r3, #18
 800644e:	677b      	str	r3, [r7, #116]	; 0x74
    //RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006458:	2310      	movs	r3, #16
 800645a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800645e:	2301      	movs	r3, #1
 8006460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    //CC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fd56 	bl	8003f2c <HAL_RCC_OscConfig>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d000      	beq.n	8006488 <SystemClock_Config+0x90>
    {
        while(1);
 8006486:	e7fe      	b.n	8006486 <SystemClock_Config+0x8e>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006488:	230f      	movs	r3, #15
 800648a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    //RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800648c:	2300      	movs	r3, #0
 800648e:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006490:	2300      	movs	r3, #0
 8006492:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006494:	2300      	movs	r3, #0
 8006496:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006498:	2300      	movs	r3, #0
 800649a:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800649c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe f956 	bl	8004754 <HAL_RCC_ClockConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d000      	beq.n	80064b0 <SystemClock_Config+0xb8>
    {
        while(1);
 80064ae:	e7fe      	b.n	80064ae <SystemClock_Config+0xb6>
//    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
//    /** Configure the main internal regulator output voltage
//    */
//
//    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
}
 80064b0:	bf00      	nop
 80064b2:	37b8      	adds	r7, #184	; 0xb8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40021000 	.word	0x40021000

080064bc <board_init_common_board_init>:
}


uint8_t new_buf[10] = {32,33,34,35};
void board_init_common_board_init(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c2:	f107 031c 	add.w	r3, r7, #28
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	605a      	str	r2, [r3, #4]
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	60da      	str	r2, [r3, #12]
 80064d0:	611a      	str	r2, [r3, #16]

    srand(time(0));
 80064d2:	2000      	movs	r0, #0
 80064d4:	f000 fd8a 	bl	8006fec <time>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd46 	bl	8006f70 <srand>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <board_init_common_board_init+0x104>)
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <board_init_common_board_init+0x104>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6613      	str	r3, [r2, #96]	; 0x60
 80064f0:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <board_init_common_board_init+0x104>)
 80064f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_PWR_CLK_ENABLE();
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <board_init_common_board_init+0x104>)
 80064fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <board_init_common_board_init+0x104>)
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006506:	6593      	str	r3, [r2, #88]	; 0x58
 8006508:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <board_init_common_board_init+0x104>)
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	697b      	ldr	r3, [r7, #20]

    HAL_Init();
 8006514:	f7fc fef0 	bl	80032f8 <HAL_Init>

    SystemClock_Config();
 8006518:	f7ff ff6e 	bl	80063f8 <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800651c:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <board_init_common_board_init+0x104>)
 800651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <board_init_common_board_init+0x104>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <board_init_common_board_init+0x104>)
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006534:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <board_init_common_board_init+0x104>)
 8006536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <board_init_common_board_init+0x104>)
 800653a:	f043 0302 	orr.w	r3, r3, #2
 800653e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <board_init_common_board_init+0x104>)
 8006542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <board_init_common_board_init+0x104>)
 800654e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <board_init_common_board_init+0x104>)
 8006552:	f043 0304 	orr.w	r3, r3, #4
 8006556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <board_init_common_board_init+0x104>)
 800655a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <board_init_common_board_init+0x104>)
 8006566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <board_init_common_board_init+0x104>)
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006570:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <board_init_common_board_init+0x104>)
 8006572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
//    GPIO_InitStruct.Pin = PIN_LVL_EN;
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);

    board_init_specific();
 800657c:	f000 f850 	bl	8006620 <board_init_specific>
    GPIO_InitStruct.Pin = PIN_XR_GPIO;
 8006580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006586:	2301      	movs	r3, #1
 8006588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	2300      	movs	r3, #0
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800658e:	f107 031c 	add.w	r3, r7, #28
 8006592:	4619      	mov	r1, r3
 8006594:	480b      	ldr	r0, [pc, #44]	; (80065c4 <board_init_common_board_init+0x108>)
 8006596:	f7fd fa2f 	bl	80039f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_XR_GPIO, GPIO_PIN_SET);
 800659a:	2201      	movs	r2, #1
 800659c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065a0:	4808      	ldr	r0, [pc, #32]	; (80065c4 <board_init_common_board_init+0x108>)
 80065a2:	f7fd fba3 	bl	8003cec <HAL_GPIO_WritePin>
    serial_com_init_usart();
 80065a6:	f000 f82b 	bl	8006600 <serial_com_init_usart>

    while (1)
    {
        if(HAL_UART_Transmit(&gh_host_usart, new_buf, 4, 10000) == HAL_OK)
 80065aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80065ae:	2204      	movs	r2, #4
 80065b0:	4905      	ldr	r1, [pc, #20]	; (80065c8 <board_init_common_board_init+0x10c>)
 80065b2:	4806      	ldr	r0, [pc, #24]	; (80065cc <board_init_common_board_init+0x110>)
 80065b4:	f7ff fa81 	bl	8005aba <HAL_UART_Transmit>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f5      	bne.n	80065aa <board_init_common_board_init+0xee>
        {
            while(1);
 80065be:	e7fe      	b.n	80065be <board_init_common_board_init+0x102>
 80065c0:	40021000 	.word	0x40021000
 80065c4:	48000400 	.word	0x48000400
 80065c8:	20000014 	.word	0x20000014
 80065cc:	20000020 	.word	0x20000020

080065d0 <board_init_red_led_on>:
    HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
}


void board_init_red_led_on(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_SET);
 80065d4:	2201      	movs	r2, #1
 80065d6:	2104      	movs	r1, #4
 80065d8:	4802      	ldr	r0, [pc, #8]	; (80065e4 <board_init_red_led_on+0x14>)
 80065da:	f7fd fb87 	bl	8003cec <HAL_GPIO_WritePin>
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	48000800 	.word	0x48000800

080065e8 <board_init_red_led_off>:


void board_init_red_led_off(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_RESET);
 80065ec:	2200      	movs	r2, #0
 80065ee:	2104      	movs	r1, #4
 80065f0:	4802      	ldr	r0, [pc, #8]	; (80065fc <board_init_red_led_off+0x14>)
 80065f2:	f7fd fb7b 	bl	8003cec <HAL_GPIO_WritePin>
}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	48000800 	.word	0x48000800

08006600 <serial_com_init_usart>:
    }
}


void serial_com_init_usart(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
    if(HAL_UART_DeInit(&gh_host_usart) != HAL_OK)
 8006604:	4805      	ldr	r0, [pc, #20]	; (800661c <serial_com_init_usart+0x1c>)
 8006606:	f7ff fa0b 	bl	8005a20 <HAL_UART_DeInit>
    {
        //Error_Handler();
    }
    if(HAL_UART_Init(&gh_host_usart) != HAL_OK)
 800660a:	4804      	ldr	r0, [pc, #16]	; (800661c <serial_com_init_usart+0x1c>)
 800660c:	f7ff f9ba 	bl	8005984 <HAL_UART_Init>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d000      	beq.n	8006618 <serial_com_init_usart+0x18>
    {
        while(1);
 8006616:	e7fe      	b.n	8006616 <serial_com_init_usart+0x16>
        //Error_Handler();
    }
}
 8006618:	bf00      	nop
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000020 	.word	0x20000020

08006620 <board_init_specific>:
    board_init_usart_setup();
    board_init_spi_setup();
}

void board_init_specific(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b09e      	sub	sp, #120	; 0x78
 8006624:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006626:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	225c      	movs	r2, #92	; 0x5c
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fbae 	bl	8006da0 <memset>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006644:	2301      	movs	r3, #1
 8006646:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe faa2 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d000      	beq.n	8006660 <board_init_specific+0x40>
    {
        while(1);
 800665e:	e7fe      	b.n	800665e <board_init_specific+0x3e>
      //Error_Handler();
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <board_init_specific+0xa8>)
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <board_init_specific+0xa8>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800666c:	4b16      	ldr	r3, [pc, #88]	; (80066c8 <board_init_specific+0xa8>)
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	687b      	ldr	r3, [r7, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006678:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <board_init_specific+0xa8>)
 800667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667c:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <board_init_specific+0xa8>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006684:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <board_init_specific+0xa8>)
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin       = PIN_XR_RX | PIN_XR_TX; //
 8006690:	2303      	movs	r3, #3
 8006692:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006694:	2302      	movs	r3, #2
 8006696:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80066a0:	2308      	movs	r3, #8
 80066a2:	677b      	str	r3, [r7, #116]	; 0x74

    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80066a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80066a8:	4619      	mov	r1, r3
 80066aa:	4808      	ldr	r0, [pc, #32]	; (80066cc <board_init_specific+0xac>)
 80066ac:	f7fd f9a4 	bl	80039f8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 1);
 80066b0:	2201      	movs	r2, #1
 80066b2:	2100      	movs	r1, #0
 80066b4:	2046      	movs	r0, #70	; 0x46
 80066b6:	f7fc ffda 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80066ba:	2046      	movs	r0, #70	; 0x46
 80066bc:	f7fc fff3 	bl	80036a6 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
//
//    board_init_peripheral_setup();
}
 80066c0:	bf00      	nop
 80066c2:	3778      	adds	r7, #120	; 0x78
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40021000 	.word	0x40021000
 80066cc:	48000800 	.word	0x48000800

080066d0 <flash_info_block_init>:
#pragma pack(0)

flash_info_block_t  g_flash_info_block;

void flash_info_block_init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 80066d4:	f7fc fea8 	bl	8003428 <HAL_GetUIDw0>
 80066d8:	4603      	mov	r3, r0
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <flash_info_block_init+0x54>)
 80066dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 80066e0:	f7fc feae 	bl	8003440 <HAL_GetUIDw1>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4a0f      	ldr	r2, [pc, #60]	; (8006724 <flash_info_block_init+0x54>)
 80066e8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 80066ec:	f7fc feb4 	bl	8003458 <HAL_GetUIDw2>
 80066f0:	4603      	mov	r3, r0
 80066f2:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <flash_info_block_init+0x54>)
 80066f4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <flash_info_block_init+0x54>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]

    g_flash_info_block.flash_info_data.image_info.active_image = FLASH_INFO_IMAGE_SLOT_1;
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <flash_info_block_init+0x54>)
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    //g_flash_info_block.image_data.active_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.mini_main_image = FLASH_INFO_MINI_MAIN_SLOT;
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <flash_info_block_init+0x54>)
 8006708:	2200      	movs	r2, #0
 800670a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
//    g_flash_info_block.image_data.mini_main_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.select_image = FLASH_INFO_IMAGE_SLOT_1;
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <flash_info_block_init+0x54>)
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    g_flash_info_block.flash_info_data.image_info.valid_image = UINT8_MAX;
 8006716:	4b03      	ldr	r3, [pc, #12]	; (8006724 <flash_info_block_init+0x54>)
 8006718:	22ff      	movs	r2, #255	; 0xff
 800671a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    // need to write to flash!
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20001d1c 	.word	0x20001d1c

08006728 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <flash_info_init+0x3c>)
 800672e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006732:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 8006734:	f7ff ffcc 	bl	80066d0 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <flash_info_init+0x40>)
 800673a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006742:	d10d      	bne.n	8006760 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <flash_info_init+0x40>)
 8006746:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800674e:	d107      	bne.n	8006760 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <flash_info_init+0x40>)
 8006752:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675a:	d101      	bne.n	8006760 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800675c:	f7ff ffb8 	bl	80066d0 <flash_info_block_init>
    }
}
 8006760:	bf00      	nop
 8006762:	bd80      	pop	{r7, pc}
 8006764:	2000251c 	.word	0x2000251c
 8006768:	20001d1c 	.word	0x20001d1c

0800676c <main>:
#include "task_create.h"
#include "flash_info.h"
#include "serial_com.h"

int main(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8006770:	f7ff fea4 	bl	80064bc <board_init_common_board_init>
    flash_info_init();
 8006774:	f7ff ffd8 	bl	8006728 <flash_info_init>
    //serial_com_init_usart();

    task_create();
 8006778:	f000 f80a 	bl	8006790 <task_create>
	semaphore_create();
 800677c:	f7f9 fefa 	bl	8000574 <semaphore_create>
    reset_ws2812b();
 8006780:	f7f9 ff4c 	bl	800061c <reset_ws2812b>
	osKernelStart();
 8006784:	f7f9 ffbc 	bl	8000700 <osKernelStart>
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8006794:	f7f9 ff90 	bl	80006b8 <osKernelInitialize>
    //g_led_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_led_ctrl_attributes);
	//g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    //g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
    g_led_strip_2_ctrl_handle = osThreadNew(task_led_ctrl_strip_two, NULL, &g_task_strip_2_led_ctrl_attributes);
 8006798:	4a06      	ldr	r2, [pc, #24]	; (80067b4 <task_create+0x24>)
 800679a:	2100      	movs	r1, #0
 800679c:	4806      	ldr	r0, [pc, #24]	; (80067b8 <task_create+0x28>)
 800679e:	f7f9 ffd5 	bl	800074c <osThreadNew>
 80067a2:	4603      	mov	r3, r0
 80067a4:	4a05      	ldr	r2, [pc, #20]	; (80067bc <task_create+0x2c>)
 80067a6:	6013      	str	r3, [r2, #0]
#if defined(ENABLE_STRIP_3)
    g_led_strip_3_ctrl_handle = osThreadNew(task_led_ctrl_strip_three, NULL, &g_task_strip_3_led_ctrl_attributes);
#endif
    g_tasks_running = true; // technically will be running after task scheduler started
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <task_create+0x30>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	08007f08 	.word	0x08007f08
 80067b8:	080005d9 	.word	0x080005d9
 80067bc:	20002520 	.word	0x20002520
 80067c0:	20002d84 	.word	0x20002d84

080067c4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <HAL_MspInit+0x60>)
 80067d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d8:	4a12      	ldr	r2, [pc, #72]	; (8006824 <HAL_MspInit+0x60>)
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	6613      	str	r3, [r2, #96]	; 0x60
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <HAL_MspInit+0x60>)
 80067e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <HAL_MspInit+0x60>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <HAL_MspInit+0x60>)
 80067f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f6:	6593      	str	r3, [r2, #88]	; 0x58
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <HAL_MspInit+0x60>)
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800680c:	f107 0308 	add.w	r3, r7, #8
 8006810:	4618      	mov	r0, r3
 8006812:	f7fd fab7 	bl	8003d84 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8006816:	f7fd fb15 	bl	8003e44 <HAL_PWR_EnablePVD>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000

08006828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800682e:	2300      	movs	r3, #0
 8006830:	71fb      	strb	r3, [r7, #7]
 8006832:	e009      	b.n	8006848 <NMI_Handler+0x20>
        {
            board_init_red_led_on();
 8006834:	f7ff fecc 	bl	80065d0 <board_init_red_led_on>
            HAL_Delay(100);
 8006838:	2064      	movs	r0, #100	; 0x64
 800683a:	f7fc fdd1 	bl	80033e0 <HAL_Delay>
            board_init_red_led_off();
 800683e:	f7ff fed3 	bl	80065e8 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 1; iii++)
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	3301      	adds	r3, #1
 8006846:	71fb      	strb	r3, [r7, #7]
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f2      	beq.n	8006834 <NMI_Handler+0xc>
        }
        HAL_Delay(3000);
 800684e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006852:	f7fc fdc5 	bl	80033e0 <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8006856:	e7ea      	b.n	800682e <NMI_Handler+0x6>

08006858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800685e:	2300      	movs	r3, #0
 8006860:	71fb      	strb	r3, [r7, #7]
 8006862:	e009      	b.n	8006878 <HardFault_Handler+0x20>
        {
            board_init_red_led_on();
 8006864:	f7ff feb4 	bl	80065d0 <board_init_red_led_on>
            HAL_Delay(100);
 8006868:	2064      	movs	r0, #100	; 0x64
 800686a:	f7fc fdb9 	bl	80033e0 <HAL_Delay>
            board_init_red_led_off();
 800686e:	f7ff febb 	bl	80065e8 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 2; iii++)
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	3301      	adds	r3, #1
 8006876:	71fb      	strb	r3, [r7, #7]
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d9f2      	bls.n	8006864 <HardFault_Handler+0xc>
        }
        HAL_Delay(3000);
 800687e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006882:	f7fc fdad 	bl	80033e0 <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8006886:	e7ea      	b.n	800685e <HardFault_Handler+0x6>

08006888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800688e:	2300      	movs	r3, #0
 8006890:	71fb      	strb	r3, [r7, #7]
 8006892:	e009      	b.n	80068a8 <MemManage_Handler+0x20>
        {
            board_init_red_led_on();
 8006894:	f7ff fe9c 	bl	80065d0 <board_init_red_led_on>
            HAL_Delay(100);
 8006898:	2064      	movs	r0, #100	; 0x64
 800689a:	f7fc fda1 	bl	80033e0 <HAL_Delay>
            board_init_red_led_off();
 800689e:	f7ff fea3 	bl	80065e8 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 3; iii++)
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	3301      	adds	r3, #1
 80068a6:	71fb      	strb	r3, [r7, #7]
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d9f2      	bls.n	8006894 <MemManage_Handler+0xc>
        }
        HAL_Delay(3000);
 80068ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80068b2:	f7fc fd95 	bl	80033e0 <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 80068b6:	e7ea      	b.n	800688e <MemManage_Handler+0x6>

080068b8 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 80068be:	2300      	movs	r3, #0
 80068c0:	71fb      	strb	r3, [r7, #7]
 80068c2:	e009      	b.n	80068d8 <BusFault_Handler+0x20>
        {
            board_init_red_led_on();
 80068c4:	f7ff fe84 	bl	80065d0 <board_init_red_led_on>
            HAL_Delay(100);
 80068c8:	2064      	movs	r0, #100	; 0x64
 80068ca:	f7fc fd89 	bl	80033e0 <HAL_Delay>
            board_init_red_led_off();
 80068ce:	f7ff fe8b 	bl	80065e8 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 4; iii++)
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	3301      	adds	r3, #1
 80068d6:	71fb      	strb	r3, [r7, #7]
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d9f2      	bls.n	80068c4 <BusFault_Handler+0xc>
        }
        HAL_Delay(3000);
 80068de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80068e2:	f7fc fd7d 	bl	80033e0 <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80068e6:	e7ea      	b.n	80068be <BusFault_Handler+0x6>

080068e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	71fb      	strb	r3, [r7, #7]
 80068f2:	e009      	b.n	8006908 <UsageFault_Handler+0x20>
        {
            board_init_red_led_on();
 80068f4:	f7ff fe6c 	bl	80065d0 <board_init_red_led_on>
            HAL_Delay(100);
 80068f8:	2064      	movs	r0, #100	; 0x64
 80068fa:	f7fc fd71 	bl	80033e0 <HAL_Delay>
            board_init_red_led_off();
 80068fe:	f7ff fe73 	bl	80065e8 <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 5; iii++)
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	3301      	adds	r3, #1
 8006906:	71fb      	strb	r3, [r7, #7]
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d9f2      	bls.n	80068f4 <UsageFault_Handler+0xc>
        }
        HAL_Delay(3000);
 800690e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006912:	f7fc fd65 	bl	80033e0 <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8006916:	e7ea      	b.n	80068ee <UsageFault_Handler+0x6>

08006918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
}
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800692a:	f7fc fd39 	bl	80033a0 <HAL_IncTick>
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;

    // A button is speed
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 800693a:	2001      	movs	r0, #1
 800693c:	f7fd f9ee 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT];
 8006940:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <EXTI0_IRQHandler+0x40>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <EXTI0_IRQHandler+0x40>)
 8006946:	6053      	str	r3, [r2, #4]
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8006948:	f7fb f87a 	bl	8001a40 <xTaskGetTickCountFromISR>
 800694c:	4603      	mov	r3, r0
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <EXTI0_IRQHandler+0x40>)
 8006950:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8006952:	2006      	movs	r0, #6
 8006954:	f7fc feb5 	bl	80036c2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <EXTI0_IRQHandler+0x44>)
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	1d3b      	adds	r3, r7, #4
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	2203      	movs	r2, #3
 8006964:	2100      	movs	r1, #0
 8006966:	f7fb fc2f 	bl	80021c8 <xTaskGenericNotifyFromISR>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200001d4 	.word	0x200001d4
 8006978:	20002524 	.word	0x20002524

0800697c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // B button is state
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 8006982:	2004      	movs	r0, #4
 8006984:	f7fd f9ca 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT];
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <EXTI2_IRQHandler+0x40>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a0b      	ldr	r2, [pc, #44]	; (80069bc <EXTI2_IRQHandler+0x40>)
 800698e:	61d3      	str	r3, [r2, #28]
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8006990:	f7fb f856 	bl	8001a40 <xTaskGetTickCountFromISR>
 8006994:	4603      	mov	r3, r0
 8006996:	4a09      	ldr	r2, [pc, #36]	; (80069bc <EXTI2_IRQHandler+0x40>)
 8006998:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800699a:	2008      	movs	r0, #8
 800699c:	f7fc fe91 	bl	80036c2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_D, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <EXTI2_IRQHandler+0x44>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2300      	movs	r3, #0
 80069aa:	2203      	movs	r2, #3
 80069ac:	2103      	movs	r1, #3
 80069ae:	f7fb fc0b 	bl	80021c8 <xTaskGenericNotifyFromISR>
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200001d4 	.word	0x200001d4
 80069c0:	20002524 	.word	0x20002524

080069c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // C button is color
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 80069ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80069ce:	f7fd f9a5 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT];
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <EXTI15_10_IRQHandler+0x40>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <EXTI15_10_IRQHandler+0x40>)
 80069d8:	6153      	str	r3, [r2, #20]
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80069da:	f7fb f831 	bl	8001a40 <xTaskGetTickCountFromISR>
 80069de:	4603      	mov	r3, r0
 80069e0:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <EXTI15_10_IRQHandler+0x40>)
 80069e2:	6113      	str	r3, [r2, #16]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80069e4:	2017      	movs	r0, #23
 80069e6:	f7fc fe6c 	bl	80036c2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_C, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <EXTI15_10_IRQHandler+0x44>)
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	2203      	movs	r2, #3
 80069f6:	2102      	movs	r1, #2
 80069f8:	f7fb fbe6 	bl	80021c8 <xTaskGenericNotifyFromISR>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200001d4 	.word	0x200001d4
 8006a08:	20002524 	.word	0x20002524

08006a0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // D button is pause
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 8006a12:	2020      	movs	r0, #32
 8006a14:	f7fd f982 	bl	8003d1c <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT];
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <EXTI9_5_IRQHandler+0x40>)
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	4a0b      	ldr	r2, [pc, #44]	; (8006a4c <EXTI9_5_IRQHandler+0x40>)
 8006a1e:	60d3      	str	r3, [r2, #12]
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8006a20:	f7fb f80e 	bl	8001a40 <xTaskGetTickCountFromISR>
 8006a24:	4603      	mov	r3, r0
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <EXTI9_5_IRQHandler+0x40>)
 8006a28:	6093      	str	r3, [r2, #8]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006a2a:	2028      	movs	r0, #40	; 0x28
 8006a2c:	f7fc fe49 	bl	80036c2 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <EXTI9_5_IRQHandler+0x44>)
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	f7fb fbc3 	bl	80021c8 <xTaskGenericNotifyFromISR>
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200001d4 	.word	0x200001d4
 8006a50:	20002524 	.word	0x20002524

08006a54 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7f1b      	ldrb	r3, [r3, #28]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d016      	beq.n	8006a92 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	dc1c      	bgt.n	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d002      	beq.n	8006a72 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d008      	beq.n	8006a82 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 8006a70:	e017      	b.n	8006aa2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fe fd93 	bl	80055a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
        break;
 8006a80:	e010      	b.n	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8006a82:	2104      	movs	r1, #4
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe fd8b 	bl	80055a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
        break;
 8006a90:	e008      	b.n	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8006a92:	2108      	movs	r1, #8
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fe fd83 	bl	80055a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
        break;
 8006aa0:	e000      	b.n	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8006aa2:	bf00      	nop
    }
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200000a4 	.word	0x200000a4
 8006ab0:	200000a5 	.word	0x200000a5
 8006ab4:	200000a6 	.word	0x200000a6

08006ab8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8006abc:	4802      	ldr	r0, [pc, #8]	; (8006ac8 <DMA1_Channel2_IRQHandler+0x10>)
 8006abe:	f7fc febb 	bl	8003838 <HAL_DMA_IRQHandler>
}
 8006ac2:	bf00      	nop
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20001b68 	.word	0x20001b68

08006acc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8006ad0:	4802      	ldr	r0, [pc, #8]	; (8006adc <DMA1_Channel3_IRQHandler+0x10>)
 8006ad2:	f7fc feb1 	bl	8003838 <HAL_DMA_IRQHandler>
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20001bb0 	.word	0x20001bb0

08006ae0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8006ae4:	4802      	ldr	r0, [pc, #8]	; (8006af0 <DMA1_Channel5_IRQHandler+0x10>)
 8006ae6:	f7fc fea7 	bl	8003838 <HAL_DMA_IRQHandler>
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20001c40 	.word	0x20001c40

08006af4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8006af8:	4802      	ldr	r0, [pc, #8]	; (8006b04 <DMA1_Channel6_IRQHandler+0x10>)
 8006afa:	f7fc fe9d 	bl	8003838 <HAL_DMA_IRQHandler>
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20001c88 	.word	0x20001c88

08006b08 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8006b0c:	4802      	ldr	r0, [pc, #8]	; (8006b18 <DMA1_Channel7_IRQHandler+0x10>)
 8006b0e:	f7fc fe93 	bl	8003838 <HAL_DMA_IRQHandler>
}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001bf8 	.word	0x20001bf8

08006b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
	return 1;
 8006b20:	2301      	movs	r3, #1
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <_kill>:

int _kill(int pid, int sig)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006b36:	f000 f8f3 	bl	8006d20 <__errno>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2216      	movs	r2, #22
 8006b3e:	601a      	str	r2, [r3, #0]
	return -1;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <_exit>:

void _exit (int status)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ffe7 	bl	8006b2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006b5e:	e7fe      	b.n	8006b5e <_exit+0x12>

08006b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e00a      	b.n	8006b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006b72:	f3af 8000 	nop.w
 8006b76:	4601      	mov	r1, r0
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	60ba      	str	r2, [r7, #8]
 8006b7e:	b2ca      	uxtb	r2, r1
 8006b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	3301      	adds	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	dbf0      	blt.n	8006b72 <_read+0x12>
	}

return len;
 8006b90:	687b      	ldr	r3, [r7, #4]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e009      	b.n	8006bc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	60ba      	str	r2, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	dbf1      	blt.n	8006bac <_write+0x12>
	}
	return len;
 8006bc8:	687b      	ldr	r3, [r7, #4]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_close>:

int _close(int file)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <_isatty>:

int _isatty(int file)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
	return 1;
 8006c12:	2301      	movs	r3, #1
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c44:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <_sbrk+0x5c>)
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <_sbrk+0x60>)
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c50:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <_sbrk+0x64>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <_sbrk+0x64>)
 8006c5a:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <_sbrk+0x68>)
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c5e:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <_sbrk+0x64>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d207      	bcs.n	8006c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c6c:	f000 f858 	bl	8006d20 <__errno>
 8006c70:	4603      	mov	r3, r0
 8006c72:	220c      	movs	r2, #12
 8006c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7a:	e009      	b.n	8006c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <_sbrk+0x64>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <_sbrk+0x64>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <_sbrk+0x64>)
 8006c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20010000 	.word	0x20010000
 8006c9c:	00000400 	.word	0x00000400
 8006ca0:	20002d88 	.word	0x20002d88
 8006ca4:	20002da0 	.word	0x20002da0

08006ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <SystemInit+0x20>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <SystemInit+0x20>)
 8006cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006cbc:	bf00      	nop
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006cd0:	f7ff ffea 	bl	8006ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006cd4:	480c      	ldr	r0, [pc, #48]	; (8006d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8006cd6:	490d      	ldr	r1, [pc, #52]	; (8006d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <LoopForever+0xe>)
  movs r3, #0
 8006cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cdc:	e002      	b.n	8006ce4 <LoopCopyDataInit>

08006cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ce2:	3304      	adds	r3, #4

08006ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ce8:	d3f9      	bcc.n	8006cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006cec:	4c0a      	ldr	r4, [pc, #40]	; (8006d18 <LoopForever+0x16>)
  movs r3, #0
 8006cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cf0:	e001      	b.n	8006cf6 <LoopFillZerobss>

08006cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cf4:	3204      	adds	r2, #4

08006cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cf8:	d3fb      	bcc.n	8006cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006cfa:	f000 f817 	bl	8006d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006cfe:	f7ff fd35 	bl	800676c <main>

08006d02 <LoopForever>:

LoopForever:
    b LoopForever
 8006d02:	e7fe      	b.n	8006d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006d04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d0c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8006d10:	080080cc 	.word	0x080080cc
  ldr r2, =_sbss
 8006d14:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8006d18:	20002d9c 	.word	0x20002d9c

08006d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d1c:	e7fe      	b.n	8006d1c <ADC1_IRQHandler>
	...

08006d20 <__errno>:
 8006d20:	4b01      	ldr	r3, [pc, #4]	; (8006d28 <__errno+0x8>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	200000ac 	.word	0x200000ac

08006d2c <__libc_init_array>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4d0d      	ldr	r5, [pc, #52]	; (8006d64 <__libc_init_array+0x38>)
 8006d30:	4c0d      	ldr	r4, [pc, #52]	; (8006d68 <__libc_init_array+0x3c>)
 8006d32:	1b64      	subs	r4, r4, r5
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	2600      	movs	r6, #0
 8006d38:	42a6      	cmp	r6, r4
 8006d3a:	d109      	bne.n	8006d50 <__libc_init_array+0x24>
 8006d3c:	4d0b      	ldr	r5, [pc, #44]	; (8006d6c <__libc_init_array+0x40>)
 8006d3e:	4c0c      	ldr	r4, [pc, #48]	; (8006d70 <__libc_init_array+0x44>)
 8006d40:	f001 f88a 	bl	8007e58 <_init>
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	2600      	movs	r6, #0
 8006d4a:	42a6      	cmp	r6, r4
 8006d4c:	d105      	bne.n	8006d5a <__libc_init_array+0x2e>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d54:	4798      	blx	r3
 8006d56:	3601      	adds	r6, #1
 8006d58:	e7ee      	b.n	8006d38 <__libc_init_array+0xc>
 8006d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5e:	4798      	blx	r3
 8006d60:	3601      	adds	r6, #1
 8006d62:	e7f2      	b.n	8006d4a <__libc_init_array+0x1e>
 8006d64:	080080c4 	.word	0x080080c4
 8006d68:	080080c4 	.word	0x080080c4
 8006d6c:	080080c4 	.word	0x080080c4
 8006d70:	080080c8 	.word	0x080080c8

08006d74 <malloc>:
 8006d74:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <malloc+0xc>)
 8006d76:	4601      	mov	r1, r0
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f000 b885 	b.w	8006e88 <_malloc_r>
 8006d7e:	bf00      	nop
 8006d80:	200000ac 	.word	0x200000ac

08006d84 <memcpy>:
 8006d84:	440a      	add	r2, r1
 8006d86:	4291      	cmp	r1, r2
 8006d88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d8c:	d100      	bne.n	8006d90 <memcpy+0xc>
 8006d8e:	4770      	bx	lr
 8006d90:	b510      	push	{r4, lr}
 8006d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	d1f9      	bne.n	8006d92 <memcpy+0xe>
 8006d9e:	bd10      	pop	{r4, pc}

08006da0 <memset>:
 8006da0:	4402      	add	r2, r0
 8006da2:	4603      	mov	r3, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <_free_r>:
 8006db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d044      	beq.n	8006e40 <_free_r+0x90>
 8006db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dba:	9001      	str	r0, [sp, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8006dc2:	bfb8      	it	lt
 8006dc4:	18e4      	addlt	r4, r4, r3
 8006dc6:	f000 f96d 	bl	80070a4 <__malloc_lock>
 8006dca:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <_free_r+0x94>)
 8006dcc:	9801      	ldr	r0, [sp, #4]
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	b933      	cbnz	r3, 8006de0 <_free_r+0x30>
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	6014      	str	r4, [r2, #0]
 8006dd6:	b003      	add	sp, #12
 8006dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ddc:	f000 b968 	b.w	80070b0 <__malloc_unlock>
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	d908      	bls.n	8006df6 <_free_r+0x46>
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	1961      	adds	r1, r4, r5
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf01      	itttt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	1949      	addeq	r1, r1, r5
 8006df2:	6021      	streq	r1, [r4, #0]
 8006df4:	e7ed      	b.n	8006dd2 <_free_r+0x22>
 8006df6:	461a      	mov	r2, r3
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b10b      	cbz	r3, 8006e00 <_free_r+0x50>
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d9fa      	bls.n	8006df6 <_free_r+0x46>
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	1855      	adds	r5, r2, r1
 8006e04:	42a5      	cmp	r5, r4
 8006e06:	d10b      	bne.n	8006e20 <_free_r+0x70>
 8006e08:	6824      	ldr	r4, [r4, #0]
 8006e0a:	4421      	add	r1, r4
 8006e0c:	1854      	adds	r4, r2, r1
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	d1e0      	bne.n	8006dd6 <_free_r+0x26>
 8006e14:	681c      	ldr	r4, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	4421      	add	r1, r4
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	e7da      	b.n	8006dd6 <_free_r+0x26>
 8006e20:	d902      	bls.n	8006e28 <_free_r+0x78>
 8006e22:	230c      	movs	r3, #12
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	e7d6      	b.n	8006dd6 <_free_r+0x26>
 8006e28:	6825      	ldr	r5, [r4, #0]
 8006e2a:	1961      	adds	r1, r4, r5
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf04      	itt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	bf04      	itt	eq
 8006e38:	1949      	addeq	r1, r1, r5
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6054      	str	r4, [r2, #4]
 8006e3e:	e7ca      	b.n	8006dd6 <_free_r+0x26>
 8006e40:	b003      	add	sp, #12
 8006e42:	bd30      	pop	{r4, r5, pc}
 8006e44:	20002d8c 	.word	0x20002d8c

08006e48 <sbrk_aligned>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4e0e      	ldr	r6, [pc, #56]	; (8006e84 <sbrk_aligned+0x3c>)
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	6831      	ldr	r1, [r6, #0]
 8006e50:	4605      	mov	r5, r0
 8006e52:	b911      	cbnz	r1, 8006e5a <sbrk_aligned+0x12>
 8006e54:	f000 f8ba 	bl	8006fcc <_sbrk_r>
 8006e58:	6030      	str	r0, [r6, #0]
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f8b5 	bl	8006fcc <_sbrk_r>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d00a      	beq.n	8006e7c <sbrk_aligned+0x34>
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d007      	beq.n	8006e80 <sbrk_aligned+0x38>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f8aa 	bl	8006fcc <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d101      	bne.n	8006e80 <sbrk_aligned+0x38>
 8006e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	20002d90 	.word	0x20002d90

08006e88 <_malloc_r>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	1ccd      	adds	r5, r1, #3
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	db01      	blt.n	8006ea4 <_malloc_r+0x1c>
 8006ea0:	42a9      	cmp	r1, r5
 8006ea2:	d905      	bls.n	8006eb0 <_malloc_r+0x28>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb0:	4e2e      	ldr	r6, [pc, #184]	; (8006f6c <_malloc_r+0xe4>)
 8006eb2:	f000 f8f7 	bl	80070a4 <__malloc_lock>
 8006eb6:	6833      	ldr	r3, [r6, #0]
 8006eb8:	461c      	mov	r4, r3
 8006eba:	bb34      	cbnz	r4, 8006f0a <_malloc_r+0x82>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f7ff ffc2 	bl	8006e48 <sbrk_aligned>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	d14d      	bne.n	8006f66 <_malloc_r+0xde>
 8006eca:	6834      	ldr	r4, [r6, #0]
 8006ecc:	4626      	mov	r6, r4
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	d140      	bne.n	8006f54 <_malloc_r+0xcc>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	eb04 0803 	add.w	r8, r4, r3
 8006edc:	f000 f876 	bl	8006fcc <_sbrk_r>
 8006ee0:	4580      	cmp	r8, r0
 8006ee2:	d13a      	bne.n	8006f5a <_malloc_r+0xd2>
 8006ee4:	6821      	ldr	r1, [r4, #0]
 8006ee6:	3503      	adds	r5, #3
 8006ee8:	1a6d      	subs	r5, r5, r1
 8006eea:	f025 0503 	bic.w	r5, r5, #3
 8006eee:	3508      	adds	r5, #8
 8006ef0:	2d0c      	cmp	r5, #12
 8006ef2:	bf38      	it	cc
 8006ef4:	250c      	movcc	r5, #12
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa5 	bl	8006e48 <sbrk_aligned>
 8006efe:	3001      	adds	r0, #1
 8006f00:	d02b      	beq.n	8006f5a <_malloc_r+0xd2>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	442b      	add	r3, r5
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	e00e      	b.n	8006f28 <_malloc_r+0xa0>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	1b52      	subs	r2, r2, r5
 8006f0e:	d41e      	bmi.n	8006f4e <_malloc_r+0xc6>
 8006f10:	2a0b      	cmp	r2, #11
 8006f12:	d916      	bls.n	8006f42 <_malloc_r+0xba>
 8006f14:	1961      	adds	r1, r4, r5
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	6025      	str	r5, [r4, #0]
 8006f1a:	bf18      	it	ne
 8006f1c:	6059      	strne	r1, [r3, #4]
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	bf08      	it	eq
 8006f22:	6031      	streq	r1, [r6, #0]
 8006f24:	5162      	str	r2, [r4, r5]
 8006f26:	604b      	str	r3, [r1, #4]
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f104 060b 	add.w	r6, r4, #11
 8006f2e:	f000 f8bf 	bl	80070b0 <__malloc_unlock>
 8006f32:	f026 0607 	bic.w	r6, r6, #7
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	1af2      	subs	r2, r6, r3
 8006f3a:	d0b6      	beq.n	8006eaa <_malloc_r+0x22>
 8006f3c:	1b9b      	subs	r3, r3, r6
 8006f3e:	50a3      	str	r3, [r4, r2]
 8006f40:	e7b3      	b.n	8006eaa <_malloc_r+0x22>
 8006f42:	6862      	ldr	r2, [r4, #4]
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	bf0c      	ite	eq
 8006f48:	6032      	streq	r2, [r6, #0]
 8006f4a:	605a      	strne	r2, [r3, #4]
 8006f4c:	e7ec      	b.n	8006f28 <_malloc_r+0xa0>
 8006f4e:	4623      	mov	r3, r4
 8006f50:	6864      	ldr	r4, [r4, #4]
 8006f52:	e7b2      	b.n	8006eba <_malloc_r+0x32>
 8006f54:	4634      	mov	r4, r6
 8006f56:	6876      	ldr	r6, [r6, #4]
 8006f58:	e7b9      	b.n	8006ece <_malloc_r+0x46>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f000 f8a6 	bl	80070b0 <__malloc_unlock>
 8006f64:	e7a1      	b.n	8006eaa <_malloc_r+0x22>
 8006f66:	6025      	str	r5, [r4, #0]
 8006f68:	e7de      	b.n	8006f28 <_malloc_r+0xa0>
 8006f6a:	bf00      	nop
 8006f6c:	20002d8c 	.word	0x20002d8c

08006f70 <srand>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <srand+0x44>)
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006f78:	4604      	mov	r4, r0
 8006f7a:	b9b3      	cbnz	r3, 8006faa <srand+0x3a>
 8006f7c:	2018      	movs	r0, #24
 8006f7e:	f7ff fef9 	bl	8006d74 <malloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	63a8      	str	r0, [r5, #56]	; 0x38
 8006f86:	b920      	cbnz	r0, 8006f92 <srand+0x22>
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <srand+0x48>)
 8006f8a:	480c      	ldr	r0, [pc, #48]	; (8006fbc <srand+0x4c>)
 8006f8c:	2142      	movs	r1, #66	; 0x42
 8006f8e:	f000 f847 	bl	8007020 <__assert_func>
 8006f92:	490b      	ldr	r1, [pc, #44]	; (8006fc0 <srand+0x50>)
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <srand+0x54>)
 8006f96:	e9c0 1300 	strd	r1, r3, [r0]
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <srand+0x58>)
 8006f9c:	6083      	str	r3, [r0, #8]
 8006f9e:	230b      	movs	r3, #11
 8006fa0:	8183      	strh	r3, [r0, #12]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006faa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006fac:	2200      	movs	r2, #0
 8006fae:	611c      	str	r4, [r3, #16]
 8006fb0:	615a      	str	r2, [r3, #20]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	200000ac 	.word	0x200000ac
 8006fb8:	08007f78 	.word	0x08007f78
 8006fbc:	08007f8f 	.word	0x08007f8f
 8006fc0:	abcd330e 	.word	0xabcd330e
 8006fc4:	e66d1234 	.word	0xe66d1234
 8006fc8:	0005deec 	.word	0x0005deec

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_sbrk_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7ff fe30 	bl	8006c3c <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20002d94 	.word	0x20002d94

08006fec <time>:
 8006fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fee:	4b0b      	ldr	r3, [pc, #44]	; (800701c <time+0x30>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4669      	mov	r1, sp
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	f000 f842 	bl	8007080 <_gettimeofday_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	bfbe      	ittt	lt
 8007000:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8007004:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007008:	e9cd 2300 	strdlt	r2, r3, [sp]
 800700c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007010:	b10c      	cbz	r4, 8007016 <time+0x2a>
 8007012:	e9c4 0100 	strd	r0, r1, [r4]
 8007016:	b004      	add	sp, #16
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	200000ac 	.word	0x200000ac

08007020 <__assert_func>:
 8007020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007022:	4614      	mov	r4, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <__assert_func+0x2c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4605      	mov	r5, r0
 800702c:	68d8      	ldr	r0, [r3, #12]
 800702e:	b14c      	cbz	r4, 8007044 <__assert_func+0x24>
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <__assert_func+0x30>)
 8007032:	9100      	str	r1, [sp, #0]
 8007034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007038:	4906      	ldr	r1, [pc, #24]	; (8007054 <__assert_func+0x34>)
 800703a:	462b      	mov	r3, r5
 800703c:	f000 f80e 	bl	800705c <fiprintf>
 8007040:	f000 fbea 	bl	8007818 <abort>
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <__assert_func+0x38>)
 8007046:	461c      	mov	r4, r3
 8007048:	e7f3      	b.n	8007032 <__assert_func+0x12>
 800704a:	bf00      	nop
 800704c:	200000ac 	.word	0x200000ac
 8007050:	08007fea 	.word	0x08007fea
 8007054:	08007ff7 	.word	0x08007ff7
 8007058:	08008025 	.word	0x08008025

0800705c <fiprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	b503      	push	{r0, r1, lr}
 8007060:	4601      	mov	r1, r0
 8007062:	ab03      	add	r3, sp, #12
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <fiprintf+0x20>)
 8007066:	f853 2b04 	ldr.w	r2, [r3], #4
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	f000 f84f 	bl	8007110 <_vfiprintf_r>
 8007072:	b002      	add	sp, #8
 8007074:	f85d eb04 	ldr.w	lr, [sp], #4
 8007078:	b003      	add	sp, #12
 800707a:	4770      	bx	lr
 800707c:	200000ac 	.word	0x200000ac

08007080 <_gettimeofday_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d07      	ldr	r5, [pc, #28]	; (80070a0 <_gettimeofday_r+0x20>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	f000 fedb 	bl	8007e48 <_gettimeofday>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d102      	bne.n	800709c <_gettimeofday_r+0x1c>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	b103      	cbz	r3, 800709c <_gettimeofday_r+0x1c>
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20002d94 	.word	0x20002d94

080070a4 <__malloc_lock>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__malloc_lock+0x8>)
 80070a6:	f000 bd77 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	20002d98 	.word	0x20002d98

080070b0 <__malloc_unlock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_unlock+0x8>)
 80070b2:	f000 bd72 	b.w	8007b9a <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	20002d98 	.word	0x20002d98

080070bc <__sfputc_r>:
 80070bc:	6893      	ldr	r3, [r2, #8]
 80070be:	3b01      	subs	r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	b410      	push	{r4}
 80070c4:	6093      	str	r3, [r2, #8]
 80070c6:	da08      	bge.n	80070da <__sfputc_r+0x1e>
 80070c8:	6994      	ldr	r4, [r2, #24]
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	db01      	blt.n	80070d2 <__sfputc_r+0x16>
 80070ce:	290a      	cmp	r1, #10
 80070d0:	d103      	bne.n	80070da <__sfputc_r+0x1e>
 80070d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d6:	f000 badf 	b.w	8007698 <__swbuf_r>
 80070da:	6813      	ldr	r3, [r2, #0]
 80070dc:	1c58      	adds	r0, r3, #1
 80070de:	6010      	str	r0, [r2, #0]
 80070e0:	7019      	strb	r1, [r3, #0]
 80070e2:	4608      	mov	r0, r1
 80070e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <__sfputs_r>:
 80070ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	18d5      	adds	r5, r2, r3
 80070f4:	42ac      	cmp	r4, r5
 80070f6:	d101      	bne.n	80070fc <__sfputs_r+0x12>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e007      	b.n	800710c <__sfputs_r+0x22>
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	463a      	mov	r2, r7
 8007102:	4630      	mov	r0, r6
 8007104:	f7ff ffda 	bl	80070bc <__sfputc_r>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d1f3      	bne.n	80070f4 <__sfputs_r+0xa>
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007110 <_vfiprintf_r>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	460d      	mov	r5, r1
 8007116:	b09d      	sub	sp, #116	; 0x74
 8007118:	4614      	mov	r4, r2
 800711a:	4698      	mov	r8, r3
 800711c:	4606      	mov	r6, r0
 800711e:	b118      	cbz	r0, 8007128 <_vfiprintf_r+0x18>
 8007120:	6983      	ldr	r3, [r0, #24]
 8007122:	b90b      	cbnz	r3, 8007128 <_vfiprintf_r+0x18>
 8007124:	f000 fc9a 	bl	8007a5c <__sinit>
 8007128:	4b89      	ldr	r3, [pc, #548]	; (8007350 <_vfiprintf_r+0x240>)
 800712a:	429d      	cmp	r5, r3
 800712c:	d11b      	bne.n	8007166 <_vfiprintf_r+0x56>
 800712e:	6875      	ldr	r5, [r6, #4]
 8007130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007132:	07d9      	lsls	r1, r3, #31
 8007134:	d405      	bmi.n	8007142 <_vfiprintf_r+0x32>
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	059a      	lsls	r2, r3, #22
 800713a:	d402      	bmi.n	8007142 <_vfiprintf_r+0x32>
 800713c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713e:	f000 fd2b 	bl	8007b98 <__retarget_lock_acquire_recursive>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	071b      	lsls	r3, r3, #28
 8007146:	d501      	bpl.n	800714c <_vfiprintf_r+0x3c>
 8007148:	692b      	ldr	r3, [r5, #16]
 800714a:	b9eb      	cbnz	r3, 8007188 <_vfiprintf_r+0x78>
 800714c:	4629      	mov	r1, r5
 800714e:	4630      	mov	r0, r6
 8007150:	f000 faf4 	bl	800773c <__swsetup_r>
 8007154:	b1c0      	cbz	r0, 8007188 <_vfiprintf_r+0x78>
 8007156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007158:	07dc      	lsls	r4, r3, #31
 800715a:	d50e      	bpl.n	800717a <_vfiprintf_r+0x6a>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007160:	b01d      	add	sp, #116	; 0x74
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	4b7b      	ldr	r3, [pc, #492]	; (8007354 <_vfiprintf_r+0x244>)
 8007168:	429d      	cmp	r5, r3
 800716a:	d101      	bne.n	8007170 <_vfiprintf_r+0x60>
 800716c:	68b5      	ldr	r5, [r6, #8]
 800716e:	e7df      	b.n	8007130 <_vfiprintf_r+0x20>
 8007170:	4b79      	ldr	r3, [pc, #484]	; (8007358 <_vfiprintf_r+0x248>)
 8007172:	429d      	cmp	r5, r3
 8007174:	bf08      	it	eq
 8007176:	68f5      	ldreq	r5, [r6, #12]
 8007178:	e7da      	b.n	8007130 <_vfiprintf_r+0x20>
 800717a:	89ab      	ldrh	r3, [r5, #12]
 800717c:	0598      	lsls	r0, r3, #22
 800717e:	d4ed      	bmi.n	800715c <_vfiprintf_r+0x4c>
 8007180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007182:	f000 fd0a 	bl	8007b9a <__retarget_lock_release_recursive>
 8007186:	e7e9      	b.n	800715c <_vfiprintf_r+0x4c>
 8007188:	2300      	movs	r3, #0
 800718a:	9309      	str	r3, [sp, #36]	; 0x24
 800718c:	2320      	movs	r3, #32
 800718e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007192:	f8cd 800c 	str.w	r8, [sp, #12]
 8007196:	2330      	movs	r3, #48	; 0x30
 8007198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800735c <_vfiprintf_r+0x24c>
 800719c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a0:	f04f 0901 	mov.w	r9, #1
 80071a4:	4623      	mov	r3, r4
 80071a6:	469a      	mov	sl, r3
 80071a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ac:	b10a      	cbz	r2, 80071b2 <_vfiprintf_r+0xa2>
 80071ae:	2a25      	cmp	r2, #37	; 0x25
 80071b0:	d1f9      	bne.n	80071a6 <_vfiprintf_r+0x96>
 80071b2:	ebba 0b04 	subs.w	fp, sl, r4
 80071b6:	d00b      	beq.n	80071d0 <_vfiprintf_r+0xc0>
 80071b8:	465b      	mov	r3, fp
 80071ba:	4622      	mov	r2, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff ff93 	bl	80070ea <__sfputs_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	f000 80aa 	beq.w	800731e <_vfiprintf_r+0x20e>
 80071ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071cc:	445a      	add	r2, fp
 80071ce:	9209      	str	r2, [sp, #36]	; 0x24
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a2 	beq.w	800731e <_vfiprintf_r+0x20e>
 80071da:	2300      	movs	r3, #0
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e4:	f10a 0a01 	add.w	sl, sl, #1
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9307      	str	r3, [sp, #28]
 80071ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071f0:	931a      	str	r3, [sp, #104]	; 0x68
 80071f2:	4654      	mov	r4, sl
 80071f4:	2205      	movs	r2, #5
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	4858      	ldr	r0, [pc, #352]	; (800735c <_vfiprintf_r+0x24c>)
 80071fc:	f7f8 ffe8 	bl	80001d0 <memchr>
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	b9d8      	cbnz	r0, 800723c <_vfiprintf_r+0x12c>
 8007204:	06d1      	lsls	r1, r2, #27
 8007206:	bf44      	itt	mi
 8007208:	2320      	movmi	r3, #32
 800720a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720e:	0713      	lsls	r3, r2, #28
 8007210:	bf44      	itt	mi
 8007212:	232b      	movmi	r3, #43	; 0x2b
 8007214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007218:	f89a 3000 	ldrb.w	r3, [sl]
 800721c:	2b2a      	cmp	r3, #42	; 0x2a
 800721e:	d015      	beq.n	800724c <_vfiprintf_r+0x13c>
 8007220:	9a07      	ldr	r2, [sp, #28]
 8007222:	4654      	mov	r4, sl
 8007224:	2000      	movs	r0, #0
 8007226:	f04f 0c0a 	mov.w	ip, #10
 800722a:	4621      	mov	r1, r4
 800722c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007230:	3b30      	subs	r3, #48	; 0x30
 8007232:	2b09      	cmp	r3, #9
 8007234:	d94e      	bls.n	80072d4 <_vfiprintf_r+0x1c4>
 8007236:	b1b0      	cbz	r0, 8007266 <_vfiprintf_r+0x156>
 8007238:	9207      	str	r2, [sp, #28]
 800723a:	e014      	b.n	8007266 <_vfiprintf_r+0x156>
 800723c:	eba0 0308 	sub.w	r3, r0, r8
 8007240:	fa09 f303 	lsl.w	r3, r9, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	46a2      	mov	sl, r4
 800724a:	e7d2      	b.n	80071f2 <_vfiprintf_r+0xe2>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	1d19      	adds	r1, r3, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	9103      	str	r1, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfbb      	ittet	lt
 8007258:	425b      	neglt	r3, r3
 800725a:	f042 0202 	orrlt.w	r2, r2, #2
 800725e:	9307      	strge	r3, [sp, #28]
 8007260:	9307      	strlt	r3, [sp, #28]
 8007262:	bfb8      	it	lt
 8007264:	9204      	strlt	r2, [sp, #16]
 8007266:	7823      	ldrb	r3, [r4, #0]
 8007268:	2b2e      	cmp	r3, #46	; 0x2e
 800726a:	d10c      	bne.n	8007286 <_vfiprintf_r+0x176>
 800726c:	7863      	ldrb	r3, [r4, #1]
 800726e:	2b2a      	cmp	r3, #42	; 0x2a
 8007270:	d135      	bne.n	80072de <_vfiprintf_r+0x1ce>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	1d1a      	adds	r2, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9203      	str	r2, [sp, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfb8      	it	lt
 800727e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007282:	3402      	adds	r4, #2
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800736c <_vfiprintf_r+0x25c>
 800728a:	7821      	ldrb	r1, [r4, #0]
 800728c:	2203      	movs	r2, #3
 800728e:	4650      	mov	r0, sl
 8007290:	f7f8 ff9e 	bl	80001d0 <memchr>
 8007294:	b140      	cbz	r0, 80072a8 <_vfiprintf_r+0x198>
 8007296:	2340      	movs	r3, #64	; 0x40
 8007298:	eba0 000a 	sub.w	r0, r0, sl
 800729c:	fa03 f000 	lsl.w	r0, r3, r0
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	4303      	orrs	r3, r0
 80072a4:	3401      	adds	r4, #1
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ac:	482c      	ldr	r0, [pc, #176]	; (8007360 <_vfiprintf_r+0x250>)
 80072ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b2:	2206      	movs	r2, #6
 80072b4:	f7f8 ff8c 	bl	80001d0 <memchr>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d03f      	beq.n	800733c <_vfiprintf_r+0x22c>
 80072bc:	4b29      	ldr	r3, [pc, #164]	; (8007364 <_vfiprintf_r+0x254>)
 80072be:	bb1b      	cbnz	r3, 8007308 <_vfiprintf_r+0x1f8>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	3307      	adds	r3, #7
 80072c4:	f023 0307 	bic.w	r3, r3, #7
 80072c8:	3308      	adds	r3, #8
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ce:	443b      	add	r3, r7
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	e767      	b.n	80071a4 <_vfiprintf_r+0x94>
 80072d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d8:	460c      	mov	r4, r1
 80072da:	2001      	movs	r0, #1
 80072dc:	e7a5      	b.n	800722a <_vfiprintf_r+0x11a>
 80072de:	2300      	movs	r3, #0
 80072e0:	3401      	adds	r4, #1
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	4619      	mov	r1, r3
 80072e6:	f04f 0c0a 	mov.w	ip, #10
 80072ea:	4620      	mov	r0, r4
 80072ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f0:	3a30      	subs	r2, #48	; 0x30
 80072f2:	2a09      	cmp	r2, #9
 80072f4:	d903      	bls.n	80072fe <_vfiprintf_r+0x1ee>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0c5      	beq.n	8007286 <_vfiprintf_r+0x176>
 80072fa:	9105      	str	r1, [sp, #20]
 80072fc:	e7c3      	b.n	8007286 <_vfiprintf_r+0x176>
 80072fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007302:	4604      	mov	r4, r0
 8007304:	2301      	movs	r3, #1
 8007306:	e7f0      	b.n	80072ea <_vfiprintf_r+0x1da>
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	462a      	mov	r2, r5
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <_vfiprintf_r+0x258>)
 8007310:	a904      	add	r1, sp, #16
 8007312:	4630      	mov	r0, r6
 8007314:	f3af 8000 	nop.w
 8007318:	4607      	mov	r7, r0
 800731a:	1c78      	adds	r0, r7, #1
 800731c:	d1d6      	bne.n	80072cc <_vfiprintf_r+0x1bc>
 800731e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007320:	07d9      	lsls	r1, r3, #31
 8007322:	d405      	bmi.n	8007330 <_vfiprintf_r+0x220>
 8007324:	89ab      	ldrh	r3, [r5, #12]
 8007326:	059a      	lsls	r2, r3, #22
 8007328:	d402      	bmi.n	8007330 <_vfiprintf_r+0x220>
 800732a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800732c:	f000 fc35 	bl	8007b9a <__retarget_lock_release_recursive>
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	065b      	lsls	r3, r3, #25
 8007334:	f53f af12 	bmi.w	800715c <_vfiprintf_r+0x4c>
 8007338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733a:	e711      	b.n	8007160 <_vfiprintf_r+0x50>
 800733c:	ab03      	add	r3, sp, #12
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	462a      	mov	r2, r5
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <_vfiprintf_r+0x258>)
 8007344:	a904      	add	r1, sp, #16
 8007346:	4630      	mov	r0, r6
 8007348:	f000 f880 	bl	800744c <_printf_i>
 800734c:	e7e4      	b.n	8007318 <_vfiprintf_r+0x208>
 800734e:	bf00      	nop
 8007350:	0800807c 	.word	0x0800807c
 8007354:	0800809c 	.word	0x0800809c
 8007358:	0800805c 	.word	0x0800805c
 800735c:	08008026 	.word	0x08008026
 8007360:	08008030 	.word	0x08008030
 8007364:	00000000 	.word	0x00000000
 8007368:	080070eb 	.word	0x080070eb
 800736c:	0800802c 	.word	0x0800802c

08007370 <_printf_common>:
 8007370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	4616      	mov	r6, r2
 8007376:	4699      	mov	r9, r3
 8007378:	688a      	ldr	r2, [r1, #8]
 800737a:	690b      	ldr	r3, [r1, #16]
 800737c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007380:	4293      	cmp	r3, r2
 8007382:	bfb8      	it	lt
 8007384:	4613      	movlt	r3, r2
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800738c:	4607      	mov	r7, r0
 800738e:	460c      	mov	r4, r1
 8007390:	b10a      	cbz	r2, 8007396 <_printf_common+0x26>
 8007392:	3301      	adds	r3, #1
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	0699      	lsls	r1, r3, #26
 800739a:	bf42      	ittt	mi
 800739c:	6833      	ldrmi	r3, [r6, #0]
 800739e:	3302      	addmi	r3, #2
 80073a0:	6033      	strmi	r3, [r6, #0]
 80073a2:	6825      	ldr	r5, [r4, #0]
 80073a4:	f015 0506 	ands.w	r5, r5, #6
 80073a8:	d106      	bne.n	80073b8 <_printf_common+0x48>
 80073aa:	f104 0a19 	add.w	sl, r4, #25
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	6832      	ldr	r2, [r6, #0]
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dc26      	bgt.n	8007406 <_printf_common+0x96>
 80073b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073bc:	1e13      	subs	r3, r2, #0
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	bf18      	it	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	0692      	lsls	r2, r2, #26
 80073c6:	d42b      	bmi.n	8007420 <_printf_common+0xb0>
 80073c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073cc:	4649      	mov	r1, r9
 80073ce:	4638      	mov	r0, r7
 80073d0:	47c0      	blx	r8
 80073d2:	3001      	adds	r0, #1
 80073d4:	d01e      	beq.n	8007414 <_printf_common+0xa4>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	68e5      	ldr	r5, [r4, #12]
 80073da:	6832      	ldr	r2, [r6, #0]
 80073dc:	f003 0306 	and.w	r3, r3, #6
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	bf08      	it	eq
 80073e4:	1aad      	subeq	r5, r5, r2
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	bf0c      	ite	eq
 80073ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f0:	2500      	movne	r5, #0
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bfc4      	itt	gt
 80073f6:	1a9b      	subgt	r3, r3, r2
 80073f8:	18ed      	addgt	r5, r5, r3
 80073fa:	2600      	movs	r6, #0
 80073fc:	341a      	adds	r4, #26
 80073fe:	42b5      	cmp	r5, r6
 8007400:	d11a      	bne.n	8007438 <_printf_common+0xc8>
 8007402:	2000      	movs	r0, #0
 8007404:	e008      	b.n	8007418 <_printf_common+0xa8>
 8007406:	2301      	movs	r3, #1
 8007408:	4652      	mov	r2, sl
 800740a:	4649      	mov	r1, r9
 800740c:	4638      	mov	r0, r7
 800740e:	47c0      	blx	r8
 8007410:	3001      	adds	r0, #1
 8007412:	d103      	bne.n	800741c <_printf_common+0xac>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	3501      	adds	r5, #1
 800741e:	e7c6      	b.n	80073ae <_printf_common+0x3e>
 8007420:	18e1      	adds	r1, r4, r3
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	2030      	movs	r0, #48	; 0x30
 8007426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800742a:	4422      	add	r2, r4
 800742c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007434:	3302      	adds	r3, #2
 8007436:	e7c7      	b.n	80073c8 <_printf_common+0x58>
 8007438:	2301      	movs	r3, #1
 800743a:	4622      	mov	r2, r4
 800743c:	4649      	mov	r1, r9
 800743e:	4638      	mov	r0, r7
 8007440:	47c0      	blx	r8
 8007442:	3001      	adds	r0, #1
 8007444:	d0e6      	beq.n	8007414 <_printf_common+0xa4>
 8007446:	3601      	adds	r6, #1
 8007448:	e7d9      	b.n	80073fe <_printf_common+0x8e>
	...

0800744c <_printf_i>:
 800744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	7e0f      	ldrb	r7, [r1, #24]
 8007452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007454:	2f78      	cmp	r7, #120	; 0x78
 8007456:	4691      	mov	r9, r2
 8007458:	4680      	mov	r8, r0
 800745a:	460c      	mov	r4, r1
 800745c:	469a      	mov	sl, r3
 800745e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007462:	d807      	bhi.n	8007474 <_printf_i+0x28>
 8007464:	2f62      	cmp	r7, #98	; 0x62
 8007466:	d80a      	bhi.n	800747e <_printf_i+0x32>
 8007468:	2f00      	cmp	r7, #0
 800746a:	f000 80d8 	beq.w	800761e <_printf_i+0x1d2>
 800746e:	2f58      	cmp	r7, #88	; 0x58
 8007470:	f000 80a3 	beq.w	80075ba <_printf_i+0x16e>
 8007474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800747c:	e03a      	b.n	80074f4 <_printf_i+0xa8>
 800747e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007482:	2b15      	cmp	r3, #21
 8007484:	d8f6      	bhi.n	8007474 <_printf_i+0x28>
 8007486:	a101      	add	r1, pc, #4	; (adr r1, 800748c <_printf_i+0x40>)
 8007488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800748c:	080074e5 	.word	0x080074e5
 8007490:	080074f9 	.word	0x080074f9
 8007494:	08007475 	.word	0x08007475
 8007498:	08007475 	.word	0x08007475
 800749c:	08007475 	.word	0x08007475
 80074a0:	08007475 	.word	0x08007475
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007475 	.word	0x08007475
 80074ac:	08007475 	.word	0x08007475
 80074b0:	08007475 	.word	0x08007475
 80074b4:	08007475 	.word	0x08007475
 80074b8:	08007605 	.word	0x08007605
 80074bc:	08007529 	.word	0x08007529
 80074c0:	080075e7 	.word	0x080075e7
 80074c4:	08007475 	.word	0x08007475
 80074c8:	08007475 	.word	0x08007475
 80074cc:	08007627 	.word	0x08007627
 80074d0:	08007475 	.word	0x08007475
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007475 	.word	0x08007475
 80074dc:	08007475 	.word	0x08007475
 80074e0:	080075ef 	.word	0x080075ef
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0a3      	b.n	8007640 <_printf_i+0x1f4>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	6829      	ldr	r1, [r5, #0]
 80074fc:	0606      	lsls	r6, r0, #24
 80074fe:	f101 0304 	add.w	r3, r1, #4
 8007502:	d50a      	bpl.n	800751a <_printf_i+0xce>
 8007504:	680e      	ldr	r6, [r1, #0]
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	2e00      	cmp	r6, #0
 800750a:	da03      	bge.n	8007514 <_printf_i+0xc8>
 800750c:	232d      	movs	r3, #45	; 0x2d
 800750e:	4276      	negs	r6, r6
 8007510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007514:	485e      	ldr	r0, [pc, #376]	; (8007690 <_printf_i+0x244>)
 8007516:	230a      	movs	r3, #10
 8007518:	e019      	b.n	800754e <_printf_i+0x102>
 800751a:	680e      	ldr	r6, [r1, #0]
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007522:	bf18      	it	ne
 8007524:	b236      	sxthne	r6, r6
 8007526:	e7ef      	b.n	8007508 <_printf_i+0xbc>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	1d19      	adds	r1, r3, #4
 800752e:	6029      	str	r1, [r5, #0]
 8007530:	0601      	lsls	r1, r0, #24
 8007532:	d501      	bpl.n	8007538 <_printf_i+0xec>
 8007534:	681e      	ldr	r6, [r3, #0]
 8007536:	e002      	b.n	800753e <_printf_i+0xf2>
 8007538:	0646      	lsls	r6, r0, #25
 800753a:	d5fb      	bpl.n	8007534 <_printf_i+0xe8>
 800753c:	881e      	ldrh	r6, [r3, #0]
 800753e:	4854      	ldr	r0, [pc, #336]	; (8007690 <_printf_i+0x244>)
 8007540:	2f6f      	cmp	r7, #111	; 0x6f
 8007542:	bf0c      	ite	eq
 8007544:	2308      	moveq	r3, #8
 8007546:	230a      	movne	r3, #10
 8007548:	2100      	movs	r1, #0
 800754a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800754e:	6865      	ldr	r5, [r4, #4]
 8007550:	60a5      	str	r5, [r4, #8]
 8007552:	2d00      	cmp	r5, #0
 8007554:	bfa2      	ittt	ge
 8007556:	6821      	ldrge	r1, [r4, #0]
 8007558:	f021 0104 	bicge.w	r1, r1, #4
 800755c:	6021      	strge	r1, [r4, #0]
 800755e:	b90e      	cbnz	r6, 8007564 <_printf_i+0x118>
 8007560:	2d00      	cmp	r5, #0
 8007562:	d04d      	beq.n	8007600 <_printf_i+0x1b4>
 8007564:	4615      	mov	r5, r2
 8007566:	fbb6 f1f3 	udiv	r1, r6, r3
 800756a:	fb03 6711 	mls	r7, r3, r1, r6
 800756e:	5dc7      	ldrb	r7, [r0, r7]
 8007570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007574:	4637      	mov	r7, r6
 8007576:	42bb      	cmp	r3, r7
 8007578:	460e      	mov	r6, r1
 800757a:	d9f4      	bls.n	8007566 <_printf_i+0x11a>
 800757c:	2b08      	cmp	r3, #8
 800757e:	d10b      	bne.n	8007598 <_printf_i+0x14c>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	07de      	lsls	r6, r3, #31
 8007584:	d508      	bpl.n	8007598 <_printf_i+0x14c>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6861      	ldr	r1, [r4, #4]
 800758a:	4299      	cmp	r1, r3
 800758c:	bfde      	ittt	le
 800758e:	2330      	movle	r3, #48	; 0x30
 8007590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007594:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007598:	1b52      	subs	r2, r2, r5
 800759a:	6122      	str	r2, [r4, #16]
 800759c:	f8cd a000 	str.w	sl, [sp]
 80075a0:	464b      	mov	r3, r9
 80075a2:	aa03      	add	r2, sp, #12
 80075a4:	4621      	mov	r1, r4
 80075a6:	4640      	mov	r0, r8
 80075a8:	f7ff fee2 	bl	8007370 <_printf_common>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d14c      	bne.n	800764a <_printf_i+0x1fe>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b4:	b004      	add	sp, #16
 80075b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ba:	4835      	ldr	r0, [pc, #212]	; (8007690 <_printf_i+0x244>)
 80075bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075c0:	6829      	ldr	r1, [r5, #0]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c8:	6029      	str	r1, [r5, #0]
 80075ca:	061d      	lsls	r5, r3, #24
 80075cc:	d514      	bpl.n	80075f8 <_printf_i+0x1ac>
 80075ce:	07df      	lsls	r7, r3, #31
 80075d0:	bf44      	itt	mi
 80075d2:	f043 0320 	orrmi.w	r3, r3, #32
 80075d6:	6023      	strmi	r3, [r4, #0]
 80075d8:	b91e      	cbnz	r6, 80075e2 <_printf_i+0x196>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f023 0320 	bic.w	r3, r3, #32
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	2310      	movs	r3, #16
 80075e4:	e7b0      	b.n	8007548 <_printf_i+0xfc>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	f043 0320 	orr.w	r3, r3, #32
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	2378      	movs	r3, #120	; 0x78
 80075f0:	4828      	ldr	r0, [pc, #160]	; (8007694 <_printf_i+0x248>)
 80075f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075f6:	e7e3      	b.n	80075c0 <_printf_i+0x174>
 80075f8:	0659      	lsls	r1, r3, #25
 80075fa:	bf48      	it	mi
 80075fc:	b2b6      	uxthmi	r6, r6
 80075fe:	e7e6      	b.n	80075ce <_printf_i+0x182>
 8007600:	4615      	mov	r5, r2
 8007602:	e7bb      	b.n	800757c <_printf_i+0x130>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	6826      	ldr	r6, [r4, #0]
 8007608:	6961      	ldr	r1, [r4, #20]
 800760a:	1d18      	adds	r0, r3, #4
 800760c:	6028      	str	r0, [r5, #0]
 800760e:	0635      	lsls	r5, r6, #24
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	d501      	bpl.n	8007618 <_printf_i+0x1cc>
 8007614:	6019      	str	r1, [r3, #0]
 8007616:	e002      	b.n	800761e <_printf_i+0x1d2>
 8007618:	0670      	lsls	r0, r6, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0x1c8>
 800761c:	8019      	strh	r1, [r3, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	4615      	mov	r5, r2
 8007624:	e7ba      	b.n	800759c <_printf_i+0x150>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	681d      	ldr	r5, [r3, #0]
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	2100      	movs	r1, #0
 8007632:	4628      	mov	r0, r5
 8007634:	f7f8 fdcc 	bl	80001d0 <memchr>
 8007638:	b108      	cbz	r0, 800763e <_printf_i+0x1f2>
 800763a:	1b40      	subs	r0, r0, r5
 800763c:	6060      	str	r0, [r4, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	2300      	movs	r3, #0
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007648:	e7a8      	b.n	800759c <_printf_i+0x150>
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	462a      	mov	r2, r5
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d0ab      	beq.n	80075b0 <_printf_i+0x164>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	d413      	bmi.n	8007686 <_printf_i+0x23a>
 800765e:	68e0      	ldr	r0, [r4, #12]
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	4298      	cmp	r0, r3
 8007664:	bfb8      	it	lt
 8007666:	4618      	movlt	r0, r3
 8007668:	e7a4      	b.n	80075b4 <_printf_i+0x168>
 800766a:	2301      	movs	r3, #1
 800766c:	4632      	mov	r2, r6
 800766e:	4649      	mov	r1, r9
 8007670:	4640      	mov	r0, r8
 8007672:	47d0      	blx	sl
 8007674:	3001      	adds	r0, #1
 8007676:	d09b      	beq.n	80075b0 <_printf_i+0x164>
 8007678:	3501      	adds	r5, #1
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	9903      	ldr	r1, [sp, #12]
 800767e:	1a5b      	subs	r3, r3, r1
 8007680:	42ab      	cmp	r3, r5
 8007682:	dcf2      	bgt.n	800766a <_printf_i+0x21e>
 8007684:	e7eb      	b.n	800765e <_printf_i+0x212>
 8007686:	2500      	movs	r5, #0
 8007688:	f104 0619 	add.w	r6, r4, #25
 800768c:	e7f5      	b.n	800767a <_printf_i+0x22e>
 800768e:	bf00      	nop
 8007690:	08008037 	.word	0x08008037
 8007694:	08008048 	.word	0x08008048

08007698 <__swbuf_r>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	460e      	mov	r6, r1
 800769c:	4614      	mov	r4, r2
 800769e:	4605      	mov	r5, r0
 80076a0:	b118      	cbz	r0, 80076aa <__swbuf_r+0x12>
 80076a2:	6983      	ldr	r3, [r0, #24]
 80076a4:	b90b      	cbnz	r3, 80076aa <__swbuf_r+0x12>
 80076a6:	f000 f9d9 	bl	8007a5c <__sinit>
 80076aa:	4b21      	ldr	r3, [pc, #132]	; (8007730 <__swbuf_r+0x98>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	d12b      	bne.n	8007708 <__swbuf_r+0x70>
 80076b0:	686c      	ldr	r4, [r5, #4]
 80076b2:	69a3      	ldr	r3, [r4, #24]
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	071a      	lsls	r2, r3, #28
 80076ba:	d52f      	bpl.n	800771c <__swbuf_r+0x84>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	b36b      	cbz	r3, 800771c <__swbuf_r+0x84>
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	6820      	ldr	r0, [r4, #0]
 80076c4:	1ac0      	subs	r0, r0, r3
 80076c6:	6963      	ldr	r3, [r4, #20]
 80076c8:	b2f6      	uxtb	r6, r6
 80076ca:	4283      	cmp	r3, r0
 80076cc:	4637      	mov	r7, r6
 80076ce:	dc04      	bgt.n	80076da <__swbuf_r+0x42>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 f92e 	bl	8007934 <_fflush_r>
 80076d8:	bb30      	cbnz	r0, 8007728 <__swbuf_r+0x90>
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	3b01      	subs	r3, #1
 80076de:	60a3      	str	r3, [r4, #8]
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	6022      	str	r2, [r4, #0]
 80076e6:	701e      	strb	r6, [r3, #0]
 80076e8:	6963      	ldr	r3, [r4, #20]
 80076ea:	3001      	adds	r0, #1
 80076ec:	4283      	cmp	r3, r0
 80076ee:	d004      	beq.n	80076fa <__swbuf_r+0x62>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d506      	bpl.n	8007704 <__swbuf_r+0x6c>
 80076f6:	2e0a      	cmp	r6, #10
 80076f8:	d104      	bne.n	8007704 <__swbuf_r+0x6c>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 f919 	bl	8007934 <_fflush_r>
 8007702:	b988      	cbnz	r0, 8007728 <__swbuf_r+0x90>
 8007704:	4638      	mov	r0, r7
 8007706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <__swbuf_r+0x9c>)
 800770a:	429c      	cmp	r4, r3
 800770c:	d101      	bne.n	8007712 <__swbuf_r+0x7a>
 800770e:	68ac      	ldr	r4, [r5, #8]
 8007710:	e7cf      	b.n	80076b2 <__swbuf_r+0x1a>
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <__swbuf_r+0xa0>)
 8007714:	429c      	cmp	r4, r3
 8007716:	bf08      	it	eq
 8007718:	68ec      	ldreq	r4, [r5, #12]
 800771a:	e7ca      	b.n	80076b2 <__swbuf_r+0x1a>
 800771c:	4621      	mov	r1, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f000 f80c 	bl	800773c <__swsetup_r>
 8007724:	2800      	cmp	r0, #0
 8007726:	d0cb      	beq.n	80076c0 <__swbuf_r+0x28>
 8007728:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800772c:	e7ea      	b.n	8007704 <__swbuf_r+0x6c>
 800772e:	bf00      	nop
 8007730:	0800807c 	.word	0x0800807c
 8007734:	0800809c 	.word	0x0800809c
 8007738:	0800805c 	.word	0x0800805c

0800773c <__swsetup_r>:
 800773c:	4b32      	ldr	r3, [pc, #200]	; (8007808 <__swsetup_r+0xcc>)
 800773e:	b570      	push	{r4, r5, r6, lr}
 8007740:	681d      	ldr	r5, [r3, #0]
 8007742:	4606      	mov	r6, r0
 8007744:	460c      	mov	r4, r1
 8007746:	b125      	cbz	r5, 8007752 <__swsetup_r+0x16>
 8007748:	69ab      	ldr	r3, [r5, #24]
 800774a:	b913      	cbnz	r3, 8007752 <__swsetup_r+0x16>
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f985 	bl	8007a5c <__sinit>
 8007752:	4b2e      	ldr	r3, [pc, #184]	; (800780c <__swsetup_r+0xd0>)
 8007754:	429c      	cmp	r4, r3
 8007756:	d10f      	bne.n	8007778 <__swsetup_r+0x3c>
 8007758:	686c      	ldr	r4, [r5, #4]
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	d42c      	bmi.n	80077be <__swsetup_r+0x82>
 8007764:	06dd      	lsls	r5, r3, #27
 8007766:	d411      	bmi.n	800778c <__swsetup_r+0x50>
 8007768:	2309      	movs	r3, #9
 800776a:	6033      	str	r3, [r6, #0]
 800776c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007776:	e03e      	b.n	80077f6 <__swsetup_r+0xba>
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <__swsetup_r+0xd4>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d101      	bne.n	8007782 <__swsetup_r+0x46>
 800777e:	68ac      	ldr	r4, [r5, #8]
 8007780:	e7eb      	b.n	800775a <__swsetup_r+0x1e>
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <__swsetup_r+0xd8>)
 8007784:	429c      	cmp	r4, r3
 8007786:	bf08      	it	eq
 8007788:	68ec      	ldreq	r4, [r5, #12]
 800778a:	e7e6      	b.n	800775a <__swsetup_r+0x1e>
 800778c:	0758      	lsls	r0, r3, #29
 800778e:	d512      	bpl.n	80077b6 <__swsetup_r+0x7a>
 8007790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007792:	b141      	cbz	r1, 80077a6 <__swsetup_r+0x6a>
 8007794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <__swsetup_r+0x66>
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff fb07 	bl	8006db0 <_free_r>
 80077a2:	2300      	movs	r3, #0
 80077a4:	6363      	str	r3, [r4, #52]	; 0x34
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	2300      	movs	r3, #0
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f043 0308 	orr.w	r3, r3, #8
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	b94b      	cbnz	r3, 80077d6 <__swsetup_r+0x9a>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077cc:	d003      	beq.n	80077d6 <__swsetup_r+0x9a>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4630      	mov	r0, r6
 80077d2:	f000 fa09 	bl	8007be8 <__smakebuf_r>
 80077d6:	89a0      	ldrh	r0, [r4, #12]
 80077d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077dc:	f010 0301 	ands.w	r3, r0, #1
 80077e0:	d00a      	beq.n	80077f8 <__swsetup_r+0xbc>
 80077e2:	2300      	movs	r3, #0
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6963      	ldr	r3, [r4, #20]
 80077e8:	425b      	negs	r3, r3
 80077ea:	61a3      	str	r3, [r4, #24]
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b943      	cbnz	r3, 8007802 <__swsetup_r+0xc6>
 80077f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077f4:	d1ba      	bne.n	800776c <__swsetup_r+0x30>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	0781      	lsls	r1, r0, #30
 80077fa:	bf58      	it	pl
 80077fc:	6963      	ldrpl	r3, [r4, #20]
 80077fe:	60a3      	str	r3, [r4, #8]
 8007800:	e7f4      	b.n	80077ec <__swsetup_r+0xb0>
 8007802:	2000      	movs	r0, #0
 8007804:	e7f7      	b.n	80077f6 <__swsetup_r+0xba>
 8007806:	bf00      	nop
 8007808:	200000ac 	.word	0x200000ac
 800780c:	0800807c 	.word	0x0800807c
 8007810:	0800809c 	.word	0x0800809c
 8007814:	0800805c 	.word	0x0800805c

08007818 <abort>:
 8007818:	b508      	push	{r3, lr}
 800781a:	2006      	movs	r0, #6
 800781c:	f000 fa4c 	bl	8007cb8 <raise>
 8007820:	2001      	movs	r0, #1
 8007822:	f7ff f993 	bl	8006b4c <_exit>
	...

08007828 <__sflush_r>:
 8007828:	898a      	ldrh	r2, [r1, #12]
 800782a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782e:	4605      	mov	r5, r0
 8007830:	0710      	lsls	r0, r2, #28
 8007832:	460c      	mov	r4, r1
 8007834:	d458      	bmi.n	80078e8 <__sflush_r+0xc0>
 8007836:	684b      	ldr	r3, [r1, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc05      	bgt.n	8007848 <__sflush_r+0x20>
 800783c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc02      	bgt.n	8007848 <__sflush_r+0x20>
 8007842:	2000      	movs	r0, #0
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800784a:	2e00      	cmp	r6, #0
 800784c:	d0f9      	beq.n	8007842 <__sflush_r+0x1a>
 800784e:	2300      	movs	r3, #0
 8007850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007854:	682f      	ldr	r7, [r5, #0]
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	d032      	beq.n	80078c0 <__sflush_r+0x98>
 800785a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	075a      	lsls	r2, r3, #29
 8007860:	d505      	bpl.n	800786e <__sflush_r+0x46>
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007868:	b10b      	cbz	r3, 800786e <__sflush_r+0x46>
 800786a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800786c:	1ac0      	subs	r0, r0, r3
 800786e:	2300      	movs	r3, #0
 8007870:	4602      	mov	r2, r0
 8007872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007874:	6a21      	ldr	r1, [r4, #32]
 8007876:	4628      	mov	r0, r5
 8007878:	47b0      	blx	r6
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	d106      	bne.n	800788e <__sflush_r+0x66>
 8007880:	6829      	ldr	r1, [r5, #0]
 8007882:	291d      	cmp	r1, #29
 8007884:	d82c      	bhi.n	80078e0 <__sflush_r+0xb8>
 8007886:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <__sflush_r+0x108>)
 8007888:	40ca      	lsrs	r2, r1
 800788a:	07d6      	lsls	r6, r2, #31
 800788c:	d528      	bpl.n	80078e0 <__sflush_r+0xb8>
 800788e:	2200      	movs	r2, #0
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	04d9      	lsls	r1, r3, #19
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	d504      	bpl.n	80078a4 <__sflush_r+0x7c>
 800789a:	1c42      	adds	r2, r0, #1
 800789c:	d101      	bne.n	80078a2 <__sflush_r+0x7a>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	b903      	cbnz	r3, 80078a4 <__sflush_r+0x7c>
 80078a2:	6560      	str	r0, [r4, #84]	; 0x54
 80078a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a6:	602f      	str	r7, [r5, #0]
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d0ca      	beq.n	8007842 <__sflush_r+0x1a>
 80078ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <__sflush_r+0x92>
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fa7b 	bl	8006db0 <_free_r>
 80078ba:	2000      	movs	r0, #0
 80078bc:	6360      	str	r0, [r4, #52]	; 0x34
 80078be:	e7c1      	b.n	8007844 <__sflush_r+0x1c>
 80078c0:	6a21      	ldr	r1, [r4, #32]
 80078c2:	2301      	movs	r3, #1
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b0      	blx	r6
 80078c8:	1c41      	adds	r1, r0, #1
 80078ca:	d1c7      	bne.n	800785c <__sflush_r+0x34>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c4      	beq.n	800785c <__sflush_r+0x34>
 80078d2:	2b1d      	cmp	r3, #29
 80078d4:	d001      	beq.n	80078da <__sflush_r+0xb2>
 80078d6:	2b16      	cmp	r3, #22
 80078d8:	d101      	bne.n	80078de <__sflush_r+0xb6>
 80078da:	602f      	str	r7, [r5, #0]
 80078dc:	e7b1      	b.n	8007842 <__sflush_r+0x1a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	e7ad      	b.n	8007844 <__sflush_r+0x1c>
 80078e8:	690f      	ldr	r7, [r1, #16]
 80078ea:	2f00      	cmp	r7, #0
 80078ec:	d0a9      	beq.n	8007842 <__sflush_r+0x1a>
 80078ee:	0793      	lsls	r3, r2, #30
 80078f0:	680e      	ldr	r6, [r1, #0]
 80078f2:	bf08      	it	eq
 80078f4:	694b      	ldreq	r3, [r1, #20]
 80078f6:	600f      	str	r7, [r1, #0]
 80078f8:	bf18      	it	ne
 80078fa:	2300      	movne	r3, #0
 80078fc:	eba6 0807 	sub.w	r8, r6, r7
 8007900:	608b      	str	r3, [r1, #8]
 8007902:	f1b8 0f00 	cmp.w	r8, #0
 8007906:	dd9c      	ble.n	8007842 <__sflush_r+0x1a>
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800790c:	4643      	mov	r3, r8
 800790e:	463a      	mov	r2, r7
 8007910:	4628      	mov	r0, r5
 8007912:	47b0      	blx	r6
 8007914:	2800      	cmp	r0, #0
 8007916:	dc06      	bgt.n	8007926 <__sflush_r+0xfe>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007924:	e78e      	b.n	8007844 <__sflush_r+0x1c>
 8007926:	4407      	add	r7, r0
 8007928:	eba8 0800 	sub.w	r8, r8, r0
 800792c:	e7e9      	b.n	8007902 <__sflush_r+0xda>
 800792e:	bf00      	nop
 8007930:	20400001 	.word	0x20400001

08007934 <_fflush_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b913      	cbnz	r3, 8007944 <_fflush_r+0x10>
 800793e:	2500      	movs	r5, #0
 8007940:	4628      	mov	r0, r5
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	b118      	cbz	r0, 800794e <_fflush_r+0x1a>
 8007946:	6983      	ldr	r3, [r0, #24]
 8007948:	b90b      	cbnz	r3, 800794e <_fflush_r+0x1a>
 800794a:	f000 f887 	bl	8007a5c <__sinit>
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <_fflush_r+0x6c>)
 8007950:	429c      	cmp	r4, r3
 8007952:	d11b      	bne.n	800798c <_fflush_r+0x58>
 8007954:	686c      	ldr	r4, [r5, #4]
 8007956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ef      	beq.n	800793e <_fflush_r+0xa>
 800795e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007960:	07d0      	lsls	r0, r2, #31
 8007962:	d404      	bmi.n	800796e <_fflush_r+0x3a>
 8007964:	0599      	lsls	r1, r3, #22
 8007966:	d402      	bmi.n	800796e <_fflush_r+0x3a>
 8007968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800796a:	f000 f915 	bl	8007b98 <__retarget_lock_acquire_recursive>
 800796e:	4628      	mov	r0, r5
 8007970:	4621      	mov	r1, r4
 8007972:	f7ff ff59 	bl	8007828 <__sflush_r>
 8007976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007978:	07da      	lsls	r2, r3, #31
 800797a:	4605      	mov	r5, r0
 800797c:	d4e0      	bmi.n	8007940 <_fflush_r+0xc>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	059b      	lsls	r3, r3, #22
 8007982:	d4dd      	bmi.n	8007940 <_fflush_r+0xc>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f000 f908 	bl	8007b9a <__retarget_lock_release_recursive>
 800798a:	e7d9      	b.n	8007940 <_fflush_r+0xc>
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <_fflush_r+0x70>)
 800798e:	429c      	cmp	r4, r3
 8007990:	d101      	bne.n	8007996 <_fflush_r+0x62>
 8007992:	68ac      	ldr	r4, [r5, #8]
 8007994:	e7df      	b.n	8007956 <_fflush_r+0x22>
 8007996:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <_fflush_r+0x74>)
 8007998:	429c      	cmp	r4, r3
 800799a:	bf08      	it	eq
 800799c:	68ec      	ldreq	r4, [r5, #12]
 800799e:	e7da      	b.n	8007956 <_fflush_r+0x22>
 80079a0:	0800807c 	.word	0x0800807c
 80079a4:	0800809c 	.word	0x0800809c
 80079a8:	0800805c 	.word	0x0800805c

080079ac <std>:
 80079ac:	2300      	movs	r3, #0
 80079ae:	b510      	push	{r4, lr}
 80079b0:	4604      	mov	r4, r0
 80079b2:	e9c0 3300 	strd	r3, r3, [r0]
 80079b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ba:	6083      	str	r3, [r0, #8]
 80079bc:	8181      	strh	r1, [r0, #12]
 80079be:	6643      	str	r3, [r0, #100]	; 0x64
 80079c0:	81c2      	strh	r2, [r0, #14]
 80079c2:	6183      	str	r3, [r0, #24]
 80079c4:	4619      	mov	r1, r3
 80079c6:	2208      	movs	r2, #8
 80079c8:	305c      	adds	r0, #92	; 0x5c
 80079ca:	f7ff f9e9 	bl	8006da0 <memset>
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std+0x38>)
 80079d0:	6263      	str	r3, [r4, #36]	; 0x24
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std+0x3c>)
 80079d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <std+0x40>)
 80079d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <std+0x44>)
 80079dc:	6224      	str	r4, [r4, #32]
 80079de:	6323      	str	r3, [r4, #48]	; 0x30
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	08007cf1 	.word	0x08007cf1
 80079e8:	08007d13 	.word	0x08007d13
 80079ec:	08007d4b 	.word	0x08007d4b
 80079f0:	08007d6f 	.word	0x08007d6f

080079f4 <_cleanup_r>:
 80079f4:	4901      	ldr	r1, [pc, #4]	; (80079fc <_cleanup_r+0x8>)
 80079f6:	f000 b8af 	b.w	8007b58 <_fwalk_reent>
 80079fa:	bf00      	nop
 80079fc:	08007935 	.word	0x08007935

08007a00 <__sfmoreglue>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	2268      	movs	r2, #104	; 0x68
 8007a04:	1e4d      	subs	r5, r1, #1
 8007a06:	4355      	muls	r5, r2
 8007a08:	460e      	mov	r6, r1
 8007a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a0e:	f7ff fa3b 	bl	8006e88 <_malloc_r>
 8007a12:	4604      	mov	r4, r0
 8007a14:	b140      	cbz	r0, 8007a28 <__sfmoreglue+0x28>
 8007a16:	2100      	movs	r1, #0
 8007a18:	e9c0 1600 	strd	r1, r6, [r0]
 8007a1c:	300c      	adds	r0, #12
 8007a1e:	60a0      	str	r0, [r4, #8]
 8007a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a24:	f7ff f9bc 	bl	8006da0 <memset>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}

08007a2c <__sfp_lock_acquire>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <__sfp_lock_acquire+0x8>)
 8007a2e:	f000 b8b3 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	20002d99 	.word	0x20002d99

08007a38 <__sfp_lock_release>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__sfp_lock_release+0x8>)
 8007a3a:	f000 b8ae 	b.w	8007b9a <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20002d99 	.word	0x20002d99

08007a44 <__sinit_lock_acquire>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__sinit_lock_acquire+0x8>)
 8007a46:	f000 b8a7 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20002d9a 	.word	0x20002d9a

08007a50 <__sinit_lock_release>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__sinit_lock_release+0x8>)
 8007a52:	f000 b8a2 	b.w	8007b9a <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	20002d9a 	.word	0x20002d9a

08007a5c <__sinit>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	f7ff fff0 	bl	8007a44 <__sinit_lock_acquire>
 8007a64:	69a3      	ldr	r3, [r4, #24]
 8007a66:	b11b      	cbz	r3, 8007a70 <__sinit+0x14>
 8007a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6c:	f7ff bff0 	b.w	8007a50 <__sinit_lock_release>
 8007a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a74:	6523      	str	r3, [r4, #80]	; 0x50
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <__sinit+0x68>)
 8007a78:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <__sinit+0x6c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	bf04      	itt	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	61a3      	streq	r3, [r4, #24]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 f820 	bl	8007acc <__sfp>
 8007a8c:	6060      	str	r0, [r4, #4]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f81c 	bl	8007acc <__sfp>
 8007a94:	60a0      	str	r0, [r4, #8]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f818 	bl	8007acc <__sfp>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	60e0      	str	r0, [r4, #12]
 8007aa0:	2104      	movs	r1, #4
 8007aa2:	6860      	ldr	r0, [r4, #4]
 8007aa4:	f7ff ff82 	bl	80079ac <std>
 8007aa8:	68a0      	ldr	r0, [r4, #8]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	2109      	movs	r1, #9
 8007aae:	f7ff ff7d 	bl	80079ac <std>
 8007ab2:	68e0      	ldr	r0, [r4, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	2112      	movs	r1, #18
 8007ab8:	f7ff ff78 	bl	80079ac <std>
 8007abc:	2301      	movs	r3, #1
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	e7d2      	b.n	8007a68 <__sinit+0xc>
 8007ac2:	bf00      	nop
 8007ac4:	08007f74 	.word	0x08007f74
 8007ac8:	080079f5 	.word	0x080079f5

08007acc <__sfp>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	4607      	mov	r7, r0
 8007ad0:	f7ff ffac 	bl	8007a2c <__sfp_lock_acquire>
 8007ad4:	4b1e      	ldr	r3, [pc, #120]	; (8007b50 <__sfp+0x84>)
 8007ad6:	681e      	ldr	r6, [r3, #0]
 8007ad8:	69b3      	ldr	r3, [r6, #24]
 8007ada:	b913      	cbnz	r3, 8007ae2 <__sfp+0x16>
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ffbd 	bl	8007a5c <__sinit>
 8007ae2:	3648      	adds	r6, #72	; 0x48
 8007ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	d503      	bpl.n	8007af4 <__sfp+0x28>
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	b30b      	cbz	r3, 8007b34 <__sfp+0x68>
 8007af0:	6836      	ldr	r6, [r6, #0]
 8007af2:	e7f7      	b.n	8007ae4 <__sfp+0x18>
 8007af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007af8:	b9d5      	cbnz	r5, 8007b30 <__sfp+0x64>
 8007afa:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <__sfp+0x88>)
 8007afc:	60e3      	str	r3, [r4, #12]
 8007afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b02:	6665      	str	r5, [r4, #100]	; 0x64
 8007b04:	f000 f847 	bl	8007b96 <__retarget_lock_init_recursive>
 8007b08:	f7ff ff96 	bl	8007a38 <__sfp_lock_release>
 8007b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b14:	6025      	str	r5, [r4, #0]
 8007b16:	61a5      	str	r5, [r4, #24]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b20:	f7ff f93e 	bl	8006da0 <memset>
 8007b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	3468      	adds	r4, #104	; 0x68
 8007b32:	e7d9      	b.n	8007ae8 <__sfp+0x1c>
 8007b34:	2104      	movs	r1, #4
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7ff ff62 	bl	8007a00 <__sfmoreglue>
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	6030      	str	r0, [r6, #0]
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d1d5      	bne.n	8007af0 <__sfp+0x24>
 8007b44:	f7ff ff78 	bl	8007a38 <__sfp_lock_release>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	e7ee      	b.n	8007b2c <__sfp+0x60>
 8007b4e:	bf00      	nop
 8007b50:	08007f74 	.word	0x08007f74
 8007b54:	ffff0001 	.word	0xffff0001

08007b58 <_fwalk_reent>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	4688      	mov	r8, r1
 8007b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b64:	2700      	movs	r7, #0
 8007b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b6e:	d505      	bpl.n	8007b7c <_fwalk_reent+0x24>
 8007b70:	6824      	ldr	r4, [r4, #0]
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	d1f7      	bne.n	8007b66 <_fwalk_reent+0xe>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7c:	89ab      	ldrh	r3, [r5, #12]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d907      	bls.n	8007b92 <_fwalk_reent+0x3a>
 8007b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b86:	3301      	adds	r3, #1
 8007b88:	d003      	beq.n	8007b92 <_fwalk_reent+0x3a>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	47c0      	blx	r8
 8007b90:	4307      	orrs	r7, r0
 8007b92:	3568      	adds	r5, #104	; 0x68
 8007b94:	e7e9      	b.n	8007b6a <_fwalk_reent+0x12>

08007b96 <__retarget_lock_init_recursive>:
 8007b96:	4770      	bx	lr

08007b98 <__retarget_lock_acquire_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <__retarget_lock_release_recursive>:
 8007b9a:	4770      	bx	lr

08007b9c <__swhatbuf_r>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	460e      	mov	r6, r1
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	b096      	sub	sp, #88	; 0x58
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	da08      	bge.n	8007bc0 <__swhatbuf_r+0x24>
 8007bae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	061a      	lsls	r2, r3, #24
 8007bb8:	d410      	bmi.n	8007bdc <__swhatbuf_r+0x40>
 8007bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bbe:	e00e      	b.n	8007bde <__swhatbuf_r+0x42>
 8007bc0:	466a      	mov	r2, sp
 8007bc2:	f000 f8fb 	bl	8007dbc <_fstat_r>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	dbf1      	blt.n	8007bae <__swhatbuf_r+0x12>
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bd4:	425a      	negs	r2, r3
 8007bd6:	415a      	adcs	r2, r3
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	e7ee      	b.n	8007bba <__swhatbuf_r+0x1e>
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	2000      	movs	r0, #0
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	b016      	add	sp, #88	; 0x58
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007be8 <__smakebuf_r>:
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bec:	079d      	lsls	r5, r3, #30
 8007bee:	4606      	mov	r6, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	d507      	bpl.n	8007c04 <__smakebuf_r+0x1c>
 8007bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	b002      	add	sp, #8
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	ab01      	add	r3, sp, #4
 8007c06:	466a      	mov	r2, sp
 8007c08:	f7ff ffc8 	bl	8007b9c <__swhatbuf_r>
 8007c0c:	9900      	ldr	r1, [sp, #0]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff f939 	bl	8006e88 <_malloc_r>
 8007c16:	b948      	cbnz	r0, 8007c2c <__smakebuf_r+0x44>
 8007c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1c:	059a      	lsls	r2, r3, #22
 8007c1e:	d4ef      	bmi.n	8007c00 <__smakebuf_r+0x18>
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	f043 0302 	orr.w	r3, r3, #2
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	e7e3      	b.n	8007bf4 <__smakebuf_r+0xc>
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <__smakebuf_r+0x7c>)
 8007c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	6163      	str	r3, [r4, #20]
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	6120      	str	r0, [r4, #16]
 8007c42:	b15b      	cbz	r3, 8007c5c <__smakebuf_r+0x74>
 8007c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f8c9 	bl	8007de0 <_isatty_r>
 8007c4e:	b128      	cbz	r0, 8007c5c <__smakebuf_r+0x74>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	89a0      	ldrh	r0, [r4, #12]
 8007c5e:	4305      	orrs	r5, r0
 8007c60:	81a5      	strh	r5, [r4, #12]
 8007c62:	e7cd      	b.n	8007c00 <__smakebuf_r+0x18>
 8007c64:	080079f5 	.word	0x080079f5

08007c68 <_raise_r>:
 8007c68:	291f      	cmp	r1, #31
 8007c6a:	b538      	push	{r3, r4, r5, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	d904      	bls.n	8007c7c <_raise_r+0x14>
 8007c72:	2316      	movs	r3, #22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c7e:	b112      	cbz	r2, 8007c86 <_raise_r+0x1e>
 8007c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c84:	b94b      	cbnz	r3, 8007c9a <_raise_r+0x32>
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f830 	bl	8007cec <_getpid_r>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4620      	mov	r0, r4
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f000 b817 	b.w	8007cc8 <_kill_r>
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00a      	beq.n	8007cb4 <_raise_r+0x4c>
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	d103      	bne.n	8007caa <_raise_r+0x42>
 8007ca2:	2316      	movs	r3, #22
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7e7      	b.n	8007c7a <_raise_r+0x12>
 8007caa:	2400      	movs	r4, #0
 8007cac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	4798      	blx	r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e7e0      	b.n	8007c7a <_raise_r+0x12>

08007cb8 <raise>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <raise+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f7ff bfd3 	b.w	8007c68 <_raise_r>
 8007cc2:	bf00      	nop
 8007cc4:	200000ac 	.word	0x200000ac

08007cc8 <_kill_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_kill_r+0x20>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f7fe ff29 	bl	8006b2c <_kill>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d102      	bne.n	8007ce4 <_kill_r+0x1c>
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	b103      	cbz	r3, 8007ce4 <_kill_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20002d94 	.word	0x20002d94

08007cec <_getpid_r>:
 8007cec:	f7fe bf16 	b.w	8006b1c <_getpid>

08007cf0 <__sread>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf8:	f000 f894 	bl	8007e24 <_read_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	bfab      	itete	ge
 8007d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d02:	89a3      	ldrhlt	r3, [r4, #12]
 8007d04:	181b      	addge	r3, r3, r0
 8007d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d0a:	bfac      	ite	ge
 8007d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d0e:	81a3      	strhlt	r3, [r4, #12]
 8007d10:	bd10      	pop	{r4, pc}

08007d12 <__swrite>:
 8007d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d16:	461f      	mov	r7, r3
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	05db      	lsls	r3, r3, #23
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4616      	mov	r6, r2
 8007d22:	d505      	bpl.n	8007d30 <__swrite+0x1e>
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	2302      	movs	r3, #2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f000 f868 	bl	8007e00 <_lseek_r>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	463b      	mov	r3, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	f000 b817 	b.w	8007d78 <_write_r>

08007d4a <__sseek>:
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d52:	f000 f855 	bl	8007e00 <_lseek_r>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	bf15      	itete	ne
 8007d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d66:	81a3      	strheq	r3, [r4, #12]
 8007d68:	bf18      	it	ne
 8007d6a:	81a3      	strhne	r3, [r4, #12]
 8007d6c:	bd10      	pop	{r4, pc}

08007d6e <__sclose>:
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 b813 	b.w	8007d9c <_close_r>
	...

08007d78 <_write_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_write_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7fe ff07 	bl	8006b9a <_write>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_write_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_write_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20002d94 	.word	0x20002d94

08007d9c <_close_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d06      	ldr	r5, [pc, #24]	; (8007db8 <_close_r+0x1c>)
 8007da0:	2300      	movs	r3, #0
 8007da2:	4604      	mov	r4, r0
 8007da4:	4608      	mov	r0, r1
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	f7fe ff13 	bl	8006bd2 <_close>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_close_r+0x1a>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_close_r+0x1a>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	20002d94 	.word	0x20002d94

08007dbc <_fstat_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4d07      	ldr	r5, [pc, #28]	; (8007ddc <_fstat_r+0x20>)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f7fe ff0e 	bl	8006bea <_fstat>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d102      	bne.n	8007dd8 <_fstat_r+0x1c>
 8007dd2:	682b      	ldr	r3, [r5, #0]
 8007dd4:	b103      	cbz	r3, 8007dd8 <_fstat_r+0x1c>
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	20002d94 	.word	0x20002d94

08007de0 <_isatty_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_isatty_r+0x1c>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fe ff0d 	bl	8006c0a <_isatty>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_isatty_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_isatty_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20002d94 	.word	0x20002d94

08007e00 <_lseek_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d07      	ldr	r5, [pc, #28]	; (8007e20 <_lseek_r+0x20>)
 8007e04:	4604      	mov	r4, r0
 8007e06:	4608      	mov	r0, r1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	602a      	str	r2, [r5, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7fe ff06 	bl	8006c20 <_lseek>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_lseek_r+0x1e>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_lseek_r+0x1e>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20002d94 	.word	0x20002d94

08007e24 <_read_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_read_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7fe fe94 	bl	8006b60 <_read>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_read_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_read_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20002d94 	.word	0x20002d94

08007e48 <_gettimeofday>:
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <_gettimeofday+0xc>)
 8007e4a:	2258      	movs	r2, #88	; 0x58
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e52:	4770      	bx	lr
 8007e54:	20002d94 	.word	0x20002d94

08007e58 <_init>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr

08007e64 <_fini>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr
