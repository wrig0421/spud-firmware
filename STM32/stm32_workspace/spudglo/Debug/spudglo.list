
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d8  080091d8  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  080091d8  080091d8  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d8  080091d8  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080091e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e8  20000354  08009534  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a3c  08009534  00022a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e25  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de9  00000000  00000000  000411a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00045f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc0  00000000  00000000  00047ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f85  00000000  00000000  000498a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f2c  00000000  00000000  00072825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a2c  00000000  00000000  00096751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008378  00000000  00000000  0018e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00196548  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0019656c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f60 	.word	0x08008f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	08008f60 	.word	0x08008f60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000274:	e009      	b.n	800028a <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <current_monitor_init+0x64>)
 8000278:	edd3 7a00 	vldr	s15, [r3]
 800027c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80002d8 <current_monitor_init+0x68>
 8000280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <current_monitor_init+0x64>)
 8000286:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <current_monitor_init+0x64>)
 800028c:	edd3 7a00 	vldr	s15, [r3]
 8000290:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80002dc <current_monitor_init+0x6c>
 8000294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000298:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80002e0 <current_monitor_init+0x70>
 800029c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002a0:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80002a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ac:	dce3      	bgt.n	8000276 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <current_monitor_init+0x64>)
 80002b0:	edd3 7a00 	vldr	s15, [r3]
 80002b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002bc:	d800      	bhi.n	80002c0 <current_monitor_init+0x50>
 80002be:	e7fe      	b.n	80002be <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <current_monitor_init+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <current_monitor_init+0x74>)
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000
 80002d8:	3d4ccccd 	.word	0x3d4ccccd
 80002dc:	3d23d70a 	.word	0x3d23d70a
 80002e0:	43700000 	.word	0x43700000
 80002e4:	20000370 	.word	0x20000370

080002e8 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 80002fc:	f000 fabe 	bl	800087c <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <animate_led_set_all_pixels>:
    //animate_led_show_strip(mask);
}


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b089      	sub	sp, #36	; 0x24
 800030c:	af02      	add	r7, sp, #8
 800030e:	4604      	mov	r4, r0
 8000310:	4608      	mov	r0, r1
 8000312:	4611      	mov	r1, r2
 8000314:	461a      	mov	r2, r3
 8000316:	4623      	mov	r3, r4
 8000318:	80fb      	strh	r3, [r7, #6]
 800031a:	4603      	mov	r3, r0
 800031c:	717b      	strb	r3, [r7, #5]
 800031e:	460b      	mov	r3, r1
 8000320:	713b      	strb	r3, [r7, #4]
 8000322:	4613      	mov	r3, r2
 8000324:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <animate_led_set_all_pixels+0xd0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	88fa      	ldrh	r2, [r7, #6]
 8000330:	429a      	cmp	r2, r3
 8000332:	d122      	bne.n	800037a <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000334:	2301      	movs	r3, #1
 8000336:	75fb      	strb	r3, [r7, #23]
 8000338:	e01b      	b.n	8000372 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 800033a:	7dfb      	ldrb	r3, [r7, #23]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f8f5 	bl	800052c <ws2812_get_strip_size>
 8000342:	4603      	mov	r3, r0
 8000344:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000346:	2300      	movs	r3, #0
 8000348:	82bb      	strh	r3, [r7, #20]
 800034a:	e00b      	b.n	8000364 <animate_led_set_all_pixels+0x5c>
 800034c:	793c      	ldrb	r4, [r7, #4]
 800034e:	797a      	ldrb	r2, [r7, #5]
 8000350:	8ab9      	ldrh	r1, [r7, #20]
 8000352:	7df8      	ldrb	r0, [r7, #23]
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	4623      	mov	r3, r4
 800035a:	f000 f909 	bl	8000570 <ws2812b_set_led>
 800035e:	8abb      	ldrh	r3, [r7, #20]
 8000360:	3301      	adds	r3, #1
 8000362:	82bb      	strh	r3, [r7, #20]
 8000364:	8aba      	ldrh	r2, [r7, #20]
 8000366:	89fb      	ldrh	r3, [r7, #14]
 8000368:	429a      	cmp	r2, r3
 800036a:	d3ef      	bcc.n	800034c <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800036c:	7dfb      	ldrb	r3, [r7, #23]
 800036e:	3301      	adds	r3, #1
 8000370:	75fb      	strb	r3, [r7, #23]
 8000372:	7dfb      	ldrb	r3, [r7, #23]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d9e0      	bls.n	800033a <animate_led_set_all_pixels+0x32>
 8000378:	e026      	b.n	80003c8 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800037a:	2301      	movs	r3, #1
 800037c:	74fb      	strb	r3, [r7, #19]
 800037e:	e020      	b.n	80003c2 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000380:	88fa      	ldrh	r2, [r7, #6]
 8000382:	7cfb      	ldrb	r3, [r7, #19]
 8000384:	4013      	ands	r3, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	d018      	beq.n	80003bc <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 800038a:	7cfb      	ldrb	r3, [r7, #19]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f8cd 	bl	800052c <ws2812_get_strip_size>
 8000392:	4603      	mov	r3, r0
 8000394:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000396:	2300      	movs	r3, #0
 8000398:	823b      	strh	r3, [r7, #16]
 800039a:	e00b      	b.n	80003b4 <animate_led_set_all_pixels+0xac>
 800039c:	793c      	ldrb	r4, [r7, #4]
 800039e:	797a      	ldrb	r2, [r7, #5]
 80003a0:	8a39      	ldrh	r1, [r7, #16]
 80003a2:	7cf8      	ldrb	r0, [r7, #19]
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	4623      	mov	r3, r4
 80003aa:	f000 f8e1 	bl	8000570 <ws2812b_set_led>
 80003ae:	8a3b      	ldrh	r3, [r7, #16]
 80003b0:	3301      	adds	r3, #1
 80003b2:	823b      	strh	r3, [r7, #16]
 80003b4:	8a3a      	ldrh	r2, [r7, #16]
 80003b6:	89fb      	ldrh	r3, [r7, #14]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3ef      	bcc.n	800039c <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80003bc:	7cfb      	ldrb	r3, [r7, #19]
 80003be:	3301      	adds	r3, #1
 80003c0:	74fb      	strb	r3, [r7, #19]
 80003c2:	7cfb      	ldrb	r3, [r7, #19]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d9db      	bls.n	8000380 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 80003c8:	88fb      	ldrh	r3, [r7, #6]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff8c 	bl	80002e8 <animate_led_show_strip>
}
 80003d0:	bf00      	nop
 80003d2:	371c      	adds	r7, #28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd90      	pop	{r4, r7, pc}
 80003d8:	20000646 	.word	0x20000646

080003dc <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <animate_led_solid_custom_color+0x40>)
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	81bb      	strh	r3, [r7, #12]
 80003ee:	2300      	movs	r3, #0
 80003f0:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	6838      	ldr	r0, [r7, #0]
 80003fa:	f000 f811 	bl	8000420 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 80003fe:	7b39      	ldrb	r1, [r7, #12]
 8000400:	7b7a      	ldrb	r2, [r7, #13]
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	88f8      	ldrh	r0, [r7, #6]
 8000406:	f7ff ff7f 	bl	8000308 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff6b 	bl	80002e8 <animate_led_show_strip>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	08008f78 	.word	0x08008f78

08000420 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	0c1b      	lsrs	r3, r3, #16
 800042e:	b2da      	uxtb	r2, r3
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	0a1a      	lsrs	r2, r3, #8
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	3302      	adds	r3, #2
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	701a      	strb	r2, [r3, #0]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800045c:	2364      	movs	r3, #100	; 0x64
 800045e:	4a09      	ldr	r2, [pc, #36]	; (8000484 <reset_ws2812b+0x2c>)
 8000460:	2100      	movs	r1, #0
 8000462:	4809      	ldr	r0, [pc, #36]	; (8000488 <reset_ws2812b+0x30>)
 8000464:	f005 fb00 	bl	8005a68 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <reset_ws2812b+0x2c>)
 800046c:	2104      	movs	r1, #4
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <reset_ws2812b+0x30>)
 8000470:	f005 fafa 	bl	8005a68 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8000474:	2364      	movs	r3, #100	; 0x64
 8000476:	4a03      	ldr	r2, [pc, #12]	; (8000484 <reset_ws2812b+0x2c>)
 8000478:	2108      	movs	r1, #8
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <reset_ws2812b+0x30>)
 800047c:	f005 faf4 	bl	8005a68 <HAL_TIM_PWM_Start_DMA>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000654 	.word	0x20000654
 8000488:	20002174 	.word	0x20002174

0800048c <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	3301      	adds	r3, #1
 800049a:	b2db      	uxtb	r3, r3
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	b2db      	uxtb	r3, r3
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d104      	bne.n	80004e6 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	737b      	strb	r3, [r7, #13]
        break;
 80004e4:	e000      	b.n	80004e8 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 80004e6:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 80004e8:	89fa      	ldrh	r2, [r7, #14]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	ee07 3a90 	vmov	s15, r3
 80004f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004fa:	7b7b      	ldrb	r3, [r7, #13]
 80004fc:	ee07 3a90 	vmov	s15, r3
 8000500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000504:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000528 <ws2812_get_pwm_strip_offset+0x64>
 8000508:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800050c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000514:	ee17 3a90 	vmov	r3, s15
 8000518:	b29b      	uxth	r3, r3
}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	453b8000 	.word	0x453b8000

0800052c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d103      	bne.n	8000548 <ws2812_get_strip_size+0x1c>
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <ws2812_get_strip_size+0x3c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	81fb      	strh	r3, [r7, #14]
 8000546:	e009      	b.n	800055c <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff9e 	bl	800048c <ws2812_convert_strip_num_to_strip_bit>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <ws2812_get_strip_size+0x40>)
 8000556:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800055a:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 800055c:	89fb      	ldrh	r3, [r7, #14]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000648 	.word	0x20000648
 800056c:	20000004 	.word	0x20000004

08000570 <ws2812b_set_led>:
}


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	4604      	mov	r4, r0
 8000578:	4608      	mov	r0, r1
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	4623      	mov	r3, r4
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	4603      	mov	r3, r0
 8000584:	81bb      	strh	r3, [r7, #12]
 8000586:	460b      	mov	r3, r1
 8000588:	73bb      	strb	r3, [r7, #14]
 800058a:	4613      	mov	r3, r2
 800058c:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff89 	bl	80004a8 <ws2812_convert_strip_bit_to_strip_num>
 8000596:	4603      	mov	r3, r0
 8000598:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <ws2812b_set_led+0xd0>)
 80005a6:	edd3 7a00 	vldr	s15, [r3]
 80005aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	4a24      	ldr	r2, [pc, #144]	; (8000644 <ws2812b_set_led+0xd4>)
 80005b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005b6:	89ba      	ldrh	r2, [r7, #12]
 80005b8:	4613      	mov	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	440b      	add	r3, r1
 80005c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80005c8:	793a      	ldrb	r2, [r7, #4]
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 80005ce:	7afb      	ldrb	r3, [r7, #11]
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <ws2812b_set_led+0xd0>)
 80005da:	edd3 7a00 	vldr	s15, [r3]
 80005de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <ws2812b_set_led+0xd4>)
 80005e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005ea:	89ba      	ldrh	r2, [r7, #12]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80005fc:	793a      	ldrb	r2, [r7, #4]
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8000602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <ws2812b_set_led+0xd0>)
 8000610:	edd3 7a00 	vldr	s15, [r3]
 8000614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <ws2812b_set_led+0xd4>)
 800061c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000620:	89ba      	ldrh	r2, [r7, #12]
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	440b      	add	r3, r1
 800062a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000632:	793a      	ldrb	r2, [r7, #4]
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	709a      	strb	r2, [r3, #2]
}
 8000638:	bf00      	nop
 800063a:	371c      	adds	r7, #28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000650 	.word	0x20000650

08000648 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8000652:	23f0      	movs	r3, #240	; 0xf0
 8000654:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ff34 	bl	80004c4 <ws2812_get_pwm_strip_offset>
 800065c:	4603      	mov	r3, r0
 800065e:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8000660:	e002      	b.n	8000668 <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fa50 	bl	8000b08 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f5      	bne.n	8000662 <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8000676:	2300      	movs	r3, #0
 8000678:	82fb      	strh	r3, [r7, #22]
 800067a:	e046      	b.n	800070a <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	8afa      	ldrh	r2, [r7, #22]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	440b      	add	r3, r1
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	8afa      	ldrh	r2, [r7, #22]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	4403      	add	r3, r0
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80006a0:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	8afa      	ldrh	r2, [r7, #22]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	4403      	add	r3, r0
 80006b0:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80006b2:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80006b4:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	757b      	strb	r3, [r7, #21]
 80006ba:	e020      	b.n	80006fe <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80006bc:	7d7b      	ldrb	r3, [r7, #21]
 80006be:	f1c3 0317 	rsb	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4013      	ands	r3, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	e000      	b.n	80006d8 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 80006d6:	2014      	movs	r0, #20
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	8afa      	ldrh	r2, [r7, #22]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	441a      	add	r2, r3
 80006ec:	7d7b      	ldrb	r3, [r7, #21]
 80006ee:	4413      	add	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	440b      	add	r3, r1
 80006f4:	4602      	mov	r2, r0
 80006f6:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80006f8:	7d7b      	ldrb	r3, [r7, #21]
 80006fa:	3301      	adds	r3, #1
 80006fc:	757b      	strb	r3, [r7, #21]
 80006fe:	7d7b      	ldrb	r3, [r7, #21]
 8000700:	2b17      	cmp	r3, #23
 8000702:	d9db      	bls.n	80006bc <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8000704:	8afb      	ldrh	r3, [r7, #22]
 8000706:	3301      	adds	r3, #1
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	8afb      	ldrh	r3, [r7, #22]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	429a      	cmp	r2, r3
 8000710:	d8b4      	bhi.n	800067c <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000712:	2300      	movs	r3, #0
 8000714:	827b      	strh	r3, [r7, #18]
 8000716:	e012      	b.n	800073e <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	461a      	mov	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	441a      	add	r2, r3
 800072c:	8a7b      	ldrh	r3, [r7, #18]
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	440b      	add	r3, r1
 8000734:	2200      	movs	r2, #0
 8000736:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000738:	8a7b      	ldrh	r3, [r7, #18]
 800073a:	3301      	adds	r3, #1
 800073c:	827b      	strh	r3, [r7, #18]
 800073e:	8a7b      	ldrh	r3, [r7, #18]
 8000740:	ee07 3a90 	vmov	s15, r3
 8000744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000748:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000788 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 800074c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	d4e0      	bmi.n	8000718 <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	441a      	add	r2, r3
 8000766:	f242 2338 	movw	r3, #8760	; 0x2238
 800076a:	2100      	movs	r1, #0
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 800076e:	f005 f97b 	bl	8005a68 <HAL_TIM_PWM_Start_DMA>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200002e9 	.word	0x200002e9
 8000780:	20000650 	.word	0x20000650
 8000784:	2000064c 	.word	0x2000064c
 8000788:	453b8000 	.word	0x453b8000
 800078c:	200002e8 	.word	0x200002e8
 8000790:	20002174 	.word	0x20002174

08000794 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <ws2812b_init+0xc8>)
 800079c:	4a30      	ldr	r2, [pc, #192]	; (8000860 <ws2812b_init+0xcc>)
 800079e:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 80007a0:	2301      	movs	r3, #1
 80007a2:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e00f      	b.n	80007ca <ws2812b_init+0x36>
 80007aa:	2201      	movs	r2, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <ws2812b_init+0xd0>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <ws2812b_init+0xd0>)
 80007c2:	801a      	strh	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	ddec      	ble.n	80007aa <ws2812b_init+0x16>
	switch (num_strips)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10d      	bne.n	80007f2 <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <ws2812b_init+0xd4>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	33f0      	adds	r3, #240	; 0xf0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <ws2812b_init+0xd4>)
 80007e0:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <ws2812b_init+0xd8>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	2bef      	cmp	r3, #239	; 0xef
 80007e8:	d802      	bhi.n	80007f0 <ws2812b_init+0x5c>
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <ws2812b_init+0xd8>)
 80007ec:	22f0      	movs	r2, #240	; 0xf0
 80007ee:	801a      	strh	r2, [r3, #0]
		break;
 80007f0:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <ws2812b_init+0xd4>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000808:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000870 <ws2812b_init+0xdc>
 800080c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000814:	ee17 0a90 	vmov	r0, s15
 8000818:	f007 fb30 	bl	8007e7c <malloc>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <ws2812b_init+0xe0>)
 8000822:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <ws2812b_init+0xd4>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800083a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000870 <ws2812b_init+0xdc>
 800083e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000846:	ee17 2a90 	vmov	r2, s15
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <ws2812b_init+0xe4>)
 800084c:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 800084e:	f7ff fd0f 	bl	8000270 <current_monitor_init>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000650 	.word	0x20000650
 8000860:	20000374 	.word	0x20000374
 8000864:	20000646 	.word	0x20000646
 8000868:	20000644 	.word	0x20000644
 800086c:	20000648 	.word	0x20000648
 8000870:	453b8000 	.word	0x453b8000
 8000874:	2000064c 	.word	0x2000064c
 8000878:	200006b8 	.word	0x200006b8

0800087c <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8000880:	f7ff fee2 	bl	8000648 <ws2812b_fill_pwm_buffer_strip_one>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <task_led_ctrl_strip_one>:
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
}


void task_led_ctrl_strip_one(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
//    board_init_specific_orange_led_off();
//
//
    while (1)
    {
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_RED);
 8000890:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fda1 	bl	80003dc <animate_led_solid_custom_color>
        osDelay(5000);
 800089a:	f241 3088 	movw	r0, #5000	; 0x1388
 800089e:	f000 f933 	bl	8000b08 <osDelay>
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_GREEN);
 80008a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fd98 	bl	80003dc <animate_led_solid_custom_color>
        osDelay(5000);
 80008ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80008b0:	f000 f92a 	bl	8000b08 <osDelay>
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLUE);
 80008b4:	21ff      	movs	r1, #255	; 0xff
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fd90 	bl	80003dc <animate_led_solid_custom_color>
        osDelay(5000);
 80008bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80008c0:	f000 f922 	bl	8000b08 <osDelay>
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_RED);
 80008c4:	e7e4      	b.n	8000890 <task_led_ctrl_strip_one+0x8>
	...

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Handler+0x1c>)
 8000922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000924:	f001 fd10 	bl	8002348 <xTaskGetSchedulerState>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d001      	beq.n	8000932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800092e:	f002 fbd3 	bl	80030d8 <xPortSysTickHandler>
  }
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000940:	2100      	movs	r1, #0
 8000942:	f06f 0004 	mvn.w	r0, #4
 8000946:	f7ff ffbf 	bl	80008c8 <__NVIC_SetPriority>
#endif
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000956:	f3ef 8305 	mrs	r3, IPSR
 800095a:	603b      	str	r3, [r7, #0]
  return(result);
 800095c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000962:	f06f 0305 	mvn.w	r3, #5
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	e00c      	b.n	8000984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <osKernelInitialize+0x44>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <osKernelInitialize+0x44>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	e002      	b.n	8000984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200006dc 	.word	0x200006dc

08000998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800099e:	f3ef 8305 	mrs	r3, IPSR
 80009a2:	603b      	str	r3, [r7, #0]
  return(result);
 80009a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80009aa:	f06f 0305 	mvn.w	r3, #5
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e010      	b.n	80009d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <osKernelStart+0x48>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d109      	bne.n	80009ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80009ba:	f7ff ffbf 	bl	800093c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <osKernelStart+0x48>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80009c4:	f001 f866 	bl	8001a94 <vTaskStartScheduler>
      stat = osOK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	e002      	b.n	80009d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200006dc 	.word	0x200006dc

080009e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af04      	add	r7, sp, #16
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80009f4:	f3ef 8305 	mrs	r3, IPSR
 80009f8:	617b      	str	r3, [r7, #20]
  return(result);
 80009fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d17e      	bne.n	8000afe <osThreadNew+0x11a>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d07b      	beq.n	8000afe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000a0a:	2318      	movs	r3, #24
 8000a0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d045      	beq.n	8000aaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <osThreadNew+0x48>
        name = attr->name;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <osThreadNew+0x6e>
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	2b38      	cmp	r3, #56	; 0x38
 8000a44:	d805      	bhi.n	8000a52 <osThreadNew+0x6e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <osThreadNew+0x72>
        return (NULL);
 8000a52:	2300      	movs	r3, #0
 8000a54:	e054      	b.n	8000b00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00e      	beq.n	8000a8c <osThreadNew+0xa8>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2b5b      	cmp	r3, #91	; 0x5b
 8000a74:	d90a      	bls.n	8000a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <osThreadNew+0xa8>
        mem = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	e010      	b.n	8000aae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10c      	bne.n	8000aae <osThreadNew+0xca>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d108      	bne.n	8000aae <osThreadNew+0xca>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <osThreadNew+0xca>
          mem = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	e001      	b.n	8000aae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d110      	bne.n	8000ad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000abc:	9202      	str	r2, [sp, #8]
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	6a3a      	ldr	r2, [r7, #32]
 8000ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 fe0c 	bl	80016e8 <xTaskCreateStatic>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	e013      	b.n	8000afe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d110      	bne.n	8000afe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f000 fe57 	bl	80017a2 <xTaskCreate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d001      	beq.n	8000afe <osThreadNew+0x11a>
            hTask = NULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000afe:	693b      	ldr	r3, [r7, #16]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b10:	f3ef 8305 	mrs	r3, IPSR
 8000b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8000b16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <osDelay+0x1c>
    stat = osErrorISR;
 8000b1c:	f06f 0305 	mvn.w	r3, #5
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e007      	b.n	8000b34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 ff7c 	bl	8001a2c <vTaskDelay>
    }
  }

  return (stat);
 8000b34:	68fb      	ldr	r3, [r7, #12]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <vApplicationGetIdleTaskMemory+0x30>)
 8000b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200006e0 	.word	0x200006e0
 8000b70:	2000073c 	.word	0x2000073c

08000b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8000b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	2000093c 	.word	0x2000093c
 8000ba4:	20000998 	.word	0x20000998

08000ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f103 0208 	add.w	r2, r3, #8
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f103 0208 	add.w	r2, r3, #8
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f103 0208 	add.w	r2, r3, #8
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c60:	d103      	bne.n	8000c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e00c      	b.n	8000c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e002      	b.n	8000c78 <vListInsert+0x2e>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d2f6      	bcs.n	8000c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6892      	ldr	r2, [r2, #8]
 8000cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6852      	ldr	r2, [r2, #4]
 8000cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d103      	bne.n	8000cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1e5a      	subs	r2, r3, #1
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10a      	bne.n	8000d3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d36:	bf00      	nop
 8000d38:	e7fe      	b.n	8000d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000d3a:	f002 f93b 	bl	8002fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	68f9      	ldr	r1, [r7, #12]
 8000d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d4a:	fb01 f303 	mul.w	r3, r1, r3
 8000d4e:	441a      	add	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	441a      	add	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d114      	bne.n	8000dba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01a      	beq.n	8000dce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3310      	adds	r3, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 f915 	bl	8001fcc <xTaskRemoveFromEventList>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d012      	beq.n	8000dce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <xQueueGenericReset+0xcc>)
 8000daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	e009      	b.n	8000dce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3310      	adds	r3, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fef2 	bl	8000ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3324      	adds	r3, #36	; 0x24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff feed 	bl	8000ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000dce:	f002 f921 	bl	8003014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000ed04 	.word	0xe000ed04

08000de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10a      	bne.n	8000e0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df8:	f383 8811 	msr	BASEPRI, r3
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f3bf 8f4f 	dsb	sy
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e06:	bf00      	nop
 8000e08:	e7fe      	b.n	8000e08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10a      	bne.n	8000e26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e22:	bf00      	nop
 8000e24:	e7fe      	b.n	8000e24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <xQueueGenericCreateStatic+0x52>
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <xQueueGenericCreateStatic+0x56>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <xQueueGenericCreateStatic+0x58>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e40:	f383 8811 	msr	BASEPRI, r3
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	623b      	str	r3, [r7, #32]
}
 8000e4e:	bf00      	nop
 8000e50:	e7fe      	b.n	8000e50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <xQueueGenericCreateStatic+0x7e>
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <xQueueGenericCreateStatic+0x82>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <xQueueGenericCreateStatic+0x84>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6c:	f383 8811 	msr	BASEPRI, r3
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	61fb      	str	r3, [r7, #28]
}
 8000e7a:	bf00      	nop
 8000e7c:	e7fe      	b.n	8000e7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000e7e:	2350      	movs	r3, #80	; 0x50
 8000e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b50      	cmp	r3, #80	; 0x50
 8000e86:	d00a      	beq.n	8000e9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8c:	f383 8811 	msr	BASEPRI, r3
 8000e90:	f3bf 8f6f 	isb	sy
 8000e94:	f3bf 8f4f 	dsb	sy
 8000e98:	61bb      	str	r3, [r7, #24]
}
 8000e9a:	bf00      	nop
 8000e9c:	e7fe      	b.n	8000e9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000e9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00d      	beq.n	8000ec6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000eb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 f805 	bl	8000ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d103      	bne.n	8000eec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e002      	b.n	8000ef2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000efe:	2101      	movs	r1, #1
 8000f00:	69b8      	ldr	r0, [r7, #24]
 8000f02:	f7ff ff05 	bl	8000d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <xQueueGenericSend+0x32>
	__asm volatile
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	f383 8811 	msr	BASEPRI, r3
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f46:	bf00      	nop
 8000f48:	e7fe      	b.n	8000f48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <xQueueGenericSend+0x40>
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <xQueueGenericSend+0x44>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <xQueueGenericSend+0x46>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10a      	bne.n	8000f78 <xQueueGenericSend+0x60>
	__asm volatile
 8000f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f66:	f383 8811 	msr	BASEPRI, r3
 8000f6a:	f3bf 8f6f 	isb	sy
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f74:	bf00      	nop
 8000f76:	e7fe      	b.n	8000f76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d103      	bne.n	8000f86 <xQueueGenericSend+0x6e>
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <xQueueGenericSend+0x72>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <xQueueGenericSend+0x74>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10a      	bne.n	8000fa6 <xQueueGenericSend+0x8e>
	__asm volatile
 8000f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	623b      	str	r3, [r7, #32]
}
 8000fa2:	bf00      	nop
 8000fa4:	e7fe      	b.n	8000fa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fa6:	f001 f9cf 	bl	8002348 <xTaskGetSchedulerState>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <xQueueGenericSend+0x9e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <xQueueGenericSend+0xa2>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <xQueueGenericSend+0xa4>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8000fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc4:	f383 8811 	msr	BASEPRI, r3
 8000fc8:	f3bf 8f6f 	isb	sy
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	61fb      	str	r3, [r7, #28]
}
 8000fd2:	bf00      	nop
 8000fd4:	e7fe      	b.n	8000fd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000fd6:	f001 ffed 	bl	8002fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d302      	bcc.n	8000fec <xQueueGenericSend+0xd4>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d129      	bne.n	8001040 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ff2:	f000 fa0b 	bl	800140c <prvCopyDataToQueue>
 8000ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d010      	beq.n	8001022 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001002:	3324      	adds	r3, #36	; 0x24
 8001004:	4618      	mov	r0, r3
 8001006:	f000 ffe1 	bl	8001fcc <xTaskRemoveFromEventList>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <xQueueGenericSend+0x1f8>)
 8001012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	f3bf 8f4f 	dsb	sy
 800101c:	f3bf 8f6f 	isb	sy
 8001020:	e00a      	b.n	8001038 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <xQueueGenericSend+0x1f8>)
 800102a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001038:	f001 ffec 	bl	8003014 <vPortExitCritical>
				return pdPASS;
 800103c:	2301      	movs	r3, #1
 800103e:	e063      	b.n	8001108 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001046:	f001 ffe5 	bl	8003014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800104a:	2300      	movs	r3, #0
 800104c:	e05c      	b.n	8001108 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800104e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f81b 	bl	8002094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800105e:	2301      	movs	r3, #1
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001062:	f001 ffd7 	bl	8003014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001066:	f000 fd7b 	bl	8001b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800106a:	f001 ffa3 	bl	8002fb4 <vPortEnterCritical>
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001074:	b25b      	sxtb	r3, r3
 8001076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800107a:	d103      	bne.n	8001084 <xQueueGenericSend+0x16c>
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001090:	d103      	bne.n	800109a <xQueueGenericSend+0x182>
 8001092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800109a:	f001 ffbb 	bl	8003014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f80a 	bl	80020c0 <xTaskCheckForTimeOut>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d124      	bne.n	80010fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80010b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010b4:	f000 faa2 	bl	80015fc <prvIsQueueFull>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d018      	beq.n	80010f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	3310      	adds	r3, #16
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 ff30 	bl	8001f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80010cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010ce:	f000 fa2d 	bl	800152c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80010d2:	f000 fd53 	bl	8001b7c <xTaskResumeAll>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f af7c 	bne.w	8000fd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <xQueueGenericSend+0x1f8>)
 80010e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	e772      	b.n	8000fd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80010f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010f2:	f000 fa1b 	bl	800152c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010f6:	f000 fd41 	bl	8001b7c <xTaskResumeAll>
 80010fa:	e76c      	b.n	8000fd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80010fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010fe:	f000 fa15 	bl	800152c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001102:	f000 fd3b 	bl	8001b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001108:	4618      	mov	r0, r3
 800110a:	3738      	adds	r7, #56	; 0x38
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	e000ed04 	.word	0xe000ed04

08001114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001130:	f383 8811 	msr	BASEPRI, r3
 8001134:	f3bf 8f6f 	isb	sy
 8001138:	f3bf 8f4f 	dsb	sy
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800113e:	bf00      	nop
 8001140:	e7fe      	b.n	8001140 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <xQueueGenericSendFromISR+0x3c>
 8001148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <xQueueGenericSendFromISR+0x40>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <xQueueGenericSendFromISR+0x42>
 8001154:	2300      	movs	r3, #0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10a      	bne.n	8001170 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115e:	f383 8811 	msr	BASEPRI, r3
 8001162:	f3bf 8f6f 	isb	sy
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800116c:	bf00      	nop
 800116e:	e7fe      	b.n	800116e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d103      	bne.n	800117e <xQueueGenericSendFromISR+0x6a>
 8001176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <xQueueGenericSendFromISR+0x6e>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <xQueueGenericSendFromISR+0x70>
 8001182:	2300      	movs	r3, #0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10a      	bne.n	800119e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	f3bf 8f6f 	isb	sy
 8001194:	f3bf 8f4f 	dsb	sy
 8001198:	623b      	str	r3, [r7, #32]
}
 800119a:	bf00      	nop
 800119c:	e7fe      	b.n	800119c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800119e:	f001 ffeb 	bl	8003178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80011a2:	f3ef 8211 	mrs	r2, BASEPRI
 80011a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	61fa      	str	r2, [r7, #28]
 80011b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80011ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d302      	bcc.n	80011d0 <xQueueGenericSendFromISR+0xbc>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d12f      	bne.n	8001230 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80011d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011e6:	f000 f911 	bl	800140c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80011ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f2:	d112      	bne.n	800121a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d016      	beq.n	800122a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fe:	3324      	adds	r3, #36	; 0x24
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fee3 	bl	8001fcc <xTaskRemoveFromEventList>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e007      	b.n	800122a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800121a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121e:	3301      	adds	r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25a      	sxtb	r2, r3
 8001224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800122a:	2301      	movs	r3, #1
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800122e:	e001      	b.n	8001234 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001230:	2300      	movs	r3, #0
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800123e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001242:	4618      	mov	r0, r3
 8001244:	3740      	adds	r7, #64	; 0x40
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10a      	bne.n	800127c <xQueueReceive+0x30>
	__asm volatile
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	623b      	str	r3, [r7, #32]
}
 8001278:	bf00      	nop
 800127a:	e7fe      	b.n	800127a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <xQueueReceive+0x3e>
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <xQueueReceive+0x42>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <xQueueReceive+0x44>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10a      	bne.n	80012aa <xQueueReceive+0x5e>
	__asm volatile
 8001294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001298:	f383 8811 	msr	BASEPRI, r3
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	f3bf 8f4f 	dsb	sy
 80012a4:	61fb      	str	r3, [r7, #28]
}
 80012a6:	bf00      	nop
 80012a8:	e7fe      	b.n	80012a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012aa:	f001 f84d 	bl	8002348 <xTaskGetSchedulerState>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <xQueueReceive+0x6e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <xQueueReceive+0x72>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <xQueueReceive+0x74>
 80012be:	2300      	movs	r3, #0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <xQueueReceive+0x8e>
	__asm volatile
 80012c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c8:	f383 8811 	msr	BASEPRI, r3
 80012cc:	f3bf 8f6f 	isb	sy
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	61bb      	str	r3, [r7, #24]
}
 80012d6:	bf00      	nop
 80012d8:	e7fe      	b.n	80012d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80012da:	f001 fe6b 	bl	8002fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01f      	beq.n	800132a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ee:	f000 f8f7 	bl	80014e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00f      	beq.n	8001322 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	3310      	adds	r3, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fe60 	bl	8001fcc <xTaskRemoveFromEventList>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <xQueueReceive+0x1bc>)
 8001314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f3bf 8f4f 	dsb	sy
 800131e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001322:	f001 fe77 	bl	8003014 <vPortExitCritical>
				return pdPASS;
 8001326:	2301      	movs	r3, #1
 8001328:	e069      	b.n	80013fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d103      	bne.n	8001338 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001330:	f001 fe70 	bl	8003014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001334:	2300      	movs	r3, #0
 8001336:	e062      	b.n	80013fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fea6 	bl	8002094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800134c:	f001 fe62 	bl	8003014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001350:	f000 fc06 	bl	8001b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001354:	f001 fe2e 	bl	8002fb4 <vPortEnterCritical>
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001364:	d103      	bne.n	800136e <xQueueReceive+0x122>
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800137a:	d103      	bne.n	8001384 <xQueueReceive+0x138>
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001384:	f001 fe46 	bl	8003014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001388:	1d3a      	adds	r2, r7, #4
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fe95 	bl	80020c0 <xTaskCheckForTimeOut>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800139c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800139e:	f000 f917 	bl	80015d0 <prvIsQueueEmpty>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d017      	beq.n	80013d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	3324      	adds	r3, #36	; 0x24
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fdbb 	bl	8001f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80013b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013b8:	f000 f8b8 	bl	800152c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013bc:	f000 fbde 	bl	8001b7c <xTaskResumeAll>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d189      	bne.n	80012da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <xQueueReceive+0x1bc>)
 80013c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	f3bf 8f4f 	dsb	sy
 80013d2:	f3bf 8f6f 	isb	sy
 80013d6:	e780      	b.n	80012da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80013d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013da:	f000 f8a7 	bl	800152c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013de:	f000 fbcd 	bl	8001b7c <xTaskResumeAll>
 80013e2:	e77a      	b.n	80012da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80013e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013e6:	f000 f8a1 	bl	800152c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013ea:	f000 fbc7 	bl	8001b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f0:	f000 f8ee 	bl	80015d0 <prvIsQueueEmpty>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f43f af6f 	beq.w	80012da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80013fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000ed04 	.word	0xe000ed04

0800140c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001420:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d14d      	bne.n	80014ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ffa4 	bl	8002384 <xTaskPriorityDisinherit>
 800143c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e043      	b.n	80014ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d119      	bne.n	8001480 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6858      	ldr	r0, [r3, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	461a      	mov	r2, r3
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	f006 fd18 	bl	8007e8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	441a      	add	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	d32b      	bcc.n	80014ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	e026      	b.n	80014ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68d8      	ldr	r0, [r3, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	461a      	mov	r2, r3
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	f006 fcfe 	bl	8007e8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	425b      	negs	r3, r3
 800149a:	441a      	add	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	425b      	negs	r3, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d105      	bne.n	80014ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80014d6:	697b      	ldr	r3, [r7, #20]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d018      	beq.n	8001524 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	441a      	add	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d303      	bcc.n	8001514 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	461a      	mov	r2, r3
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f006 fcb4 	bl	8007e8c <memcpy>
	}
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001534:	f001 fd3e 	bl	8002fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800153e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001540:	e011      	b.n	8001566 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	2b00      	cmp	r3, #0
 8001548:	d012      	beq.n	8001570 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3324      	adds	r3, #36	; 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fd3c 	bl	8001fcc <xTaskRemoveFromEventList>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800155a:	f000 fe13 	bl	8002184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3b01      	subs	r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dce9      	bgt.n	8001542 <prvUnlockQueue+0x16>
 800156e:	e000      	b.n	8001572 <prvUnlockQueue+0x46>
					break;
 8001570:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	22ff      	movs	r2, #255	; 0xff
 8001576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800157a:	f001 fd4b 	bl	8003014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800157e:	f001 fd19 	bl	8002fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001588:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800158a:	e011      	b.n	80015b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d012      	beq.n	80015ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3310      	adds	r3, #16
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fd17 	bl	8001fcc <xTaskRemoveFromEventList>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80015a4:	f000 fdee 	bl	8002184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dce9      	bgt.n	800158c <prvUnlockQueue+0x60>
 80015b8:	e000      	b.n	80015bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80015ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80015c4:	f001 fd26 	bl	8003014 <vPortExitCritical>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015d8:	f001 fcec 	bl	8002fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e001      	b.n	80015ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015ee:	f001 fd11 	bl	8003014 <vPortExitCritical>

	return xReturn;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001604:	f001 fcd6 	bl	8002fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	429a      	cmp	r2, r3
 8001612:	d102      	bne.n	800161a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001614:	2301      	movs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e001      	b.n	800161e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800161e:	f001 fcf9 	bl	8003014 <vPortExitCritical>

	return xReturn;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e014      	b.n	8001666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <vQueueAddToRegistry+0x50>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10b      	bne.n	8001660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <vQueueAddToRegistry+0x50>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <vQueueAddToRegistry+0x50>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800165e:	e006      	b.n	800166e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b07      	cmp	r3, #7
 800166a:	d9e7      	bls.n	800163c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000d98 	.word	0x20000d98

08001680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001690:	f001 fc90 	bl	8002fb4 <vPortEnterCritical>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800169a:	b25b      	sxtb	r3, r3
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a0:	d103      	bne.n	80016aa <vQueueWaitForMessageRestricted+0x2a>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b6:	d103      	bne.n	80016c0 <vQueueWaitForMessageRestricted+0x40>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016c0:	f001 fca8 	bl	8003014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3324      	adds	r3, #36	; 0x24
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fc4d 	bl	8001f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff26 	bl	800152c <prvUnlockQueue>
	}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08e      	sub	sp, #56	; 0x38
 80016ec:	af04      	add	r7, sp, #16
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10a      	bne.n	8001712 <xTaskCreateStatic+0x2a>
	__asm volatile
 80016fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001700:	f383 8811 	msr	BASEPRI, r3
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	623b      	str	r3, [r7, #32]
}
 800170e:	bf00      	nop
 8001710:	e7fe      	b.n	8001710 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10a      	bne.n	800172e <xTaskCreateStatic+0x46>
	__asm volatile
 8001718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171c:	f383 8811 	msr	BASEPRI, r3
 8001720:	f3bf 8f6f 	isb	sy
 8001724:	f3bf 8f4f 	dsb	sy
 8001728:	61fb      	str	r3, [r7, #28]
}
 800172a:	bf00      	nop
 800172c:	e7fe      	b.n	800172c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800172e:	235c      	movs	r3, #92	; 0x5c
 8001730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b5c      	cmp	r3, #92	; 0x5c
 8001736:	d00a      	beq.n	800174e <xTaskCreateStatic+0x66>
	__asm volatile
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	61bb      	str	r3, [r7, #24]
}
 800174a:	bf00      	nop
 800174c:	e7fe      	b.n	800174c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800174e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01e      	beq.n	8001794 <xTaskCreateStatic+0xac>
 8001756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01b      	beq.n	8001794 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001764:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800176e:	2300      	movs	r3, #0
 8001770:	9303      	str	r3, [sp, #12]
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f850 	bl	800182c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800178c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800178e:	f000 f8dd 	bl	800194c <prvAddNewTaskToReadyList>
 8001792:	e001      	b.n	8001798 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001798:	697b      	ldr	r3, [r7, #20]
	}
 800179a:	4618      	mov	r0, r3
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b08c      	sub	sp, #48	; 0x30
 80017a6:	af04      	add	r7, sp, #16
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fd1e 	bl	80031f8 <pvPortMalloc>
 80017bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80017c4:	205c      	movs	r0, #92	; 0x5c
 80017c6:	f001 fd17 	bl	80031f8 <pvPortMalloc>
 80017ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	e005      	b.n	80017e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f001 fdd8 	bl	8003390 <vPortFree>
 80017e0:	e001      	b.n	80017e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017f4:	88fa      	ldrh	r2, [r7, #6]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9303      	str	r3, [sp, #12]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f80e 	bl	800182c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001810:	69f8      	ldr	r0, [r7, #28]
 8001812:	f000 f89b 	bl	800194c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e002      	b.n	8001822 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001822:	69bb      	ldr	r3, [r7, #24]
	}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	21a5      	movs	r1, #165	; 0xa5
 8001846:	f006 fb2f 	bl	8007ea8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001854:	3b01      	subs	r3, #1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f023 0307 	bic.w	r3, r3, #7
 8001862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <prvInitialiseNewTask+0x58>
	__asm volatile
 800186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	617b      	str	r3, [r7, #20]
}
 8001880:	bf00      	nop
 8001882:	e7fe      	b.n	8001882 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01f      	beq.n	80018ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e012      	b.n	80018b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	7819      	ldrb	r1, [r3, #0]
 8001898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	3334      	adds	r3, #52	; 0x34
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d9e9      	bls.n	8001890 <prvInitialiseNewTask+0x64>
 80018bc:	e000      	b.n	80018c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80018be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018c8:	e003      	b.n	80018d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	2b37      	cmp	r3, #55	; 0x37
 80018d6:	d901      	bls.n	80018dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018d8:	2337      	movs	r3, #55	; 0x37
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80018e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ea:	2200      	movs	r2, #0
 80018ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f0:	3304      	adds	r3, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f978 	bl	8000be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	3318      	adds	r3, #24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f973 	bl	8000be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	2200      	movs	r2, #0
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	f001 fa16 	bl	8002d5c <pxPortInitialiseStack>
 8001930:	4602      	mov	r2, r0
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001954:	f001 fb2e 	bl	8002fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <prvAddNewTaskToReadyList+0xc4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <prvAddNewTaskToReadyList+0xc4>)
 8001960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <prvAddNewTaskToReadyList+0xc8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800196a:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <prvAddNewTaskToReadyList+0xc8>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <prvAddNewTaskToReadyList+0xc4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d110      	bne.n	800199a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001978:	f000 fc28 	bl	80021cc <prvInitialiseTaskLists>
 800197c:	e00d      	b.n	800199a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <prvAddNewTaskToReadyList+0xcc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <prvAddNewTaskToReadyList+0xc8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	429a      	cmp	r2, r3
 8001992:	d802      	bhi.n	800199a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <prvAddNewTaskToReadyList+0xc8>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <prvAddNewTaskToReadyList+0xd0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <prvAddNewTaskToReadyList+0xd0>)
 80019a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <prvAddNewTaskToReadyList+0xd0>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <prvAddNewTaskToReadyList+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d903      	bls.n	80019c0 <prvAddNewTaskToReadyList+0x74>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <prvAddNewTaskToReadyList+0xd4>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <prvAddNewTaskToReadyList+0xd8>)
 80019ce:	441a      	add	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff f913 	bl	8000c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80019dc:	f001 fb1a 	bl	8003014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <prvAddNewTaskToReadyList+0xcc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <prvAddNewTaskToReadyList+0xc8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d207      	bcs.n	8001a06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <prvAddNewTaskToReadyList+0xdc>)
 80019f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200012ac 	.word	0x200012ac
 8001a14:	20000dd8 	.word	0x20000dd8
 8001a18:	200012b8 	.word	0x200012b8
 8001a1c:	200012c8 	.word	0x200012c8
 8001a20:	200012b4 	.word	0x200012b4
 8001a24:	20000ddc 	.word	0x20000ddc
 8001a28:	e000ed04 	.word	0xe000ed04

08001a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d017      	beq.n	8001a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <vTaskDelay+0x60>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <vTaskDelay+0x30>
	__asm volatile
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	60bb      	str	r3, [r7, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	e7fe      	b.n	8001a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001a5c:	f000 f880 	bl	8001b60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fdd8 	bl	8002618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001a68:	f000 f888 	bl	8001b7c <xTaskResumeAll>
 8001a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <vTaskDelay+0x64>)
 8001a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f3bf 8f4f 	dsb	sy
 8001a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200012d4 	.word	0x200012d4
 8001a90:	e000ed04 	.word	0xe000ed04

08001a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001aa2:	463a      	mov	r2, r7
 8001aa4:	1d39      	adds	r1, r7, #4
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f848 	bl	8000b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	9202      	str	r2, [sp, #8]
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <vTaskStartScheduler+0xb4>)
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <vTaskStartScheduler+0xb8>)
 8001ac6:	f7ff fe0f 	bl	80016e8 <xTaskCreateStatic>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <vTaskStartScheduler+0xbc>)
 8001ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <vTaskStartScheduler+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e001      	b.n	8001ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d102      	bne.n	8001aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001ae8:	f000 fdea 	bl	80026c0 <xTimerCreateTimerTask>
 8001aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d116      	bne.n	8001b22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	613b      	str	r3, [r7, #16]
}
 8001b06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <vTaskStartScheduler+0xc0>)
 8001b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <vTaskStartScheduler+0xc4>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <vTaskStartScheduler+0xc8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b1c:	f001 f9a8 	bl	8002e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b20:	e00e      	b.n	8001b40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b28:	d10a      	bne.n	8001b40 <vTaskStartScheduler+0xac>
	__asm volatile
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	60fb      	str	r3, [r7, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	e7fe      	b.n	8001b3e <vTaskStartScheduler+0xaa>
}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08008f7c 	.word	0x08008f7c
 8001b4c:	0800219d 	.word	0x0800219d
 8001b50:	200012d0 	.word	0x200012d0
 8001b54:	200012cc 	.word	0x200012cc
 8001b58:	200012b8 	.word	0x200012b8
 8001b5c:	200012b0 	.word	0x200012b0

08001b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <vTaskSuspendAll+0x18>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <vTaskSuspendAll+0x18>)
 8001b6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	200012d4 	.word	0x200012d4

08001b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <xTaskResumeAll+0x118>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10a      	bne.n	8001ba8 <xTaskResumeAll+0x2c>
	__asm volatile
 8001b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b96:	f383 8811 	msr	BASEPRI, r3
 8001b9a:	f3bf 8f6f 	isb	sy
 8001b9e:	f3bf 8f4f 	dsb	sy
 8001ba2:	603b      	str	r3, [r7, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	e7fe      	b.n	8001ba6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ba8:	f001 fa04 	bl	8002fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001bac:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <xTaskResumeAll+0x118>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <xTaskResumeAll+0x118>)
 8001bb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <xTaskResumeAll+0x118>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d162      	bne.n	8001c84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <xTaskResumeAll+0x11c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d05e      	beq.n	8001c84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bc6:	e02f      	b.n	8001c28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <xTaskResumeAll+0x120>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f871 	bl	8000cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f86c 	bl	8000cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <xTaskResumeAll+0x124>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d903      	bls.n	8001bf8 <xTaskResumeAll+0x7c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <xTaskResumeAll+0x124>)
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <xTaskResumeAll+0x128>)
 8001c06:	441a      	add	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7fe fff7 	bl	8000c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <xTaskResumeAll+0x12c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <xTaskResumeAll+0x130>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <xTaskResumeAll+0x120>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1cb      	bne.n	8001bc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c36:	f000 fb67 	bl	8002308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <xTaskResumeAll+0x134>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c46:	f000 f859 	bl	8001cfc <xTaskIncrementTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <xTaskResumeAll+0x130>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f1      	bne.n	8001c46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <xTaskResumeAll+0x134>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <xTaskResumeAll+0x130>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <xTaskResumeAll+0x138>)
 8001c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c84:	f001 f9c6 	bl	8003014 <vPortExitCritical>

	return xAlreadyYielded;
 8001c88:	68bb      	ldr	r3, [r7, #8]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200012d4 	.word	0x200012d4
 8001c98:	200012ac 	.word	0x200012ac
 8001c9c:	2000126c 	.word	0x2000126c
 8001ca0:	200012b4 	.word	0x200012b4
 8001ca4:	20000ddc 	.word	0x20000ddc
 8001ca8:	20000dd8 	.word	0x20000dd8
 8001cac:	200012c0 	.word	0x200012c0
 8001cb0:	200012bc 	.word	0x200012bc
 8001cb4:	e000ed04 	.word	0xe000ed04

08001cb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <xTaskGetTickCount+0x1c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200012b0 	.word	0x200012b0

08001cd8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001cde:	f001 fa4b 	bl	8003178 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <xTaskGetTickCountFromISR+0x20>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001cec:	683b      	ldr	r3, [r7, #0]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200012b0 	.word	0x200012b0

08001cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d06:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <xTaskIncrementTick+0x148>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 808f 	bne.w	8001e2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <xTaskIncrementTick+0x14c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d18:	4a4b      	ldr	r2, [pc, #300]	; (8001e48 <xTaskIncrementTick+0x14c>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d120      	bne.n	8001d66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d24:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <xTaskIncrementTick+0x150>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <xTaskIncrementTick+0x48>
	__asm volatile
 8001d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	603b      	str	r3, [r7, #0]
}
 8001d40:	bf00      	nop
 8001d42:	e7fe      	b.n	8001d42 <xTaskIncrementTick+0x46>
 8001d44:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <xTaskIncrementTick+0x150>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <xTaskIncrementTick+0x154>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <xTaskIncrementTick+0x150>)
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4a3f      	ldr	r2, [pc, #252]	; (8001e50 <xTaskIncrementTick+0x154>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <xTaskIncrementTick+0x158>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <xTaskIncrementTick+0x158>)
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	f000 fad1 	bl	8002308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <xTaskIncrementTick+0x15c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d349      	bcc.n	8001e04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <xTaskIncrementTick+0x150>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d104      	bne.n	8001d84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <xTaskIncrementTick+0x15c>)
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d80:	601a      	str	r2, [r3, #0]
					break;
 8001d82:	e03f      	b.n	8001e04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <xTaskIncrementTick+0x150>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d203      	bcs.n	8001da4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <xTaskIncrementTick+0x15c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001da2:	e02f      	b.n	8001e04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff87 	bl	8000cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3318      	adds	r3, #24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ff7e 	bl	8000cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <xTaskIncrementTick+0x160>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d903      	bls.n	8001dd4 <xTaskIncrementTick+0xd8>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <xTaskIncrementTick+0x160>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <xTaskIncrementTick+0x164>)
 8001de2:	441a      	add	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3304      	adds	r3, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7fe ff09 	bl	8000c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <xTaskIncrementTick+0x168>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3b8      	bcc.n	8001d70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e02:	e7b5      	b.n	8001d70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <xTaskIncrementTick+0x168>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	4915      	ldr	r1, [pc, #84]	; (8001e60 <xTaskIncrementTick+0x164>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d901      	bls.n	8001e20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <xTaskIncrementTick+0x16c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e004      	b.n	8001e38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <xTaskIncrementTick+0x170>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <xTaskIncrementTick+0x170>)
 8001e36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001e38:	697b      	ldr	r3, [r7, #20]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200012d4 	.word	0x200012d4
 8001e48:	200012b0 	.word	0x200012b0
 8001e4c:	20001264 	.word	0x20001264
 8001e50:	20001268 	.word	0x20001268
 8001e54:	200012c4 	.word	0x200012c4
 8001e58:	200012cc 	.word	0x200012cc
 8001e5c:	200012b4 	.word	0x200012b4
 8001e60:	20000ddc 	.word	0x20000ddc
 8001e64:	20000dd8 	.word	0x20000dd8
 8001e68:	200012c0 	.word	0x200012c0
 8001e6c:	200012bc 	.word	0x200012bc

08001e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <vTaskSwitchContext+0xa8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <vTaskSwitchContext+0xac>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e84:	e041      	b.n	8001f0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <vTaskSwitchContext+0xac>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <vTaskSwitchContext+0xb0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e010      	b.n	8001eb6 <vTaskSwitchContext+0x46>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	607b      	str	r3, [r7, #4]
}
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <vTaskSwitchContext+0x3e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <vTaskSwitchContext+0xb4>)
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0e4      	beq.n	8001e94 <vTaskSwitchContext+0x24>
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <vTaskSwitchContext+0xb4>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3308      	adds	r3, #8
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d104      	bne.n	8001efa <vTaskSwitchContext+0x8a>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <vTaskSwitchContext+0xb8>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <vTaskSwitchContext+0xb0>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6013      	str	r3, [r2, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200012d4 	.word	0x200012d4
 8001f1c:	200012c0 	.word	0x200012c0
 8001f20:	200012b4 	.word	0x200012b4
 8001f24:	20000ddc 	.word	0x20000ddc
 8001f28:	20000dd8 	.word	0x20000dd8

08001f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	60fb      	str	r3, [r7, #12]
}
 8001f4e:	bf00      	nop
 8001f50:	e7fe      	b.n	8001f50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <vTaskPlaceOnEventList+0x44>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3318      	adds	r3, #24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fe75 	bl	8000c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f60:	2101      	movs	r1, #1
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f000 fb58 	bl	8002618 <prvAddCurrentTaskToDelayedList>
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000dd8 	.word	0x20000dd8

08001f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	617b      	str	r3, [r7, #20]
}
 8001f98:	bf00      	nop
 8001f9a:	e7fe      	b.n	8001f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7fe fe2c 	bl	8000c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f000 fb2d 	bl	8002618 <prvAddCurrentTaskToDelayedList>
	}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000dd8 	.word	0x20000dd8

08001fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	60fb      	str	r3, [r7, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	e7fe      	b.n	8001ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe5d 	bl	8000cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <xTaskRemoveFromEventList+0xb0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11d      	bne.n	8002046 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3304      	adds	r3, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe54 	bl	8000cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <xTaskRemoveFromEventList+0xb4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d903      	bls.n	8002028 <xTaskRemoveFromEventList+0x5c>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <xTaskRemoveFromEventList+0xb4>)
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <xTaskRemoveFromEventList+0xb8>)
 8002036:	441a      	add	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7fe fddf 	bl	8000c02 <vListInsertEnd>
 8002044:	e005      	b.n	8002052 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3318      	adds	r3, #24
 800204a:	4619      	mov	r1, r3
 800204c:	480e      	ldr	r0, [pc, #56]	; (8002088 <xTaskRemoveFromEventList+0xbc>)
 800204e:	f7fe fdd8 	bl	8000c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <xTaskRemoveFromEventList+0xc0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	429a      	cmp	r2, r3
 800205e:	d905      	bls.n	800206c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002060:	2301      	movs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <xTaskRemoveFromEventList+0xc4>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e001      	b.n	8002070 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002070:	697b      	ldr	r3, [r7, #20]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200012d4 	.word	0x200012d4
 8002080:	200012b4 	.word	0x200012b4
 8002084:	20000ddc 	.word	0x20000ddc
 8002088:	2000126c 	.word	0x2000126c
 800208c:	20000dd8 	.word	0x20000dd8
 8002090:	200012c0 	.word	0x200012c0

08002094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <vTaskInternalSetTimeOutState+0x24>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <vTaskInternalSetTimeOutState+0x28>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	605a      	str	r2, [r3, #4]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200012c4 	.word	0x200012c4
 80020bc:	200012b0 	.word	0x200012b0

080020c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	613b      	str	r3, [r7, #16]
}
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	60fb      	str	r3, [r7, #12]
}
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002102:	f000 ff57 	bl	8002fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <xTaskCheckForTimeOut+0xbc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211e:	d102      	bne.n	8002126 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e023      	b.n	800216e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <xTaskCheckForTimeOut+0xc0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d007      	beq.n	8002142 <xTaskCheckForTimeOut+0x82>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800213c:	2301      	movs	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	e015      	b.n	800216e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	d20b      	bcs.n	8002164 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff9b 	bl	8002094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e004      	b.n	800216e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800216a:	2301      	movs	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800216e:	f000 ff51 	bl	8003014 <vPortExitCritical>

	return xReturn;
 8002172:	69fb      	ldr	r3, [r7, #28]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200012b0 	.word	0x200012b0
 8002180:	200012c4 	.word	0x200012c4

08002184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <vTaskMissedYield+0x14>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	200012c0 	.word	0x200012c0

0800219c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021a4:	f000 f852 	bl	800224c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <prvIdleTask+0x28>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d9f9      	bls.n	80021a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <prvIdleTask+0x2c>)
 80021b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80021c0:	e7f0      	b.n	80021a4 <prvIdleTask+0x8>
 80021c2:	bf00      	nop
 80021c4:	20000ddc 	.word	0x20000ddc
 80021c8:	e000ed04 	.word	0xe000ed04

080021cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	e00c      	b.n	80021f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <prvInitialiseTaskLists+0x60>)
 80021e4:	4413      	add	r3, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fcde 	bl	8000ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b37      	cmp	r3, #55	; 0x37
 80021f6:	d9ef      	bls.n	80021d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <prvInitialiseTaskLists+0x64>)
 80021fa:	f7fe fcd5 	bl	8000ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <prvInitialiseTaskLists+0x68>)
 8002200:	f7fe fcd2 	bl	8000ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <prvInitialiseTaskLists+0x6c>)
 8002206:	f7fe fccf 	bl	8000ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <prvInitialiseTaskLists+0x70>)
 800220c:	f7fe fccc 	bl	8000ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <prvInitialiseTaskLists+0x74>)
 8002212:	f7fe fcc9 	bl	8000ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <prvInitialiseTaskLists+0x78>)
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <prvInitialiseTaskLists+0x64>)
 800221a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <prvInitialiseTaskLists+0x7c>)
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <prvInitialiseTaskLists+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000ddc 	.word	0x20000ddc
 8002230:	2000123c 	.word	0x2000123c
 8002234:	20001250 	.word	0x20001250
 8002238:	2000126c 	.word	0x2000126c
 800223c:	20001280 	.word	0x20001280
 8002240:	20001298 	.word	0x20001298
 8002244:	20001264 	.word	0x20001264
 8002248:	20001268 	.word	0x20001268

0800224c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002252:	e019      	b.n	8002288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002254:	f000 feae 	bl	8002fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <prvCheckTasksWaitingTermination+0x50>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fd29 	bl	8000cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <prvCheckTasksWaitingTermination+0x54>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <prvCheckTasksWaitingTermination+0x54>)
 8002272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <prvCheckTasksWaitingTermination+0x58>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3b01      	subs	r3, #1
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <prvCheckTasksWaitingTermination+0x58>)
 800227c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800227e:	f000 fec9 	bl	8003014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f810 	bl	80022a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <prvCheckTasksWaitingTermination+0x58>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e1      	bne.n	8002254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20001280 	.word	0x20001280
 80022a0:	200012ac 	.word	0x200012ac
 80022a4:	20001294 	.word	0x20001294

080022a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f866 	bl	8003390 <vPortFree>
				vPortFree( pxTCB );
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f001 f863 	bl	8003390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022ca:	e018      	b.n	80022fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d103      	bne.n	80022de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 f85a 	bl	8003390 <vPortFree>
	}
 80022dc:	e00f      	b.n	80022fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d00a      	beq.n	80022fe <prvDeleteTCB+0x56>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	60fb      	str	r3, [r7, #12]
}
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <prvDeleteTCB+0x54>
	}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <prvResetNextTaskUnblockTime+0x38>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <prvResetNextTaskUnblockTime+0x3c>)
 800231a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800231e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002320:	e008      	b.n	8002334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <prvResetNextTaskUnblockTime+0x38>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <prvResetNextTaskUnblockTime+0x3c>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20001264 	.word	0x20001264
 8002344:	200012cc 	.word	0x200012cc

08002348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <xTaskGetSchedulerState+0x34>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002356:	2301      	movs	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	e008      	b.n	800236e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <xTaskGetSchedulerState+0x38>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002364:	2302      	movs	r3, #2
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	e001      	b.n	800236e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800236e:	687b      	ldr	r3, [r7, #4]
	}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	200012b8 	.word	0x200012b8
 8002380:	200012d4 	.word	0x200012d4

08002384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d056      	beq.n	8002448 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800239a:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <xTaskPriorityDisinherit+0xd0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d00a      	beq.n	80023ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	60fb      	str	r3, [r7, #12]
}
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	60bb      	str	r3, [r7, #8]
}
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d02c      	beq.n	8002448 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d128      	bne.n	8002448 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fc5e 	bl	8000cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <xTaskPriorityDisinherit+0xd4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d903      	bls.n	8002428 <xTaskPriorityDisinherit+0xa4>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <xTaskPriorityDisinherit+0xd4>)
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4a09      	ldr	r2, [pc, #36]	; (800245c <xTaskPriorityDisinherit+0xd8>)
 8002436:	441a      	add	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f7fe fbdf 	bl	8000c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002448:	697b      	ldr	r3, [r7, #20]
	}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000dd8 	.word	0x20000dd8
 8002458:	200012b4 	.word	0x200012b4
 800245c:	20000ddc 	.word	0x20000ddc

08002460 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002470:	2301      	movs	r3, #1
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800248c:	bf00      	nop
 800248e:	e7fe      	b.n	800248e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002490:	f000 fe72 	bl	8003178 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002498:	f3ef 8211 	mrs	r2, BASEPRI
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	623a      	str	r2, [r7, #32]
 80024ae:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80024b0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d828      	bhi.n	800252c <xTaskGenericNotifyFromISR+0xcc>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <xTaskGenericNotifyFromISR+0x80>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	0800254d 	.word	0x0800254d
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002503 	.word	0x08002503
 80024ec:	0800250f 	.word	0x0800250f
 80024f0:	08002517 	.word	0x08002517
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002500:	e027      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800250c:	e021      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002514:	e01d      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800251a:	2b02      	cmp	r3, #2
 800251c:	d003      	beq.n	8002526 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002524:	e015      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800252a:	e012      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002534:	d00c      	beq.n	8002550 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61bb      	str	r3, [r7, #24]
}
 8002548:	bf00      	nop
 800254a:	e7fe      	b.n	800254a <xTaskGenericNotifyFromISR+0xea>
					break;
 800254c:	bf00      	nop
 800254e:	e000      	b.n	8002552 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002550:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002556:	2b01      	cmp	r3, #1
 8002558:	d146      	bne.n	80025e8 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	617b      	str	r3, [r7, #20]
}
 8002574:	bf00      	nop
 8002576:	e7fe      	b.n	8002576 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <xTaskGenericNotifyFromISR+0x1a0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11d      	bne.n	80025bc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	3304      	adds	r3, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fb99 	bl	8000cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <xTaskGenericNotifyFromISR+0x1a4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d903      	bls.n	800259e <xTaskGenericNotifyFromISR+0x13e>
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <xTaskGenericNotifyFromISR+0x1a4>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <xTaskGenericNotifyFromISR+0x1a8>)
 80025ac:	441a      	add	r2, r3
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	3304      	adds	r3, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fe fb24 	bl	8000c02 <vListInsertEnd>
 80025ba:	e005      	b.n	80025c8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	3318      	adds	r3, #24
 80025c0:	4619      	mov	r1, r3
 80025c2:	4812      	ldr	r0, [pc, #72]	; (800260c <xTaskGenericNotifyFromISR+0x1ac>)
 80025c4:	f7fe fb1d 	bl	8000c02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <xTaskGenericNotifyFromISR+0x1b0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d908      	bls.n	80025e8 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80025d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80025dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <xTaskGenericNotifyFromISR+0x1b4>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f383 8811 	msr	BASEPRI, r3
}
 80025f2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3738      	adds	r7, #56	; 0x38
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200012d4 	.word	0x200012d4
 8002604:	200012b4 	.word	0x200012b4
 8002608:	20000ddc 	.word	0x20000ddc
 800260c:	2000126c 	.word	0x2000126c
 8002610:	20000dd8 	.word	0x20000dd8
 8002614:	200012c0 	.word	0x200012c0

08002618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002628:	4b20      	ldr	r3, [pc, #128]	; (80026ac <prvAddCurrentTaskToDelayedList+0x94>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3304      	adds	r3, #4
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fb44 	bl	8000cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263a:	d10a      	bne.n	8002652 <prvAddCurrentTaskToDelayedList+0x3a>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <prvAddCurrentTaskToDelayedList+0x94>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4819      	ldr	r0, [pc, #100]	; (80026b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800264c:	f7fe fad9 	bl	8000c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002650:	e026      	b.n	80026a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <prvAddCurrentTaskToDelayedList+0x94>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	429a      	cmp	r2, r3
 8002668:	d209      	bcs.n	800267e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <prvAddCurrentTaskToDelayedList+0x94>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7fe fae7 	bl	8000c4a <vListInsert>
}
 800267c:	e010      	b.n	80026a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <prvAddCurrentTaskToDelayedList+0x94>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f7fe fadd 	bl	8000c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d202      	bcs.n	80026a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200012b0 	.word	0x200012b0
 80026ac:	20000dd8 	.word	0x20000dd8
 80026b0:	20001298 	.word	0x20001298
 80026b4:	20001268 	.word	0x20001268
 80026b8:	20001264 	.word	0x20001264
 80026bc:	200012cc 	.word	0x200012cc

080026c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80026ca:	f000 fb07 	bl	8002cdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <xTimerCreateTimerTask+0x80>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d021      	beq.n	800271a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026de:	1d3a      	adds	r2, r7, #4
 80026e0:	f107 0108 	add.w	r1, r7, #8
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fa43 	bl	8000b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	9202      	str	r2, [sp, #8]
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2302      	movs	r3, #2
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	460a      	mov	r2, r1
 8002700:	4910      	ldr	r1, [pc, #64]	; (8002744 <xTimerCreateTimerTask+0x84>)
 8002702:	4811      	ldr	r0, [pc, #68]	; (8002748 <xTimerCreateTimerTask+0x88>)
 8002704:	f7fe fff0 	bl	80016e8 <xTaskCreateStatic>
 8002708:	4603      	mov	r3, r0
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <xTimerCreateTimerTask+0x8c>)
 800270c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <xTimerCreateTimerTask+0x8c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002716:	2301      	movs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	613b      	str	r3, [r7, #16]
}
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002736:	697b      	ldr	r3, [r7, #20]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20001308 	.word	0x20001308
 8002744:	08008f84 	.word	0x08008f84
 8002748:	08002885 	.word	0x08002885
 800274c:	2000130c 	.word	0x2000130c

08002750 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	623b      	str	r3, [r7, #32]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <xTimerGenericCommand+0x98>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02a      	beq.n	80027dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	dc18      	bgt.n	80027ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002798:	f7ff fdd6 	bl	8002348 <xTaskGetSchedulerState>
 800279c:	4603      	mov	r3, r0
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d109      	bne.n	80027b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <xTimerGenericCommand+0x98>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f107 0110 	add.w	r1, r7, #16
 80027aa:	2300      	movs	r3, #0
 80027ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ae:	f7fe fbb3 	bl	8000f18 <xQueueGenericSend>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24
 80027b4:	e012      	b.n	80027dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <xTimerGenericCommand+0x98>)
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	f107 0110 	add.w	r1, r7, #16
 80027be:	2300      	movs	r3, #0
 80027c0:	2200      	movs	r2, #0
 80027c2:	f7fe fba9 	bl	8000f18 <xQueueGenericSend>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24
 80027c8:	e008      	b.n	80027dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <xTimerGenericCommand+0x98>)
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	f107 0110 	add.w	r1, r7, #16
 80027d2:	2300      	movs	r3, #0
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	f7fe fc9d 	bl	8001114 <xQueueGenericSendFromISR>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20001308 	.word	0x20001308

080027ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <prvProcessExpiredTimer+0x94>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3304      	adds	r3, #4
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fa59 	bl	8000cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d022      	beq.n	800285e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	18d1      	adds	r1, r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6978      	ldr	r0, [r7, #20]
 8002826:	f000 f8d1 	bl	80029cc <prvInsertTimerInActiveList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01f      	beq.n	8002870 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	2100      	movs	r1, #0
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff88 	bl	8002750 <xTimerGenericCommand>
 8002840:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d113      	bne.n	8002870 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	60fb      	str	r3, [r7, #12]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	4798      	blx	r3
}
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20001300 	.word	0x20001300

08002884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800288c:	f107 0308 	add.w	r3, r7, #8
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f857 	bl	8002944 <prvGetNextExpireTime>
 8002896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4619      	mov	r1, r3
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f803 	bl	80028a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80028a2:	f000 f8d5 	bl	8002a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028a6:	e7f1      	b.n	800288c <prvTimerTask+0x8>

080028a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80028b2:	f7ff f955 	bl	8001b60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f866 	bl	800298c <prvSampleTimeNow>
 80028c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d130      	bne.n	800292a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <prvProcessTimerOrBlockTask+0x3c>
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d806      	bhi.n	80028e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80028d6:	f7ff f951 	bl	8001b7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff85 	bl	80027ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80028e2:	e024      	b.n	800292e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <prvProcessTimerOrBlockTask+0x90>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <prvProcessTimerOrBlockTask+0x50>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <prvProcessTimerOrBlockTask+0x52>
 80028f8:	2300      	movs	r3, #0
 80028fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <prvProcessTimerOrBlockTask+0x94>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe feb9 	bl	8001680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800290e:	f7ff f935 	bl	8001b7c <xTaskResumeAll>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <prvProcessTimerOrBlockTask+0x98>)
 800291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	f3bf 8f6f 	isb	sy
}
 8002928:	e001      	b.n	800292e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800292a:	f7ff f927 	bl	8001b7c <xTaskResumeAll>
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20001304 	.word	0x20001304
 800293c:	20001308 	.word	0x20001308
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <prvGetNextExpireTime+0x44>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <prvGetNextExpireTime+0x16>
 8002956:	2201      	movs	r2, #1
 8002958:	e000      	b.n	800295c <prvGetNextExpireTime+0x18>
 800295a:	2200      	movs	r2, #0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <prvGetNextExpireTime+0x44>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e001      	b.n	8002978 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20001300 	.word	0x20001300

0800298c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002994:	f7ff f990 	bl	8001cb8 <xTaskGetTickCount>
 8002998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <prvSampleTimeNow+0x3c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d205      	bcs.n	80029b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80029a4:	f000 f936 	bl	8002c14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e002      	b.n	80029b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <prvSampleTimeNow+0x3c>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20001310 	.word	0x20001310

080029cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d812      	bhi.n	8002a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e01b      	b.n	8002a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <prvInsertTimerInActiveList+0x7c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f7fe f91a 	bl	8000c4a <vListInsert>
 8002a16:	e012      	b.n	8002a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d206      	bcs.n	8002a2e <prvInsertTimerInActiveList+0x62>
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e007      	b.n	8002a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <prvInsertTimerInActiveList+0x80>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3304      	adds	r3, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f7fe f906 	bl	8000c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002a3e:	697b      	ldr	r3, [r7, #20]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20001304 	.word	0x20001304
 8002a4c:	20001300 	.word	0x20001300

08002a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a56:	e0ca      	b.n	8002bee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da18      	bge.n	8002a90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	3304      	adds	r3, #4
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	61fb      	str	r3, [r7, #28]
}
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	6850      	ldr	r0, [r2, #4]
 8002a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f2c0 80aa 	blt.w	8002bec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f907 	bl	8000cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002aae:	463b      	mov	r3, r7
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff6b 	bl	800298c <prvSampleTimeNow>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	f200 8097 	bhi.w	8002bee <prvProcessReceivedCommands+0x19e>
 8002ac0:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <prvProcessReceivedCommands+0x78>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002af1 	.word	0x08002af1
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002af1 	.word	0x08002af1
 8002ad4:	08002b65 	.word	0x08002b65
 8002ad8:	08002b79 	.word	0x08002b79
 8002adc:	08002bc3 	.word	0x08002bc3
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af1 	.word	0x08002af1
 8002ae8:	08002b65 	.word	0x08002b65
 8002aec:	08002b79 	.word	0x08002b79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b10:	f7ff ff5c 	bl	80029cc <prvInsertTimerInActiveList>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d069      	beq.n	8002bee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05e      	beq.n	8002bee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	441a      	add	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b42:	f7ff fe05 	bl	8002750 <xTimerGenericCommand>
 8002b46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d14f      	bne.n	8002bee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	61bb      	str	r3, [r7, #24]
}
 8002b60:	bf00      	nop
 8002b62:	e7fe      	b.n	8002b62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002b76:	e03a      	b.n	8002bee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	617b      	str	r3, [r7, #20]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	18d1      	adds	r1, r2, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbc:	f7ff ff06 	bl	80029cc <prvInsertTimerInActiveList>
					break;
 8002bc0:	e015      	b.n	8002bee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d103      	bne.n	8002bd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd2:	f000 fbdd 	bl	8003390 <vPortFree>
 8002bd6:	e00a      	b.n	8002bee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002bea:	e000      	b.n	8002bee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002bec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <prvProcessReceivedCommands+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1d39      	adds	r1, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb28 	bl	800124c <xQueueReceive>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f47f af2a 	bne.w	8002a58 <prvProcessReceivedCommands+0x8>
	}
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20001308 	.word	0x20001308

08002c14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c1a:	e048      	b.n	8002cae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f841 	bl	8000cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02e      	beq.n	8002cae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d90e      	bls.n	8002c80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fd ffe6 	bl	8000c4a <vListInsert>
 8002c7e:	e016      	b.n	8002cae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fd60 	bl	8002750 <xTimerGenericCommand>
 8002c90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	603b      	str	r3, [r7, #0]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1b1      	bne.n	8002c1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <prvSwitchTimerLists+0xc4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <prvSwitchTimerLists+0xc0>)
 8002cc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <prvSwitchTimerLists+0xc4>)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20001300 	.word	0x20001300
 8002cd8:	20001304 	.word	0x20001304

08002cdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ce2:	f000 f967 	bl	8002fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <prvCheckForValidListAndQueue+0x60>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d120      	bne.n	8002d30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002cee:	4814      	ldr	r0, [pc, #80]	; (8002d40 <prvCheckForValidListAndQueue+0x64>)
 8002cf0:	f7fd ff5a 	bl	8000ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002cf4:	4813      	ldr	r0, [pc, #76]	; (8002d44 <prvCheckForValidListAndQueue+0x68>)
 8002cf6:	f7fd ff57 	bl	8000ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <prvCheckForValidListAndQueue+0x6c>)
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <prvCheckForValidListAndQueue+0x64>)
 8002cfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <prvCheckForValidListAndQueue+0x70>)
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <prvCheckForValidListAndQueue+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002d06:	2300      	movs	r3, #0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <prvCheckForValidListAndQueue+0x74>)
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <prvCheckForValidListAndQueue+0x78>)
 8002d0e:	2110      	movs	r1, #16
 8002d10:	200a      	movs	r0, #10
 8002d12:	f7fe f865 	bl	8000de0 <xQueueGenericCreateStatic>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <prvCheckForValidListAndQueue+0x60>)
 8002d1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <prvCheckForValidListAndQueue+0x60>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <prvCheckForValidListAndQueue+0x60>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	490b      	ldr	r1, [pc, #44]	; (8002d58 <prvCheckForValidListAndQueue+0x7c>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fc7e 	bl	800162c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d30:	f000 f970 	bl	8003014 <vPortExitCritical>
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20001308 	.word	0x20001308
 8002d40:	200012d8 	.word	0x200012d8
 8002d44:	200012ec 	.word	0x200012ec
 8002d48:	20001300 	.word	0x20001300
 8002d4c:	20001304 	.word	0x20001304
 8002d50:	200013b4 	.word	0x200013b4
 8002d54:	20001314 	.word	0x20001314
 8002d58:	08008f8c 	.word	0x08008f8c

08002d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b04      	subs	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 0201 	bic.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3b04      	subs	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <pxPortInitialiseStack+0x64>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3b14      	subs	r3, #20
 8002d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b04      	subs	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f06f 0202 	mvn.w	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3b20      	subs	r3, #32
 8002db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	08002dc5 	.word	0x08002dc5

08002dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <prvTaskExitError+0x54>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d00a      	beq.n	8002dee <prvTaskExitError+0x2a>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <prvTaskExitError+0x28>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60bb      	str	r3, [r7, #8]
}
 8002e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e02:	bf00      	nop
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0fc      	beq.n	8002e04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	00000000 	.word	0x00000000

08002e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <pxCurrentTCBConst2>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2a:	f380 8809 	msr	PSP, r0
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8811 	msr	BASEPRI, r0
 8002e3a:	4770      	bx	lr
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst2>:
 8002e40:	20000dd8 	.word	0x20000dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <prvPortStartFirstTask+0x24>)
 8002e4a:	6800      	ldr	r0, [r0, #0]
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f380 8808 	msr	MSP, r0
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8814 	msr	CONTROL, r0
 8002e5a:	b662      	cpsie	i
 8002e5c:	b661      	cpsie	f
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	df00      	svc	0
 8002e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e6a:	bf00      	nop
 8002e6c:	e000ed08 	.word	0xe000ed08

08002e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <xPortStartScheduler+0x120>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <xPortStartScheduler+0x124>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10a      	bne.n	8002e96 <xPortStartScheduler+0x26>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	613b      	str	r3, [r7, #16]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <xPortStartScheduler+0x120>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <xPortStartScheduler+0x128>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10a      	bne.n	8002eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	60fb      	str	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <xPortStartScheduler+0x12c>)
 8002eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <xPortStartScheduler+0x130>)
 8002edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ee4:	e009      	b.n	8002efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d0ef      	beq.n	8002ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d00a      	beq.n	8002f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	60bb      	str	r3, [r7, #8]
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <xPortStartScheduler+0x134>)
 8002f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <xPortStartScheduler+0x138>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <xPortStartScheduler+0x138>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <xPortStartScheduler+0x138>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <xPortStartScheduler+0x138>)
 8002f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f5e:	f000 f8dd 	bl	800311c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <xPortStartScheduler+0x13c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f68:	f000 f8fc 	bl	8003164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <xPortStartScheduler+0x140>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <xPortStartScheduler+0x140>)
 8002f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f78:	f7ff ff66 	bl	8002e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f7c:	f7fe ff78 	bl	8001e70 <vTaskSwitchContext>
	prvTaskExitError();
 8002f80:	f7ff ff20 	bl	8002dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00
 8002f94:	410fc271 	.word	0x410fc271
 8002f98:	410fc270 	.word	0x410fc270
 8002f9c:	e000e400 	.word	0xe000e400
 8002fa0:	20001404 	.word	0x20001404
 8002fa4:	20001408 	.word	0x20001408
 8002fa8:	e000ed20 	.word	0xe000ed20
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	e000ef34 	.word	0xe000ef34

08002fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	607b      	str	r3, [r7, #4]
}
 8002fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <vPortEnterCritical+0x58>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <vPortEnterCritical+0x58>)
 8002fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <vPortEnterCritical+0x58>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10f      	bne.n	8003000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <vPortEnterCritical+0x5c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <vPortEnterCritical+0x4c>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	603b      	str	r3, [r7, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <vPortEnterCritical+0x4a>
	}
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000008 	.word	0x20000008
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <vPortExitCritical+0x50>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <vPortExitCritical+0x24>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	607b      	str	r3, [r7, #4]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <vPortExitCritical+0x50>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <vPortExitCritical+0x50>)
 8003040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <vPortExitCritical+0x50>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <vPortExitCritical+0x42>
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f383 8811 	msr	BASEPRI, r3
}
 8003054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008
	...

08003070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003070:	f3ef 8009 	mrs	r0, PSP
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <pxCurrentTCBConst>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f01e 0f10 	tst.w	lr, #16
 8003080:	bf08      	it	eq
 8003082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003094:	f380 8811 	msr	BASEPRI, r0
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f7fe fee6 	bl	8001e70 <vTaskSwitchContext>
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f380 8811 	msr	BASEPRI, r0
 80030ac:	bc09      	pop	{r0, r3}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b6:	f01e 0f10 	tst.w	lr, #16
 80030ba:	bf08      	it	eq
 80030bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030c0:	f380 8809 	msr	PSP, r0
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst>:
 80030d0:	20000dd8 	.word	0x20000dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	607b      	str	r3, [r7, #4]
}
 80030f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030f2:	f7fe fe03 	bl	8001cfc <xTaskIncrementTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <xPortSysTickHandler+0x40>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f383 8811 	msr	BASEPRI, r3
}
 800310e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <vPortSetupTimerInterrupt+0x38>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <vPortSetupTimerInterrupt+0x3c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <vPortSetupTimerInterrupt+0x40>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <vPortSetupTimerInterrupt+0x44>)
 800313a:	3b01      	subs	r3, #1
 800313c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010
 8003154:	e000e018 	.word	0xe000e018
 8003158:	200002ec 	.word	0x200002ec
 800315c:	10624dd3 	.word	0x10624dd3
 8003160:	e000e014 	.word	0xe000e014

08003164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003174 <vPortEnableVFP+0x10>
 8003168:	6801      	ldr	r1, [r0, #0]
 800316a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800316e:	6001      	str	r1, [r0, #0]
 8003170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003172:	bf00      	nop
 8003174:	e000ed88 	.word	0xe000ed88

08003178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800317e:	f3ef 8305 	mrs	r3, IPSR
 8003182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	d914      	bls.n	80031b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <vPortValidateInterruptPriority+0x70>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <vPortValidateInterruptPriority+0x74>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	7afa      	ldrb	r2, [r7, #11]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20a      	bcs.n	80031b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	607b      	str	r3, [r7, #4]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <vPortValidateInterruptPriority+0x78>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <vPortValidateInterruptPriority+0x7c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d90a      	bls.n	80031da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	603b      	str	r3, [r7, #0]
}
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <vPortValidateInterruptPriority+0x60>
	}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e3f0 	.word	0xe000e3f0
 80031ec:	20001404 	.word	0x20001404
 80031f0:	e000ed0c 	.word	0xe000ed0c
 80031f4:	20001408 	.word	0x20001408

080031f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003204:	f7fe fcac 	bl	8001b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003208:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <pvPortMalloc+0x180>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003210:	f000 f920 	bl	8003454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003214:	4b59      	ldr	r3, [pc, #356]	; (800337c <pvPortMalloc+0x184>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 8093 	bne.w	8003348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01d      	beq.n	8003264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003228:	2208      	movs	r2, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	2b00      	cmp	r3, #0
 8003238:	d014      	beq.n	8003264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	3308      	adds	r3, #8
 8003242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <pvPortMalloc+0x6c>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	617b      	str	r3, [r7, #20]
}
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06e      	beq.n	8003348 <pvPortMalloc+0x150>
 800326a:	4b45      	ldr	r3, [pc, #276]	; (8003380 <pvPortMalloc+0x188>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d869      	bhi.n	8003348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003274:	4b43      	ldr	r3, [pc, #268]	; (8003384 <pvPortMalloc+0x18c>)
 8003276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003278:	4b42      	ldr	r3, [pc, #264]	; (8003384 <pvPortMalloc+0x18c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800327e:	e004      	b.n	800328a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d903      	bls.n	800329c <pvPortMalloc+0xa4>
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f1      	bne.n	8003280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <pvPortMalloc+0x180>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d050      	beq.n	8003348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2208      	movs	r2, #8
 80032ac:	4413      	add	r3, r2
 80032ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	2308      	movs	r3, #8
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d91f      	bls.n	8003308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <pvPortMalloc+0xf8>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	613b      	str	r3, [r7, #16]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003302:	69b8      	ldr	r0, [r7, #24]
 8003304:	f000 f908 	bl	8003518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <pvPortMalloc+0x188>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <pvPortMalloc+0x188>)
 8003314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <pvPortMalloc+0x188>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <pvPortMalloc+0x190>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d203      	bcs.n	800332a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <pvPortMalloc+0x188>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <pvPortMalloc+0x190>)
 8003328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <pvPortMalloc+0x184>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	431a      	orrs	r2, r3
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <pvPortMalloc+0x194>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	4a11      	ldr	r2, [pc, #68]	; (800338c <pvPortMalloc+0x194>)
 8003346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003348:	f7fe fc18 	bl	8001b7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <pvPortMalloc+0x174>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60fb      	str	r3, [r7, #12]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <pvPortMalloc+0x172>
	return pvReturn;
 800336c:	69fb      	ldr	r3, [r7, #28]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3728      	adds	r7, #40	; 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20001fcc 	.word	0x20001fcc
 800337c:	20001fe0 	.word	0x20001fe0
 8003380:	20001fd0 	.word	0x20001fd0
 8003384:	20001fc4 	.word	0x20001fc4
 8003388:	20001fd4 	.word	0x20001fd4
 800338c:	20001fd8 	.word	0x20001fd8

08003390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d04d      	beq.n	800343e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033a2:	2308      	movs	r3, #8
 80033a4:	425b      	negs	r3, r3
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <vPortFree+0xb8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <vPortFree+0x44>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	60fb      	str	r3, [r7, #12]
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <vPortFree+0x62>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60bb      	str	r3, [r7, #8]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <vPortFree+0xb8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01e      	beq.n	800343e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11a      	bne.n	800343e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <vPortFree+0xb8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003418:	f7fe fba2 	bl	8001b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <vPortFree+0xbc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <vPortFree+0xbc>)
 8003428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800342a:	6938      	ldr	r0, [r7, #16]
 800342c:	f000 f874 	bl	8003518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <vPortFree+0xc0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	4a06      	ldr	r2, [pc, #24]	; (8003450 <vPortFree+0xc0>)
 8003438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800343a:	f7fe fb9f 	bl	8001b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001fe0 	.word	0x20001fe0
 800344c:	20001fd0 	.word	0x20001fd0
 8003450:	20001fdc 	.word	0x20001fdc

08003454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800345a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800345e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <prvHeapInit+0xac>)
 8003462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3307      	adds	r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <prvHeapInit+0xac>)
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <prvHeapInit+0xb0>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <prvHeapInit+0xb0>)
 8003494:	2200      	movs	r2, #0
 8003496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4413      	add	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034a0:	2208      	movs	r2, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0307 	bic.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <prvHeapInit+0xb4>)
 80034b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <prvHeapInit+0xb4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <prvHeapInit+0xb4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	1ad2      	subs	r2, r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <prvHeapInit+0xb4>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <prvHeapInit+0xb8>)
 80034e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <prvHeapInit+0xbc>)
 80034ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <prvHeapInit+0xc0>)
 80034ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	2000140c 	.word	0x2000140c
 8003504:	20001fc4 	.word	0x20001fc4
 8003508:	20001fcc 	.word	0x20001fcc
 800350c:	20001fd4 	.word	0x20001fd4
 8003510:	20001fd0 	.word	0x20001fd0
 8003514:	20001fe0 	.word	0x20001fe0

08003518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <prvInsertBlockIntoFreeList+0xac>)
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e002      	b.n	800352c <prvInsertBlockIntoFreeList+0x14>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d8f7      	bhi.n	8003526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4413      	add	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d108      	bne.n	800355a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	441a      	add	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d118      	bne.n	80035a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d00d      	beq.n	8003596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e008      	b.n	80035a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e003      	b.n	80035a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d002      	beq.n	80035b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20001fc4 	.word	0x20001fc4
 80035c8:	20001fcc 	.word	0x20001fcc

080035cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d6:	2003      	movs	r0, #3
 80035d8:	f000 f970 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035dc:	2000      	movs	r0, #0
 80035de:	f000 f80d 	bl	80035fc <HAL_InitTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	e001      	b.n	80035f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ee:	f003 ff99 	bl	8007524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f2:	79fb      	ldrb	r3, [r7, #7]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_InitTick+0x6c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_InitTick+0x70>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_InitTick+0x6c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800361e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f98b 	bl	8003942 <HAL_SYSTICK_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b0f      	cmp	r3, #15
 8003636:	d809      	bhi.n	800364c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003638:	2200      	movs	r2, #0
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003640:	f000 f947 	bl	80038d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_InitTick+0x74>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e007      	b.n	800365c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e004      	b.n	800365c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e001      	b.n	800365c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000010 	.word	0x20000010
 800366c:	200002ec 	.word	0x200002ec
 8003670:	2000000c 	.word	0x2000000c

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetTick+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20001fe4 	.word	0x20001fe4

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff ffee 	bl	8003674 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffde 	bl	8003674 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000010 	.word	0x20000010

080036d4 <__NVIC_SetPriorityGrouping>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	; (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_DisableIRQ>:
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db12      	blt.n	80037ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	490a      	ldr	r1, [pc, #40]	; (80037b8 <__NVIC_DisableIRQ+0x44>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	3320      	adds	r3, #32
 800379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037a0:	f3bf 8f4f 	dsb	sy
}
 80037a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037a6:	f3bf 8f6f 	isb	sy
}
 80037aa:	bf00      	nop
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000e100 	.word	0xe000e100

080037bc <__NVIC_SetPriority>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf28      	it	cs
 800382e:	2304      	movcs	r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	2b06      	cmp	r3, #6
 8003838:	d902      	bls.n	8003840 <NVIC_EncodePriority+0x30>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3b03      	subs	r3, #3
 800383e:	e000      	b.n	8003842 <NVIC_EncodePriority+0x32>
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	401a      	ands	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43d9      	mvns	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	4313      	orrs	r3, r2
         );
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389c:	f7ff ff8e 	bl	80037bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff05 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff1a 	bl	800371c <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff8e 	bl	8003810 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5d 	bl	80037bc <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff0d 	bl	8003738 <__NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff1d 	bl	8003774 <__NVIC_DisableIRQ>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff94 	bl	8003878 <SysTick_Config>
 8003950:	4603      	mov	r3, r0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e098      	b.n	8003aa0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_DMA_Init+0x150>)
 8003976:	429a      	cmp	r2, r3
 8003978:	d80f      	bhi.n	800399a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_DMA_Init+0x154>)
 8003982:	4413      	add	r3, r2
 8003984:	4a4b      	ldr	r2, [pc, #300]	; (8003ab4 <HAL_DMA_Init+0x158>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	009a      	lsls	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a48      	ldr	r2, [pc, #288]	; (8003ab8 <HAL_DMA_Init+0x15c>)
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
 8003998:	e00e      	b.n	80039b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_DMA_Init+0x160>)
 80039a2:	4413      	add	r3, r2
 80039a4:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <HAL_DMA_Init+0x158>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a42      	ldr	r2, [pc, #264]	; (8003ac0 <HAL_DMA_Init+0x164>)
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a12:	d039      	beq.n	8003a88 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_DMA_Init+0x15c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d11a      	bne.n	8003a54 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_DMA_Init+0x168>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f003 031c 	and.w	r3, r3, #28
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HAL_DMA_Init+0x168>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_DMA_Init+0x168>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f003 031c 	and.w	r3, r3, #28
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	491d      	ldr	r1, [pc, #116]	; (8003ac4 <HAL_DMA_Init+0x168>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
 8003a52:	e019      	b.n	8003a88 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_DMA_Init+0x16c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 031c 	and.w	r3, r3, #28
 8003a60:	210f      	movs	r1, #15
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4917      	ldr	r1, [pc, #92]	; (8003ac8 <HAL_DMA_Init+0x16c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_DMA_Init+0x16c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 031c 	and.w	r3, r3, #28
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <HAL_DMA_Init+0x16c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40020407 	.word	0x40020407
 8003ab0:	bffdfff8 	.word	0xbffdfff8
 8003ab4:	cccccccd 	.word	0xcccccccd
 8003ab8:	40020000 	.word	0x40020000
 8003abc:	bffdfbf8 	.word	0xbffdfbf8
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	400200a8 	.word	0x400200a8
 8003ac8:	400204a8 	.word	0x400204a8

08003acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Start_IT+0x20>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e04b      	b.n	8003b84 <HAL_DMA_Start_IT+0xb8>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d13a      	bne.n	8003b76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f969 	bl	8003dfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 020e 	orr.w	r2, r2, #14
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e00f      	b.n	8003b64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 020a 	orr.w	r2, r2, #10
 8003b62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e005      	b.n	8003b82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d005      	beq.n	8003bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e029      	b.n	8003c04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020e 	bic.w	r2, r2, #14
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 021c 	and.w	r2, r3, #28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
    }
  }
  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f003 031c 	and.w	r3, r3, #28
 8003c2e:	2204      	movs	r2, #4
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d026      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x7a>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d021      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0204 	bic.w	r2, r2, #4
 8003c60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f003 021c 	and.w	r2, r3, #28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2104      	movs	r1, #4
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d071      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c86:	e06c      	b.n	8003d62 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f003 031c 	and.w	r3, r3, #28
 8003c90:	2202      	movs	r2, #2
 8003c92:	409a      	lsls	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xec>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d029      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020a 	bic.w	r2, r2, #10
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f003 021c 	and.w	r2, r3, #28
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2102      	movs	r1, #2
 8003cda:	fa01 f202 	lsl.w	r2, r1, r2
 8003cde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d038      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cf8:	e033      	b.n	8003d62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f003 031c 	and.w	r3, r3, #28
 8003d02:	2208      	movs	r2, #8
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x156>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d025      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020e 	bic.w	r2, r2, #14
 8003d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	f003 021c 	and.w	r2, r3, #28
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
}
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	460b      	mov	r3, r1
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_DMA_RegisterCallback+0x20>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e031      	b.n	8003df0 <HAL_DMA_RegisterCallback+0x84>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d120      	bne.n	8003de2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d81a      	bhi.n	8003ddc <HAL_DMA_RegisterCallback+0x70>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <HAL_DMA_RegisterCallback+0x40>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc5 	.word	0x08003dc5
 8003db4:	08003dcd 	.word	0x08003dcd
 8003db8:	08003dd5 	.word	0x08003dd5
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8003dc2:	e010      	b.n	8003de6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8003dca:	e00c      	b.n	8003de6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8003dd2:	e008      	b.n	8003de6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8003dda:	e004      	b.n	8003de6 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
           break;
 8003de0:	e001      	b.n	8003de6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f003 021c 	and.w	r2, r3, #28
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2101      	movs	r1, #1
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d108      	bne.n	8003e40 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e3e:	e007      	b.n	8003e50 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6a:	e154      	b.n	8004116 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8146 	beq.w	8004110 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d005      	beq.n	8003e9c <HAL_GPIO_Init+0x40>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d130      	bne.n	8003efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0201 	and.w	r2, r3, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d017      	beq.n	8003f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d123      	bne.n	8003f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a0 	beq.w	8004110 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd0:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_GPIO_Init+0x2d8>)
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	4a57      	ldr	r2, [pc, #348]	; (8004134 <HAL_GPIO_Init+0x2d8>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6613      	str	r3, [r2, #96]	; 0x60
 8003fdc:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_GPIO_Init+0x2d8>)
 8003fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fe8:	4a53      	ldr	r2, [pc, #332]	; (8004138 <HAL_GPIO_Init+0x2dc>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	3302      	adds	r3, #2
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004012:	d019      	beq.n	8004048 <HAL_GPIO_Init+0x1ec>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a49      	ldr	r2, [pc, #292]	; (800413c <HAL_GPIO_Init+0x2e0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_GPIO_Init+0x1e8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_GPIO_Init+0x2e4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00d      	beq.n	8004040 <HAL_GPIO_Init+0x1e4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a47      	ldr	r2, [pc, #284]	; (8004144 <HAL_GPIO_Init+0x2e8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <HAL_GPIO_Init+0x1e0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a46      	ldr	r2, [pc, #280]	; (8004148 <HAL_GPIO_Init+0x2ec>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_GPIO_Init+0x1dc>
 8004034:	2304      	movs	r3, #4
 8004036:	e008      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004038:	2307      	movs	r3, #7
 800403a:	e006      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 800403c:	2303      	movs	r3, #3
 800403e:	e004      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004040:	2302      	movs	r3, #2
 8004042:	e002      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004048:	2300      	movs	r3, #0
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	f002 0203 	and.w	r2, r2, #3
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4093      	lsls	r3, r2
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800405a:	4937      	ldr	r1, [pc, #220]	; (8004138 <HAL_GPIO_Init+0x2dc>)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3302      	adds	r3, #2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_GPIO_Init+0x2f0>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800408c:	4a2f      	ldr	r2, [pc, #188]	; (800414c <HAL_GPIO_Init+0x2f0>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_GPIO_Init+0x2f0>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040b6:	4a25      	ldr	r2, [pc, #148]	; (800414c <HAL_GPIO_Init+0x2f0>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_GPIO_Init+0x2f0>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_GPIO_Init+0x2f0>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040e6:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_GPIO_Init+0x2f0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_GPIO_Init+0x2f0>)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f aea3 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40021000 	.word	0x40021000
 8004138:	40010000 	.word	0x40010000
 800413c:	48000400 	.word	0x48000400
 8004140:	48000800 	.word	0x48000800
 8004144:	48000c00 	.word	0x48000c00
 8004148:	48001000 	.word	0x48001000
 800414c:	40010400 	.word	0x40010400

08004150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004160:	787b      	ldrb	r3, [r7, #1]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800416c:	e002      	b.n	8004174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fca4 	bl	8007aec <HAL_GPIO_EXTI_Callback>
  }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40007000 	.word	0x40007000

080041d0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_PWR_ConfigPVD+0xb8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 020e 	bic.w	r2, r3, #14
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4928      	ldr	r1, [pc, #160]	; (8004288 <HAL_PWR_ConfigPVD+0xb8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80041f6:	4b25      	ldr	r3, [pc, #148]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a24      	ldr	r2, [pc, #144]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004226:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a06      	ldr	r2, [pc, #24]	; (800428c <HAL_PWR_ConfigPVD+0xbc>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40007000 	.word	0x40007000
 800428c:	40010400 	.word	0x40010400

08004290 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_PWR_EnablePVD+0x1c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_PWR_EnablePVD+0x1c>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6053      	str	r3, [r2, #4]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000

080042b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40007000 	.word	0x40007000

080042cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042da:	d130      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e8:	d038      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2232      	movs	r2, #50	; 0x32
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004310:	e002      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b01      	subs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d102      	bne.n	800432c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f2      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d110      	bne.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e00f      	b.n	800435e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d007      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004354:	4a05      	ldr	r2, [pc, #20]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40007000 	.word	0x40007000
 8004370:	200002ec 	.word	0x200002ec
 8004374:	431bde83 	.word	0x431bde83

08004378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f000 bc02 	b.w	8004b90 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438c:	4b96      	ldr	r3, [pc, #600]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004396:	4b94      	ldr	r3, [pc, #592]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80e4 	beq.w	8004576 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4c>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	f040 808b 	bne.w	80044d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 8087 	bne.w	80044d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c4:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_OscConfig+0x64>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e3d9      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_RCC_OscConfig+0x7e>
 80043ec:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	e005      	b.n	8004402 <HAL_RCC_OscConfig+0x8a>
 80043f6:	4b7c      	ldr	r3, [pc, #496]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004402:	4293      	cmp	r3, r2
 8004404:	d223      	bcs.n	800444e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd54 	bl	8004eb8 <RCC_SetFlashLatencyFromMSIRange>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e3ba      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800441a:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a72      	ldr	r2, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	496d      	ldr	r1, [pc, #436]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004438:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	4968      	ldr	r1, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
 800444c:	e025      	b.n	800449a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800444e:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004454:	f043 0308 	orr.w	r3, r3, #8
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4960      	ldr	r1, [pc, #384]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446c:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	495b      	ldr	r1, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fd14 	bl	8004eb8 <RCC_SetFlashLatencyFromMSIRange>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e37a      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800449a:	f000 fc81 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 800449e:	4602      	mov	r2, r0
 80044a0:	4b51      	ldr	r3, [pc, #324]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	4950      	ldr	r1, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044ac:	5ccb      	ldrb	r3, [r1, r3]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a4e      	ldr	r2, [pc, #312]	; (80045f0 <HAL_RCC_OscConfig+0x278>)
 80044b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ba:	4b4e      	ldr	r3, [pc, #312]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f89c 	bl	80035fc <HAL_InitTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d052      	beq.n	8004574 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	e35e      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d032      	beq.n	8004540 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a42      	ldr	r2, [pc, #264]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e6:	f7ff f8c5 	bl	8003674 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ee:	f7ff f8c1 	bl	8003674 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e347      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004500:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a35      	ldr	r2, [pc, #212]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004512:	f043 0308 	orr.w	r3, r3, #8
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4930      	ldr	r1, [pc, #192]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452a:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	492b      	ldr	r1, [pc, #172]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
 800453e:	e01a      	b.n	8004576 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800454c:	f7ff f892 	bl	8003674 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004554:	f7ff f88e 	bl	8003674 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e314      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1dc>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d073      	beq.n	800466a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x21c>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d10e      	bne.n	80045ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d10b      	bne.n	80045ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d063      	beq.n	8004668 <HAL_RCC_OscConfig+0x2f0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d15f      	bne.n	8004668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e2f1      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_OscConfig+0x24c>
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e025      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045cc:	d114      	bne.n	80045f8 <HAL_RCC_OscConfig+0x280>
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCC_OscConfig+0x270>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e013      	b.n	8004610 <HAL_RCC_OscConfig+0x298>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	0800902c 	.word	0x0800902c
 80045f0:	200002ec 	.word	0x200002ec
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	4ba0      	ldr	r3, [pc, #640]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a9f      	ldr	r2, [pc, #636]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b9d      	ldr	r3, [pc, #628]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a9c      	ldr	r2, [pc, #624]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7ff f82c 	bl	8003674 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004620:	f7ff f828 	bl	8003674 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e2ae      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004632:	4b92      	ldr	r3, [pc, #584]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x2a8>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7ff f818 	bl	8003674 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004648:	f7ff f814 	bl	8003674 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e29a      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465a:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x2d0>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d060      	beq.n	8004738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x310>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d119      	bne.n	80046b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d116      	bne.n	80046b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	4b7c      	ldr	r3, [pc, #496]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x328>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e277      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b76      	ldr	r3, [pc, #472]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	4973      	ldr	r1, [pc, #460]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b4:	e040      	b.n	8004738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d023      	beq.n	8004706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046be:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fe ffd3 	bl	8003674 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fe ffcf 	bl	8003674 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e255      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e4:	4b65      	ldr	r3, [pc, #404]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b62      	ldr	r3, [pc, #392]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	495f      	ldr	r1, [pc, #380]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
 8004704:	e018      	b.n	8004738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a5c      	ldr	r2, [pc, #368]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fe ffaf 	bl	8003674 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471a:	f7fe ffab 	bl	8003674 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e231      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800472c:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f0      	bne.n	800471a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d03c      	beq.n	80047be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474c:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe ff8a 	bl	8003674 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe ff86 	bl	8003674 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e20c      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004776:	4b41      	ldr	r3, [pc, #260]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ef      	beq.n	8004764 <HAL_RCC_OscConfig+0x3ec>
 8004784:	e01b      	b.n	80047be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478c:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fe ff6d 	bl	8003674 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe ff69 	bl	8003674 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1ef      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ef      	bne.n	800479e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80a6 	beq.w	8004918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6593      	str	r3, [r2, #88]	; 0x58
 80047e8:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_OscConfig+0x504>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_RCC_OscConfig+0x508>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d118      	bne.n	8004836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCC_OscConfig+0x508>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <HAL_RCC_OscConfig+0x508>)
 800480a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004810:	f7fe ff30 	bl	8003674 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004818:	f7fe ff2c 	bl	8003674 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e1b2      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_RCC_OscConfig+0x508>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d108      	bne.n	8004850 <HAL_RCC_OscConfig+0x4d8>
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	4a0d      	ldr	r2, [pc, #52]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484e:	e029      	b.n	80048a4 <HAL_RCC_OscConfig+0x52c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d115      	bne.n	8004884 <HAL_RCC_OscConfig+0x50c>
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCC_OscConfig+0x504>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a03      	ldr	r2, [pc, #12]	; (800487c <HAL_RCC_OscConfig+0x504>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004878:	e014      	b.n	80048a4 <HAL_RCC_OscConfig+0x52c>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
 8004884:	4b9a      	ldr	r3, [pc, #616]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	4a99      	ldr	r2, [pc, #612]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004894:	4b96      	ldr	r3, [pc, #600]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	4a95      	ldr	r2, [pc, #596]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fe fee2 	bl	8003674 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fe fede 	bl	8003674 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e162      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ca:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ed      	beq.n	80048b4 <HAL_RCC_OscConfig+0x53c>
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fe fecb 	bl	8003674 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe fec7 	bl	8003674 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e14b      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f8:	4b7d      	ldr	r3, [pc, #500]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ed      	bne.n	80048e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b78      	ldr	r3, [pc, #480]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	4a77      	ldr	r2, [pc, #476]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004916:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d03c      	beq.n	800499e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01c      	beq.n	8004966 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800492c:	4b70      	ldr	r3, [pc, #448]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004932:	4a6f      	ldr	r2, [pc, #444]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fe fe9a 	bl	8003674 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004944:	f7fe fe96 	bl	8003674 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e11c      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004956:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ef      	beq.n	8004944 <HAL_RCC_OscConfig+0x5cc>
 8004964:	e01b      	b.n	800499e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004966:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496c:	4a60      	ldr	r2, [pc, #384]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fe fe7d 	bl	8003674 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497e:	f7fe fe79 	bl	8003674 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e0ff      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004990:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ef      	bne.n	800497e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80f3 	beq.w	8004b8e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f040 80c9 	bne.w	8004b44 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049b2:	4b4f      	ldr	r3, [pc, #316]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d12c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	3b01      	subs	r3, #1
 80049d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d123      	bne.n	8004a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d11b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d113      	bne.n	8004a20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	3b01      	subs	r3, #1
 8004a06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d06b      	beq.n	8004af8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d062      	beq.n	8004aec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a26:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e0ac      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a36:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a42:	f7fe fe17 	bl	8003674 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fe fe13 	bl	8003674 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e099      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <HAL_RCC_OscConfig+0x77c>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	4311      	orrs	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a82:	0212      	lsls	r2, r2, #8
 8004a84:	4311      	orrs	r1, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a8a:	0852      	lsrs	r2, r2, #1
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	0552      	lsls	r2, r2, #21
 8004a90:	4311      	orrs	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a96:	0852      	lsrs	r2, r2, #1
 8004a98:	3a01      	subs	r2, #1
 8004a9a:	0652      	lsls	r2, r2, #25
 8004a9c:	4311      	orrs	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa2:	06d2      	lsls	r2, r2, #27
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	4912      	ldr	r1, [pc, #72]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac4:	f7fe fdd6 	bl	8003674 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fe fdd2 	bl	8003674 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e058      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <HAL_RCC_OscConfig+0x778>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aea:	e050      	b.n	8004b8e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e04f      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
 8004af0:	40021000 	.word	0x40021000
 8004af4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af8:	4b27      	ldr	r3, [pc, #156]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d144      	bne.n	8004b8e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b1c:	f7fe fdaa 	bl	8003674 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fe fda6 	bl	8003674 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e02c      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b36:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x7ac>
 8004b42:	e024      	b.n	8004b8e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d01f      	beq.n	8004b8a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fe fd8d 	bl	8003674 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fe fd89 	bl	8003674 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e00f      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4905      	ldr	r1, [pc, #20]	; (8004b98 <HAL_RCC_OscConfig+0x820>)
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_OscConfig+0x824>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	60cb      	str	r3, [r1, #12]
 8004b88:	e001      	b.n	8004b8e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	feeefffc 	.word	0xfeeefffc

08004ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0e7      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b75      	ldr	r3, [pc, #468]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b72      	ldr	r3, [pc, #456]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 0207 	bic.w	r2, r3, #7
 8004bca:	4970      	ldr	r1, [pc, #448]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b6e      	ldr	r3, [pc, #440]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0cf      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d010      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	4b66      	ldr	r3, [pc, #408]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d908      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c00:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4960      	ldr	r1, [pc, #384]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04c      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c26:	4b5a      	ldr	r3, [pc, #360]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d121      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0a6      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3e:	4b54      	ldr	r3, [pc, #336]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d115      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e09a      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c56:	4b4e      	ldr	r3, [pc, #312]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08e      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e086      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c76:	4b46      	ldr	r3, [pc, #280]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 0203 	bic.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4943      	ldr	r1, [pc, #268]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c88:	f7fe fcf4 	bl	8003674 <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fe fcf0 	bl	8003674 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e06e      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 020c 	and.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d1eb      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d208      	bcs.n	8004ce6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	492b      	ldr	r1, [pc, #172]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce6:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d210      	bcs.n	8004d16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	4923      	ldr	r1, [pc, #140]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_RCC_ClockConfig+0x1ec>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e036      	b.n	8004d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4918      	ldr	r1, [pc, #96]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4910      	ldr	r1, [pc, #64]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d54:	f000 f824 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	490b      	ldr	r1, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1f4>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1f8>)
 8004d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1fc>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fc3f 	bl	80035fc <HAL_InitTick>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d82:	7afb      	ldrb	r3, [r7, #11]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40022000 	.word	0x40022000
 8004d90:	40021000 	.word	0x40021000
 8004d94:	0800902c 	.word	0x0800902c
 8004d98:	200002ec 	.word	0x200002ec
 8004d9c:	2000000c 	.word	0x2000000c

08004da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dae:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db8:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d11e      	bne.n	8004e12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dd4:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004de0:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e005      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e004      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d134      	bne.n	8004e98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d003      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0xac>
 8004e44:	e005      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e46:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e48:	617b      	str	r3, [r7, #20]
      break;
 8004e4a:	e005      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e4e:	617b      	str	r3, [r7, #20]
      break;
 8004e50:	e002      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	3301      	adds	r3, #1
 8004e64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	fb03 f202 	mul.w	r2, r3, r2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0e5b      	lsrs	r3, r3, #25
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e98:	69bb      	ldr	r3, [r7, #24]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3724      	adds	r7, #36	; 0x24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	0800903c 	.word	0x0800903c
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	02dc6c00 	.word	0x02dc6c00

08004eb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ed0:	f7ff f9ee 	bl	80042b0 <HAL_PWREx_GetVoltageRange>
 8004ed4:	6178      	str	r0, [r7, #20]
 8004ed6:	e014      	b.n	8004f02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee4:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ef0:	f7ff f9de 	bl	80042b0 <HAL_PWREx_GetVoltageRange>
 8004ef4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f08:	d10b      	bne.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d919      	bls.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2ba0      	cmp	r3, #160	; 0xa0
 8004f14:	d902      	bls.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f16:	2302      	movs	r3, #2
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e013      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e010      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d902      	bls.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f28:	2303      	movs	r3, #3
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e00a      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d102      	bne.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f34:	2302      	movs	r3, #2
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e004      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d101      	bne.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f40:	2301      	movs	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 0207 	bic.w	r2, r3, #7
 8004f4c:	4909      	ldr	r1, [pc, #36]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f54:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40022000 	.word	0x40022000

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f80:	2300      	movs	r3, #0
 8004f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f84:	2300      	movs	r3, #0
 8004f86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d031      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f9c:	d01a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fa2:	d814      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fac:	d10f      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fae:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	4a5c      	ldr	r2, [pc, #368]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fba:	e00c      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f9f0 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fdc:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	494e      	ldr	r1, [pc, #312]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 809e 	beq.w	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800500a:	4b46      	ldr	r3, [pc, #280]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502a:	6593      	str	r3, [r2, #88]	; 0x58
 800502c:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005038:	2301      	movs	r3, #1
 800503a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503c:	4b3a      	ldr	r3, [pc, #232]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a39      	ldr	r2, [pc, #228]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005048:	f7fe fb14 	bl	8003674 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005050:	f7fe fb10 	bl	8003674 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d902      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	74fb      	strb	r3, [r7, #19]
        break;
 8005062:	e005      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005064:	4b30      	ldr	r3, [pc, #192]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ef      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d15a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005076:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01e      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	429a      	cmp	r2, r3
 8005090:	d019      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800509e:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d016      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fad0 	bl	8003674 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d6:	e00b      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fe facc 	bl	8003674 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d902      	bls.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	74fb      	strb	r3, [r7, #19]
            break;
 80050ee:	e006      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ec      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800511a:	e009      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	74bb      	strb	r3, [r7, #18]
 8005120:	e006      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005130:	7c7b      	ldrb	r3, [r7, #17]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d105      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005136:	4b9b      	ldr	r3, [pc, #620]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	4a9a      	ldr	r2, [pc, #616]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800513c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005140:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800514e:	4b95      	ldr	r3, [pc, #596]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f023 0203 	bic.w	r2, r3, #3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4991      	ldr	r1, [pc, #580]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005170:	4b8c      	ldr	r3, [pc, #560]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 020c 	bic.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	4989      	ldr	r1, [pc, #548]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005192:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	4980      	ldr	r1, [pc, #512]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b4:	4b7b      	ldr	r3, [pc, #492]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	4978      	ldr	r1, [pc, #480]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d6:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	496f      	ldr	r1, [pc, #444]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f8:	4b6a      	ldr	r3, [pc, #424]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4967      	ldr	r1, [pc, #412]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521a:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	495e      	ldr	r1, [pc, #376]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800523c:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	4956      	ldr	r1, [pc, #344]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525e:	4b51      	ldr	r3, [pc, #324]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	494d      	ldr	r1, [pc, #308]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005280:	4b48      	ldr	r3, [pc, #288]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	4945      	ldr	r1, [pc, #276]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529e:	d106      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f872 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	492d      	ldr	r1, [pc, #180]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005308:	60d3      	str	r3, [r2, #12]
 800530a:	e011      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f843 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534a:	4916      	ldr	r1, [pc, #88]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800535a:	d10c      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f820 	bl	80053a8 <RCCEx_PLLSAI1_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	4904      	ldr	r1, [pc, #16]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005398:	7cbb      	ldrb	r3, [r7, #18]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000

080053a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053b6:	4b74      	ldr	r3, [pc, #464]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053c2:	4b71      	ldr	r3, [pc, #452]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0203 	and.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d10d      	bne.n	80053ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
       ||
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053da:	4b6b      	ldr	r3, [pc, #428]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
       ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d047      	beq.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	e044      	b.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d018      	beq.n	800542e <RCCEx_PLLSAI1_Config+0x86>
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d825      	bhi.n	800544c <RCCEx_PLLSAI1_Config+0xa4>
 8005400:	2b01      	cmp	r3, #1
 8005402:	d002      	beq.n	800540a <RCCEx_PLLSAI1_Config+0x62>
 8005404:	2b02      	cmp	r3, #2
 8005406:	d009      	beq.n	800541c <RCCEx_PLLSAI1_Config+0x74>
 8005408:	e020      	b.n	800544c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800540a:	4b5f      	ldr	r3, [pc, #380]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11d      	bne.n	8005452 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e01a      	b.n	8005452 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800541c:	4b5a      	ldr	r3, [pc, #360]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800542c:	e013      	b.n	8005456 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800542e:	4b56      	ldr	r3, [pc, #344]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800543a:	4b53      	ldr	r3, [pc, #332]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800544a:	e006      	b.n	800545a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e004      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800545a:	bf00      	nop
    }

    if(status == HAL_OK)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005462:	4b49      	ldr	r3, [pc, #292]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	3b01      	subs	r3, #1
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	430b      	orrs	r3, r1
 8005478:	4943      	ldr	r1, [pc, #268]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d17c      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3f      	ldr	r2, [pc, #252]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800548e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fe f8f0 	bl	8003674 <HAL_GetTick>
 8005494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005496:	e009      	b.n	80054ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005498:	f7fe f8ec 	bl	8003674 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d902      	bls.n	80054ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	73fb      	strb	r3, [r7, #15]
        break;
 80054aa:	e005      	b.n	80054b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1ef      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d15f      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c4:	4b30      	ldr	r3, [pc, #192]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6892      	ldr	r2, [r2, #8]
 80054d4:	0211      	lsls	r1, r2, #8
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68d2      	ldr	r2, [r2, #12]
 80054da:	06d2      	lsls	r2, r2, #27
 80054dc:	430a      	orrs	r2, r1
 80054de:	492a      	ldr	r1, [pc, #168]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	610b      	str	r3, [r1, #16]
 80054e4:	e027      	b.n	8005536 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d112      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ec:	4b26      	ldr	r3, [pc, #152]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6892      	ldr	r2, [r2, #8]
 80054fc:	0211      	lsls	r1, r2, #8
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6912      	ldr	r2, [r2, #16]
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0552      	lsls	r2, r2, #21
 8005508:	430a      	orrs	r2, r1
 800550a:	491f      	ldr	r1, [pc, #124]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	610b      	str	r3, [r1, #16]
 8005510:	e011      	b.n	8005536 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800551a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	0211      	lsls	r1, r2, #8
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6952      	ldr	r2, [r2, #20]
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	3a01      	subs	r2, #1
 800552c:	0652      	lsls	r2, r2, #25
 800552e:	430a      	orrs	r2, r1
 8005530:	4915      	ldr	r1, [pc, #84]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005532:	4313      	orrs	r3, r2
 8005534:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fe f897 	bl	8003674 <HAL_GetTick>
 8005546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005548:	e009      	b.n	800555e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800554a:	f7fe f893 	bl	8003674 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d902      	bls.n	800555e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
          break;
 800555c:	e005      	b.n	800556a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ef      	beq.n	800554a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000

0800558c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d06c      	beq.n	8005678 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 ffe8 	bl	8007588 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	22ca      	movs	r2, #202	; 0xca
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2253      	movs	r2, #83	; 0x53
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f87c 	bl	80056ce <RTC_EnterInitMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d14b      	bne.n	8005678 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6919      	ldr	r1, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	041a      	lsls	r2, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f87f 	bl	8005734 <RTC_ExitInitMode>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11b      	bne.n	8005678 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0203 	bic.w	r2, r2, #3
 800564e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005698:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800569a:	f7fd ffeb 	bl	8003674 <HAL_GetTick>
 800569e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056a0:	e009      	b.n	80056b6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056a2:	f7fd ffe7 	bl	8003674 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056b0:	d901      	bls.n	80056b6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e007      	b.n	80056c6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ee      	beq.n	80056a2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d120      	bne.n	800572a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056f2:	f7fd ffbf 	bl	8003674 <HAL_GetTick>
 80056f6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056f8:	e00d      	b.n	8005716 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056fa:	f7fd ffbb 	bl	8003674 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005708:	d905      	bls.n	8005716 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <RTC_EnterInitMode+0x5c>
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d1e7      	bne.n	80056fa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <RTC_ExitInitMode+0x78>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <RTC_ExitInitMode+0x78>)
 8005746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <RTC_ExitInitMode+0x78>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10c      	bne.n	8005772 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff92 	bl	8005682 <HAL_RTC_WaitForSynchro>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2203      	movs	r2, #3
 8005768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e017      	b.n	80057a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <RTC_ExitInitMode+0x78>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <RTC_ExitInitMode+0x78>)
 8005778:	f023 0320 	bic.w	r3, r3, #32
 800577c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff ff7f 	bl	8005682 <HAL_RTC_WaitForSynchro>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2203      	movs	r2, #3
 800578e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <RTC_ExitInitMode+0x78>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4a04      	ldr	r2, [pc, #16]	; (80057ac <RTC_ExitInitMode+0x78>)
 800579c:	f043 0320 	orr.w	r3, r3, #32
 80057a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40002800 	.word	0x40002800

080057b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e095      	b.n	80058ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d2:	d009      	beq.n	80057e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	61da      	str	r2, [r3, #28]
 80057da:	e005      	b.n	80057e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f877 	bl	80058f6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005828:	d902      	bls.n	8005830 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e002      	b.n	8005836 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005834:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800583e:	d007      	beq.n	8005850 <HAL_SPI_Init+0xa0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	ea42 0103 	orr.w	r1, r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	f003 0204 	and.w	r2, r3, #4
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058cc:	ea42 0103 	orr.w	r1, r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e049      	b.n	80059b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fe45 	bl	80075c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fe2f 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e049      	b.n	8005a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fee8 	bl	80077b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 fdd8 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e03c      	b.n	8005b0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d109      	bne.n	8005aae <HAL_TIM_PWM_Start_DMA+0x46>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	e02f      	b.n	8005b0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d109      	bne.n	8005ac8 <HAL_TIM_PWM_Start_DMA+0x60>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	e022      	b.n	8005b0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d109      	bne.n	8005ae2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	e015      	b.n	8005b0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d109      	bne.n	8005afc <HAL_TIM_PWM_Start_DMA+0x94>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e008      	b.n	8005b0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
 8005b14:	e18d      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e03c      	b.n	8005baa <HAL_TIM_PWM_Start_DMA+0x142>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d109      	bne.n	8005b4a <HAL_TIM_PWM_Start_DMA+0xe2>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e02f      	b.n	8005baa <HAL_TIM_PWM_Start_DMA+0x142>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d109      	bne.n	8005b64 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e022      	b.n	8005baa <HAL_TIM_PWM_Start_DMA+0x142>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d109      	bne.n	8005b7e <HAL_TIM_PWM_Start_DMA+0x116>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e015      	b.n	8005baa <HAL_TIM_PWM_Start_DMA+0x142>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start_DMA+0x130>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e008      	b.n	8005baa <HAL_TIM_PWM_Start_DMA+0x142>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2301      	moveq	r3, #1
 8005ba6:	2300      	movne	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d034      	beq.n	8005c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_TIM_PWM_Start_DMA+0x152>
 8005bb4:	887b      	ldrh	r3, [r7, #2]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e139      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_PWM_Start_DMA+0x166>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bcc:	e026      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_PWM_Start_DMA+0x176>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bdc:	e01e      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start_DMA+0x186>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bec:	e016      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start_DMA+0x196>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bfc:	e00e      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0c:	e006      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c16:	e001      	b.n	8005c1c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e10a      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	f200 80ae 	bhi.w	8005d80 <HAL_TIM_PWM_Start_DMA+0x318>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005d81 	.word	0x08005d81
 8005c34:	08005d81 	.word	0x08005d81
 8005c38:	08005d81 	.word	0x08005d81
 8005c3c:	08005ca9 	.word	0x08005ca9
 8005c40:	08005d81 	.word	0x08005d81
 8005c44:	08005d81 	.word	0x08005d81
 8005c48:	08005d81 	.word	0x08005d81
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005d81 	.word	0x08005d81
 8005c54:	08005d81 	.word	0x08005d81
 8005c58:	08005d81 	.word	0x08005d81
 8005c5c:	08005d39 	.word	0x08005d39
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	4a75      	ldr	r2, [pc, #468]	; (8005e3c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	4a74      	ldr	r2, [pc, #464]	; (8005e40 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	4a73      	ldr	r2, [pc, #460]	; (8005e44 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3334      	adds	r3, #52	; 0x34
 8005c84:	461a      	mov	r2, r3
 8005c86:	887b      	ldrh	r3, [r7, #2]
 8005c88:	f7fd ff20 	bl	8003acc <HAL_DMA_Start_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0cd      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca4:	60da      	str	r2, [r3, #12]
      break;
 8005ca6:	e06e      	b.n	8005d86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	4a63      	ldr	r2, [pc, #396]	; (8005e3c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	4a62      	ldr	r2, [pc, #392]	; (8005e40 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	4a61      	ldr	r2, [pc, #388]	; (8005e44 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3338      	adds	r3, #56	; 0x38
 8005ccc:	461a      	mov	r2, r3
 8005cce:	887b      	ldrh	r3, [r7, #2]
 8005cd0:	f7fd fefc 	bl	8003acc <HAL_DMA_Start_IT>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e0a9      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cec:	60da      	str	r2, [r3, #12]
      break;
 8005cee:	e04a      	b.n	8005d86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a51      	ldr	r2, [pc, #324]	; (8005e3c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a50      	ldr	r2, [pc, #320]	; (8005e40 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a4f      	ldr	r2, [pc, #316]	; (8005e44 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	333c      	adds	r3, #60	; 0x3c
 8005d14:	461a      	mov	r2, r3
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	f7fd fed8 	bl	8003acc <HAL_DMA_Start_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e085      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d34:	60da      	str	r2, [r3, #12]
      break;
 8005d36:	e026      	b.n	8005d86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	4a3f      	ldr	r2, [pc, #252]	; (8005e3c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	4a3e      	ldr	r2, [pc, #248]	; (8005e40 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005d4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3340      	adds	r3, #64	; 0x40
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	f7fd feb4 	bl	8003acc <HAL_DMA_Start_IT>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e061      	b.n	8005e32 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d7c:	60da      	str	r2, [r3, #12]
      break;
 8005d7e:	e002      	b.n	8005d86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
      break;
 8005d84:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d151      	bne.n	8005e30 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 ff85 	bl	8006ca4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <HAL_TIM_PWM_Start_DMA+0x350>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_PWM_Start_DMA+0x350>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_PWM_Start_DMA+0x354>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_TIM_PWM_Start_DMA+0x356>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_PWM_Start_DMA+0x388>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_PWM_Start_DMA+0x388>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d115      	bne.n	8005e1c <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d015      	beq.n	8005e2e <HAL_TIM_PWM_Start_DMA+0x3c6>
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d011      	beq.n	8005e2e <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e008      	b.n	8005e2e <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e000      	b.n	8005e30 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	0800649d 	.word	0x0800649d
 8005e40:	08006545 	.word	0x08006545
 8005e44:	0800640b 	.word	0x0800640b
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	00010007 	.word	0x00010007

08005e58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b0c      	cmp	r3, #12
 8005e6a:	d855      	bhi.n	8005f18 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005ea9 	.word	0x08005ea9
 8005e78:	08005f19 	.word	0x08005f19
 8005e7c:	08005f19 	.word	0x08005f19
 8005e80:	08005f19 	.word	0x08005f19
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005f19 	.word	0x08005f19
 8005e8c:	08005f19 	.word	0x08005f19
 8005e90:	08005f19 	.word	0x08005f19
 8005e94:	08005ee1 	.word	0x08005ee1
 8005e98:	08005f19 	.word	0x08005f19
 8005e9c:	08005f19 	.word	0x08005f19
 8005ea0:	08005f19 	.word	0x08005f19
 8005ea4:	08005efd 	.word	0x08005efd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005eb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fd fe65 	bl	8003b8c <HAL_DMA_Abort_IT>
      break;
 8005ec2:	e02c      	b.n	8005f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fd fe57 	bl	8003b8c <HAL_DMA_Abort_IT>
      break;
 8005ede:	e01e      	b.n	8005f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fd fe49 	bl	8003b8c <HAL_DMA_Abort_IT>
      break;
 8005efa:	e010      	b.n	8005f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fd fe3b 	bl	8003b8c <HAL_DMA_Abort_IT>
      break;
 8005f16:	e002      	b.n	8005f1e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d176      	bne.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 feb9 	bl	8006ca4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a39      	ldr	r2, [pc, #228]	; (800601c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a36      	ldr	r2, [pc, #216]	; (8006024 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10f      	bne.n	8005f8a <HAL_TIM_PWM_Stop_DMA+0x132>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	f240 4344 	movw	r3, #1092	; 0x444
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_PWM_Stop_DMA+0x132>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <HAL_TIM_PWM_Stop_DMA+0x162>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	f240 4344 	movw	r3, #1092	; 0x444
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_PWM_Stop_DMA+0x162>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Stop_DMA+0x172>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc8:	e023      	b.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Stop_DMA+0x182>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd8:	e01b      	b.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Stop_DMA+0x192>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe8:	e013      	b.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ff8:	e00b      	b.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	e003      	b.n	8006012 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400

08006028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006042:	2302      	movs	r3, #2
 8006044:	e0ff      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b14      	cmp	r3, #20
 8006052:	f200 80f0 	bhi.w	8006236 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	080060b1 	.word	0x080060b1
 8006060:	08006237 	.word	0x08006237
 8006064:	08006237 	.word	0x08006237
 8006068:	08006237 	.word	0x08006237
 800606c:	080060f1 	.word	0x080060f1
 8006070:	08006237 	.word	0x08006237
 8006074:	08006237 	.word	0x08006237
 8006078:	08006237 	.word	0x08006237
 800607c:	08006133 	.word	0x08006133
 8006080:	08006237 	.word	0x08006237
 8006084:	08006237 	.word	0x08006237
 8006088:	08006237 	.word	0x08006237
 800608c:	08006173 	.word	0x08006173
 8006090:	08006237 	.word	0x08006237
 8006094:	08006237 	.word	0x08006237
 8006098:	08006237 	.word	0x08006237
 800609c:	080061b5 	.word	0x080061b5
 80060a0:	08006237 	.word	0x08006237
 80060a4:	08006237 	.word	0x08006237
 80060a8:	08006237 	.word	0x08006237
 80060ac:	080061f5 	.word	0x080061f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fadc 	bl	8006674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0208 	orr.w	r2, r2, #8
 80060ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0204 	bic.w	r2, r2, #4
 80060da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6999      	ldr	r1, [r3, #24]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	619a      	str	r2, [r3, #24]
      break;
 80060ee:	e0a5      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fb38 	bl	800676c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	021a      	lsls	r2, r3, #8
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	619a      	str	r2, [r3, #24]
      break;
 8006130:	e084      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fb91 	bl	8006860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0208 	orr.w	r2, r2, #8
 800614c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0204 	bic.w	r2, r2, #4
 800615c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69d9      	ldr	r1, [r3, #28]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	61da      	str	r2, [r3, #28]
      break;
 8006170:	e064      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fbe9 	bl	8006950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	021a      	lsls	r2, r3, #8
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	61da      	str	r2, [r3, #28]
      break;
 80061b2:	e043      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fc26 	bl	8006a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0208 	orr.w	r2, r2, #8
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061f2:	e023      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fc5e 	bl	8006abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006234:	e002      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
      break;
 800623a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIM_ConfigClockSource+0x1c>
 8006268:	2302      	movs	r3, #2
 800626a:	e0b6      	b.n	80063da <HAL_TIM_ConfigClockSource+0x18a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800628e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a8:	d03e      	beq.n	8006328 <HAL_TIM_ConfigClockSource+0xd8>
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ae:	f200 8087 	bhi.w	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	f000 8086 	beq.w	80063c6 <HAL_TIM_ConfigClockSource+0x176>
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d87f      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062c0:	2b70      	cmp	r3, #112	; 0x70
 80062c2:	d01a      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0xaa>
 80062c4:	2b70      	cmp	r3, #112	; 0x70
 80062c6:	d87b      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062c8:	2b60      	cmp	r3, #96	; 0x60
 80062ca:	d050      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x11e>
 80062cc:	2b60      	cmp	r3, #96	; 0x60
 80062ce:	d877      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062d0:	2b50      	cmp	r3, #80	; 0x50
 80062d2:	d03c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0xfe>
 80062d4:	2b50      	cmp	r3, #80	; 0x50
 80062d6:	d873      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d058      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x13e>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d86f      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062e0:	2b30      	cmp	r3, #48	; 0x30
 80062e2:	d064      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15e>
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d86b      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d060      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15e>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d867      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d05c      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15e>
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d05a      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15e>
 80062f8:	e062      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6899      	ldr	r1, [r3, #8]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f000 fcab 	bl	8006c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800631c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	609a      	str	r2, [r3, #8]
      break;
 8006326:	e04f      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6899      	ldr	r1, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f000 fc94 	bl	8006c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800634a:	609a      	str	r2, [r3, #8]
      break;
 800634c:	e03c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6859      	ldr	r1, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	461a      	mov	r2, r3
 800635c:	f000 fc08 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2150      	movs	r1, #80	; 0x50
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fc61 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800636c:	e02c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fc27 	bl	8006bce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2160      	movs	r1, #96	; 0x60
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fc51 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 800638c:	e01c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fbe8 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc41 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80063ac:	e00c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f000 fc38 	bl	8006c2e <TIM_ITRx_SetConfig>
      break;
 80063be:	e003      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      break;
 80063c4:	e000      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d107      	bne.n	8006432 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006430:	e02a      	b.n	8006488 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2202      	movs	r2, #2
 8006440:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644a:	e01d      	b.n	8006488 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d107      	bne.n	8006466 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2204      	movs	r2, #4
 800645a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006464:	e010      	b.n	8006488 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d107      	bne.n	8006480 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2208      	movs	r2, #8
 8006474:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800647e:	e003      	b.n	8006488 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff ffb4 	bl	80063f6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d10b      	bne.n	80064cc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d136      	bne.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ca:	e031      	b.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d10b      	bne.n	80064ee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2202      	movs	r2, #2
 80064da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d125      	bne.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ec:	e020      	b.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d10b      	bne.n	8006510 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2204      	movs	r2, #4
 80064fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d114      	bne.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650e:	e00f      	b.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d10a      	bne.n	8006530 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2208      	movs	r2, #8
 800651e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 faeb 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d103      	bne.n	8006564 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	771a      	strb	r2, [r3, #28]
 8006562:	e019      	b.n	8006598 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d103      	bne.n	8006576 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2202      	movs	r2, #2
 8006572:	771a      	strb	r2, [r3, #28]
 8006574:	e010      	b.n	8006598 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d103      	bne.n	8006588 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2204      	movs	r2, #4
 8006584:	771a      	strb	r2, [r3, #28]
 8006586:	e007      	b.n	8006598 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d102      	bne.n	8006598 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2208      	movs	r2, #8
 8006596:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ff22 	bl	80063e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <TIM_Base_SetConfig+0xbc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0x20>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d108      	bne.n	80065de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_Base_SetConfig+0xbc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_Base_SetConfig+0x52>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ec:	d007      	beq.n	80065fe <TIM_Base_SetConfig+0x52>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1e      	ldr	r2, [pc, #120]	; (800666c <TIM_Base_SetConfig+0xc0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_Base_SetConfig+0x52>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <TIM_Base_SetConfig+0xc4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a0c      	ldr	r2, [pc, #48]	; (8006668 <TIM_Base_SetConfig+0xbc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_Base_SetConfig+0xa0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0b      	ldr	r2, [pc, #44]	; (800666c <TIM_Base_SetConfig+0xc0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0xa0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <TIM_Base_SetConfig+0xc4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d103      	bne.n	8006654 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	615a      	str	r2, [r3, #20]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400

08006674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0302 	bic.w	r3, r3, #2
 80066c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a24      	ldr	r2, [pc, #144]	; (8006760 <TIM_OC1_SetConfig+0xec>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_OC1_SetConfig+0x70>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a23      	ldr	r2, [pc, #140]	; (8006764 <TIM_OC1_SetConfig+0xf0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC1_SetConfig+0x70>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a22      	ldr	r2, [pc, #136]	; (8006768 <TIM_OC1_SetConfig+0xf4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a17      	ldr	r2, [pc, #92]	; (8006760 <TIM_OC1_SetConfig+0xec>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_OC1_SetConfig+0xa2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a16      	ldr	r2, [pc, #88]	; (8006764 <TIM_OC1_SetConfig+0xf0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC1_SetConfig+0xa2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a15      	ldr	r2, [pc, #84]	; (8006768 <TIM_OC1_SetConfig+0xf4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d111      	bne.n	800673a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400

0800676c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f023 0210 	bic.w	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0320 	bic.w	r3, r3, #32
 80067ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a22      	ldr	r2, [pc, #136]	; (8006854 <TIM_OC2_SetConfig+0xe8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10d      	bne.n	80067ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <TIM_OC2_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_OC2_SetConfig+0x98>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <TIM_OC2_SetConfig+0xec>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC2_SetConfig+0x98>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a17      	ldr	r2, [pc, #92]	; (800685c <TIM_OC2_SetConfig+0xf0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d113      	bne.n	800682c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400

08006860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a21      	ldr	r2, [pc, #132]	; (8006944 <TIM_OC3_SetConfig+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d10d      	bne.n	80068de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a18      	ldr	r2, [pc, #96]	; (8006944 <TIM_OC3_SetConfig+0xe4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_OC3_SetConfig+0x96>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a17      	ldr	r2, [pc, #92]	; (8006948 <TIM_OC3_SetConfig+0xe8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC3_SetConfig+0x96>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <TIM_OC3_SetConfig+0xec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d113      	bne.n	800691e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400

08006950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800699e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	031b      	lsls	r3, r3, #12
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <TIM_OC4_SetConfig+0xb0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_OC4_SetConfig+0x74>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <TIM_OC4_SetConfig+0xb4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC4_SetConfig+0x74>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <TIM_OC4_SetConfig+0xb8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d109      	bne.n	80069d8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400

08006a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <TIM_OC5_SetConfig+0xa4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_OC5_SetConfig+0x6a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <TIM_OC5_SetConfig+0xa8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC5_SetConfig+0x6a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a11      	ldr	r2, [pc, #68]	; (8006ab8 <TIM_OC5_SetConfig+0xac>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d109      	bne.n	8006a8a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400

08006abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	051b      	lsls	r3, r3, #20
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <TIM_OC6_SetConfig+0xa8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_OC6_SetConfig+0x6c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <TIM_OC6_SetConfig+0xac>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_OC6_SetConfig+0x6c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <TIM_OC6_SetConfig+0xb0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d109      	bne.n	8006b3c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400

08006b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 030a 	bic.w	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b087      	sub	sp, #28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0210 	bic.w	r2, r3, #16
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	031b      	lsls	r3, r3, #12
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f043 0307 	orr.w	r3, r3, #7
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	021a      	lsls	r2, r3, #8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e04f      	b.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a21      	ldr	r2, [pc, #132]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d004      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10c      	bne.n	8006d96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40014000 	.word	0x40014000

08006dbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e060      	b.n	8006e9a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d115      	bne.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	051b      	lsls	r3, r3, #20
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40012c00 	.word	0x40012c00

08006eac <board_init_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_rtc_init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8006eb0:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006eb2:	4a11      	ldr	r2, [pc, #68]	; (8006ef8 <board_init_rtc_init+0x4c>)
 8006eb4:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006ebe:	227f      	movs	r2, #127	; 0x7f
 8006ec0:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006ec4:	22ff      	movs	r2, #255	; 0xff
 8006ec6:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006eda:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8006ee0:	4804      	ldr	r0, [pc, #16]	; (8006ef4 <board_init_rtc_init+0x48>)
 8006ee2:	f7fe fb53 	bl	800558c <HAL_RTC_Init>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <board_init_rtc_init+0x44>
 8006eec:	f000 f9b9 	bl	8007262 <Error_Handler>
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20002150 	.word	0x20002150
 8006ef8:	40002800 	.word	0x40002800

08006efc <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b0ae      	sub	sp, #184	; 0xb8
 8006f00:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f06:	2244      	movs	r2, #68	; 0x44
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 ffcc 	bl	8007ea8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	225c      	movs	r2, #92	; 0x5c
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 ffbe 	bl	8007ea8 <memset>

    HAL_PWR_EnableBkUpAccess();
 8006f2c:	f7fd f940 	bl	80041b0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006f30:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <SystemClock_Config+0xcc>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <SystemClock_Config+0xcc>)
 8006f38:	f023 0318 	bic.w	r3, r3, #24
 8006f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006f40:	2305      	movs	r3, #5
 8006f42:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f48:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8006f54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fd fa0d 	bl	8004378 <HAL_RCC_OscConfig>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d000      	beq.n	8006f66 <SystemClock_Config+0x6a>
 8006f64:	e7fe      	b.n	8006f64 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f66:	230f      	movs	r3, #15
 8006f68:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006f72:	2300      	movs	r3, #0
 8006f74:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f76:	2300      	movs	r3, #0
 8006f78:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8006f7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd fe0d 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d000      	beq.n	8006f8e <SystemClock_Config+0x92>
 8006f8c:	e7fe      	b.n	8006f8c <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f92:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f98:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8006f9a:	1d3b      	adds	r3, r7, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fd ffeb 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <SystemClock_Config+0xb0>
 8006fa8:	f000 f95b 	bl	8007262 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8006fac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006fb0:	f7fd f98c 	bl	80042cc <HAL_PWREx_ControlVoltageScaling>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <SystemClock_Config+0xc2>
 8006fba:	f000 f952 	bl	8007262 <Error_Handler>
}
 8006fbe:	bf00      	nop
 8006fc0:	37b8      	adds	r7, #184	; 0xb8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000

08006fcc <board_init_timer_init>:


static void board_init_timer_init(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b09e      	sub	sp, #120	; 0x78
 8006fd0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	605a      	str	r2, [r3, #4]
 8006fec:	609a      	str	r2, [r3, #8]
 8006fee:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ff0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8006ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	611a      	str	r2, [r3, #16]
 800700c:	615a      	str	r2, [r3, #20]
 800700e:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007010:	463b      	mov	r3, r7
 8007012:	222c      	movs	r2, #44	; 0x2c
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f000 ff46 	bl	8007ea8 <memset>
    g_tim1_handle.Instance = TIM1;
 800701c:	4b5c      	ldr	r3, [pc, #368]	; (8007190 <board_init_timer_init+0x1c4>)
 800701e:	4a5d      	ldr	r2, [pc, #372]	; (8007194 <board_init_timer_init+0x1c8>)
 8007020:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8007022:	4b5b      	ldr	r3, [pc, #364]	; (8007190 <board_init_timer_init+0x1c4>)
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007028:	4b59      	ldr	r3, [pc, #356]	; (8007190 <board_init_timer_init+0x1c4>)
 800702a:	2200      	movs	r2, #0
 800702c:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800702e:	4b58      	ldr	r3, [pc, #352]	; (8007190 <board_init_timer_init+0x1c4>)
 8007030:	223b      	movs	r2, #59	; 0x3b
 8007032:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007034:	4b56      	ldr	r3, [pc, #344]	; (8007190 <board_init_timer_init+0x1c4>)
 8007036:	2200      	movs	r2, #0
 8007038:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800703a:	4b55      	ldr	r3, [pc, #340]	; (8007190 <board_init_timer_init+0x1c4>)
 800703c:	2200      	movs	r2, #0
 800703e:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007040:	4b53      	ldr	r3, [pc, #332]	; (8007190 <board_init_timer_init+0x1c4>)
 8007042:	2200      	movs	r2, #0
 8007044:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8007046:	4852      	ldr	r0, [pc, #328]	; (8007190 <board_init_timer_init+0x1c4>)
 8007048:	f7fe fc5f 	bl	800590a <HAL_TIM_Base_Init>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <board_init_timer_init+0x8a>
 8007052:	f000 f906 	bl	8007262 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800705c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007060:	4619      	mov	r1, r3
 8007062:	484b      	ldr	r0, [pc, #300]	; (8007190 <board_init_timer_init+0x1c4>)
 8007064:	f7ff f8f4 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <board_init_timer_init+0xa6>
 800706e:	f000 f8f8 	bl	8007262 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8007072:	4847      	ldr	r0, [pc, #284]	; (8007190 <board_init_timer_init+0x1c4>)
 8007074:	f7fe fca0 	bl	80059b8 <HAL_TIM_PWM_Init>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <board_init_timer_init+0xb6>
 800707e:	f000 f8f0 	bl	8007262 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007082:	2300      	movs	r3, #0
 8007084:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007086:	2300      	movs	r3, #0
 8007088:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800708a:	2300      	movs	r3, #0
 800708c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800708e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007092:	4619      	mov	r1, r3
 8007094:	483e      	ldr	r0, [pc, #248]	; (8007190 <board_init_timer_init+0x1c4>)
 8007096:	f7ff fe2b 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <board_init_timer_init+0xd8>
 80070a0:	f000 f8df 	bl	8007262 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070a4:	2360      	movs	r3, #96	; 0x60
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80070b8:	2300      	movs	r3, #0
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80070bc:	2300      	movs	r3, #0
 80070be:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80070c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070c4:	2200      	movs	r2, #0
 80070c6:	4619      	mov	r1, r3
 80070c8:	4831      	ldr	r0, [pc, #196]	; (8007190 <board_init_timer_init+0x1c4>)
 80070ca:	f7fe ffad 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <board_init_timer_init+0x10c>
 80070d4:	f000 f8c5 	bl	8007262 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80070d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070dc:	2204      	movs	r2, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	482b      	ldr	r0, [pc, #172]	; (8007190 <board_init_timer_init+0x1c4>)
 80070e2:	f7fe ffa1 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <board_init_timer_init+0x124>
 80070ec:	f000 f8b9 	bl	8007262 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 80070f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070f4:	2208      	movs	r2, #8
 80070f6:	4619      	mov	r1, r3
 80070f8:	4825      	ldr	r0, [pc, #148]	; (8007190 <board_init_timer_init+0x1c4>)
 80070fa:	f7fe ff95 	bl	8006028 <HAL_TIM_PWM_ConfigChannel>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <board_init_timer_init+0x13c>
 8007104:	f000 f8ad 	bl	8007262 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007108:	2300      	movs	r3, #0
 800710a:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800710c:	2300      	movs	r3, #0
 800710e:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007110:	2300      	movs	r3, #0
 8007112:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800711c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007120:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800712a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800712e:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007134:	2300      	movs	r3, #0
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8007138:	463b      	mov	r3, r7
 800713a:	4619      	mov	r1, r3
 800713c:	4814      	ldr	r0, [pc, #80]	; (8007190 <board_init_timer_init+0x1c4>)
 800713e:	f7ff fe3d 	bl	8006dbc <HAL_TIMEx_ConfigBreakDeadTime>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <board_init_timer_init+0x180>
 8007148:	f000 f88b 	bl	8007262 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800714c:	2100      	movs	r1, #0
 800714e:	4810      	ldr	r0, [pc, #64]	; (8007190 <board_init_timer_init+0x1c4>)
 8007150:	f7fe fe82 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8007154:	2104      	movs	r1, #4
 8007156:	480e      	ldr	r0, [pc, #56]	; (8007190 <board_init_timer_init+0x1c4>)
 8007158:	f7fe fe7e 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800715c:	2108      	movs	r1, #8
 800715e:	480c      	ldr	r0, [pc, #48]	; (8007190 <board_init_timer_init+0x1c4>)
 8007160:	f7fe fe7a 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8007164:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007168:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800716a:	2302      	movs	r3, #2
 800716c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716e:	2300      	movs	r3, #0
 8007170:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007172:	2300      	movs	r3, #0
 8007174:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007176:	2301      	movs	r3, #1
 8007178:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800717a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007184:	f7fc fe6a 	bl	8003e5c <HAL_GPIO_Init>
}
 8007188:	bf00      	nop
 800718a:	3778      	adds	r7, #120	; 0x78
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20002174 	.word	0x20002174
 8007194:	40012c00 	.word	0x40012c00

08007198 <board_init_port_wakeup>:
//    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
//}


static void board_init_port_wakeup(void)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	4a20      	ldr	r2, [pc, #128]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071c2:	4b18      	ldr	r3, [pc, #96]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	4a14      	ldr	r2, [pc, #80]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071d4:	f043 0304 	orr.w	r3, r3, #4
 80071d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ea:	4a0e      	ldr	r2, [pc, #56]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <board_init_port_wakeup+0x8c>)
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <board_init_port_wakeup+0x8c>)
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	4a08      	ldr	r2, [pc, #32]	; (8007224 <board_init_port_wakeup+0x8c>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6493      	str	r3, [r2, #72]	; 0x48
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <board_init_port_wakeup+0x8c>)
 800720c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40021000 	.word	0x40021000

08007228 <board_init>:


void board_init(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
    srand(time(0));
 800722c:	2000      	movs	r0, #0
 800722e:	f000 ff61 	bl	80080f4 <time>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4613      	mov	r3, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ff1d 	bl	8008078 <srand>
    HAL_Init();
 800723e:	f7fc f9c5 	bl	80035cc <HAL_Init>
    SystemClock_Config();
 8007242:	f7ff fe5b 	bl	8006efc <SystemClock_Config>

    board_init_port_wakeup();
 8007246:	f7ff ffa7 	bl	8007198 <board_init_port_wakeup>
    gpio_config_init();
 800724a:	f000 f80f 	bl	800726c <gpio_config_init>
    board_init_timer_init();
 800724e:	f7ff febd 	bl	8006fcc <board_init_timer_init>

    ws2812b_init();
 8007252:	f7f9 fa9f 	bl	8000794 <ws2812b_init>

    board_init_rtc_init();
 8007256:	f7ff fe29 	bl	8006eac <board_init_rtc_init>
    spi_access_setup();
 800725a:	f000 f909 	bl	8007470 <spi_access_setup>
}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}

08007262 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007262:	b480      	push	{r7}
 8007264:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007266:	b672      	cpsid	i
}
 8007268:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800726a:	e7fe      	b.n	800726a <Error_Handler+0x8>

0800726c <gpio_config_init>:


extern gpio_config_t gpio_config[GPIO_CONFIG_NUM_PINS];

void gpio_config_init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
    for (gpio_config_pin_e pin = GPIO_CONFIG_PIN_FIRST;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e0ed      	b.n	8007454 <gpio_config_init+0x1e8>
                    pin < GPIO_CONFIG_NUM_PINS;
                    pin = (gpio_config_pin_e)(pin + 1))
    {
        GPIO_PinState output_lvl = GPIO_PIN_RESET;
 8007278:	2300      	movs	r3, #0
 800727a:	75bb      	strb	r3, [r7, #22]
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727c:	463b      	mov	r3, r7
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	609a      	str	r2, [r3, #8]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	611a      	str	r2, [r3, #16]
        GPIO_InitStruct.Pin = gpio_config[pin].pin;
 800728a:	7dfa      	ldrb	r2, [r7, #23]
 800728c:	4976      	ldr	r1, [pc, #472]	; (8007468 <gpio_config_init+0x1fc>)
 800728e:	4613      	mov	r3, r2
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	603b      	str	r3, [r7, #0]
        switch (gpio_config[pin].pin_mode)
 800729c:	7dfa      	ldrb	r2, [r7, #23]
 800729e:	4972      	ldr	r1, [pc, #456]	; (8007468 <gpio_config_init+0x1fc>)
 80072a0:	4613      	mov	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3308      	adds	r3, #8
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d84c      	bhi.n	800734e <gpio_config_init+0xe2>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <gpio_config_init+0x50>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072d1 	.word	0x080072d1
 80072c0:	080072db 	.word	0x080072db
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072ef 	.word	0x080072ef
 80072cc:	08007345 	.word	0x08007345
        {
            case GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL:
                GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072d0:	2301      	movs	r3, #1
 80072d2:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
            break;
 80072d8:	e03a      	b.n	8007350 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_OUTPUT_OPEN_DRAIN:
                GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80072da:	2311      	movs	r3, #17
 80072dc:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072de:	2301      	movs	r3, #1
 80072e0:	60bb      	str	r3, [r7, #8]
            break;
 80072e2:	e035      	b.n	8007350 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_FLOAT:
                GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072e4:	2300      	movs	r3, #0
 80072e6:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60bb      	str	r3, [r7, #8]
            break;
 80072ec:	e030      	b.n	8007350 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_PULLUP:
                if (GPIO_CONFIG_PIN_INTERRUPT_ENABLE == gpio_config[pin].interrupt)
 80072ee:	7dfa      	ldrb	r2, [r7, #23]
 80072f0:	495d      	ldr	r1, [pc, #372]	; (8007468 <gpio_config_init+0x1fc>)
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	440b      	add	r3, r1
 80072fc:	3309      	adds	r3, #9
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d119      	bne.n	8007338 <gpio_config_init+0xcc>
                {
                    switch (gpio_config[pin].pin_mode)
 8007304:	7dfa      	ldrb	r2, [r7, #23]
 8007306:	4958      	ldr	r1, [pc, #352]	; (8007468 <gpio_config_init+0x1fc>)
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	3308      	adds	r3, #8
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d002      	beq.n	8007320 <gpio_config_init+0xb4>
 800731a:	2b05      	cmp	r3, #5
 800731c:	d006      	beq.n	800732c <gpio_config_init+0xc0>
                        case GPIO_CONFIG_PIN_MODE_INPUT_PULLDOWN:
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
                            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
                        break;
                        default:
                        break;
 800731e:	e010      	b.n	8007342 <gpio_config_init+0xd6>
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007320:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007324:	607b      	str	r3, [r7, #4]
                            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007326:	2301      	movs	r3, #1
 8007328:	60bb      	str	r3, [r7, #8]
                        break;
 800732a:	e00a      	b.n	8007342 <gpio_config_init+0xd6>
                            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800732c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007330:	607b      	str	r3, [r7, #4]
                            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007332:	2302      	movs	r3, #2
 8007334:	60bb      	str	r3, [r7, #8]
                        break;
 8007336:	e004      	b.n	8007342 <gpio_config_init+0xd6>
                    }
                }
                else
                {
                    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007338:	2300      	movs	r3, #0
 800733a:	607b      	str	r3, [r7, #4]
                    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800733c:	2301      	movs	r3, #1
 800733e:	60bb      	str	r3, [r7, #8]
                }
            break;
 8007340:	e006      	b.n	8007350 <gpio_config_init+0xe4>
 8007342:	e005      	b.n	8007350 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_INPUT_PULLDOWN:
                GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007344:	2300      	movs	r3, #0
 8007346:	607b      	str	r3, [r7, #4]
                GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007348:	2302      	movs	r3, #2
 800734a:	60bb      	str	r3, [r7, #8]
            break;
 800734c:	e000      	b.n	8007350 <gpio_config_init+0xe4>
            case GPIO_CONFIG_PIN_MODE_ALTERNATE_FUNCTION: // fall through
            case GPIO_CONFIG_PIN_MODE_NO_SETUP: // fall through
            default:
            break;
 800734e:	bf00      	nop
        }
        HAL_GPIO_Init(gpio_config[pin].port, &GPIO_InitStruct);
 8007350:	7dfa      	ldrb	r2, [r7, #23]
 8007352:	4945      	ldr	r1, [pc, #276]	; (8007468 <gpio_config_init+0x1fc>)
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	3304      	adds	r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	463a      	mov	r2, r7
 8007364:	4611      	mov	r1, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f7fc fd78 	bl	8003e5c <HAL_GPIO_Init>
        switch (gpio_config[pin].pin_mode)
 800736c:	7dfa      	ldrb	r2, [r7, #23]
 800736e:	493e      	ldr	r1, [pc, #248]	; (8007468 <gpio_config_init+0x1fc>)
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	3308      	adds	r3, #8
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	2b01      	cmp	r3, #1
 8007382:	d824      	bhi.n	80073ce <gpio_config_init+0x162>
        {
            case GPIO_CONFIG_PIN_MODE_OUTPUT_PUSH_PULL:
            case GPIO_CONFIG_PIN_MODE_OUTPUT_OPEN_DRAIN:
                output_lvl = ((gpio_config[pin].output_lvl == GPIO_CONFIG_OUTPUT_LVL_HIGH) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007384:	7dfa      	ldrb	r2, [r7, #23]
 8007386:	4938      	ldr	r1, [pc, #224]	; (8007468 <gpio_config_init+0x1fc>)
 8007388:	4613      	mov	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	330b      	adds	r3, #11
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	75bb      	strb	r3, [r7, #22]
                HAL_GPIO_WritePin(gpio_config[pin].port, gpio_config[pin].pin, output_lvl);
 80073a2:	7dfa      	ldrb	r2, [r7, #23]
 80073a4:	4930      	ldr	r1, [pc, #192]	; (8007468 <gpio_config_init+0x1fc>)
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3304      	adds	r3, #4
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	7dfa      	ldrb	r2, [r7, #23]
 80073b6:	492c      	ldr	r1, [pc, #176]	; (8007468 <gpio_config_init+0x1fc>)
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	7dba      	ldrb	r2, [r7, #22]
 80073c6:	4619      	mov	r1, r3
 80073c8:	f7fc fec2 	bl	8004150 <HAL_GPIO_WritePin>
            break;
 80073cc:	e000      	b.n	80073d0 <gpio_config_init+0x164>
            default:
            break;
 80073ce:	bf00      	nop
        }
        if (GPIO_CONFIG_PIN_INTERRUPT_ENABLE == gpio_config[pin].interrupt)
 80073d0:	7dfa      	ldrb	r2, [r7, #23]
 80073d2:	4925      	ldr	r1, [pc, #148]	; (8007468 <gpio_config_init+0x1fc>)
 80073d4:	4613      	mov	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3309      	adds	r3, #9
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d133      	bne.n	800744e <gpio_config_init+0x1e2>
        {
            __HAL_GPIO_EXTI_CLEAR_IT(gpio_config[pin].interrupt_type);
 80073e6:	7dfa      	ldrb	r2, [r7, #23]
 80073e8:	491f      	ldr	r1, [pc, #124]	; (8007468 <gpio_config_init+0x1fc>)
 80073ea:	4613      	mov	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	330a      	adds	r3, #10
 80073f6:	f993 2000 	ldrsb.w	r2, [r3]
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <gpio_config_init+0x200>)
 80073fc:	615a      	str	r2, [r3, #20]
            HAL_NVIC_SetPriority(gpio_config[pin].interrupt_type, 24, 0);
 80073fe:	7dfa      	ldrb	r2, [r7, #23]
 8007400:	4919      	ldr	r1, [pc, #100]	; (8007468 <gpio_config_init+0x1fc>)
 8007402:	4613      	mov	r3, r2
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	330a      	adds	r3, #10
 800740e:	f993 3000 	ldrsb.w	r3, [r3]
 8007412:	2200      	movs	r2, #0
 8007414:	2118      	movs	r1, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fc fa5b 	bl	80038d2 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(gpio_config[pin].interrupt_type);
 800741c:	7dfa      	ldrb	r2, [r7, #23]
 800741e:	4912      	ldr	r1, [pc, #72]	; (8007468 <gpio_config_init+0x1fc>)
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	330a      	adds	r3, #10
 800742c:	f993 3000 	ldrsb.w	r3, [r3]
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc fa6a 	bl	800390a <HAL_NVIC_EnableIRQ>
            __HAL_GPIO_EXTI_CLEAR_IT(gpio_config[pin].interrupt_type);
 8007436:	7dfa      	ldrb	r2, [r7, #23]
 8007438:	490b      	ldr	r1, [pc, #44]	; (8007468 <gpio_config_init+0x1fc>)
 800743a:	4613      	mov	r3, r2
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	330a      	adds	r3, #10
 8007446:	f993 2000 	ldrsb.w	r2, [r3]
 800744a:	4b08      	ldr	r3, [pc, #32]	; (800746c <gpio_config_init+0x200>)
 800744c:	615a      	str	r2, [r3, #20]
                    pin = (gpio_config_pin_e)(pin + 1))
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	3301      	adds	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
    for (gpio_config_pin_e pin = GPIO_CONFIG_PIN_FIRST;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b33      	cmp	r3, #51	; 0x33
 8007458:	f67f af0e 	bls.w	8007278 <gpio_config_init+0xc>
        }
    }
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000078 	.word	0x20000078
 800746c:	40010400 	.word	0x40010400

08007470 <spi_access_setup>:
    .Init.Mode              = SPI_MODE_MASTER
};


void spi_access_setup(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin         = PIN_ESP8266_SCK | PIN_ESP8266_CIPO | PIN_ESP8266_COPI;
 8007476:	f641 0302 	movw	r3, #6146	; 0x1802
 800747a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800747c:	2302      	movs	r3, #2
 800747e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 8007480:	2302      	movs	r3, #2
 8007482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 8007484:	2303      	movs	r3, #3
 8007486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate   = GPIO_AF5_SPI1;
 8007488:	2305      	movs	r3, #5
 800748a:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007494:	f7fc fce2 	bl	8003e5c <HAL_GPIO_Init>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <spi_access_setup+0x58>)
 800749a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <spi_access_setup+0x58>)
 800749e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074a2:	6613      	str	r3, [r2, #96]	; 0x60
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <spi_access_setup+0x58>)
 80074a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
    if(HAL_SPI_Init(&gh_disp_spi) != HAL_OK)
 80074b0:	4806      	ldr	r0, [pc, #24]	; (80074cc <spi_access_setup+0x5c>)
 80074b2:	f7fe f97d 	bl	80057b0 <HAL_SPI_Init>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d000      	beq.n	80074be <spi_access_setup+0x4e>
    {
        /* Initialization Error */
        while(1);
 80074bc:	e7fe      	b.n	80074bc <spi_access_setup+0x4c>
    }
}
 80074be:	bf00      	nop
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40021000 	.word	0x40021000
 80074cc:	20000014 	.word	0x20000014

080074d0 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80074d4:	4a0d      	ldr	r2, [pc, #52]	; (800750c <HAL_Set_DMA_Callbacks+0x3c>)
 80074d6:	2100      	movs	r1, #0
 80074d8:	480d      	ldr	r0, [pc, #52]	; (8007510 <HAL_Set_DMA_Callbacks+0x40>)
 80074da:	f7fc fc47 	bl	8003d6c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80074de:	4a0b      	ldr	r2, [pc, #44]	; (800750c <HAL_Set_DMA_Callbacks+0x3c>)
 80074e0:	2100      	movs	r1, #0
 80074e2:	480c      	ldr	r0, [pc, #48]	; (8007514 <HAL_Set_DMA_Callbacks+0x44>)
 80074e4:	f7fc fc42 	bl	8003d6c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <HAL_Set_DMA_Callbacks+0x3c>)
 80074ea:	2100      	movs	r1, #0
 80074ec:	480a      	ldr	r0, [pc, #40]	; (8007518 <HAL_Set_DMA_Callbacks+0x48>)
 80074ee:	f7fc fc3d 	bl	8003d6c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80074f2:	4a06      	ldr	r2, [pc, #24]	; (800750c <HAL_Set_DMA_Callbacks+0x3c>)
 80074f4:	2100      	movs	r1, #0
 80074f6:	4809      	ldr	r0, [pc, #36]	; (800751c <HAL_Set_DMA_Callbacks+0x4c>)
 80074f8:	f7fc fc38 	bl	8003d6c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80074fc:	4a03      	ldr	r2, [pc, #12]	; (800750c <HAL_Set_DMA_Callbacks+0x3c>)
 80074fe:	2100      	movs	r1, #0
 8007500:	4807      	ldr	r0, [pc, #28]	; (8007520 <HAL_Set_DMA_Callbacks+0x50>)
 8007502:	f7fc fc33 	bl	8003d6c <HAL_DMA_RegisterCallback>
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	08007b03 	.word	0x08007b03
 8007510:	20001fe8 	.word	0x20001fe8
 8007514:	20002030 	.word	0x20002030
 8007518:	20002078 	.word	0x20002078
 800751c:	200020c0 	.word	0x200020c0
 8007520:	20002108 	.word	0x20002108

08007524 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <HAL_MspInit+0x60>)
 8007536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007538:	4a12      	ldr	r2, [pc, #72]	; (8007584 <HAL_MspInit+0x60>)
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	6613      	str	r3, [r2, #96]	; 0x60
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <HAL_MspInit+0x60>)
 8007542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800754c:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <HAL_MspInit+0x60>)
 800754e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007550:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <HAL_MspInit+0x60>)
 8007552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007556:	6593      	str	r3, [r2, #88]	; 0x58
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <HAL_MspInit+0x60>)
 800755a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8007564:	2300      	movs	r3, #0
 8007566:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fe2d 	bl	80041d0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8007576:	f7fc fe8b 	bl	8004290 <HAL_PWR_EnablePVD>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40021000 	.word	0x40021000

08007588 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <HAL_RTC_MspInit+0x30>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d107      	bne.n	80075aa <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800759a:	4b08      	ldr	r3, [pc, #32]	; (80075bc <HAL_RTC_MspInit+0x34>)
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a0:	4a06      	ldr	r2, [pc, #24]	; (80075bc <HAL_RTC_MspInit+0x34>)
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40002800 	.word	0x40002800
 80075bc:	40021000 	.word	0x40021000

080075c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a6e      	ldr	r2, [pc, #440]	; (8007788 <HAL_TIM_Base_MspInit+0x1c8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	f040 8091 	bne.w	80076f6 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075d4:	4b6d      	ldr	r3, [pc, #436]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 80075d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d8:	4a6c      	ldr	r2, [pc, #432]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 80075da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075de:	6613      	str	r3, [r2, #96]	; 0x60
 80075e0:	4b6a      	ldr	r3, [pc, #424]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 80075e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 80075ee:	4a69      	ldr	r2, [pc, #420]	; (8007794 <HAL_TIM_Base_MspInit+0x1d4>)
 80075f0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80075f2:	4b67      	ldr	r3, [pc, #412]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 80075f4:	2207      	movs	r2, #7
 80075f6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075f8:	4b65      	ldr	r3, [pc, #404]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 80075fa:	2210      	movs	r2, #16
 80075fc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80075fe:	4b64      	ldr	r3, [pc, #400]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 8007600:	2200      	movs	r2, #0
 8007602:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007604:	4b62      	ldr	r3, [pc, #392]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800760a:	4b61      	ldr	r3, [pc, #388]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 800760c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007610:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007612:	4b5f      	ldr	r3, [pc, #380]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 8007614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007618:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800761a:	4b5d      	ldr	r3, [pc, #372]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 800761c:	2200      	movs	r2, #0
 800761e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007620:	4b5b      	ldr	r3, [pc, #364]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 8007622:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007626:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8007628:	4859      	ldr	r0, [pc, #356]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 800762a:	f7fc f997 	bl	800395c <HAL_DMA_Init>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8007634:	f7ff fe15 	bl	8007262 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a55      	ldr	r2, [pc, #340]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
 800763e:	4a54      	ldr	r2, [pc, #336]	; (8007790 <HAL_TIM_Base_MspInit+0x1d0>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8007644:	4b54      	ldr	r3, [pc, #336]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007646:	4a55      	ldr	r2, [pc, #340]	; (800779c <HAL_TIM_Base_MspInit+0x1dc>)
 8007648:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800764a:	4b53      	ldr	r3, [pc, #332]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 800764c:	2207      	movs	r2, #7
 800764e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007650:	4b51      	ldr	r3, [pc, #324]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007652:	2210      	movs	r2, #16
 8007654:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007656:	4b50      	ldr	r3, [pc, #320]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007658:	2200      	movs	r2, #0
 800765a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800765c:	4b4e      	ldr	r3, [pc, #312]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007668:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800766a:	4b4b      	ldr	r3, [pc, #300]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 800766c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007670:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8007672:	4b49      	ldr	r3, [pc, #292]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007674:	2200      	movs	r2, #0
 8007676:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007678:	4b47      	ldr	r3, [pc, #284]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 800767a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800767e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8007680:	4845      	ldr	r0, [pc, #276]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007682:	f7fc f96b 	bl	800395c <HAL_DMA_Init>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800768c:	f7ff fde9 	bl	8007262 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a41      	ldr	r2, [pc, #260]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007694:	629a      	str	r2, [r3, #40]	; 0x28
 8007696:	4a40      	ldr	r2, [pc, #256]	; (8007798 <HAL_TIM_Base_MspInit+0x1d8>)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800769c:	4b40      	ldr	r3, [pc, #256]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 800769e:	4a41      	ldr	r2, [pc, #260]	; (80077a4 <HAL_TIM_Base_MspInit+0x1e4>)
 80076a0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 80076a2:	4b3f      	ldr	r3, [pc, #252]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076a4:	2207      	movs	r2, #7
 80076a6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076a8:	4b3d      	ldr	r3, [pc, #244]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076aa:	2210      	movs	r2, #16
 80076ac:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ae:	4b3c      	ldr	r3, [pc, #240]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80076b4:	4b3a      	ldr	r3, [pc, #232]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80076ca:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80076d0:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076d2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80076d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80076d8:	4831      	ldr	r0, [pc, #196]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076da:	f7fc f93f 	bl	800395c <HAL_DMA_Init>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 80076e4:	f7ff fdbd 	bl	8007262 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80076ee:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <HAL_TIM_Base_MspInit+0x1e0>)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6293      	str	r3, [r2, #40]	; 0x28
 80076f4:	e041      	b.n	800777a <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a2b      	ldr	r2, [pc, #172]	; (80077a8 <HAL_TIM_Base_MspInit+0x1e8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d13c      	bne.n	800777a <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007700:	4b22      	ldr	r3, [pc, #136]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	4a21      	ldr	r2, [pc, #132]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 8007706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770a:	6613      	str	r3, [r2, #96]	; 0x60
 800770c:	4b1f      	ldr	r3, [pc, #124]	; (800778c <HAL_TIM_Base_MspInit+0x1cc>)
 800770e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 800771a:	4a25      	ldr	r2, [pc, #148]	; (80077b0 <HAL_TIM_Base_MspInit+0x1f0>)
 800771c:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800771e:	4b23      	ldr	r3, [pc, #140]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007720:	2204      	movs	r2, #4
 8007722:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007724:	4b21      	ldr	r3, [pc, #132]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007726:	2210      	movs	r2, #16
 8007728:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800772a:	4b20      	ldr	r3, [pc, #128]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 800772c:	2200      	movs	r2, #0
 800772e:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8007730:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007732:	2280      	movs	r2, #128	; 0x80
 8007734:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800773c:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800773e:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007744:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007748:	2200      	movs	r2, #0
 800774a:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800774c:	4b17      	ldr	r3, [pc, #92]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 800774e:	2200      	movs	r2, #0
 8007750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8007752:	4816      	ldr	r0, [pc, #88]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007754:	f7fc f902 	bl	800395c <HAL_DMA_Init>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800775e:	f7ff fd80 	bl	8007262 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a11      	ldr	r2, [pc, #68]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
 8007768:	4a10      	ldr	r2, [pc, #64]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a0e      	ldr	r2, [pc, #56]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <HAL_TIM_Base_MspInit+0x1ec>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800777a:	f7ff fea9 	bl	80074d0 <HAL_Set_DMA_Callbacks>
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40021000 	.word	0x40021000
 8007790:	20001fe8 	.word	0x20001fe8
 8007794:	4002001c 	.word	0x4002001c
 8007798:	20002030 	.word	0x20002030
 800779c:	40020030 	.word	0x40020030
 80077a0:	20002078 	.word	0x20002078
 80077a4:	40020080 	.word	0x40020080
 80077a8:	40014400 	.word	0x40014400
 80077ac:	20002108 	.word	0x20002108
 80077b0:	4002006c 	.word	0x4002006c

080077b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a28      	ldr	r2, [pc, #160]	; (8007864 <HAL_TIM_PWM_MspInit+0xb0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d149      	bne.n	800785a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80077c6:	4b28      	ldr	r3, [pc, #160]	; (8007868 <HAL_TIM_PWM_MspInit+0xb4>)
 80077c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ca:	4a27      	ldr	r2, [pc, #156]	; (8007868 <HAL_TIM_PWM_MspInit+0xb4>)
 80077cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d0:	6613      	str	r3, [r2, #96]	; 0x60
 80077d2:	4b25      	ldr	r3, [pc, #148]	; (8007868 <HAL_TIM_PWM_MspInit+0xb4>)
 80077d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 80077de:	4b23      	ldr	r3, [pc, #140]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077e0:	4a23      	ldr	r2, [pc, #140]	; (8007870 <HAL_TIM_PWM_MspInit+0xbc>)
 80077e2:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 80077e4:	4b21      	ldr	r3, [pc, #132]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077e6:	2207      	movs	r2, #7
 80077e8:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077ea:	4b20      	ldr	r3, [pc, #128]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077ec:	2210      	movs	r2, #16
 80077ee:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80077f6:	4b1d      	ldr	r3, [pc, #116]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 80077fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007802:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800780a:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800780c:	4b17      	ldr	r3, [pc, #92]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800780e:	2200      	movs	r2, #0
 8007810:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007812:	4b16      	ldr	r3, [pc, #88]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007814:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007818:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800781a:	4814      	ldr	r0, [pc, #80]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800781c:	f7fc f89e 	bl	800395c <HAL_DMA_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8007826:	f7ff fd1c 	bl	8007262 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a0f      	ldr	r2, [pc, #60]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800782e:	625a      	str	r2, [r3, #36]	; 0x24
 8007830:	4a0e      	ldr	r2, [pc, #56]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a0c      	ldr	r2, [pc, #48]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800783a:	621a      	str	r2, [r3, #32]
 800783c:	4a0b      	ldr	r2, [pc, #44]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a09      	ldr	r2, [pc, #36]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
 8007848:	4a08      	ldr	r2, [pc, #32]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a06      	ldr	r2, [pc, #24]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007852:	635a      	str	r2, [r3, #52]	; 0x34
 8007854:	4a05      	ldr	r2, [pc, #20]	; (800786c <HAL_TIM_PWM_MspInit+0xb8>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40014000 	.word	0x40014000
 8007868:	40021000 	.word	0x40021000
 800786c:	200020c0 	.word	0x200020c0
 8007870:	40020058 	.word	0x40020058

08007874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800787a:	2300      	movs	r3, #0
 800787c:	71fb      	strb	r3, [r7, #7]
 800787e:	e005      	b.n	800788c <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8007880:	2064      	movs	r0, #100	; 0x64
 8007882:	f7fb ff03 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	3301      	adds	r3, #1
 800788a:	71fb      	strb	r3, [r7, #7]
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f6      	beq.n	8007880 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8007892:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007896:	f7fb fef9 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800789a:	e7ee      	b.n	800787a <NMI_Handler+0x6>

0800789c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 80078a2:	2300      	movs	r3, #0
 80078a4:	71fb      	strb	r3, [r7, #7]
 80078a6:	e005      	b.n	80078b4 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80078a8:	2064      	movs	r0, #100	; 0x64
 80078aa:	f7fb feef 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	3301      	adds	r3, #1
 80078b2:	71fb      	strb	r3, [r7, #7]
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d9f6      	bls.n	80078a8 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80078ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078be:	f7fb fee5 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 80078c2:	e7ee      	b.n	80078a2 <HardFault_Handler+0x6>

080078c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	71fb      	strb	r3, [r7, #7]
 80078ce:	e005      	b.n	80078dc <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80078d0:	2064      	movs	r0, #100	; 0x64
 80078d2:	f7fb fedb 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	3301      	adds	r3, #1
 80078da:	71fb      	strb	r3, [r7, #7]
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d9f6      	bls.n	80078d0 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80078e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078e6:	f7fb fed1 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 80078ea:	e7ee      	b.n	80078ca <MemManage_Handler+0x6>

080078ec <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	71fb      	strb	r3, [r7, #7]
 80078f6:	e005      	b.n	8007904 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80078f8:	2064      	movs	r0, #100	; 0x64
 80078fa:	f7fb fec7 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	3301      	adds	r3, #1
 8007902:	71fb      	strb	r3, [r7, #7]
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d9f6      	bls.n	80078f8 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800790a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800790e:	f7fb febd 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8007912:	e7ee      	b.n	80078f2 <BusFault_Handler+0x6>

08007914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800791a:	2300      	movs	r3, #0
 800791c:	71fb      	strb	r3, [r7, #7]
 800791e:	e005      	b.n	800792c <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	f7fb feb3 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	3301      	adds	r3, #1
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b04      	cmp	r3, #4
 8007930:	d9f6      	bls.n	8007920 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8007932:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007936:	f7fb fea9 	bl	800368c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800793a:	e7ee      	b.n	800791a <UsageFault_Handler+0x6>

0800793c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
}
 8007940:	bf00      	nop
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b087      	sub	sp, #28
 8007950:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 8007952:	2301      	movs	r3, #1
 8007954:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_D;
 8007956:	2303      	movs	r3, #3
 8007958:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800795a:	2306      	movs	r3, #6
 800795c:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	4618      	mov	r0, r3
 8007962:	f7fc fc0d 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8007966:	89ba      	ldrh	r2, [r7, #12]
 8007968:	89bb      	ldrh	r3, [r7, #12]
 800796a:	4910      	ldr	r1, [pc, #64]	; (80079ac <EXTI0_IRQHandler+0x60>)
 800796c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8007970:	490e      	ldr	r1, [pc, #56]	; (80079ac <EXTI0_IRQHandler+0x60>)
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	440b      	add	r3, r1
 8007976:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007978:	89bc      	ldrh	r4, [r7, #12]
 800797a:	f7fa f9ad 	bl	8001cd8 <xTaskGetTickCountFromISR>
 800797e:	4603      	mov	r3, r0
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <EXTI0_IRQHandler+0x60>)
 8007982:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8007986:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb ffcb 	bl	8003926 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <EXTI0_IRQHandler+0x64>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	89b9      	ldrh	r1, [r7, #12]
 8007996:	1d3b      	adds	r3, r7, #4
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	2203      	movs	r2, #3
 800799e:	f7fa fd5f 	bl	8002460 <xTaskGenericNotifyFromISR>
}
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd90      	pop	{r4, r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200006bc 	.word	0x200006bc
 80079b0:	200021c8 	.word	0x200021c8

080079b4 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 80079ba:	2304      	movs	r3, #4
 80079bc:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_A;
 80079be:	2300      	movs	r3, #0
 80079c0:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 80079c2:	2308      	movs	r3, #8
 80079c4:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80079c6:	89fb      	ldrh	r3, [r7, #14]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fc fbd9 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80079ce:	89ba      	ldrh	r2, [r7, #12]
 80079d0:	89bb      	ldrh	r3, [r7, #12]
 80079d2:	4910      	ldr	r1, [pc, #64]	; (8007a14 <EXTI2_IRQHandler+0x60>)
 80079d4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80079d8:	490e      	ldr	r1, [pc, #56]	; (8007a14 <EXTI2_IRQHandler+0x60>)
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	440b      	add	r3, r1
 80079de:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80079e0:	89bc      	ldrh	r4, [r7, #12]
 80079e2:	f7fa f979 	bl	8001cd8 <xTaskGetTickCountFromISR>
 80079e6:	4603      	mov	r3, r0
 80079e8:	4a0a      	ldr	r2, [pc, #40]	; (8007a14 <EXTI2_IRQHandler+0x60>)
 80079ea:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80079ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fb ff97 	bl	8003926 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80079f8:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <EXTI2_IRQHandler+0x64>)
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	89b9      	ldrh	r1, [r7, #12]
 80079fe:	1d3b      	adds	r3, r7, #4
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	2203      	movs	r2, #3
 8007a06:	f7fa fd2b 	bl	8002460 <xTaskGenericNotifyFromISR>
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200006bc 	.word	0x200006bc
 8007a18:	200021c8 	.word	0x200021c8

08007a1c <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a1c:	b590      	push	{r4, r7, lr}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 8007a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a26:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_B;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 8007a2c:	2328      	movs	r3, #40	; 0x28
 8007a2e:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8007a30:	89fb      	ldrh	r3, [r7, #14]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fc fba4 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8007a38:	89ba      	ldrh	r2, [r7, #12]
 8007a3a:	89bb      	ldrh	r3, [r7, #12]
 8007a3c:	490f      	ldr	r1, [pc, #60]	; (8007a7c <EXTI15_10_IRQHandler+0x60>)
 8007a3e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8007a42:	490e      	ldr	r1, [pc, #56]	; (8007a7c <EXTI15_10_IRQHandler+0x60>)
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	440b      	add	r3, r1
 8007a48:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007a4a:	89bc      	ldrh	r4, [r7, #12]
 8007a4c:	f7fa f944 	bl	8001cd8 <xTaskGetTickCountFromISR>
 8007a50:	4603      	mov	r3, r0
 8007a52:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <EXTI15_10_IRQHandler+0x60>)
 8007a54:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8007a58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fb ff62 	bl	8003926 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8007a62:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <EXTI15_10_IRQHandler+0x64>)
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	89b9      	ldrh	r1, [r7, #12]
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2203      	movs	r2, #3
 8007a70:	f7fa fcf6 	bl	8002460 <xTaskGenericNotifyFromISR>
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}
 8007a7c:	200006bc 	.word	0x200006bc
 8007a80:	200021c8 	.word	0x200021c8

08007a84 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007a84:	b590      	push	{r4, r7, lr}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    gpio_config_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 8007a8a:	2320      	movs	r3, #32
 8007a8c:	81fb      	strh	r3, [r7, #14]
    gpio_config_push_button_pin_e button = PUSH_BUTTON_C;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	81bb      	strh	r3, [r7, #12]
    gpio_config_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 8007a92:	2317      	movs	r3, #23
 8007a94:	72fb      	strb	r3, [r7, #11]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8007a96:	89fb      	ldrh	r3, [r7, #14]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fc fb71 	bl	8004180 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8007a9e:	89ba      	ldrh	r2, [r7, #12]
 8007aa0:	89bb      	ldrh	r3, [r7, #12]
 8007aa2:	4910      	ldr	r1, [pc, #64]	; (8007ae4 <EXTI9_5_IRQHandler+0x60>)
 8007aa4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8007aa8:	490e      	ldr	r1, [pc, #56]	; (8007ae4 <EXTI9_5_IRQHandler+0x60>)
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	440b      	add	r3, r1
 8007aae:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8007ab0:	89bc      	ldrh	r4, [r7, #12]
 8007ab2:	f7fa f911 	bl	8001cd8 <xTaskGetTickCountFromISR>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <EXTI9_5_IRQHandler+0x60>)
 8007aba:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8007abe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fb ff2f 	bl	8003926 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <EXTI9_5_IRQHandler+0x64>)
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	89b9      	ldrh	r1, [r7, #12]
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	f7fa fcc3 	bl	8002460 <xTaskGenericNotifyFromISR>
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd90      	pop	{r4, r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200006bc 	.word	0x200006bc
 8007ae8:	200021c8 	.word	0x200021c8

08007aec <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	80fb      	strh	r3, [r7, #6]

}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
    while(1);
 8007b0a:	e7fe      	b.n	8007b0a <HAL_DMA_CMPLT_CALLBACK+0x8>

08007b0c <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7f1b      	ldrb	r3, [r3, #28]
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d016      	beq.n	8007b4a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	dc1c      	bgt.n	8007b5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d002      	beq.n	8007b2a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d008      	beq.n	8007b3a <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 8007b28:	e017      	b.n	8007b5a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7fe f993 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	701a      	strb	r2, [r3, #0]
        break;
 8007b38:	e010      	b.n	8007b5c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8007b3a:	2104      	movs	r1, #4
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fe f98b 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 8007b42:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
        break;
 8007b48:	e008      	b.n	8007b5c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8007b4a:	2108      	movs	r1, #8
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fe f983 	bl	8005e58 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]
        break;
 8007b58:	e000      	b.n	8007b5c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8007b5a:	bf00      	nop
    }
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	200002e8 	.word	0x200002e8
 8007b68:	200002e9 	.word	0x200002e9
 8007b6c:	200002ea 	.word	0x200002ea

08007b70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8007b74:	4802      	ldr	r0, [pc, #8]	; (8007b80 <DMA1_Channel2_IRQHandler+0x10>)
 8007b76:	f7fc f84a 	bl	8003c0e <HAL_DMA_IRQHandler>
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20001fe8 	.word	0x20001fe8

08007b84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8007b88:	4802      	ldr	r0, [pc, #8]	; (8007b94 <DMA1_Channel3_IRQHandler+0x10>)
 8007b8a:	f7fc f840 	bl	8003c0e <HAL_DMA_IRQHandler>
}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20002030 	.word	0x20002030

08007b98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8007b9c:	4802      	ldr	r0, [pc, #8]	; (8007ba8 <DMA1_Channel5_IRQHandler+0x10>)
 8007b9e:	f7fc f836 	bl	8003c0e <HAL_DMA_IRQHandler>
}
 8007ba2:	bf00      	nop
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200020c0 	.word	0x200020c0

08007bac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8007bb0:	4802      	ldr	r0, [pc, #8]	; (8007bbc <DMA1_Channel6_IRQHandler+0x10>)
 8007bb2:	f7fc f82c 	bl	8003c0e <HAL_DMA_IRQHandler>
}
 8007bb6:	bf00      	nop
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20002108 	.word	0x20002108

08007bc0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <DMA1_Channel7_IRQHandler+0x10>)
 8007bc6:	f7fc f822 	bl	8003c0e <HAL_DMA_IRQHandler>
}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20002078 	.word	0x20002078

08007bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
	return 1;
 8007bd8:	2301      	movs	r3, #1
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <_kill>:

int _kill(int pid, int sig)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007bee:	f000 f91b 	bl	8007e28 <__errno>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2216      	movs	r2, #22
 8007bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <_exit>:

void _exit (int status)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ffe7 	bl	8007be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007c16:	e7fe      	b.n	8007c16 <_exit+0x12>

08007c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e00a      	b.n	8007c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007c2a:	f3af 8000 	nop.w
 8007c2e:	4601      	mov	r1, r0
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	60ba      	str	r2, [r7, #8]
 8007c36:	b2ca      	uxtb	r2, r1
 8007c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	dbf0      	blt.n	8007c2a <_read+0x12>
	}

return len;
 8007c48:	687b      	ldr	r3, [r7, #4]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e009      	b.n	8007c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	60ba      	str	r2, [r7, #8]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	3301      	adds	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	dbf1      	blt.n	8007c64 <_write+0x12>
	}
	return len;
 8007c80:	687b      	ldr	r3, [r7, #4]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <_close>:

int _close(int file)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
	return -1;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <_isatty>:

int _isatty(int file)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8007cca:	2301      	movs	r3, #1
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007cfc:	4a14      	ldr	r2, [pc, #80]	; (8007d50 <_sbrk+0x5c>)
 8007cfe:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <_sbrk+0x60>)
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d08:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <_sbrk+0x64>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <_sbrk+0x64>)
 8007d12:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <_sbrk+0x68>)
 8007d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <_sbrk+0x64>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d207      	bcs.n	8007d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d24:	f000 f880 	bl	8007e28 <__errno>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	220c      	movs	r2, #12
 8007d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d32:	e009      	b.n	8007d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d34:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <_sbrk+0x64>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <_sbrk+0x64>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	4a05      	ldr	r2, [pc, #20]	; (8007d58 <_sbrk+0x64>)
 8007d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d46:	68fb      	ldr	r3, [r7, #12]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20010000 	.word	0x20010000
 8007d54:	00000400 	.word	0x00000400
 8007d58:	200021c0 	.word	0x200021c0
 8007d5c:	20002a40 	.word	0x20002a40

08007d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <SystemInit+0x20>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	4a05      	ldr	r2, [pc, #20]	; (8007d80 <SystemInit+0x20>)
 8007d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007d74:	bf00      	nop
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	e000ed00 	.word	0xe000ed00

08007d84 <main>:
#include "animate_led.h"
#include "flash_info.h"


int main(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
    board_init();
 8007d88:	f7ff fa4e 	bl	8007228 <board_init>
    //flash_info_init();
    task_create();
 8007d8c:	f000 f808 	bl	8007da0 <task_create>
	//semaphore_create();
    reset_ws2812b();
 8007d90:	f7f8 fb62 	bl	8000458 <reset_ws2812b>
	osKernelStart();
 8007d94:	f7f8 fe00 	bl	8000998 <osKernelStart>
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8007da4:	f7f8 fdd4 	bl	8000950 <osKernelInitialize>
//	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
//  g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    //g_firmware_update_handle = osThreadNew(task_firmware_update, NULL, &g_task_firmware_update_ctrl_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 8007da8:	4a06      	ldr	r2, [pc, #24]	; (8007dc4 <task_create+0x24>)
 8007daa:	2100      	movs	r1, #0
 8007dac:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <task_create+0x28>)
 8007dae:	f7f8 fe19 	bl	80009e4 <osThreadNew>
 8007db2:	4603      	mov	r3, r0
 8007db4:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <task_create+0x2c>)
 8007db6:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <task_create+0x30>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0800906c 	.word	0x0800906c
 8007dc8:	08000889 	.word	0x08000889
 8007dcc:	200021c4 	.word	0x200021c4
 8007dd0:	20002a28 	.word	0x20002a28

08007dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007dd8:	f7ff ffc2 	bl	8007d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ddc:	480c      	ldr	r0, [pc, #48]	; (8007e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8007dde:	490d      	ldr	r1, [pc, #52]	; (8007e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007de0:	4a0d      	ldr	r2, [pc, #52]	; (8007e18 <LoopForever+0xe>)
  movs r3, #0
 8007de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007de4:	e002      	b.n	8007dec <LoopCopyDataInit>

08007de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007dea:	3304      	adds	r3, #4

08007dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007df0:	d3f9      	bcc.n	8007de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007df2:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007df4:	4c0a      	ldr	r4, [pc, #40]	; (8007e20 <LoopForever+0x16>)
  movs r3, #0
 8007df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007df8:	e001      	b.n	8007dfe <LoopFillZerobss>

08007dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007dfc:	3204      	adds	r2, #4

08007dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007e00:	d3fb      	bcc.n	8007dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007e02:	f000 f817 	bl	8007e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007e06:	f7ff ffbd 	bl	8007d84 <main>

08007e0a <LoopForever>:

LoopForever:
    b LoopForever
 8007e0a:	e7fe      	b.n	8007e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007e14:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8007e18:	080091e0 	.word	0x080091e0
  ldr r2, =_sbss
 8007e1c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8007e20:	20002a3c 	.word	0x20002a3c

08007e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007e24:	e7fe      	b.n	8007e24 <ADC1_IRQHandler>
	...

08007e28 <__errno>:
 8007e28:	4b01      	ldr	r3, [pc, #4]	; (8007e30 <__errno+0x8>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	200002f0 	.word	0x200002f0

08007e34 <__libc_init_array>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4d0d      	ldr	r5, [pc, #52]	; (8007e6c <__libc_init_array+0x38>)
 8007e38:	4c0d      	ldr	r4, [pc, #52]	; (8007e70 <__libc_init_array+0x3c>)
 8007e3a:	1b64      	subs	r4, r4, r5
 8007e3c:	10a4      	asrs	r4, r4, #2
 8007e3e:	2600      	movs	r6, #0
 8007e40:	42a6      	cmp	r6, r4
 8007e42:	d109      	bne.n	8007e58 <__libc_init_array+0x24>
 8007e44:	4d0b      	ldr	r5, [pc, #44]	; (8007e74 <__libc_init_array+0x40>)
 8007e46:	4c0c      	ldr	r4, [pc, #48]	; (8007e78 <__libc_init_array+0x44>)
 8007e48:	f001 f88a 	bl	8008f60 <_init>
 8007e4c:	1b64      	subs	r4, r4, r5
 8007e4e:	10a4      	asrs	r4, r4, #2
 8007e50:	2600      	movs	r6, #0
 8007e52:	42a6      	cmp	r6, r4
 8007e54:	d105      	bne.n	8007e62 <__libc_init_array+0x2e>
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5c:	4798      	blx	r3
 8007e5e:	3601      	adds	r6, #1
 8007e60:	e7ee      	b.n	8007e40 <__libc_init_array+0xc>
 8007e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e66:	4798      	blx	r3
 8007e68:	3601      	adds	r6, #1
 8007e6a:	e7f2      	b.n	8007e52 <__libc_init_array+0x1e>
 8007e6c:	080091d8 	.word	0x080091d8
 8007e70:	080091d8 	.word	0x080091d8
 8007e74:	080091d8 	.word	0x080091d8
 8007e78:	080091dc 	.word	0x080091dc

08007e7c <malloc>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <malloc+0xc>)
 8007e7e:	4601      	mov	r1, r0
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f000 b885 	b.w	8007f90 <_malloc_r>
 8007e86:	bf00      	nop
 8007e88:	200002f0 	.word	0x200002f0

08007e8c <memcpy>:
 8007e8c:	440a      	add	r2, r1
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e94:	d100      	bne.n	8007e98 <memcpy+0xc>
 8007e96:	4770      	bx	lr
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	d1f9      	bne.n	8007e9a <memcpy+0xe>
 8007ea6:	bd10      	pop	{r4, pc}

08007ea8 <memset>:
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d100      	bne.n	8007eb2 <memset+0xa>
 8007eb0:	4770      	bx	lr
 8007eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb6:	e7f9      	b.n	8007eac <memset+0x4>

08007eb8 <_free_r>:
 8007eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	d044      	beq.n	8007f48 <_free_r+0x90>
 8007ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec2:	9001      	str	r0, [sp, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eca:	bfb8      	it	lt
 8007ecc:	18e4      	addlt	r4, r4, r3
 8007ece:	f000 f96d 	bl	80081ac <__malloc_lock>
 8007ed2:	4a1e      	ldr	r2, [pc, #120]	; (8007f4c <_free_r+0x94>)
 8007ed4:	9801      	ldr	r0, [sp, #4]
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	b933      	cbnz	r3, 8007ee8 <_free_r+0x30>
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	6014      	str	r4, [r2, #0]
 8007ede:	b003      	add	sp, #12
 8007ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ee4:	f000 b968 	b.w	80081b8 <__malloc_unlock>
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d908      	bls.n	8007efe <_free_r+0x46>
 8007eec:	6825      	ldr	r5, [r4, #0]
 8007eee:	1961      	adds	r1, r4, r5
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf01      	itttt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	1949      	addeq	r1, r1, r5
 8007efa:	6021      	streq	r1, [r4, #0]
 8007efc:	e7ed      	b.n	8007eda <_free_r+0x22>
 8007efe:	461a      	mov	r2, r3
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	b10b      	cbz	r3, 8007f08 <_free_r+0x50>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d9fa      	bls.n	8007efe <_free_r+0x46>
 8007f08:	6811      	ldr	r1, [r2, #0]
 8007f0a:	1855      	adds	r5, r2, r1
 8007f0c:	42a5      	cmp	r5, r4
 8007f0e:	d10b      	bne.n	8007f28 <_free_r+0x70>
 8007f10:	6824      	ldr	r4, [r4, #0]
 8007f12:	4421      	add	r1, r4
 8007f14:	1854      	adds	r4, r2, r1
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	d1e0      	bne.n	8007ede <_free_r+0x26>
 8007f1c:	681c      	ldr	r4, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	6053      	str	r3, [r2, #4]
 8007f22:	4421      	add	r1, r4
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	e7da      	b.n	8007ede <_free_r+0x26>
 8007f28:	d902      	bls.n	8007f30 <_free_r+0x78>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	e7d6      	b.n	8007ede <_free_r+0x26>
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1961      	adds	r1, r4, r5
 8007f34:	428b      	cmp	r3, r1
 8007f36:	bf04      	itt	eq
 8007f38:	6819      	ldreq	r1, [r3, #0]
 8007f3a:	685b      	ldreq	r3, [r3, #4]
 8007f3c:	6063      	str	r3, [r4, #4]
 8007f3e:	bf04      	itt	eq
 8007f40:	1949      	addeq	r1, r1, r5
 8007f42:	6021      	streq	r1, [r4, #0]
 8007f44:	6054      	str	r4, [r2, #4]
 8007f46:	e7ca      	b.n	8007ede <_free_r+0x26>
 8007f48:	b003      	add	sp, #12
 8007f4a:	bd30      	pop	{r4, r5, pc}
 8007f4c:	20002a2c 	.word	0x20002a2c

08007f50 <sbrk_aligned>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4e0e      	ldr	r6, [pc, #56]	; (8007f8c <sbrk_aligned+0x3c>)
 8007f54:	460c      	mov	r4, r1
 8007f56:	6831      	ldr	r1, [r6, #0]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	b911      	cbnz	r1, 8007f62 <sbrk_aligned+0x12>
 8007f5c:	f000 f8ba 	bl	80080d4 <_sbrk_r>
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f8b5 	bl	80080d4 <_sbrk_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	d00a      	beq.n	8007f84 <sbrk_aligned+0x34>
 8007f6e:	1cc4      	adds	r4, r0, #3
 8007f70:	f024 0403 	bic.w	r4, r4, #3
 8007f74:	42a0      	cmp	r0, r4
 8007f76:	d007      	beq.n	8007f88 <sbrk_aligned+0x38>
 8007f78:	1a21      	subs	r1, r4, r0
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 f8aa 	bl	80080d4 <_sbrk_r>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d101      	bne.n	8007f88 <sbrk_aligned+0x38>
 8007f84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f88:	4620      	mov	r0, r4
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	20002a30 	.word	0x20002a30

08007f90 <_malloc_r>:
 8007f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f94:	1ccd      	adds	r5, r1, #3
 8007f96:	f025 0503 	bic.w	r5, r5, #3
 8007f9a:	3508      	adds	r5, #8
 8007f9c:	2d0c      	cmp	r5, #12
 8007f9e:	bf38      	it	cc
 8007fa0:	250c      	movcc	r5, #12
 8007fa2:	2d00      	cmp	r5, #0
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	db01      	blt.n	8007fac <_malloc_r+0x1c>
 8007fa8:	42a9      	cmp	r1, r5
 8007faa:	d905      	bls.n	8007fb8 <_malloc_r+0x28>
 8007fac:	230c      	movs	r3, #12
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	2600      	movs	r6, #0
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	4e2e      	ldr	r6, [pc, #184]	; (8008074 <_malloc_r+0xe4>)
 8007fba:	f000 f8f7 	bl	80081ac <__malloc_lock>
 8007fbe:	6833      	ldr	r3, [r6, #0]
 8007fc0:	461c      	mov	r4, r3
 8007fc2:	bb34      	cbnz	r4, 8008012 <_malloc_r+0x82>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	f7ff ffc2 	bl	8007f50 <sbrk_aligned>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	4604      	mov	r4, r0
 8007fd0:	d14d      	bne.n	800806e <_malloc_r+0xde>
 8007fd2:	6834      	ldr	r4, [r6, #0]
 8007fd4:	4626      	mov	r6, r4
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d140      	bne.n	800805c <_malloc_r+0xcc>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4638      	mov	r0, r7
 8007fe0:	eb04 0803 	add.w	r8, r4, r3
 8007fe4:	f000 f876 	bl	80080d4 <_sbrk_r>
 8007fe8:	4580      	cmp	r8, r0
 8007fea:	d13a      	bne.n	8008062 <_malloc_r+0xd2>
 8007fec:	6821      	ldr	r1, [r4, #0]
 8007fee:	3503      	adds	r5, #3
 8007ff0:	1a6d      	subs	r5, r5, r1
 8007ff2:	f025 0503 	bic.w	r5, r5, #3
 8007ff6:	3508      	adds	r5, #8
 8007ff8:	2d0c      	cmp	r5, #12
 8007ffa:	bf38      	it	cc
 8007ffc:	250c      	movcc	r5, #12
 8007ffe:	4629      	mov	r1, r5
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff ffa5 	bl	8007f50 <sbrk_aligned>
 8008006:	3001      	adds	r0, #1
 8008008:	d02b      	beq.n	8008062 <_malloc_r+0xd2>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	442b      	add	r3, r5
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	e00e      	b.n	8008030 <_malloc_r+0xa0>
 8008012:	6822      	ldr	r2, [r4, #0]
 8008014:	1b52      	subs	r2, r2, r5
 8008016:	d41e      	bmi.n	8008056 <_malloc_r+0xc6>
 8008018:	2a0b      	cmp	r2, #11
 800801a:	d916      	bls.n	800804a <_malloc_r+0xba>
 800801c:	1961      	adds	r1, r4, r5
 800801e:	42a3      	cmp	r3, r4
 8008020:	6025      	str	r5, [r4, #0]
 8008022:	bf18      	it	ne
 8008024:	6059      	strne	r1, [r3, #4]
 8008026:	6863      	ldr	r3, [r4, #4]
 8008028:	bf08      	it	eq
 800802a:	6031      	streq	r1, [r6, #0]
 800802c:	5162      	str	r2, [r4, r5]
 800802e:	604b      	str	r3, [r1, #4]
 8008030:	4638      	mov	r0, r7
 8008032:	f104 060b 	add.w	r6, r4, #11
 8008036:	f000 f8bf 	bl	80081b8 <__malloc_unlock>
 800803a:	f026 0607 	bic.w	r6, r6, #7
 800803e:	1d23      	adds	r3, r4, #4
 8008040:	1af2      	subs	r2, r6, r3
 8008042:	d0b6      	beq.n	8007fb2 <_malloc_r+0x22>
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	50a3      	str	r3, [r4, r2]
 8008048:	e7b3      	b.n	8007fb2 <_malloc_r+0x22>
 800804a:	6862      	ldr	r2, [r4, #4]
 800804c:	42a3      	cmp	r3, r4
 800804e:	bf0c      	ite	eq
 8008050:	6032      	streq	r2, [r6, #0]
 8008052:	605a      	strne	r2, [r3, #4]
 8008054:	e7ec      	b.n	8008030 <_malloc_r+0xa0>
 8008056:	4623      	mov	r3, r4
 8008058:	6864      	ldr	r4, [r4, #4]
 800805a:	e7b2      	b.n	8007fc2 <_malloc_r+0x32>
 800805c:	4634      	mov	r4, r6
 800805e:	6876      	ldr	r6, [r6, #4]
 8008060:	e7b9      	b.n	8007fd6 <_malloc_r+0x46>
 8008062:	230c      	movs	r3, #12
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	4638      	mov	r0, r7
 8008068:	f000 f8a6 	bl	80081b8 <__malloc_unlock>
 800806c:	e7a1      	b.n	8007fb2 <_malloc_r+0x22>
 800806e:	6025      	str	r5, [r4, #0]
 8008070:	e7de      	b.n	8008030 <_malloc_r+0xa0>
 8008072:	bf00      	nop
 8008074:	20002a2c 	.word	0x20002a2c

08008078 <srand>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <srand+0x44>)
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008080:	4604      	mov	r4, r0
 8008082:	b9b3      	cbnz	r3, 80080b2 <srand+0x3a>
 8008084:	2018      	movs	r0, #24
 8008086:	f7ff fef9 	bl	8007e7c <malloc>
 800808a:	4602      	mov	r2, r0
 800808c:	63a8      	str	r0, [r5, #56]	; 0x38
 800808e:	b920      	cbnz	r0, 800809a <srand+0x22>
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <srand+0x48>)
 8008092:	480c      	ldr	r0, [pc, #48]	; (80080c4 <srand+0x4c>)
 8008094:	2142      	movs	r1, #66	; 0x42
 8008096:	f000 f847 	bl	8008128 <__assert_func>
 800809a:	490b      	ldr	r1, [pc, #44]	; (80080c8 <srand+0x50>)
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <srand+0x54>)
 800809e:	e9c0 1300 	strd	r1, r3, [r0]
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <srand+0x58>)
 80080a4:	6083      	str	r3, [r0, #8]
 80080a6:	230b      	movs	r3, #11
 80080a8:	8183      	strh	r3, [r0, #12]
 80080aa:	2100      	movs	r1, #0
 80080ac:	2001      	movs	r0, #1
 80080ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80080b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80080b4:	2200      	movs	r2, #0
 80080b6:	611c      	str	r4, [r3, #16]
 80080b8:	615a      	str	r2, [r3, #20]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200002f0 	.word	0x200002f0
 80080c0:	08009094 	.word	0x08009094
 80080c4:	080090ab 	.word	0x080090ab
 80080c8:	abcd330e 	.word	0xabcd330e
 80080cc:	e66d1234 	.word	0xe66d1234
 80080d0:	0005deec 	.word	0x0005deec

080080d4 <_sbrk_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	; (80080f0 <_sbrk_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7ff fe08 	bl	8007cf4 <_sbrk>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_sbrk_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_sbrk_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20002a34 	.word	0x20002a34

080080f4 <time>:
 80080f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <time+0x30>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	4669      	mov	r1, sp
 80080fc:	4604      	mov	r4, r0
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	f000 f842 	bl	8008188 <_gettimeofday_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfbe      	ittt	lt
 8008108:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800810c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008110:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008118:	b10c      	cbz	r4, 800811e <time+0x2a>
 800811a:	e9c4 0100 	strd	r0, r1, [r4]
 800811e:	b004      	add	sp, #16
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	200002f0 	.word	0x200002f0

08008128 <__assert_func>:
 8008128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800812a:	4614      	mov	r4, r2
 800812c:	461a      	mov	r2, r3
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <__assert_func+0x2c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4605      	mov	r5, r0
 8008134:	68d8      	ldr	r0, [r3, #12]
 8008136:	b14c      	cbz	r4, 800814c <__assert_func+0x24>
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <__assert_func+0x30>)
 800813a:	9100      	str	r1, [sp, #0]
 800813c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008140:	4906      	ldr	r1, [pc, #24]	; (800815c <__assert_func+0x34>)
 8008142:	462b      	mov	r3, r5
 8008144:	f000 f80e 	bl	8008164 <fiprintf>
 8008148:	f000 fbea 	bl	8008920 <abort>
 800814c:	4b04      	ldr	r3, [pc, #16]	; (8008160 <__assert_func+0x38>)
 800814e:	461c      	mov	r4, r3
 8008150:	e7f3      	b.n	800813a <__assert_func+0x12>
 8008152:	bf00      	nop
 8008154:	200002f0 	.word	0x200002f0
 8008158:	08009106 	.word	0x08009106
 800815c:	08009113 	.word	0x08009113
 8008160:	08009141 	.word	0x08009141

08008164 <fiprintf>:
 8008164:	b40e      	push	{r1, r2, r3}
 8008166:	b503      	push	{r0, r1, lr}
 8008168:	4601      	mov	r1, r0
 800816a:	ab03      	add	r3, sp, #12
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <fiprintf+0x20>)
 800816e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	f000 f84f 	bl	8008218 <_vfiprintf_r>
 800817a:	b002      	add	sp, #8
 800817c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008180:	b003      	add	sp, #12
 8008182:	4770      	bx	lr
 8008184:	200002f0 	.word	0x200002f0

08008188 <_gettimeofday_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_gettimeofday_r+0x20>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	4611      	mov	r1, r2
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	f000 fedb 	bl	8008f50 <_gettimeofday>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d102      	bne.n	80081a4 <_gettimeofday_r+0x1c>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	b103      	cbz	r3, 80081a4 <_gettimeofday_r+0x1c>
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	bf00      	nop
 80081a8:	20002a34 	.word	0x20002a34

080081ac <__malloc_lock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_lock+0x8>)
 80081ae:	f000 bd77 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20002a38 	.word	0x20002a38

080081b8 <__malloc_unlock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_unlock+0x8>)
 80081ba:	f000 bd72 	b.w	8008ca2 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20002a38 	.word	0x20002a38

080081c4 <__sfputc_r>:
 80081c4:	6893      	ldr	r3, [r2, #8]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	b410      	push	{r4}
 80081cc:	6093      	str	r3, [r2, #8]
 80081ce:	da08      	bge.n	80081e2 <__sfputc_r+0x1e>
 80081d0:	6994      	ldr	r4, [r2, #24]
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	db01      	blt.n	80081da <__sfputc_r+0x16>
 80081d6:	290a      	cmp	r1, #10
 80081d8:	d103      	bne.n	80081e2 <__sfputc_r+0x1e>
 80081da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081de:	f000 badf 	b.w	80087a0 <__swbuf_r>
 80081e2:	6813      	ldr	r3, [r2, #0]
 80081e4:	1c58      	adds	r0, r3, #1
 80081e6:	6010      	str	r0, [r2, #0]
 80081e8:	7019      	strb	r1, [r3, #0]
 80081ea:	4608      	mov	r0, r1
 80081ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <__sfputs_r>:
 80081f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f4:	4606      	mov	r6, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	18d5      	adds	r5, r2, r3
 80081fc:	42ac      	cmp	r4, r5
 80081fe:	d101      	bne.n	8008204 <__sfputs_r+0x12>
 8008200:	2000      	movs	r0, #0
 8008202:	e007      	b.n	8008214 <__sfputs_r+0x22>
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	463a      	mov	r2, r7
 800820a:	4630      	mov	r0, r6
 800820c:	f7ff ffda 	bl	80081c4 <__sfputc_r>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d1f3      	bne.n	80081fc <__sfputs_r+0xa>
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008218 <_vfiprintf_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460d      	mov	r5, r1
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	4614      	mov	r4, r2
 8008222:	4698      	mov	r8, r3
 8008224:	4606      	mov	r6, r0
 8008226:	b118      	cbz	r0, 8008230 <_vfiprintf_r+0x18>
 8008228:	6983      	ldr	r3, [r0, #24]
 800822a:	b90b      	cbnz	r3, 8008230 <_vfiprintf_r+0x18>
 800822c:	f000 fc9a 	bl	8008b64 <__sinit>
 8008230:	4b89      	ldr	r3, [pc, #548]	; (8008458 <_vfiprintf_r+0x240>)
 8008232:	429d      	cmp	r5, r3
 8008234:	d11b      	bne.n	800826e <_vfiprintf_r+0x56>
 8008236:	6875      	ldr	r5, [r6, #4]
 8008238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d405      	bmi.n	800824a <_vfiprintf_r+0x32>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d402      	bmi.n	800824a <_vfiprintf_r+0x32>
 8008244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008246:	f000 fd2b 	bl	8008ca0 <__retarget_lock_acquire_recursive>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	d501      	bpl.n	8008254 <_vfiprintf_r+0x3c>
 8008250:	692b      	ldr	r3, [r5, #16]
 8008252:	b9eb      	cbnz	r3, 8008290 <_vfiprintf_r+0x78>
 8008254:	4629      	mov	r1, r5
 8008256:	4630      	mov	r0, r6
 8008258:	f000 faf4 	bl	8008844 <__swsetup_r>
 800825c:	b1c0      	cbz	r0, 8008290 <_vfiprintf_r+0x78>
 800825e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008260:	07dc      	lsls	r4, r3, #31
 8008262:	d50e      	bpl.n	8008282 <_vfiprintf_r+0x6a>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008268:	b01d      	add	sp, #116	; 0x74
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	4b7b      	ldr	r3, [pc, #492]	; (800845c <_vfiprintf_r+0x244>)
 8008270:	429d      	cmp	r5, r3
 8008272:	d101      	bne.n	8008278 <_vfiprintf_r+0x60>
 8008274:	68b5      	ldr	r5, [r6, #8]
 8008276:	e7df      	b.n	8008238 <_vfiprintf_r+0x20>
 8008278:	4b79      	ldr	r3, [pc, #484]	; (8008460 <_vfiprintf_r+0x248>)
 800827a:	429d      	cmp	r5, r3
 800827c:	bf08      	it	eq
 800827e:	68f5      	ldreq	r5, [r6, #12]
 8008280:	e7da      	b.n	8008238 <_vfiprintf_r+0x20>
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	0598      	lsls	r0, r3, #22
 8008286:	d4ed      	bmi.n	8008264 <_vfiprintf_r+0x4c>
 8008288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828a:	f000 fd0a 	bl	8008ca2 <__retarget_lock_release_recursive>
 800828e:	e7e9      	b.n	8008264 <_vfiprintf_r+0x4c>
 8008290:	2300      	movs	r3, #0
 8008292:	9309      	str	r3, [sp, #36]	; 0x24
 8008294:	2320      	movs	r3, #32
 8008296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829a:	f8cd 800c 	str.w	r8, [sp, #12]
 800829e:	2330      	movs	r3, #48	; 0x30
 80082a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008464 <_vfiprintf_r+0x24c>
 80082a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a8:	f04f 0901 	mov.w	r9, #1
 80082ac:	4623      	mov	r3, r4
 80082ae:	469a      	mov	sl, r3
 80082b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b4:	b10a      	cbz	r2, 80082ba <_vfiprintf_r+0xa2>
 80082b6:	2a25      	cmp	r2, #37	; 0x25
 80082b8:	d1f9      	bne.n	80082ae <_vfiprintf_r+0x96>
 80082ba:	ebba 0b04 	subs.w	fp, sl, r4
 80082be:	d00b      	beq.n	80082d8 <_vfiprintf_r+0xc0>
 80082c0:	465b      	mov	r3, fp
 80082c2:	4622      	mov	r2, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7ff ff93 	bl	80081f2 <__sfputs_r>
 80082cc:	3001      	adds	r0, #1
 80082ce:	f000 80aa 	beq.w	8008426 <_vfiprintf_r+0x20e>
 80082d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d4:	445a      	add	r2, fp
 80082d6:	9209      	str	r2, [sp, #36]	; 0x24
 80082d8:	f89a 3000 	ldrb.w	r3, [sl]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80a2 	beq.w	8008426 <_vfiprintf_r+0x20e>
 80082e2:	2300      	movs	r3, #0
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ec:	f10a 0a01 	add.w	sl, sl, #1
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	9307      	str	r3, [sp, #28]
 80082f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f8:	931a      	str	r3, [sp, #104]	; 0x68
 80082fa:	4654      	mov	r4, sl
 80082fc:	2205      	movs	r2, #5
 80082fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008302:	4858      	ldr	r0, [pc, #352]	; (8008464 <_vfiprintf_r+0x24c>)
 8008304:	f7f7 ff64 	bl	80001d0 <memchr>
 8008308:	9a04      	ldr	r2, [sp, #16]
 800830a:	b9d8      	cbnz	r0, 8008344 <_vfiprintf_r+0x12c>
 800830c:	06d1      	lsls	r1, r2, #27
 800830e:	bf44      	itt	mi
 8008310:	2320      	movmi	r3, #32
 8008312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008316:	0713      	lsls	r3, r2, #28
 8008318:	bf44      	itt	mi
 800831a:	232b      	movmi	r3, #43	; 0x2b
 800831c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008320:	f89a 3000 	ldrb.w	r3, [sl]
 8008324:	2b2a      	cmp	r3, #42	; 0x2a
 8008326:	d015      	beq.n	8008354 <_vfiprintf_r+0x13c>
 8008328:	9a07      	ldr	r2, [sp, #28]
 800832a:	4654      	mov	r4, sl
 800832c:	2000      	movs	r0, #0
 800832e:	f04f 0c0a 	mov.w	ip, #10
 8008332:	4621      	mov	r1, r4
 8008334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008338:	3b30      	subs	r3, #48	; 0x30
 800833a:	2b09      	cmp	r3, #9
 800833c:	d94e      	bls.n	80083dc <_vfiprintf_r+0x1c4>
 800833e:	b1b0      	cbz	r0, 800836e <_vfiprintf_r+0x156>
 8008340:	9207      	str	r2, [sp, #28]
 8008342:	e014      	b.n	800836e <_vfiprintf_r+0x156>
 8008344:	eba0 0308 	sub.w	r3, r0, r8
 8008348:	fa09 f303 	lsl.w	r3, r9, r3
 800834c:	4313      	orrs	r3, r2
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	46a2      	mov	sl, r4
 8008352:	e7d2      	b.n	80082fa <_vfiprintf_r+0xe2>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1d19      	adds	r1, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9103      	str	r1, [sp, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfbb      	ittet	lt
 8008360:	425b      	neglt	r3, r3
 8008362:	f042 0202 	orrlt.w	r2, r2, #2
 8008366:	9307      	strge	r3, [sp, #28]
 8008368:	9307      	strlt	r3, [sp, #28]
 800836a:	bfb8      	it	lt
 800836c:	9204      	strlt	r2, [sp, #16]
 800836e:	7823      	ldrb	r3, [r4, #0]
 8008370:	2b2e      	cmp	r3, #46	; 0x2e
 8008372:	d10c      	bne.n	800838e <_vfiprintf_r+0x176>
 8008374:	7863      	ldrb	r3, [r4, #1]
 8008376:	2b2a      	cmp	r3, #42	; 0x2a
 8008378:	d135      	bne.n	80083e6 <_vfiprintf_r+0x1ce>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	1d1a      	adds	r2, r3, #4
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	9203      	str	r2, [sp, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	bfb8      	it	lt
 8008386:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800838a:	3402      	adds	r4, #2
 800838c:	9305      	str	r3, [sp, #20]
 800838e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008474 <_vfiprintf_r+0x25c>
 8008392:	7821      	ldrb	r1, [r4, #0]
 8008394:	2203      	movs	r2, #3
 8008396:	4650      	mov	r0, sl
 8008398:	f7f7 ff1a 	bl	80001d0 <memchr>
 800839c:	b140      	cbz	r0, 80083b0 <_vfiprintf_r+0x198>
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	eba0 000a 	sub.w	r0, r0, sl
 80083a4:	fa03 f000 	lsl.w	r0, r3, r0
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	4303      	orrs	r3, r0
 80083ac:	3401      	adds	r4, #1
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b4:	482c      	ldr	r0, [pc, #176]	; (8008468 <_vfiprintf_r+0x250>)
 80083b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ba:	2206      	movs	r2, #6
 80083bc:	f7f7 ff08 	bl	80001d0 <memchr>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d03f      	beq.n	8008444 <_vfiprintf_r+0x22c>
 80083c4:	4b29      	ldr	r3, [pc, #164]	; (800846c <_vfiprintf_r+0x254>)
 80083c6:	bb1b      	cbnz	r3, 8008410 <_vfiprintf_r+0x1f8>
 80083c8:	9b03      	ldr	r3, [sp, #12]
 80083ca:	3307      	adds	r3, #7
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	3308      	adds	r3, #8
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d6:	443b      	add	r3, r7
 80083d8:	9309      	str	r3, [sp, #36]	; 0x24
 80083da:	e767      	b.n	80082ac <_vfiprintf_r+0x94>
 80083dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e0:	460c      	mov	r4, r1
 80083e2:	2001      	movs	r0, #1
 80083e4:	e7a5      	b.n	8008332 <_vfiprintf_r+0x11a>
 80083e6:	2300      	movs	r3, #0
 80083e8:	3401      	adds	r4, #1
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	4619      	mov	r1, r3
 80083ee:	f04f 0c0a 	mov.w	ip, #10
 80083f2:	4620      	mov	r0, r4
 80083f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f8:	3a30      	subs	r2, #48	; 0x30
 80083fa:	2a09      	cmp	r2, #9
 80083fc:	d903      	bls.n	8008406 <_vfiprintf_r+0x1ee>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0c5      	beq.n	800838e <_vfiprintf_r+0x176>
 8008402:	9105      	str	r1, [sp, #20]
 8008404:	e7c3      	b.n	800838e <_vfiprintf_r+0x176>
 8008406:	fb0c 2101 	mla	r1, ip, r1, r2
 800840a:	4604      	mov	r4, r0
 800840c:	2301      	movs	r3, #1
 800840e:	e7f0      	b.n	80083f2 <_vfiprintf_r+0x1da>
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	462a      	mov	r2, r5
 8008416:	4b16      	ldr	r3, [pc, #88]	; (8008470 <_vfiprintf_r+0x258>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	4630      	mov	r0, r6
 800841c:	f3af 8000 	nop.w
 8008420:	4607      	mov	r7, r0
 8008422:	1c78      	adds	r0, r7, #1
 8008424:	d1d6      	bne.n	80083d4 <_vfiprintf_r+0x1bc>
 8008426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008428:	07d9      	lsls	r1, r3, #31
 800842a:	d405      	bmi.n	8008438 <_vfiprintf_r+0x220>
 800842c:	89ab      	ldrh	r3, [r5, #12]
 800842e:	059a      	lsls	r2, r3, #22
 8008430:	d402      	bmi.n	8008438 <_vfiprintf_r+0x220>
 8008432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008434:	f000 fc35 	bl	8008ca2 <__retarget_lock_release_recursive>
 8008438:	89ab      	ldrh	r3, [r5, #12]
 800843a:	065b      	lsls	r3, r3, #25
 800843c:	f53f af12 	bmi.w	8008264 <_vfiprintf_r+0x4c>
 8008440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008442:	e711      	b.n	8008268 <_vfiprintf_r+0x50>
 8008444:	ab03      	add	r3, sp, #12
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	462a      	mov	r2, r5
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <_vfiprintf_r+0x258>)
 800844c:	a904      	add	r1, sp, #16
 800844e:	4630      	mov	r0, r6
 8008450:	f000 f880 	bl	8008554 <_printf_i>
 8008454:	e7e4      	b.n	8008420 <_vfiprintf_r+0x208>
 8008456:	bf00      	nop
 8008458:	08009198 	.word	0x08009198
 800845c:	080091b8 	.word	0x080091b8
 8008460:	08009178 	.word	0x08009178
 8008464:	08009142 	.word	0x08009142
 8008468:	0800914c 	.word	0x0800914c
 800846c:	00000000 	.word	0x00000000
 8008470:	080081f3 	.word	0x080081f3
 8008474:	08009148 	.word	0x08009148

08008478 <_printf_common>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	4616      	mov	r6, r2
 800847e:	4699      	mov	r9, r3
 8008480:	688a      	ldr	r2, [r1, #8]
 8008482:	690b      	ldr	r3, [r1, #16]
 8008484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008488:	4293      	cmp	r3, r2
 800848a:	bfb8      	it	lt
 800848c:	4613      	movlt	r3, r2
 800848e:	6033      	str	r3, [r6, #0]
 8008490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008494:	4607      	mov	r7, r0
 8008496:	460c      	mov	r4, r1
 8008498:	b10a      	cbz	r2, 800849e <_printf_common+0x26>
 800849a:	3301      	adds	r3, #1
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	0699      	lsls	r1, r3, #26
 80084a2:	bf42      	ittt	mi
 80084a4:	6833      	ldrmi	r3, [r6, #0]
 80084a6:	3302      	addmi	r3, #2
 80084a8:	6033      	strmi	r3, [r6, #0]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	f015 0506 	ands.w	r5, r5, #6
 80084b0:	d106      	bne.n	80084c0 <_printf_common+0x48>
 80084b2:	f104 0a19 	add.w	sl, r4, #25
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	6832      	ldr	r2, [r6, #0]
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dc26      	bgt.n	800850e <_printf_common+0x96>
 80084c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c4:	1e13      	subs	r3, r2, #0
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	bf18      	it	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	0692      	lsls	r2, r2, #26
 80084ce:	d42b      	bmi.n	8008528 <_printf_common+0xb0>
 80084d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d4:	4649      	mov	r1, r9
 80084d6:	4638      	mov	r0, r7
 80084d8:	47c0      	blx	r8
 80084da:	3001      	adds	r0, #1
 80084dc:	d01e      	beq.n	800851c <_printf_common+0xa4>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	68e5      	ldr	r5, [r4, #12]
 80084e2:	6832      	ldr	r2, [r6, #0]
 80084e4:	f003 0306 	and.w	r3, r3, #6
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	bf08      	it	eq
 80084ec:	1aad      	subeq	r5, r5, r2
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	6922      	ldr	r2, [r4, #16]
 80084f2:	bf0c      	ite	eq
 80084f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f8:	2500      	movne	r5, #0
 80084fa:	4293      	cmp	r3, r2
 80084fc:	bfc4      	itt	gt
 80084fe:	1a9b      	subgt	r3, r3, r2
 8008500:	18ed      	addgt	r5, r5, r3
 8008502:	2600      	movs	r6, #0
 8008504:	341a      	adds	r4, #26
 8008506:	42b5      	cmp	r5, r6
 8008508:	d11a      	bne.n	8008540 <_printf_common+0xc8>
 800850a:	2000      	movs	r0, #0
 800850c:	e008      	b.n	8008520 <_printf_common+0xa8>
 800850e:	2301      	movs	r3, #1
 8008510:	4652      	mov	r2, sl
 8008512:	4649      	mov	r1, r9
 8008514:	4638      	mov	r0, r7
 8008516:	47c0      	blx	r8
 8008518:	3001      	adds	r0, #1
 800851a:	d103      	bne.n	8008524 <_printf_common+0xac>
 800851c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	3501      	adds	r5, #1
 8008526:	e7c6      	b.n	80084b6 <_printf_common+0x3e>
 8008528:	18e1      	adds	r1, r4, r3
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	2030      	movs	r0, #48	; 0x30
 800852e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008532:	4422      	add	r2, r4
 8008534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800853c:	3302      	adds	r3, #2
 800853e:	e7c7      	b.n	80084d0 <_printf_common+0x58>
 8008540:	2301      	movs	r3, #1
 8008542:	4622      	mov	r2, r4
 8008544:	4649      	mov	r1, r9
 8008546:	4638      	mov	r0, r7
 8008548:	47c0      	blx	r8
 800854a:	3001      	adds	r0, #1
 800854c:	d0e6      	beq.n	800851c <_printf_common+0xa4>
 800854e:	3601      	adds	r6, #1
 8008550:	e7d9      	b.n	8008506 <_printf_common+0x8e>
	...

08008554 <_printf_i>:
 8008554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	7e0f      	ldrb	r7, [r1, #24]
 800855a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800855c:	2f78      	cmp	r7, #120	; 0x78
 800855e:	4691      	mov	r9, r2
 8008560:	4680      	mov	r8, r0
 8008562:	460c      	mov	r4, r1
 8008564:	469a      	mov	sl, r3
 8008566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800856a:	d807      	bhi.n	800857c <_printf_i+0x28>
 800856c:	2f62      	cmp	r7, #98	; 0x62
 800856e:	d80a      	bhi.n	8008586 <_printf_i+0x32>
 8008570:	2f00      	cmp	r7, #0
 8008572:	f000 80d8 	beq.w	8008726 <_printf_i+0x1d2>
 8008576:	2f58      	cmp	r7, #88	; 0x58
 8008578:	f000 80a3 	beq.w	80086c2 <_printf_i+0x16e>
 800857c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008584:	e03a      	b.n	80085fc <_printf_i+0xa8>
 8008586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800858a:	2b15      	cmp	r3, #21
 800858c:	d8f6      	bhi.n	800857c <_printf_i+0x28>
 800858e:	a101      	add	r1, pc, #4	; (adr r1, 8008594 <_printf_i+0x40>)
 8008590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008594:	080085ed 	.word	0x080085ed
 8008598:	08008601 	.word	0x08008601
 800859c:	0800857d 	.word	0x0800857d
 80085a0:	0800857d 	.word	0x0800857d
 80085a4:	0800857d 	.word	0x0800857d
 80085a8:	0800857d 	.word	0x0800857d
 80085ac:	08008601 	.word	0x08008601
 80085b0:	0800857d 	.word	0x0800857d
 80085b4:	0800857d 	.word	0x0800857d
 80085b8:	0800857d 	.word	0x0800857d
 80085bc:	0800857d 	.word	0x0800857d
 80085c0:	0800870d 	.word	0x0800870d
 80085c4:	08008631 	.word	0x08008631
 80085c8:	080086ef 	.word	0x080086ef
 80085cc:	0800857d 	.word	0x0800857d
 80085d0:	0800857d 	.word	0x0800857d
 80085d4:	0800872f 	.word	0x0800872f
 80085d8:	0800857d 	.word	0x0800857d
 80085dc:	08008631 	.word	0x08008631
 80085e0:	0800857d 	.word	0x0800857d
 80085e4:	0800857d 	.word	0x0800857d
 80085e8:	080086f7 	.word	0x080086f7
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	602a      	str	r2, [r5, #0]
 80085f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0a3      	b.n	8008748 <_printf_i+0x1f4>
 8008600:	6820      	ldr	r0, [r4, #0]
 8008602:	6829      	ldr	r1, [r5, #0]
 8008604:	0606      	lsls	r6, r0, #24
 8008606:	f101 0304 	add.w	r3, r1, #4
 800860a:	d50a      	bpl.n	8008622 <_printf_i+0xce>
 800860c:	680e      	ldr	r6, [r1, #0]
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	2e00      	cmp	r6, #0
 8008612:	da03      	bge.n	800861c <_printf_i+0xc8>
 8008614:	232d      	movs	r3, #45	; 0x2d
 8008616:	4276      	negs	r6, r6
 8008618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800861c:	485e      	ldr	r0, [pc, #376]	; (8008798 <_printf_i+0x244>)
 800861e:	230a      	movs	r3, #10
 8008620:	e019      	b.n	8008656 <_printf_i+0x102>
 8008622:	680e      	ldr	r6, [r1, #0]
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	f010 0f40 	tst.w	r0, #64	; 0x40
 800862a:	bf18      	it	ne
 800862c:	b236      	sxthne	r6, r6
 800862e:	e7ef      	b.n	8008610 <_printf_i+0xbc>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	1d19      	adds	r1, r3, #4
 8008636:	6029      	str	r1, [r5, #0]
 8008638:	0601      	lsls	r1, r0, #24
 800863a:	d501      	bpl.n	8008640 <_printf_i+0xec>
 800863c:	681e      	ldr	r6, [r3, #0]
 800863e:	e002      	b.n	8008646 <_printf_i+0xf2>
 8008640:	0646      	lsls	r6, r0, #25
 8008642:	d5fb      	bpl.n	800863c <_printf_i+0xe8>
 8008644:	881e      	ldrh	r6, [r3, #0]
 8008646:	4854      	ldr	r0, [pc, #336]	; (8008798 <_printf_i+0x244>)
 8008648:	2f6f      	cmp	r7, #111	; 0x6f
 800864a:	bf0c      	ite	eq
 800864c:	2308      	moveq	r3, #8
 800864e:	230a      	movne	r3, #10
 8008650:	2100      	movs	r1, #0
 8008652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008656:	6865      	ldr	r5, [r4, #4]
 8008658:	60a5      	str	r5, [r4, #8]
 800865a:	2d00      	cmp	r5, #0
 800865c:	bfa2      	ittt	ge
 800865e:	6821      	ldrge	r1, [r4, #0]
 8008660:	f021 0104 	bicge.w	r1, r1, #4
 8008664:	6021      	strge	r1, [r4, #0]
 8008666:	b90e      	cbnz	r6, 800866c <_printf_i+0x118>
 8008668:	2d00      	cmp	r5, #0
 800866a:	d04d      	beq.n	8008708 <_printf_i+0x1b4>
 800866c:	4615      	mov	r5, r2
 800866e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008672:	fb03 6711 	mls	r7, r3, r1, r6
 8008676:	5dc7      	ldrb	r7, [r0, r7]
 8008678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800867c:	4637      	mov	r7, r6
 800867e:	42bb      	cmp	r3, r7
 8008680:	460e      	mov	r6, r1
 8008682:	d9f4      	bls.n	800866e <_printf_i+0x11a>
 8008684:	2b08      	cmp	r3, #8
 8008686:	d10b      	bne.n	80086a0 <_printf_i+0x14c>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	07de      	lsls	r6, r3, #31
 800868c:	d508      	bpl.n	80086a0 <_printf_i+0x14c>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	4299      	cmp	r1, r3
 8008694:	bfde      	ittt	le
 8008696:	2330      	movle	r3, #48	; 0x30
 8008698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800869c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086a0:	1b52      	subs	r2, r2, r5
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	f8cd a000 	str.w	sl, [sp]
 80086a8:	464b      	mov	r3, r9
 80086aa:	aa03      	add	r2, sp, #12
 80086ac:	4621      	mov	r1, r4
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7ff fee2 	bl	8008478 <_printf_common>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d14c      	bne.n	8008752 <_printf_i+0x1fe>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086bc:	b004      	add	sp, #16
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	4835      	ldr	r0, [pc, #212]	; (8008798 <_printf_i+0x244>)
 80086c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086c8:	6829      	ldr	r1, [r5, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d0:	6029      	str	r1, [r5, #0]
 80086d2:	061d      	lsls	r5, r3, #24
 80086d4:	d514      	bpl.n	8008700 <_printf_i+0x1ac>
 80086d6:	07df      	lsls	r7, r3, #31
 80086d8:	bf44      	itt	mi
 80086da:	f043 0320 	orrmi.w	r3, r3, #32
 80086de:	6023      	strmi	r3, [r4, #0]
 80086e0:	b91e      	cbnz	r6, 80086ea <_printf_i+0x196>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	f023 0320 	bic.w	r3, r3, #32
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	2310      	movs	r3, #16
 80086ec:	e7b0      	b.n	8008650 <_printf_i+0xfc>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f043 0320 	orr.w	r3, r3, #32
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	2378      	movs	r3, #120	; 0x78
 80086f8:	4828      	ldr	r0, [pc, #160]	; (800879c <_printf_i+0x248>)
 80086fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086fe:	e7e3      	b.n	80086c8 <_printf_i+0x174>
 8008700:	0659      	lsls	r1, r3, #25
 8008702:	bf48      	it	mi
 8008704:	b2b6      	uxthmi	r6, r6
 8008706:	e7e6      	b.n	80086d6 <_printf_i+0x182>
 8008708:	4615      	mov	r5, r2
 800870a:	e7bb      	b.n	8008684 <_printf_i+0x130>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	6826      	ldr	r6, [r4, #0]
 8008710:	6961      	ldr	r1, [r4, #20]
 8008712:	1d18      	adds	r0, r3, #4
 8008714:	6028      	str	r0, [r5, #0]
 8008716:	0635      	lsls	r5, r6, #24
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	d501      	bpl.n	8008720 <_printf_i+0x1cc>
 800871c:	6019      	str	r1, [r3, #0]
 800871e:	e002      	b.n	8008726 <_printf_i+0x1d2>
 8008720:	0670      	lsls	r0, r6, #25
 8008722:	d5fb      	bpl.n	800871c <_printf_i+0x1c8>
 8008724:	8019      	strh	r1, [r3, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	4615      	mov	r5, r2
 800872c:	e7ba      	b.n	80086a4 <_printf_i+0x150>
 800872e:	682b      	ldr	r3, [r5, #0]
 8008730:	1d1a      	adds	r2, r3, #4
 8008732:	602a      	str	r2, [r5, #0]
 8008734:	681d      	ldr	r5, [r3, #0]
 8008736:	6862      	ldr	r2, [r4, #4]
 8008738:	2100      	movs	r1, #0
 800873a:	4628      	mov	r0, r5
 800873c:	f7f7 fd48 	bl	80001d0 <memchr>
 8008740:	b108      	cbz	r0, 8008746 <_printf_i+0x1f2>
 8008742:	1b40      	subs	r0, r0, r5
 8008744:	6060      	str	r0, [r4, #4]
 8008746:	6863      	ldr	r3, [r4, #4]
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	2300      	movs	r3, #0
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008750:	e7a8      	b.n	80086a4 <_printf_i+0x150>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	462a      	mov	r2, r5
 8008756:	4649      	mov	r1, r9
 8008758:	4640      	mov	r0, r8
 800875a:	47d0      	blx	sl
 800875c:	3001      	adds	r0, #1
 800875e:	d0ab      	beq.n	80086b8 <_printf_i+0x164>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	079b      	lsls	r3, r3, #30
 8008764:	d413      	bmi.n	800878e <_printf_i+0x23a>
 8008766:	68e0      	ldr	r0, [r4, #12]
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	4298      	cmp	r0, r3
 800876c:	bfb8      	it	lt
 800876e:	4618      	movlt	r0, r3
 8008770:	e7a4      	b.n	80086bc <_printf_i+0x168>
 8008772:	2301      	movs	r3, #1
 8008774:	4632      	mov	r2, r6
 8008776:	4649      	mov	r1, r9
 8008778:	4640      	mov	r0, r8
 800877a:	47d0      	blx	sl
 800877c:	3001      	adds	r0, #1
 800877e:	d09b      	beq.n	80086b8 <_printf_i+0x164>
 8008780:	3501      	adds	r5, #1
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	9903      	ldr	r1, [sp, #12]
 8008786:	1a5b      	subs	r3, r3, r1
 8008788:	42ab      	cmp	r3, r5
 800878a:	dcf2      	bgt.n	8008772 <_printf_i+0x21e>
 800878c:	e7eb      	b.n	8008766 <_printf_i+0x212>
 800878e:	2500      	movs	r5, #0
 8008790:	f104 0619 	add.w	r6, r4, #25
 8008794:	e7f5      	b.n	8008782 <_printf_i+0x22e>
 8008796:	bf00      	nop
 8008798:	08009153 	.word	0x08009153
 800879c:	08009164 	.word	0x08009164

080087a0 <__swbuf_r>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	460e      	mov	r6, r1
 80087a4:	4614      	mov	r4, r2
 80087a6:	4605      	mov	r5, r0
 80087a8:	b118      	cbz	r0, 80087b2 <__swbuf_r+0x12>
 80087aa:	6983      	ldr	r3, [r0, #24]
 80087ac:	b90b      	cbnz	r3, 80087b2 <__swbuf_r+0x12>
 80087ae:	f000 f9d9 	bl	8008b64 <__sinit>
 80087b2:	4b21      	ldr	r3, [pc, #132]	; (8008838 <__swbuf_r+0x98>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d12b      	bne.n	8008810 <__swbuf_r+0x70>
 80087b8:	686c      	ldr	r4, [r5, #4]
 80087ba:	69a3      	ldr	r3, [r4, #24]
 80087bc:	60a3      	str	r3, [r4, #8]
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	071a      	lsls	r2, r3, #28
 80087c2:	d52f      	bpl.n	8008824 <__swbuf_r+0x84>
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	b36b      	cbz	r3, 8008824 <__swbuf_r+0x84>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	1ac0      	subs	r0, r0, r3
 80087ce:	6963      	ldr	r3, [r4, #20]
 80087d0:	b2f6      	uxtb	r6, r6
 80087d2:	4283      	cmp	r3, r0
 80087d4:	4637      	mov	r7, r6
 80087d6:	dc04      	bgt.n	80087e2 <__swbuf_r+0x42>
 80087d8:	4621      	mov	r1, r4
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 f92e 	bl	8008a3c <_fflush_r>
 80087e0:	bb30      	cbnz	r0, 8008830 <__swbuf_r+0x90>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	701e      	strb	r6, [r3, #0]
 80087f0:	6963      	ldr	r3, [r4, #20]
 80087f2:	3001      	adds	r0, #1
 80087f4:	4283      	cmp	r3, r0
 80087f6:	d004      	beq.n	8008802 <__swbuf_r+0x62>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d506      	bpl.n	800880c <__swbuf_r+0x6c>
 80087fe:	2e0a      	cmp	r6, #10
 8008800:	d104      	bne.n	800880c <__swbuf_r+0x6c>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 f919 	bl	8008a3c <_fflush_r>
 800880a:	b988      	cbnz	r0, 8008830 <__swbuf_r+0x90>
 800880c:	4638      	mov	r0, r7
 800880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <__swbuf_r+0x9c>)
 8008812:	429c      	cmp	r4, r3
 8008814:	d101      	bne.n	800881a <__swbuf_r+0x7a>
 8008816:	68ac      	ldr	r4, [r5, #8]
 8008818:	e7cf      	b.n	80087ba <__swbuf_r+0x1a>
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <__swbuf_r+0xa0>)
 800881c:	429c      	cmp	r4, r3
 800881e:	bf08      	it	eq
 8008820:	68ec      	ldreq	r4, [r5, #12]
 8008822:	e7ca      	b.n	80087ba <__swbuf_r+0x1a>
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f80c 	bl	8008844 <__swsetup_r>
 800882c:	2800      	cmp	r0, #0
 800882e:	d0cb      	beq.n	80087c8 <__swbuf_r+0x28>
 8008830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008834:	e7ea      	b.n	800880c <__swbuf_r+0x6c>
 8008836:	bf00      	nop
 8008838:	08009198 	.word	0x08009198
 800883c:	080091b8 	.word	0x080091b8
 8008840:	08009178 	.word	0x08009178

08008844 <__swsetup_r>:
 8008844:	4b32      	ldr	r3, [pc, #200]	; (8008910 <__swsetup_r+0xcc>)
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	681d      	ldr	r5, [r3, #0]
 800884a:	4606      	mov	r6, r0
 800884c:	460c      	mov	r4, r1
 800884e:	b125      	cbz	r5, 800885a <__swsetup_r+0x16>
 8008850:	69ab      	ldr	r3, [r5, #24]
 8008852:	b913      	cbnz	r3, 800885a <__swsetup_r+0x16>
 8008854:	4628      	mov	r0, r5
 8008856:	f000 f985 	bl	8008b64 <__sinit>
 800885a:	4b2e      	ldr	r3, [pc, #184]	; (8008914 <__swsetup_r+0xd0>)
 800885c:	429c      	cmp	r4, r3
 800885e:	d10f      	bne.n	8008880 <__swsetup_r+0x3c>
 8008860:	686c      	ldr	r4, [r5, #4]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008868:	0719      	lsls	r1, r3, #28
 800886a:	d42c      	bmi.n	80088c6 <__swsetup_r+0x82>
 800886c:	06dd      	lsls	r5, r3, #27
 800886e:	d411      	bmi.n	8008894 <__swsetup_r+0x50>
 8008870:	2309      	movs	r3, #9
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800887e:	e03e      	b.n	80088fe <__swsetup_r+0xba>
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <__swsetup_r+0xd4>)
 8008882:	429c      	cmp	r4, r3
 8008884:	d101      	bne.n	800888a <__swsetup_r+0x46>
 8008886:	68ac      	ldr	r4, [r5, #8]
 8008888:	e7eb      	b.n	8008862 <__swsetup_r+0x1e>
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <__swsetup_r+0xd8>)
 800888c:	429c      	cmp	r4, r3
 800888e:	bf08      	it	eq
 8008890:	68ec      	ldreq	r4, [r5, #12]
 8008892:	e7e6      	b.n	8008862 <__swsetup_r+0x1e>
 8008894:	0758      	lsls	r0, r3, #29
 8008896:	d512      	bpl.n	80088be <__swsetup_r+0x7a>
 8008898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889a:	b141      	cbz	r1, 80088ae <__swsetup_r+0x6a>
 800889c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088a0:	4299      	cmp	r1, r3
 80088a2:	d002      	beq.n	80088aa <__swsetup_r+0x66>
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff fb07 	bl	8007eb8 <_free_r>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6363      	str	r3, [r4, #52]	; 0x34
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0308 	orr.w	r3, r3, #8
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	b94b      	cbnz	r3, 80088de <__swsetup_r+0x9a>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088d4:	d003      	beq.n	80088de <__swsetup_r+0x9a>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 fa09 	bl	8008cf0 <__smakebuf_r>
 80088de:	89a0      	ldrh	r0, [r4, #12]
 80088e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088e4:	f010 0301 	ands.w	r3, r0, #1
 80088e8:	d00a      	beq.n	8008900 <__swsetup_r+0xbc>
 80088ea:	2300      	movs	r3, #0
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6963      	ldr	r3, [r4, #20]
 80088f0:	425b      	negs	r3, r3
 80088f2:	61a3      	str	r3, [r4, #24]
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	b943      	cbnz	r3, 800890a <__swsetup_r+0xc6>
 80088f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088fc:	d1ba      	bne.n	8008874 <__swsetup_r+0x30>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	0781      	lsls	r1, r0, #30
 8008902:	bf58      	it	pl
 8008904:	6963      	ldrpl	r3, [r4, #20]
 8008906:	60a3      	str	r3, [r4, #8]
 8008908:	e7f4      	b.n	80088f4 <__swsetup_r+0xb0>
 800890a:	2000      	movs	r0, #0
 800890c:	e7f7      	b.n	80088fe <__swsetup_r+0xba>
 800890e:	bf00      	nop
 8008910:	200002f0 	.word	0x200002f0
 8008914:	08009198 	.word	0x08009198
 8008918:	080091b8 	.word	0x080091b8
 800891c:	08009178 	.word	0x08009178

08008920 <abort>:
 8008920:	b508      	push	{r3, lr}
 8008922:	2006      	movs	r0, #6
 8008924:	f000 fa4c 	bl	8008dc0 <raise>
 8008928:	2001      	movs	r0, #1
 800892a:	f7ff f96b 	bl	8007c04 <_exit>
	...

08008930 <__sflush_r>:
 8008930:	898a      	ldrh	r2, [r1, #12]
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	4605      	mov	r5, r0
 8008938:	0710      	lsls	r0, r2, #28
 800893a:	460c      	mov	r4, r1
 800893c:	d458      	bmi.n	80089f0 <__sflush_r+0xc0>
 800893e:	684b      	ldr	r3, [r1, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc05      	bgt.n	8008950 <__sflush_r+0x20>
 8008944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x20>
 800894a:	2000      	movs	r0, #0
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d0f9      	beq.n	800894a <__sflush_r+0x1a>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	d032      	beq.n	80089c8 <__sflush_r+0x98>
 8008962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	075a      	lsls	r2, r3, #29
 8008968:	d505      	bpl.n	8008976 <__sflush_r+0x46>
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	1ac0      	subs	r0, r0, r3
 800896e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008970:	b10b      	cbz	r3, 8008976 <__sflush_r+0x46>
 8008972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008974:	1ac0      	subs	r0, r0, r3
 8008976:	2300      	movs	r3, #0
 8008978:	4602      	mov	r2, r0
 800897a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	4628      	mov	r0, r5
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	d106      	bne.n	8008996 <__sflush_r+0x66>
 8008988:	6829      	ldr	r1, [r5, #0]
 800898a:	291d      	cmp	r1, #29
 800898c:	d82c      	bhi.n	80089e8 <__sflush_r+0xb8>
 800898e:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <__sflush_r+0x108>)
 8008990:	40ca      	lsrs	r2, r1
 8008992:	07d6      	lsls	r6, r2, #31
 8008994:	d528      	bpl.n	80089e8 <__sflush_r+0xb8>
 8008996:	2200      	movs	r2, #0
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	04d9      	lsls	r1, r3, #19
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	d504      	bpl.n	80089ac <__sflush_r+0x7c>
 80089a2:	1c42      	adds	r2, r0, #1
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0x7a>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b903      	cbnz	r3, 80089ac <__sflush_r+0x7c>
 80089aa:	6560      	str	r0, [r4, #84]	; 0x54
 80089ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d0ca      	beq.n	800894a <__sflush_r+0x1a>
 80089b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d002      	beq.n	80089c2 <__sflush_r+0x92>
 80089bc:	4628      	mov	r0, r5
 80089be:	f7ff fa7b 	bl	8007eb8 <_free_r>
 80089c2:	2000      	movs	r0, #0
 80089c4:	6360      	str	r0, [r4, #52]	; 0x34
 80089c6:	e7c1      	b.n	800894c <__sflush_r+0x1c>
 80089c8:	6a21      	ldr	r1, [r4, #32]
 80089ca:	2301      	movs	r3, #1
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b0      	blx	r6
 80089d0:	1c41      	adds	r1, r0, #1
 80089d2:	d1c7      	bne.n	8008964 <__sflush_r+0x34>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c4      	beq.n	8008964 <__sflush_r+0x34>
 80089da:	2b1d      	cmp	r3, #29
 80089dc:	d001      	beq.n	80089e2 <__sflush_r+0xb2>
 80089de:	2b16      	cmp	r3, #22
 80089e0:	d101      	bne.n	80089e6 <__sflush_r+0xb6>
 80089e2:	602f      	str	r7, [r5, #0]
 80089e4:	e7b1      	b.n	800894a <__sflush_r+0x1a>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e7ad      	b.n	800894c <__sflush_r+0x1c>
 80089f0:	690f      	ldr	r7, [r1, #16]
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	d0a9      	beq.n	800894a <__sflush_r+0x1a>
 80089f6:	0793      	lsls	r3, r2, #30
 80089f8:	680e      	ldr	r6, [r1, #0]
 80089fa:	bf08      	it	eq
 80089fc:	694b      	ldreq	r3, [r1, #20]
 80089fe:	600f      	str	r7, [r1, #0]
 8008a00:	bf18      	it	ne
 8008a02:	2300      	movne	r3, #0
 8008a04:	eba6 0807 	sub.w	r8, r6, r7
 8008a08:	608b      	str	r3, [r1, #8]
 8008a0a:	f1b8 0f00 	cmp.w	r8, #0
 8008a0e:	dd9c      	ble.n	800894a <__sflush_r+0x1a>
 8008a10:	6a21      	ldr	r1, [r4, #32]
 8008a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a14:	4643      	mov	r3, r8
 8008a16:	463a      	mov	r2, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b0      	blx	r6
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	dc06      	bgt.n	8008a2e <__sflush_r+0xfe>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a2c:	e78e      	b.n	800894c <__sflush_r+0x1c>
 8008a2e:	4407      	add	r7, r0
 8008a30:	eba8 0800 	sub.w	r8, r8, r0
 8008a34:	e7e9      	b.n	8008a0a <__sflush_r+0xda>
 8008a36:	bf00      	nop
 8008a38:	20400001 	.word	0x20400001

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6983      	ldr	r3, [r0, #24]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f000 f887 	bl	8008b64 <__sinit>
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <_fflush_r+0x6c>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d11b      	bne.n	8008a94 <_fflush_r+0x58>
 8008a5c:	686c      	ldr	r4, [r5, #4]
 8008a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ef      	beq.n	8008a46 <_fflush_r+0xa>
 8008a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a68:	07d0      	lsls	r0, r2, #31
 8008a6a:	d404      	bmi.n	8008a76 <_fflush_r+0x3a>
 8008a6c:	0599      	lsls	r1, r3, #22
 8008a6e:	d402      	bmi.n	8008a76 <_fflush_r+0x3a>
 8008a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a72:	f000 f915 	bl	8008ca0 <__retarget_lock_acquire_recursive>
 8008a76:	4628      	mov	r0, r5
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f7ff ff59 	bl	8008930 <__sflush_r>
 8008a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a80:	07da      	lsls	r2, r3, #31
 8008a82:	4605      	mov	r5, r0
 8008a84:	d4e0      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	059b      	lsls	r3, r3, #22
 8008a8a:	d4dd      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8e:	f000 f908 	bl	8008ca2 <__retarget_lock_release_recursive>
 8008a92:	e7d9      	b.n	8008a48 <_fflush_r+0xc>
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <_fflush_r+0x70>)
 8008a96:	429c      	cmp	r4, r3
 8008a98:	d101      	bne.n	8008a9e <_fflush_r+0x62>
 8008a9a:	68ac      	ldr	r4, [r5, #8]
 8008a9c:	e7df      	b.n	8008a5e <_fflush_r+0x22>
 8008a9e:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <_fflush_r+0x74>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	bf08      	it	eq
 8008aa4:	68ec      	ldreq	r4, [r5, #12]
 8008aa6:	e7da      	b.n	8008a5e <_fflush_r+0x22>
 8008aa8:	08009198 	.word	0x08009198
 8008aac:	080091b8 	.word	0x080091b8
 8008ab0:	08009178 	.word	0x08009178

08008ab4 <std>:
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	e9c0 3300 	strd	r3, r3, [r0]
 8008abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ac2:	6083      	str	r3, [r0, #8]
 8008ac4:	8181      	strh	r1, [r0, #12]
 8008ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ac8:	81c2      	strh	r2, [r0, #14]
 8008aca:	6183      	str	r3, [r0, #24]
 8008acc:	4619      	mov	r1, r3
 8008ace:	2208      	movs	r2, #8
 8008ad0:	305c      	adds	r0, #92	; 0x5c
 8008ad2:	f7ff f9e9 	bl	8007ea8 <memset>
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <std+0x38>)
 8008ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <std+0x3c>)
 8008adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <std+0x40>)
 8008ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ae2:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <std+0x44>)
 8008ae4:	6224      	str	r4, [r4, #32]
 8008ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	bf00      	nop
 8008aec:	08008df9 	.word	0x08008df9
 8008af0:	08008e1b 	.word	0x08008e1b
 8008af4:	08008e53 	.word	0x08008e53
 8008af8:	08008e77 	.word	0x08008e77

08008afc <_cleanup_r>:
 8008afc:	4901      	ldr	r1, [pc, #4]	; (8008b04 <_cleanup_r+0x8>)
 8008afe:	f000 b8af 	b.w	8008c60 <_fwalk_reent>
 8008b02:	bf00      	nop
 8008b04:	08008a3d 	.word	0x08008a3d

08008b08 <__sfmoreglue>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	2268      	movs	r2, #104	; 0x68
 8008b0c:	1e4d      	subs	r5, r1, #1
 8008b0e:	4355      	muls	r5, r2
 8008b10:	460e      	mov	r6, r1
 8008b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b16:	f7ff fa3b 	bl	8007f90 <_malloc_r>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b140      	cbz	r0, 8008b30 <__sfmoreglue+0x28>
 8008b1e:	2100      	movs	r1, #0
 8008b20:	e9c0 1600 	strd	r1, r6, [r0]
 8008b24:	300c      	adds	r0, #12
 8008b26:	60a0      	str	r0, [r4, #8]
 8008b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b2c:	f7ff f9bc 	bl	8007ea8 <memset>
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd70      	pop	{r4, r5, r6, pc}

08008b34 <__sfp_lock_acquire>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__sfp_lock_acquire+0x8>)
 8008b36:	f000 b8b3 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20002a39 	.word	0x20002a39

08008b40 <__sfp_lock_release>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__sfp_lock_release+0x8>)
 8008b42:	f000 b8ae 	b.w	8008ca2 <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	20002a39 	.word	0x20002a39

08008b4c <__sinit_lock_acquire>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__sinit_lock_acquire+0x8>)
 8008b4e:	f000 b8a7 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 8008b52:	bf00      	nop
 8008b54:	20002a3a 	.word	0x20002a3a

08008b58 <__sinit_lock_release>:
 8008b58:	4801      	ldr	r0, [pc, #4]	; (8008b60 <__sinit_lock_release+0x8>)
 8008b5a:	f000 b8a2 	b.w	8008ca2 <__retarget_lock_release_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20002a3a 	.word	0x20002a3a

08008b64 <__sinit>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	f7ff fff0 	bl	8008b4c <__sinit_lock_acquire>
 8008b6c:	69a3      	ldr	r3, [r4, #24]
 8008b6e:	b11b      	cbz	r3, 8008b78 <__sinit+0x14>
 8008b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b74:	f7ff bff0 	b.w	8008b58 <__sinit_lock_release>
 8008b78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b7c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <__sinit+0x68>)
 8008b80:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <__sinit+0x6c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	bf04      	itt	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	61a3      	streq	r3, [r4, #24]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f820 	bl	8008bd4 <__sfp>
 8008b94:	6060      	str	r0, [r4, #4]
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 f81c 	bl	8008bd4 <__sfp>
 8008b9c:	60a0      	str	r0, [r4, #8]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f818 	bl	8008bd4 <__sfp>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	60e0      	str	r0, [r4, #12]
 8008ba8:	2104      	movs	r1, #4
 8008baa:	6860      	ldr	r0, [r4, #4]
 8008bac:	f7ff ff82 	bl	8008ab4 <std>
 8008bb0:	68a0      	ldr	r0, [r4, #8]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	2109      	movs	r1, #9
 8008bb6:	f7ff ff7d 	bl	8008ab4 <std>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	2112      	movs	r1, #18
 8008bc0:	f7ff ff78 	bl	8008ab4 <std>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	61a3      	str	r3, [r4, #24]
 8008bc8:	e7d2      	b.n	8008b70 <__sinit+0xc>
 8008bca:	bf00      	nop
 8008bcc:	08009090 	.word	0x08009090
 8008bd0:	08008afd 	.word	0x08008afd

08008bd4 <__sfp>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	f7ff ffac 	bl	8008b34 <__sfp_lock_acquire>
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <__sfp+0x84>)
 8008bde:	681e      	ldr	r6, [r3, #0]
 8008be0:	69b3      	ldr	r3, [r6, #24]
 8008be2:	b913      	cbnz	r3, 8008bea <__sfp+0x16>
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff ffbd 	bl	8008b64 <__sinit>
 8008bea:	3648      	adds	r6, #72	; 0x48
 8008bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	d503      	bpl.n	8008bfc <__sfp+0x28>
 8008bf4:	6833      	ldr	r3, [r6, #0]
 8008bf6:	b30b      	cbz	r3, 8008c3c <__sfp+0x68>
 8008bf8:	6836      	ldr	r6, [r6, #0]
 8008bfa:	e7f7      	b.n	8008bec <__sfp+0x18>
 8008bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c00:	b9d5      	cbnz	r5, 8008c38 <__sfp+0x64>
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <__sfp+0x88>)
 8008c04:	60e3      	str	r3, [r4, #12]
 8008c06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c0c:	f000 f847 	bl	8008c9e <__retarget_lock_init_recursive>
 8008c10:	f7ff ff96 	bl	8008b40 <__sfp_lock_release>
 8008c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c1c:	6025      	str	r5, [r4, #0]
 8008c1e:	61a5      	str	r5, [r4, #24]
 8008c20:	2208      	movs	r2, #8
 8008c22:	4629      	mov	r1, r5
 8008c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c28:	f7ff f93e 	bl	8007ea8 <memset>
 8008c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c34:	4620      	mov	r0, r4
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	3468      	adds	r4, #104	; 0x68
 8008c3a:	e7d9      	b.n	8008bf0 <__sfp+0x1c>
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7ff ff62 	bl	8008b08 <__sfmoreglue>
 8008c44:	4604      	mov	r4, r0
 8008c46:	6030      	str	r0, [r6, #0]
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1d5      	bne.n	8008bf8 <__sfp+0x24>
 8008c4c:	f7ff ff78 	bl	8008b40 <__sfp_lock_release>
 8008c50:	230c      	movs	r3, #12
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	e7ee      	b.n	8008c34 <__sfp+0x60>
 8008c56:	bf00      	nop
 8008c58:	08009090 	.word	0x08009090
 8008c5c:	ffff0001 	.word	0xffff0001

08008c60 <_fwalk_reent>:
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	4606      	mov	r6, r0
 8008c66:	4688      	mov	r8, r1
 8008c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c6c:	2700      	movs	r7, #0
 8008c6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c72:	f1b9 0901 	subs.w	r9, r9, #1
 8008c76:	d505      	bpl.n	8008c84 <_fwalk_reent+0x24>
 8008c78:	6824      	ldr	r4, [r4, #0]
 8008c7a:	2c00      	cmp	r4, #0
 8008c7c:	d1f7      	bne.n	8008c6e <_fwalk_reent+0xe>
 8008c7e:	4638      	mov	r0, r7
 8008c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c84:	89ab      	ldrh	r3, [r5, #12]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d907      	bls.n	8008c9a <_fwalk_reent+0x3a>
 8008c8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	d003      	beq.n	8008c9a <_fwalk_reent+0x3a>
 8008c92:	4629      	mov	r1, r5
 8008c94:	4630      	mov	r0, r6
 8008c96:	47c0      	blx	r8
 8008c98:	4307      	orrs	r7, r0
 8008c9a:	3568      	adds	r5, #104	; 0x68
 8008c9c:	e7e9      	b.n	8008c72 <_fwalk_reent+0x12>

08008c9e <__retarget_lock_init_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <__retarget_lock_acquire_recursive>:
 8008ca0:	4770      	bx	lr

08008ca2 <__retarget_lock_release_recursive>:
 8008ca2:	4770      	bx	lr

08008ca4 <__swhatbuf_r>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	460e      	mov	r6, r1
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	b096      	sub	sp, #88	; 0x58
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	da08      	bge.n	8008cc8 <__swhatbuf_r+0x24>
 8008cb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	061a      	lsls	r2, r3, #24
 8008cc0:	d410      	bmi.n	8008ce4 <__swhatbuf_r+0x40>
 8008cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc6:	e00e      	b.n	8008ce6 <__swhatbuf_r+0x42>
 8008cc8:	466a      	mov	r2, sp
 8008cca:	f000 f8fb 	bl	8008ec4 <_fstat_r>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	dbf1      	blt.n	8008cb6 <__swhatbuf_r+0x12>
 8008cd2:	9a01      	ldr	r2, [sp, #4]
 8008cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cdc:	425a      	negs	r2, r3
 8008cde:	415a      	adcs	r2, r3
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	e7ee      	b.n	8008cc2 <__swhatbuf_r+0x1e>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	b016      	add	sp, #88	; 0x58
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cf0 <__smakebuf_r>:
 8008cf0:	898b      	ldrh	r3, [r1, #12]
 8008cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cf4:	079d      	lsls	r5, r3, #30
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d507      	bpl.n	8008d0c <__smakebuf_r+0x1c>
 8008cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	2301      	movs	r3, #1
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	ab01      	add	r3, sp, #4
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f7ff ffc8 	bl	8008ca4 <__swhatbuf_r>
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff f939 	bl	8007f90 <_malloc_r>
 8008d1e:	b948      	cbnz	r0, 8008d34 <__smakebuf_r+0x44>
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d4ef      	bmi.n	8008d08 <__smakebuf_r+0x18>
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7e3      	b.n	8008cfc <__smakebuf_r+0xc>
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <__smakebuf_r+0x7c>)
 8008d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	b15b      	cbz	r3, 8008d64 <__smakebuf_r+0x74>
 8008d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f8c9 	bl	8008ee8 <_isatty_r>
 8008d56:	b128      	cbz	r0, 8008d64 <__smakebuf_r+0x74>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	89a0      	ldrh	r0, [r4, #12]
 8008d66:	4305      	orrs	r5, r0
 8008d68:	81a5      	strh	r5, [r4, #12]
 8008d6a:	e7cd      	b.n	8008d08 <__smakebuf_r+0x18>
 8008d6c:	08008afd 	.word	0x08008afd

08008d70 <_raise_r>:
 8008d70:	291f      	cmp	r1, #31
 8008d72:	b538      	push	{r3, r4, r5, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	d904      	bls.n	8008d84 <_raise_r+0x14>
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d86:	b112      	cbz	r2, 8008d8e <_raise_r+0x1e>
 8008d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d8c:	b94b      	cbnz	r3, 8008da2 <_raise_r+0x32>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f830 	bl	8008df4 <_getpid_r>
 8008d94:	462a      	mov	r2, r5
 8008d96:	4601      	mov	r1, r0
 8008d98:	4620      	mov	r0, r4
 8008d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9e:	f000 b817 	b.w	8008dd0 <_kill_r>
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d00a      	beq.n	8008dbc <_raise_r+0x4c>
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	d103      	bne.n	8008db2 <_raise_r+0x42>
 8008daa:	2316      	movs	r3, #22
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7e7      	b.n	8008d82 <_raise_r+0x12>
 8008db2:	2400      	movs	r4, #0
 8008db4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008db8:	4628      	mov	r0, r5
 8008dba:	4798      	blx	r3
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7e0      	b.n	8008d82 <_raise_r+0x12>

08008dc0 <raise>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <raise+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f7ff bfd3 	b.w	8008d70 <_raise_r>
 8008dca:	bf00      	nop
 8008dcc:	200002f0 	.word	0x200002f0

08008dd0 <_kill_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d07      	ldr	r5, [pc, #28]	; (8008df0 <_kill_r+0x20>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	f7fe ff01 	bl	8007be4 <_kill>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d102      	bne.n	8008dec <_kill_r+0x1c>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b103      	cbz	r3, 8008dec <_kill_r+0x1c>
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	bd38      	pop	{r3, r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	20002a34 	.word	0x20002a34

08008df4 <_getpid_r>:
 8008df4:	f7fe beee 	b.w	8007bd4 <_getpid>

08008df8 <__sread>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e00:	f000 f894 	bl	8008f2c <_read_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	bfab      	itete	ge
 8008e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e0c:	181b      	addge	r3, r3, r0
 8008e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e12:	bfac      	ite	ge
 8008e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e16:	81a3      	strhlt	r3, [r4, #12]
 8008e18:	bd10      	pop	{r4, pc}

08008e1a <__swrite>:
 8008e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1e:	461f      	mov	r7, r3
 8008e20:	898b      	ldrh	r3, [r1, #12]
 8008e22:	05db      	lsls	r3, r3, #23
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	4616      	mov	r6, r2
 8008e2a:	d505      	bpl.n	8008e38 <__swrite+0x1e>
 8008e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e30:	2302      	movs	r3, #2
 8008e32:	2200      	movs	r2, #0
 8008e34:	f000 f868 	bl	8008f08 <_lseek_r>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	4632      	mov	r2, r6
 8008e46:	463b      	mov	r3, r7
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4e:	f000 b817 	b.w	8008e80 <_write_r>

08008e52 <__sseek>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5a:	f000 f855 	bl	8008f08 <_lseek_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	bf15      	itete	ne
 8008e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e6e:	81a3      	strheq	r3, [r4, #12]
 8008e70:	bf18      	it	ne
 8008e72:	81a3      	strhne	r3, [r4, #12]
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <__sclose>:
 8008e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7a:	f000 b813 	b.w	8008ea4 <_close_r>
	...

08008e80 <_write_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	; (8008ea0 <_write_r+0x20>)
 8008e84:	4604      	mov	r4, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7fe fedf 	bl	8007c52 <_write>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_write_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_write_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20002a34 	.word	0x20002a34

08008ea4 <_close_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d06      	ldr	r5, [pc, #24]	; (8008ec0 <_close_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	f7fe feeb 	bl	8007c8a <_close>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_close_r+0x1a>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_close_r+0x1a>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20002a34 	.word	0x20002a34

08008ec4 <_fstat_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_fstat_r+0x20>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f7fe fee6 	bl	8007ca2 <_fstat>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d102      	bne.n	8008ee0 <_fstat_r+0x1c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	b103      	cbz	r3, 8008ee0 <_fstat_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20002a34 	.word	0x20002a34

08008ee8 <_isatty_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_isatty_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7fe fee5 	bl	8007cc2 <_isatty>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_isatty_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_isatty_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20002a34 	.word	0x20002a34

08008f08 <_lseek_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	; (8008f28 <_lseek_r+0x20>)
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	4608      	mov	r0, r1
 8008f10:	4611      	mov	r1, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	602a      	str	r2, [r5, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f7fe fede 	bl	8007cd8 <_lseek>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_lseek_r+0x1e>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_lseek_r+0x1e>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20002a34 	.word	0x20002a34

08008f2c <_read_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d07      	ldr	r5, [pc, #28]	; (8008f4c <_read_r+0x20>)
 8008f30:	4604      	mov	r4, r0
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	602a      	str	r2, [r5, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f7fe fe6c 	bl	8007c18 <_read>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_read_r+0x1e>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_read_r+0x1e>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20002a34 	.word	0x20002a34

08008f50 <_gettimeofday>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <_gettimeofday+0xc>)
 8008f52:	2258      	movs	r2, #88	; 0x58
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5a:	4770      	bx	lr
 8008f5c:	20002a34 	.word	0x20002a34

08008f60 <_init>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr

08008f6c <_fini>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr
